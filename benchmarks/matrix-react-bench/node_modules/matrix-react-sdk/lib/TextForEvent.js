"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hasText = hasText;
exports.textForEvent = textForEvent;

var _react = _interopRequireDefault(require("react"));

var _languageHandler = require("./languageHandler");

var Roles = _interopRequireWildcard(require("./Roles"));

var _RoomInvite = require("./RoomInvite");

var _SettingsStore = _interopRequireDefault(require("./settings/SettingsStore"));

var _BanList = require("./mjolnir/BanList");

var _WidgetLayoutStore = require("./stores/widgets/WidgetLayoutStore");

var _RightPanelStorePhases = require("./stores/RightPanelStorePhases");

var _actions = require("./dispatcher/actions");

var _dispatcher = _interopRequireDefault(require("./dispatcher/dispatcher"));

var _partials = require("matrix-js-sdk/src/@types/partials");

var _event = require("matrix-js-sdk/src/@types/event");

var _MatrixClientPeg = require("./MatrixClientPeg");

var _RoomSettingsDialog = require("./components/views/dialogs/RoomSettingsDialog");

var _logger = require("matrix-js-sdk/src/logger");

var _utils = require("matrix-js-sdk/src/utils");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
Copyright 2015, 2016 OpenMarket Ltd

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// These functions are frequently used just to check whether an event has
// any text to display at all. For this reason they return deferred values
// to avoid the expense of looking up translations when they're not needed.
function textForCallInviteEvent(event) {
  const getSenderName = () => event.sender ? event.sender.name : (0, _languageHandler._t)('Someone'); // FIXME: Find a better way to determine this from the event?


  let isVoice = true;

  if (event.getContent().offer && event.getContent().offer.sdp && event.getContent().offer.sdp.indexOf('m=video') !== -1) {
    isVoice = false;
  }

  const isSupported = _MatrixClientPeg.MatrixClientPeg.get().supportsVoip(); // This ladder could be reduced down to a couple string variables, however other languages
  // can have a hard time translating those strings. In an effort to make translations easier
  // and more accurate, we break out the string-based variables to a couple booleans.


  if (isVoice && isSupported) {
    return () => (0, _languageHandler._t)("%(senderName)s placed a voice call.", {
      senderName: getSenderName()
    });
  } else if (isVoice && !isSupported) {
    return () => (0, _languageHandler._t)("%(senderName)s placed a voice call. (not supported by this browser)", {
      senderName: getSenderName()
    });
  } else if (!isVoice && isSupported) {
    return () => (0, _languageHandler._t)("%(senderName)s placed a video call.", {
      senderName: getSenderName()
    });
  } else if (!isVoice && !isSupported) {
    return () => (0, _languageHandler._t)("%(senderName)s placed a video call. (not supported by this browser)", {
      senderName: getSenderName()
    });
  }
}

function textForMemberEvent(ev, allowJSX, showHiddenEvents) {
  // XXX: SYJS-16 "sender is sometimes null for join messages"
  const senderName = ev.sender ? ev.sender.name : ev.getSender();
  const targetName = ev.target ? ev.target.name : ev.getStateKey();
  const prevContent = ev.getPrevContent();
  const content = ev.getContent();
  const reason = content.reason;

  switch (content.membership) {
    case 'invite':
      {
        const threePidContent = content.third_party_invite;

        if (threePidContent) {
          if (threePidContent.display_name) {
            return () => (0, _languageHandler._t)('%(targetName)s accepted the invitation for %(displayName)s', {
              targetName,
              displayName: threePidContent.display_name
            });
          } else {
            return () => (0, _languageHandler._t)('%(targetName)s accepted an invitation', {
              targetName
            });
          }
        } else {
          return () => (0, _languageHandler._t)('%(senderName)s invited %(targetName)s', {
            senderName,
            targetName
          });
        }
      }

    case 'ban':
      return () => reason ? (0, _languageHandler._t)('%(senderName)s banned %(targetName)s: %(reason)s', {
        senderName,
        targetName,
        reason
      }) : (0, _languageHandler._t)('%(senderName)s banned %(targetName)s', {
        senderName,
        targetName
      });

    case 'join':
      if (prevContent && prevContent.membership === 'join') {
        if (prevContent.displayname && content.displayname && prevContent.displayname !== content.displayname) {
          return () => (0, _languageHandler._t)('%(oldDisplayName)s changed their display name to %(displayName)s', {
            // We're taking the display namke directly from the event content here so we need
            // to strip direction override chars which the js-sdk would normally do when
            // calculating the display name
            oldDisplayName: (0, _utils.removeDirectionOverrideChars)(prevContent.displayname),
            displayName: (0, _utils.removeDirectionOverrideChars)(content.displayname)
          });
        } else if (!prevContent.displayname && content.displayname) {
          return () => (0, _languageHandler._t)('%(senderName)s set their display name to %(displayName)s', {
            senderName: ev.getSender(),
            displayName: (0, _utils.removeDirectionOverrideChars)(content.displayname)
          });
        } else if (prevContent.displayname && !content.displayname) {
          return () => (0, _languageHandler._t)('%(senderName)s removed their display name (%(oldDisplayName)s)', {
            senderName,
            oldDisplayName: (0, _utils.removeDirectionOverrideChars)(prevContent.displayname)
          });
        } else if (prevContent.avatar_url && !content.avatar_url) {
          return () => (0, _languageHandler._t)('%(senderName)s removed their profile picture', {
            senderName
          });
        } else if (prevContent.avatar_url && content.avatar_url && prevContent.avatar_url !== content.avatar_url) {
          return () => (0, _languageHandler._t)('%(senderName)s changed their profile picture', {
            senderName
          });
        } else if (!prevContent.avatar_url && content.avatar_url) {
          return () => (0, _languageHandler._t)('%(senderName)s set a profile picture', {
            senderName
          });
        } else if (showHiddenEvents ?? _SettingsStore.default.getValue("showHiddenEventsInTimeline")) {
          // This is a null rejoin, it will only be visible if using 'show hidden events' (labs)
          return () => (0, _languageHandler._t)("%(senderName)s made no change", {
            senderName
          });
        } else {
          return null;
        }
      } else {
        if (!ev.target) _logger.logger.warn("Join message has no target! -- " + ev.getContent().state_key);
        return () => (0, _languageHandler._t)('%(targetName)s joined the room', {
          targetName
        });
      }

    case 'leave':
      if (ev.getSender() === ev.getStateKey()) {
        if (prevContent.membership === "invite") {
          return () => (0, _languageHandler._t)('%(targetName)s rejected the invitation', {
            targetName
          });
        } else {
          return () => reason ? (0, _languageHandler._t)('%(targetName)s left the room: %(reason)s', {
            targetName,
            reason
          }) : (0, _languageHandler._t)('%(targetName)s left the room', {
            targetName
          });
        }
      } else if (prevContent.membership === "ban") {
        return () => (0, _languageHandler._t)('%(senderName)s unbanned %(targetName)s', {
          senderName,
          targetName
        });
      } else if (prevContent.membership === "invite") {
        return () => reason ? (0, _languageHandler._t)('%(senderName)s withdrew %(targetName)s\'s invitation: %(reason)s', {
          senderName,
          targetName,
          reason
        }) : (0, _languageHandler._t)('%(senderName)s withdrew %(targetName)s\'s invitation', {
          senderName,
          targetName
        });
      } else if (prevContent.membership === "join") {
        return () => reason ? (0, _languageHandler._t)('%(senderName)s kicked %(targetName)s: %(reason)s', {
          senderName,
          targetName,
          reason
        }) : (0, _languageHandler._t)('%(senderName)s kicked %(targetName)s', {
          senderName,
          targetName
        });
      } else {
        return null;
      }

  }
}

function textForTopicEvent(ev) {
  const senderDisplayName = ev.sender && ev.sender.name ? ev.sender.name : ev.getSender();
  return () => (0, _languageHandler._t)('%(senderDisplayName)s changed the topic to "%(topic)s".', {
    senderDisplayName,
    topic: ev.getContent().topic
  });
}

function textForRoomAvatarEvent(ev) {
  var _ev$sender;

  const senderDisplayName = (ev === null || ev === void 0 ? void 0 : (_ev$sender = ev.sender) === null || _ev$sender === void 0 ? void 0 : _ev$sender.name) || ev.getSender();
  return () => (0, _languageHandler._t)('%(senderDisplayName)s changed the room avatar.', {
    senderDisplayName
  });
}

function textForRoomNameEvent(ev) {
  const senderDisplayName = ev.sender && ev.sender.name ? ev.sender.name : ev.getSender();

  if (!ev.getContent().name || ev.getContent().name.trim().length === 0) {
    return () => (0, _languageHandler._t)('%(senderDisplayName)s removed the room name.', {
      senderDisplayName
    });
  }

  if (ev.getPrevContent().name) {
    return () => (0, _languageHandler._t)('%(senderDisplayName)s changed the room name from %(oldRoomName)s to %(newRoomName)s.', {
      senderDisplayName,
      oldRoomName: ev.getPrevContent().name,
      newRoomName: ev.getContent().name
    });
  }

  return () => (0, _languageHandler._t)('%(senderDisplayName)s changed the room name to %(roomName)s.', {
    senderDisplayName,
    roomName: ev.getContent().name
  });
}

function textForTombstoneEvent(ev) {
  const senderDisplayName = ev.sender && ev.sender.name ? ev.sender.name : ev.getSender();
  return () => (0, _languageHandler._t)('%(senderDisplayName)s upgraded this room.', {
    senderDisplayName
  });
}

const onViewJoinRuleSettingsClick = () => {
  _dispatcher.default.dispatch({
    action: "open_room_settings",
    initial_tab_id: _RoomSettingsDialog.ROOM_SECURITY_TAB
  });
};

function textForJoinRulesEvent(ev, allowJSX) {
  const senderDisplayName = ev.sender && ev.sender.name ? ev.sender.name : ev.getSender();

  switch (ev.getContent().join_rule) {
    case _partials.JoinRule.Public:
      return () => (0, _languageHandler._t)('%(senderDisplayName)s made the room public to whoever knows the link.', {
        senderDisplayName
      });

    case _partials.JoinRule.Invite:
      return () => (0, _languageHandler._t)('%(senderDisplayName)s made the room invite only.', {
        senderDisplayName
      });

    case _partials.JoinRule.Restricted:
      if (allowJSX) {
        return () => /*#__PURE__*/_react.default.createElement("span", null, (0, _languageHandler._t)('%(senderDisplayName)s changed who can join this room. <a>View settings</a>.', {
          senderDisplayName
        }, {
          "a": sub => /*#__PURE__*/_react.default.createElement("a", {
            onClick: onViewJoinRuleSettingsClick
          }, sub)
        }));
      }

      return () => (0, _languageHandler._t)('%(senderDisplayName)s changed who can join this room.', {
        senderDisplayName
      });

    default:
      // The spec supports "knock" and "private", however nothing implements these.
      return () => (0, _languageHandler._t)('%(senderDisplayName)s changed the join rule to %(rule)s', {
        senderDisplayName,
        rule: ev.getContent().join_rule
      });
  }
}

function textForGuestAccessEvent(ev) {
  const senderDisplayName = ev.sender && ev.sender.name ? ev.sender.name : ev.getSender();

  switch (ev.getContent().guest_access) {
    case _partials.GuestAccess.CanJoin:
      return () => (0, _languageHandler._t)('%(senderDisplayName)s has allowed guests to join the room.', {
        senderDisplayName
      });

    case _partials.GuestAccess.Forbidden:
      return () => (0, _languageHandler._t)('%(senderDisplayName)s has prevented guests from joining the room.', {
        senderDisplayName
      });

    default:
      // There's no other options we can expect, however just for safety's sake we'll do this.
      return () => (0, _languageHandler._t)('%(senderDisplayName)s changed guest access to %(rule)s', {
        senderDisplayName,
        rule: ev.getContent().guest_access
      });
  }
}

function textForRelatedGroupsEvent(ev) {
  const senderDisplayName = ev.sender && ev.sender.name ? ev.sender.name : ev.getSender();
  const groups = ev.getContent().groups || [];
  const prevGroups = ev.getPrevContent().groups || [];
  const added = groups.filter(g => !prevGroups.includes(g));
  const removed = prevGroups.filter(g => !groups.includes(g));

  if (added.length && !removed.length) {
    return () => (0, _languageHandler._t)('%(senderDisplayName)s enabled flair for %(groups)s in this room.', {
      senderDisplayName,
      groups: added.join(', ')
    });
  } else if (!added.length && removed.length) {
    return () => (0, _languageHandler._t)('%(senderDisplayName)s disabled flair for %(groups)s in this room.', {
      senderDisplayName,
      groups: removed.join(', ')
    });
  } else if (added.length && removed.length) {
    return () => (0, _languageHandler._t)('%(senderDisplayName)s enabled flair for %(newGroups)s and disabled flair for ' + '%(oldGroups)s in this room.', {
      senderDisplayName,
      newGroups: added.join(', '),
      oldGroups: removed.join(', ')
    });
  } else {
    // Don't bother rendering this change (because there were no changes)
    return null;
  }
}

function textForServerACLEvent(ev) {
  const senderDisplayName = ev.sender && ev.sender.name ? ev.sender.name : ev.getSender();
  const prevContent = ev.getPrevContent();
  const current = ev.getContent();
  const prev = {
    deny: Array.isArray(prevContent.deny) ? prevContent.deny : [],
    allow: Array.isArray(prevContent.allow) ? prevContent.allow : [],
    allow_ip_literals: !(prevContent.allow_ip_literals === false)
  };
  let getText = null;

  if (prev.deny.length === 0 && prev.allow.length === 0) {
    getText = () => (0, _languageHandler._t)("%(senderDisplayName)s set the server ACLs for this room.", {
      senderDisplayName
    });
  } else {
    getText = () => (0, _languageHandler._t)("%(senderDisplayName)s changed the server ACLs for this room.", {
      senderDisplayName
    });
  }

  if (!Array.isArray(current.allow)) {
    current.allow = [];
  } // If we know for sure everyone is banned, mark the room as obliterated


  if (current.allow.length === 0) {
    return () => getText() + " " + (0, _languageHandler._t)("🎉 All servers are banned from participating! This room can no longer be used.");
  }

  return getText;
}

function textForMessageEvent(ev) {
  return () => {
    const senderDisplayName = ev.sender && ev.sender.name ? ev.sender.name : ev.getSender();
    let message = ev.getContent().body;

    if (ev.isRedacted()) {
      var _unsigned$redacted_be;

      message = (0, _languageHandler._t)("Message deleted");
      const unsigned = ev.getUnsigned();
      const redactedBecauseUserId = unsigned === null || unsigned === void 0 ? void 0 : (_unsigned$redacted_be = unsigned.redacted_because) === null || _unsigned$redacted_be === void 0 ? void 0 : _unsigned$redacted_be.sender;

      if (redactedBecauseUserId && redactedBecauseUserId !== ev.getSender()) {
        const room = _MatrixClientPeg.MatrixClientPeg.get().getRoom(ev.getRoomId());

        const sender = room === null || room === void 0 ? void 0 : room.getMember(redactedBecauseUserId);
        message = (0, _languageHandler._t)("Message deleted by %(name)s", {
          name: (sender === null || sender === void 0 ? void 0 : sender.name) || redactedBecauseUserId
        });
      }
    }

    if (ev.getContent().msgtype === _event.MsgType.Emote) {
      message = "* " + senderDisplayName + " " + message;
    } else if (ev.getContent().msgtype === _event.MsgType.Image) {
      message = (0, _languageHandler._t)('%(senderDisplayName)s sent an image.', {
        senderDisplayName
      });
    } else if (ev.getType() == _event.EventType.Sticker) {
      message = (0, _languageHandler._t)('%(senderDisplayName)s sent a sticker.', {
        senderDisplayName
      });
    } else {
      // in this case, parse it as a plain text message
      message = senderDisplayName + ': ' + message;
    }

    return message;
  };
}

function textForCanonicalAliasEvent(ev) {
  const senderName = ev.sender && ev.sender.name ? ev.sender.name : ev.getSender();
  const oldAlias = ev.getPrevContent().alias;
  const oldAltAliases = ev.getPrevContent().alt_aliases || [];
  const newAlias = ev.getContent().alias;
  const newAltAliases = ev.getContent().alt_aliases || [];
  const removedAltAliases = oldAltAliases.filter(alias => !newAltAliases.includes(alias));
  const addedAltAliases = newAltAliases.filter(alias => !oldAltAliases.includes(alias));

  if (!removedAltAliases.length && !addedAltAliases.length) {
    if (newAlias) {
      return () => (0, _languageHandler._t)('%(senderName)s set the main address for this room to %(address)s.', {
        senderName: senderName,
        address: ev.getContent().alias
      });
    } else if (oldAlias) {
      return () => (0, _languageHandler._t)('%(senderName)s removed the main address for this room.', {
        senderName: senderName
      });
    }
  } else if (newAlias === oldAlias) {
    if (addedAltAliases.length && !removedAltAliases.length) {
      return () => (0, _languageHandler._t)('%(senderName)s added the alternative addresses %(addresses)s for this room.', {
        senderName: senderName,
        addresses: addedAltAliases.join(", "),
        count: addedAltAliases.length
      });
    }

    if (removedAltAliases.length && !addedAltAliases.length) {
      return () => (0, _languageHandler._t)('%(senderName)s removed the alternative addresses %(addresses)s for this room.', {
        senderName: senderName,
        addresses: removedAltAliases.join(", "),
        count: removedAltAliases.length
      });
    }

    if (removedAltAliases.length && addedAltAliases.length) {
      return () => (0, _languageHandler._t)('%(senderName)s changed the alternative addresses for this room.', {
        senderName: senderName
      });
    }
  } else {
    // both alias and alt_aliases where modified
    return () => (0, _languageHandler._t)('%(senderName)s changed the main and alternative addresses for this room.', {
      senderName: senderName
    });
  } // in case there is no difference between the two events,
  // say something as we can't simply hide the tile from here


  return () => (0, _languageHandler._t)('%(senderName)s changed the addresses for this room.', {
    senderName: senderName
  });
}

function textForThreePidInviteEvent(event) {
  const senderName = event.sender ? event.sender.name : event.getSender();

  if (!(0, _RoomInvite.isValid3pidInvite)(event)) {
    return () => (0, _languageHandler._t)('%(senderName)s revoked the invitation for %(targetDisplayName)s to join the room.', {
      senderName,
      targetDisplayName: event.getPrevContent().display_name || (0, _languageHandler._t)("Someone")
    });
  }

  return () => (0, _languageHandler._t)('%(senderName)s sent an invitation to %(targetDisplayName)s to join the room.', {
    senderName,
    targetDisplayName: event.getContent().display_name
  });
}

function textForHistoryVisibilityEvent(event) {
  const senderName = event.sender ? event.sender.name : event.getSender();

  switch (event.getContent().history_visibility) {
    case _partials.HistoryVisibility.Invited:
      return () => (0, _languageHandler._t)('%(senderName)s made future room history visible to all room members, ' + 'from the point they are invited.', {
        senderName
      });

    case _partials.HistoryVisibility.Joined:
      return () => (0, _languageHandler._t)('%(senderName)s made future room history visible to all room members, ' + 'from the point they joined.', {
        senderName
      });

    case _partials.HistoryVisibility.Shared:
      return () => (0, _languageHandler._t)('%(senderName)s made future room history visible to all room members.', {
        senderName
      });

    case _partials.HistoryVisibility.WorldReadable:
      return () => (0, _languageHandler._t)('%(senderName)s made future room history visible to anyone.', {
        senderName
      });

    default:
      return () => (0, _languageHandler._t)('%(senderName)s made future room history visible to unknown (%(visibility)s).', {
        senderName,
        visibility: event.getContent().history_visibility
      });
  }
} // Currently will only display a change if a user's power level is changed


function textForPowerEvent(event) {
  const senderName = event.sender ? event.sender.name : event.getSender();

  if (!event.getPrevContent() || !event.getPrevContent().users || !event.getContent() || !event.getContent().users) {
    return null;
  }

  const previousUserDefault = event.getPrevContent().users_default || 0;
  const currentUserDefault = event.getContent().users_default || 0; // Construct set of userIds

  const users = [];
  Object.keys(event.getContent().users).forEach(userId => {
    if (users.indexOf(userId) === -1) users.push(userId);
  });
  Object.keys(event.getPrevContent().users).forEach(userId => {
    if (users.indexOf(userId) === -1) users.push(userId);
  });
  const diffs = [];
  users.forEach(userId => {
    // Previous power level
    let from = event.getPrevContent().users[userId];

    if (!Number.isInteger(from)) {
      from = previousUserDefault;
    } // Current power level


    let to = event.getContent().users[userId];

    if (!Number.isInteger(to)) {
      to = currentUserDefault;
    }

    if (from === previousUserDefault && to === currentUserDefault) {
      return;
    }

    if (to !== from) {
      diffs.push({
        userId,
        from,
        to
      });
    }
  });

  if (!diffs.length) {
    return null;
  } // XXX: This is also surely broken for i18n


  return () => (0, _languageHandler._t)('%(senderName)s changed the power level of %(powerLevelDiffText)s.', {
    senderName,
    powerLevelDiffText: diffs.map(diff => (0, _languageHandler._t)('%(userId)s from %(fromPowerLevel)s to %(toPowerLevel)s', {
      userId: diff.userId,
      fromPowerLevel: Roles.textualPowerLevel(diff.from, previousUserDefault),
      toPowerLevel: Roles.textualPowerLevel(diff.to, currentUserDefault)
    })).join(", ")
  });
}

const onPinnedOrUnpinnedMessageClick = (messageId, roomId) => {
  _dispatcher.default.dispatch({
    action: _actions.Action.ViewRoom,
    event_id: messageId,
    highlighted: true,
    room_id: roomId
  });
};

const onPinnedMessagesClick = () => {
  _dispatcher.default.dispatch({
    action: _actions.Action.SetRightPanelPhase,
    phase: _RightPanelStorePhases.RightPanelPhases.PinnedMessages,
    allowClose: false
  });
};

function textForPinnedEvent(event, allowJSX) {
  if (!_SettingsStore.default.getValue("feature_pinning")) return null;
  const senderName = event.sender ? event.sender.name : event.getSender();
  const roomId = event.getRoomId();
  const pinned = event.getContent().pinned ?? [];
  const previouslyPinned = event.getPrevContent().pinned ?? [];
  const newlyPinned = pinned.filter(item => previouslyPinned.indexOf(item) < 0);
  const newlyUnpinned = previouslyPinned.filter(item => pinned.indexOf(item) < 0);

  if (newlyPinned.length === 1 && newlyUnpinned.length === 0) {
    // A single message was pinned, include a link to that message.
    if (allowJSX) {
      const messageId = newlyPinned.pop();
      return () => /*#__PURE__*/_react.default.createElement("span", null, (0, _languageHandler._t)("%(senderName)s pinned <a>a message</a> to this room. See all <b>pinned messages</b>.", {
        senderName
      }, {
        "a": sub => /*#__PURE__*/_react.default.createElement("a", {
          onClick: e => onPinnedOrUnpinnedMessageClick(messageId, roomId)
        }, sub),
        "b": sub => /*#__PURE__*/_react.default.createElement("a", {
          onClick: onPinnedMessagesClick
        }, sub)
      }));
    }

    return () => (0, _languageHandler._t)("%(senderName)s pinned a message to this room. See all pinned messages.", {
      senderName
    });
  }

  if (newlyUnpinned.length === 1 && newlyPinned.length === 0) {
    // A single message was unpinned, include a link to that message.
    if (allowJSX) {
      const messageId = newlyUnpinned.pop();
      return () => /*#__PURE__*/_react.default.createElement("span", null, (0, _languageHandler._t)("%(senderName)s unpinned <a>a message</a> from this room. See all <b>pinned messages</b>.", {
        senderName
      }, {
        "a": sub => /*#__PURE__*/_react.default.createElement("a", {
          onClick: e => onPinnedOrUnpinnedMessageClick(messageId, roomId)
        }, sub),
        "b": sub => /*#__PURE__*/_react.default.createElement("a", {
          onClick: onPinnedMessagesClick
        }, sub)
      }));
    }

    return () => (0, _languageHandler._t)("%(senderName)s unpinned a message from this room. See all pinned messages.", {
      senderName
    });
  }

  if (allowJSX) {
    return () => /*#__PURE__*/_react.default.createElement("span", null, (0, _languageHandler._t)("%(senderName)s changed the <a>pinned messages</a> for the room.", {
      senderName
    }, {
      "a": sub => /*#__PURE__*/_react.default.createElement("a", {
        onClick: onPinnedMessagesClick
      }, " ", sub, " ")
    }));
  }

  return () => (0, _languageHandler._t)("%(senderName)s changed the pinned messages for the room.", {
    senderName
  });
}

function textForWidgetEvent(event) {
  const senderName = event.getSender();
  const {
    name: prevName,
    type: prevType,
    url: prevUrl
  } = event.getPrevContent();
  const {
    name,
    type,
    url
  } = event.getContent() || {};
  let widgetName = name || prevName || type || prevType || ''; // Apply sentence case to widget name

  if (widgetName && widgetName.length > 0) {
    widgetName = widgetName[0].toUpperCase() + widgetName.slice(1);
  } // If the widget was removed, its content should be {}, but this is sufficiently
  // equivalent to that condition.


  if (url) {
    if (prevUrl) {
      return () => (0, _languageHandler._t)('%(widgetName)s widget modified by %(senderName)s', {
        widgetName,
        senderName
      });
    } else {
      return () => (0, _languageHandler._t)('%(widgetName)s widget added by %(senderName)s', {
        widgetName,
        senderName
      });
    }
  } else {
    return () => (0, _languageHandler._t)('%(widgetName)s widget removed by %(senderName)s', {
      widgetName,
      senderName
    });
  }
}

function textForWidgetLayoutEvent(event) {
  var _event$sender;

  const senderName = ((_event$sender = event.sender) === null || _event$sender === void 0 ? void 0 : _event$sender.name) || event.getSender();
  return () => (0, _languageHandler._t)("%(senderName)s has updated the room layout", {
    senderName
  });
}

function textForMjolnirEvent(event) {
  const senderName = event.getSender();
  const {
    entity: prevEntity
  } = event.getPrevContent();
  const {
    entity,
    recommendation,
    reason
  } = event.getContent(); // Rule removed

  if (!entity) {
    if (_BanList.USER_RULE_TYPES.includes(event.getType())) {
      return () => (0, _languageHandler._t)("%(senderName)s removed the rule banning users matching %(glob)s", {
        senderName,
        glob: prevEntity
      });
    } else if (_BanList.ROOM_RULE_TYPES.includes(event.getType())) {
      return () => (0, _languageHandler._t)("%(senderName)s removed the rule banning rooms matching %(glob)s", {
        senderName,
        glob: prevEntity
      });
    } else if (_BanList.SERVER_RULE_TYPES.includes(event.getType())) {
      return () => (0, _languageHandler._t)("%(senderName)s removed the rule banning servers matching %(glob)s", {
        senderName,
        glob: prevEntity
      });
    } // Unknown type. We'll say something, but we shouldn't end up here.


    return () => (0, _languageHandler._t)("%(senderName)s removed a ban rule matching %(glob)s", {
      senderName,
      glob: prevEntity
    });
  } // Invalid rule


  if (!recommendation || !reason) return () => (0, _languageHandler._t)(`%(senderName)s updated an invalid ban rule`, {
    senderName
  }); // Rule updated

  if (entity === prevEntity) {
    if (_BanList.USER_RULE_TYPES.includes(event.getType())) {
      return () => (0, _languageHandler._t)("%(senderName)s updated the rule banning users matching %(glob)s for %(reason)s", {
        senderName,
        glob: entity,
        reason
      });
    } else if (_BanList.ROOM_RULE_TYPES.includes(event.getType())) {
      return () => (0, _languageHandler._t)("%(senderName)s updated the rule banning rooms matching %(glob)s for %(reason)s", {
        senderName,
        glob: entity,
        reason
      });
    } else if (_BanList.SERVER_RULE_TYPES.includes(event.getType())) {
      return () => (0, _languageHandler._t)("%(senderName)s updated the rule banning servers matching %(glob)s for %(reason)s", {
        senderName,
        glob: entity,
        reason
      });
    } // Unknown type. We'll say something but we shouldn't end up here.


    return () => (0, _languageHandler._t)("%(senderName)s updated a ban rule matching %(glob)s for %(reason)s", {
      senderName,
      glob: entity,
      reason
    });
  } // New rule


  if (!prevEntity) {
    if (_BanList.USER_RULE_TYPES.includes(event.getType())) {
      return () => (0, _languageHandler._t)("%(senderName)s created a rule banning users matching %(glob)s for %(reason)s", {
        senderName,
        glob: entity,
        reason
      });
    } else if (_BanList.ROOM_RULE_TYPES.includes(event.getType())) {
      return () => (0, _languageHandler._t)("%(senderName)s created a rule banning rooms matching %(glob)s for %(reason)s", {
        senderName,
        glob: entity,
        reason
      });
    } else if (_BanList.SERVER_RULE_TYPES.includes(event.getType())) {
      return () => (0, _languageHandler._t)("%(senderName)s created a rule banning servers matching %(glob)s for %(reason)s", {
        senderName,
        glob: entity,
        reason
      });
    } // Unknown type. We'll say something but we shouldn't end up here.


    return () => (0, _languageHandler._t)("%(senderName)s created a ban rule matching %(glob)s for %(reason)s", {
      senderName,
      glob: entity,
      reason
    });
  } // else the entity !== prevEntity - count as a removal & add


  if (_BanList.USER_RULE_TYPES.includes(event.getType())) {
    return () => (0, _languageHandler._t)("%(senderName)s changed a rule that was banning users matching %(oldGlob)s to matching " + "%(newGlob)s for %(reason)s", {
      senderName,
      oldGlob: prevEntity,
      newGlob: entity,
      reason
    });
  } else if (_BanList.ROOM_RULE_TYPES.includes(event.getType())) {
    return () => (0, _languageHandler._t)("%(senderName)s changed a rule that was banning rooms matching %(oldGlob)s to matching " + "%(newGlob)s for %(reason)s", {
      senderName,
      oldGlob: prevEntity,
      newGlob: entity,
      reason
    });
  } else if (_BanList.SERVER_RULE_TYPES.includes(event.getType())) {
    return () => (0, _languageHandler._t)("%(senderName)s changed a rule that was banning servers matching %(oldGlob)s to matching " + "%(newGlob)s for %(reason)s", {
      senderName,
      oldGlob: prevEntity,
      newGlob: entity,
      reason
    });
  } // Unknown type. We'll say something but we shouldn't end up here.


  return () => (0, _languageHandler._t)("%(senderName)s updated a ban rule that was matching %(oldGlob)s to matching %(newGlob)s " + "for %(reason)s", {
    senderName,
    oldGlob: prevEntity,
    newGlob: entity,
    reason
  });
}

const handlers = {
  [_event.EventType.RoomMessage]: textForMessageEvent,
  [_event.EventType.Sticker]: textForMessageEvent,
  [_event.EventType.CallInvite]: textForCallInviteEvent
};
const stateHandlers = {
  [_event.EventType.RoomCanonicalAlias]: textForCanonicalAliasEvent,
  [_event.EventType.RoomName]: textForRoomNameEvent,
  [_event.EventType.RoomTopic]: textForTopicEvent,
  [_event.EventType.RoomMember]: textForMemberEvent,
  [_event.EventType.RoomAvatar]: textForRoomAvatarEvent,
  [_event.EventType.RoomThirdPartyInvite]: textForThreePidInviteEvent,
  [_event.EventType.RoomHistoryVisibility]: textForHistoryVisibilityEvent,
  [_event.EventType.RoomPowerLevels]: textForPowerEvent,
  [_event.EventType.RoomPinnedEvents]: textForPinnedEvent,
  [_event.EventType.RoomServerAcl]: textForServerACLEvent,
  [_event.EventType.RoomTombstone]: textForTombstoneEvent,
  [_event.EventType.RoomJoinRules]: textForJoinRulesEvent,
  [_event.EventType.RoomGuestAccess]: textForGuestAccessEvent,
  'm.room.related_groups': textForRelatedGroupsEvent,
  // TODO: Enable support for m.widget event type (https://github.com/vector-im/element-web/issues/13111)
  'im.vector.modular.widgets': textForWidgetEvent,
  [_WidgetLayoutStore.WIDGET_LAYOUT_EVENT_TYPE]: textForWidgetLayoutEvent
}; // Add all the Mjolnir stuff to the renderer

for (const evType of _BanList.ALL_RULE_TYPES) {
  stateHandlers[evType] = textForMjolnirEvent;
}
/**
 * Determines whether the given event has text to display.
 * @param ev The event
 * @param showHiddenEvents An optional cached setting value for showHiddenEventsInTimeline
 *     to avoid hitting the settings store
 */


function hasText(ev, showHiddenEvents) {
  const handler = (ev.isState() ? stateHandlers : handlers)[ev.getType()];
  return Boolean(handler === null || handler === void 0 ? void 0 : handler(ev, false, showHiddenEvents));
}
/**
 * Gets the textual content of the given event.
 * @param ev The event
 * @param allowJSX Whether to output rich JSX content
 * @param showHiddenEvents An optional cached setting value for showHiddenEventsInTimeline
 *     to avoid hitting the settings store
 */


function textForEvent(ev, allowJSX = false, showHiddenEvents) {
  var _handler;

  const handler = (ev.isState() ? stateHandlers : handlers)[ev.getType()];
  return (handler === null || handler === void 0 ? void 0 : (_handler = handler(ev, allowJSX, showHiddenEvents)) === null || _handler === void 0 ? void 0 : _handler()) || '';
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,