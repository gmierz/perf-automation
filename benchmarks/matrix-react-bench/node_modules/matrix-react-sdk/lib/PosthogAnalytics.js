"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PosthogAnalytics = exports.Anonymity = void 0;
exports.getRedactedCurrentLocation = getRedactedCurrentLocation;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _posthogJs = _interopRequireDefault(require("posthog-js"));

var _PlatformPeg = _interopRequireDefault(require("./PlatformPeg"));

var _SdkConfig = _interopRequireDefault(require("./SdkConfig"));

var _SettingsStore = _interopRequireDefault(require("./settings/SettingsStore"));

var _MatrixClientPeg = require("./MatrixClientPeg");

var _logger = require("matrix-js-sdk/src/logger");

/*
Copyright 2021 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
let Anonymity; // If an event extends IPseudonymousEvent, the event contains pseudonymous data
// that won't be sent unless the user has explicitly consented to pseudonymous tracking.
// For example, it might contain hashed user IDs or room IDs.
// Such events will be automatically dropped if PosthogAnalytics.anonymity isn't set to Pseudonymous.

exports.Anonymity = Anonymity;

(function (Anonymity) {
  Anonymity[Anonymity["Disabled"] = 0] = "Disabled";
  Anonymity[Anonymity["Anonymous"] = 1] = "Anonymous";
  Anonymity[Anonymity["Pseudonymous"] = 2] = "Pseudonymous";
})(Anonymity || (exports.Anonymity = Anonymity = {}));

const whitelistedScreens = new Set(["register", "login", "forgot_password", "soft_logout", "new", "settings", "welcome", "home", "start", "directory", "start_sso", "start_cas", "groups", "complete_security", "post_registration", "room", "user", "group"]);

async function getRedactedCurrentLocation(origin, hash, pathname, anonymity) {
  // Redact PII from the current location.
  // For known screens, assumes a URL structure of /<screen name>/might/be/pii
  if (origin.startsWith('file://')) {
    pathname = "/<redacted_file_scheme_url>/";
  }

  let hashStr;

  if (hash == "") {
    hashStr = "";
  } else {
    let [beforeFirstSlash, screen] = hash.split("/");

    if (!whitelistedScreens.has(screen)) {
      screen = "<redacted_screen_name>";
    }

    hashStr = `${beforeFirstSlash}/${screen}/<redacted>`;
  }

  return origin + pathname + hashStr;
}

class PosthogAnalytics {
  /* Wrapper for Posthog analytics.
   * 3 modes of anonymity are supported, governed by this.anonymity
   * - Anonymity.Disabled means *no data* is passed to posthog
   * - Anonymity.Anonymous means no identifier is passed to posthog
   * - Anonymity.Pseudonymous means an analytics ID stored in account_data and shared between devices
   *   is passed to posthog.
   *
   * To update anonymity, call updateAnonymityFromSettings() or you can set it directly via setAnonymity().
   *
   * To pass an event to Posthog:
   *
   * 1. Declare a type for the event, extending IAnonymousEvent or IPseudonymousEvent.
   * 2. Call the appropriate track*() method. Pseudonymous events will be dropped when anonymity is
   *    Anonymous or Disabled; Anonymous events will be dropped when anonymity is Disabled.
   */
  // set true during the constructor if posthog config is present, otherwise false
  static get instance() {
    if (!this._instance) {
      this._instance = new PosthogAnalytics(_posthogJs.default);
    }

    return this._instance;
  }

  constructor(posthog) {
    this.posthog = posthog;
    (0, _defineProperty2.default)(this, "anonymity", Anonymity.Disabled);
    (0, _defineProperty2.default)(this, "enabled", false);
    (0, _defineProperty2.default)(this, "platformSuperProperties", {});
    (0, _defineProperty2.default)(this, "sanitizeProperties", properties => {
      // Callback from posthog to sanitize properties before sending them to the server.
      //
      // Here we sanitize posthog's built in properties which leak PII e.g. url reporting.
      // See utils.js _.info.properties in posthog-js.
      // Replace the $current_url with a redacted version.
      // $redacted_current_url is injected by this class earlier in capture(), as its generation
      // is async and can't be done in this non-async callback.
      if (!properties['$redacted_current_url']) {
        _logger.logger.log("$redacted_current_url not set in sanitizeProperties, will drop $current_url entirely");
      }

      properties['$current_url'] = properties['$redacted_current_url'];
      delete properties['$redacted_current_url'];

      if (this.anonymity == Anonymity.Anonymous) {
        // drop referrer information for anonymous users
        properties['$referrer'] = null;
        properties['$referring_domain'] = null;
        properties['$initial_referrer'] = null;
        properties['$initial_referring_domain'] = null; // drop device ID, which is a UUID persisted in local storage

        properties['$device_id'] = null;
      }

      return properties;
    });

    const posthogConfig = _SdkConfig.default.get()["posthog"];

    if (posthogConfig) {
      this.posthog.init(posthogConfig.projectApiKey, {
        api_host: posthogConfig.apiHost,
        autocapture: false,
        mask_all_text: true,
        mask_all_element_attributes: true,
        // This only triggers on page load, which for our SPA isn't particularly useful.
        // Plus, the .capture call originating from somewhere in posthog makes it hard
        // to redact URLs, which requires async code.
        //
        // To raise this manually, just call .capture("$pageview") or posthog.capture_pageview.
        capture_pageview: false,
        sanitize_properties: this.sanitizeProperties,
        respect_dnt: true,
        advanced_disable_decide: true
      });
      this.enabled = true;
    } else {
      this.enabled = false;
    }
  }

  static getAnonymityFromSettings() {
    // determine the current anonymity level based on current user settings
    // "Send anonymous usage data which helps us improve Element. This will use a cookie."
    const analyticsOptIn = _SettingsStore.default.getValue("analyticsOptIn", null, true); // (proposed wording) "Send pseudonymous usage data which helps us improve Element. This will use a cookie."
    //
    // TODO: Currently, this is only a labs flag, for testing purposes.


    const pseudonumousOptIn = _SettingsStore.default.getValue("feature_pseudonymous_analytics_opt_in", null, true);

    let anonymity;

    if (pseudonumousOptIn) {
      anonymity = Anonymity.Pseudonymous;
    } else if (analyticsOptIn) {
      anonymity = Anonymity.Anonymous;
    } else {
      anonymity = Anonymity.Disabled;
    }

    return anonymity;
  }

  registerSuperProperties(properties) {
    if (this.enabled) {
      this.posthog.register(properties);
    }
  }

  static async getPlatformProperties() {
    const platform = _PlatformPeg.default.get();

    let appVersion;

    try {
      appVersion = await platform.getAppVersion();
    } catch (e) {
      // this happens if no version is set i.e. in dev
      appVersion = "unknown";
    }

    return {
      appVersion,
      appPlatform: platform.getHumanReadableName()
    };
  }

  async capture(eventName, properties) {
    if (!this.enabled) {
      return;
    }

    const {
      origin,
      hash,
      pathname
    } = window.location;
    properties['$redacted_current_url'] = await getRedactedCurrentLocation(origin, hash, pathname, this.anonymity);
    this.posthog.capture(eventName, properties);
  }

  isEnabled() {
    return this.enabled;
  }

  setAnonymity(anonymity) {
    // Update this.anonymity.
    // This is public for testing purposes, typically you want to call updateAnonymityFromSettings
    // to ensure this value is in step with the user's settings.
    if (this.enabled && (anonymity == Anonymity.Disabled || anonymity == Anonymity.Anonymous)) {
      // when transitioning to Disabled or Anonymous ensure we clear out any prior state
      // set in posthog e.g. distinct ID
      this.posthog.reset(); // Restore any previously set platform super properties

      this.registerSuperProperties(this.platformSuperProperties);
    }

    this.anonymity = anonymity;
  }

  static getRandomAnalyticsId() {
    return [...crypto.getRandomValues(new Uint8Array(16))].map(c => c.toString(16)).join('');
  }

  async identifyUser(client, analyticsIdGenerator) {
    if (this.anonymity == Anonymity.Pseudonymous) {
      // Check the user's account_data for an analytics ID to use. Storing the ID in account_data allows
      // different devices to send the same ID.
      try {
        const accountData = await client.getAccountDataFromServer(PosthogAnalytics.ANALYTICS_ID_EVENT_TYPE);
        let analyticsID = accountData === null || accountData === void 0 ? void 0 : accountData.id;

        if (!analyticsID) {
          // Couldn't retrieve an analytics ID from user settings, so create one and set it on the server.
          // Note there's a race condition here - if two devices do these steps at the same time, last write
          // wins, and the first writer will send tracking with an ID that doesn't match the one on the server
          // until the next time account data is refreshed and this function is called (most likely on next
          // page load). This will happen pretty infrequently, so we can tolerate the possibility.
          analyticsID = analyticsIdGenerator();
          await client.setAccountData("im.vector.web.analytics_id", {
            id: analyticsID
          });
        }

        this.posthog.identify(analyticsID);
      } catch (e) {
        // The above could fail due to network requests, but not essential to starting the application,
        // so swallow it.
        _logger.logger.log("Unable to identify user for tracking" + e.toString());
      }
    }
  }

  getAnonymity() {
    return this.anonymity;
  }

  logout() {
    if (this.enabled) {
      this.posthog.reset();
    }

    this.setAnonymity(Anonymity.Anonymous);
  }

  async trackPseudonymousEvent(eventName, properties = {}) {
    if (this.anonymity == Anonymity.Anonymous || this.anonymity == Anonymity.Disabled) return;
    await this.capture(eventName, properties);
  }

  async trackAnonymousEvent(eventName, properties = {}) {
    if (this.anonymity == Anonymity.Disabled) return;
    await this.capture(eventName, properties);
  }

  async trackPageView(durationMs) {
    const hash = window.location.hash;
    let screen = null;
    const split = hash.split("/");

    if (split.length >= 2) {
      screen = split[1];
    }

    await this.trackAnonymousEvent("$pageview", {
      durationMs,
      screen
    });
  }

  async updatePlatformSuperProperties() {
    // Update super properties in posthog with our platform (app version, platform).
    // These properties will be subsequently passed in every event.
    //
    // This only needs to be done once per page lifetime. Note that getPlatformProperties
    // is async and can involve a network request if we are running in a browser.
    this.platformSuperProperties = await PosthogAnalytics.getPlatformProperties();
    this.registerSuperProperties(this.platformSuperProperties);
  }

  async updateAnonymityFromSettings(userId) {
    // Update this.anonymity based on the user's analytics opt-in settings
    // Identify the user (via hashed user ID) to posthog if anonymity is pseudonmyous
    this.setAnonymity(PosthogAnalytics.getAnonymityFromSettings());

    if (userId && this.getAnonymity() == Anonymity.Pseudonymous) {
      await this.identifyUser(_MatrixClientPeg.MatrixClientPeg.get(), PosthogAnalytics.getRandomAnalyticsId);
    }
  }

}

exports.PosthogAnalytics = PosthogAnalytics;
(0, _defineProperty2.default)(PosthogAnalytics, "_instance", null);
(0, _defineProperty2.default)(PosthogAnalytics, "ANALYTICS_ID_EVENT_TYPE", "im.vector.web.analytics_id");
//# sourceMappingURL=data:application/json;charset=utf-8;base64,