"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _MatrixClientPeg = require("../../../../MatrixClientPeg");

var _fileSaver = _interopRequireDefault(require("file-saver"));

var _languageHandler = require("../../../../languageHandler");

var _Modal = _interopRequireDefault(require("../../../../Modal"));

var _SecurityManager = require("../../../../SecurityManager");

var _strings = require("../../../../utils/strings");

var _InteractiveAuthEntryComponents = require("../../../../components/views/auth/InteractiveAuthEntryComponents");

var _PassphraseField = _interopRequireDefault(require("../../../../components/views/auth/PassphraseField"));

var _StyledRadioButton = _interopRequireDefault(require("../../../../components/views/elements/StyledRadioButton"));

var _AccessibleButton = _interopRequireDefault(require("../../../../components/views/elements/AccessibleButton"));

var _DialogButtons = _interopRequireDefault(require("../../../../components/views/elements/DialogButtons"));

var _InlineSpinner = _interopRequireDefault(require("../../../../components/views/elements/InlineSpinner"));

var _RestoreKeyBackupDialog = _interopRequireDefault(require("../../../../components/views/dialogs/security/RestoreKeyBackupDialog"));

var _WellKnownUtils = require("../../../../utils/WellKnownUtils");

var _Security = _interopRequireDefault(require("../../../../customisations/Security"));

var _logger = require("matrix-js-sdk/src/logger");

var _Field = _interopRequireDefault(require("../../../../components/views/elements/Field"));

var _BaseDialog = _interopRequireDefault(require("../../../../components/views/dialogs/BaseDialog"));

var _Spinner = _interopRequireDefault(require("../../../../components/views/elements/Spinner"));

var _InteractiveAuthDialog = _interopRequireDefault(require("../../../../components/views/dialogs/InteractiveAuthDialog"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
Copyright 2018, 2019 New Vector Ltd
Copyright 2019, 2020 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// I made a mistake while converting this and it has to be fixed!
var Phase;

(function (Phase) {
  Phase["Loading"] = "loading";
  Phase["LoadError"] = "load_error";
  Phase["ChooseKeyPassphrase"] = "choose_key_passphrase";
  Phase["Migrate"] = "migrate";
  Phase["Passphrase"] = "passphrase";
  Phase["PassphraseConfirm"] = "passphrase_confirm";
  Phase["ShowKey"] = "show_key";
  Phase["Storing"] = "storing";
  Phase["ConfirmSkip"] = "confirm_skip";
})(Phase || (Phase = {}));

const PASSWORD_MIN_SCORE = 4; // So secure, many characters, much complex, wow, etc, etc.

/*
 * Walks the user through the process of creating a passphrase to guard Secure
 * Secret Storage in account data.
 */
class CreateSecretStorageDialog extends _react.default.PureComponent {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "recoveryKey", void 0);
    (0, _defineProperty2.default)(this, "backupKey", void 0);
    (0, _defineProperty2.default)(this, "recoveryKeyNode", /*#__PURE__*/(0, _react.createRef)());
    (0, _defineProperty2.default)(this, "passphraseField", /*#__PURE__*/(0, _react.createRef)());
    (0, _defineProperty2.default)(this, "onKeyBackupStatusChange", () => {
      if (this.state.phase === Phase.Migrate) this.fetchBackupInfo();
    });
    (0, _defineProperty2.default)(this, "onKeyPassphraseChange", e => {
      this.setState({
        passPhraseKeySelected: e.target.value
      });
    });
    (0, _defineProperty2.default)(this, "onChooseKeyPassphraseFormSubmit", async () => {
      if (this.state.passPhraseKeySelected === _WellKnownUtils.SecureBackupSetupMethod.Key) {
        this.recoveryKey = await _MatrixClientPeg.MatrixClientPeg.get().createRecoveryKeyFromPassphrase();
        this.setState({
          copied: false,
          downloaded: false,
          setPassphrase: false,
          phase: Phase.ShowKey
        });
      } else {
        this.setState({
          copied: false,
          downloaded: false,
          phase: Phase.Passphrase
        });
      }
    });
    (0, _defineProperty2.default)(this, "onMigrateFormSubmit", e => {
      e.preventDefault();

      if (this.state.backupSigStatus.usable) {
        this.bootstrapSecretStorage();
      } else {
        this.restoreBackup();
      }
    });
    (0, _defineProperty2.default)(this, "onCopyClick", () => {
      const successful = (0, _strings.copyNode)(this.recoveryKeyNode.current);

      if (successful) {
        this.setState({
          copied: true
        });
      }
    });
    (0, _defineProperty2.default)(this, "onDownloadClick", () => {
      const blob = new Blob([this.recoveryKey.encodedPrivateKey], {
        type: 'text/plain;charset=us-ascii'
      });

      _fileSaver.default.saveAs(blob, 'security-key.txt');

      this.setState({
        downloaded: true
      });
    });
    (0, _defineProperty2.default)(this, "doBootstrapUIAuth", async makeRequest => {
      if (this.state.canUploadKeysWithPasswordOnly && this.state.accountPassword) {
        await makeRequest({
          type: 'm.login.password',
          identifier: {
            type: 'm.id.user',
            user: _MatrixClientPeg.MatrixClientPeg.get().getUserId()
          },
          // TODO: Remove `user` once servers support proper UIA
          // See https://github.com/matrix-org/synapse/issues/5665
          user: _MatrixClientPeg.MatrixClientPeg.get().getUserId(),
          password: this.state.accountPassword
        });
      } else {
        const dialogAesthetics = {
          [_InteractiveAuthEntryComponents.SSOAuthEntry.PHASE_PREAUTH]: {
            title: (0, _languageHandler._t)("Use Single Sign On to continue"),
            body: (0, _languageHandler._t)("To continue, use Single Sign On to prove your identity."),
            continueText: (0, _languageHandler._t)("Single Sign On"),
            continueKind: "primary"
          },
          [_InteractiveAuthEntryComponents.SSOAuthEntry.PHASE_POSTAUTH]: {
            title: (0, _languageHandler._t)("Confirm encryption setup"),
            body: (0, _languageHandler._t)("Click the button below to confirm setting up encryption."),
            continueText: (0, _languageHandler._t)("Confirm"),
            continueKind: "primary"
          }
        };

        const {
          finished
        } = _Modal.default.createTrackedDialog('Cross-signing keys dialog', '', _InteractiveAuthDialog.default, {
          title: (0, _languageHandler._t)("Setting up keys"),
          matrixClient: _MatrixClientPeg.MatrixClientPeg.get(),
          makeRequest,
          aestheticsForStagePhases: {
            [_InteractiveAuthEntryComponents.SSOAuthEntry.LOGIN_TYPE]: dialogAesthetics,
            [_InteractiveAuthEntryComponents.SSOAuthEntry.UNSTABLE_LOGIN_TYPE]: dialogAesthetics
          }
        });

        const [confirmed] = await finished;

        if (!confirmed) {
          throw new Error("Cross-signing key upload auth canceled");
        }
      }
    });
    (0, _defineProperty2.default)(this, "bootstrapSecretStorage", async () => {
      this.setState({
        phase: Phase.Storing,
        error: null
      });

      const cli = _MatrixClientPeg.MatrixClientPeg.get();

      const {
        forceReset
      } = this.props;

      try {
        if (forceReset) {
          _logger.logger.log("Forcing secret storage reset");

          await cli.bootstrapSecretStorage({
            createSecretStorageKey: async () => this.recoveryKey,
            setupNewKeyBackup: true,
            setupNewSecretStorage: true
          });
        } else {
          // For password authentication users after 2020-09, this cross-signing
          // step will be a no-op since it is now setup during registration or login
          // when needed. We should keep this here to cover other cases such as:
          //   * Users with existing sessions prior to 2020-09 changes
          //   * SSO authentication users which require interactive auth to upload
          //     keys (and also happen to skip all post-authentication flows at the
          //     moment via token login)
          await cli.bootstrapCrossSigning({
            authUploadDeviceSigningKeys: this.doBootstrapUIAuth
          });
          await cli.bootstrapSecretStorage({
            createSecretStorageKey: async () => this.recoveryKey,
            keyBackupInfo: this.state.backupInfo,
            setupNewKeyBackup: !this.state.backupInfo,
            getKeyBackupPassphrase: async () => {
              // We may already have the backup key if we earlier went
              // through the restore backup path, so pass it along
              // rather than prompting again.
              if (this.backupKey) {
                return this.backupKey;
              }

              return (0, _SecurityManager.promptForBackupPassphrase)();
            }
          });
        }

        this.props.onFinished(true);
      } catch (e) {
        if (this.state.canUploadKeysWithPasswordOnly && e.httpStatus === 401 && e.data.flows) {
          this.setState({
            accountPassword: '',
            accountPasswordCorrect: false,
            phase: Phase.Migrate
          });
        } else {
          this.setState({
            error: e
          });
        }

        _logger.logger.error("Error bootstrapping secret storage", e);
      }
    });
    (0, _defineProperty2.default)(this, "onCancel", () => {
      this.props.onFinished(false);
    });
    (0, _defineProperty2.default)(this, "restoreBackup", async () => {
      // It's possible we'll need the backup key later on for bootstrapping,
      // so let's stash it here, rather than prompting for it twice.
      const keyCallback = k => this.backupKey = k;

      const {
        finished
      } = _Modal.default.createTrackedDialog('Restore Backup', '', _RestoreKeyBackupDialog.default, {
        showSummary: false,
        keyCallback
      }, null,
      /* priority = */
      false,
      /* static = */
      false);

      await finished;
      const {
        backupSigStatus
      } = await this.fetchBackupInfo();

      if (backupSigStatus.usable && this.state.canUploadKeysWithPasswordOnly && this.state.accountPassword) {
        this.bootstrapSecretStorage();
      }
    });
    (0, _defineProperty2.default)(this, "onLoadRetryClick", () => {
      this.setState({
        phase: Phase.Loading
      });
      this.fetchBackupInfo();
    });
    (0, _defineProperty2.default)(this, "onShowKeyContinueClick", () => {
      this.bootstrapSecretStorage();
    });
    (0, _defineProperty2.default)(this, "onCancelClick", () => {
      this.setState({
        phase: Phase.ConfirmSkip
      });
    });
    (0, _defineProperty2.default)(this, "onGoBackClick", () => {
      this.setState({
        phase: Phase.ChooseKeyPassphrase
      });
    });
    (0, _defineProperty2.default)(this, "onPassPhraseNextClick", async e => {
      e.preventDefault();
      if (!this.passphraseField.current) return; // unmounting

      await this.passphraseField.current.validate({
        allowEmpty: false
      });

      if (!this.passphraseField.current.state.valid) {
        this.passphraseField.current.focus();
        this.passphraseField.current.validate({
          allowEmpty: false,
          focused: true
        });
        return;
      }

      this.setState({
        phase: Phase.PassphraseConfirm
      });
    });
    (0, _defineProperty2.default)(this, "onPassPhraseConfirmNextClick", async e => {
      e.preventDefault();
      if (this.state.passPhrase !== this.state.passPhraseConfirm) return;
      this.recoveryKey = await _MatrixClientPeg.MatrixClientPeg.get().createRecoveryKeyFromPassphrase(this.state.passPhrase);
      this.setState({
        copied: false,
        downloaded: false,
        setPassphrase: true,
        phase: Phase.ShowKey
      });
    });
    (0, _defineProperty2.default)(this, "onSetAgainClick", () => {
      this.setState({
        passPhrase: '',
        passPhraseValid: false,
        passPhraseConfirm: '',
        phase: Phase.Passphrase
      });
    });
    (0, _defineProperty2.default)(this, "onPassPhraseValidate", result => {
      this.setState({
        passPhraseValid: result.valid
      });
    });
    (0, _defineProperty2.default)(this, "onPassPhraseChange", e => {
      this.setState({
        passPhrase: e.target.value
      });
    });
    (0, _defineProperty2.default)(this, "onPassPhraseConfirmChange", e => {
      this.setState({
        passPhraseConfirm: e.target.value
      });
    });
    (0, _defineProperty2.default)(this, "onAccountPasswordChange", e => {
      this.setState({
        accountPassword: e.target.value
      });
    });
    let passPhraseKeySelected;
    const setupMethods = (0, _WellKnownUtils.getSecureBackupSetupMethods)();

    if (setupMethods.includes(_WellKnownUtils.SecureBackupSetupMethod.Key)) {
      passPhraseKeySelected = _WellKnownUtils.SecureBackupSetupMethod.Key;
    } else {
      passPhraseKeySelected = _WellKnownUtils.SecureBackupSetupMethod.Passphrase;
    }

    const accountPassword = props.accountPassword || "";
    let canUploadKeysWithPasswordOnly = null;

    if (accountPassword) {
      // If we have an account password in memory, let's simplify and
      // assume it means password auth is also supported for device
      // signing key upload as well. This avoids hitting the server to
      // test auth flows, which may be slow under high load.
      canUploadKeysWithPasswordOnly = true;
    } else {
      this.queryKeyUploadAuth();
    }

    this.state = {
      phase: Phase.Loading,
      passPhrase: '',
      passPhraseValid: false,
      passPhraseConfirm: '',
      copied: false,
      downloaded: false,
      setPassphrase: false,
      backupInfo: null,
      backupSigStatus: null,
      // does the server offer a UI auth flow with just m.login.password
      // for /keys/device_signing/upload?
      accountPasswordCorrect: null,
      canSkip: !(0, _WellKnownUtils.isSecureBackupRequired)(),
      canUploadKeysWithPasswordOnly,
      passPhraseKeySelected,
      accountPassword
    };

    _MatrixClientPeg.MatrixClientPeg.get().on('crypto.keyBackupStatus', this.onKeyBackupStatusChange);

    this.getInitialPhase();
  }

  componentWillUnmount() {
    _MatrixClientPeg.MatrixClientPeg.get().removeListener('crypto.keyBackupStatus', this.onKeyBackupStatusChange);
  }

  getInitialPhase() {
    var _SecurityCustomisatio;

    const keyFromCustomisations = (_SecurityCustomisatio = _Security.default.createSecretStorageKey) === null || _SecurityCustomisatio === void 0 ? void 0 : _SecurityCustomisatio.call(_Security.default);

    if (keyFromCustomisations) {
      _logger.logger.log("Created key via customisations, jumping to bootstrap step");

      this.recoveryKey = {
        privateKey: keyFromCustomisations
      };
      this.bootstrapSecretStorage();
      return;
    }

    this.fetchBackupInfo();
  }

  async fetchBackupInfo() {
    try {
      const backupInfo = await _MatrixClientPeg.MatrixClientPeg.get().getKeyBackupVersion();
      const backupSigStatus = // we may not have started crypto yet, in which case we definitely don't trust the backup
      _MatrixClientPeg.MatrixClientPeg.get().isCryptoEnabled() && (await _MatrixClientPeg.MatrixClientPeg.get().isKeyBackupTrusted(backupInfo));
      const {
        forceReset
      } = this.props;
      const phase = backupInfo && !forceReset ? Phase.Migrate : Phase.ChooseKeyPassphrase;
      this.setState({
        phase,
        backupInfo,
        backupSigStatus
      });
      return {
        backupInfo,
        backupSigStatus
      };
    } catch (e) {
      this.setState({
        phase: Phase.LoadError
      });
    }
  }

  async queryKeyUploadAuth() {
    try {
      await _MatrixClientPeg.MatrixClientPeg.get().uploadDeviceSigningKeys(null, {}); // We should never get here: the server should always require
      // UI auth to upload device signing keys. If we do, we upload
      // no keys which would be a no-op.

      _logger.logger.log("uploadDeviceSigningKeys unexpectedly succeeded without UI auth!");
    } catch (error) {
      if (!error.data || !error.data.flows) {
        _logger.logger.log("uploadDeviceSigningKeys advertised no flows!");

        return;
      }

      const canUploadKeysWithPasswordOnly = error.data.flows.some(f => {
        return f.stages.length === 1 && f.stages[0] === 'm.login.password';
      });
      this.setState({
        canUploadKeysWithPasswordOnly
      });
    }
  }

  renderOptionKey() {
    return /*#__PURE__*/_react.default.createElement(_StyledRadioButton.default, {
      key: _WellKnownUtils.SecureBackupSetupMethod.Key,
      value: _WellKnownUtils.SecureBackupSetupMethod.Key,
      name: "keyPassphrase",
      checked: this.state.passPhraseKeySelected === _WellKnownUtils.SecureBackupSetupMethod.Key,
      onChange: this.onKeyPassphraseChange,
      outlined: true
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_CreateSecretStorageDialog_optionTitle"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_CreateSecretStorageDialog_optionIcon mx_CreateSecretStorageDialog_optionIcon_secureBackup"
    }), (0, _languageHandler._t)("Generate a Security Key")), /*#__PURE__*/_react.default.createElement("div", null, (0, _languageHandler._t)("We'll generate a Security Key for you to store somewhere safe, like a password manager or a safe.")));
  }

  renderOptionPassphrase() {
    return /*#__PURE__*/_react.default.createElement(_StyledRadioButton.default, {
      key: _WellKnownUtils.SecureBackupSetupMethod.Passphrase,
      value: _WellKnownUtils.SecureBackupSetupMethod.Passphrase,
      name: "keyPassphrase",
      checked: this.state.passPhraseKeySelected === _WellKnownUtils.SecureBackupSetupMethod.Passphrase,
      onChange: this.onKeyPassphraseChange,
      outlined: true
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_CreateSecretStorageDialog_optionTitle"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_CreateSecretStorageDialog_optionIcon mx_CreateSecretStorageDialog_optionIcon_securePhrase"
    }), (0, _languageHandler._t)("Enter a Security Phrase")), /*#__PURE__*/_react.default.createElement("div", null, (0, _languageHandler._t)("Use a secret phrase only you know, and optionally save a Security Key to use for backup.")));
  }

  renderPhaseChooseKeyPassphrase() {
    const setupMethods = (0, _WellKnownUtils.getSecureBackupSetupMethods)();
    const optionKey = setupMethods.includes(_WellKnownUtils.SecureBackupSetupMethod.Key) ? this.renderOptionKey() : null;
    const optionPassphrase = setupMethods.includes(_WellKnownUtils.SecureBackupSetupMethod.Passphrase) ? this.renderOptionPassphrase() : null;
    return /*#__PURE__*/_react.default.createElement("form", {
      onSubmit: this.onChooseKeyPassphraseFormSubmit
    }, /*#__PURE__*/_react.default.createElement("p", {
      className: "mx_CreateSecretStorageDialog_centeredBody"
    }, (0, _languageHandler._t)("Safeguard against losing access to encrypted messages & data by " + "backing up encryption keys on your server.")), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_CreateSecretStorageDialog_primaryContainer",
      role: "radiogroup"
    }, optionKey, optionPassphrase), /*#__PURE__*/_react.default.createElement(_DialogButtons.default, {
      primaryButton: (0, _languageHandler._t)("Continue"),
      onPrimaryButtonClick: this.onChooseKeyPassphraseFormSubmit,
      onCancel: this.onCancelClick,
      hasCancel: this.state.canSkip
    }));
  }

  renderPhaseMigrate() {
    // TODO: This is a temporary screen so people who have the labs flag turned on and
    // click the button are aware they're making a change to their account.
    // Once we're confident enough in this (and it's supported enough) we can do
    // it automatically.
    // https://github.com/vector-im/element-web/issues/11696
    let authPrompt;
    let nextCaption = (0, _languageHandler._t)("Next");

    if (this.state.canUploadKeysWithPasswordOnly) {
      authPrompt = /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("div", null, (0, _languageHandler._t)("Enter your account password to confirm the upgrade:")), /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_Field.default, {
        type: "password",
        label: (0, _languageHandler._t)("Password"),
        value: this.state.accountPassword,
        onChange: this.onAccountPasswordChange,
        forceValidity: this.state.accountPasswordCorrect === false ? false : null,
        autoFocus: true
      })));
    } else if (!this.state.backupSigStatus.usable) {
      authPrompt = /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("div", null, (0, _languageHandler._t)("Restore your key backup to upgrade your encryption")));
      nextCaption = (0, _languageHandler._t)("Restore");
    } else {
      authPrompt = /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("You'll need to authenticate with the server to confirm the upgrade."));
    }

    return /*#__PURE__*/_react.default.createElement("form", {
      onSubmit: this.onMigrateFormSubmit
    }, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Upgrade this session to allow it to verify other sessions, " + "granting them access to encrypted messages and marking them " + "as trusted for other users.")), /*#__PURE__*/_react.default.createElement("div", null, authPrompt), /*#__PURE__*/_react.default.createElement(_DialogButtons.default, {
      primaryButton: nextCaption,
      onPrimaryButtonClick: this.onMigrateFormSubmit,
      hasCancel: false,
      primaryDisabled: this.state.canUploadKeysWithPasswordOnly && !this.state.accountPassword
    }, /*#__PURE__*/_react.default.createElement("button", {
      type: "button",
      className: "danger",
      onClick: this.onCancelClick
    }, (0, _languageHandler._t)('Skip'))));
  }

  renderPhasePassPhrase() {
    return /*#__PURE__*/_react.default.createElement("form", {
      onSubmit: this.onPassPhraseNextClick
    }, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Enter a security phrase only you know, as it's used to safeguard your data. " + "To be secure, you shouldn't re-use your account password.")), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_CreateSecretStorageDialog_passPhraseContainer"
    }, /*#__PURE__*/_react.default.createElement(_PassphraseField.default, {
      className: "mx_CreateSecretStorageDialog_passPhraseField",
      onChange: this.onPassPhraseChange,
      minScore: PASSWORD_MIN_SCORE,
      value: this.state.passPhrase,
      onValidate: this.onPassPhraseValidate,
      fieldRef: this.passphraseField,
      autoFocus: true,
      label: (0, _languageHandler._td)("Enter a Security Phrase"),
      labelEnterPassword: (0, _languageHandler._td)("Enter a Security Phrase"),
      labelStrongPassword: (0, _languageHandler._td)("Great! This Security Phrase looks strong enough."),
      labelAllowedButUnsafe: (0, _languageHandler._td)("Great! This Security Phrase looks strong enough.")
    })), /*#__PURE__*/_react.default.createElement(_DialogButtons.default, {
      primaryButton: (0, _languageHandler._t)('Continue'),
      onPrimaryButtonClick: this.onPassPhraseNextClick,
      hasCancel: false,
      disabled: !this.state.passPhraseValid
    }, /*#__PURE__*/_react.default.createElement("button", {
      type: "button",
      onClick: this.onCancelClick,
      className: "danger"
    }, (0, _languageHandler._t)("Cancel"))));
  }

  renderPhasePassPhraseConfirm() {
    let matchText;
    let changeText;

    if (this.state.passPhraseConfirm === this.state.passPhrase) {
      matchText = (0, _languageHandler._t)("That matches!");
      changeText = (0, _languageHandler._t)("Use a different passphrase?");
    } else if (!this.state.passPhrase.startsWith(this.state.passPhraseConfirm)) {
      // only tell them they're wrong if they've actually gone wrong.
      // Security concious readers will note that if you left element-web unattended
      // on this screen, this would make it easy for a malicious person to guess
      // your passphrase one letter at a time, but they could get this faster by
      // just opening the browser's developer tools and reading it.
      // Note that not having typed anything at all will not hit this clause and
      // fall through so empty box === no hint.
      matchText = (0, _languageHandler._t)("That doesn't match.");
      changeText = (0, _languageHandler._t)("Go back to set it again.");
    }

    let passPhraseMatch = null;

    if (matchText) {
      passPhraseMatch = /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("div", null, matchText), /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        element: "span",
        className: "mx_linkButton",
        onClick: this.onSetAgainClick
      }, changeText)));
    }

    return /*#__PURE__*/_react.default.createElement("form", {
      onSubmit: this.onPassPhraseConfirmNextClick
    }, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Enter your Security Phrase a second time to confirm it.")), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_CreateSecretStorageDialog_passPhraseContainer"
    }, /*#__PURE__*/_react.default.createElement(_Field.default, {
      type: "password",
      onChange: this.onPassPhraseConfirmChange,
      value: this.state.passPhraseConfirm,
      className: "mx_CreateSecretStorageDialog_passPhraseField",
      label: (0, _languageHandler._t)("Confirm your Security Phrase"),
      autoFocus: true,
      autoComplete: "new-password"
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_CreateSecretStorageDialog_passPhraseMatch"
    }, passPhraseMatch)), /*#__PURE__*/_react.default.createElement(_DialogButtons.default, {
      primaryButton: (0, _languageHandler._t)('Continue'),
      onPrimaryButtonClick: this.onPassPhraseConfirmNextClick,
      hasCancel: false,
      disabled: this.state.passPhrase !== this.state.passPhraseConfirm
    }, /*#__PURE__*/_react.default.createElement("button", {
      type: "button",
      onClick: this.onCancelClick,
      className: "danger"
    }, (0, _languageHandler._t)("Skip"))));
  }

  renderPhaseShowKey() {
    let continueButton;

    if (this.state.phase === Phase.ShowKey) {
      continueButton = /*#__PURE__*/_react.default.createElement(_DialogButtons.default, {
        primaryButton: (0, _languageHandler._t)("Continue"),
        disabled: !this.state.downloaded && !this.state.copied && !this.state.setPassphrase,
        onPrimaryButtonClick: this.onShowKeyContinueClick,
        hasCancel: false
      });
    } else {
      continueButton = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_CreateSecretStorageDialog_continueSpinner"
      }, /*#__PURE__*/_react.default.createElement(_InlineSpinner.default, null));
    }

    return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Store your Security Key somewhere safe, like a password manager or a safe, " + "as it's used to safeguard your encrypted data.")), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_CreateSecretStorageDialog_primaryContainer mx_CreateSecretStorageDialog_recoveryKeyPrimarycontainer"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_CreateSecretStorageDialog_recoveryKeyContainer"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_CreateSecretStorageDialog_recoveryKey"
    }, /*#__PURE__*/_react.default.createElement("code", {
      ref: this.recoveryKeyNode
    }, this.recoveryKey.encodedPrivateKey)), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_CreateSecretStorageDialog_recoveryKeyButtons"
    }, /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      kind: "primary",
      className: "mx_Dialog_primary",
      onClick: this.onDownloadClick,
      disabled: this.state.phase === Phase.Storing
    }, (0, _languageHandler._t)("Download")), /*#__PURE__*/_react.default.createElement("span", null, (0, _languageHandler._t)("or")), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      kind: "primary",
      className: "mx_Dialog_primary mx_CreateSecretStorageDialog_recoveryKeyButtons_copyBtn",
      onClick: this.onCopyClick,
      disabled: this.state.phase === Phase.Storing
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_CreateSecretStorageDialog_recoveryKeyCopyButtonText",
      style: {
        height: this.state.copied ? '0' : 'auto'
      },
      "aria-hidden": this.state.copied
    }, (0, _languageHandler._t)("Copy")), /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_CreateSecretStorageDialog_recoveryKeyCopyButtonText",
      style: {
        height: this.state.copied ? 'auto' : '0'
      },
      "aria-hidden": !this.state.copied
    }, (0, _languageHandler._t)("Copied!")))))), continueButton);
  }

  renderBusyPhase() {
    return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_Spinner.default, null));
  }

  renderPhaseLoadError() {
    return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Unable to query secret storage status")), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_Dialog_buttons"
    }, /*#__PURE__*/_react.default.createElement(_DialogButtons.default, {
      primaryButton: (0, _languageHandler._t)('Retry'),
      onPrimaryButtonClick: this.onLoadRetryClick,
      hasCancel: this.state.canSkip,
      onCancel: this.onCancel
    })));
  }

  renderPhaseSkipConfirm() {
    return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("If you cancel now, you may lose encrypted messages & data if you lose access to your logins.")), /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("You can also set up Secure Backup & manage your keys in Settings.")), /*#__PURE__*/_react.default.createElement(_DialogButtons.default, {
      primaryButton: (0, _languageHandler._t)('Go back'),
      onPrimaryButtonClick: this.onGoBackClick,
      hasCancel: false
    }, /*#__PURE__*/_react.default.createElement("button", {
      type: "button",
      className: "danger",
      onClick: this.onCancel
    }, (0, _languageHandler._t)('Cancel'))));
  }

  titleForPhase(phase) {
    switch (phase) {
      case Phase.ChooseKeyPassphrase:
        return (0, _languageHandler._t)('Set up Secure Backup');

      case Phase.Migrate:
        return (0, _languageHandler._t)('Upgrade your encryption');

      case Phase.Passphrase:
        return (0, _languageHandler._t)('Set a Security Phrase');

      case Phase.PassphraseConfirm:
        return (0, _languageHandler._t)('Confirm Security Phrase');

      case Phase.ConfirmSkip:
        return (0, _languageHandler._t)('Are you sure?');

      case Phase.ShowKey:
        return (0, _languageHandler._t)('Save your Security Key');

      case Phase.Storing:
        return (0, _languageHandler._t)('Setting up keys');

      default:
        return '';
    }
  }

  render() {
    let content;

    if (this.state.error) {
      content = /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Unable to set up secret storage")), /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_Dialog_buttons"
      }, /*#__PURE__*/_react.default.createElement(_DialogButtons.default, {
        primaryButton: (0, _languageHandler._t)('Retry'),
        onPrimaryButtonClick: this.bootstrapSecretStorage,
        hasCancel: this.state.canSkip,
        onCancel: this.onCancel
      })));
    } else {
      switch (this.state.phase) {
        case Phase.Loading:
          content = this.renderBusyPhase();
          break;

        case Phase.LoadError:
          content = this.renderPhaseLoadError();
          break;

        case Phase.ChooseKeyPassphrase:
          content = this.renderPhaseChooseKeyPassphrase();
          break;

        case Phase.Migrate:
          content = this.renderPhaseMigrate();
          break;

        case Phase.Passphrase:
          content = this.renderPhasePassPhrase();
          break;

        case Phase.PassphraseConfirm:
          content = this.renderPhasePassPhraseConfirm();
          break;

        case Phase.ShowKey:
          content = this.renderPhaseShowKey();
          break;

        case Phase.Storing:
          content = this.renderBusyPhase();
          break;

        case Phase.ConfirmSkip:
          content = this.renderPhaseSkipConfirm();
          break;
      }
    }

    let titleClass = null;

    switch (this.state.phase) {
      case Phase.Passphrase:
      case Phase.PassphraseConfirm:
        titleClass = ['mx_CreateSecretStorageDialog_titleWithIcon', 'mx_CreateSecretStorageDialog_securePhraseTitle'];
        break;

      case Phase.ShowKey:
        titleClass = ['mx_CreateSecretStorageDialog_titleWithIcon', 'mx_CreateSecretStorageDialog_secureBackupTitle'];
        break;

      case Phase.ChooseKeyPassphrase:
        titleClass = 'mx_CreateSecretStorageDialog_centeredTitle';
        break;
    }

    return /*#__PURE__*/_react.default.createElement(_BaseDialog.default, {
      className: "mx_CreateSecretStorageDialog",
      onFinished: this.props.onFinished,
      title: this.titleForPhase(this.state.phase),
      titleClass: titleClass,
      hasCancel: this.props.hasCancel && [Phase.Passphrase].includes(this.state.phase),
      fixedWidth: false
    }, /*#__PURE__*/_react.default.createElement("div", null, content));
  }

}

exports.default = CreateSecretStorageDialog;
(0, _defineProperty2.default)(CreateSecretStorageDialog, "defaultProps", {
  hasCancel: true,
  forceReset: false
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,