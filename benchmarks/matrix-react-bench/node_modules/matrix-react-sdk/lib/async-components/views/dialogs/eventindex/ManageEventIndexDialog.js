"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _languageHandler = require("../../../../languageHandler");

var _SdkConfig = _interopRequireDefault(require("../../../../SdkConfig"));

var _SettingsStore = _interopRequireDefault(require("../../../../settings/SettingsStore"));

var _Modal = _interopRequireDefault(require("../../../../Modal"));

var _FormattingUtils = require("../../../../utils/FormattingUtils");

var _EventIndexPeg = _interopRequireDefault(require("../../../../indexing/EventIndexPeg"));

var _SettingLevel = require("../../../../settings/SettingLevel");

var _Field = _interopRequireDefault(require("../../../../components/views/elements/Field"));

var _BaseDialog = _interopRequireDefault(require("../../../../components/views/dialogs/BaseDialog"));

var _DialogButtons = _interopRequireDefault(require("../../../../components/views/elements/DialogButtons"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
 * Allows the user to introspect the event index state and disable it.
 */
class ManageEventIndexDialog extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "updateCurrentRoom", async room => {
      const eventIndex = _EventIndexPeg.default.get();

      let stats;

      try {
        stats = await eventIndex.getStats();
      } catch {
        // This call may fail if sporadically, not a huge issue as we will
        // try later again and probably succeed.
        return;
      }

      let currentRoom = null;
      if (room) currentRoom = room.name;
      const roomStats = eventIndex.crawlingRooms();
      const crawlingRoomsCount = roomStats.crawlingRooms.size;
      const roomCount = roomStats.totalRooms.size;
      this.setState({
        eventIndexSize: stats.size,
        eventCount: stats.eventCount,
        crawlingRoomsCount: crawlingRoomsCount,
        roomCount: roomCount,
        currentRoom: currentRoom
      });
    });
    (0, _defineProperty2.default)(this, "onDisable", async () => {
      const DisableEventIndexDialog = (await Promise.resolve().then(() => _interopRequireWildcard(require("./DisableEventIndexDialog")))).default;

      _Modal.default.createTrackedDialog("Disable message search", "Disable message search", DisableEventIndexDialog, null, null,
      /* priority = */
      false,
      /* static = */
      true);
    });
    (0, _defineProperty2.default)(this, "onCrawlerSleepTimeChange", e => {
      this.setState({
        crawlerSleepTime: e.target.value
      });

      _SettingsStore.default.setValue("crawlerSleepTime", null, _SettingLevel.SettingLevel.DEVICE, e.target.value);
    });
    this.state = {
      eventIndexSize: 0,
      eventCount: 0,
      crawlingRoomsCount: 0,
      roomCount: 0,
      currentRoom: null,
      crawlerSleepTime: _SettingsStore.default.getValueAt(_SettingLevel.SettingLevel.DEVICE, 'crawlerSleepTime')
    };
  }

  componentWillUnmount() {
    const eventIndex = _EventIndexPeg.default.get();

    if (eventIndex !== null) {
      eventIndex.removeListener("changedCheckpoint", this.updateCurrentRoom);
    }
  }

  async componentDidMount() {
    let eventIndexSize = 0;
    let crawlingRoomsCount = 0;
    let roomCount = 0;
    let eventCount = 0;
    let currentRoom = null;

    const eventIndex = _EventIndexPeg.default.get();

    if (eventIndex !== null) {
      eventIndex.on("changedCheckpoint", this.updateCurrentRoom);

      try {
        const stats = await eventIndex.getStats();
        eventIndexSize = stats.size;
        eventCount = stats.eventCount;
      } catch {// This call may fail if sporadically, not a huge issue as we
        // will try later again in the updateCurrentRoom call and
        // probably succeed.
      }

      const roomStats = eventIndex.crawlingRooms();
      crawlingRoomsCount = roomStats.crawlingRooms.size;
      roomCount = roomStats.totalRooms.size;
      const room = eventIndex.currentRoom();
      if (room) currentRoom = room.name;
    }

    this.setState({
      eventIndexSize,
      eventCount,
      crawlingRoomsCount,
      roomCount,
      currentRoom
    });
  }

  render() {
    const brand = _SdkConfig.default.get().brand;

    let crawlerState;

    if (this.state.currentRoom === null) {
      crawlerState = (0, _languageHandler._t)("Not currently indexing messages for any room.");
    } else {
      crawlerState = (0, _languageHandler._t)("Currently indexing: %(currentRoom)s", {
        currentRoom: this.state.currentRoom
      });
    }

    const doneRooms = Math.max(0, this.state.roomCount - this.state.crawlingRoomsCount);

    const eventIndexingSettings = /*#__PURE__*/_react.default.createElement("div", null, (0, _languageHandler._t)("%(brand)s is securely caching encrypted messages locally for them " + "to appear in search results:", {
      brand
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_subsectionText"
    }, crawlerState, /*#__PURE__*/_react.default.createElement("br", null), (0, _languageHandler._t)("Space used:"), " ", (0, _FormattingUtils.formatBytes)(this.state.eventIndexSize, 0), /*#__PURE__*/_react.default.createElement("br", null), (0, _languageHandler._t)("Indexed messages:"), " ", (0, _FormattingUtils.formatCountLong)(this.state.eventCount), /*#__PURE__*/_react.default.createElement("br", null), (0, _languageHandler._t)("Indexed rooms:"), " ", (0, _languageHandler._t)("%(doneRooms)s out of %(totalRooms)s", {
      doneRooms: (0, _FormattingUtils.formatCountLong)(doneRooms),
      totalRooms: (0, _FormattingUtils.formatCountLong)(this.state.roomCount)
    }), " ", /*#__PURE__*/_react.default.createElement("br", null), /*#__PURE__*/_react.default.createElement(_Field.default, {
      label: (0, _languageHandler._t)('Message downloading sleep time(ms)'),
      type: "number",
      value: this.state.crawlerSleepTime.toString(),
      onChange: this.onCrawlerSleepTimeChange
    })));

    return /*#__PURE__*/_react.default.createElement(_BaseDialog.default, {
      className: "mx_ManageEventIndexDialog",
      onFinished: this.props.onFinished,
      title: (0, _languageHandler._t)("Message search")
    }, eventIndexingSettings, /*#__PURE__*/_react.default.createElement(_DialogButtons.default, {
      primaryButton: (0, _languageHandler._t)("Done"),
      onPrimaryButtonClick: this.props.onFinished,
      primaryButtonClass: "primary",
      cancelButton: (0, _languageHandler._t)("Disable"),
      onCancel: this.onDisable,
      cancelButtonClass: "danger"
    }));
  }

}

exports.default = ManageEventIndexDialog;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,