"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getIncomingCallToastKey = exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _call = require("matrix-js-sdk/src/webrtc/call");

var _classnames = _interopRequireDefault(require("classnames"));

var _replaceableComponent = require("../utils/replaceableComponent");

var _CallHandler = _interopRequireWildcard(require("../CallHandler"));

var _dispatcher = _interopRequireDefault(require("../dispatcher/dispatcher"));

var _MatrixClientPeg = require("../MatrixClientPeg");

var _languageHandler = require("../languageHandler");

var _RoomAvatar = _interopRequireDefault(require("../components/views/avatars/RoomAvatar"));

var _AccessibleTooltipButton = _interopRequireDefault(require("../components/views/elements/AccessibleTooltipButton"));

var _AccessibleButton = _interopRequireDefault(require("../components/views/elements/AccessibleButton"));

var _dec, _class;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const getIncomingCallToastKey = callId => `call_${callId}`;

exports.getIncomingCallToastKey = getIncomingCallToastKey;
let IncomingCallToast = (_dec = (0, _replaceableComponent.replaceableComponent)("views.voip.IncomingCallToast"), _dec(_class = class IncomingCallToast extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "componentDidMount", () => {
      _CallHandler.default.sharedInstance().addListener(_CallHandler.CallHandlerEvent.SilencedCallsChanged, this.onSilencedCallsChanged);
    });
    (0, _defineProperty2.default)(this, "onSilencedCallsChanged", () => {
      this.setState({
        silenced: _CallHandler.default.sharedInstance().isCallSilenced(this.props.call.callId)
      });
    });
    (0, _defineProperty2.default)(this, "onAnswerClick", e => {
      e.stopPropagation();

      _dispatcher.default.dispatch({
        action: 'answer',
        room_id: _CallHandler.default.sharedInstance().roomIdForCall(this.props.call)
      });
    });
    (0, _defineProperty2.default)(this, "onRejectClick", e => {
      e.stopPropagation();

      _dispatcher.default.dispatch({
        action: 'reject',
        room_id: _CallHandler.default.sharedInstance().roomIdForCall(this.props.call)
      });
    });
    (0, _defineProperty2.default)(this, "onSilenceClick", e => {
      e.stopPropagation();
      const callId = this.props.call.callId;
      this.state.silenced ? _CallHandler.default.sharedInstance().unSilenceCall(callId) : _CallHandler.default.sharedInstance().silenceCall(callId);
    });
    this.state = {
      silenced: _CallHandler.default.sharedInstance().isCallSilenced(this.props.call.callId)
    };
  }

  componentWillUnmount() {
    _CallHandler.default.sharedInstance().removeListener(_CallHandler.CallHandlerEvent.SilencedCallsChanged, this.onSilencedCallsChanged);
  }

  render() {
    const call = this.props.call;

    const room = _MatrixClientPeg.MatrixClientPeg.get().getRoom(_CallHandler.default.sharedInstance().roomIdForCall(call));

    const isVoice = call.type === _call.CallType.Voice;
    const contentClass = (0, _classnames.default)("mx_IncomingCallToast_content", {
      "mx_IncomingCallToast_content_voice": isVoice,
      "mx_IncomingCallToast_content_video": !isVoice
    });
    const silenceClass = (0, _classnames.default)("mx_IncomingCallToast_iconButton", {
      "mx_IncomingCallToast_unSilence": this.state.silenced,
      "mx_IncomingCallToast_silence": !this.state.silenced
    });
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_RoomAvatar.default, {
      room: room,
      height: 32,
      width: 32
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: contentClass
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_CallEvent_caller"
    }, room ? room.name : (0, _languageHandler._t)("Unknown caller")), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_CallEvent_type"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_CallEvent_type_icon"
    }), isVoice ? (0, _languageHandler._t)("Voice call") : (0, _languageHandler._t)("Video call")), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_IncomingCallToast_buttons"
    }, /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      className: "mx_IncomingCallToast_button mx_IncomingCallToast_button_decline",
      onClick: this.onRejectClick,
      kind: "danger"
    }, /*#__PURE__*/_react.default.createElement("span", null, " ", (0, _languageHandler._t)("Decline"), " ")), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      className: "mx_IncomingCallToast_button mx_IncomingCallToast_button_accept",
      onClick: this.onAnswerClick,
      kind: "primary"
    }, /*#__PURE__*/_react.default.createElement("span", null, " ", (0, _languageHandler._t)("Accept"), " ")))), /*#__PURE__*/_react.default.createElement(_AccessibleTooltipButton.default, {
      className: silenceClass,
      onClick: this.onSilenceClick,
      title: this.state.silenced ? (0, _languageHandler._t)("Sound on") : (0, _languageHandler._t)("Silence call")
    }));
  }

}) || _class);
exports.default = IncomingCallToast;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,