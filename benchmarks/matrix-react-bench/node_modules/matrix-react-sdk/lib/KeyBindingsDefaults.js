"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.defaultBindingsProvider = void 0;

var _KeyBindingsManager = require("./KeyBindingsManager");

var _Keyboard = require("./Keyboard");

var _SettingsStore = _interopRequireDefault(require("./settings/SettingsStore"));

/*
Copyright 2021 Clemens Zeidler

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const messageComposerBindings = () => {
  const bindings = [{
    action: _KeyBindingsManager.MessageComposerAction.SelectPrevSendHistory,
    keyCombo: {
      key: _Keyboard.Key.ARROW_UP,
      altKey: true,
      ctrlKey: true
    }
  }, {
    action: _KeyBindingsManager.MessageComposerAction.SelectNextSendHistory,
    keyCombo: {
      key: _Keyboard.Key.ARROW_DOWN,
      altKey: true,
      ctrlKey: true
    }
  }, {
    action: _KeyBindingsManager.MessageComposerAction.EditPrevMessage,
    keyCombo: {
      key: _Keyboard.Key.ARROW_UP
    }
  }, {
    action: _KeyBindingsManager.MessageComposerAction.EditNextMessage,
    keyCombo: {
      key: _Keyboard.Key.ARROW_DOWN
    }
  }, {
    action: _KeyBindingsManager.MessageComposerAction.CancelEditing,
    keyCombo: {
      key: _Keyboard.Key.ESCAPE
    }
  }, {
    action: _KeyBindingsManager.MessageComposerAction.FormatBold,
    keyCombo: {
      key: _Keyboard.Key.B,
      ctrlOrCmd: true
    }
  }, {
    action: _KeyBindingsManager.MessageComposerAction.FormatItalics,
    keyCombo: {
      key: _Keyboard.Key.I,
      ctrlOrCmd: true
    }
  }, {
    action: _KeyBindingsManager.MessageComposerAction.FormatQuote,
    keyCombo: {
      key: _Keyboard.Key.GREATER_THAN,
      ctrlOrCmd: true,
      shiftKey: true
    }
  }, {
    action: _KeyBindingsManager.MessageComposerAction.EditUndo,
    keyCombo: {
      key: _Keyboard.Key.Z,
      ctrlOrCmd: true
    }
  }, {
    action: _KeyBindingsManager.MessageComposerAction.MoveCursorToStart,
    keyCombo: {
      key: _Keyboard.Key.HOME,
      ctrlOrCmd: true
    }
  }, {
    action: _KeyBindingsManager.MessageComposerAction.MoveCursorToEnd,
    keyCombo: {
      key: _Keyboard.Key.END,
      ctrlOrCmd: true
    }
  }];

  if (_Keyboard.isMac) {
    bindings.push({
      action: _KeyBindingsManager.MessageComposerAction.EditRedo,
      keyCombo: {
        key: _Keyboard.Key.Z,
        ctrlOrCmd: true,
        shiftKey: true
      }
    });
  } else {
    bindings.push({
      action: _KeyBindingsManager.MessageComposerAction.EditRedo,
      keyCombo: {
        key: _Keyboard.Key.Y,
        ctrlOrCmd: true
      }
    });
  }

  if (_SettingsStore.default.getValue('MessageComposerInput.ctrlEnterToSend')) {
    bindings.push({
      action: _KeyBindingsManager.MessageComposerAction.Send,
      keyCombo: {
        key: _Keyboard.Key.ENTER,
        ctrlOrCmd: true
      }
    });
    bindings.push({
      action: _KeyBindingsManager.MessageComposerAction.NewLine,
      keyCombo: {
        key: _Keyboard.Key.ENTER
      }
    });
  } else {
    bindings.push({
      action: _KeyBindingsManager.MessageComposerAction.Send,
      keyCombo: {
        key: _Keyboard.Key.ENTER
      }
    });
    bindings.push({
      action: _KeyBindingsManager.MessageComposerAction.NewLine,
      keyCombo: {
        key: _Keyboard.Key.ENTER,
        shiftKey: true
      }
    });

    if (_Keyboard.isMac) {
      bindings.push({
        action: _KeyBindingsManager.MessageComposerAction.NewLine,
        keyCombo: {
          key: _Keyboard.Key.ENTER,
          altKey: true
        }
      });
    }
  }

  return bindings;
};

const autocompleteBindings = () => {
  return [{
    action: _KeyBindingsManager.AutocompleteAction.ForceComplete,
    keyCombo: {
      key: _Keyboard.Key.TAB
    }
  }, {
    action: _KeyBindingsManager.AutocompleteAction.ForceComplete,
    keyCombo: {
      key: _Keyboard.Key.TAB,
      ctrlKey: true
    }
  }, {
    action: _KeyBindingsManager.AutocompleteAction.Complete,
    keyCombo: {
      key: _Keyboard.Key.ENTER
    }
  }, {
    action: _KeyBindingsManager.AutocompleteAction.Complete,
    keyCombo: {
      key: _Keyboard.Key.ENTER,
      ctrlKey: true
    }
  }, {
    action: _KeyBindingsManager.AutocompleteAction.Cancel,
    keyCombo: {
      key: _Keyboard.Key.ESCAPE
    }
  }, {
    action: _KeyBindingsManager.AutocompleteAction.PrevSelection,
    keyCombo: {
      key: _Keyboard.Key.ARROW_UP
    }
  }, {
    action: _KeyBindingsManager.AutocompleteAction.NextSelection,
    keyCombo: {
      key: _Keyboard.Key.ARROW_DOWN
    }
  }];
};

const roomListBindings = () => {
  return [{
    action: _KeyBindingsManager.RoomListAction.ClearSearch,
    keyCombo: {
      key: _Keyboard.Key.ESCAPE
    }
  }, {
    action: _KeyBindingsManager.RoomListAction.PrevRoom,
    keyCombo: {
      key: _Keyboard.Key.ARROW_UP
    }
  }, {
    action: _KeyBindingsManager.RoomListAction.NextRoom,
    keyCombo: {
      key: _Keyboard.Key.ARROW_DOWN
    }
  }, {
    action: _KeyBindingsManager.RoomListAction.SelectRoom,
    keyCombo: {
      key: _Keyboard.Key.ENTER
    }
  }, {
    action: _KeyBindingsManager.RoomListAction.CollapseSection,
    keyCombo: {
      key: _Keyboard.Key.ARROW_LEFT
    }
  }, {
    action: _KeyBindingsManager.RoomListAction.ExpandSection,
    keyCombo: {
      key: _Keyboard.Key.ARROW_RIGHT
    }
  }];
};

const roomBindings = () => {
  const bindings = [{
    action: _KeyBindingsManager.RoomAction.ScrollUp,
    keyCombo: {
      key: _Keyboard.Key.PAGE_UP
    }
  }, {
    action: _KeyBindingsManager.RoomAction.RoomScrollDown,
    keyCombo: {
      key: _Keyboard.Key.PAGE_DOWN
    }
  }, {
    action: _KeyBindingsManager.RoomAction.DismissReadMarker,
    keyCombo: {
      key: _Keyboard.Key.ESCAPE
    }
  }, {
    action: _KeyBindingsManager.RoomAction.JumpToOldestUnread,
    keyCombo: {
      key: _Keyboard.Key.PAGE_UP,
      shiftKey: true
    }
  }, {
    action: _KeyBindingsManager.RoomAction.UploadFile,
    keyCombo: {
      key: _Keyboard.Key.U,
      ctrlOrCmd: true,
      shiftKey: true
    }
  }, {
    action: _KeyBindingsManager.RoomAction.JumpToFirstMessage,
    keyCombo: {
      key: _Keyboard.Key.HOME,
      ctrlKey: true
    }
  }, {
    action: _KeyBindingsManager.RoomAction.JumpToLatestMessage,
    keyCombo: {
      key: _Keyboard.Key.END,
      ctrlKey: true
    }
  }];

  if (_SettingsStore.default.getValue('ctrlFForSearch')) {
    bindings.push({
      action: _KeyBindingsManager.RoomAction.FocusSearch,
      keyCombo: {
        key: _Keyboard.Key.F,
        ctrlOrCmd: true
      }
    });
  }

  return bindings;
};

const navigationBindings = () => {
  return [{
    action: _KeyBindingsManager.NavigationAction.FocusRoomSearch,
    keyCombo: {
      key: _Keyboard.Key.K,
      ctrlOrCmd: true
    }
  }, {
    action: _KeyBindingsManager.NavigationAction.ToggleRoomSidePanel,
    keyCombo: {
      key: _Keyboard.Key.PERIOD,
      ctrlOrCmd: true
    }
  }, {
    action: _KeyBindingsManager.NavigationAction.ToggleUserMenu,
    // Ideally this would be CTRL+P for "Profile", but that's
    // taken by the print dialog. CTRL+I for "Information"
    // was previously chosen but conflicted with italics in
    // composer, so CTRL+` it is
    keyCombo: {
      key: _Keyboard.Key.BACKTICK,
      ctrlOrCmd: true
    }
  }, {
    action: _KeyBindingsManager.NavigationAction.ToggleShortCutDialog,
    keyCombo: {
      key: _Keyboard.Key.SLASH,
      ctrlOrCmd: true
    }
  }, {
    action: _KeyBindingsManager.NavigationAction.ToggleShortCutDialog,
    keyCombo: {
      key: _Keyboard.Key.SLASH,
      ctrlOrCmd: true,
      shiftKey: true
    }
  }, {
    action: _KeyBindingsManager.NavigationAction.GoToHome,
    keyCombo: {
      key: _Keyboard.Key.H,
      ctrlKey: true,
      altKey: !_Keyboard.isMac,
      shiftKey: _Keyboard.isMac
    }
  }, {
    action: _KeyBindingsManager.NavigationAction.SelectPrevRoom,
    keyCombo: {
      key: _Keyboard.Key.ARROW_UP,
      altKey: true
    }
  }, {
    action: _KeyBindingsManager.NavigationAction.SelectNextRoom,
    keyCombo: {
      key: _Keyboard.Key.ARROW_DOWN,
      altKey: true
    }
  }, {
    action: _KeyBindingsManager.NavigationAction.SelectPrevUnreadRoom,
    keyCombo: {
      key: _Keyboard.Key.ARROW_UP,
      altKey: true,
      shiftKey: true
    }
  }, {
    action: _KeyBindingsManager.NavigationAction.SelectNextUnreadRoom,
    keyCombo: {
      key: _Keyboard.Key.ARROW_DOWN,
      altKey: true,
      shiftKey: true
    }
  }];
};

const defaultBindingsProvider = {
  getMessageComposerBindings: messageComposerBindings,
  getAutocompleteBindings: autocompleteBindings,
  getRoomListBindings: roomListBindings,
  getRoomBindings: roomBindings,
  getNavigationBindings: navigationBindings
};
exports.defaultBindingsProvider = defaultBindingsProvider;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,