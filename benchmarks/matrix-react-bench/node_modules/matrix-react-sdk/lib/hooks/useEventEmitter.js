"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useEventEmitterState = exports.useEventEmitter = void 0;

var _react = require("react");

/*
Copyright 2019 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Hook to wrap event emitter on and removeListener in hook lifecycle
const useEventEmitter = (emitter, eventName, handler) => {
  // Create a ref that stores handler
  const savedHandler = (0, _react.useRef)(handler); // Update ref.current value if handler changes.

  (0, _react.useEffect)(() => {
    savedHandler.current = handler;
  }, [handler]);
  (0, _react.useEffect)(() => {
    // allow disabling this hook by passing a falsy emitter
    if (!emitter) return; // Create event listener that calls handler function stored in ref

    const eventListener = (...args) => savedHandler.current(...args); // Add event listener


    emitter.on(eventName, eventListener); // Remove event listener on cleanup

    return () => {
      emitter.removeListener(eventName, eventListener);
    };
  }, [eventName, emitter] // Re-run if eventName or emitter changes
  );
};

exports.useEventEmitter = useEventEmitter;

const useEventEmitterState = (emitter, eventName, fn) => {
  const [value, setValue] = (0, _react.useState)(fn());
  const handler = (0, _react.useCallback)((...args) => {
    setValue(fn(...args));
  }, [fn]);
  useEventEmitter(emitter, eventName, handler);
  return value;
};

exports.useEventEmitterState = useEventEmitterState;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ob29rcy91c2VFdmVudEVtaXR0ZXIudHMiXSwibmFtZXMiOlsidXNlRXZlbnRFbWl0dGVyIiwiZW1pdHRlciIsImV2ZW50TmFtZSIsImhhbmRsZXIiLCJzYXZlZEhhbmRsZXIiLCJjdXJyZW50IiwiZXZlbnRMaXN0ZW5lciIsImFyZ3MiLCJvbiIsInJlbW92ZUxpc3RlbmVyIiwidXNlRXZlbnRFbWl0dGVyU3RhdGUiLCJmbiIsInZhbHVlIiwic2V0VmFsdWUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFnQkE7O0FBaEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQU9BO0FBQ08sTUFBTUEsZUFBZSxHQUFHLENBQzNCQyxPQUQyQixFQUUzQkMsU0FGMkIsRUFHM0JDLE9BSDJCLEtBSTFCO0FBQ0Q7QUFDQSxRQUFNQyxZQUFZLEdBQUcsbUJBQU9ELE9BQVAsQ0FBckIsQ0FGQyxDQUlEOztBQUNBLHdCQUFVLE1BQU07QUFDWkMsSUFBQUEsWUFBWSxDQUFDQyxPQUFiLEdBQXVCRixPQUF2QjtBQUNILEdBRkQsRUFFRyxDQUFDQSxPQUFELENBRkg7QUFJQSx3QkFDSSxNQUFNO0FBQ0Y7QUFDQSxRQUFJLENBQUNGLE9BQUwsRUFBYyxPQUZaLENBSUY7O0FBQ0EsVUFBTUssYUFBYSxHQUFHLENBQUMsR0FBR0MsSUFBSixLQUFhSCxZQUFZLENBQUNDLE9BQWIsQ0FBcUIsR0FBR0UsSUFBeEIsQ0FBbkMsQ0FMRSxDQU9GOzs7QUFDQU4sSUFBQUEsT0FBTyxDQUFDTyxFQUFSLENBQVdOLFNBQVgsRUFBc0JJLGFBQXRCLEVBUkUsQ0FVRjs7QUFDQSxXQUFPLE1BQU07QUFDVEwsTUFBQUEsT0FBTyxDQUFDUSxjQUFSLENBQXVCUCxTQUF2QixFQUFrQ0ksYUFBbEM7QUFDSCxLQUZEO0FBR0gsR0FmTCxFQWdCSSxDQUFDSixTQUFELEVBQVlELE9BQVosQ0FoQkosQ0FnQjBCO0FBaEIxQjtBQWtCSCxDQS9CTTs7OztBQW1DQSxNQUFNUyxvQkFBb0IsR0FBRyxDQUNoQ1QsT0FEZ0MsRUFFaENDLFNBRmdDLEVBR2hDUyxFQUhnQyxLQUk1QjtBQUNKLFFBQU0sQ0FBQ0MsS0FBRCxFQUFRQyxRQUFSLElBQW9CLHFCQUFZRixFQUFFLEVBQWQsQ0FBMUI7QUFDQSxRQUFNUixPQUFPLEdBQUcsd0JBQVksQ0FBQyxHQUFHSSxJQUFKLEtBQW9CO0FBQzVDTSxJQUFBQSxRQUFRLENBQUNGLEVBQUUsQ0FBQyxHQUFHSixJQUFKLENBQUgsQ0FBUjtBQUNILEdBRmUsRUFFYixDQUFDSSxFQUFELENBRmEsQ0FBaEI7QUFHQVgsRUFBQUEsZUFBZSxDQUFDQyxPQUFELEVBQVVDLFNBQVYsRUFBcUJDLE9BQXJCLENBQWY7QUFDQSxTQUFPUyxLQUFQO0FBQ0gsQ0FYTSIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5Db3B5cmlnaHQgMjAxOSBUaGUgTWF0cml4Lm9yZyBGb3VuZGF0aW9uIEMuSS5DLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbmltcG9ydCB7IHVzZVJlZiwgdXNlRWZmZWN0LCB1c2VTdGF0ZSwgdXNlQ2FsbGJhY2sgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB0eXBlIHsgRXZlbnRFbWl0dGVyIH0gZnJvbSBcImV2ZW50c1wiO1xuXG50eXBlIEhhbmRsZXIgPSAoLi4uYXJnczogYW55W10pID0+IHZvaWQ7XG5cbi8vIEhvb2sgdG8gd3JhcCBldmVudCBlbWl0dGVyIG9uIGFuZCByZW1vdmVMaXN0ZW5lciBpbiBob29rIGxpZmVjeWNsZVxuZXhwb3J0IGNvbnN0IHVzZUV2ZW50RW1pdHRlciA9IChcbiAgICBlbWl0dGVyOiBFdmVudEVtaXR0ZXIgfCB1bmRlZmluZWQsXG4gICAgZXZlbnROYW1lOiBzdHJpbmcgfCBzeW1ib2wsXG4gICAgaGFuZGxlcjogSGFuZGxlcixcbikgPT4ge1xuICAgIC8vIENyZWF0ZSBhIHJlZiB0aGF0IHN0b3JlcyBoYW5kbGVyXG4gICAgY29uc3Qgc2F2ZWRIYW5kbGVyID0gdXNlUmVmKGhhbmRsZXIpO1xuXG4gICAgLy8gVXBkYXRlIHJlZi5jdXJyZW50IHZhbHVlIGlmIGhhbmRsZXIgY2hhbmdlcy5cbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBzYXZlZEhhbmRsZXIuY3VycmVudCA9IGhhbmRsZXI7XG4gICAgfSwgW2hhbmRsZXJdKTtcblxuICAgIHVzZUVmZmVjdChcbiAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgLy8gYWxsb3cgZGlzYWJsaW5nIHRoaXMgaG9vayBieSBwYXNzaW5nIGEgZmFsc3kgZW1pdHRlclxuICAgICAgICAgICAgaWYgKCFlbWl0dGVyKSByZXR1cm47XG5cbiAgICAgICAgICAgIC8vIENyZWF0ZSBldmVudCBsaXN0ZW5lciB0aGF0IGNhbGxzIGhhbmRsZXIgZnVuY3Rpb24gc3RvcmVkIGluIHJlZlxuICAgICAgICAgICAgY29uc3QgZXZlbnRMaXN0ZW5lciA9ICguLi5hcmdzKSA9PiBzYXZlZEhhbmRsZXIuY3VycmVudCguLi5hcmdzKTtcblxuICAgICAgICAgICAgLy8gQWRkIGV2ZW50IGxpc3RlbmVyXG4gICAgICAgICAgICBlbWl0dGVyLm9uKGV2ZW50TmFtZSwgZXZlbnRMaXN0ZW5lcik7XG5cbiAgICAgICAgICAgIC8vIFJlbW92ZSBldmVudCBsaXN0ZW5lciBvbiBjbGVhbnVwXG4gICAgICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGVtaXR0ZXIucmVtb3ZlTGlzdGVuZXIoZXZlbnROYW1lLCBldmVudExpc3RlbmVyKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIFtldmVudE5hbWUsIGVtaXR0ZXJdLCAvLyBSZS1ydW4gaWYgZXZlbnROYW1lIG9yIGVtaXR0ZXIgY2hhbmdlc1xuICAgICk7XG59O1xuXG50eXBlIE1hcHBlcjxUPiA9ICguLi5hcmdzOiBhbnlbXSkgPT4gVDtcblxuZXhwb3J0IGNvbnN0IHVzZUV2ZW50RW1pdHRlclN0YXRlID0gPFQ+KFxuICAgIGVtaXR0ZXI6IEV2ZW50RW1pdHRlciB8IHVuZGVmaW5lZCxcbiAgICBldmVudE5hbWU6IHN0cmluZyB8IHN5bWJvbCxcbiAgICBmbjogTWFwcGVyPFQ+LFxuKTogVCA9PiB7XG4gICAgY29uc3QgW3ZhbHVlLCBzZXRWYWx1ZV0gPSB1c2VTdGF0ZTxUPihmbigpKTtcbiAgICBjb25zdCBoYW5kbGVyID0gdXNlQ2FsbGJhY2soKC4uLmFyZ3M6IGFueVtdKSA9PiB7XG4gICAgICAgIHNldFZhbHVlKGZuKC4uLmFyZ3MpKTtcbiAgICB9LCBbZm5dKTtcbiAgICB1c2VFdmVudEVtaXR0ZXIoZW1pdHRlciwgZXZlbnROYW1lLCBoYW5kbGVyKTtcbiAgICByZXR1cm4gdmFsdWU7XG59O1xuIl19