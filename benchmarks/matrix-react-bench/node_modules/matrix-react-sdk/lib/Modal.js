"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ModalManager = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _classnames = _interopRequireDefault(require("classnames"));

var _utils = require("matrix-js-sdk/src/utils");

var _Analytics = _interopRequireDefault(require("./Analytics"));

var _dispatcher = _interopRequireDefault(require("./dispatcher/dispatcher"));

var _AsyncWrapper = _interopRequireDefault(require("./AsyncWrapper"));

/*
Copyright 2015, 2016 OpenMarket Ltd
Copyright 2020 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const DIALOG_CONTAINER_ID = "mx_Dialog_Container";
const STATIC_DIALOG_CONTAINER_ID = "mx_Dialog_StaticContainer";

class ModalManager {
  constructor() {
    (0, _defineProperty2.default)(this, "counter", 0);
    (0, _defineProperty2.default)(this, "priorityModal", null);
    (0, _defineProperty2.default)(this, "staticModal", null);
    (0, _defineProperty2.default)(this, "modals", []);
    (0, _defineProperty2.default)(this, "onBackgroundClick", () => {
      const modal = this.getCurrentModal();

      if (!modal) {
        return;
      } // we want to pass a reason to the onBeforeClose
      // callback, but close is currently defined to
      // pass all number of arguments to the onFinished callback
      // so, pass the reason to close through a member variable


      modal.closeReason = "backgroundClick";
      modal.close();
      modal.closeReason = null;
    });
  }

  static getOrCreateContainer() {
    let container = document.getElementById(DIALOG_CONTAINER_ID);

    if (!container) {
      container = document.createElement("div");
      container.id = DIALOG_CONTAINER_ID;
      document.body.appendChild(container);
    }

    return container;
  }

  static getOrCreateStaticContainer() {
    let container = document.getElementById(STATIC_DIALOG_CONTAINER_ID);

    if (!container) {
      container = document.createElement("div");
      container.id = STATIC_DIALOG_CONTAINER_ID;
      document.body.appendChild(container);
    }

    return container;
  }

  toggleCurrentDialogVisibility() {
    const modal = this.getCurrentModal();
    if (!modal) return;
    modal.hidden = !modal.hidden;
  }

  hasDialogs() {
    return this.priorityModal || this.staticModal || this.modals.length > 0;
  }

  createTrackedDialog(analyticsAction, analyticsInfo, ...rest) {
    _Analytics.default.trackEvent('Modal', analyticsAction, analyticsInfo);

    return this.createDialog(...rest);
  }

  appendTrackedDialog(analyticsAction, analyticsInfo, ...rest) {
    _Analytics.default.trackEvent('Modal', analyticsAction, analyticsInfo);

    return this.appendDialog(...rest);
  }

  createDialog(Element, ...rest) {
    return this.createDialogAsync(Promise.resolve(Element), ...rest);
  }

  appendDialog(Element, ...rest) {
    return this.appendDialogAsync(Promise.resolve(Element), ...rest);
  }

  createTrackedDialogAsync(analyticsAction, analyticsInfo, ...rest) {
    _Analytics.default.trackEvent('Modal', analyticsAction, analyticsInfo);

    return this.createDialogAsync(...rest);
  }

  appendTrackedDialogAsync(analyticsAction, analyticsInfo, ...rest) {
    _Analytics.default.trackEvent('Modal', analyticsAction, analyticsInfo);

    return this.appendDialogAsync(...rest);
  }

  closeCurrentModal(reason) {
    const modal = this.getCurrentModal();

    if (!modal) {
      return;
    }

    modal.closeReason = reason;
    modal.close();
  }

  buildModal(prom, props, className, options) {
    const modal = {
      onFinished: props ? props.onFinished : null,
      onBeforeClose: options.onBeforeClose,
      beforeClosePromise: null,
      closeReason: null,
      className,
      // these will be set below but we need an object reference to pass to getCloseFn before we can do that
      elem: null,
      close: null
    }; // never call this from onFinished() otherwise it will loop

    const [closeDialog, onFinishedProm] = this.getCloseFn(modal, props); // don't attempt to reuse the same AsyncWrapper for different dialogs,
    // otherwise we'll get confused.

    const modalCount = this.counter++; // FIXME: If a dialog uses getDefaultProps it clobbers the onFinished
    // property set here so you can't close the dialog from a button click!

    modal.elem = /*#__PURE__*/_react.default.createElement(_AsyncWrapper.default, (0, _extends2.default)({
      key: modalCount,
      prom: prom
    }, props, {
      onFinished: closeDialog
    }));
    modal.close = closeDialog;
    return {
      modal,
      closeDialog,
      onFinishedProm
    };
  }

  getCloseFn(modal, props) {
    const deferred = (0, _utils.defer)();
    return [async (...args) => {
      if (modal.beforeClosePromise) {
        await modal.beforeClosePromise;
      } else if (modal.onBeforeClose) {
        modal.beforeClosePromise = modal.onBeforeClose(modal.closeReason);
        const shouldClose = await modal.beforeClosePromise;
        modal.beforeClosePromise = null;

        if (!shouldClose) {
          return;
        }
      }

      deferred.resolve(args);
      if (props && props.onFinished) props.onFinished.apply(null, args);
      const i = this.modals.indexOf(modal);

      if (i >= 0) {
        this.modals.splice(i, 1);
      }

      if (this.priorityModal === modal) {
        this.priorityModal = null; // XXX: This is destructive

        this.modals = [];
      }

      if (this.staticModal === modal) {
        this.staticModal = null; // XXX: This is destructive

        this.modals = [];
      }

      this.reRender();
    }, deferred.promise];
  }
  /**
   * @callback onBeforeClose
   * @param {string?} reason either "backgroundClick" or null
   * @return {Promise<bool>} whether the dialog should close
   */

  /**
   * Open a modal view.
   *
   * This can be used to display a react component which is loaded as an asynchronous
   * webpack component. To do this, set 'loader' as:
   *
   *   (cb) => {
   *       require(['<module>'], cb);
   *   }
   *
   * @param {Promise} prom   a promise which resolves with a React component
   *   which will be displayed as the modal view.
   *
   * @param {Object} props   properties to pass to the displayed
   *    component. (We will also pass an 'onFinished' property.)
   *
   * @param {String} className   CSS class to apply to the modal wrapper
   *
   * @param {boolean} isPriorityModal if true, this modal will be displayed regardless
   *                                  of other modals that are currently in the stack.
   *                                  Also, when closed, all modals will be removed
   *                                  from the stack.
   * @param {boolean} isStaticModal  if true, this modal will be displayed under other
   *                                 modals in the stack. When closed, all modals will
   *                                 also be removed from the stack. This is not compatible
   *                                 with being a priority modal. Only one modal can be
   *                                 static at a time.
   * @param {Object} options? extra options for the dialog
   * @param {onBeforeClose} options.onBeforeClose a callback to decide whether to close the dialog
   * @returns {object} Object with 'close' parameter being a function that will close the dialog
   */


  createDialogAsync(prom, props, className, isPriorityModal = false, isStaticModal = false, options = {}) {
    const {
      modal,
      closeDialog,
      onFinishedProm
    } = this.buildModal(prom, props, className, options);

    if (isPriorityModal) {
      // XXX: This is destructive
      this.priorityModal = modal;
    } else if (isStaticModal) {
      // This is intentionally destructive
      this.staticModal = modal;
    } else {
      this.modals.unshift(modal);
    }

    this.reRender();
    return {
      close: closeDialog,
      finished: onFinishedProm
    };
  }

  appendDialogAsync(prom, props, className) {
    const {
      modal,
      closeDialog,
      onFinishedProm
    } = this.buildModal(prom, props, className, {});
    this.modals.push(modal);
    this.reRender();
    return {
      close: closeDialog,
      finished: onFinishedProm
    };
  }

  getCurrentModal() {
    return this.priorityModal ? this.priorityModal : this.modals[0] || this.staticModal;
  }

  async reRender() {
    // await next tick because sometimes ReactDOM can race with itself and cause the modal to wrongly stick around
    await (0, _utils.sleep)(0);

    if (this.modals.length === 0 && !this.priorityModal && !this.staticModal) {
      // If there is no modal to render, make all of Element available
      // to screen reader users again
      _dispatcher.default.dispatch({
        action: 'aria_unhide_main_app'
      });

      _reactDom.default.unmountComponentAtNode(ModalManager.getOrCreateContainer());

      _reactDom.default.unmountComponentAtNode(ModalManager.getOrCreateStaticContainer());

      return;
    } // Hide the content outside the modal to screen reader users
    // so they won't be able to navigate into it and act on it using
    // screen reader specific features


    _dispatcher.default.dispatch({
      action: 'aria_hide_main_app'
    });

    if (this.staticModal) {
      const classes = (0, _classnames.default)("mx_Dialog_wrapper mx_Dialog_staticWrapper", this.staticModal.className);

      const staticDialog = /*#__PURE__*/_react.default.createElement("div", {
        className: classes
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_Dialog"
      }, this.staticModal.elem), /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_Dialog_background mx_Dialog_staticBackground",
        onClick: this.onBackgroundClick
      }));

      _reactDom.default.render(staticDialog, ModalManager.getOrCreateStaticContainer());
    } else {
      // This is safe to call repeatedly if we happen to do that
      _reactDom.default.unmountComponentAtNode(ModalManager.getOrCreateStaticContainer());
    }

    const modal = this.getCurrentModal();

    if (modal !== this.staticModal && !modal.hidden) {
      const classes = (0, _classnames.default)("mx_Dialog_wrapper", modal.className, {
        mx_Dialog_wrapperWithStaticUnder: this.staticModal
      });

      const dialog = /*#__PURE__*/_react.default.createElement("div", {
        className: classes
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_Dialog"
      }, modal.elem), /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_Dialog_background",
        onClick: this.onBackgroundClick
      }));

      setImmediate(() => _reactDom.default.render(dialog, ModalManager.getOrCreateContainer()));
    } else {
      // This is safe to call repeatedly if we happen to do that
      _reactDom.default.unmountComponentAtNode(ModalManager.getOrCreateContainer());
    }
  }

}

exports.ModalManager = ModalManager;

if (!window.singletonModalManager) {
  window.singletonModalManager = new ModalManager();
}

var _default = window.singletonModalManager;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,