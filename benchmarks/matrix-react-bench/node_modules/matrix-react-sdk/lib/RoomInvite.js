"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.inviteMultipleToRoom = inviteMultipleToRoom;
exports.inviteUsersToRoom = inviteUsersToRoom;
exports.isValid3pidInvite = isValid3pidInvite;
exports.showAnyInviteErrors = showAnyInviteErrors;
exports.showCommunityInviteDialog = showCommunityInviteDialog;
exports.showCommunityRoomInviteDialog = showCommunityRoomInviteDialog;
exports.showRoomInviteDialog = showRoomInviteDialog;
exports.showStartChatInviteDialog = showStartChatInviteDialog;

var _react = _interopRequireDefault(require("react"));

var _MatrixClientPeg = require("./MatrixClientPeg");

var _MultiInviter = _interopRequireDefault(require("./utils/MultiInviter"));

var _Modal = _interopRequireDefault(require("./Modal"));

var _languageHandler = require("./languageHandler");

var _InviteDialog = _interopRequireWildcard(require("./components/views/dialogs/InviteDialog"));

var _CommunityPrototypeInviteDialog = _interopRequireDefault(require("./components/views/dialogs/CommunityPrototypeInviteDialog"));

var _CommunityPrototypeStore = require("./stores/CommunityPrototypeStore");

var _BaseAvatar = _interopRequireDefault(require("./components/views/avatars/BaseAvatar"));

var _Media = require("./customisations/Media");

var _ErrorDialog = _interopRequireDefault(require("./components/views/dialogs/ErrorDialog"));

var _logger = require("matrix-js-sdk/src/logger");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
Copyright 2016 - 2021 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/**
 * Invites multiple addresses to a room
 * Simpler interface to utils/MultiInviter but with
 * no option to cancel.
 *
 * @param {string} roomId The ID of the room to invite to
 * @param {string[]} addresses Array of strings of addresses to invite. May be matrix IDs or 3pids.
 * @param {function} progressCallback optional callback, fired after each invite.
 * @returns {Promise} Promise
 */
function inviteMultipleToRoom(roomId, addresses, progressCallback) {
  const inviter = new _MultiInviter.default(roomId, progressCallback);
  return inviter.invite(addresses).then(states => Promise.resolve({
    states,
    inviter
  }));
}

function showStartChatInviteDialog(initialText = "") {
  // This dialog handles the room creation internally - we don't need to worry about it.
  _Modal.default.createTrackedDialog('Start DM', '', _InviteDialog.default, {
    kind: _InviteDialog.KIND_DM,
    initialText
  },
  /*className=*/
  null,
  /*isPriority=*/
  false,
  /*isStatic=*/
  true);
}

function showRoomInviteDialog(roomId, initialText = "") {
  // This dialog handles the room creation internally - we don't need to worry about it.
  _Modal.default.createTrackedDialog("Invite Users", "", _InviteDialog.default, {
    kind: _InviteDialog.KIND_INVITE,
    initialText,
    roomId
  },
  /*className=*/
  null,
  /*isPriority=*/
  false,
  /*isStatic=*/
  true);
}

function showCommunityRoomInviteDialog(roomId, communityName) {
  _Modal.default.createTrackedDialog('Invite Users to Community', '', _CommunityPrototypeInviteDialog.default, {
    communityName,
    roomId
  },
  /*className=*/
  null,
  /*isPriority=*/
  false,
  /*isStatic=*/
  true);
}

function showCommunityInviteDialog(communityId) {
  const chat = _CommunityPrototypeStore.CommunityPrototypeStore.instance.getGeneralChat(communityId);

  if (chat) {
    const name = _CommunityPrototypeStore.CommunityPrototypeStore.instance.getCommunityName(communityId);

    showCommunityRoomInviteDialog(chat.roomId, name);
  } else {
    throw new Error("Failed to locate appropriate room to start an invite in");
  }
}
/**
 * Checks if the given MatrixEvent is a valid 3rd party user invite.
 * @param {MatrixEvent} event The event to check
 * @returns {boolean} True if valid, false otherwise
 */


function isValid3pidInvite(event) {
  if (!event || event.getType() !== "m.room.third_party_invite") return false; // any events without these keys are not valid 3pid invites, so we ignore them

  const requiredKeys = ['key_validity_url', 'public_key', 'display_name'];

  for (let i = 0; i < requiredKeys.length; ++i) {
    if (!event.getContent()[requiredKeys[i]]) return false;
  } // Valid enough by our standards


  return true;
}

function inviteUsersToRoom(roomId, userIds, progressCallback) {
  return inviteMultipleToRoom(roomId, userIds, progressCallback).then(result => {
    const room = _MatrixClientPeg.MatrixClientPeg.get().getRoom(roomId);

    showAnyInviteErrors(result.states, room, result.inviter);
  }).catch(err => {
    _logger.logger.error(err.stack);

    _Modal.default.createTrackedDialog('Failed to invite', '', _ErrorDialog.default, {
      title: (0, _languageHandler._t)("Failed to invite"),
      description: err && err.message ? err.message : (0, _languageHandler._t)("Operation failed")
    });
  });
}

function showAnyInviteErrors(states, room, inviter, userMap) {
  // Show user any errors
  const failedUsers = Object.keys(states).filter(a => states[a] === 'error');

  if (failedUsers.length === 1 && inviter.fatal) {
    // Just get the first message because there was a fatal problem on the first
    // user. This usually means that no other users were attempted, making it
    // pointless for us to list who failed exactly.
    _Modal.default.createTrackedDialog('Failed to invite users to the room', '', _ErrorDialog.default, {
      title: (0, _languageHandler._t)("Failed to invite users to the room:", {
        roomName: room.name
      }),
      description: inviter.getErrorText(failedUsers[0])
    });

    return false;
  } else {
    const errorList = [];

    for (const addr of failedUsers) {
      if (states[addr] === "error") {
        const reason = inviter.getErrorText(addr);
        errorList.push(addr + ": " + reason);
      }
    }

    const cli = _MatrixClientPeg.MatrixClientPeg.get();

    if (errorList.length > 0) {
      // React 16 doesn't let us use `errorList.join(<br />)` anymore, so this is our solution
      const description = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_InviteDialog_multiInviterError"
      }, /*#__PURE__*/_react.default.createElement("h4", null, (0, _languageHandler._t)("We sent the others, but the below people couldn't be invited to <RoomName/>", {}, {
        RoomName: () => /*#__PURE__*/_react.default.createElement("b", null, room.name)
      })), /*#__PURE__*/_react.default.createElement("div", null, failedUsers.map(addr => {
        var _getMxcAvatarUrl, _ref;

        const user = (userMap === null || userMap === void 0 ? void 0 : userMap.get(addr)) || cli.getUser(addr);
        const name = user.name || user.rawDisplayName;
        const avatarUrl = ((_getMxcAvatarUrl = (_ref = user).getMxcAvatarUrl) === null || _getMxcAvatarUrl === void 0 ? void 0 : _getMxcAvatarUrl.call(_ref)) || user.avatarUrl;
        return /*#__PURE__*/_react.default.createElement("div", {
          key: addr,
          className: "mx_InviteDialog_multiInviterError_entry"
        }, /*#__PURE__*/_react.default.createElement("div", {
          className: "mx_InviteDialog_multiInviterError_entry_userProfile"
        }, /*#__PURE__*/_react.default.createElement(_BaseAvatar.default, {
          url: avatarUrl ? (0, _Media.mediaFromMxc)(avatarUrl).getSquareThumbnailHttp(24) : null,
          name: name,
          idName: user.userId,
          width: 24,
          height: 24
        }), /*#__PURE__*/_react.default.createElement("span", {
          className: "mx_InviteDialog_multiInviterError_entry_name"
        }, name), /*#__PURE__*/_react.default.createElement("span", {
          className: "mx_InviteDialog_multiInviterError_entry_userId"
        }, user.userId)), /*#__PURE__*/_react.default.createElement("div", {
          className: "mx_InviteDialog_multiInviterError_entry_error"
        }, inviter.getErrorText(addr)));
      })));

      _Modal.default.createTrackedDialog("Some invites could not be sent", "", _ErrorDialog.default, {
        title: (0, _languageHandler._t)("Some invites couldn't be sent"),
        description
      });

      return false;
    }
  }

  return true;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,