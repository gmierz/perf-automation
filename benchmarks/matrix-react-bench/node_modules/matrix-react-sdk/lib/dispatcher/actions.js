"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Action = void 0;

/*
Copyright 2020 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Dispatcher actions also extend into any arbitrary string, so support that.
let Action;
exports.Action = Action;

(function (Action) {
  Action["ViewUser"] = "view_user";
  Action["ViewUserSettings"] = "view_user_settings";
  Action["ViewRoomDirectory"] = "view_room_directory";
  Action["RecheckTheme"] = "recheck_theme";
  Action["CheckUpdates"] = "check_updates";
  Action["FocusSendMessageComposer"] = "focus_send_message_composer";
  Action["FocusEditMessageComposer"] = "focus_edit_message_composer";
  Action["FocusAComposer"] = "focus_a_composer";
  Action["ToggleUserMenu"] = "toggle_user_menu";
  Action["UpdateFontSize"] = "update_font_size";
  Action["UpdateSystemFont"] = "update_system_font";
  Action["ViewRoom"] = "view_room";
  Action["ViewRoomDelta"] = "view_room_delta";
  Action["SetRightPanelPhase"] = "set_right_panel_phase";
  Action["ToggleRightPanel"] = "toggle_right_panel";
  Action["AfterRightPanelPhaseChange"] = "after_right_panel_phase_change";
  Action["OpenDialPad"] = "open_dial_pad";
  Action["DialNumber"] = "dial_number";
  Action["TransferCallToMatrixID"] = "transfer_call_to_matrix_id";
  Action["TransferCallToPhoneNumber"] = "transfer_call_to_phone_number";
  Action["PstnSupportUpdated"] = "pstn_support_updated";
  Action["VirtualRoomSupportUpdated"] = "virtual_room_support_updated";
  Action["UploadStarted"] = "upload_started";
  Action["UploadProgress"] = "upload_progress";
  Action["UploadFinished"] = "upload_finished";
  Action["UploadFailed"] = "upload_failed";
  Action["UploadCanceled"] = "upload_canceled";
  Action["JoinRoom"] = "join_room";
  Action["JoinRoomReady"] = "join_room_ready";
  Action["JoinRoomError"] = "join_room_error";
  Action["ComposerInsert"] = "composer_insert";
  Action["SwitchSpace"] = "switch_space";
  Action["UpdateSpaceHierarchy"] = "update_space_hierarchy";
  Action["SettingUpdated"] = "setting_updated";
  Action["EditEvent"] = "edit_event";
})(Action || (exports.Action = Action = {}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,