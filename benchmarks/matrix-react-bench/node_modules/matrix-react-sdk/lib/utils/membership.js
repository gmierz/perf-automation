"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EffectiveMembership = void 0;
exports.getEffectiveMembership = getEffectiveMembership;
exports.isJoinedOrNearlyJoined = isJoinedOrNearlyJoined;
exports.leaveRoomBehaviour = leaveRoomBehaviour;
exports.splitRoomsByMembership = splitRoomsByMembership;

var _utils = require("matrix-js-sdk/src/utils");

var _MatrixClientPeg = require("../MatrixClientPeg");

var _languageHandler = require("../languageHandler");

var _Modal = _interopRequireDefault(require("../Modal"));

var _ErrorDialog = _interopRequireDefault(require("../components/views/dialogs/ErrorDialog"));

var _react = _interopRequireDefault(require("react"));

var _dispatcher = _interopRequireDefault(require("../dispatcher/dispatcher"));

var _RoomViewStore = _interopRequireDefault(require("../stores/RoomViewStore"));

/*
Copyright 2020 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/**
 * Approximation of a membership status for a given room.
 */
let EffectiveMembership;
exports.EffectiveMembership = EffectiveMembership;

(function (EffectiveMembership) {
  EffectiveMembership["Join"] = "JOIN";
  EffectiveMembership["Invite"] = "INVITE";
  EffectiveMembership["Leave"] = "LEAVE";
})(EffectiveMembership || (exports.EffectiveMembership = EffectiveMembership = {}));

function splitRoomsByMembership(rooms) {
  const split = {
    [EffectiveMembership.Invite]: [],
    [EffectiveMembership.Join]: [],
    [EffectiveMembership.Leave]: []
  };

  for (const room of rooms) {
    split[getEffectiveMembership(room.getMyMembership())].push(room);
  }

  return split;
}

function getEffectiveMembership(membership) {
  if (membership === 'invite') {
    return EffectiveMembership.Invite;
  } else if (membership === 'join') {
    // TODO: Include knocks? Update docs as needed in the enum. https://github.com/vector-im/element-web/issues/14237
    return EffectiveMembership.Join;
  } else {
    // Probably a leave, kick, or ban
    return EffectiveMembership.Leave;
  }
}

function isJoinedOrNearlyJoined(membership) {
  const effective = getEffectiveMembership(membership);
  return effective === EffectiveMembership.Join || effective === EffectiveMembership.Invite;
}

async function leaveRoomBehaviour(roomId, retry = true) {
  const cli = _MatrixClientPeg.MatrixClientPeg.get();

  let leavingAllVersions = true;
  const history = cli.getRoomUpgradeHistory(roomId);

  if (history && history.length > 0) {
    const currentRoom = history[history.length - 1];

    if (currentRoom.roomId !== roomId) {
      // The user is trying to leave an older version of the room. Let them through
      // without making them leave the current version of the room.
      leavingAllVersions = false;
    }
  }

  let results = {};

  if (!leavingAllVersions) {
    try {
      await cli.leave(roomId);
    } catch (e) {
      var _e$data;

      if (e !== null && e !== void 0 && (_e$data = e.data) !== null && _e$data !== void 0 && _e$data.errcode) {
        const message = e.data.error || (0, _languageHandler._t)("Unexpected server error trying to leave the room");
        results[roomId] = Object.assign(new Error(message), {
          errcode: e.data.errcode,
          data: e.data
        });
      } else {
        results[roomId] = e || new Error("Failed to leave room for unknown causes");
      }
    }
  } else {
    results = await cli.leaveRoomChain(roomId, retry);
  }

  if (retry) {
    const limitExceededError = Object.values(results).find(e => (e === null || e === void 0 ? void 0 : e.errcode) === "M_LIMIT_EXCEEDED");

    if (limitExceededError) {
      await (0, _utils.sleep)(limitExceededError.data.retry_after_ms ?? 100);
      return leaveRoomBehaviour(roomId, false);
    }
  }

  const errors = Object.entries(results).filter(r => !!r[1]);

  if (errors.length > 0) {
    const messages = [];

    for (const roomErr of errors) {
      const err = roomErr[1]; // [0] is the roomId

      let message = (0, _languageHandler._t)("Unexpected server error trying to leave the room");

      if (err.errcode && err.message) {
        if (err.errcode === 'M_CANNOT_LEAVE_SERVER_NOTICE_ROOM') {
          _Modal.default.createTrackedDialog('Error Leaving Room', '', _ErrorDialog.default, {
            title: (0, _languageHandler._t)("Can't leave Server Notices room"),
            description: (0, _languageHandler._t)("This room is used for important messages from the Homeserver, " + "so you cannot leave it.")
          });

          return;
        }

        message = results[roomId].message;
      }

      messages.push(message, /*#__PURE__*/_react.default.createElement('BR')); // createElement to avoid using a tsx file in utils
    }

    _Modal.default.createTrackedDialog('Error Leaving Room', '', _ErrorDialog.default, {
      title: (0, _languageHandler._t)("Error leaving room"),
      description: messages
    });

    return;
  }

  if (_RoomViewStore.default.getRoomId() === roomId) {
    _dispatcher.default.dispatch({
      action: 'view_home_page'
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,