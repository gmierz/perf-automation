"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.awaitRoomDownSync = awaitRoomDownSync;
exports.upgradeRoom = upgradeRoom;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _event = require("matrix-js-sdk/src/@types/event");

var _RoomInvite = require("../RoomInvite");

var _Modal = _interopRequireDefault(require("../Modal"));

var _languageHandler = require("../languageHandler");

var _ErrorDialog = _interopRequireDefault(require("../components/views/dialogs/ErrorDialog"));

var _SpaceStore = _interopRequireDefault(require("../stores/spaces/SpaceStore"));

var _Spinner = _interopRequireDefault(require("../components/views/elements/Spinner"));

var _logger = require("matrix-js-sdk/src/logger");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

async function awaitRoomDownSync(cli, roomId) {
  const room = cli.getRoom(roomId);
  if (room) return room; // already have the room

  return new Promise(resolve => {
    // We have to wait for the js-sdk to give us the room back so
    // we can more effectively abuse the MultiInviter behaviour
    // which heavily relies on the Room object being available.
    const checkForRoomFn = room => {
      if (room.roomId !== roomId) return;
      resolve(room);
      cli.off("Room", checkForRoomFn);
    };

    cli.on("Room", checkForRoomFn);
  });
}

async function upgradeRoom(room, targetVersion, inviteUsers = false, handleError = true, updateSpaces = true, awaitRoom = false, progressCallback) {
  var _spinnerModal;

  const cli = room.client;
  let spinnerModal;

  if (!progressCallback) {
    spinnerModal = _Modal.default.createDialog(_Spinner.default, null, "mx_Dialog_spinner");
  }

  let toInvite = [];

  if (inviteUsers) {
    toInvite = [...room.getMembersWithMembership("join"), ...room.getMembersWithMembership("invite")].map(m => m.userId).filter(m => m !== cli.getUserId());
  }

  let parentsToRelink = [];

  if (updateSpaces) {
    parentsToRelink = Array.from(_SpaceStore.default.instance.getKnownParents(room.roomId)).map(roomId => cli.getRoom(roomId)).filter(parent => parent === null || parent === void 0 ? void 0 : parent.currentState.maySendStateEvent(_event.EventType.SpaceChild, cli.getUserId()));
  }

  const progress = {
    roomUpgraded: false,
    roomSynced: awaitRoom || inviteUsers ? false : undefined,
    inviteUsersProgress: inviteUsers ? 0 : undefined,
    inviteUsersTotal: toInvite.length,
    updateSpacesProgress: updateSpaces ? 0 : undefined,
    updateSpacesTotal: parentsToRelink.length
  };
  progressCallback === null || progressCallback === void 0 ? void 0 : progressCallback(progress);
  let newRoomId;

  try {
    ({
      replacement_room: newRoomId
    } = await cli.upgradeRoom(room.roomId, targetVersion));
  } catch (e) {
    if (!handleError) throw e;

    _logger.logger.error(e);

    _Modal.default.createTrackedDialog("Room Upgrade Error", "", _ErrorDialog.default, {
      title: (0, _languageHandler._t)('Error upgrading room'),
      description: (0, _languageHandler._t)('Double check that your server supports the room version chosen and try again.')
    });

    throw e;
  }

  progress.roomUpgraded = true;
  progressCallback === null || progressCallback === void 0 ? void 0 : progressCallback(progress);

  if (awaitRoom || inviteUsers) {
    await awaitRoomDownSync(room.client, newRoomId);
    progress.roomSynced = true;
    progressCallback === null || progressCallback === void 0 ? void 0 : progressCallback(progress);
  }

  if (toInvite.length > 0) {
    // Errors are handled internally to this function
    await (0, _RoomInvite.inviteUsersToRoom)(newRoomId, toInvite, () => {
      progress.inviteUsersProgress++;
      progressCallback === null || progressCallback === void 0 ? void 0 : progressCallback(progress);
    });
  }

  if (parentsToRelink.length > 0) {
    try {
      for (const parent of parentsToRelink) {
        const currentEv = parent.currentState.getStateEvents(_event.EventType.SpaceChild, room.roomId);
        await cli.sendStateEvent(parent.roomId, _event.EventType.SpaceChild, _objectSpread(_objectSpread({}, (currentEv === null || currentEv === void 0 ? void 0 : currentEv.getContent()) || {}), {}, {
          // copy existing attributes like suggested
          via: [cli.getDomain()]
        }), newRoomId);
        await cli.sendStateEvent(parent.roomId, _event.EventType.SpaceChild, {}, room.roomId);
        progress.updateSpacesProgress++;
        progressCallback === null || progressCallback === void 0 ? void 0 : progressCallback(progress);
      }
    } catch (e) {
      // These errors are not critical to the room upgrade itself
      _logger.logger.warn("Failed to update parent spaces during room upgrade", e);
    }
  }

  (_spinnerModal = spinnerModal) === null || _spinnerModal === void 0 ? void 0 : _spinnerModal.close();
  return newRoomId;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,