"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.InviteState = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _httpApi = require("matrix-js-sdk/src/http-api");

var _utils = require("matrix-js-sdk/src/utils");

var _MatrixClientPeg = require("../MatrixClientPeg");

var _UserAddress = require("../UserAddress");

var _GroupStore = _interopRequireDefault(require("../stores/GroupStore"));

var _languageHandler = require("../languageHandler");

var _Modal = _interopRequireDefault(require("../Modal"));

var _SettingsStore = _interopRequireDefault(require("../settings/SettingsStore"));

var _AskInviteAnywayDialog = _interopRequireDefault(require("../components/views/dialogs/AskInviteAnywayDialog"));

var _logger = require("matrix-js-sdk/src/logger");

/*
Copyright 2016 - 2021 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
let InviteState;
exports.InviteState = InviteState;

(function (InviteState) {
  InviteState["Invited"] = "invited";
  InviteState["Error"] = "error";
})(InviteState || (exports.InviteState = InviteState = {}));

const UNKNOWN_PROFILE_ERRORS = ['M_NOT_FOUND', 'M_USER_NOT_FOUND', 'M_PROFILE_UNDISCLOSED', 'M_PROFILE_NOT_FOUND'];
const USER_ALREADY_JOINED = "IO.ELEMENT.ALREADY_JOINED";
const USER_ALREADY_INVITED = "IO.ELEMENT.ALREADY_INVITED";
/**
 * Invites multiple addresses to a room or group, handling rate limiting from the server
 */

class MultiInviter {
  // State of each address (invited or error)
  // { address: {errorText, errcode} }

  /**
   * @param {string} targetId The ID of the room or group to invite to
   * @param {function} progressCallback optional callback, fired after each invite.
   */
  constructor(targetId, progressCallback) {
    this.progressCallback = progressCallback;
    (0, _defineProperty2.default)(this, "roomId", void 0);
    (0, _defineProperty2.default)(this, "groupId", void 0);
    (0, _defineProperty2.default)(this, "canceled", false);
    (0, _defineProperty2.default)(this, "addresses", []);
    (0, _defineProperty2.default)(this, "busy", false);
    (0, _defineProperty2.default)(this, "_fatal", false);
    (0, _defineProperty2.default)(this, "completionStates", {});
    (0, _defineProperty2.default)(this, "errors", {});
    (0, _defineProperty2.default)(this, "deferred", null);
    (0, _defineProperty2.default)(this, "reason", null);

    if (targetId[0] === '+') {
      this.roomId = null;
      this.groupId = targetId;
    } else {
      this.roomId = targetId;
      this.groupId = null;
    }
  }

  get fatal() {
    return this._fatal;
  }
  /**
   * Invite users to this room. This may only be called once per
   * instance of the class.
   *
   * @param {array} addresses Array of addresses to invite
   * @param {string} reason Reason for inviting (optional)
   * @returns {Promise} Resolved when all invitations in the queue are complete
   */


  invite(addresses, reason) {
    if (this.addresses.length > 0) {
      throw new Error("Already inviting/invited");
    }

    this.addresses.push(...addresses);
    this.reason = reason;

    for (const addr of this.addresses) {
      if ((0, _UserAddress.getAddressType)(addr) === null) {
        this.completionStates[addr] = InviteState.Error;
        this.errors[addr] = {
          errcode: 'M_INVALID',
          errorText: (0, _languageHandler._t)('Unrecognised address')
        };
      }
    }

    this.deferred = (0, _utils.defer)();
    this.inviteMore(0);
    return this.deferred.promise;
  }
  /**
   * Stops inviting. Causes promises returned by invite() to be rejected.
   */


  cancel() {
    if (!this.busy) return;
    this.canceled = true;
    this.deferred.reject(new Error('canceled'));
  }

  getCompletionState(addr) {
    return this.completionStates[addr];
  }

  getErrorText(addr) {
    return this.errors[addr] ? this.errors[addr].errorText : null;
  }

  async inviteToRoom(roomId, addr, ignoreProfile = false) {
    const addrType = (0, _UserAddress.getAddressType)(addr);

    if (addrType === _UserAddress.AddressType.Email) {
      return _MatrixClientPeg.MatrixClientPeg.get().inviteByEmail(roomId, addr);
    } else if (addrType === _UserAddress.AddressType.MatrixUserId) {
      const room = _MatrixClientPeg.MatrixClientPeg.get().getRoom(roomId);

      if (!room) throw new Error("Room not found");
      const member = room.getMember(addr);

      if ((member === null || member === void 0 ? void 0 : member.membership) === "join") {
        throw new _httpApi.MatrixError({
          errcode: USER_ALREADY_JOINED,
          error: "Member already joined"
        });
      } else if ((member === null || member === void 0 ? void 0 : member.membership) === "invite") {
        throw new _httpApi.MatrixError({
          errcode: USER_ALREADY_INVITED,
          error: "Member already invited"
        });
      }

      if (!ignoreProfile && _SettingsStore.default.getValue("promptBeforeInviteUnknownUsers", this.roomId)) {
        const profile = await _MatrixClientPeg.MatrixClientPeg.get().getProfileInfo(addr);

        if (!profile) {
          // noinspection ExceptionCaughtLocallyJS
          throw new Error("User has no profile");
        }
      }

      return _MatrixClientPeg.MatrixClientPeg.get().invite(roomId, addr, undefined, this.reason);
    } else {
      throw new Error('Unsupported address');
    }
  }

  doInvite(address, ignoreProfile = false) {
    return new Promise((resolve, reject) => {
      _logger.logger.log(`Inviting ${address}`);

      let doInvite;

      if (this.groupId !== null) {
        doInvite = _GroupStore.default.inviteUserToGroup(this.groupId, address);
      } else {
        doInvite = this.inviteToRoom(this.roomId, address, ignoreProfile);
      }

      doInvite.then(() => {
        var _this$progressCallbac;

        if (this.canceled) {
          return;
        }

        this.completionStates[address] = InviteState.Invited;
        delete this.errors[address];
        resolve();
        (_this$progressCallbac = this.progressCallback) === null || _this$progressCallbac === void 0 ? void 0 : _this$progressCallbac.call(this);
      }).catch(err => {
        if (this.canceled) {
          return;
        }

        _logger.logger.error(err);

        let errorText;
        let fatal = false;

        switch (err.errcode) {
          case "M_FORBIDDEN":
            errorText = (0, _languageHandler._t)('You do not have permission to invite people to this room.');
            fatal = true;
            break;

          case USER_ALREADY_INVITED:
            errorText = (0, _languageHandler._t)("User %(userId)s is already invited to the room", {
              userId: address
            });
            break;

          case USER_ALREADY_JOINED:
            errorText = (0, _languageHandler._t)("User %(userId)s is already in the room", {
              userId: address
            });
            break;

          case "M_LIMIT_EXCEEDED":
            // we're being throttled so wait a bit & try again
            setTimeout(() => {
              this.doInvite(address, ignoreProfile).then(resolve, reject);
            }, 5000);
            return;

          case "M_NOT_FOUND":
          case "M_USER_NOT_FOUND":
            errorText = (0, _languageHandler._t)("User %(user_id)s does not exist", {
              user_id: address
            });
            break;

          case "M_PROFILE_UNDISCLOSED":
            errorText = (0, _languageHandler._t)("User %(user_id)s may or may not exist", {
              user_id: address
            });
            break;

          case "M_PROFILE_NOT_FOUND":
            if (!ignoreProfile) {
              // Invite without the profile check
              _logger.logger.warn(`User ${address} does not have a profile - inviting anyways automatically`);

              this.doInvite(address, true).then(resolve, reject);
              return;
            }

            break;

          case "M_BAD_STATE":
            errorText = (0, _languageHandler._t)("The user must be unbanned before they can be invited.");
            break;

          case "M_UNSUPPORTED_ROOM_VERSION":
            errorText = (0, _languageHandler._t)("The user's homeserver does not support the version of the room.");
            break;
        }

        if (!errorText) {
          errorText = (0, _languageHandler._t)('Unknown server error');
        }

        this.completionStates[address] = InviteState.Error;
        this.errors[address] = {
          errorText,
          errcode: err.errcode
        };
        this.busy = !fatal;
        this._fatal = fatal;

        if (fatal) {
          reject(err);
        } else {
          resolve();
        }
      });
    });
  }

  inviteMore(nextIndex, ignoreProfile = false) {
    if (this.canceled) {
      return;
    }

    if (nextIndex === this.addresses.length) {
      this.busy = false;

      if (Object.keys(this.errors).length > 0 && !this.groupId) {
        // There were problems inviting some people - see if we can invite them
        // without caring if they exist or not.
        const unknownProfileUsers = Object.keys(this.errors).filter(a => UNKNOWN_PROFILE_ERRORS.includes(this.errors[a].errcode));

        if (unknownProfileUsers.length > 0) {
          const inviteUnknowns = () => {
            const promises = unknownProfileUsers.map(u => this.doInvite(u, true));
            Promise.all(promises).then(() => this.deferred.resolve(this.completionStates));
          };

          if (!_SettingsStore.default.getValue("promptBeforeInviteUnknownUsers", this.roomId)) {
            inviteUnknowns();
            return;
          }

          _logger.logger.log("Showing failed to invite dialog...");

          _Modal.default.createTrackedDialog('Failed to invite', '', _AskInviteAnywayDialog.default, {
            unknownProfileUsers: unknownProfileUsers.map(u => ({
              userId: u,
              errorText: this.errors[u].errorText
            })),
            onInviteAnyways: () => inviteUnknowns(),
            onGiveUp: () => {
              // Fake all the completion states because we already warned the user
              for (const addr of unknownProfileUsers) {
                this.completionStates[addr] = InviteState.Invited;
              }

              this.deferred.resolve(this.completionStates);
            }
          });

          return;
        }
      }

      this.deferred.resolve(this.completionStates);
      return;
    }

    const addr = this.addresses[nextIndex]; // don't try to invite it if it's an invalid address
    // (it will already be marked as an error though,
    // so no need to do so again)

    if ((0, _UserAddress.getAddressType)(addr) === null) {
      this.inviteMore(nextIndex + 1);
      return;
    } // don't re-invite (there's no way in the UI to do this, but
    // for sanity's sake)


    if (this.completionStates[addr] === InviteState.Invited) {
      this.inviteMore(nextIndex + 1);
      return;
    }

    this.doInvite(addr, ignoreProfile).then(() => {
      this.inviteMore(nextIndex + 1, ignoreProfile);
    }).catch(() => this.deferred.resolve(this.completionStates));
  }

}

exports.default = MultiInviter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,