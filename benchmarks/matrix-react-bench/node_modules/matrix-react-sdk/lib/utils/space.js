"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.showSpaceSettings = exports.showSpaceInvite = exports.showCreateNewSubspace = exports.showCreateNewRoom = exports.showAddExistingSubspace = exports.showAddExistingRooms = exports.shouldShowSpaceSettings = exports.makeSpaceParentEvent = exports.leaveSpace = exports.createSpaceFromCommunity = exports.bulkSpaceBehaviour = void 0;

var _react = _interopRequireDefault(require("react"));

var _event = require("matrix-js-sdk/src/@types/event");

var _Permalinks = require("./permalinks/Permalinks");

var _Modal = _interopRequireDefault(require("../Modal"));

var _SpaceSettingsDialog = _interopRequireDefault(require("../components/views/dialogs/SpaceSettingsDialog"));

var _AddExistingToSpaceDialog = _interopRequireDefault(require("../components/views/dialogs/AddExistingToSpaceDialog"));

var _CreateRoomDialog = _interopRequireDefault(require("../components/views/dialogs/CreateRoomDialog"));

var _createRoom = _interopRequireDefault(require("../createRoom"));

var _languageHandler = require("../languageHandler");

var _SpacePublicShare = _interopRequireDefault(require("../components/views/spaces/SpacePublicShare"));

var _InfoDialog = _interopRequireDefault(require("../components/views/dialogs/InfoDialog"));

var _RoomInvite = require("../RoomInvite");

var _CreateSubspaceDialog = _interopRequireDefault(require("../components/views/dialogs/CreateSubspaceDialog"));

var _AddExistingSubspaceDialog = _interopRequireDefault(require("../components/views/dialogs/AddExistingSubspaceDialog"));

var _dispatcher = _interopRequireDefault(require("../dispatcher/dispatcher"));

var _RoomViewStore = _interopRequireDefault(require("../stores/RoomViewStore"));

var _actions = require("../dispatcher/actions");

var _membership = require("./membership");

var _Spinner = _interopRequireDefault(require("../components/views/elements/Spinner"));

var _LeaveSpaceDialog = _interopRequireDefault(require("../components/views/dialogs/LeaveSpaceDialog"));

var _CreateSpaceFromCommunityDialog = _interopRequireDefault(require("../components/views/dialogs/CreateSpaceFromCommunityDialog"));

/*
Copyright 2021 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const shouldShowSpaceSettings = space => {
  const userId = space.client.getUserId();
  return space.getMyMembership() === "join" && (space.currentState.maySendStateEvent(_event.EventType.RoomAvatar, userId) || space.currentState.maySendStateEvent(_event.EventType.RoomName, userId) || space.currentState.maySendStateEvent(_event.EventType.RoomTopic, userId) || space.currentState.maySendStateEvent(_event.EventType.RoomJoinRules, userId));
};

exports.shouldShowSpaceSettings = shouldShowSpaceSettings;

const makeSpaceParentEvent = (room, canonical = false) => ({
  type: _event.EventType.SpaceParent,
  content: {
    "via": (0, _Permalinks.calculateRoomVia)(room),
    "canonical": canonical
  },
  state_key: room.roomId
});

exports.makeSpaceParentEvent = makeSpaceParentEvent;

const showSpaceSettings = space => {
  _Modal.default.createTrackedDialog("Space Settings", "", _SpaceSettingsDialog.default, {
    matrixClient: space.client,
    space
  },
  /*className=*/
  null,
  /*isPriority=*/
  false,
  /*isStatic=*/
  true);
};

exports.showSpaceSettings = showSpaceSettings;

const showAddExistingRooms = space => {
  _Modal.default.createTrackedDialog("Space Landing", "Add Existing", _AddExistingToSpaceDialog.default, {
    onCreateRoomClick: () => showCreateNewRoom(space),
    onAddSubspaceClick: () => showAddExistingSubspace(space),
    space,
    onFinished: added => {
      if (added && _RoomViewStore.default.getRoomId() === space.roomId) {
        _dispatcher.default.fire(_actions.Action.UpdateSpaceHierarchy);
      }
    }
  }, "mx_AddExistingToSpaceDialog_wrapper");
};

exports.showAddExistingRooms = showAddExistingRooms;

const showCreateNewRoom = async space => {
  const modal = _Modal.default.createTrackedDialog("Space Landing", "Create Room", _CreateRoomDialog.default, {
    defaultPublic: space.getJoinRule() === "public",
    parentSpace: space
  });

  const [shouldCreate, opts] = await modal.finished;

  if (shouldCreate) {
    await (0, _createRoom.default)(opts);
  }

  return shouldCreate;
};

exports.showCreateNewRoom = showCreateNewRoom;

const showSpaceInvite = (space, initialText = "") => {
  if (space.getJoinRule() === "public") {
    const modal = _Modal.default.createTrackedDialog("Space Invite", "User Menu", _InfoDialog.default, {
      title: (0, _languageHandler._t)("Invite to %(spaceName)s", {
        spaceName: space.name
      }),
      description: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("span", null, (0, _languageHandler._t)("Share your public space")), /*#__PURE__*/_react.default.createElement(_SpacePublicShare.default, {
        space: space,
        onFinished: () => modal.close()
      })),
      fixedWidth: false,
      button: false,
      className: "mx_SpacePanel_sharePublicSpace",
      hasCloseButton: true
    });
  } else {
    (0, _RoomInvite.showRoomInviteDialog)(space.roomId, initialText);
  }
};

exports.showSpaceInvite = showSpaceInvite;

const showAddExistingSubspace = space => {
  _Modal.default.createTrackedDialog("Space Landing", "Create Subspace", _AddExistingSubspaceDialog.default, {
    space,
    onCreateSubspaceClick: () => showCreateNewSubspace(space),
    onFinished: added => {
      if (added && _RoomViewStore.default.getRoomId() === space.roomId) {
        _dispatcher.default.fire(_actions.Action.UpdateSpaceHierarchy);
      }
    }
  }, "mx_AddExistingToSpaceDialog_wrapper");
};

exports.showAddExistingSubspace = showAddExistingSubspace;

const showCreateNewSubspace = space => {
  _Modal.default.createTrackedDialog("Space Landing", "Create Subspace", _CreateSubspaceDialog.default, {
    space,
    onAddExistingSpaceClick: () => showAddExistingSubspace(space),
    onFinished: added => {
      if (added && _RoomViewStore.default.getRoomId() === space.roomId) {
        _dispatcher.default.fire(_actions.Action.UpdateSpaceHierarchy);
      }
    }
  }, "mx_CreateSubspaceDialog_wrapper");
};

exports.showCreateNewSubspace = showCreateNewSubspace;

const bulkSpaceBehaviour = async (space, children, fn) => {
  const modal = _Modal.default.createDialog(_Spinner.default, null, "mx_Dialog_spinner");

  try {
    for (const room of children) {
      await fn(room);
    }

    await fn(space);
  } finally {
    modal.close();
  }
};

exports.bulkSpaceBehaviour = bulkSpaceBehaviour;

const leaveSpace = space => {
  _Modal.default.createTrackedDialog("Leave Space", "", _LeaveSpaceDialog.default, {
    space,
    onFinished: async (leave, rooms) => {
      if (!leave) return;
      await bulkSpaceBehaviour(space, rooms, room => (0, _membership.leaveRoomBehaviour)(room.roomId));

      _dispatcher.default.dispatch({
        action: "after_leave_room",
        room_id: space.roomId
      });
    }
  }, "mx_LeaveSpaceDialog_wrapper");
};

exports.leaveSpace = leaveSpace;

const createSpaceFromCommunity = (cli, groupId) => {
  return _Modal.default.createTrackedDialog('Create Space', 'from community', _CreateSpaceFromCommunityDialog.default, {
    matrixClient: cli,
    groupId
  }, "mx_CreateSpaceFromCommunityDialog_wrapper").finished;
};

exports.createSpaceFromCommunity = createSpaceFromCommunity;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,