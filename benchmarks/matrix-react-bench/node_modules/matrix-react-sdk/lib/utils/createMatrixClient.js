"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createMatrixClient;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _indexeddbWorker = _interopRequireDefault(require("../workers/indexeddb.worker.ts"));

var _matrix = require("matrix-js-sdk/src/matrix");

var _indexeddbCryptoStore = require("matrix-js-sdk/src/crypto/store/indexeddb-crypto-store");

var _webstorage = require("matrix-js-sdk/src/store/session/webstorage");

var _indexeddb = require("matrix-js-sdk/src/store/indexeddb");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const localStorage = window.localStorage; // just *accessing* indexedDB throws an exception in firefox with
// indexeddb disabled.

let indexedDB;

try {
  indexedDB = window.indexedDB;
} catch (e) {}
/**
 * Create a new matrix client, with the persistent stores set up appropriately
 * (using localstorage/indexeddb, etc)
 *
 * @param {Object} opts  options to pass to Matrix.createClient. This will be
 *    extended with `sessionStore` and `store` members.
 *
 * @returns {MatrixClient} the newly-created MatrixClient
 */


function createMatrixClient(opts) {
  const storeOpts = {
    useAuthorizationHeader: true
  };

  if (indexedDB && localStorage) {
    storeOpts.store = new _indexeddb.IndexedDBStore({
      indexedDB: indexedDB,
      dbName: "riot-web-sync",
      localStorage: localStorage,
      workerFactory: () => new _indexeddbWorker.default()
    });
  }

  if (localStorage) {
    storeOpts.sessionStore = new _webstorage.WebStorageSessionStore(localStorage);
  }

  if (indexedDB) {
    storeOpts.cryptoStore = new _indexeddbCryptoStore.IndexedDBCryptoStore(indexedDB, "matrix-js-sdk:crypto");
  }

  return (0, _matrix.createClient)(_objectSpread(_objectSpread({}, storeOpts), opts));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9jcmVhdGVNYXRyaXhDbGllbnQudHMiXSwibmFtZXMiOlsibG9jYWxTdG9yYWdlIiwid2luZG93IiwiaW5kZXhlZERCIiwiZSIsImNyZWF0ZU1hdHJpeENsaWVudCIsIm9wdHMiLCJzdG9yZU9wdHMiLCJ1c2VBdXRob3JpemF0aW9uSGVhZGVyIiwic3RvcmUiLCJJbmRleGVkREJTdG9yZSIsImRiTmFtZSIsIndvcmtlckZhY3RvcnkiLCJJbmRleGVkREJXb3JrZXIiLCJzZXNzaW9uU3RvcmUiLCJXZWJTdG9yYWdlU2Vzc2lvblN0b3JlIiwiY3J5cHRvU3RvcmUiLCJJbmRleGVkREJDcnlwdG9TdG9yZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFpQkE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7OztBQUVBLE1BQU1BLFlBQVksR0FBR0MsTUFBTSxDQUFDRCxZQUE1QixDLENBRUE7QUFDQTs7QUFDQSxJQUFJRSxTQUFKOztBQUNBLElBQUk7QUFDQUEsRUFBQUEsU0FBUyxHQUFHRCxNQUFNLENBQUNDLFNBQW5CO0FBQ0gsQ0FGRCxDQUVFLE9BQU9DLENBQVAsRUFBVSxDQUFFO0FBRWQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDZSxTQUFTQyxrQkFBVCxDQUE0QkMsSUFBNUIsRUFBcUQ7QUFDaEUsUUFBTUMsU0FBcUMsR0FBRztBQUMxQ0MsSUFBQUEsc0JBQXNCLEVBQUU7QUFEa0IsR0FBOUM7O0FBSUEsTUFBSUwsU0FBUyxJQUFJRixZQUFqQixFQUErQjtBQUMzQk0sSUFBQUEsU0FBUyxDQUFDRSxLQUFWLEdBQWtCLElBQUlDLHlCQUFKLENBQW1CO0FBQ2pDUCxNQUFBQSxTQUFTLEVBQUVBLFNBRHNCO0FBRWpDUSxNQUFBQSxNQUFNLEVBQUUsZUFGeUI7QUFHakNWLE1BQUFBLFlBQVksRUFBRUEsWUFIbUI7QUFJakNXLE1BQUFBLGFBQWEsRUFBRSxNQUFNLElBQUlDLHdCQUFKO0FBSlksS0FBbkIsQ0FBbEI7QUFNSDs7QUFFRCxNQUFJWixZQUFKLEVBQWtCO0FBQ2RNLElBQUFBLFNBQVMsQ0FBQ08sWUFBVixHQUF5QixJQUFJQyxrQ0FBSixDQUEyQmQsWUFBM0IsQ0FBekI7QUFDSDs7QUFFRCxNQUFJRSxTQUFKLEVBQWU7QUFDWEksSUFBQUEsU0FBUyxDQUFDUyxXQUFWLEdBQXdCLElBQUlDLDBDQUFKLENBQ3BCZCxTQURvQixFQUNULHNCQURTLENBQXhCO0FBR0g7O0FBRUQsU0FBTywwREFDQUksU0FEQSxHQUVBRCxJQUZBLEVBQVA7QUFJSCIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5Db3B5cmlnaHQgMjAxNyAtIDIwMjEgVGhlIE1hdHJpeC5vcmcgRm91bmRhdGlvbiBDLkkuQy5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG4vLyBAdHMtaWdub3JlIC0gYC50c2AgaXMgbmVlZGVkIGhlcmUgdG8gbWFrZSBUUyBoYXBweVxuaW1wb3J0IEluZGV4ZWREQldvcmtlciBmcm9tIFwiLi4vd29ya2Vycy9pbmRleGVkZGIud29ya2VyLnRzXCI7XG5pbXBvcnQgeyBjcmVhdGVDbGllbnQsIElDcmVhdGVDbGllbnRPcHRzIH0gZnJvbSBcIm1hdHJpeC1qcy1zZGsvc3JjL21hdHJpeFwiO1xuaW1wb3J0IHsgSW5kZXhlZERCQ3J5cHRvU3RvcmUgfSBmcm9tIFwibWF0cml4LWpzLXNkay9zcmMvY3J5cHRvL3N0b3JlL2luZGV4ZWRkYi1jcnlwdG8tc3RvcmVcIjtcbmltcG9ydCB7IFdlYlN0b3JhZ2VTZXNzaW9uU3RvcmUgfSBmcm9tIFwibWF0cml4LWpzLXNkay9zcmMvc3RvcmUvc2Vzc2lvbi93ZWJzdG9yYWdlXCI7XG5pbXBvcnQgeyBJbmRleGVkREJTdG9yZSB9IGZyb20gXCJtYXRyaXgtanMtc2RrL3NyYy9zdG9yZS9pbmRleGVkZGJcIjtcblxuY29uc3QgbG9jYWxTdG9yYWdlID0gd2luZG93LmxvY2FsU3RvcmFnZTtcblxuLy8ganVzdCAqYWNjZXNzaW5nKiBpbmRleGVkREIgdGhyb3dzIGFuIGV4Y2VwdGlvbiBpbiBmaXJlZm94IHdpdGhcbi8vIGluZGV4ZWRkYiBkaXNhYmxlZC5cbmxldCBpbmRleGVkREI7XG50cnkge1xuICAgIGluZGV4ZWREQiA9IHdpbmRvdy5pbmRleGVkREI7XG59IGNhdGNoIChlKSB7fVxuXG4vKipcbiAqIENyZWF0ZSBhIG5ldyBtYXRyaXggY2xpZW50LCB3aXRoIHRoZSBwZXJzaXN0ZW50IHN0b3JlcyBzZXQgdXAgYXBwcm9wcmlhdGVseVxuICogKHVzaW5nIGxvY2Fsc3RvcmFnZS9pbmRleGVkZGIsIGV0YylcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cyAgb3B0aW9ucyB0byBwYXNzIHRvIE1hdHJpeC5jcmVhdGVDbGllbnQuIFRoaXMgd2lsbCBiZVxuICogICAgZXh0ZW5kZWQgd2l0aCBgc2Vzc2lvblN0b3JlYCBhbmQgYHN0b3JlYCBtZW1iZXJzLlxuICpcbiAqIEByZXR1cm5zIHtNYXRyaXhDbGllbnR9IHRoZSBuZXdseS1jcmVhdGVkIE1hdHJpeENsaWVudFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVNYXRyaXhDbGllbnQob3B0czogSUNyZWF0ZUNsaWVudE9wdHMpIHtcbiAgICBjb25zdCBzdG9yZU9wdHM6IFBhcnRpYWw8SUNyZWF0ZUNsaWVudE9wdHM+ID0ge1xuICAgICAgICB1c2VBdXRob3JpemF0aW9uSGVhZGVyOiB0cnVlLFxuICAgIH07XG5cbiAgICBpZiAoaW5kZXhlZERCICYmIGxvY2FsU3RvcmFnZSkge1xuICAgICAgICBzdG9yZU9wdHMuc3RvcmUgPSBuZXcgSW5kZXhlZERCU3RvcmUoe1xuICAgICAgICAgICAgaW5kZXhlZERCOiBpbmRleGVkREIsXG4gICAgICAgICAgICBkYk5hbWU6IFwicmlvdC13ZWItc3luY1wiLFxuICAgICAgICAgICAgbG9jYWxTdG9yYWdlOiBsb2NhbFN0b3JhZ2UsXG4gICAgICAgICAgICB3b3JrZXJGYWN0b3J5OiAoKSA9PiBuZXcgSW5kZXhlZERCV29ya2VyKCksXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChsb2NhbFN0b3JhZ2UpIHtcbiAgICAgICAgc3RvcmVPcHRzLnNlc3Npb25TdG9yZSA9IG5ldyBXZWJTdG9yYWdlU2Vzc2lvblN0b3JlKGxvY2FsU3RvcmFnZSk7XG4gICAgfVxuXG4gICAgaWYgKGluZGV4ZWREQikge1xuICAgICAgICBzdG9yZU9wdHMuY3J5cHRvU3RvcmUgPSBuZXcgSW5kZXhlZERCQ3J5cHRvU3RvcmUoXG4gICAgICAgICAgICBpbmRleGVkREIsIFwibWF0cml4LWpzLXNkazpjcnlwdG9cIixcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY3JlYXRlQ2xpZW50KHtcbiAgICAgICAgLi4uc3RvcmVPcHRzLFxuICAgICAgICAuLi5vcHRzLFxuICAgIH0pO1xufVxuIl19