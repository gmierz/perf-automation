"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.canEditContent = canEditContent;
exports.canEditOwnEvent = canEditOwnEvent;
exports.fetchInitialEvent = fetchInitialEvent;
exports.findEditableEvent = findEditableEvent;
exports.getEventDisplayInfo = getEventDisplayInfo;
exports.isContentActionable = isContentActionable;
exports.isVoiceMessage = isVoiceMessage;

var _event = require("matrix-js-sdk/src/models/event");

var _MatrixClientPeg = require("../MatrixClientPeg");

var _shouldHideEvent = _interopRequireDefault(require("../shouldHideEvent"));

var _EventTile = require("../components/views/rooms/EventTile");

var _SettingsStore = _interopRequireDefault(require("../settings/SettingsStore"));

var _event2 = require("matrix-js-sdk/src/@types/event");

var _thread = require("matrix-js-sdk/src/models/thread");

var _logger = require("matrix-js-sdk/src/logger");

var _consts = require("../polls/consts");

/*
Copyright 2019 - 2021 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/**
 * Returns whether an event should allow actions like reply, reactions, edit, etc.
 * which effectively checks whether it's a regular message that has been sent and that we
 * can display.
 *
 * @param {MatrixEvent} mxEvent The event to check
 * @returns {boolean} true if actionable
 */
function isContentActionable(mxEvent) {
  const {
    status: eventStatus
  } = mxEvent; // status is SENT before remote-echo, null after

  const isSent = !eventStatus || eventStatus === _event.EventStatus.SENT;

  if (isSent && !mxEvent.isRedacted()) {
    if (mxEvent.getType() === 'm.room.message') {
      const content = mxEvent.getContent();

      if (content.msgtype && content.msgtype !== 'm.bad.encrypted' && content.hasOwnProperty('body')) {
        return true;
      }
    } else if (mxEvent.getType() === 'm.sticker') {
      return true;
    }
  }

  return false;
}

function canEditContent(mxEvent) {
  if (mxEvent.status === _event.EventStatus.CANCELLED || mxEvent.getType() !== "m.room.message" || mxEvent.isRedacted()) {
    return false;
  }

  const content = mxEvent.getOriginalContent();
  const {
    msgtype
  } = content;
  return (msgtype === "m.text" || msgtype === "m.emote") && content.body && typeof content.body === 'string' && mxEvent.getSender() === _MatrixClientPeg.MatrixClientPeg.get().getUserId();
}

function canEditOwnEvent(mxEvent) {
  // for now we only allow editing
  // your own events. So this just call through
  // In the future though, moderators will be able to
  // edit other people's messages as well but we don't
  // want findEditableEvent to return other people's events
  // hence this method.
  return canEditContent(mxEvent);
}

const MAX_JUMP_DISTANCE = 100;

function findEditableEvent({
  events,
  isForward,
  fromEventId
}) {
  const maxIdx = events.length - 1;
  const inc = isForward ? 1 : -1;
  const beginIdx = isForward ? 0 : maxIdx;
  let endIdx = isForward ? maxIdx : 0;

  if (!fromEventId) {
    endIdx = Math.min(Math.max(0, beginIdx + inc * MAX_JUMP_DISTANCE), maxIdx);
  }

  let foundFromEventId = !fromEventId;

  for (let i = beginIdx; i !== endIdx + inc; i += inc) {
    const e = events[i]; // find start event first

    if (!foundFromEventId && e.getId() === fromEventId) {
      foundFromEventId = true; // don't look further than MAX_JUMP_DISTANCE events from `fromEventId`
      // to not iterate potentially 1000nds of events on key up/down

      endIdx = Math.min(Math.max(0, i + inc * MAX_JUMP_DISTANCE), maxIdx);
    } else if (foundFromEventId && !(0, _shouldHideEvent.default)(e) && canEditOwnEvent(e)) {
      // otherwise look for editable event
      return e;
    }
  }
}

function getEventDisplayInfo(mxEvent) {
  const content = mxEvent.getContent();
  const msgtype = content.msgtype;
  const eventType = mxEvent.getType();
  let tileHandler = (0, _EventTile.getHandlerTile)(mxEvent); // Info messages are basically information about commands processed on a room

  let isBubbleMessage = eventType.startsWith("m.key.verification") || eventType === _event2.EventType.RoomMessage && msgtype && msgtype.startsWith("m.key.verification") || eventType === _event2.EventType.RoomCreate || eventType === _event2.EventType.RoomEncryption || tileHandler === "messages.MJitsiWidgetEvent";
  const isLeftAlignedBubbleMessage = !isBubbleMessage && eventType === _event2.EventType.CallInvite;
  let isInfoMessage = !isBubbleMessage && !isLeftAlignedBubbleMessage && eventType !== _event2.EventType.RoomMessage && eventType !== _event2.EventType.Sticker && eventType !== _event2.EventType.RoomCreate && eventType !== _consts.POLL_START_EVENT_TYPE.name; // If we're showing hidden events in the timeline, we should use the
  // source tile when there's no regular tile for an event and also for
  // replace relations (which otherwise would display as a confusing
  // duplicate of the thing they are replacing).

  if (_SettingsStore.default.getValue("showHiddenEventsInTimeline") && !(0, _EventTile.haveTileForEvent)(mxEvent)) {
    tileHandler = "messages.ViewSourceEvent";
    isBubbleMessage = false; // Reuse info message avatar and sender profile styling

    isInfoMessage = true;
  }

  return {
    tileHandler,
    isInfoMessage,
    isBubbleMessage,
    isLeftAlignedBubbleMessage
  };
}

function isVoiceMessage(mxEvent) {
  const content = mxEvent.getContent(); // MSC2516 is a legacy identifier. See https://github.com/matrix-org/matrix-doc/pull/3245

  return !!content['org.matrix.msc2516.voice'] || !!content['org.matrix.msc3245.voice'];
}

async function fetchInitialEvent(client, roomId, eventId) {
  var _initialEvent;

  let initialEvent;

  try {
    const eventData = await client.fetchRoomEvent(roomId, eventId);
    initialEvent = new _event.MatrixEvent(eventData);
  } catch (e) {
    _logger.logger.warn("Could not find initial event: " + initialEvent.threadRootId);

    initialEvent = null;
  }

  if ((_initialEvent = initialEvent) !== null && _initialEvent !== void 0 && _initialEvent.isThreadRelation) {
    try {
      const rootEventData = await client.fetchRoomEvent(roomId, initialEvent.threadRootId);
      const rootEvent = new _event.MatrixEvent(rootEventData);
      const room = client.getRoom(roomId);
      const thread = new _thread.Thread([rootEvent], room, client);
      thread.addEvent(initialEvent);
      room.threads.set(thread.id, thread);
    } catch (e) {
      _logger.logger.warn("Could not find root event: " + initialEvent.threadRootId);
    }
  }

  return initialEvent;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,