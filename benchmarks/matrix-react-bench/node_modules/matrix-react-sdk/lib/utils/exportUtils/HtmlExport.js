"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _Exporter = _interopRequireDefault(require("./Exporter"));

var _Media = require("../../customisations/Media");

var _event = require("matrix-js-sdk/src/models/event");

var _server = require("react-dom/server");

var _Layout = require("../../settings/enums/Layout");

var _MessagePanel = require("../../components/structures/MessagePanel");

var _DateUtils = require("../../DateUtils");

var _Permalinks = require("../permalinks/Permalinks");

var _languageHandler = require("../../languageHandler");

var _event2 = require("matrix-js-sdk/src/@types/event");

var Avatar = _interopRequireWildcard(require("../../Avatar"));

var _EventTile = _interopRequireWildcard(require("../../components/views/rooms/EventTile"));

var _DateSeparator = _interopRequireDefault(require("../../components/views/messages/DateSeparator"));

var _BaseAvatar = _interopRequireDefault(require("../../components/views/avatars/BaseAvatar"));

var _exportJS = _interopRequireDefault(require("!!raw-loader!./exportJS"));

var _MatrixClientContext = _interopRequireDefault(require("../../contexts/MatrixClientContext"));

var _exportCSS = _interopRequireDefault(require("./exportCSS"));

var _TextForEvent = require("../../TextForEvent");

var _logger = require("matrix-js-sdk/src/logger");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
Copyright 2021 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
class HTMLExporter extends _Exporter.default {
  constructor(room, exportType, exportOptions, setProgressText) {
    super(room, exportType, exportOptions, setProgressText);
    (0, _defineProperty2.default)(this, "avatars", void 0);
    (0, _defineProperty2.default)(this, "permalinkCreator", void 0);
    (0, _defineProperty2.default)(this, "totalSize", void 0);
    (0, _defineProperty2.default)(this, "mediaOmitText", void 0);
    this.avatars = new Map();
    this.permalinkCreator = new _Permalinks.RoomPermalinkCreator(this.room);
    this.totalSize = 0;
    this.mediaOmitText = !this.exportOptions.attachmentsIncluded ? (0, _languageHandler._t)("Media omitted") : (0, _languageHandler._t)("Media omitted - file size limit exceeded");
  }

  async getRoomAvatar() {
    let blob;
    const avatarUrl = Avatar.avatarUrlForRoom(this.room, 32, 32, "crop");
    const avatarPath = "room.png";

    if (avatarUrl) {
      try {
        const image = await fetch(avatarUrl);
        blob = await image.blob();
        this.totalSize += blob.size;
        this.addFile(avatarPath, blob);
      } catch (err) {
        _logger.logger.log("Failed to fetch room's avatar" + err);
      }
    }

    const avatar = /*#__PURE__*/_react.default.createElement(_BaseAvatar.default, {
      width: 32,
      height: 32,
      name: this.room.name,
      title: this.room.name,
      url: blob ? avatarPath : null,
      resizeMethod: "crop"
    });

    return (0, _server.renderToStaticMarkup)(avatar);
  }

  async wrapHTML(content) {
    var _this$room$currentSta, _this$room, _this$room$getMember, _this$room2, _this$room2$getMember, _this$room$currentSta2, _this$room$currentSta3;

    const roomAvatar = await this.getRoomAvatar();
    const exportDate = (0, _DateUtils.formatFullDateNoDayNoTime)(new Date());
    const creator = (_this$room$currentSta = this.room.currentState.getStateEvents(_event2.EventType.RoomCreate, "")) === null || _this$room$currentSta === void 0 ? void 0 : _this$room$currentSta.getSender();
    const creatorName = ((_this$room = this.room) === null || _this$room === void 0 ? void 0 : (_this$room$getMember = _this$room.getMember(creator)) === null || _this$room$getMember === void 0 ? void 0 : _this$room$getMember.rawDisplayName) || creator;
    const exporter = this.client.getUserId();
    const exporterName = (_this$room2 = this.room) === null || _this$room2 === void 0 ? void 0 : (_this$room2$getMember = _this$room2.getMember(exporter)) === null || _this$room2$getMember === void 0 ? void 0 : _this$room2$getMember.rawDisplayName;
    const topic = ((_this$room$currentSta2 = this.room.currentState.getStateEvents(_event2.EventType.RoomTopic, "")) === null || _this$room$currentSta2 === void 0 ? void 0 : (_this$room$currentSta3 = _this$room$currentSta2.getContent()) === null || _this$room$currentSta3 === void 0 ? void 0 : _this$room$currentSta3.topic) || "";
    const createdText = (0, _languageHandler._t)("%(creatorName)s created this room.", {
      creatorName
    });
    const exportedText = (0, _server.renderToStaticMarkup)( /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("This is the start of export of <roomName/>. Exported by <exporterDetails/> at %(exportDate)s.", {
      exportDate
    }, {
      roomName: () => /*#__PURE__*/_react.default.createElement("b", null, this.room.name),
      exporterDetails: () => /*#__PURE__*/_react.default.createElement("a", {
        href: `https://matrix.to/#/${exporter}`,
        target: "_blank",
        rel: "noopener noreferrer"
      }, exporterName ? /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("b", null, exporterName), " (" + exporter + ")") : /*#__PURE__*/_react.default.createElement("b", null, exporter))
    })));
    const topicText = topic ? (0, _languageHandler._t)("Topic: %(topic)s", {
      topic
    }) : "";
    return `
          <!DOCTYPE html>
            <html lang="en">
            <head>
                <meta charset="UTF-8" />
                <meta http-equiv="X-UA-Compatible" content="IE=edge" />
                <meta name="viewport" content="width=device-width, initial-scale=1.0" />
                <link href="css/style.css" rel="stylesheet" />
                <script src="js/script.js"></script>
                <title>Exported Data</title>
            </head>
            <body style="height: 100vh;">
                <section
                id="matrixchat"
                style="height: 100%; overflow: auto"
                class="notranslate"
                >
                <div class="mx_MatrixChat_wrapper" aria-hidden="false">
                    <div class="mx_MatrixChat">
                    <main class="mx_RoomView">
                        <div class="mx_RoomHeader light-panel">
                        <div class="mx_RoomHeader_wrapper" aria-owns="mx_RightPanel">
                            <div class="mx_RoomHeader_avatar">
                            <div class="mx_DecoratedRoomAvatar">
                               ${roomAvatar}
                            </div>
                            </div>
                            <div class="mx_RoomHeader_name">
                            <div
                                dir="auto"
                                class="mx_RoomHeader_nametext"
                                title="${this.room.name}"
                            >
                                ${this.room.name}
                            </div>
                            </div>
                            <div class="mx_RoomHeader_topic" dir="auto"> ${topic} </div>
                        </div>
                        </div>
                        <div class="mx_MainSplit">
                        <div class="mx_RoomView_body">
                            <div
                            class="mx_RoomView_timeline mx_RoomView_timeline_rr_enabled"
                            >
                            <div
                                class="
                                mx_AutoHideScrollbar
                                mx_ScrollPanel
                                mx_RoomView_messagePanel
                                mx_GroupLayout
                                "
                            >
                                <div class="mx_RoomView_messageListWrapper">
                                <ol
                                    class="mx_RoomView_MessageList"
                                    aria-live="polite"
                                    role="list"
                                >
                                <div class="mx_NewRoomIntro">
                                    ${roomAvatar}
                                    <h2> ${this.room.name} </h2>
                                    <p> ${createdText} <br/><br/> ${exportedText} </p>
                                    <br/>
                                    <p> ${topicText} </p>
                                </div>
                                ${content}
                                </ol>
                                </div>
                            </div>
                            </div>
                            <div class="mx_RoomView_statusArea">
                            <div class="mx_RoomView_statusAreaBox">
                                <div class="mx_RoomView_statusAreaBox_line"></div>
                            </div>
                            </div>
                        </div>
                        </div>
                    </main>
                    </div>
                </div>
                </section>
                <div id="snackbar"/>
            </body>
        </html>`;
  }

  getAvatarURL(event) {
    const member = event.sender;
    return member.getMxcAvatarUrl() && (0, _Media.mediaFromMxc)(member.getMxcAvatarUrl()).getThumbnailOfSourceHttp(30, 30, "crop");
  }

  async saveAvatarIfNeeded(event) {
    const member = event.sender;

    if (!this.avatars.has(member.userId)) {
      try {
        const avatarUrl = this.getAvatarURL(event);
        this.avatars.set(member.userId, true);
        const image = await fetch(avatarUrl);
        const blob = await image.blob();
        this.addFile(`users/${member.userId.replace(/:/g, '-')}.png`, blob);
      } catch (err) {
        _logger.logger.log("Failed to fetch user's avatar" + err);
      }
    }
  }

  getDateSeparator(event) {
    const ts = event.getTs();

    const dateSeparator = /*#__PURE__*/_react.default.createElement("li", {
      key: ts
    }, /*#__PURE__*/_react.default.createElement(_DateSeparator.default, {
      forExport: true,
      key: ts,
      ts: ts
    }));

    return (0, _server.renderToStaticMarkup)(dateSeparator);
  }

  needsDateSeparator(event, prevEvent) {
    if (prevEvent == null) return true;
    return (0, _DateUtils.wantsDateSeparator)(prevEvent.getDate(), event.getDate());
  }

  getEventTile(mxEv, continuation) {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_Export_EventWrapper",
      id: mxEv.getId()
    }, /*#__PURE__*/_react.default.createElement(_MatrixClientContext.default.Provider, {
      value: this.client
    }, /*#__PURE__*/_react.default.createElement(_EventTile.default, {
      mxEvent: mxEv,
      continuation: continuation,
      isRedacted: mxEv.isRedacted(),
      replacingEventId: mxEv.replacingEventId(),
      forExport: true,
      readReceipts: null,
      alwaysShowTimestamps: true,
      readReceiptMap: null,
      showUrlPreview: false,
      checkUnmounting: () => false,
      isTwelveHour: false,
      last: false,
      lastInSection: false,
      permalinkCreator: this.permalinkCreator,
      lastSuccessful: false,
      isSelectedEvent: false,
      getRelationsForEvent: null,
      showReactions: false,
      layout: _Layout.Layout.Group,
      enableFlair: false,
      showReadReceipts: false
    })));
  }

  async getEventTileMarkup(mxEv, continuation, filePath) {
    const hasAvatar = !!this.getAvatarURL(mxEv);
    if (hasAvatar) await this.saveAvatarIfNeeded(mxEv);
    const EventTile = this.getEventTile(mxEv, continuation);
    let eventTileMarkup;

    if (mxEv.getContent().msgtype == _event2.MsgType.Emote || mxEv.getContent().msgtype == _event2.MsgType.Notice || mxEv.getContent().msgtype === _event2.MsgType.Text) {
      // to linkify textual events, we'll need lifecycle methods which won't be invoked in renderToString
      // So, we'll have to render the component into a temporary root element
      const tempRoot = document.createElement('div');

      _reactDom.default.render(EventTile, tempRoot);

      eventTileMarkup = tempRoot.innerHTML;
    } else {
      eventTileMarkup = (0, _server.renderToStaticMarkup)(EventTile);
    }

    if (filePath) {
      var _mxEv$getContent$file;

      const mxc = mxEv.getContent().url || ((_mxEv$getContent$file = mxEv.getContent().file) === null || _mxEv$getContent$file === void 0 ? void 0 : _mxEv$getContent$file.url);
      eventTileMarkup = eventTileMarkup.split(mxc).join(filePath);
    }

    eventTileMarkup = eventTileMarkup.replace(/<span class="mx_MFileBody_info_icon".*?>.*?<\/span>/, '');

    if (hasAvatar) {
      eventTileMarkup = eventTileMarkup.replace(encodeURI(this.getAvatarURL(mxEv)).replace(/&/g, '&amp;'), `users/${mxEv.sender.userId.replace(/:/g, "-")}.png`);
    }

    return eventTileMarkup;
  }

  createModifiedEvent(text, mxEv, italic = true) {
    const modifiedContent = {
      msgtype: "m.text",
      body: `${text}`,
      format: "org.matrix.custom.html",
      formatted_body: `${text}`
    };

    if (italic) {
      modifiedContent.formatted_body = '<em>' + modifiedContent.formatted_body + '</em>';
      modifiedContent.body = '*' + modifiedContent.body + '*';
    }

    const modifiedEvent = new _event.MatrixEvent();
    modifiedEvent.event = mxEv.event;
    modifiedEvent.sender = mxEv.sender;
    modifiedEvent.event.type = "m.room.message";
    modifiedEvent.event.content = modifiedContent;
    return modifiedEvent;
  }

  async createMessageBody(mxEv, joined = false) {
    let eventTile;

    try {
      if (this.isAttachment(mxEv)) {
        if (this.exportOptions.attachmentsIncluded) {
          try {
            const blob = await this.getMediaBlob(mxEv);

            if (this.totalSize + blob.size > this.exportOptions.maxSize) {
              eventTile = await this.getEventTileMarkup(this.createModifiedEvent(this.mediaOmitText, mxEv), joined);
            } else {
              this.totalSize += blob.size;
              const filePath = this.getFilePath(mxEv);
              eventTile = await this.getEventTileMarkup(mxEv, joined, filePath);

              if (this.totalSize == this.exportOptions.maxSize) {
                this.exportOptions.attachmentsIncluded = false;
              }

              this.addFile(filePath, blob);
            }
          } catch (e) {
            _logger.logger.log("Error while fetching file" + e);

            eventTile = await this.getEventTileMarkup(this.createModifiedEvent((0, _languageHandler._t)("Error fetching file"), mxEv), joined);
          }
        } else {
          eventTile = await this.getEventTileMarkup(this.createModifiedEvent(this.mediaOmitText, mxEv), joined);
        }
      } else eventTile = await this.getEventTileMarkup(mxEv, joined);
    } catch (e) {
      // TODO: Handle callEvent errors
      _logger.logger.error(e);

      eventTile = await this.getEventTileMarkup(this.createModifiedEvent((0, _TextForEvent.textForEvent)(mxEv), mxEv, false), joined);
    }

    return eventTile;
  }

  async createHTML(events, start) {
    let content = "";
    let prevEvent = null;

    for (let i = start; i < Math.min(start + 1000, events.length); i++) {
      const event = events[i];
      this.updateProgress(`Processing event ${i + 1} out of ${events.length}`, false, true);
      if (this.cancelled) return this.cleanUp();
      if (!(0, _EventTile.haveTileForEvent)(event)) continue;
      content += this.needsDateSeparator(event, prevEvent) ? this.getDateSeparator(event) : "";
      const shouldBeJoined = !this.needsDateSeparator(event, prevEvent) && (0, _MessagePanel.shouldFormContinuation)(prevEvent, event, false);
      const body = await this.createMessageBody(event, shouldBeJoined);
      this.totalSize += Buffer.byteLength(body);
      content += body;
      prevEvent = event;
    }

    return await this.wrapHTML(content);
  }

  async export() {
    this.updateProgress("Starting export...");
    const fetchStart = performance.now();
    const res = await this.getRequiredEvents();
    const fetchEnd = performance.now();
    this.updateProgress(`Fetched ${res.length} events in ${(fetchEnd - fetchStart) / 1000}s`, true, false);
    this.updateProgress("Creating HTML...");

    for (let page = 0; page < res.length / 1000; page++) {
      const html = await this.createHTML(res, page * 1000);
      this.addFile(`messages${page ? page + 1 : ""}.html`, new Blob([html]));
    }

    const exportCSS = await (0, _exportCSS.default)();
    this.addFile("css/style.css", new Blob([exportCSS]));
    this.addFile("js/script.js", new Blob([_exportJS.default]));
    await this.downloadZIP();
    const exportEnd = performance.now();

    if (this.cancelled) {
      _logger.logger.info("Export cancelled successfully");
    } else {
      this.updateProgress("Export successful!");
      this.updateProgress(`Exported ${res.length} events in ${(exportEnd - fetchStart) / 1000} seconds`);
    }

    this.cleanUp();
  }

}

exports.default = HTMLExporter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,