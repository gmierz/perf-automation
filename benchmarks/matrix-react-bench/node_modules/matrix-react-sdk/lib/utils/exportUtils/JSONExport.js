"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _Exporter = _interopRequireDefault(require("./Exporter"));

var _DateUtils = require("../../DateUtils");

var _EventTile = require("../../components/views/rooms/EventTile");

var _event = require("matrix-js-sdk/src/@types/event");

var _logger = require("matrix-js-sdk/src/logger");

/*
Copyright 2021 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
class JSONExporter extends _Exporter.default {
  constructor(room, exportType, exportOptions, setProgressText) {
    super(room, exportType, exportOptions, setProgressText);
    (0, _defineProperty2.default)(this, "totalSize", 0);
    (0, _defineProperty2.default)(this, "messages", []);
  }

  createJSONString() {
    var _this$room$currentSta, _this$room, _this$room$getMember, _this$room$currentSta2, _this$room$currentSta3, _this$room2, _this$room2$getMember;

    const exportDate = (0, _DateUtils.formatFullDateNoDayNoTime)(new Date());
    const creator = (_this$room$currentSta = this.room.currentState.getStateEvents(_event.EventType.RoomCreate, "")) === null || _this$room$currentSta === void 0 ? void 0 : _this$room$currentSta.getSender();
    const creatorName = ((_this$room = this.room) === null || _this$room === void 0 ? void 0 : (_this$room$getMember = _this$room.getMember(creator)) === null || _this$room$getMember === void 0 ? void 0 : _this$room$getMember.rawDisplayName) || creator;
    const topic = ((_this$room$currentSta2 = this.room.currentState.getStateEvents(_event.EventType.RoomTopic, "")) === null || _this$room$currentSta2 === void 0 ? void 0 : (_this$room$currentSta3 = _this$room$currentSta2.getContent()) === null || _this$room$currentSta3 === void 0 ? void 0 : _this$room$currentSta3.topic) || "";
    const exporter = this.client.getUserId();
    const exporterName = ((_this$room2 = this.room) === null || _this$room2 === void 0 ? void 0 : (_this$room2$getMember = _this$room2.getMember(exporter)) === null || _this$room2$getMember === void 0 ? void 0 : _this$room2$getMember.rawDisplayName) || exporter;
    const jsonObject = {
      room_name: this.room.name,
      room_creator: creatorName,
      topic,
      export_date: exportDate,
      exported_by: exporterName,
      messages: this.messages
    };
    return JSON.stringify(jsonObject, null, 2);
  }

  async getJSONString(mxEv) {
    if (this.exportOptions.attachmentsIncluded && this.isAttachment(mxEv)) {
      try {
        const blob = await this.getMediaBlob(mxEv);

        if (this.totalSize + blob.size < this.exportOptions.maxSize) {
          this.totalSize += blob.size;
          const filePath = this.getFilePath(mxEv);

          if (this.totalSize == this.exportOptions.maxSize) {
            this.exportOptions.attachmentsIncluded = false;
          }

          this.addFile(filePath, blob);
        }
      } catch (err) {
        _logger.logger.log("Error fetching file: " + err);
      }
    }

    const jsonEvent = mxEv.toJSON();
    const clearEvent = mxEv.isEncrypted() ? jsonEvent.decrypted : jsonEvent;
    return clearEvent;
  }

  async createOutput(events) {
    for (let i = 0; i < events.length; i++) {
      const event = events[i];
      this.updateProgress(`Processing event ${i + 1} out of ${events.length}`, false, true);
      if (this.cancelled) return this.cleanUp();
      if (!(0, _EventTile.haveTileForEvent)(event)) continue;
      this.messages.push(await this.getJSONString(event));
    }

    return this.createJSONString();
  }

  async export() {
    _logger.logger.info("Starting export process...");

    _logger.logger.info("Fetching events...");

    const fetchStart = performance.now();
    const res = await this.getRequiredEvents();
    const fetchEnd = performance.now();

    _logger.logger.log(`Fetched ${res.length} events in ${(fetchEnd - fetchStart) / 1000}s`);

    _logger.logger.info("Creating output...");

    const text = await this.createOutput(res);

    if (this.files.length) {
      this.addFile("export.json", new Blob([text]));
      await this.downloadZIP();
    } else {
      const fileName = `matrix-export-${(0, _DateUtils.formatFullDateNoDay)(new Date())}.json`;
      this.downloadPlainText(fileName, text);
    }

    const exportEnd = performance.now();

    if (this.cancelled) {
      _logger.logger.info("Export cancelled successfully");
    } else {
      _logger.logger.info("Export successful!");

      _logger.logger.log(`Exported ${res.length} events in ${(exportEnd - fetchStart) / 1000} seconds`);
    }

    this.cleanUp();
  }

}

exports.default = JSONExporter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,