"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CapabilityText = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _matrixWidgetApi = require("matrix-widget-api");

var _languageHandler = require("../languageHandler");

var _event = require("matrix-js-sdk/src/@types/event");

var _ElementWidgetCapabilities = require("../stores/widgets/ElementWidgetCapabilities");

var _react = _interopRequireDefault(require("react"));

var _MatrixClientPeg = require("../MatrixClientPeg");

var _TextWithTooltip = _interopRequireDefault(require("../components/views/elements/TextWithTooltip"));

/*
Copyright 2020 - 2021 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// eslint-disable-line @typescript-eslint/naming-convention
const GENERIC_WIDGET_KIND = "generic";

class CapabilityText {
  static bylineFor(eventCap) {
    if (eventCap.isState) {
      return !eventCap.keyStr ? (0, _languageHandler._t)("with an empty state key") : (0, _languageHandler._t)("with state key %(stateKey)s", {
        stateKey: eventCap.keyStr
      });
    }

    return null; // room messages are handled specially
  }

  static for(capability, kind) {
    // First see if we have a super simple line of text to provide back
    if (CapabilityText.simpleCaps[capability]) {
      const textForKind = CapabilityText.simpleCaps[capability];
      if (textForKind[kind]) return {
        primary: (0, _languageHandler._t)(textForKind[kind])
      };
      if (textForKind[GENERIC_WIDGET_KIND]) return {
        primary: (0, _languageHandler._t)(textForKind[GENERIC_WIDGET_KIND])
      }; // ... we'll fall through to the generic capability processing at the end of this
      // function if we fail to generate a string for the capability.
    } // Try to handle timeline capabilities. The text here implies that the caller has sorted
    // the timeline caps to the end for UI purposes.


    if ((0, _matrixWidgetApi.isTimelineCapability)(capability)) {
      if ((0, _matrixWidgetApi.isTimelineCapabilityFor)(capability, _matrixWidgetApi.Symbols.AnyRoom)) {
        return {
          primary: (0, _languageHandler._t)("The above, but in any room you are joined or invited to as well")
        };
      } else {
        const roomId = (0, _matrixWidgetApi.getTimelineRoomIDFromCapability)(capability);

        const room = _MatrixClientPeg.MatrixClientPeg.get().getRoom(roomId);

        return {
          primary: (0, _languageHandler._t)("The above, but in <Room /> as well", {}, {
            Room: () => {
              if (room) {
                return /*#__PURE__*/_react.default.createElement(_TextWithTooltip.default, {
                  tooltip: room.getCanonicalAlias() ?? roomId
                }, /*#__PURE__*/_react.default.createElement("b", null, room.name));
              } else {
                return /*#__PURE__*/_react.default.createElement("b", null, /*#__PURE__*/_react.default.createElement("code", null, roomId));
              }
            }
          })
        };
      }
    } // We didn't have a super simple line of text, so try processing the capability as the
    // more complex event send/receive permission type.


    const [eventCap] = _matrixWidgetApi.WidgetEventCapability.findEventCapabilities([capability]);

    if (eventCap) {
      // Special case room messages so they show up a bit cleaner to the user. Result is
      // effectively "Send images" instead of "Send messages... of type images" if we were
      // to handle the msgtype nuances in this function.
      if (!eventCap.isState && eventCap.eventType === _event.EventType.RoomMessage) {
        return CapabilityText.forRoomMessageCap(eventCap, kind);
      } // See if we have a static line of text to provide for the given event type and
      // direction. The hope is that we do for common event types for friendlier copy.


      const evSendRecv = eventCap.isState ? CapabilityText.stateSendRecvCaps : CapabilityText.nonStateSendRecvCaps;

      if (evSendRecv[eventCap.eventType]) {
        const textForKind = evSendRecv[eventCap.eventType];
        const textForDirection = textForKind[kind] || textForKind[GENERIC_WIDGET_KIND];

        if (textForDirection && textForDirection[eventCap.direction]) {
          return {
            primary: (0, _languageHandler._t)(textForDirection[eventCap.direction]) // no byline because we would have already represented the event properly

          };
        }
      } // We don't have anything simple, so just return a generic string for the event cap


      if (kind === _matrixWidgetApi.WidgetKind.Room) {
        if (eventCap.direction === _matrixWidgetApi.EventDirection.Send) {
          return {
            primary: (0, _languageHandler._t)("Send <b>%(eventType)s</b> events as you in this room", {
              eventType: eventCap.eventType
            }, {
              b: sub => /*#__PURE__*/_react.default.createElement("b", null, sub)
            }),
            byline: CapabilityText.bylineFor(eventCap)
          };
        } else {
          return {
            primary: (0, _languageHandler._t)("See <b>%(eventType)s</b> events posted to this room", {
              eventType: eventCap.eventType
            }, {
              b: sub => /*#__PURE__*/_react.default.createElement("b", null, sub)
            }),
            byline: CapabilityText.bylineFor(eventCap)
          };
        }
      } else {
        // assume generic
        if (eventCap.direction === _matrixWidgetApi.EventDirection.Send) {
          return {
            primary: (0, _languageHandler._t)("Send <b>%(eventType)s</b> events as you in your active room", {
              eventType: eventCap.eventType
            }, {
              b: sub => /*#__PURE__*/_react.default.createElement("b", null, sub)
            }),
            byline: CapabilityText.bylineFor(eventCap)
          };
        } else {
          return {
            primary: (0, _languageHandler._t)("See <b>%(eventType)s</b> events posted to your active room", {
              eventType: eventCap.eventType
            }, {
              b: sub => /*#__PURE__*/_react.default.createElement("b", null, sub)
            }),
            byline: CapabilityText.bylineFor(eventCap)
          };
        }
      }
    } // We don't have enough context to render this capability specially, so we'll present it as-is


    return {
      primary: (0, _languageHandler._t)("The <b>%(capability)s</b> capability", {
        capability
      }, {
        b: sub => /*#__PURE__*/_react.default.createElement("b", null, sub)
      })
    };
  }

  static forRoomMessageCap(eventCap, kind) {
    // First handle the case of "all messages" to make the switch later on a bit clearer
    if (!eventCap.keyStr) {
      if (eventCap.direction === _matrixWidgetApi.EventDirection.Send) {
        return {
          primary: kind === _matrixWidgetApi.WidgetKind.Room ? (0, _languageHandler._t)("Send messages as you in this room") : (0, _languageHandler._t)("Send messages as you in your active room")
        };
      } else {
        return {
          primary: kind === _matrixWidgetApi.WidgetKind.Room ? (0, _languageHandler._t)("See messages posted to this room") : (0, _languageHandler._t)("See messages posted to your active room")
        };
      }
    } // Now handle all the message types we care about. There are more message types available, however
    // they are not as common so we don't bother rendering them. They'll fall into the generic case.


    switch (eventCap.keyStr) {
      case _event.MsgType.Text:
        {
          if (eventCap.direction === _matrixWidgetApi.EventDirection.Send) {
            return {
              primary: kind === _matrixWidgetApi.WidgetKind.Room ? (0, _languageHandler._t)("Send text messages as you in this room") : (0, _languageHandler._t)("Send text messages as you in your active room")
            };
          } else {
            return {
              primary: kind === _matrixWidgetApi.WidgetKind.Room ? (0, _languageHandler._t)("See text messages posted to this room") : (0, _languageHandler._t)("See text messages posted to your active room")
            };
          }
        }

      case _event.MsgType.Emote:
        {
          if (eventCap.direction === _matrixWidgetApi.EventDirection.Send) {
            return {
              primary: kind === _matrixWidgetApi.WidgetKind.Room ? (0, _languageHandler._t)("Send emotes as you in this room") : (0, _languageHandler._t)("Send emotes as you in your active room")
            };
          } else {
            return {
              primary: kind === _matrixWidgetApi.WidgetKind.Room ? (0, _languageHandler._t)("See emotes posted to this room") : (0, _languageHandler._t)("See emotes posted to your active room")
            };
          }
        }

      case _event.MsgType.Image:
        {
          if (eventCap.direction === _matrixWidgetApi.EventDirection.Send) {
            return {
              primary: kind === _matrixWidgetApi.WidgetKind.Room ? (0, _languageHandler._t)("Send images as you in this room") : (0, _languageHandler._t)("Send images as you in your active room")
            };
          } else {
            return {
              primary: kind === _matrixWidgetApi.WidgetKind.Room ? (0, _languageHandler._t)("See images posted to this room") : (0, _languageHandler._t)("See images posted to your active room")
            };
          }
        }

      case _event.MsgType.Video:
        {
          if (eventCap.direction === _matrixWidgetApi.EventDirection.Send) {
            return {
              primary: kind === _matrixWidgetApi.WidgetKind.Room ? (0, _languageHandler._t)("Send videos as you in this room") : (0, _languageHandler._t)("Send videos as you in your active room")
            };
          } else {
            return {
              primary: kind === _matrixWidgetApi.WidgetKind.Room ? (0, _languageHandler._t)("See videos posted to this room") : (0, _languageHandler._t)("See videos posted to your active room")
            };
          }
        }

      case _event.MsgType.File:
        {
          if (eventCap.direction === _matrixWidgetApi.EventDirection.Send) {
            return {
              primary: kind === _matrixWidgetApi.WidgetKind.Room ? (0, _languageHandler._t)("Send general files as you in this room") : (0, _languageHandler._t)("Send general files as you in your active room")
            };
          } else {
            return {
              primary: kind === _matrixWidgetApi.WidgetKind.Room ? (0, _languageHandler._t)("See general files posted to this room") : (0, _languageHandler._t)("See general files posted to your active room")
            };
          }
        }

      default:
        {
          let primary;

          if (eventCap.direction === _matrixWidgetApi.EventDirection.Send) {
            if (kind === _matrixWidgetApi.WidgetKind.Room) {
              primary = (0, _languageHandler._t)("Send <b>%(msgtype)s</b> messages as you in this room", {
                msgtype: eventCap.keyStr
              }, {
                b: sub => /*#__PURE__*/_react.default.createElement("b", null, sub)
              });
            } else {
              primary = (0, _languageHandler._t)("Send <b>%(msgtype)s</b> messages as you in your active room", {
                msgtype: eventCap.keyStr
              }, {
                b: sub => /*#__PURE__*/_react.default.createElement("b", null, sub)
              });
            }
          } else {
            if (kind === _matrixWidgetApi.WidgetKind.Room) {
              primary = (0, _languageHandler._t)("See <b>%(msgtype)s</b> messages posted to this room", {
                msgtype: eventCap.keyStr
              }, {
                b: sub => /*#__PURE__*/_react.default.createElement("b", null, sub)
              });
            } else {
              primary = (0, _languageHandler._t)("See <b>%(msgtype)s</b> messages posted to your active room", {
                msgtype: eventCap.keyStr
              }, {
                b: sub => /*#__PURE__*/_react.default.createElement("b", null, sub)
              });
            }
          }

          return {
            primary
          };
        }
    }
  }

}

exports.CapabilityText = CapabilityText;
(0, _defineProperty2.default)(CapabilityText, "simpleCaps", {
  [_matrixWidgetApi.MatrixCapabilities.AlwaysOnScreen]: {
    [_matrixWidgetApi.WidgetKind.Room]: (0, _languageHandler._td)("Remain on your screen when viewing another room, when running"),
    [GENERIC_WIDGET_KIND]: (0, _languageHandler._td)("Remain on your screen while running")
  },
  [_matrixWidgetApi.MatrixCapabilities.StickerSending]: {
    [_matrixWidgetApi.WidgetKind.Room]: (0, _languageHandler._td)("Send stickers into this room"),
    [GENERIC_WIDGET_KIND]: (0, _languageHandler._td)("Send stickers into your active room")
  },
  [_ElementWidgetCapabilities.ElementWidgetCapabilities.CanChangeViewedRoom]: {
    [GENERIC_WIDGET_KIND]: (0, _languageHandler._td)("Change which room you're viewing")
  },
  [_matrixWidgetApi.MatrixCapabilities.MSC2931Navigate]: {
    [GENERIC_WIDGET_KIND]: (0, _languageHandler._td)("Change which room, message, or user you're viewing")
  }
});
(0, _defineProperty2.default)(CapabilityText, "stateSendRecvCaps", {
  [_event.EventType.RoomTopic]: {
    [_matrixWidgetApi.WidgetKind.Room]: {
      [_matrixWidgetApi.EventDirection.Send]: (0, _languageHandler._td)("Change the topic of this room"),
      [_matrixWidgetApi.EventDirection.Receive]: (0, _languageHandler._td)("See when the topic changes in this room")
    },
    [GENERIC_WIDGET_KIND]: {
      [_matrixWidgetApi.EventDirection.Send]: (0, _languageHandler._td)("Change the topic of your active room"),
      [_matrixWidgetApi.EventDirection.Receive]: (0, _languageHandler._td)("See when the topic changes in your active room")
    }
  },
  [_event.EventType.RoomName]: {
    [_matrixWidgetApi.WidgetKind.Room]: {
      [_matrixWidgetApi.EventDirection.Send]: (0, _languageHandler._td)("Change the name of this room"),
      [_matrixWidgetApi.EventDirection.Receive]: (0, _languageHandler._td)("See when the name changes in this room")
    },
    [GENERIC_WIDGET_KIND]: {
      [_matrixWidgetApi.EventDirection.Send]: (0, _languageHandler._td)("Change the name of your active room"),
      [_matrixWidgetApi.EventDirection.Receive]: (0, _languageHandler._td)("See when the name changes in your active room")
    }
  },
  [_event.EventType.RoomAvatar]: {
    [_matrixWidgetApi.WidgetKind.Room]: {
      [_matrixWidgetApi.EventDirection.Send]: (0, _languageHandler._td)("Change the avatar of this room"),
      [_matrixWidgetApi.EventDirection.Receive]: (0, _languageHandler._td)("See when the avatar changes in this room")
    },
    [GENERIC_WIDGET_KIND]: {
      [_matrixWidgetApi.EventDirection.Send]: (0, _languageHandler._td)("Change the avatar of your active room"),
      [_matrixWidgetApi.EventDirection.Receive]: (0, _languageHandler._td)("See when the avatar changes in your active room")
    }
  },
  [_event.EventType.RoomMember]: {
    [_matrixWidgetApi.WidgetKind.Room]: {
      [_matrixWidgetApi.EventDirection.Send]: (0, _languageHandler._td)("Kick, ban, or invite people to this room, and make you leave"),
      [_matrixWidgetApi.EventDirection.Receive]: (0, _languageHandler._td)("See when people join, leave, or are invited to this room")
    },
    [GENERIC_WIDGET_KIND]: {
      [_matrixWidgetApi.EventDirection.Send]: (0, _languageHandler._td)("Kick, ban, or invite people to your active room, and make you leave"),
      [_matrixWidgetApi.EventDirection.Receive]: (0, _languageHandler._td)("See when people join, leave, or are invited to your active room")
    }
  }
});
(0, _defineProperty2.default)(CapabilityText, "nonStateSendRecvCaps", {
  [_event.EventType.Sticker]: {
    [_matrixWidgetApi.WidgetKind.Room]: {
      [_matrixWidgetApi.EventDirection.Send]: (0, _languageHandler._td)("Send stickers to this room as you"),
      [_matrixWidgetApi.EventDirection.Receive]: (0, _languageHandler._td)("See when a sticker is posted in this room")
    },
    [GENERIC_WIDGET_KIND]: {
      [_matrixWidgetApi.EventDirection.Send]: (0, _languageHandler._td)("Send stickers to your active room as you"),
      [_matrixWidgetApi.EventDirection.Receive]: (0, _languageHandler._td)("See when anyone posts a sticker to your active room")
    }
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,