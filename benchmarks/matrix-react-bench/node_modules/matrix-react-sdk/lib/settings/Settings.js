"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.labGroupNames = exports.SETTINGS = exports.LabGroup = void 0;

var _client = require("matrix-js-sdk/src/client");

var _languageHandler = require("../languageHandler");

var _NotificationControllers = require("./controllers/NotificationControllers");

var _CustomStatusController = _interopRequireDefault(require("./controllers/CustomStatusController"));

var _ThemeController = _interopRequireDefault(require("./controllers/ThemeController"));

var _PushToMatrixClientController = _interopRequireDefault(require("./controllers/PushToMatrixClientController"));

var _ReloadOnChangeController = _interopRequireDefault(require("./controllers/ReloadOnChangeController"));

var _FontSizeController = _interopRequireDefault(require("./controllers/FontSizeController"));

var _SystemFontController = _interopRequireDefault(require("./controllers/SystemFontController"));

var _UseSystemFontController = _interopRequireDefault(require("./controllers/UseSystemFontController"));

var _SettingLevel = require("./SettingLevel");

var _RightPanelStorePhases = require("../stores/RightPanelStorePhases");

var _Keyboard = require("../Keyboard");

var _UIFeatureController = _interopRequireDefault(require("./controllers/UIFeatureController"));

var _UIFeature = require("./UIFeature");

var _OrderedMultiController = require("./controllers/OrderedMultiController");

var _Layout = require("./enums/Layout");

var _ReducedMotionController = _interopRequireDefault(require("./controllers/ReducedMotionController"));

var _IncompatibleController = _interopRequireDefault(require("./controllers/IncompatibleController"));

var _PseudonymousAnalyticsController = _interopRequireDefault(require("./controllers/PseudonymousAnalyticsController"));

var _NewLayoutSwitcherController = _interopRequireDefault(require("./controllers/NewLayoutSwitcherController"));

var _ImageSize = require("./enums/ImageSize");

var _spaces = require("../stores/spaces");

/*
Copyright 2017 Travis Ralston
Copyright 2018 - 2021 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// These are just a bunch of helper arrays to avoid copy/pasting a bunch of times
const LEVELS_ROOM_SETTINGS = [_SettingLevel.SettingLevel.DEVICE, _SettingLevel.SettingLevel.ROOM_DEVICE, _SettingLevel.SettingLevel.ROOM_ACCOUNT, _SettingLevel.SettingLevel.ACCOUNT, _SettingLevel.SettingLevel.CONFIG];
const LEVELS_ROOM_OR_ACCOUNT = [_SettingLevel.SettingLevel.ROOM_ACCOUNT, _SettingLevel.SettingLevel.ACCOUNT];
const LEVELS_ROOM_SETTINGS_WITH_ROOM = [_SettingLevel.SettingLevel.DEVICE, _SettingLevel.SettingLevel.ROOM_DEVICE, _SettingLevel.SettingLevel.ROOM_ACCOUNT, _SettingLevel.SettingLevel.ACCOUNT, _SettingLevel.SettingLevel.CONFIG, _SettingLevel.SettingLevel.ROOM];
const LEVELS_ACCOUNT_SETTINGS = [_SettingLevel.SettingLevel.DEVICE, _SettingLevel.SettingLevel.ACCOUNT, _SettingLevel.SettingLevel.CONFIG];
const LEVELS_FEATURE = [_SettingLevel.SettingLevel.DEVICE, _SettingLevel.SettingLevel.CONFIG];
const LEVELS_DEVICE_ONLY_SETTINGS = [_SettingLevel.SettingLevel.DEVICE];
const LEVELS_DEVICE_ONLY_SETTINGS_WITH_CONFIG = [_SettingLevel.SettingLevel.DEVICE, _SettingLevel.SettingLevel.CONFIG];
const LEVELS_UI_FEATURE = [_SettingLevel.SettingLevel.CONFIG // in future we might have a .well-known level or something
];
let LabGroup;
exports.LabGroup = LabGroup;

(function (LabGroup) {
  LabGroup[LabGroup["Messaging"] = 0] = "Messaging";
  LabGroup[LabGroup["Profile"] = 1] = "Profile";
  LabGroup[LabGroup["Spaces"] = 2] = "Spaces";
  LabGroup[LabGroup["Widgets"] = 3] = "Widgets";
  LabGroup[LabGroup["Rooms"] = 4] = "Rooms";
  LabGroup[LabGroup["Moderation"] = 5] = "Moderation";
  LabGroup[LabGroup["Analytics"] = 6] = "Analytics";
  LabGroup[LabGroup["MessagePreviews"] = 7] = "MessagePreviews";
  LabGroup[LabGroup["Themes"] = 8] = "Themes";
  LabGroup[LabGroup["Encryption"] = 9] = "Encryption";
  LabGroup[LabGroup["Experimental"] = 10] = "Experimental";
  LabGroup[LabGroup["Developer"] = 11] = "Developer";
})(LabGroup || (exports.LabGroup = LabGroup = {}));

const labGroupNames = {
  [LabGroup.Messaging]: (0, _languageHandler._td)("Messaging"),
  [LabGroup.Profile]: (0, _languageHandler._td)("Profile"),
  [LabGroup.Spaces]: (0, _languageHandler._td)("Spaces"),
  [LabGroup.Widgets]: (0, _languageHandler._td)("Widgets"),
  [LabGroup.Rooms]: (0, _languageHandler._td)("Rooms"),
  [LabGroup.Moderation]: (0, _languageHandler._td)("Moderation"),
  [LabGroup.Analytics]: (0, _languageHandler._td)("Analytics"),
  [LabGroup.MessagePreviews]: (0, _languageHandler._td)("Message Previews"),
  [LabGroup.Themes]: (0, _languageHandler._td)("Themes"),
  [LabGroup.Encryption]: (0, _languageHandler._td)("Encryption"),
  [LabGroup.Experimental]: (0, _languageHandler._td)("Experimental"),
  [LabGroup.Developer]: (0, _languageHandler._td)("Developer")
};
exports.labGroupNames = labGroupNames;
const SETTINGS = {
  "feature_report_to_moderators": {
    isFeature: true,
    labsGroup: LabGroup.Moderation,
    displayName: (0, _languageHandler._td)("Report to moderators prototype. " + "In rooms that support moderation, the `report` button will let you report abuse to room moderators"),
    supportedLevels: LEVELS_FEATURE,
    default: false
  },
  "feature_dnd": {
    isFeature: true,
    labsGroup: LabGroup.Profile,
    displayName: (0, _languageHandler._td)("Show options to enable 'Do not disturb' mode"),
    supportedLevels: LEVELS_FEATURE,
    default: false
  },
  "feature_latex_maths": {
    isFeature: true,
    labsGroup: LabGroup.Messaging,
    displayName: (0, _languageHandler._td)("Render LaTeX maths in messages"),
    supportedLevels: LEVELS_FEATURE,
    default: false
  },
  "feature_communities_v2_prototypes": {
    isFeature: true,
    labsGroup: LabGroup.Spaces,
    displayName: (0, _languageHandler._td)("Communities v2 prototypes. Requires compatible homeserver. " + "Highly experimental - use with caution."),
    supportedLevels: LEVELS_FEATURE,
    default: false,
    controller: new _IncompatibleController.default("showCommunitiesInsteadOfSpaces", false, false)
  },
  "feature_pinning": {
    isFeature: true,
    labsGroup: LabGroup.Messaging,
    displayName: (0, _languageHandler._td)("Message Pinning"),
    supportedLevels: LEVELS_FEATURE,
    default: false
  },
  "feature_maximised_widgets": {
    isFeature: true,
    labsGroup: LabGroup.Widgets,
    displayName: (0, _languageHandler._td)("Maximised widgets"),
    supportedLevels: LEVELS_FEATURE,
    default: false
  },
  "feature_thread": {
    isFeature: true,
    labsGroup: LabGroup.Messaging,
    // Requires a reload as we change an option flag on the `js-sdk`
    // And the entire sync history needs to be parsed again
    controller: new _ReloadOnChangeController.default(),
    displayName: (0, _languageHandler._td)("Threaded messaging"),
    supportedLevels: LEVELS_FEATURE,
    default: false
  },
  "feature_custom_status": {
    isFeature: true,
    labsGroup: LabGroup.Profile,
    displayName: (0, _languageHandler._td)("Custom user status messages"),
    supportedLevels: LEVELS_FEATURE,
    default: false,
    controller: new _CustomStatusController.default()
  },
  "feature_custom_tags": {
    isFeature: true,
    labsGroup: LabGroup.Experimental,
    displayName: (0, _languageHandler._td)("Group & filter rooms by custom tags (refresh to apply changes)"),
    supportedLevels: LEVELS_FEATURE,
    default: false,
    controller: new _IncompatibleController.default("showCommunitiesInsteadOfSpaces", false, false)
  },
  "feature_state_counters": {
    isFeature: true,
    labsGroup: LabGroup.Rooms,
    displayName: (0, _languageHandler._td)("Render simple counters in room header"),
    supportedLevels: LEVELS_FEATURE,
    default: false
  },
  "feature_many_integration_managers": {
    isFeature: true,
    labsGroup: LabGroup.Experimental,
    displayName: (0, _languageHandler._td)("Multiple integration managers (requires manual setup)"),
    supportedLevels: LEVELS_FEATURE,
    default: false
  },
  "feature_mjolnir": {
    isFeature: true,
    labsGroup: LabGroup.Moderation,
    displayName: (0, _languageHandler._td)("Try out new ways to ignore people (experimental)"),
    supportedLevels: LEVELS_FEATURE,
    default: false
  },
  "feature_custom_themes": {
    isFeature: true,
    labsGroup: LabGroup.Themes,
    displayName: (0, _languageHandler._td)("Support adding custom themes"),
    supportedLevels: LEVELS_FEATURE,
    default: false
  },
  "feature_roomlist_preview_reactions_dms": {
    isFeature: true,
    labsGroup: LabGroup.MessagePreviews,
    displayName: (0, _languageHandler._td)("Show message previews for reactions in DMs"),
    supportedLevels: LEVELS_FEATURE,
    default: false,
    // this option is a subset of `feature_roomlist_preview_reactions_all` so disable it when that one is enabled
    controller: new _IncompatibleController.default("feature_roomlist_preview_reactions_all")
  },
  "feature_roomlist_preview_reactions_all": {
    isFeature: true,
    labsGroup: LabGroup.MessagePreviews,
    displayName: (0, _languageHandler._td)("Show message previews for reactions in all rooms"),
    supportedLevels: LEVELS_FEATURE,
    default: false
  },
  "feature_dehydration": {
    isFeature: true,
    labsGroup: LabGroup.Encryption,
    displayName: (0, _languageHandler._td)("Offline encrypted messaging using dehydrated devices"),
    supportedLevels: LEVELS_FEATURE,
    default: false
  },
  "feature_pseudonymous_analytics_opt_in": {
    isFeature: true,
    labsGroup: LabGroup.Analytics,
    supportedLevels: LEVELS_FEATURE,
    displayName: (0, _languageHandler._td)('Send pseudonymous analytics data'),
    default: false,
    controller: new _PseudonymousAnalyticsController.default()
  },
  "feature_polls": {
    isFeature: true,
    labsGroup: LabGroup.Messaging,
    supportedLevels: LEVELS_FEATURE,
    displayName: (0, _languageHandler._td)("Polls (under active development)"),
    default: false
  },
  "doNotDisturb": {
    supportedLevels: [_SettingLevel.SettingLevel.DEVICE],
    default: false
  },
  "mjolnirRooms": {
    supportedLevels: [_SettingLevel.SettingLevel.ACCOUNT],
    default: []
  },
  "mjolnirPersonalRoom": {
    supportedLevels: [_SettingLevel.SettingLevel.ACCOUNT],
    default: null
  },
  "feature_bridge_state": {
    isFeature: true,
    labsGroup: LabGroup.Rooms,
    supportedLevels: LEVELS_FEATURE,
    displayName: (0, _languageHandler._td)("Show info about bridges in room settings"),
    default: false
  },
  "feature_new_layout_switcher": {
    isFeature: true,
    labsGroup: LabGroup.Messaging,
    supportedLevels: LEVELS_FEATURE,
    displayName: (0, _languageHandler._td)("New layout switcher (with message bubbles)"),
    default: false,
    controller: new _NewLayoutSwitcherController.default()
  },
  "feature_spaces_metaspaces": {
    isFeature: true,
    labsGroup: LabGroup.Spaces,
    supportedLevels: LEVELS_FEATURE,
    displayName: (0, _languageHandler._td)("Meta Spaces"),
    default: false,
    controller: new _OrderedMultiController.OrderedMultiController([new _IncompatibleController.default("showCommunitiesInsteadOfSpaces"), new _ReloadOnChangeController.default()])
  },
  "RoomList.backgroundImage": {
    supportedLevels: LEVELS_ACCOUNT_SETTINGS,
    default: null
  },
  "feature_hidden_read_receipts": {
    supportedLevels: LEVELS_FEATURE,
    displayName: (0, _languageHandler._td)("Don't send read receipts"),
    default: false
  },
  "baseFontSize": {
    displayName: (0, _languageHandler._td)("Font size"),
    supportedLevels: LEVELS_ACCOUNT_SETTINGS,
    default: 10,
    controller: new _FontSizeController.default()
  },
  "useCustomFontSize": {
    displayName: (0, _languageHandler._td)("Use custom size"),
    supportedLevels: LEVELS_ACCOUNT_SETTINGS,
    default: false
  },
  "MessageComposerInput.suggestEmoji": {
    supportedLevels: LEVELS_ACCOUNT_SETTINGS,
    displayName: (0, _languageHandler._td)('Enable Emoji suggestions while typing'),
    default: true,
    invertedSettingName: 'MessageComposerInput.dontSuggestEmoji'
  },
  "MessageComposerInput.showStickersButton": {
    supportedLevels: LEVELS_ACCOUNT_SETTINGS,
    displayName: (0, _languageHandler._td)('Show stickers button'),
    default: true
  },
  // TODO: Wire up appropriately to UI (FTUE notifications)
  "Notifications.alwaysShowBadgeCounts": {
    supportedLevels: LEVELS_ROOM_OR_ACCOUNT,
    default: false
  },
  "useCompactLayout": {
    supportedLevels: LEVELS_DEVICE_ONLY_SETTINGS,
    displayName: (0, _languageHandler._td)("Use a more compact 'Modern' layout"),
    default: false
  },
  "showRedactions": {
    supportedLevels: LEVELS_ROOM_SETTINGS_WITH_ROOM,
    displayName: (0, _languageHandler._td)('Show a placeholder for removed messages'),
    default: true,
    invertedSettingName: 'hideRedactions'
  },
  "showJoinLeaves": {
    supportedLevels: LEVELS_ROOM_SETTINGS_WITH_ROOM,
    displayName: (0, _languageHandler._td)('Show join/leave messages (invites/kicks/bans unaffected)'),
    default: true,
    invertedSettingName: 'hideJoinLeaves'
  },
  "showAvatarChanges": {
    supportedLevels: LEVELS_ROOM_SETTINGS_WITH_ROOM,
    displayName: (0, _languageHandler._td)('Show avatar changes'),
    default: true,
    invertedSettingName: 'hideAvatarChanges'
  },
  "showDisplaynameChanges": {
    supportedLevels: LEVELS_ROOM_SETTINGS_WITH_ROOM,
    displayName: (0, _languageHandler._td)('Show display name changes'),
    default: true,
    invertedSettingName: 'hideDisplaynameChanges'
  },
  "showReadReceipts": {
    supportedLevels: LEVELS_ROOM_SETTINGS,
    displayName: (0, _languageHandler._td)('Show read receipts sent by other users'),
    default: true,
    invertedSettingName: 'hideReadReceipts'
  },
  "showTwelveHourTimestamps": {
    supportedLevels: LEVELS_ACCOUNT_SETTINGS,
    displayName: (0, _languageHandler._td)('Show timestamps in 12 hour format (e.g. 2:30pm)'),
    default: false
  },
  "alwaysShowTimestamps": {
    supportedLevels: LEVELS_ACCOUNT_SETTINGS,
    displayName: (0, _languageHandler._td)('Always show message timestamps'),
    default: false
  },
  "autoplayGifs": {
    supportedLevels: LEVELS_ACCOUNT_SETTINGS,
    displayName: (0, _languageHandler._td)('Autoplay GIFs'),
    default: false
  },
  "autoplayVideo": {
    supportedLevels: LEVELS_ACCOUNT_SETTINGS,
    displayName: (0, _languageHandler._td)('Autoplay videos'),
    default: false
  },
  "enableSyntaxHighlightLanguageDetection": {
    supportedLevels: LEVELS_ACCOUNT_SETTINGS,
    displayName: (0, _languageHandler._td)('Enable automatic language detection for syntax highlighting'),
    default: false
  },
  "expandCodeByDefault": {
    supportedLevels: LEVELS_ACCOUNT_SETTINGS,
    displayName: (0, _languageHandler._td)('Expand code blocks by default'),
    default: false
  },
  "showCodeLineNumbers": {
    supportedLevels: LEVELS_ACCOUNT_SETTINGS,
    displayName: (0, _languageHandler._td)('Show line numbers in code blocks'),
    default: true
  },
  "scrollToBottomOnMessageSent": {
    supportedLevels: LEVELS_ACCOUNT_SETTINGS,
    displayName: (0, _languageHandler._td)('Jump to the bottom of the timeline when you send a message'),
    default: true
  },
  "Pill.shouldShowPillAvatar": {
    supportedLevels: LEVELS_ACCOUNT_SETTINGS,
    displayName: (0, _languageHandler._td)('Show avatars in user and room mentions'),
    default: true,
    invertedSettingName: 'Pill.shouldHidePillAvatar'
  },
  "TextualBody.enableBigEmoji": {
    supportedLevels: LEVELS_ACCOUNT_SETTINGS,
    displayName: (0, _languageHandler._td)('Enable big emoji in chat'),
    default: true,
    invertedSettingName: 'TextualBody.disableBigEmoji'
  },
  "MessageComposerInput.isRichTextEnabled": {
    supportedLevels: LEVELS_ACCOUNT_SETTINGS,
    default: false
  },
  "MessageComposer.showFormatting": {
    supportedLevels: LEVELS_ACCOUNT_SETTINGS,
    default: false
  },
  "sendTypingNotifications": {
    supportedLevels: LEVELS_ACCOUNT_SETTINGS,
    displayName: (0, _languageHandler._td)("Send typing notifications"),
    default: true,
    invertedSettingName: 'dontSendTypingNotifications'
  },
  "showTypingNotifications": {
    supportedLevels: LEVELS_ACCOUNT_SETTINGS,
    displayName: (0, _languageHandler._td)("Show typing notifications"),
    default: true
  },
  "ctrlFForSearch": {
    supportedLevels: LEVELS_ACCOUNT_SETTINGS,
    displayName: _Keyboard.isMac ? (0, _languageHandler._td)("Use Command + F to search timeline") : (0, _languageHandler._td)("Use Ctrl + F to search timeline"),
    default: false
  },
  "MessageComposerInput.ctrlEnterToSend": {
    supportedLevels: LEVELS_ACCOUNT_SETTINGS,
    displayName: _Keyboard.isMac ? (0, _languageHandler._td)("Use Command + Enter to send a message") : (0, _languageHandler._td)("Use Ctrl + Enter to send a message"),
    default: false
  },
  "MessageComposerInput.surroundWith": {
    supportedLevels: LEVELS_ACCOUNT_SETTINGS,
    displayName: (0, _languageHandler._td)("Surround selected text when typing special characters"),
    default: false
  },
  "MessageComposerInput.autoReplaceEmoji": {
    supportedLevels: LEVELS_ACCOUNT_SETTINGS,
    displayName: (0, _languageHandler._td)('Automatically replace plain text Emoji'),
    default: false
  },
  "VideoView.flipVideoHorizontally": {
    supportedLevels: LEVELS_ACCOUNT_SETTINGS,
    displayName: (0, _languageHandler._td)('Mirror local video feed'),
    default: false
  },
  "TagPanel.enableTagPanel": {
    supportedLevels: LEVELS_ACCOUNT_SETTINGS,
    displayName: (0, _languageHandler._td)('Enable Community Filter Panel'),
    default: true,
    invertedSettingName: 'TagPanel.disableTagPanel',
    // We force the value to true because the invertedSettingName causes it to flip
    controller: new _UIFeatureController.default(_UIFeature.UIFeature.Communities, true)
  },
  "theme": {
    supportedLevels: LEVELS_ACCOUNT_SETTINGS,
    default: "light",
    controller: new _ThemeController.default()
  },
  "custom_themes": {
    supportedLevels: LEVELS_ACCOUNT_SETTINGS,
    default: []
  },
  "use_system_theme": {
    supportedLevels: LEVELS_DEVICE_ONLY_SETTINGS,
    default: true,
    displayName: (0, _languageHandler._td)("Match system theme")
  },
  "useSystemFont": {
    supportedLevels: LEVELS_DEVICE_ONLY_SETTINGS,
    default: false,
    displayName: (0, _languageHandler._td)("Use a system font"),
    controller: new _UseSystemFontController.default()
  },
  "systemFont": {
    supportedLevels: LEVELS_DEVICE_ONLY_SETTINGS,
    default: "",
    displayName: (0, _languageHandler._td)("System font name"),
    controller: new _SystemFontController.default()
  },
  "webRtcAllowPeerToPeer": {
    supportedLevels: LEVELS_DEVICE_ONLY_SETTINGS_WITH_CONFIG,
    displayName: (0, _languageHandler._td)("Allow Peer-to-Peer for 1:1 calls " + "(if you enable this, the other party might be able to see your IP address)"),
    default: true,
    invertedSettingName: 'webRtcForceTURN'
  },
  "webrtc_audiooutput": {
    supportedLevels: LEVELS_DEVICE_ONLY_SETTINGS,
    default: null
  },
  "webrtc_audioinput": {
    supportedLevels: LEVELS_DEVICE_ONLY_SETTINGS,
    default: null
  },
  "webrtc_videoinput": {
    supportedLevels: LEVELS_DEVICE_ONLY_SETTINGS,
    default: null
  },
  "language": {
    supportedLevels: LEVELS_DEVICE_ONLY_SETTINGS_WITH_CONFIG,
    default: "en"
  },
  "breadcrumb_rooms": {
    // not really a setting
    supportedLevels: [_SettingLevel.SettingLevel.ACCOUNT],
    default: []
  },
  "recent_emoji": {
    // not really a setting
    supportedLevels: [_SettingLevel.SettingLevel.ACCOUNT],
    default: []
  },
  "room_directory_servers": {
    supportedLevels: [_SettingLevel.SettingLevel.ACCOUNT],
    default: []
  },
  "integrationProvisioning": {
    supportedLevels: [_SettingLevel.SettingLevel.ACCOUNT],
    default: true
  },
  "allowedWidgets": {
    supportedLevels: [_SettingLevel.SettingLevel.ROOM_ACCOUNT, _SettingLevel.SettingLevel.ROOM_DEVICE],
    supportedLevelsAreOrdered: true,
    default: {} // none allowed

  },
  "analyticsOptIn": {
    supportedLevels: LEVELS_DEVICE_ONLY_SETTINGS_WITH_CONFIG,
    displayName: (0, _languageHandler._td)('Send analytics data'),
    default: false
  },
  "showCookieBar": {
    supportedLevels: LEVELS_DEVICE_ONLY_SETTINGS_WITH_CONFIG,
    default: true
  },
  "autocompleteDelay": {
    supportedLevels: LEVELS_DEVICE_ONLY_SETTINGS_WITH_CONFIG,
    default: 200
  },
  "readMarkerInViewThresholdMs": {
    supportedLevels: LEVELS_DEVICE_ONLY_SETTINGS_WITH_CONFIG,
    default: 3000
  },
  "readMarkerOutOfViewThresholdMs": {
    supportedLevels: LEVELS_DEVICE_ONLY_SETTINGS_WITH_CONFIG,
    default: 30000
  },
  "blacklistUnverifiedDevices": {
    // We specifically want to have room-device > device so that users may set a device default
    // with a per-room override.
    supportedLevels: [_SettingLevel.SettingLevel.ROOM_DEVICE, _SettingLevel.SettingLevel.DEVICE],
    supportedLevelsAreOrdered: true,
    displayName: {
      "default": (0, _languageHandler._td)('Never send encrypted messages to unverified sessions from this session'),
      "room-device": (0, _languageHandler._td)('Never send encrypted messages to unverified sessions in this room from this session')
    },
    default: false,
    controller: new _UIFeatureController.default(_UIFeature.UIFeature.AdvancedEncryption)
  },
  "urlPreviewsEnabled": {
    supportedLevels: LEVELS_ROOM_SETTINGS_WITH_ROOM,
    displayName: {
      "default": (0, _languageHandler._td)('Enable inline URL previews by default'),
      "room-account": (0, _languageHandler._td)("Enable URL previews for this room (only affects you)"),
      "room": (0, _languageHandler._td)("Enable URL previews by default for participants in this room")
    },
    default: true,
    controller: new _UIFeatureController.default(_UIFeature.UIFeature.URLPreviews)
  },
  "urlPreviewsEnabled_e2ee": {
    supportedLevels: [_SettingLevel.SettingLevel.ROOM_DEVICE, _SettingLevel.SettingLevel.ROOM_ACCOUNT],
    displayName: {
      "room-account": (0, _languageHandler._td)("Enable URL previews for this room (only affects you)")
    },
    default: false,
    controller: new _UIFeatureController.default(_UIFeature.UIFeature.URLPreviews)
  },
  "notificationsEnabled": {
    supportedLevels: LEVELS_DEVICE_ONLY_SETTINGS,
    default: false,
    controller: new _NotificationControllers.NotificationsEnabledController()
  },
  "notificationSound": {
    supportedLevels: LEVELS_ROOM_OR_ACCOUNT,
    default: false
  },
  "notificationBodyEnabled": {
    supportedLevels: LEVELS_DEVICE_ONLY_SETTINGS,
    default: true,
    controller: new _NotificationControllers.NotificationBodyEnabledController()
  },
  "audioNotificationsEnabled": {
    supportedLevels: LEVELS_DEVICE_ONLY_SETTINGS,
    default: true
  },
  "enableWidgetScreenshots": {
    supportedLevels: LEVELS_ACCOUNT_SETTINGS,
    displayName: (0, _languageHandler._td)('Enable widget screenshots on supported widgets'),
    default: false
  },
  "promptBeforeInviteUnknownUsers": {
    supportedLevels: LEVELS_ACCOUNT_SETTINGS,
    displayName: (0, _languageHandler._td)('Prompt before sending invites to potentially invalid matrix IDs'),
    default: true
  },
  "showDeveloperTools": {
    supportedLevels: LEVELS_ACCOUNT_SETTINGS,
    displayName: (0, _languageHandler._td)('Show developer tools'),
    default: false
  },
  "widgetOpenIDPermissions": {
    supportedLevels: LEVELS_DEVICE_ONLY_SETTINGS,
    default: {
      allow: [],
      deny: []
    }
  },
  // TODO: Remove setting: https://github.com/vector-im/element-web/issues/14373
  "RoomList.orderAlphabetically": {
    supportedLevels: LEVELS_ACCOUNT_SETTINGS,
    displayName: (0, _languageHandler._td)("Order rooms by name"),
    default: false
  },
  // TODO: Remove setting: https://github.com/vector-im/element-web/issues/14373
  "RoomList.orderByImportance": {
    supportedLevels: LEVELS_ACCOUNT_SETTINGS,
    displayName: (0, _languageHandler._td)("Show rooms with unread notifications first"),
    default: true
  },
  "breadcrumbs": {
    supportedLevels: LEVELS_ACCOUNT_SETTINGS,
    displayName: (0, _languageHandler._td)("Show shortcuts to recently viewed rooms above the room list"),
    default: true
  },
  "showHiddenEventsInTimeline": {
    displayName: (0, _languageHandler._td)("Show hidden events in timeline"),
    supportedLevels: LEVELS_DEVICE_ONLY_SETTINGS,
    default: false
  },
  "lowBandwidth": {
    supportedLevels: LEVELS_DEVICE_ONLY_SETTINGS_WITH_CONFIG,
    displayName: (0, _languageHandler._td)('Low bandwidth mode (requires compatible homeserver)'),
    default: false,
    controller: new _ReloadOnChangeController.default()
  },
  "fallbackICEServerAllowed": {
    supportedLevels: LEVELS_DEVICE_ONLY_SETTINGS,
    displayName: (0, _languageHandler._td)("Allow fallback call assist server turn.matrix.org when your homeserver " + "does not offer one (your IP address would be shared during a call)"),
    // This is a tri-state value, where `null` means "prompt the user".
    default: null
  },
  "showImages": {
    supportedLevels: LEVELS_ACCOUNT_SETTINGS,
    displayName: (0, _languageHandler._td)("Show previews/thumbnails for images"),
    default: true
  },
  "showRightPanelInRoom": {
    supportedLevels: LEVELS_DEVICE_ONLY_SETTINGS,
    default: false
  },
  "showRightPanelInGroup": {
    supportedLevels: LEVELS_DEVICE_ONLY_SETTINGS,
    default: false
  },
  "lastRightPanelPhaseForRoom": {
    supportedLevels: LEVELS_DEVICE_ONLY_SETTINGS,
    default: _RightPanelStorePhases.RightPanelPhases.RoomSummary
  },
  "lastRightPanelPhaseForGroup": {
    supportedLevels: LEVELS_DEVICE_ONLY_SETTINGS,
    default: _RightPanelStorePhases.RightPanelPhases.GroupMemberList
  },
  "enableEventIndexing": {
    supportedLevels: LEVELS_DEVICE_ONLY_SETTINGS,
    displayName: (0, _languageHandler._td)("Enable message search in encrypted rooms"),
    default: true
  },
  "crawlerSleepTime": {
    supportedLevels: LEVELS_DEVICE_ONLY_SETTINGS,
    displayName: (0, _languageHandler._td)("How fast should messages be downloaded."),
    default: 3000
  },
  "showCallButtonsInComposer": {
    // Dev note: This is no longer "in composer" but is instead "in room header".
    // TODO: Rename with settings v3
    supportedLevels: LEVELS_DEVICE_ONLY_SETTINGS_WITH_CONFIG,
    default: true,
    controller: new _UIFeatureController.default(_UIFeature.UIFeature.Voip)
  },
  "e2ee.manuallyVerifyAllSessions": {
    supportedLevels: LEVELS_DEVICE_ONLY_SETTINGS,
    displayName: (0, _languageHandler._td)("Manually verify all remote sessions"),
    default: false,
    controller: new _OrderedMultiController.OrderedMultiController([// Apply the feature controller first to ensure that the setting doesn't
    // show up and can't be toggled. PushToMatrixClientController doesn't
    // do any overrides anyways.
    new _UIFeatureController.default(_UIFeature.UIFeature.AdvancedEncryption), new _PushToMatrixClientController.default(_client.MatrixClient.prototype.setCryptoTrustCrossSignedDevices, true)])
  },
  "ircDisplayNameWidth": {
    // We specifically want to have room-device > device so that users may set a device default
    // with a per-room override.
    supportedLevels: [_SettingLevel.SettingLevel.ROOM_DEVICE, _SettingLevel.SettingLevel.DEVICE],
    supportedLevelsAreOrdered: true,
    displayName: (0, _languageHandler._td)("IRC display name width"),
    default: 80
  },
  "layout": {
    supportedLevels: LEVELS_ACCOUNT_SETTINGS,
    default: _Layout.Layout.Group
  },
  "Images.size": {
    supportedLevels: LEVELS_ACCOUNT_SETTINGS,
    default: _ImageSize.ImageSize.Normal
  },
  "showChatEffects": {
    supportedLevels: LEVELS_ROOM_SETTINGS_WITH_ROOM,
    displayName: (0, _languageHandler._td)("Show chat effects (animations when receiving e.g. confetti)"),
    default: true,
    controller: new _ReducedMotionController.default()
  },
  "Performance.addSendMessageTimingMetadata": {
    supportedLevels: [_SettingLevel.SettingLevel.CONFIG],
    default: false
  },
  "Widgets.pinned": {
    // deprecated
    supportedLevels: LEVELS_ROOM_OR_ACCOUNT,
    default: {}
  },
  "Widgets.layout": {
    supportedLevels: LEVELS_ROOM_OR_ACCOUNT,
    default: {}
  },
  "Widgets.leftPanel": {
    supportedLevels: LEVELS_ACCOUNT_SETTINGS,
    default: null
  },
  "Spaces.allRoomsInHome": {
    displayName: (0, _languageHandler._td)("Show all rooms in Home"),
    description: (0, _languageHandler._td)("All rooms you're in will appear in Home."),
    supportedLevels: LEVELS_ACCOUNT_SETTINGS,
    default: false,
    controller: new _IncompatibleController.default("showCommunitiesInsteadOfSpaces", null)
  },
  "Spaces.enabledMetaSpaces": {
    supportedLevels: LEVELS_ACCOUNT_SETTINGS,
    default: {
      [_spaces.MetaSpace.Home]: true
    },
    controller: new _IncompatibleController.default("feature_spaces_metaspaces", {
      [_spaces.MetaSpace.Home]: true
    }, false)
  },
  "showCommunitiesInsteadOfSpaces": {
    displayName: (0, _languageHandler._td)("Display Communities instead of Spaces"),
    description: (0, _languageHandler._td)("Temporarily show communities instead of Spaces for this session. " + "Support for this will be removed in the near future. This will reload Element."),
    supportedLevels: LEVELS_DEVICE_ONLY_SETTINGS_WITH_CONFIG,
    default: false,
    controller: new _ReloadOnChangeController.default()
  },
  "developerMode": {
    displayName: (0, _languageHandler._td)("Developer mode"),
    supportedLevels: LEVELS_ACCOUNT_SETTINGS,
    default: false
  },
  "automaticErrorReporting": {
    displayName: (0, _languageHandler._td)("Automatically send debug logs on any error"),
    supportedLevels: LEVELS_ACCOUNT_SETTINGS,
    default: false,
    controller: new _ReloadOnChangeController.default()
  },
  [_UIFeature.UIFeature.RoomHistorySettings]: {
    supportedLevels: LEVELS_UI_FEATURE,
    default: true
  },
  [_UIFeature.UIFeature.AdvancedEncryption]: {
    supportedLevels: LEVELS_UI_FEATURE,
    default: true
  },
  [_UIFeature.UIFeature.URLPreviews]: {
    supportedLevels: LEVELS_UI_FEATURE,
    default: true
  },
  [_UIFeature.UIFeature.Widgets]: {
    supportedLevels: LEVELS_UI_FEATURE,
    default: true
  },
  [_UIFeature.UIFeature.Voip]: {
    supportedLevels: LEVELS_UI_FEATURE,
    default: true
  },
  [_UIFeature.UIFeature.Feedback]: {
    supportedLevels: LEVELS_UI_FEATURE,
    default: true
  },
  [_UIFeature.UIFeature.Registration]: {
    supportedLevels: LEVELS_UI_FEATURE,
    default: true
  },
  [_UIFeature.UIFeature.PasswordReset]: {
    supportedLevels: LEVELS_UI_FEATURE,
    default: true
  },
  [_UIFeature.UIFeature.Deactivate]: {
    supportedLevels: LEVELS_UI_FEATURE,
    default: true
  },
  [_UIFeature.UIFeature.ShareQRCode]: {
    supportedLevels: LEVELS_UI_FEATURE,
    default: true
  },
  [_UIFeature.UIFeature.ShareSocial]: {
    supportedLevels: LEVELS_UI_FEATURE,
    default: true
  },
  [_UIFeature.UIFeature.IdentityServer]: {
    supportedLevels: LEVELS_UI_FEATURE,
    default: true,
    // Identity server (discovery) settings make no sense if 3PIDs in general are hidden
    controller: new _UIFeatureController.default(_UIFeature.UIFeature.ThirdPartyID)
  },
  [_UIFeature.UIFeature.ThirdPartyID]: {
    supportedLevels: LEVELS_UI_FEATURE,
    default: true
  },
  [_UIFeature.UIFeature.Flair]: {
    supportedLevels: LEVELS_UI_FEATURE,
    default: true,
    // Disable Flair when Communities are disabled
    controller: new _UIFeatureController.default(_UIFeature.UIFeature.Communities)
  },
  [_UIFeature.UIFeature.Communities]: {
    supportedLevels: LEVELS_UI_FEATURE,
    default: true,
    controller: new _IncompatibleController.default("showCommunitiesInsteadOfSpaces", false, false)
  },
  [_UIFeature.UIFeature.AdvancedSettings]: {
    supportedLevels: LEVELS_UI_FEATURE,
    default: true
  }
};
exports.SETTINGS = SETTINGS;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,