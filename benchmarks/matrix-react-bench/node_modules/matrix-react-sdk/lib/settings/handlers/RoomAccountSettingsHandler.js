"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _MatrixClientPeg = require("../../MatrixClientPeg");

var _MatrixClientBackedSettingsHandler = _interopRequireDefault(require("./MatrixClientBackedSettingsHandler"));

var _objects = require("../../utils/objects");

var _SettingLevel = require("../SettingLevel");

/*
Copyright 2017 Travis Ralston
Copyright 2019, 2020 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const ALLOWED_WIDGETS_EVENT_TYPE = "im.vector.setting.allowed_widgets";
/**
 * Gets and sets settings at the "room-account" level for the current user.
 */

class RoomAccountSettingsHandler extends _MatrixClientBackedSettingsHandler.default {
  constructor(watchers) {
    super();
    this.watchers = watchers;
    (0, _defineProperty2.default)(this, "onAccountData", (event, room, prevEvent) => {
      const roomId = room.roomId;

      if (event.getType() === "org.matrix.room.preview_urls") {
        let val = event.getContent()['disable'];

        if (typeof val !== "boolean") {
          val = null;
        } else {
          val = !val;
        }

        this.watchers.notifyUpdate("urlPreviewsEnabled", roomId, _SettingLevel.SettingLevel.ROOM_ACCOUNT, val);
      } else if (event.getType() === "im.vector.web.settings") {
        // Figure out what changed and fire those updates
        const prevContent = prevEvent ? prevEvent.getContent() : {};
        const changedSettings = (0, _objects.objectKeyChanges)(prevContent, event.getContent());

        for (const settingName of changedSettings) {
          const val = event.getContent()[settingName];
          this.watchers.notifyUpdate(settingName, roomId, _SettingLevel.SettingLevel.ROOM_ACCOUNT, val);
        }
      } else if (event.getType() === ALLOWED_WIDGETS_EVENT_TYPE) {
        this.watchers.notifyUpdate("allowedWidgets", roomId, _SettingLevel.SettingLevel.ROOM_ACCOUNT, event.getContent());
      }
    });
  }

  initMatrixClient(oldClient, newClient) {
    if (oldClient) {
      oldClient.removeListener("Room.accountData", this.onAccountData);
    }

    newClient.on("Room.accountData", this.onAccountData);
  }

  getValue(settingName, roomId) {
    // Special case URL previews
    if (settingName === "urlPreviewsEnabled") {
      const content = this.getSettings(roomId, "org.matrix.room.preview_urls") || {}; // Check to make sure that we actually got a boolean

      if (typeof content['disable'] !== "boolean") return null;
      return !content['disable'];
    } // Special case allowed widgets


    if (settingName === "allowedWidgets") {
      return this.getSettings(roomId, ALLOWED_WIDGETS_EVENT_TYPE);
    }

    const settings = this.getSettings(roomId) || {};
    return settings[settingName];
  }

  async setValue(settingName, roomId, newValue) {
    // Special case URL previews
    if (settingName === "urlPreviewsEnabled") {
      const content = this.getSettings(roomId, "org.matrix.room.preview_urls") || {};
      content['disable'] = !newValue;
      await _MatrixClientPeg.MatrixClientPeg.get().setRoomAccountData(roomId, "org.matrix.room.preview_urls", content);
      return;
    } // Special case allowed widgets


    if (settingName === "allowedWidgets") {
      await _MatrixClientPeg.MatrixClientPeg.get().setRoomAccountData(roomId, ALLOWED_WIDGETS_EVENT_TYPE, newValue);
      return;
    }

    const content = this.getSettings(roomId) || {};
    content[settingName] = newValue;
    await _MatrixClientPeg.MatrixClientPeg.get().setRoomAccountData(roomId, "im.vector.web.settings", content);
  }

  canSetValue(settingName, roomId) {
    const room = _MatrixClientPeg.MatrixClientPeg.get().getRoom(roomId); // If they have the room, they can set their own account data


    return room !== undefined && room !== null;
  }

  isSupported() {
    const cli = _MatrixClientPeg.MatrixClientPeg.get();

    return cli !== undefined && cli !== null && !cli.isGuest();
  }

  getSettings(roomId, eventType = "im.vector.web.settings") {
    // TODO: [TS] Type return
    const room = _MatrixClientPeg.MatrixClientPeg.get().getRoom(roomId);

    if (!room) return null;
    const event = room.getAccountData(eventType);
    if (!event || !event.getContent()) return null;
    return (0, _objects.objectClone)(event.getContent()); // clone to prevent mutation
  }

}

exports.default = RoomAccountSettingsHandler;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,