"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _MatrixClientPeg = require("../../MatrixClientPeg");

var _MatrixClientBackedSettingsHandler = _interopRequireDefault(require("./MatrixClientBackedSettingsHandler"));

var _objects = require("../../utils/objects");

var _SettingLevel = require("../SettingLevel");

/*
Copyright 2017 Travis Ralston
Copyright 2019, 2020 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const BREADCRUMBS_LEGACY_EVENT_TYPE = "im.vector.riot.breadcrumb_rooms";
const BREADCRUMBS_EVENT_TYPE = "im.vector.setting.breadcrumbs";
const BREADCRUMBS_EVENT_TYPES = [BREADCRUMBS_LEGACY_EVENT_TYPE, BREADCRUMBS_EVENT_TYPE];
const RECENT_EMOJI_EVENT_TYPE = "io.element.recent_emoji";
const INTEG_PROVISIONING_EVENT_TYPE = "im.vector.setting.integration_provisioning";
/**
 * Gets and sets settings at the "account" level for the current user.
 * This handler does not make use of the roomId parameter.
 */

class AccountSettingsHandler extends _MatrixClientBackedSettingsHandler.default {
  constructor(watchers) {
    super();
    this.watchers = watchers;
    (0, _defineProperty2.default)(this, "onAccountData", (event, prevEvent) => {
      if (event.getType() === "org.matrix.preview_urls") {
        let val = event.getContent()['disable'];

        if (typeof val !== "boolean") {
          val = null;
        } else {
          val = !val;
        }

        this.watchers.notifyUpdate("urlPreviewsEnabled", null, _SettingLevel.SettingLevel.ACCOUNT, val);
      } else if (event.getType() === "im.vector.web.settings") {
        // Figure out what changed and fire those updates
        const prevContent = prevEvent ? prevEvent.getContent() : {};
        const changedSettings = (0, _objects.objectKeyChanges)(prevContent, event.getContent());

        for (const settingName of changedSettings) {
          const val = event.getContent()[settingName];
          this.watchers.notifyUpdate(settingName, null, _SettingLevel.SettingLevel.ACCOUNT, val);
        }
      } else if (BREADCRUMBS_EVENT_TYPES.includes(event.getType())) {
        this.notifyBreadcrumbsUpdate(event);
      } else if (event.getType() === INTEG_PROVISIONING_EVENT_TYPE) {
        const val = event.getContent()['enabled'];
        this.watchers.notifyUpdate("integrationProvisioning", null, _SettingLevel.SettingLevel.ACCOUNT, val);
      } else if (event.getType() === RECENT_EMOJI_EVENT_TYPE) {
        const val = event.getContent()['enabled'];
        this.watchers.notifyUpdate("recent_emoji", null, _SettingLevel.SettingLevel.ACCOUNT, val);
      }
    });
  }

  initMatrixClient(oldClient, newClient) {
    if (oldClient) {
      oldClient.removeListener("accountData", this.onAccountData);
    }

    newClient.on("accountData", this.onAccountData);
  }

  getValue(settingName, roomId) {
    // Special case URL previews
    if (settingName === "urlPreviewsEnabled") {
      const content = this.getSettings("org.matrix.preview_urls") || {}; // Check to make sure that we actually got a boolean

      if (typeof content['disable'] !== "boolean") return null;
      return !content['disable'];
    } // Special case for breadcrumbs


    if (settingName === "breadcrumb_rooms") {
      let content = this.getSettings(BREADCRUMBS_EVENT_TYPE);

      if (!content || !content['recent_rooms']) {
        content = this.getSettings(BREADCRUMBS_LEGACY_EVENT_TYPE); // This is a bit of a hack, but it makes things slightly easier

        if (content) content['recent_rooms'] = content['rooms'];
      }

      return content && content['recent_rooms'] ? content['recent_rooms'] : [];
    } // Special case recent emoji


    if (settingName === "recent_emoji") {
      const content = this.getSettings(RECENT_EMOJI_EVENT_TYPE);
      return content ? content["recent_emoji"] : null;
    } // Special case integration manager provisioning


    if (settingName === "integrationProvisioning") {
      const content = this.getSettings(INTEG_PROVISIONING_EVENT_TYPE);
      return content ? content['enabled'] : null;
    } // Special case for autoplaying videos and GIFs


    if (["autoplayGifs", "autoplayVideo"].includes(settingName)) {
      const settings = this.getSettings() || {};
      const value = settings[settingName]; // Fallback to old combined setting

      if (value === null || value === undefined) {
        const oldCombinedValue = settings["autoplayGifsAndVideos"]; // Write, so that we can remove this in the future

        if (oldCombinedValue !== null && oldCombinedValue !== undefined) {
          this.setValue("autoplayGifs", roomId, oldCombinedValue);
          this.setValue("autoplayVideo", roomId, oldCombinedValue);
        }

        return oldCombinedValue;
      }

      return value;
    }

    const settings = this.getSettings() || {};
    let preferredValue = settings[settingName];

    if (preferredValue === null || preferredValue === undefined) {
      // Honour the old setting on read only
      if (settingName === "hideAvatarChanges" || settingName === "hideDisplaynameChanges") {
        preferredValue = settings["hideAvatarDisplaynameChanges"];
      }
    }

    return preferredValue;
  }

  async setValue(settingName, roomId, newValue) {
    // Special case URL previews
    if (settingName === "urlPreviewsEnabled") {
      const content = this.getSettings("org.matrix.preview_urls") || {};
      content['disable'] = !newValue;
      await _MatrixClientPeg.MatrixClientPeg.get().setAccountData("org.matrix.preview_urls", content);
      return;
    } // Special case for breadcrumbs


    if (settingName === "breadcrumb_rooms") {
      // We read the value first just to make sure we preserve whatever random keys might be present.
      let content = this.getSettings(BREADCRUMBS_EVENT_TYPE);

      if (!content || !content['recent_rooms']) {
        content = this.getSettings(BREADCRUMBS_LEGACY_EVENT_TYPE);
      }

      if (!content) content = {}; // If we still don't have content, make some

      content['recent_rooms'] = newValue;
      await _MatrixClientPeg.MatrixClientPeg.get().setAccountData(BREADCRUMBS_EVENT_TYPE, content);
      return;
    } // Special case recent emoji


    if (settingName === "recent_emoji") {
      const content = this.getSettings(RECENT_EMOJI_EVENT_TYPE) || {};
      content["recent_emoji"] = newValue;
      await _MatrixClientPeg.MatrixClientPeg.get().setAccountData(RECENT_EMOJI_EVENT_TYPE, content);
      return;
    } // Special case integration manager provisioning


    if (settingName === "integrationProvisioning") {
      const content = this.getSettings(INTEG_PROVISIONING_EVENT_TYPE) || {};
      content['enabled'] = newValue;
      await _MatrixClientPeg.MatrixClientPeg.get().setAccountData(INTEG_PROVISIONING_EVENT_TYPE, content);
      return;
    }

    const content = this.getSettings() || {};
    content[settingName] = newValue;
    await _MatrixClientPeg.MatrixClientPeg.get().setAccountData("im.vector.web.settings", content);
  }

  canSetValue(settingName, roomId) {
    return true; // It's their account, so they should be able to
  }

  isSupported() {
    const cli = _MatrixClientPeg.MatrixClientPeg.get();

    return cli !== undefined && cli !== null && !cli.isGuest();
  }

  getSettings(eventType = "im.vector.web.settings") {
    // TODO: [TS] Types on return
    const cli = _MatrixClientPeg.MatrixClientPeg.get();

    if (!cli) return null;
    const event = cli.getAccountData(eventType);
    if (!event || !event.getContent()) return null;
    return (0, _objects.objectClone)(event.getContent()); // clone to prevent mutation
  }

  notifyBreadcrumbsUpdate(event) {
    let val = [];

    if (event.getType() === BREADCRUMBS_LEGACY_EVENT_TYPE) {
      // This seems fishy - try and get the event for the new rooms
      const newType = this.getSettings(BREADCRUMBS_EVENT_TYPE);
      if (newType) val = newType['recent_rooms'];else val = event.getContent()['rooms'];
    } else if (event.getType() === BREADCRUMBS_EVENT_TYPE) {
      val = event.getContent()['recent_rooms'];
    } else {
      return; // for sanity, not because we expect to be here.
    }

    this.watchers.notifyUpdate("breadcrumb_rooms", null, _SettingLevel.SettingLevel.ACCOUNT, val || []);
  }

}

exports.default = AccountSettingsHandler;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zZXR0aW5ncy9oYW5kbGVycy9BY2NvdW50U2V0dGluZ3NIYW5kbGVyLnRzIl0sIm5hbWVzIjpbIkJSRUFEQ1JVTUJTX0xFR0FDWV9FVkVOVF9UWVBFIiwiQlJFQURDUlVNQlNfRVZFTlRfVFlQRSIsIkJSRUFEQ1JVTUJTX0VWRU5UX1RZUEVTIiwiUkVDRU5UX0VNT0pJX0VWRU5UX1RZUEUiLCJJTlRFR19QUk9WSVNJT05JTkdfRVZFTlRfVFlQRSIsIkFjY291bnRTZXR0aW5nc0hhbmRsZXIiLCJNYXRyaXhDbGllbnRCYWNrZWRTZXR0aW5nc0hhbmRsZXIiLCJjb25zdHJ1Y3RvciIsIndhdGNoZXJzIiwiZXZlbnQiLCJwcmV2RXZlbnQiLCJnZXRUeXBlIiwidmFsIiwiZ2V0Q29udGVudCIsIm5vdGlmeVVwZGF0ZSIsIlNldHRpbmdMZXZlbCIsIkFDQ09VTlQiLCJwcmV2Q29udGVudCIsImNoYW5nZWRTZXR0aW5ncyIsInNldHRpbmdOYW1lIiwiaW5jbHVkZXMiLCJub3RpZnlCcmVhZGNydW1ic1VwZGF0ZSIsImluaXRNYXRyaXhDbGllbnQiLCJvbGRDbGllbnQiLCJuZXdDbGllbnQiLCJyZW1vdmVMaXN0ZW5lciIsIm9uQWNjb3VudERhdGEiLCJvbiIsImdldFZhbHVlIiwicm9vbUlkIiwiY29udGVudCIsImdldFNldHRpbmdzIiwic2V0dGluZ3MiLCJ2YWx1ZSIsInVuZGVmaW5lZCIsIm9sZENvbWJpbmVkVmFsdWUiLCJzZXRWYWx1ZSIsInByZWZlcnJlZFZhbHVlIiwibmV3VmFsdWUiLCJNYXRyaXhDbGllbnRQZWciLCJnZXQiLCJzZXRBY2NvdW50RGF0YSIsImNhblNldFZhbHVlIiwiaXNTdXBwb3J0ZWQiLCJjbGkiLCJpc0d1ZXN0IiwiZXZlbnRUeXBlIiwiZ2V0QWNjb3VudERhdGEiLCJuZXdUeXBlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQWlCQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFwQkE7QUFDQTtBQUNBO0FBQ0E7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QUNBLFFBQUksQ0FBQ3JDLEtBQUQsSUFBVSxDQUFDQSxLQUFLLENBQUNJLFVBQU4sRUFBZixFQUFtQyxPQUFPLElBQVA7QUFDbkMsV0FBTywwQkFBWUosS0FBSyxDQUFDSSxVQUFOLEVBQVosQ0FBUCxDQU4yRCxDQU1uQjtBQUMzQzs7QUFFT1EsRUFBQUEsdUJBQXVCLENBQUNaLEtBQUQsRUFBcUI7QUFDaEQsUUFBSUcsR0FBRyxHQUFHLEVBQVY7O0FBQ0EsUUFBSUgsS0FBSyxDQUFDRSxPQUFOLE9BQW9CWCw2QkFBeEIsRUFBdUQ7QUFDbkQ7QUFDQSxZQUFNZ0QsT0FBTyxHQUFHLEtBQUtqQixXQUFMLENBQWlCOUIsc0JBQWpCLENBQWhCO0FBQ0EsVUFBSStDLE9BQUosRUFBYXBDLEdBQUcsR0FBR29DLE9BQU8sQ0FBQyxjQUFELENBQWIsQ0FBYixLQUNLcEMsR0FBRyxHQUFHSCxLQUFLLENBQUNJLFVBQU4sR0FBbUIsT0FBbkIsQ0FBTjtBQUNSLEtBTEQsTUFLTyxJQUFJSixLQUFLLENBQUNFLE9BQU4sT0FBb0JWLHNCQUF4QixFQUFnRDtBQUNuRFcsTUFBQUEsR0FBRyxHQUFHSCxLQUFLLENBQUNJLFVBQU4sR0FBbUIsY0FBbkIsQ0FBTjtBQUNILEtBRk0sTUFFQTtBQUNILGFBREcsQ0FDSztBQUNYOztBQUNELFNBQUtMLFFBQUwsQ0FBY00sWUFBZCxDQUEyQixrQkFBM0IsRUFBK0MsSUFBL0MsRUFBcURDLDJCQUFhQyxPQUFsRSxFQUEyRUosR0FBRyxJQUFJLEVBQWxGO0FBQ0g7O0FBdExpRiIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5Db3B5cmlnaHQgMjAxNyBUcmF2aXMgUmFsc3RvblxuQ29weXJpZ2h0IDIwMTksIDIwMjAgVGhlIE1hdHJpeC5vcmcgRm91bmRhdGlvbiBDLkkuQy5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG5pbXBvcnQgeyBNYXRyaXhDbGllbnRQZWcgfSBmcm9tICcuLi8uLi9NYXRyaXhDbGllbnRQZWcnO1xuaW1wb3J0IE1hdHJpeENsaWVudEJhY2tlZFNldHRpbmdzSGFuZGxlciBmcm9tIFwiLi9NYXRyaXhDbGllbnRCYWNrZWRTZXR0aW5nc0hhbmRsZXJcIjtcbmltcG9ydCB7IG9iamVjdENsb25lLCBvYmplY3RLZXlDaGFuZ2VzIH0gZnJvbSBcIi4uLy4uL3V0aWxzL29iamVjdHNcIjtcbmltcG9ydCB7IFNldHRpbmdMZXZlbCB9IGZyb20gXCIuLi9TZXR0aW5nTGV2ZWxcIjtcbmltcG9ydCB7IFdhdGNoTWFuYWdlciB9IGZyb20gXCIuLi9XYXRjaE1hbmFnZXJcIjtcbmltcG9ydCB7IE1hdHJpeENsaWVudCB9IGZyb20gXCJtYXRyaXgtanMtc2RrL3NyYy9jbGllbnRcIjtcbmltcG9ydCB7IE1hdHJpeEV2ZW50IH0gZnJvbSBcIm1hdHJpeC1qcy1zZGsvc3JjL21vZGVscy9ldmVudFwiO1xuXG5jb25zdCBCUkVBRENSVU1CU19MRUdBQ1lfRVZFTlRfVFlQRSA9IFwiaW0udmVjdG9yLnJpb3QuYnJlYWRjcnVtYl9yb29tc1wiO1xuY29uc3QgQlJFQURDUlVNQlNfRVZFTlRfVFlQRSA9IFwiaW0udmVjdG9yLnNldHRpbmcuYnJlYWRjcnVtYnNcIjtcbmNvbnN0IEJSRUFEQ1JVTUJTX0VWRU5UX1RZUEVTID0gW0JSRUFEQ1JVTUJTX0xFR0FDWV9FVkVOVF9UWVBFLCBCUkVBRENSVU1CU19FVkVOVF9UWVBFXTtcbmNvbnN0IFJFQ0VOVF9FTU9KSV9FVkVOVF9UWVBFID0gXCJpby5lbGVtZW50LnJlY2VudF9lbW9qaVwiO1xuY29uc3QgSU5URUdfUFJPVklTSU9OSU5HX0VWRU5UX1RZUEUgPSBcImltLnZlY3Rvci5zZXR0aW5nLmludGVncmF0aW9uX3Byb3Zpc2lvbmluZ1wiO1xuXG4vKipcbiAqIEdldHMgYW5kIHNldHMgc2V0dGluZ3MgYXQgdGhlIFwiYWNjb3VudFwiIGxldmVsIGZvciB0aGUgY3VycmVudCB1c2VyLlxuICogVGhpcyBoYW5kbGVyIGRvZXMgbm90IG1ha2UgdXNlIG9mIHRoZSByb29tSWQgcGFyYW1ldGVyLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBY2NvdW50U2V0dGluZ3NIYW5kbGVyIGV4dGVuZHMgTWF0cml4Q2xpZW50QmFja2VkU2V0dGluZ3NIYW5kbGVyIHtcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHdhdGNoZXJzOiBXYXRjaE1hbmFnZXIpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgaW5pdE1hdHJpeENsaWVudChvbGRDbGllbnQ6IE1hdHJpeENsaWVudCwgbmV3Q2xpZW50OiBNYXRyaXhDbGllbnQpIHtcbiAgICAgICAgaWYgKG9sZENsaWVudCkge1xuICAgICAgICAgICAgb2xkQ2xpZW50LnJlbW92ZUxpc3RlbmVyKFwiYWNjb3VudERhdGFcIiwgdGhpcy5vbkFjY291bnREYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG5ld0NsaWVudC5vbihcImFjY291bnREYXRhXCIsIHRoaXMub25BY2NvdW50RGF0YSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvbkFjY291bnREYXRhID0gKGV2ZW50OiBNYXRyaXhFdmVudCwgcHJldkV2ZW50OiBNYXRyaXhFdmVudCkgPT4ge1xuICAgICAgICBpZiAoZXZlbnQuZ2V0VHlwZSgpID09PSBcIm9yZy5tYXRyaXgucHJldmlld191cmxzXCIpIHtcbiAgICAgICAgICAgIGxldCB2YWwgPSBldmVudC5nZXRDb250ZW50KClbJ2Rpc2FibGUnXTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YodmFsKSAhPT0gXCJib29sZWFuXCIpIHtcbiAgICAgICAgICAgICAgICB2YWwgPSBudWxsO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YWwgPSAhdmFsO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLndhdGNoZXJzLm5vdGlmeVVwZGF0ZShcInVybFByZXZpZXdzRW5hYmxlZFwiLCBudWxsLCBTZXR0aW5nTGV2ZWwuQUNDT1VOVCwgdmFsKTtcbiAgICAgICAgfSBlbHNlIGlmIChldmVudC5nZXRUeXBlKCkgPT09IFwiaW0udmVjdG9yLndlYi5zZXR0aW5nc1wiKSB7XG4gICAgICAgICAgICAvLyBGaWd1cmUgb3V0IHdoYXQgY2hhbmdlZCBhbmQgZmlyZSB0aG9zZSB1cGRhdGVzXG4gICAgICAgICAgICBjb25zdCBwcmV2Q29udGVudCA9IHByZXZFdmVudCA/IHByZXZFdmVudC5nZXRDb250ZW50KCkgOiB7fTtcbiAgICAgICAgICAgIGNvbnN0IGNoYW5nZWRTZXR0aW5ncyA9IG9iamVjdEtleUNoYW5nZXM8UmVjb3JkPHN0cmluZywgYW55Pj4ocHJldkNvbnRlbnQsIGV2ZW50LmdldENvbnRlbnQoKSk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHNldHRpbmdOYW1lIG9mIGNoYW5nZWRTZXR0aW5ncykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHZhbCA9IGV2ZW50LmdldENvbnRlbnQoKVtzZXR0aW5nTmFtZV07XG4gICAgICAgICAgICAgICAgdGhpcy53YXRjaGVycy5ub3RpZnlVcGRhdGUoc2V0dGluZ05hbWUsIG51bGwsIFNldHRpbmdMZXZlbC5BQ0NPVU5ULCB2YWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKEJSRUFEQ1JVTUJTX0VWRU5UX1RZUEVTLmluY2x1ZGVzKGV2ZW50LmdldFR5cGUoKSkpIHtcbiAgICAgICAgICAgIHRoaXMubm90aWZ5QnJlYWRjcnVtYnNVcGRhdGUoZXZlbnQpO1xuICAgICAgICB9IGVsc2UgaWYgKGV2ZW50LmdldFR5cGUoKSA9PT0gSU5URUdfUFJPVklTSU9OSU5HX0VWRU5UX1RZUEUpIHtcbiAgICAgICAgICAgIGNvbnN0IHZhbCA9IGV2ZW50LmdldENvbnRlbnQoKVsnZW5hYmxlZCddO1xuICAgICAgICAgICAgdGhpcy53YXRjaGVycy5ub3RpZnlVcGRhdGUoXCJpbnRlZ3JhdGlvblByb3Zpc2lvbmluZ1wiLCBudWxsLCBTZXR0aW5nTGV2ZWwuQUNDT1VOVCwgdmFsKTtcbiAgICAgICAgfSBlbHNlIGlmIChldmVudC5nZXRUeXBlKCkgPT09IFJFQ0VOVF9FTU9KSV9FVkVOVF9UWVBFKSB7XG4gICAgICAgICAgICBjb25zdCB2YWwgPSBldmVudC5nZXRDb250ZW50KClbJ2VuYWJsZWQnXTtcbiAgICAgICAgICAgIHRoaXMud2F0Y2hlcnMubm90aWZ5VXBkYXRlKFwicmVjZW50X2Vtb2ppXCIsIG51bGwsIFNldHRpbmdMZXZlbC5BQ0NPVU5ULCB2YWwpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHB1YmxpYyBnZXRWYWx1ZShzZXR0aW5nTmFtZTogc3RyaW5nLCByb29tSWQ6IHN0cmluZyk6IGFueSB7XG4gICAgICAgIC8vIFNwZWNpYWwgY2FzZSBVUkwgcHJldmlld3NcbiAgICAgICAgaWYgKHNldHRpbmdOYW1lID09PSBcInVybFByZXZpZXdzRW5hYmxlZFwiKSB7XG4gICAgICAgICAgICBjb25zdCBjb250ZW50ID0gdGhpcy5nZXRTZXR0aW5ncyhcIm9yZy5tYXRyaXgucHJldmlld191cmxzXCIpIHx8IHt9O1xuXG4gICAgICAgICAgICAvLyBDaGVjayB0byBtYWtlIHN1cmUgdGhhdCB3ZSBhY3R1YWxseSBnb3QgYSBib29sZWFuXG4gICAgICAgICAgICBpZiAodHlwZW9mKGNvbnRlbnRbJ2Rpc2FibGUnXSkgIT09IFwiYm9vbGVhblwiKSByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIHJldHVybiAhY29udGVudFsnZGlzYWJsZSddO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU3BlY2lhbCBjYXNlIGZvciBicmVhZGNydW1ic1xuICAgICAgICBpZiAoc2V0dGluZ05hbWUgPT09IFwiYnJlYWRjcnVtYl9yb29tc1wiKSB7XG4gICAgICAgICAgICBsZXQgY29udGVudCA9IHRoaXMuZ2V0U2V0dGluZ3MoQlJFQURDUlVNQlNfRVZFTlRfVFlQRSk7XG4gICAgICAgICAgICBpZiAoIWNvbnRlbnQgfHwgIWNvbnRlbnRbJ3JlY2VudF9yb29tcyddKSB7XG4gICAgICAgICAgICAgICAgY29udGVudCA9IHRoaXMuZ2V0U2V0dGluZ3MoQlJFQURDUlVNQlNfTEVHQUNZX0VWRU5UX1RZUEUpO1xuXG4gICAgICAgICAgICAgICAgLy8gVGhpcyBpcyBhIGJpdCBvZiBhIGhhY2ssIGJ1dCBpdCBtYWtlcyB0aGluZ3Mgc2xpZ2h0bHkgZWFzaWVyXG4gICAgICAgICAgICAgICAgaWYgKGNvbnRlbnQpIGNvbnRlbnRbJ3JlY2VudF9yb29tcyddID0gY29udGVudFsncm9vbXMnXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGNvbnRlbnQgJiYgY29udGVudFsncmVjZW50X3Jvb21zJ10gPyBjb250ZW50WydyZWNlbnRfcm9vbXMnXSA6IFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU3BlY2lhbCBjYXNlIHJlY2VudCBlbW9qaVxuICAgICAgICBpZiAoc2V0dGluZ05hbWUgPT09IFwicmVjZW50X2Vtb2ppXCIpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbnRlbnQgPSB0aGlzLmdldFNldHRpbmdzKFJFQ0VOVF9FTU9KSV9FVkVOVF9UWVBFKTtcbiAgICAgICAgICAgIHJldHVybiBjb250ZW50ID8gY29udGVudFtcInJlY2VudF9lbW9qaVwiXSA6IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTcGVjaWFsIGNhc2UgaW50ZWdyYXRpb24gbWFuYWdlciBwcm92aXNpb25pbmdcbiAgICAgICAgaWYgKHNldHRpbmdOYW1lID09PSBcImludGVncmF0aW9uUHJvdmlzaW9uaW5nXCIpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbnRlbnQgPSB0aGlzLmdldFNldHRpbmdzKElOVEVHX1BST1ZJU0lPTklOR19FVkVOVF9UWVBFKTtcbiAgICAgICAgICAgIHJldHVybiBjb250ZW50ID8gY29udGVudFsnZW5hYmxlZCddIDogbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNwZWNpYWwgY2FzZSBmb3IgYXV0b3BsYXlpbmcgdmlkZW9zIGFuZCBHSUZzXG4gICAgICAgIGlmIChbXCJhdXRvcGxheUdpZnNcIiwgXCJhdXRvcGxheVZpZGVvXCJdLmluY2x1ZGVzKHNldHRpbmdOYW1lKSkge1xuICAgICAgICAgICAgY29uc3Qgc2V0dGluZ3MgPSB0aGlzLmdldFNldHRpbmdzKCkgfHwge307XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHNldHRpbmdzW3NldHRpbmdOYW1lXTtcbiAgICAgICAgICAgIC8vIEZhbGxiYWNrIHRvIG9sZCBjb21iaW5lZCBzZXR0aW5nXG4gICAgICAgICAgICBpZiAodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG9sZENvbWJpbmVkVmFsdWUgPSBzZXR0aW5nc1tcImF1dG9wbGF5R2lmc0FuZFZpZGVvc1wiXTtcbiAgICAgICAgICAgICAgICAvLyBXcml0ZSwgc28gdGhhdCB3ZSBjYW4gcmVtb3ZlIHRoaXMgaW4gdGhlIGZ1dHVyZVxuICAgICAgICAgICAgICAgIGlmIChvbGRDb21iaW5lZFZhbHVlICE9PSBudWxsICYmIG9sZENvbWJpbmVkVmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFZhbHVlKFwiYXV0b3BsYXlHaWZzXCIsIHJvb21JZCwgb2xkQ29tYmluZWRWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0VmFsdWUoXCJhdXRvcGxheVZpZGVvXCIsIHJvb21JZCwgb2xkQ29tYmluZWRWYWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBvbGRDb21iaW5lZFZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc2V0dGluZ3MgPSB0aGlzLmdldFNldHRpbmdzKCkgfHwge307XG4gICAgICAgIGxldCBwcmVmZXJyZWRWYWx1ZSA9IHNldHRpbmdzW3NldHRpbmdOYW1lXTtcblxuICAgICAgICBpZiAocHJlZmVycmVkVmFsdWUgPT09IG51bGwgfHwgcHJlZmVycmVkVmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gSG9ub3VyIHRoZSBvbGQgc2V0dGluZyBvbiByZWFkIG9ubHlcbiAgICAgICAgICAgIGlmIChzZXR0aW5nTmFtZSA9PT0gXCJoaWRlQXZhdGFyQ2hhbmdlc1wiIHx8IHNldHRpbmdOYW1lID09PSBcImhpZGVEaXNwbGF5bmFtZUNoYW5nZXNcIikge1xuICAgICAgICAgICAgICAgIHByZWZlcnJlZFZhbHVlID0gc2V0dGluZ3NbXCJoaWRlQXZhdGFyRGlzcGxheW5hbWVDaGFuZ2VzXCJdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHByZWZlcnJlZFZhbHVlO1xuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBzZXRWYWx1ZShzZXR0aW5nTmFtZTogc3RyaW5nLCByb29tSWQ6IHN0cmluZywgbmV3VmFsdWU6IGFueSk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICAvLyBTcGVjaWFsIGNhc2UgVVJMIHByZXZpZXdzXG4gICAgICAgIGlmIChzZXR0aW5nTmFtZSA9PT0gXCJ1cmxQcmV2aWV3c0VuYWJsZWRcIikge1xuICAgICAgICAgICAgY29uc3QgY29udGVudCA9IHRoaXMuZ2V0U2V0dGluZ3MoXCJvcmcubWF0cml4LnByZXZpZXdfdXJsc1wiKSB8fCB7fTtcbiAgICAgICAgICAgIGNvbnRlbnRbJ2Rpc2FibGUnXSA9ICFuZXdWYWx1ZTtcbiAgICAgICAgICAgIGF3YWl0IE1hdHJpeENsaWVudFBlZy5nZXQoKS5zZXRBY2NvdW50RGF0YShcIm9yZy5tYXRyaXgucHJldmlld191cmxzXCIsIGNvbnRlbnQpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU3BlY2lhbCBjYXNlIGZvciBicmVhZGNydW1ic1xuICAgICAgICBpZiAoc2V0dGluZ05hbWUgPT09IFwiYnJlYWRjcnVtYl9yb29tc1wiKSB7XG4gICAgICAgICAgICAvLyBXZSByZWFkIHRoZSB2YWx1ZSBmaXJzdCBqdXN0IHRvIG1ha2Ugc3VyZSB3ZSBwcmVzZXJ2ZSB3aGF0ZXZlciByYW5kb20ga2V5cyBtaWdodCBiZSBwcmVzZW50LlxuICAgICAgICAgICAgbGV0IGNvbnRlbnQgPSB0aGlzLmdldFNldHRpbmdzKEJSRUFEQ1JVTUJTX0VWRU5UX1RZUEUpO1xuICAgICAgICAgICAgaWYgKCFjb250ZW50IHx8ICFjb250ZW50WydyZWNlbnRfcm9vbXMnXSkge1xuICAgICAgICAgICAgICAgIGNvbnRlbnQgPSB0aGlzLmdldFNldHRpbmdzKEJSRUFEQ1JVTUJTX0xFR0FDWV9FVkVOVF9UWVBFKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghY29udGVudCkgY29udGVudCA9IHt9OyAvLyBJZiB3ZSBzdGlsbCBkb24ndCBoYXZlIGNvbnRlbnQsIG1ha2Ugc29tZVxuXG4gICAgICAgICAgICBjb250ZW50WydyZWNlbnRfcm9vbXMnXSA9IG5ld1ZhbHVlO1xuICAgICAgICAgICAgYXdhaXQgTWF0cml4Q2xpZW50UGVnLmdldCgpLnNldEFjY291bnREYXRhKEJSRUFEQ1JVTUJTX0VWRU5UX1RZUEUsIGNvbnRlbnQpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU3BlY2lhbCBjYXNlIHJlY2VudCBlbW9qaVxuICAgICAgICBpZiAoc2V0dGluZ05hbWUgPT09IFwicmVjZW50X2Vtb2ppXCIpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbnRlbnQgPSB0aGlzLmdldFNldHRpbmdzKFJFQ0VOVF9FTU9KSV9FVkVOVF9UWVBFKSB8fCB7fTtcbiAgICAgICAgICAgIGNvbnRlbnRbXCJyZWNlbnRfZW1vamlcIl0gPSBuZXdWYWx1ZTtcbiAgICAgICAgICAgIGF3YWl0IE1hdHJpeENsaWVudFBlZy5nZXQoKS5zZXRBY2NvdW50RGF0YShSRUNFTlRfRU1PSklfRVZFTlRfVFlQRSwgY29udGVudCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTcGVjaWFsIGNhc2UgaW50ZWdyYXRpb24gbWFuYWdlciBwcm92aXNpb25pbmdcbiAgICAgICAgaWYgKHNldHRpbmdOYW1lID09PSBcImludGVncmF0aW9uUHJvdmlzaW9uaW5nXCIpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbnRlbnQgPSB0aGlzLmdldFNldHRpbmdzKElOVEVHX1BST1ZJU0lPTklOR19FVkVOVF9UWVBFKSB8fCB7fTtcbiAgICAgICAgICAgIGNvbnRlbnRbJ2VuYWJsZWQnXSA9IG5ld1ZhbHVlO1xuICAgICAgICAgICAgYXdhaXQgTWF0cml4Q2xpZW50UGVnLmdldCgpLnNldEFjY291bnREYXRhKElOVEVHX1BST1ZJU0lPTklOR19FVkVOVF9UWVBFLCBjb250ZW50KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGNvbnRlbnQgPSB0aGlzLmdldFNldHRpbmdzKCkgfHwge307XG4gICAgICAgIGNvbnRlbnRbc2V0dGluZ05hbWVdID0gbmV3VmFsdWU7XG4gICAgICAgIGF3YWl0IE1hdHJpeENsaWVudFBlZy5nZXQoKS5zZXRBY2NvdW50RGF0YShcImltLnZlY3Rvci53ZWIuc2V0dGluZ3NcIiwgY29udGVudCk7XG4gICAgfVxuXG4gICAgcHVibGljIGNhblNldFZhbHVlKHNldHRpbmdOYW1lOiBzdHJpbmcsIHJvb21JZDogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0cnVlOyAvLyBJdCdzIHRoZWlyIGFjY291bnQsIHNvIHRoZXkgc2hvdWxkIGJlIGFibGUgdG9cbiAgICB9XG5cbiAgICBwdWJsaWMgaXNTdXBwb3J0ZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIGNvbnN0IGNsaSA9IE1hdHJpeENsaWVudFBlZy5nZXQoKTtcbiAgICAgICAgcmV0dXJuIGNsaSAhPT0gdW5kZWZpbmVkICYmIGNsaSAhPT0gbnVsbCAmJiAhY2xpLmlzR3Vlc3QoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldFNldHRpbmdzKGV2ZW50VHlwZSA9IFwiaW0udmVjdG9yLndlYi5zZXR0aW5nc1wiKTogYW55IHsgLy8gVE9ETzogW1RTXSBUeXBlcyBvbiByZXR1cm5cbiAgICAgICAgY29uc3QgY2xpID0gTWF0cml4Q2xpZW50UGVnLmdldCgpO1xuICAgICAgICBpZiAoIWNsaSkgcmV0dXJuIG51bGw7XG5cbiAgICAgICAgY29uc3QgZXZlbnQgPSBjbGkuZ2V0QWNjb3VudERhdGEoZXZlbnRUeXBlKTtcbiAgICAgICAgaWYgKCFldmVudCB8fCAhZXZlbnQuZ2V0Q29udGVudCgpKSByZXR1cm4gbnVsbDtcbiAgICAgICAgcmV0dXJuIG9iamVjdENsb25lKGV2ZW50LmdldENvbnRlbnQoKSk7IC8vIGNsb25lIHRvIHByZXZlbnQgbXV0YXRpb25cbiAgICB9XG5cbiAgICBwcml2YXRlIG5vdGlmeUJyZWFkY3J1bWJzVXBkYXRlKGV2ZW50OiBNYXRyaXhFdmVudCkge1xuICAgICAgICBsZXQgdmFsID0gW107XG4gICAgICAgIGlmIChldmVudC5nZXRUeXBlKCkgPT09IEJSRUFEQ1JVTUJTX0xFR0FDWV9FVkVOVF9UWVBFKSB7XG4gICAgICAgICAgICAvLyBUaGlzIHNlZW1zIGZpc2h5IC0gdHJ5IGFuZCBnZXQgdGhlIGV2ZW50IGZvciB0aGUgbmV3IHJvb21zXG4gICAgICAgICAgICBjb25zdCBuZXdUeXBlID0gdGhpcy5nZXRTZXR0aW5ncyhCUkVBRENSVU1CU19FVkVOVF9UWVBFKTtcbiAgICAgICAgICAgIGlmIChuZXdUeXBlKSB2YWwgPSBuZXdUeXBlWydyZWNlbnRfcm9vbXMnXTtcbiAgICAgICAgICAgIGVsc2UgdmFsID0gZXZlbnQuZ2V0Q29udGVudCgpWydyb29tcyddO1xuICAgICAgICB9IGVsc2UgaWYgKGV2ZW50LmdldFR5cGUoKSA9PT0gQlJFQURDUlVNQlNfRVZFTlRfVFlQRSkge1xuICAgICAgICAgICAgdmFsID0gZXZlbnQuZ2V0Q29udGVudCgpWydyZWNlbnRfcm9vbXMnXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybjsgLy8gZm9yIHNhbml0eSwgbm90IGJlY2F1c2Ugd2UgZXhwZWN0IHRvIGJlIGhlcmUuXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy53YXRjaGVycy5ub3RpZnlVcGRhdGUoXCJicmVhZGNydW1iX3Jvb21zXCIsIG51bGwsIFNldHRpbmdMZXZlbC5BQ0NPVU5ULCB2YWwgfHwgW10pO1xuICAgIH1cbn1cbiJdfQ==