"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _MatrixClientPeg = require("../../MatrixClientPeg");

var _MatrixClientBackedSettingsHandler = _interopRequireDefault(require("./MatrixClientBackedSettingsHandler"));

var _objects = require("../../utils/objects");

var _SettingLevel = require("../SettingLevel");

/*
Copyright 2017 Travis Ralston
Copyright 2019, 2020 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/**
 * Gets and sets settings at the "room" level.
 */
class RoomSettingsHandler extends _MatrixClientBackedSettingsHandler.default {
  constructor(watchers) {
    super();
    this.watchers = watchers;
    (0, _defineProperty2.default)(this, "onEvent", (event, state, prevEvent) => {
      const roomId = event.getRoomId();
      const room = this.client.getRoom(roomId); // Note: in tests and during the encryption setup on initial load we might not have
      // rooms in the store, so we just quietly ignore the problem. If we log it then we'll
      // just end up spamming the logs a few thousand times. It is perfectly fine for us
      // to ignore the problem as the app will not have loaded enough to care yet.

      if (!room) return; // ignore state updates which are not current

      if (room && state !== room.currentState) return;

      if (event.getType() === "org.matrix.room.preview_urls") {
        let val = event.getContent()['disable'];

        if (typeof val !== "boolean") {
          val = null;
        } else {
          val = !val;
        }

        this.watchers.notifyUpdate("urlPreviewsEnabled", roomId, _SettingLevel.SettingLevel.ROOM, val);
      } else if (event.getType() === "im.vector.web.settings") {
        // Figure out what changed and fire those updates
        const prevContent = prevEvent ? prevEvent.getContent() : {};
        const changedSettings = (0, _objects.objectKeyChanges)(prevContent, event.getContent());

        for (const settingName of changedSettings) {
          this.watchers.notifyUpdate(settingName, roomId, _SettingLevel.SettingLevel.ROOM, event.getContent()[settingName]);
        }
      }
    });
  }

  initMatrixClient(oldClient, newClient) {
    if (oldClient) {
      oldClient.removeListener("RoomState.events", this.onEvent);
    }

    newClient.on("RoomState.events", this.onEvent);
  }

  getValue(settingName, roomId) {
    // Special case URL previews
    if (settingName === "urlPreviewsEnabled") {
      const content = this.getSettings(roomId, "org.matrix.room.preview_urls") || {}; // Check to make sure that we actually got a boolean

      if (typeof content['disable'] !== "boolean") return null;
      return !content['disable'];
    }

    const settings = this.getSettings(roomId) || {};
    return settings[settingName];
  }

  async setValue(settingName, roomId, newValue) {
    // Special case URL previews
    if (settingName === "urlPreviewsEnabled") {
      const content = this.getSettings(roomId, "org.matrix.room.preview_urls") || {};
      content['disable'] = !newValue;
      await _MatrixClientPeg.MatrixClientPeg.get().sendStateEvent(roomId, "org.matrix.room.preview_urls", content);
      return;
    }

    const content = this.getSettings(roomId) || {};
    content[settingName] = newValue;
    await _MatrixClientPeg.MatrixClientPeg.get().sendStateEvent(roomId, "im.vector.web.settings", content, "");
  }

  canSetValue(settingName, roomId) {
    const cli = _MatrixClientPeg.MatrixClientPeg.get();

    const room = cli.getRoom(roomId);
    let eventType = "im.vector.web.settings";
    if (settingName === "urlPreviewsEnabled") eventType = "org.matrix.room.preview_urls";
    if (!room) return false;
    return room.currentState.maySendStateEvent(eventType, cli.getUserId());
  }

  isSupported() {
    const cli = _MatrixClientPeg.MatrixClientPeg.get();

    return cli !== undefined && cli !== null;
  }

  getSettings(roomId, eventType = "im.vector.web.settings") {
    const room = _MatrixClientPeg.MatrixClientPeg.get().getRoom(roomId);

    if (!room) return null;
    const event = room.currentState.getStateEvents(eventType, "");
    if (!event || !event.getContent()) return null;
    return (0, _objects.objectClone)(event.getContent()); // clone to prevent mutation
  }

}

exports.default = RoomSettingsHandler;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,