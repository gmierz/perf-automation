"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _lodash = require("lodash");

var _logger = require("matrix-js-sdk/src/logger");

/*
Copyright 2017 Aviral Dasgupta

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
class SendHistoryManager {
  // used for indexing the storage
  // used for indexing the loaded validated history Array
  constructor(roomId, prefix) {
    (0, _defineProperty2.default)(this, "history", []);
    (0, _defineProperty2.default)(this, "prefix", void 0);
    (0, _defineProperty2.default)(this, "lastIndex", 0);
    (0, _defineProperty2.default)(this, "currentIndex", 0);
    this.prefix = prefix + roomId; // TODO: Performance issues?

    let index = 0;
    let itemJSON;

    while (itemJSON = sessionStorage.getItem(`${this.prefix}[${index}]`)) {
      try {
        this.history.push(JSON.parse(itemJSON));
      } catch (e) {
        _logger.logger.warn("Throwing away unserialisable history", e);

        break;
      }

      ++index;
    }

    this.lastIndex = this.history.length - 1; // reset currentIndex to account for any unserialisable history

    this.currentIndex = this.lastIndex + 1;
  }

  static createItem(model, replyEvent) {
    return {
      parts: model.serializeParts(),
      replyEventId: replyEvent ? replyEvent.getId() : undefined
    };
  }

  save(editorModel, replyEvent) {
    const item = SendHistoryManager.createItem(editorModel, replyEvent);
    this.history.push(item);
    this.currentIndex = this.history.length;
    this.lastIndex += 1;
    sessionStorage.setItem(`${this.prefix}[${this.lastIndex}]`, JSON.stringify(item));
  }

  getItem(offset) {
    this.currentIndex = (0, _lodash.clamp)(this.currentIndex + offset, 0, this.history.length - 1);
    return this.history[this.currentIndex];
  }

}

exports.default = SendHistoryManager;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9TZW5kSGlzdG9yeU1hbmFnZXIudHMiXSwibmFtZXMiOlsiU2VuZEhpc3RvcnlNYW5hZ2VyIiwiY29uc3RydWN0b3IiLCJyb29tSWQiLCJwcmVmaXgiLCJpbmRleCIsIml0ZW1KU09OIiwic2Vzc2lvblN0b3JhZ2UiLCJnZXRJdGVtIiwiaGlzdG9yeSIsInB1c2giLCJKU09OIiwicGFyc2UiLCJlIiwibG9nZ2VyIiwid2FybiIsImxhc3RJbmRleCIsImxlbmd0aCIsImN1cnJlbnRJbmRleCIsImNyZWF0ZUl0ZW0iLCJtb2RlbCIsInJlcGx5RXZlbnQiLCJwYXJ0cyIsInNlcmlhbGl6ZVBhcnRzIiwicmVwbHlFdmVudElkIiwiZ2V0SWQiLCJ1bmRlZmluZWQiLCJzYXZlIiwiZWRpdG9yTW9kZWwiLCJpdGVtIiwic2V0SXRlbSIsInN0cmluZ2lmeSIsIm9mZnNldCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFnQkE7O0FBTUE7O0FBdEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQWVlLE1BQU1BLGtCQUFOLENBQXlCO0FBR3JCO0FBQ0c7QUFFbEJDLEVBQUFBLFdBQVcsQ0FBQ0MsTUFBRCxFQUFpQkMsTUFBakIsRUFBaUM7QUFBQSxtREFMYixFQUthO0FBQUE7QUFBQSxxREFIaEMsQ0FHZ0M7QUFBQSx3REFGN0IsQ0FFNkI7QUFDeEMsU0FBS0EsTUFBTCxHQUFjQSxNQUFNLEdBQUdELE1BQXZCLENBRHdDLENBR3hDOztBQUNBLFFBQUlFLEtBQUssR0FBRyxDQUFaO0FBQ0EsUUFBSUMsUUFBSjs7QUFFQSxXQUFPQSxRQUFRLEdBQUdDLGNBQWMsQ0FBQ0MsT0FBZixDQUF3QixHQUFFLEtBQUtKLE1BQU8sSUFBR0MsS0FBTSxHQUEvQyxDQUFsQixFQUFzRTtBQUNsRSxVQUFJO0FBQ0EsYUFBS0ksT0FBTCxDQUFhQyxJQUFiLENBQWtCQyxJQUFJLENBQUNDLEtBQUwsQ0FBV04sUUFBWCxDQUFsQjtBQUNILE9BRkQsQ0FFRSxPQUFPTyxDQUFQLEVBQVU7QUFDUkMsdUJBQU9DLElBQVAsQ0FBWSxzQ0FBWixFQUFvREYsQ0FBcEQ7O0FBQ0E7QUFDSDs7QUFDRCxRQUFFUixLQUFGO0FBQ0g7O0FBQ0QsU0FBS1csU0FBTCxHQUFpQixLQUFLUCxPQUFMLENBQWFRLE1BQWIsR0FBc0IsQ0FBdkMsQ0FoQndDLENBaUJ4Qzs7QUFDQSxTQUFLQyxZQUFMLEdBQW9CLEtBQUtGLFNBQUwsR0FBaUIsQ0FBckM7QUFDSDs7QUFFZ0IsU0FBVkcsVUFBVSxDQUFDQyxLQUFELEVBQXFCQyxVQUFyQixFQUE2RDtBQUMxRSxXQUFPO0FBQ0hDLE1BQUFBLEtBQUssRUFBRUYsS0FBSyxDQUFDRyxjQUFOLEVBREo7QUFFSEMsTUFBQUEsWUFBWSxFQUFFSCxVQUFVLEdBQUdBLFVBQVUsQ0FBQ0ksS0FBWCxFQUFILEdBQXdCQztBQUY3QyxLQUFQO0FBSUg7O0FBRURDLEVBQUFBLElBQUksQ0FBQ0MsV0FBRCxFQUEyQlAsVUFBM0IsRUFBcUQ7QUFDckQsVUFBTVEsSUFBSSxHQUFHNUIsa0JBQWtCLENBQUNrQixVQUFuQixDQUE4QlMsV0FBOUIsRUFBMkNQLFVBQTNDLENBQWI7QUFDQSxTQUFLWixPQUFMLENBQWFDLElBQWIsQ0FBa0JtQixJQUFsQjtBQUNBLFNBQUtYLFlBQUwsR0FBb0IsS0FBS1QsT0FBTCxDQUFhUSxNQUFqQztBQUNBLFNBQUtELFNBQUwsSUFBa0IsQ0FBbEI7QUFDQVQsSUFBQUEsY0FBYyxDQUFDdUIsT0FBZixDQUF3QixHQUFFLEtBQUsxQixNQUFPLElBQUcsS0FBS1ksU0FBVSxHQUF4RCxFQUE0REwsSUFBSSxDQUFDb0IsU0FBTCxDQUFlRixJQUFmLENBQTVEO0FBQ0g7O0FBRURyQixFQUFBQSxPQUFPLENBQUN3QixNQUFELEVBQStCO0FBQ2xDLFNBQUtkLFlBQUwsR0FBb0IsbUJBQU0sS0FBS0EsWUFBTCxHQUFvQmMsTUFBMUIsRUFBa0MsQ0FBbEMsRUFBcUMsS0FBS3ZCLE9BQUwsQ0FBYVEsTUFBYixHQUFzQixDQUEzRCxDQUFwQjtBQUNBLFdBQU8sS0FBS1IsT0FBTCxDQUFhLEtBQUtTLFlBQWxCLENBQVA7QUFDSDs7QUE3Q21DIiwic291cmNlc0NvbnRlbnQiOlsiLypcbkNvcHlyaWdodCAyMDE3IEF2aXJhbCBEYXNndXB0YVxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbmltcG9ydCB7IGNsYW1wIH0gZnJvbSBcImxvZGFzaFwiO1xuaW1wb3J0IHsgTWF0cml4RXZlbnQgfSBmcm9tIFwibWF0cml4LWpzLXNkay9zcmMvbW9kZWxzL2V2ZW50XCI7XG5cbmltcG9ydCB7IFNlcmlhbGl6ZWRQYXJ0IH0gZnJvbSBcIi4vZWRpdG9yL3BhcnRzXCI7XG5pbXBvcnQgRWRpdG9yTW9kZWwgZnJvbSBcIi4vZWRpdG9yL21vZGVsXCI7XG5cbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gXCJtYXRyaXgtanMtc2RrL3NyYy9sb2dnZXJcIjtcblxuaW50ZXJmYWNlIElIaXN0b3J5SXRlbSB7XG4gICAgcGFydHM6IFNlcmlhbGl6ZWRQYXJ0W107XG4gICAgcmVwbHlFdmVudElkPzogc3RyaW5nO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZW5kSGlzdG9yeU1hbmFnZXIge1xuICAgIGhpc3Rvcnk6IEFycmF5PElIaXN0b3J5SXRlbT4gPSBbXTtcbiAgICBwcmVmaXg6IHN0cmluZztcbiAgICBsYXN0SW5kZXggPSAwOyAvLyB1c2VkIGZvciBpbmRleGluZyB0aGUgc3RvcmFnZVxuICAgIGN1cnJlbnRJbmRleCA9IDA7IC8vIHVzZWQgZm9yIGluZGV4aW5nIHRoZSBsb2FkZWQgdmFsaWRhdGVkIGhpc3RvcnkgQXJyYXlcblxuICAgIGNvbnN0cnVjdG9yKHJvb21JZDogc3RyaW5nLCBwcmVmaXg6IHN0cmluZykge1xuICAgICAgICB0aGlzLnByZWZpeCA9IHByZWZpeCArIHJvb21JZDtcblxuICAgICAgICAvLyBUT0RPOiBQZXJmb3JtYW5jZSBpc3N1ZXM/XG4gICAgICAgIGxldCBpbmRleCA9IDA7XG4gICAgICAgIGxldCBpdGVtSlNPTjtcblxuICAgICAgICB3aGlsZSAoaXRlbUpTT04gPSBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKGAke3RoaXMucHJlZml4fVske2luZGV4fV1gKSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB0aGlzLmhpc3RvcnkucHVzaChKU09OLnBhcnNlKGl0ZW1KU09OKSk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLndhcm4oXCJUaHJvd2luZyBhd2F5IHVuc2VyaWFsaXNhYmxlIGhpc3RvcnlcIiwgZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICArK2luZGV4O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubGFzdEluZGV4ID0gdGhpcy5oaXN0b3J5Lmxlbmd0aCAtIDE7XG4gICAgICAgIC8vIHJlc2V0IGN1cnJlbnRJbmRleCB0byBhY2NvdW50IGZvciBhbnkgdW5zZXJpYWxpc2FibGUgaGlzdG9yeVxuICAgICAgICB0aGlzLmN1cnJlbnRJbmRleCA9IHRoaXMubGFzdEluZGV4ICsgMTtcbiAgICB9XG5cbiAgICBzdGF0aWMgY3JlYXRlSXRlbShtb2RlbDogRWRpdG9yTW9kZWwsIHJlcGx5RXZlbnQ/OiBNYXRyaXhFdmVudCk6IElIaXN0b3J5SXRlbSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBwYXJ0czogbW9kZWwuc2VyaWFsaXplUGFydHMoKSxcbiAgICAgICAgICAgIHJlcGx5RXZlbnRJZDogcmVwbHlFdmVudCA/IHJlcGx5RXZlbnQuZ2V0SWQoKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBzYXZlKGVkaXRvck1vZGVsOiBFZGl0b3JNb2RlbCwgcmVwbHlFdmVudD86IE1hdHJpeEV2ZW50KSB7XG4gICAgICAgIGNvbnN0IGl0ZW0gPSBTZW5kSGlzdG9yeU1hbmFnZXIuY3JlYXRlSXRlbShlZGl0b3JNb2RlbCwgcmVwbHlFdmVudCk7XG4gICAgICAgIHRoaXMuaGlzdG9yeS5wdXNoKGl0ZW0pO1xuICAgICAgICB0aGlzLmN1cnJlbnRJbmRleCA9IHRoaXMuaGlzdG9yeS5sZW5ndGg7XG4gICAgICAgIHRoaXMubGFzdEluZGV4ICs9IDE7XG4gICAgICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oYCR7dGhpcy5wcmVmaXh9WyR7dGhpcy5sYXN0SW5kZXh9XWAsIEpTT04uc3RyaW5naWZ5KGl0ZW0pKTtcbiAgICB9XG5cbiAgICBnZXRJdGVtKG9mZnNldDogbnVtYmVyKTogSUhpc3RvcnlJdGVtIHtcbiAgICAgICAgdGhpcy5jdXJyZW50SW5kZXggPSBjbGFtcCh0aGlzLmN1cnJlbnRJbmRleCArIG9mZnNldCwgMCwgdGhpcy5oaXN0b3J5Lmxlbmd0aCAtIDEpO1xuICAgICAgICByZXR1cm4gdGhpcy5oaXN0b3J5W3RoaXMuY3VycmVudEluZGV4XTtcbiAgICB9XG59XG4iXX0=