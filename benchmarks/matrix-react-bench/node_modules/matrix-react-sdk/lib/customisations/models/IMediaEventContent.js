"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.prepEventContentAsMedia = prepEventContentAsMedia;

/*
 * Copyright 2021 The Matrix.org Foundation C.I.C.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// TODO: These types should be elsewhere.

/**
 * Parses an event content body into a prepared media object. This prepared media object
 * can be used with other functions to manipulate the media.
 * @param {IMediaEventContent} content Unredacted media event content. See interface.
 * @returns {IPreparedMedia} A prepared media object.
 * @throws Throws if the given content cannot be packaged into a prepared media object.
 */
function prepEventContentAsMedia(content) {
  var _content$info, _content$info2, _content$info2$thumbn, _content$file;

  let thumbnail = null;

  if (content !== null && content !== void 0 && (_content$info = content.info) !== null && _content$info !== void 0 && _content$info.thumbnail_url) {
    thumbnail = {
      mxc: content.info.thumbnail_url,
      file: content.info.thumbnail_file
    };
  } else if (content !== null && content !== void 0 && (_content$info2 = content.info) !== null && _content$info2 !== void 0 && (_content$info2$thumbn = _content$info2.thumbnail_file) !== null && _content$info2$thumbn !== void 0 && _content$info2$thumbn.url) {
    thumbnail = {
      mxc: content.info.thumbnail_file.url,
      file: content.info.thumbnail_file
    };
  }

  if (content !== null && content !== void 0 && content.url) {
    return {
      thumbnail,
      mxc: content.url,
      file: content.file
    };
  } else if (content !== null && content !== void 0 && (_content$file = content.file) !== null && _content$file !== void 0 && _content$file.url) {
    return {
      thumbnail,
      mxc: content.file.url,
      file: content.file
    };
  }

  throw new Error("Invalid file provided: cannot determine MXC URI. Has it been redacted?");
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jdXN0b21pc2F0aW9ucy9tb2RlbHMvSU1lZGlhRXZlbnRDb250ZW50LnRzIl0sIm5hbWVzIjpbInByZXBFdmVudENvbnRlbnRBc01lZGlhIiwiY29udGVudCIsInRodW1ibmFpbCIsImluZm8iLCJ0aHVtYm5haWxfdXJsIiwibXhjIiwiZmlsZSIsInRodW1ibmFpbF9maWxlIiwidXJsIiwiRXJyb3IiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7QUErQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxTQUFTQSx1QkFBVCxDQUFpQ0MsT0FBakMsRUFBOEU7QUFBQTs7QUFDakYsTUFBSUMsU0FBdUIsR0FBRyxJQUE5Qjs7QUFDQSxNQUFJRCxPQUFKLGFBQUlBLE9BQUosZ0NBQUlBLE9BQU8sQ0FBRUUsSUFBYiwwQ0FBSSxjQUFlQyxhQUFuQixFQUFrQztBQUM5QkYsSUFBQUEsU0FBUyxHQUFHO0FBQ1JHLE1BQUFBLEdBQUcsRUFBRUosT0FBTyxDQUFDRSxJQUFSLENBQWFDLGFBRFY7QUFFUkUsTUFBQUEsSUFBSSxFQUFFTCxPQUFPLENBQUNFLElBQVIsQ0FBYUk7QUFGWCxLQUFaO0FBSUgsR0FMRCxNQUtPLElBQUlOLE9BQUosYUFBSUEsT0FBSixpQ0FBSUEsT0FBTyxDQUFFRSxJQUFiLG9FQUFJLGVBQWVJLGNBQW5CLGtEQUFJLHNCQUErQkMsR0FBbkMsRUFBd0M7QUFDM0NOLElBQUFBLFNBQVMsR0FBRztBQUNSRyxNQUFBQSxHQUFHLEVBQUVKLE9BQU8sQ0FBQ0UsSUFBUixDQUFhSSxjQUFiLENBQTRCQyxHQUR6QjtBQUVSRixNQUFBQSxJQUFJLEVBQUVMLE9BQU8sQ0FBQ0UsSUFBUixDQUFhSTtBQUZYLEtBQVo7QUFJSDs7QUFFRCxNQUFJTixPQUFKLGFBQUlBLE9BQUosZUFBSUEsT0FBTyxDQUFFTyxHQUFiLEVBQWtCO0FBQ2QsV0FBTztBQUNITixNQUFBQSxTQURHO0FBRUhHLE1BQUFBLEdBQUcsRUFBRUosT0FBTyxDQUFDTyxHQUZWO0FBR0hGLE1BQUFBLElBQUksRUFBRUwsT0FBTyxDQUFDSztBQUhYLEtBQVA7QUFLSCxHQU5ELE1BTU8sSUFBSUwsT0FBSixhQUFJQSxPQUFKLGdDQUFJQSxPQUFPLENBQUVLLElBQWIsMENBQUksY0FBZUUsR0FBbkIsRUFBd0I7QUFDM0IsV0FBTztBQUNITixNQUFBQSxTQURHO0FBRUhHLE1BQUFBLEdBQUcsRUFBRUosT0FBTyxDQUFDSyxJQUFSLENBQWFFLEdBRmY7QUFHSEYsTUFBQUEsSUFBSSxFQUFFTCxPQUFPLENBQUNLO0FBSFgsS0FBUDtBQUtIOztBQUVELFFBQU0sSUFBSUcsS0FBSixDQUFVLHdFQUFWLENBQU47QUFDSCIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgMjAyMSBUaGUgTWF0cml4Lm9yZyBGb3VuZGF0aW9uIEMuSS5DLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuLy8gVE9ETzogVGhlc2UgdHlwZXMgc2hvdWxkIGJlIGVsc2V3aGVyZS5cblxuZXhwb3J0IGludGVyZmFjZSBJRW5jcnlwdGVkRmlsZSB7XG4gICAgdXJsOiBzdHJpbmc7XG4gICAga2V5OiB7XG4gICAgICAgIGFsZzogc3RyaW5nO1xuICAgICAgICBrZXlfb3BzOiBzdHJpbmdbXTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjYW1lbGNhc2VcbiAgICAgICAga3R5OiBzdHJpbmc7XG4gICAgICAgIGs6IHN0cmluZztcbiAgICAgICAgZXh0OiBib29sZWFuO1xuICAgIH07XG4gICAgaXY6IHN0cmluZztcbiAgICBoYXNoZXM6IHtbYWxnOiBzdHJpbmddOiBzdHJpbmd9O1xuICAgIHY6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJTWVkaWFFdmVudEluZm8ge1xuICAgIHRodW1ibmFpbF91cmw/OiBzdHJpbmc7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgY2FtZWxjYXNlXG4gICAgdGh1bWJuYWlsX2ZpbGU/OiBJRW5jcnlwdGVkRmlsZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjYW1lbGNhc2VcbiAgICB0aHVtYm5haWxfaW5mbz86IHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjYW1lbGNhc2VcbiAgICAgICAgbWltZXR5cGU6IHN0cmluZztcbiAgICAgICAgdz86IG51bWJlcjtcbiAgICAgICAgaD86IG51bWJlcjtcbiAgICAgICAgc2l6ZT86IG51bWJlcjtcbiAgICB9O1xuICAgIG1pbWV0eXBlOiBzdHJpbmc7XG4gICAgdz86IG51bWJlcjtcbiAgICBoPzogbnVtYmVyO1xuICAgIHNpemU/OiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSU1lZGlhRXZlbnRDb250ZW50IHtcbiAgICBib2R5Pzogc3RyaW5nO1xuICAgIHVybD86IHN0cmluZzsgLy8gcmVxdWlyZWQgb24gdW5lbmNyeXB0ZWQgbWVkaWFcbiAgICBmaWxlPzogSUVuY3J5cHRlZEZpbGU7IC8vIHJlcXVpcmVkIGZvciAqZW5jcnlwdGVkKiBtZWRpYVxuICAgIGluZm8/OiBJTWVkaWFFdmVudEluZm87XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVByZXBhcmVkTWVkaWEgZXh0ZW5kcyBJTWVkaWFPYmplY3Qge1xuICAgIHRodW1ibmFpbD86IElNZWRpYU9iamVjdDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJTWVkaWFPYmplY3Qge1xuICAgIG14Yzogc3RyaW5nO1xuICAgIGZpbGU/OiBJRW5jcnlwdGVkRmlsZTtcbn1cblxuLyoqXG4gKiBQYXJzZXMgYW4gZXZlbnQgY29udGVudCBib2R5IGludG8gYSBwcmVwYXJlZCBtZWRpYSBvYmplY3QuIFRoaXMgcHJlcGFyZWQgbWVkaWEgb2JqZWN0XG4gKiBjYW4gYmUgdXNlZCB3aXRoIG90aGVyIGZ1bmN0aW9ucyB0byBtYW5pcHVsYXRlIHRoZSBtZWRpYS5cbiAqIEBwYXJhbSB7SU1lZGlhRXZlbnRDb250ZW50fSBjb250ZW50IFVucmVkYWN0ZWQgbWVkaWEgZXZlbnQgY29udGVudC4gU2VlIGludGVyZmFjZS5cbiAqIEByZXR1cm5zIHtJUHJlcGFyZWRNZWRpYX0gQSBwcmVwYXJlZCBtZWRpYSBvYmplY3QuXG4gKiBAdGhyb3dzIFRocm93cyBpZiB0aGUgZ2l2ZW4gY29udGVudCBjYW5ub3QgYmUgcGFja2FnZWQgaW50byBhIHByZXBhcmVkIG1lZGlhIG9iamVjdC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByZXBFdmVudENvbnRlbnRBc01lZGlhKGNvbnRlbnQ6IElNZWRpYUV2ZW50Q29udGVudCk6IElQcmVwYXJlZE1lZGlhIHtcbiAgICBsZXQgdGh1bWJuYWlsOiBJTWVkaWFPYmplY3QgPSBudWxsO1xuICAgIGlmIChjb250ZW50Py5pbmZvPy50aHVtYm5haWxfdXJsKSB7XG4gICAgICAgIHRodW1ibmFpbCA9IHtcbiAgICAgICAgICAgIG14YzogY29udGVudC5pbmZvLnRodW1ibmFpbF91cmwsXG4gICAgICAgICAgICBmaWxlOiBjb250ZW50LmluZm8udGh1bWJuYWlsX2ZpbGUsXG4gICAgICAgIH07XG4gICAgfSBlbHNlIGlmIChjb250ZW50Py5pbmZvPy50aHVtYm5haWxfZmlsZT8udXJsKSB7XG4gICAgICAgIHRodW1ibmFpbCA9IHtcbiAgICAgICAgICAgIG14YzogY29udGVudC5pbmZvLnRodW1ibmFpbF9maWxlLnVybCxcbiAgICAgICAgICAgIGZpbGU6IGNvbnRlbnQuaW5mby50aHVtYm5haWxfZmlsZSxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAoY29udGVudD8udXJsKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0aHVtYm5haWwsXG4gICAgICAgICAgICBteGM6IGNvbnRlbnQudXJsLFxuICAgICAgICAgICAgZmlsZTogY29udGVudC5maWxlLFxuICAgICAgICB9O1xuICAgIH0gZWxzZSBpZiAoY29udGVudD8uZmlsZT8udXJsKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0aHVtYm5haWwsXG4gICAgICAgICAgICBteGM6IGNvbnRlbnQuZmlsZS51cmwsXG4gICAgICAgICAgICBmaWxlOiBjb250ZW50LmZpbGUsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBmaWxlIHByb3ZpZGVkOiBjYW5ub3QgZGV0ZXJtaW5lIE1YQyBVUkkuIEhhcyBpdCBiZWVuIHJlZGFjdGVkP1wiKTtcbn1cbiJdfQ==