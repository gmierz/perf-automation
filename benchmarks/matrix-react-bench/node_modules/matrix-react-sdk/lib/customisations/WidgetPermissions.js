"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WidgetPermissionCustomisations = void 0;

/*
 * Copyright 2020 The Matrix.org Foundation C.I.C.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Populate this class with the details of your customisations when copying it.

/**
 * Approves the widget for capabilities that it requested, if any can be
 * approved. Typically this will be used to give certain widgets capabilities
 * without having to prompt the user to approve them. This cannot reject
 * capabilities that Element will be automatically granting, such as the
 * ability for Jitsi widgets to stay on screen - those will be approved
 * regardless.
 * @param {Widget} widget The widget to approve capabilities for.
 * @param {Set<Capability>} requestedCapabilities The capabilities the widget requested.
 * @returns {Set<Capability>} Resolves to the capabilities that are approved for use
 * by the widget. If none are approved, this should return an empty Set.
 */
async function preapproveCapabilities(widget, requestedCapabilities) {
  return new Set(); // no additional capabilities approved
} // This interface summarises all available customisation points and also marks
// them all as optional. This allows customisers to only define and export the
// customisations they need while still maintaining type safety.


// A real customisation module will define and export one or more of the
// customisation points that make up the interface above.
const WidgetPermissionCustomisations = {};
exports.WidgetPermissionCustomisations = WidgetPermissionCustomisations;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jdXN0b21pc2F0aW9ucy9XaWRnZXRQZXJtaXNzaW9ucy50cyJdLCJuYW1lcyI6WyJwcmVhcHByb3ZlQ2FwYWJpbGl0aWVzIiwid2lkZ2V0IiwicmVxdWVzdGVkQ2FwYWJpbGl0aWVzIiwiU2V0IiwiV2lkZ2V0UGVybWlzc2lvbkN1c3RvbWlzYXRpb25zIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZUEsc0JBQWYsQ0FDSUMsTUFESixFQUVJQyxxQkFGSixFQUc0QjtBQUN4QixTQUFPLElBQUlDLEdBQUosRUFBUCxDQUR3QixDQUNOO0FBQ3JCLEMsQ0FFRDtBQUNBO0FBQ0E7OztBQUtBO0FBQ0E7QUFDTyxNQUFNQyw4QkFBK0QsR0FBRyxFQUF4RSIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgMjAyMCBUaGUgTWF0cml4Lm9yZyBGb3VuZGF0aW9uIEMuSS5DLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuLy8gUG9wdWxhdGUgdGhpcyBjbGFzcyB3aXRoIHRoZSBkZXRhaWxzIG9mIHlvdXIgY3VzdG9taXNhdGlvbnMgd2hlbiBjb3B5aW5nIGl0LlxuaW1wb3J0IHsgQ2FwYWJpbGl0eSwgV2lkZ2V0IH0gZnJvbSBcIm1hdHJpeC13aWRnZXQtYXBpXCI7XG5cbi8qKlxuICogQXBwcm92ZXMgdGhlIHdpZGdldCBmb3IgY2FwYWJpbGl0aWVzIHRoYXQgaXQgcmVxdWVzdGVkLCBpZiBhbnkgY2FuIGJlXG4gKiBhcHByb3ZlZC4gVHlwaWNhbGx5IHRoaXMgd2lsbCBiZSB1c2VkIHRvIGdpdmUgY2VydGFpbiB3aWRnZXRzIGNhcGFiaWxpdGllc1xuICogd2l0aG91dCBoYXZpbmcgdG8gcHJvbXB0IHRoZSB1c2VyIHRvIGFwcHJvdmUgdGhlbS4gVGhpcyBjYW5ub3QgcmVqZWN0XG4gKiBjYXBhYmlsaXRpZXMgdGhhdCBFbGVtZW50IHdpbGwgYmUgYXV0b21hdGljYWxseSBncmFudGluZywgc3VjaCBhcyB0aGVcbiAqIGFiaWxpdHkgZm9yIEppdHNpIHdpZGdldHMgdG8gc3RheSBvbiBzY3JlZW4gLSB0aG9zZSB3aWxsIGJlIGFwcHJvdmVkXG4gKiByZWdhcmRsZXNzLlxuICogQHBhcmFtIHtXaWRnZXR9IHdpZGdldCBUaGUgd2lkZ2V0IHRvIGFwcHJvdmUgY2FwYWJpbGl0aWVzIGZvci5cbiAqIEBwYXJhbSB7U2V0PENhcGFiaWxpdHk+fSByZXF1ZXN0ZWRDYXBhYmlsaXRpZXMgVGhlIGNhcGFiaWxpdGllcyB0aGUgd2lkZ2V0IHJlcXVlc3RlZC5cbiAqIEByZXR1cm5zIHtTZXQ8Q2FwYWJpbGl0eT59IFJlc29sdmVzIHRvIHRoZSBjYXBhYmlsaXRpZXMgdGhhdCBhcmUgYXBwcm92ZWQgZm9yIHVzZVxuICogYnkgdGhlIHdpZGdldC4gSWYgbm9uZSBhcmUgYXBwcm92ZWQsIHRoaXMgc2hvdWxkIHJldHVybiBhbiBlbXB0eSBTZXQuXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIHByZWFwcHJvdmVDYXBhYmlsaXRpZXMoXG4gICAgd2lkZ2V0OiBXaWRnZXQsXG4gICAgcmVxdWVzdGVkQ2FwYWJpbGl0aWVzOiBTZXQ8Q2FwYWJpbGl0eT4sXG4pOiBQcm9taXNlPFNldDxDYXBhYmlsaXR5Pj4ge1xuICAgIHJldHVybiBuZXcgU2V0KCk7IC8vIG5vIGFkZGl0aW9uYWwgY2FwYWJpbGl0aWVzIGFwcHJvdmVkXG59XG5cbi8vIFRoaXMgaW50ZXJmYWNlIHN1bW1hcmlzZXMgYWxsIGF2YWlsYWJsZSBjdXN0b21pc2F0aW9uIHBvaW50cyBhbmQgYWxzbyBtYXJrc1xuLy8gdGhlbSBhbGwgYXMgb3B0aW9uYWwuIFRoaXMgYWxsb3dzIGN1c3RvbWlzZXJzIHRvIG9ubHkgZGVmaW5lIGFuZCBleHBvcnQgdGhlXG4vLyBjdXN0b21pc2F0aW9ucyB0aGV5IG5lZWQgd2hpbGUgc3RpbGwgbWFpbnRhaW5pbmcgdHlwZSBzYWZldHkuXG5leHBvcnQgaW50ZXJmYWNlIElXaWRnZXRQZXJtaXNzaW9uQ3VzdG9taXNhdGlvbnMge1xuICAgIHByZWFwcHJvdmVDYXBhYmlsaXRpZXM/OiB0eXBlb2YgcHJlYXBwcm92ZUNhcGFiaWxpdGllcztcbn1cblxuLy8gQSByZWFsIGN1c3RvbWlzYXRpb24gbW9kdWxlIHdpbGwgZGVmaW5lIGFuZCBleHBvcnQgb25lIG9yIG1vcmUgb2YgdGhlXG4vLyBjdXN0b21pc2F0aW9uIHBvaW50cyB0aGF0IG1ha2UgdXAgdGhlIGludGVyZmFjZSBhYm92ZS5cbmV4cG9ydCBjb25zdCBXaWRnZXRQZXJtaXNzaW9uQ3VzdG9taXNhdGlvbnM6IElXaWRnZXRQZXJtaXNzaW9uQ3VzdG9taXNhdGlvbnMgPSB7fTtcbiJdfQ==