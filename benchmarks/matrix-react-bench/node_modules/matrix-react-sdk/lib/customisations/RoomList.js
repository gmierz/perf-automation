"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RoomListCustomisations = void 0;

/*
 * Copyright 2020 The Matrix.org Foundation C.I.C.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Populate this file with the details of your customisations when copying it.

/**
 * Determines if a room is visible in the room list or not. By default,
 * all rooms are visible. Where special handling is performed by Element,
 * those rooms will not be able to override their visibility in the room
 * list - Element will make the decision without calling this function.
 *
 * This function should be as fast as possible to avoid slowing down the
 * client.
 * @param {Room} room The room to check the visibility of.
 * @returns {boolean} True if the room should be visible, false otherwise.
 */
function isRoomVisible(room) {
  return true;
} // This interface summarises all available customisation points and also marks
// them all as optional. This allows customisers to only define and export the
// customisations they need while still maintaining type safety.


// A real customisation module will define and export one or more of the
// customisation points that make up the interface above.
const RoomListCustomisations = {};
exports.RoomListCustomisations = RoomListCustomisations;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jdXN0b21pc2F0aW9ucy9Sb29tTGlzdC50cyJdLCJuYW1lcyI6WyJpc1Jvb21WaXNpYmxlIiwicm9vbSIsIlJvb21MaXN0Q3VzdG9taXNhdGlvbnMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFJQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0EsYUFBVCxDQUF1QkMsSUFBdkIsRUFBNEM7QUFDeEMsU0FBTyxJQUFQO0FBQ0gsQyxDQUVEO0FBQ0E7QUFDQTs7O0FBS0E7QUFDQTtBQUNPLE1BQU1DLHNCQUErQyxHQUFHLEVBQXhEIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAyMDIwIFRoZSBNYXRyaXgub3JnIEZvdW5kYXRpb24gQy5JLkMuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBSb29tIH0gZnJvbSBcIm1hdHJpeC1qcy1zZGsvc3JjL21vZGVscy9yb29tXCI7XG5cbi8vIFBvcHVsYXRlIHRoaXMgZmlsZSB3aXRoIHRoZSBkZXRhaWxzIG9mIHlvdXIgY3VzdG9taXNhdGlvbnMgd2hlbiBjb3B5aW5nIGl0LlxuXG4vKipcbiAqIERldGVybWluZXMgaWYgYSByb29tIGlzIHZpc2libGUgaW4gdGhlIHJvb20gbGlzdCBvciBub3QuIEJ5IGRlZmF1bHQsXG4gKiBhbGwgcm9vbXMgYXJlIHZpc2libGUuIFdoZXJlIHNwZWNpYWwgaGFuZGxpbmcgaXMgcGVyZm9ybWVkIGJ5IEVsZW1lbnQsXG4gKiB0aG9zZSByb29tcyB3aWxsIG5vdCBiZSBhYmxlIHRvIG92ZXJyaWRlIHRoZWlyIHZpc2liaWxpdHkgaW4gdGhlIHJvb21cbiAqIGxpc3QgLSBFbGVtZW50IHdpbGwgbWFrZSB0aGUgZGVjaXNpb24gd2l0aG91dCBjYWxsaW5nIHRoaXMgZnVuY3Rpb24uXG4gKlxuICogVGhpcyBmdW5jdGlvbiBzaG91bGQgYmUgYXMgZmFzdCBhcyBwb3NzaWJsZSB0byBhdm9pZCBzbG93aW5nIGRvd24gdGhlXG4gKiBjbGllbnQuXG4gKiBAcGFyYW0ge1Jvb219IHJvb20gVGhlIHJvb20gdG8gY2hlY2sgdGhlIHZpc2liaWxpdHkgb2YuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgcm9vbSBzaG91bGQgYmUgdmlzaWJsZSwgZmFsc2Ugb3RoZXJ3aXNlLlxuICovXG5mdW5jdGlvbiBpc1Jvb21WaXNpYmxlKHJvb206IFJvb20pOiBib29sZWFuIHtcbiAgICByZXR1cm4gdHJ1ZTtcbn1cblxuLy8gVGhpcyBpbnRlcmZhY2Ugc3VtbWFyaXNlcyBhbGwgYXZhaWxhYmxlIGN1c3RvbWlzYXRpb24gcG9pbnRzIGFuZCBhbHNvIG1hcmtzXG4vLyB0aGVtIGFsbCBhcyBvcHRpb25hbC4gVGhpcyBhbGxvd3MgY3VzdG9taXNlcnMgdG8gb25seSBkZWZpbmUgYW5kIGV4cG9ydCB0aGVcbi8vIGN1c3RvbWlzYXRpb25zIHRoZXkgbmVlZCB3aGlsZSBzdGlsbCBtYWludGFpbmluZyB0eXBlIHNhZmV0eS5cbmV4cG9ydCBpbnRlcmZhY2UgSVJvb21MaXN0Q3VzdG9taXNhdGlvbnMge1xuICAgIGlzUm9vbVZpc2libGU/OiB0eXBlb2YgaXNSb29tVmlzaWJsZTtcbn1cblxuLy8gQSByZWFsIGN1c3RvbWlzYXRpb24gbW9kdWxlIHdpbGwgZGVmaW5lIGFuZCBleHBvcnQgb25lIG9yIG1vcmUgb2YgdGhlXG4vLyBjdXN0b21pc2F0aW9uIHBvaW50cyB0aGF0IG1ha2UgdXAgdGhlIGludGVyZmFjZSBhYm92ZS5cbmV4cG9ydCBjb25zdCBSb29tTGlzdEN1c3RvbWlzYXRpb25zOiBJUm9vbUxpc3RDdXN0b21pc2F0aW9ucyA9IHt9O1xuIl19