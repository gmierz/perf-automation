"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _languageHandler = require("../languageHandler");

var _AutocompleteProvider = _interopRequireDefault(require("./AutocompleteProvider"));

var _Components = require("./Components");

var _QueryMatcher = _interopRequireDefault(require("./QueryMatcher"));

var _lodash = require("lodash");

var _MatrixClientPeg = require("../MatrixClientPeg");

var _Permalinks = require("../utils/permalinks/Permalinks");

var _MemberAvatar = _interopRequireDefault(require("../components/views/avatars/MemberAvatar"));

/*
Copyright 2016 Aviral Dasgupta
Copyright 2017 Vector Creations Ltd
Copyright 2017, 2018 New Vector Ltd
Copyright 2018 Michael Telatynski <7t3chguy@gmail.com>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const USER_REGEX = /\B@\S*/g; // used when you hit 'tab' - we allow some separator chars at the beginning
// to allow you to tab-complete /mat into /(matthew)

const FORCED_USER_REGEX = /[^/,:; \t\n]\S*/g;

class UserProvider extends _AutocompleteProvider.default {
  constructor(_room, renderingType) {
    super({
      commandRegex: USER_REGEX,
      forcedCommandRegex: FORCED_USER_REGEX,
      renderingType
    });
    (0, _defineProperty2.default)(this, "matcher", void 0);
    (0, _defineProperty2.default)(this, "users", void 0);
    (0, _defineProperty2.default)(this, "room", void 0);
    (0, _defineProperty2.default)(this, "onRoomTimeline", (ev, room, toStartOfTimeline, removed, data) => {
      if (!room) return;
      if (removed) return;
      if (room.roomId !== this.room.roomId) return; // ignore events from filtered timelines

      if (data.timeline.getTimelineSet() !== room.getUnfilteredTimelineSet()) return; // ignore anything but real-time updates at the end of the room:
      // updates from pagination will happen when the paginate completes.

      if (toStartOfTimeline || !data || !data.liveEvent) return; // TODO: lazyload if we have no ev.sender room member?

      this.onUserSpoke(ev.sender);
    });
    (0, _defineProperty2.default)(this, "onRoomStateMember", (ev, state, member) => {
      // ignore members in other rooms
      if (member.roomId !== this.room.roomId) {
        return;
      } // blow away the users cache


      this.users = null;
    });
    this.room = _room;
    this.matcher = new _QueryMatcher.default([], {
      keys: ['name'],
      funcs: [obj => obj.userId.slice(1)],
      // index by user id minus the leading '@'
      shouldMatchWordsOnly: false
    });

    _MatrixClientPeg.MatrixClientPeg.get().on("Room.timeline", this.onRoomTimeline);

    _MatrixClientPeg.MatrixClientPeg.get().on("RoomState.members", this.onRoomStateMember);
  }

  destroy() {
    if (_MatrixClientPeg.MatrixClientPeg.get()) {
      _MatrixClientPeg.MatrixClientPeg.get().removeListener("Room.timeline", this.onRoomTimeline);

      _MatrixClientPeg.MatrixClientPeg.get().removeListener("RoomState.members", this.onRoomStateMember);
    }
  }

  async getCompletions(rawQuery, selection, force = false, limit = -1) {
    // lazy-load user list into matcher
    if (!this.users) this.makeUsers();
    let completions = [];
    const {
      command,
      range
    } = this.getCurrentCommand(rawQuery, selection, force);
    if (!command) return completions;
    const fullMatch = command[0]; // Don't search if the query is a single "@"

    if (fullMatch && fullMatch !== '@') {
      // Don't include the '@' in our search query - it's only used as a way to trigger completion
      const query = fullMatch.startsWith('@') ? fullMatch.substring(1) : fullMatch;
      completions = this.matcher.match(query, limit).map(user => {
        const displayName = user.name || user.userId || '';
        return {
          // Length of completion should equal length of text in decorator. draft-js
          // relies on the length of the entity === length of the text in the decoration.
          completion: user.rawDisplayName,
          completionId: user.userId,
          type: "user",
          suffix: selection.beginning && range.start === 0 ? ': ' : ' ',
          href: (0, _Permalinks.makeUserPermalink)(user.userId),
          component: /*#__PURE__*/_react.default.createElement(_Components.PillCompletion, {
            title: displayName,
            description: user.userId
          }, /*#__PURE__*/_react.default.createElement(_MemberAvatar.default, {
            member: user,
            width: 24,
            height: 24
          })),
          range
        };
      });
    }

    return completions;
  }

  getName() {
    return (0, _languageHandler._t)('Users');
  }

  makeUsers() {
    const events = this.room.getLiveTimeline().getEvents();
    const lastSpoken = {};

    for (const event of events) {
      lastSpoken[event.getSender()] = event.getTs();
    }

    const currentUserId = _MatrixClientPeg.MatrixClientPeg.get().credentials.userId;

    this.users = this.room.getJoinedMembers().filter(({
      userId
    }) => userId !== currentUserId);
    this.users = this.users.concat(this.room.getMembersWithMembership("invite"));
    this.users = (0, _lodash.sortBy)(this.users, member => 1E20 - lastSpoken[member.userId] || 1E20);
    this.matcher.setObjects(this.users);
  }

  onUserSpoke(user) {
    if (!this.users) return;
    if (!user) return;
    if (user.userId === _MatrixClientPeg.MatrixClientPeg.get().credentials.userId) return; // Move the user that spoke to the front of the array

    this.users.splice(this.users.findIndex(user2 => user2.userId === user.userId), 1);
    this.users = [user, ...this.users];
    this.matcher.setObjects(this.users);
  }

  renderCompletions(completions) {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_Autocomplete_Completion_container_pill",
      role: "presentation",
      "aria-label": (0, _languageHandler._t)("User Autocomplete")
    }, completions);
  }

  shouldForceComplete() {
    return true;
  }

}

exports.default = UserProvider;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,