"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _lodash = require("lodash");

var _languageHandler = require("../languageHandler");

var _AutocompleteProvider = _interopRequireDefault(require("./AutocompleteProvider"));

var _MatrixClientPeg = require("../MatrixClientPeg");

var _QueryMatcher = _interopRequireDefault(require("./QueryMatcher"));

var _Components = require("./Components");

var _Permalinks = require("../utils/permalinks/Permalinks");

var _RoomAvatar = _interopRequireDefault(require("../components/views/avatars/RoomAvatar"));

var _SpaceStore = _interopRequireDefault(require("../stores/spaces/SpaceStore"));

/*
Copyright 2016 Aviral Dasgupta
Copyright 2018 Michael Telatynski <7t3chguy@gmail.com>
Copyright 2017, 2018, 2021 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const ROOM_REGEX = /\B#\S*/g; // Prefer canonical aliases over non-canonical ones

function canonicalScore(displayedAlias, room) {
  return displayedAlias === room.getCanonicalAlias() ? 0 : 1;
}

function matcherObject(room, displayedAlias, matchName = "") {
  return {
    room,
    matchName,
    displayedAlias
  };
}

class RoomProvider extends _AutocompleteProvider.default {
  constructor(room, renderingType) {
    super({
      commandRegex: ROOM_REGEX,
      renderingType
    });
    (0, _defineProperty2.default)(this, "matcher", void 0);
    this.matcher = new _QueryMatcher.default([], {
      keys: ['displayedAlias', 'matchName']
    });
  }

  getRooms() {
    const cli = _MatrixClientPeg.MatrixClientPeg.get();

    let rooms = cli.getVisibleRooms(); // if spaces are enabled then filter them out here as they get their own autocomplete provider

    if (_SpaceStore.default.spacesEnabled) {
      rooms = rooms.filter(r => !r.isSpaceRoom());
    }

    return rooms;
  }

  async getCompletions(query, selection, force = false, limit = -1) {
    let completions = [];
    const {
      command,
      range
    } = this.getCurrentCommand(query, selection, force);

    if (command) {
      // the only reason we need to do this is because Fuse only matches on properties
      let matcherObjects = this.getRooms().reduce((aliases, room) => {
        if (room.getCanonicalAlias()) {
          aliases = aliases.concat(matcherObject(room, room.getCanonicalAlias(), room.name));
        }

        if (room.getAltAliases().length) {
          const altAliases = room.getAltAliases().map(alias => matcherObject(room, alias));
          aliases = aliases.concat(altAliases);
        }

        return aliases;
      }, []); // Filter out any matches where the user will have also autocompleted new rooms

      matcherObjects = matcherObjects.filter(r => {
        const tombstone = r.room.currentState.getStateEvents("m.room.tombstone", "");

        if (tombstone && tombstone.getContent() && tombstone.getContent()['replacement_room']) {
          const hasReplacementRoom = matcherObjects.some(r2 => r2.room.roomId === tombstone.getContent()['replacement_room']);
          return !hasReplacementRoom;
        }

        return true;
      });
      this.matcher.setObjects(matcherObjects);
      const matchedString = command[0];
      completions = this.matcher.match(matchedString, limit);
      completions = (0, _lodash.sortBy)(completions, [c => canonicalScore(c.displayedAlias, c.room), c => c.displayedAlias.length]);
      completions = (0, _lodash.uniqBy)(completions, match => match.room);
      completions = completions.map(room => {
        return {
          completion: room.displayedAlias,
          completionId: room.room.roomId,
          type: "room",
          suffix: ' ',
          href: (0, _Permalinks.makeRoomPermalink)(room.displayedAlias),
          component: /*#__PURE__*/_react.default.createElement(_Components.PillCompletion, {
            title: room.room.name,
            description: room.displayedAlias
          }, /*#__PURE__*/_react.default.createElement(_RoomAvatar.default, {
            width: 24,
            height: 24,
            room: room.room
          })),
          range
        };
      }).filter(completion => !!completion.completion && completion.completion.length > 0);
    }

    return completions;
  }

  getName() {
    return (0, _languageHandler._t)('Rooms');
  }

  renderCompletions(completions) {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_Autocomplete_Completion_container_pill mx_Autocomplete_Completion_container_truncate",
      role: "presentation",
      "aria-label": (0, _languageHandler._t)("Room Autocomplete")
    }, completions);
  }

}

exports.default = RoomProvider;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,