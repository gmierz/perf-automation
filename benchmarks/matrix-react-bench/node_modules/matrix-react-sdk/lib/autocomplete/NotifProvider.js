"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _AutocompleteProvider = _interopRequireDefault(require("./AutocompleteProvider"));

var _languageHandler = require("../languageHandler");

var _MatrixClientPeg = require("../MatrixClientPeg");

var _Components = require("./Components");

var _RoomAvatar = _interopRequireDefault(require("../components/views/avatars/RoomAvatar"));

/*
Copyright 2017 New Vector Ltd

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const AT_ROOM_REGEX = /@\S*/g;

class NotifProvider extends _AutocompleteProvider.default {
  constructor(room, renderingType) {
    super({
      commandRegex: AT_ROOM_REGEX,
      renderingType
    });
    this.room = room;
  }

  async getCompletions(query, selection, force = false, limit = -1) {
    const client = _MatrixClientPeg.MatrixClientPeg.get();

    if (!this.room.currentState.mayTriggerNotifOfType('room', client.credentials.userId)) return [];
    const {
      command,
      range
    } = this.getCurrentCommand(query, selection, force);

    if (command && command[0] && '@room'.startsWith(command[0]) && command[0].length > 1) {
      return [{
        completion: '@room',
        completionId: '@room',
        type: "at-room",
        suffix: ' ',
        component: /*#__PURE__*/_react.default.createElement(_Components.PillCompletion, {
          title: "@room",
          description: (0, _languageHandler._t)("Notify the whole room")
        }, /*#__PURE__*/_react.default.createElement(_RoomAvatar.default, {
          width: 24,
          height: 24,
          room: this.room
        })),
        range
      }];
    }

    return [];
  }

  getName() {
    return '❗️ ' + (0, _languageHandler._t)('Room Notification');
  }

  renderCompletions(completions) {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_Autocomplete_Completion_container_pill mx_Autocomplete_Completion_container_truncate",
      role: "presentation",
      "aria-label": (0, _languageHandler._t)("Notification Autocomplete")
    }, completions);
  }

}

exports.default = NotifProvider;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hdXRvY29tcGxldGUvTm90aWZQcm92aWRlci50c3giXSwibmFtZXMiOlsiQVRfUk9PTV9SRUdFWCIsIk5vdGlmUHJvdmlkZXIiLCJBdXRvY29tcGxldGVQcm92aWRlciIsImNvbnN0cnVjdG9yIiwicm9vbSIsInJlbmRlcmluZ1R5cGUiLCJjb21tYW5kUmVnZXgiLCJnZXRDb21wbGV0aW9ucyIsInF1ZXJ5Iiwic2VsZWN0aW9uIiwiZm9yY2UiLCJsaW1pdCIsImNsaWVudCIsIk1hdHJpeENsaWVudFBlZyIsImdldCIsImN1cnJlbnRTdGF0ZSIsIm1heVRyaWdnZXJOb3RpZk9mVHlwZSIsImNyZWRlbnRpYWxzIiwidXNlcklkIiwiY29tbWFuZCIsInJhbmdlIiwiZ2V0Q3VycmVudENvbW1hbmQiLCJzdGFydHNXaXRoIiwibGVuZ3RoIiwiY29tcGxldGlvbiIsImNvbXBsZXRpb25JZCIsInR5cGUiLCJzdWZmaXgiLCJjb21wb25lbnQiLCJnZXROYW1lIiwicmVuZGVyQ29tcGxldGlvbnMiLCJjb21wbGV0aW9ucyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBZ0JBOztBQUdBOztBQUNBOztBQUNBOztBQUNBOztBQUVBOztBQXhCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFhQSxNQUFNQSxhQUFhLEdBQUcsT0FBdEI7O0FBRWUsTUFBTUMsYUFBTixTQUE0QkMsNkJBQTVCLENBQWlEO0FBQzVEQyxFQUFBQSxXQUFXLENBQVFDLElBQVIsRUFBb0JDLGFBQXBCLEVBQTJEO0FBQ2xFLFVBQU07QUFBRUMsTUFBQUEsWUFBWSxFQUFFTixhQUFoQjtBQUErQkssTUFBQUE7QUFBL0IsS0FBTjtBQURrRSxTQUFuREQsSUFBbUQsR0FBbkRBLElBQW1EO0FBRXJFOztBQUVtQixRQUFkRyxjQUFjLENBQ2hCQyxLQURnQixFQUVoQkMsU0FGZ0IsRUFHaEJDLEtBQUssR0FBRyxLQUhRLEVBSWhCQyxLQUFLLEdBQUcsQ0FBQyxDQUpPLEVBS007QUFDdEIsVUFBTUMsTUFBTSxHQUFHQyxpQ0FBZ0JDLEdBQWhCLEVBQWY7O0FBRUEsUUFBSSxDQUFDLEtBQUtWLElBQUwsQ0FBVVcsWUFBVixDQUF1QkMscUJBQXZCLENBQTZDLE1BQTdDLEVBQXFESixNQUFNLENBQUNLLFdBQVAsQ0FBbUJDLE1BQXhFLENBQUwsRUFBc0YsT0FBTyxFQUFQO0FBRXRGLFVBQU07QUFBRUMsTUFBQUEsT0FBRjtBQUFXQyxNQUFBQTtBQUFYLFFBQXFCLEtBQUtDLGlCQUFMLENBQXVCYixLQUF2QixFQUE4QkMsU0FBOUIsRUFBeUNDLEtBQXpDLENBQTNCOztBQUNBLFFBQUlTLE9BQU8sSUFBSUEsT0FBTyxDQUFDLENBQUQsQ0FBbEIsSUFBeUIsUUFBUUcsVUFBUixDQUFtQkgsT0FBTyxDQUFDLENBQUQsQ0FBMUIsQ0FBekIsSUFBMkRBLE9BQU8sQ0FBQyxDQUFELENBQVAsQ0FBV0ksTUFBWCxHQUFvQixDQUFuRixFQUFzRjtBQUNsRixhQUFPLENBQUM7QUFDSkMsUUFBQUEsVUFBVSxFQUFFLE9BRFI7QUFFSkMsUUFBQUEsWUFBWSxFQUFFLE9BRlY7QUFHSkMsUUFBQUEsSUFBSSxFQUFFLFNBSEY7QUFJSkMsUUFBQUEsTUFBTSxFQUFFLEdBSko7QUFLSkMsUUFBQUEsU0FBUyxlQUNMLDZCQUFDLDBCQUFEO0FBQWdCLFVBQUEsS0FBSyxFQUFDLE9BQXRCO0FBQThCLFVBQUEsV0FBVyxFQUFFLHlCQUFHLHVCQUFIO0FBQTNDLHdCQUNJLDZCQUFDLG1CQUFEO0FBQVksVUFBQSxLQUFLLEVBQUUsRUFBbkI7QUFBdUIsVUFBQSxNQUFNLEVBQUUsRUFBL0I7QUFBbUMsVUFBQSxJQUFJLEVBQUUsS0FBS3hCO0FBQTlDLFVBREosQ0FOQTtBQVVKZ0IsUUFBQUE7QUFWSSxPQUFELENBQVA7QUFZSDs7QUFDRCxXQUFPLEVBQVA7QUFDSDs7QUFFRFMsRUFBQUEsT0FBTyxHQUFHO0FBQ04sV0FBTyxRQUFRLHlCQUFHLG1CQUFILENBQWY7QUFDSDs7QUFFREMsRUFBQUEsaUJBQWlCLENBQUNDLFdBQUQsRUFBa0Q7QUFDL0Qsd0JBQ0k7QUFDSSxNQUFBLFNBQVMsRUFBQyx5RkFEZDtBQUVJLE1BQUEsSUFBSSxFQUFDLGNBRlQ7QUFHSSxvQkFBWSx5QkFBRywyQkFBSDtBQUhoQixPQUtNQSxXQUxOLENBREo7QUFTSDs7QUEvQzJEIiwic291cmNlc0NvbnRlbnQiOlsiLypcbkNvcHlyaWdodCAyMDE3IE5ldyBWZWN0b3IgTHRkXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFJvb20gfSBmcm9tIFwibWF0cml4LWpzLXNkay9zcmMvbW9kZWxzL3Jvb21cIjtcblxuaW1wb3J0IEF1dG9jb21wbGV0ZVByb3ZpZGVyIGZyb20gJy4vQXV0b2NvbXBsZXRlUHJvdmlkZXInO1xuaW1wb3J0IHsgX3QgfSBmcm9tICcuLi9sYW5ndWFnZUhhbmRsZXInO1xuaW1wb3J0IHsgTWF0cml4Q2xpZW50UGVnIH0gZnJvbSAnLi4vTWF0cml4Q2xpZW50UGVnJztcbmltcG9ydCB7IFBpbGxDb21wbGV0aW9uIH0gZnJvbSAnLi9Db21wb25lbnRzJztcbmltcG9ydCB7IElDb21wbGV0aW9uLCBJU2VsZWN0aW9uUmFuZ2UgfSBmcm9tIFwiLi9BdXRvY29tcGxldGVyXCI7XG5pbXBvcnQgUm9vbUF2YXRhciBmcm9tICcuLi9jb21wb25lbnRzL3ZpZXdzL2F2YXRhcnMvUm9vbUF2YXRhcic7XG5pbXBvcnQgeyBUaW1lbGluZVJlbmRlcmluZ1R5cGUgfSBmcm9tICcuLi9jb250ZXh0cy9Sb29tQ29udGV4dCc7XG5cbmNvbnN0IEFUX1JPT01fUkVHRVggPSAvQFxcUyovZztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTm90aWZQcm92aWRlciBleHRlbmRzIEF1dG9jb21wbGV0ZVByb3ZpZGVyIHtcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgcm9vbTogUm9vbSwgcmVuZGVyaW5nVHlwZT86IFRpbWVsaW5lUmVuZGVyaW5nVHlwZSkge1xuICAgICAgICBzdXBlcih7IGNvbW1hbmRSZWdleDogQVRfUk9PTV9SRUdFWCwgcmVuZGVyaW5nVHlwZSB9KTtcbiAgICB9XG5cbiAgICBhc3luYyBnZXRDb21wbGV0aW9ucyhcbiAgICAgICAgcXVlcnk6IHN0cmluZyxcbiAgICAgICAgc2VsZWN0aW9uOiBJU2VsZWN0aW9uUmFuZ2UsXG4gICAgICAgIGZvcmNlID0gZmFsc2UsXG4gICAgICAgIGxpbWl0ID0gLTEsXG4gICAgKTogUHJvbWlzZTxJQ29tcGxldGlvbltdPiB7XG4gICAgICAgIGNvbnN0IGNsaWVudCA9IE1hdHJpeENsaWVudFBlZy5nZXQoKTtcblxuICAgICAgICBpZiAoIXRoaXMucm9vbS5jdXJyZW50U3RhdGUubWF5VHJpZ2dlck5vdGlmT2ZUeXBlKCdyb29tJywgY2xpZW50LmNyZWRlbnRpYWxzLnVzZXJJZCkpIHJldHVybiBbXTtcblxuICAgICAgICBjb25zdCB7IGNvbW1hbmQsIHJhbmdlIH0gPSB0aGlzLmdldEN1cnJlbnRDb21tYW5kKHF1ZXJ5LCBzZWxlY3Rpb24sIGZvcmNlKTtcbiAgICAgICAgaWYgKGNvbW1hbmQgJiYgY29tbWFuZFswXSAmJiAnQHJvb20nLnN0YXJ0c1dpdGgoY29tbWFuZFswXSkgJiYgY29tbWFuZFswXS5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICByZXR1cm4gW3tcbiAgICAgICAgICAgICAgICBjb21wbGV0aW9uOiAnQHJvb20nLFxuICAgICAgICAgICAgICAgIGNvbXBsZXRpb25JZDogJ0Byb29tJyxcbiAgICAgICAgICAgICAgICB0eXBlOiBcImF0LXJvb21cIixcbiAgICAgICAgICAgICAgICBzdWZmaXg6ICcgJyxcbiAgICAgICAgICAgICAgICBjb21wb25lbnQ6IChcbiAgICAgICAgICAgICAgICAgICAgPFBpbGxDb21wbGV0aW9uIHRpdGxlPVwiQHJvb21cIiBkZXNjcmlwdGlvbj17X3QoXCJOb3RpZnkgdGhlIHdob2xlIHJvb21cIil9PlxuICAgICAgICAgICAgICAgICAgICAgICAgPFJvb21BdmF0YXIgd2lkdGg9ezI0fSBoZWlnaHQ9ezI0fSByb29tPXt0aGlzLnJvb219IC8+XG4gICAgICAgICAgICAgICAgICAgIDwvUGlsbENvbXBsZXRpb24+XG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICByYW5nZSxcbiAgICAgICAgICAgIH1dO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICBnZXROYW1lKCkge1xuICAgICAgICByZXR1cm4gJ+Kdl++4jyAnICsgX3QoJ1Jvb20gTm90aWZpY2F0aW9uJyk7XG4gICAgfVxuXG4gICAgcmVuZGVyQ29tcGxldGlvbnMoY29tcGxldGlvbnM6IFJlYWN0LlJlYWN0Tm9kZVtdKTogUmVhY3QuUmVhY3ROb2RlIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJteF9BdXRvY29tcGxldGVfQ29tcGxldGlvbl9jb250YWluZXJfcGlsbCBteF9BdXRvY29tcGxldGVfQ29tcGxldGlvbl9jb250YWluZXJfdHJ1bmNhdGVcIlxuICAgICAgICAgICAgICAgIHJvbGU9XCJwcmVzZW50YXRpb25cIlxuICAgICAgICAgICAgICAgIGFyaWEtbGFiZWw9e190KFwiTm90aWZpY2F0aW9uIEF1dG9jb21wbGV0ZVwiKX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICB7IGNvbXBsZXRpb25zIH1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICApO1xuICAgIH1cbn1cbiJdfQ==