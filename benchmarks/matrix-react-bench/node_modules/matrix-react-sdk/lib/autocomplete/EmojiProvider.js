"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _languageHandler = require("../languageHandler");

var _AutocompleteProvider = _interopRequireDefault(require("./AutocompleteProvider"));

var _QueryMatcher = _interopRequireDefault(require("./QueryMatcher"));

var _Components = require("./Components");

var _lodash = require("lodash");

var _SettingsStore = _interopRequireDefault(require("../settings/SettingsStore"));

var _emoji = require("../emoji");

var _emoticon = _interopRequireDefault(require("emojibase-regex/emoticon"));

/*
Copyright 2016 Aviral Dasgupta
Copyright 2017 Vector Creations Ltd
Copyright 2017, 2018 New Vector Ltd
Copyright 2019 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const LIMIT = 20; // Match for ascii-style ";-)" emoticons or ":wink:" shortcodes provided by emojibase
// anchored to only match from the start of parts otherwise it'll show emoji suggestions whilst typing matrix IDs

const EMOJI_REGEX = new RegExp('(' + _emoticon.default.source + '|(?:^|\\s):[+-\\w]*:?)$', 'g');

const SORTED_EMOJI = _emoji.EMOJI.sort((a, b) => {
  if (a.group === b.group) {
    return a.order - b.order;
  }

  return a.group - b.group;
}).map((emoji, index) => ({
  emoji,
  // Include the index so that we can preserve the original order
  _orderBy: index
}));

function score(query, space) {
  const index = space.indexOf(query);

  if (index === -1) {
    return Infinity;
  } else {
    return index;
  }
}

class EmojiProvider extends _AutocompleteProvider.default {
  constructor(room, renderingType) {
    super({
      commandRegex: EMOJI_REGEX,
      renderingType
    });
    (0, _defineProperty2.default)(this, "matcher", void 0);
    (0, _defineProperty2.default)(this, "nameMatcher", void 0);
    this.matcher = new _QueryMatcher.default(SORTED_EMOJI, {
      keys: [],
      funcs: [o => o.emoji.shortcodes.map(s => `:${s}:`)],
      // For matching against ascii equivalents
      shouldMatchWordsOnly: false
    });
    this.nameMatcher = new _QueryMatcher.default(SORTED_EMOJI, {
      keys: ['emoji.annotation'],
      // For removing punctuation
      shouldMatchWordsOnly: true
    });
  }

  async getCompletions(query, selection, force, limit = -1) {
    if (!_SettingsStore.default.getValue("MessageComposerInput.suggestEmoji")) {
      return []; // don't give any suggestions if the user doesn't want them
    }

    let completions = [];
    const {
      command,
      range
    } = this.getCurrentCommand(query, selection);

    if (command && command[0].length > 2) {
      const matchedString = command[0];
      completions = this.matcher.match(matchedString, limit); // Do second match with shouldMatchWordsOnly in order to match against 'name'

      completions = completions.concat(this.nameMatcher.match(matchedString));
      const sorters = []; // make sure that emoticons come first

      sorters.push(c => score(matchedString, c.emoji.emoticon || "")); // then sort by score (Infinity if matchedString not in shortcode)

      sorters.push(c => score(matchedString, c.emoji.shortcodes[0])); // then sort by max score of all shortcodes, trim off the `:`

      sorters.push(c => Math.min(...c.emoji.shortcodes.map(s => score(matchedString.substring(1), s)))); // If the matchedString is not empty, sort by length of shortcode. Example:
      //  matchedString = ":bookmark"
      //  completions = [":bookmark:", ":bookmark_tabs:", ...]

      if (matchedString.length > 1) {
        sorters.push(c => c.emoji.shortcodes[0].length);
      } // Finally, sort by original ordering


      sorters.push(c => c._orderBy);
      completions = (0, _lodash.sortBy)((0, _lodash.uniq)(completions), sorters);
      completions = completions.map(c => ({
        completion: c.emoji.unicode,
        component: /*#__PURE__*/_react.default.createElement(_Components.PillCompletion, {
          title: `:${c.emoji.shortcodes[0]}:`,
          "aria-label": c.emoji.unicode
        }, /*#__PURE__*/_react.default.createElement("span", null, c.emoji.unicode)),
        range
      })).slice(0, LIMIT);
    }

    return completions;
  }

  getName() {
    return 'ðŸ˜ƒ ' + (0, _languageHandler._t)('Emoji');
  }

  renderCompletions(completions) {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_Autocomplete_Completion_container_pill",
      role: "presentation",
      "aria-label": (0, _languageHandler._t)("Emoji Autocomplete")
    }, completions);
  }

}

exports.default = EmojiProvider;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,