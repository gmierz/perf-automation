"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _languageHandler = require("../languageHandler");

var _AutocompleteProvider = _interopRequireDefault(require("./AutocompleteProvider"));

var _MatrixClientPeg = require("../MatrixClientPeg");

var _QueryMatcher = _interopRequireDefault(require("./QueryMatcher"));

var _Components = require("./Components");

var _lodash = require("lodash");

var _Permalinks = require("../utils/permalinks/Permalinks");

var _FlairStore = _interopRequireDefault(require("../stores/FlairStore"));

var _Media = require("../customisations/Media");

var _BaseAvatar = _interopRequireDefault(require("../components/views/avatars/BaseAvatar"));

/*
Copyright 2018 New Vector Ltd
Copyright 2018 Michael Telatynski <7t3chguy@gmail.com>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const COMMUNITY_REGEX = /\B\+\S*/g;

function score(query, space) {
  const index = space.indexOf(query);

  if (index === -1) {
    return Infinity;
  } else {
    return index;
  }
}

class CommunityProvider extends _AutocompleteProvider.default {
  constructor(room, renderingType) {
    super({
      commandRegex: COMMUNITY_REGEX,
      renderingType
    });
    (0, _defineProperty2.default)(this, "matcher", void 0);
    this.matcher = new _QueryMatcher.default([], {
      keys: ['groupId', 'name', 'shortDescription']
    });
  }

  async getCompletions(query, selection, force = false, limit = -1) {
    // Disable autocompletions when composing commands because of various issues
    // (see https://github.com/vector-im/element-web/issues/4762)
    if (/^(\/join|\/leave)/.test(query)) {
      return [];
    }

    const cli = _MatrixClientPeg.MatrixClientPeg.get();

    let completions = [];
    const {
      command,
      range
    } = this.getCurrentCommand(query, selection, force);

    if (command) {
      const joinedGroups = cli.getGroups().filter(({
        myMembership
      }) => myMembership === 'join');
      const groups = await Promise.all(joinedGroups.map(async ({
        groupId
      }) => {
        try {
          return _FlairStore.default.getGroupProfileCached(cli, groupId);
        } catch (e) {
          // if FlairStore failed, fall back to just groupId
          return Promise.resolve({
            name: '',
            groupId,
            avatarUrl: '',
            shortDescription: ''
          });
        }
      }));
      this.matcher.setObjects(groups);
      const matchedString = command[0];
      completions = this.matcher.match(matchedString, limit);
      completions = (0, _lodash.sortBy)(completions, [c => score(matchedString, c.groupId), c => c.groupId.length]).map(({
        avatarUrl,
        groupId,
        name
      }) => ({
        completion: groupId,
        suffix: ' ',
        type: "community",
        href: (0, _Permalinks.makeGroupPermalink)(groupId),
        component: /*#__PURE__*/_react.default.createElement(_Components.PillCompletion, {
          title: name,
          description: groupId
        }, /*#__PURE__*/_react.default.createElement(_BaseAvatar.default, {
          name: name || groupId,
          width: 24,
          height: 24,
          url: avatarUrl ? (0, _Media.mediaFromMxc)(avatarUrl).getSquareThumbnailHttp(24) : null
        })),
        range
      })).slice(0, 4);
    }

    return completions;
  }

  getName() {
    return 'ðŸ’¬ ' + (0, _languageHandler._t)('Communities');
  }

  renderCompletions(completions) {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_Autocomplete_Completion_container_pill mx_Autocomplete_Completion_container_truncate",
      role: "presentation",
      "aria-label": (0, _languageHandler._t)("Community Autocomplete")
    }, completions);
  }

}

exports.default = CommunityProvider;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,