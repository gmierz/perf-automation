"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isMac = exports.Key = void 0;
exports.isOnlyCtrlOrCmdIgnoreShiftKeyEvent = isOnlyCtrlOrCmdIgnoreShiftKeyEvent;
exports.isOnlyCtrlOrCmdKeyEvent = isOnlyCtrlOrCmdKeyEvent;

/*
Copyright 2016 OpenMarket Ltd
Copyright 2017 New Vector Ltd
Copyright 2019 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const Key = {
  HOME: "Home",
  END: "End",
  PAGE_UP: "PageUp",
  PAGE_DOWN: "PageDown",
  BACKSPACE: "Backspace",
  DELETE: "Delete",
  ARROW_UP: "ArrowUp",
  ARROW_DOWN: "ArrowDown",
  ARROW_LEFT: "ArrowLeft",
  ARROW_RIGHT: "ArrowRight",
  TAB: "Tab",
  ESCAPE: "Escape",
  ENTER: "Enter",
  ALT: "Alt",
  CONTROL: "Control",
  META: "Meta",
  SHIFT: "Shift",
  CONTEXT_MENU: "ContextMenu",
  COMMA: ",",
  PERIOD: ".",
  LESS_THAN: "<",
  GREATER_THAN: ">",
  BACKTICK: "`",
  SPACE: " ",
  SLASH: "/",
  SQUARE_BRACKET_LEFT: "[",
  SQUARE_BRACKET_RIGHT: "]",
  A: "a",
  B: "b",
  C: "c",
  D: "d",
  E: "e",
  F: "f",
  G: "g",
  H: "h",
  I: "i",
  J: "j",
  K: "k",
  L: "l",
  M: "m",
  N: "n",
  O: "o",
  P: "p",
  Q: "q",
  R: "r",
  S: "s",
  T: "t",
  U: "u",
  V: "v",
  W: "w",
  X: "x",
  Y: "y",
  Z: "z"
};
exports.Key = Key;
const isMac = navigator.platform.toUpperCase().indexOf('MAC') >= 0;
exports.isMac = isMac;

function isOnlyCtrlOrCmdKeyEvent(ev) {
  if (isMac) {
    return ev.metaKey && !ev.altKey && !ev.ctrlKey && !ev.shiftKey;
  } else {
    return ev.ctrlKey && !ev.altKey && !ev.metaKey && !ev.shiftKey;
  }
}

function isOnlyCtrlOrCmdIgnoreShiftKeyEvent(ev) {
  if (isMac) {
    return ev.metaKey && !ev.altKey && !ev.ctrlKey;
  } else {
    return ev.ctrlKey && !ev.altKey && !ev.metaKey;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9LZXlib2FyZC50cyJdLCJuYW1lcyI6WyJLZXkiLCJIT01FIiwiRU5EIiwiUEFHRV9VUCIsIlBBR0VfRE9XTiIsIkJBQ0tTUEFDRSIsIkRFTEVURSIsIkFSUk9XX1VQIiwiQVJST1dfRE9XTiIsIkFSUk9XX0xFRlQiLCJBUlJPV19SSUdIVCIsIlRBQiIsIkVTQ0FQRSIsIkVOVEVSIiwiQUxUIiwiQ09OVFJPTCIsIk1FVEEiLCJTSElGVCIsIkNPTlRFWFRfTUVOVSIsIkNPTU1BIiwiUEVSSU9EIiwiTEVTU19USEFOIiwiR1JFQVRFUl9USEFOIiwiQkFDS1RJQ0siLCJTUEFDRSIsIlNMQVNIIiwiU1FVQVJFX0JSQUNLRVRfTEVGVCIsIlNRVUFSRV9CUkFDS0VUX1JJR0hUIiwiQSIsIkIiLCJDIiwiRCIsIkUiLCJGIiwiRyIsIkgiLCJJIiwiSiIsIksiLCJMIiwiTSIsIk4iLCJPIiwiUCIsIlEiLCJSIiwiUyIsIlQiLCJVIiwiViIsIlciLCJYIiwiWSIsIloiLCJpc01hYyIsIm5hdmlnYXRvciIsInBsYXRmb3JtIiwidG9VcHBlckNhc2UiLCJpbmRleE9mIiwiaXNPbmx5Q3RybE9yQ21kS2V5RXZlbnQiLCJldiIsIm1ldGFLZXkiLCJhbHRLZXkiLCJjdHJsS2V5Iiwic2hpZnRLZXkiLCJpc09ubHlDdHJsT3JDbWRJZ25vcmVTaGlmdEtleUV2ZW50Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRU8sTUFBTUEsR0FBRyxHQUFHO0FBQ2ZDLEVBQUFBLElBQUksRUFBRSxNQURTO0FBRWZDLEVBQUFBLEdBQUcsRUFBRSxLQUZVO0FBR2ZDLEVBQUFBLE9BQU8sRUFBRSxRQUhNO0FBSWZDLEVBQUFBLFNBQVMsRUFBRSxVQUpJO0FBS2ZDLEVBQUFBLFNBQVMsRUFBRSxXQUxJO0FBTWZDLEVBQUFBLE1BQU0s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RDtBQUNuRCxNQUFJTixLQUFKLEVBQVc7QUFDUCxXQUFPTSxFQUFFLENBQUNDLE9BQUgsSUFBYyxDQUFDRCxFQUFFLENBQUNFLE1BQWxCLElBQTRCLENBQUNGLEVBQUUsQ0FBQ0csT0FBdkM7QUFDSCxHQUZELE1BRU87QUFDSCxXQUFPSCxFQUFFLENBQUNHLE9BQUgsSUFBYyxDQUFDSCxFQUFFLENBQUNFLE1BQWxCLElBQTRCLENBQUNGLEVBQUUsQ0FBQ0MsT0FBdkM7QUFDSDtBQUNKIiwic291cmNlc0NvbnRlbnQiOlsiLypcbkNvcHlyaWdodCAyMDE2IE9wZW5NYXJrZXQgTHRkXG5Db3B5cmlnaHQgMjAxNyBOZXcgVmVjdG9yIEx0ZFxuQ29weXJpZ2h0IDIwMTkgVGhlIE1hdHJpeC5vcmcgRm91bmRhdGlvbiBDLkkuQy5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG5leHBvcnQgY29uc3QgS2V5ID0ge1xuICAgIEhPTUU6IFwiSG9tZVwiLFxuICAgIEVORDogXCJFbmRcIixcbiAgICBQQUdFX1VQOiBcIlBhZ2VVcFwiLFxuICAgIFBBR0VfRE9XTjogXCJQYWdlRG93blwiLFxuICAgIEJBQ0tTUEFDRTogXCJCYWNrc3BhY2VcIixcbiAgICBERUxFVEU6IFwiRGVsZXRlXCIsXG4gICAgQVJST1dfVVA6IFwiQXJyb3dVcFwiLFxuICAgIEFSUk9XX0RPV046IFwiQXJyb3dEb3duXCIsXG4gICAgQVJST1dfTEVGVDogXCJBcnJvd0xlZnRcIixcbiAgICBBUlJPV19SSUdIVDogXCJBcnJvd1JpZ2h0XCIsXG4gICAgVEFCOiBcIlRhYlwiLFxuICAgIEVTQ0FQRTogXCJFc2NhcGVcIixcbiAgICBFTlRFUjogXCJFbnRlclwiLFxuICAgIEFMVDogXCJBbHRcIixcbiAgICBDT05UUk9MOiBcIkNvbnRyb2xcIixcbiAgICBNRVRBOiBcIk1ldGFcIixcbiAgICBTSElGVDogXCJTaGlmdFwiLFxuICAgIENPTlRFWFRfTUVOVTogXCJDb250ZXh0TWVudVwiLFxuXG4gICAgQ09NTUE6IFwiLFwiLFxuICAgIFBFUklPRDogXCIuXCIsXG4gICAgTEVTU19USEFOOiBcIjxcIixcbiAgICBHUkVBVEVSX1RIQU46IFwiPlwiLFxuICAgIEJBQ0tUSUNLOiBcImBcIixcbiAgICBTUEFDRTogXCIgXCIsXG4gICAgU0xBU0g6IFwiL1wiLFxuICAgIFNRVUFSRV9CUkFDS0VUX0xFRlQ6IFwiW1wiLFxuICAgIFNRVUFSRV9CUkFDS0VUX1JJR0hUOiBcIl1cIixcbiAgICBBOiBcImFcIixcbiAgICBCOiBcImJcIixcbiAgICBDOiBcImNcIixcbiAgICBEOiBcImRcIixcbiAgICBFOiBcImVcIixcbiAgICBGOiBcImZcIixcbiAgICBHOiBcImdcIixcbiAgICBIOiBcImhcIixcbiAgICBJOiBcImlcIixcbiAgICBKOiBcImpcIixcbiAgICBLOiBcImtcIixcbiAgICBMOiBcImxcIixcbiAgICBNOiBcIm1cIixcbiAgICBOOiBcIm5cIixcbiAgICBPOiBcIm9cIixcbiAgICBQOiBcInBcIixcbiAgICBROiBcInFcIixcbiAgICBSOiBcInJcIixcbiAgICBTOiBcInNcIixcbiAgICBUOiBcInRcIixcbiAgICBVOiBcInVcIixcbiAgICBWOiBcInZcIixcbiAgICBXOiBcIndcIixcbiAgICBYOiBcInhcIixcbiAgICBZOiBcInlcIixcbiAgICBaOiBcInpcIixcbn07XG5cbmV4cG9ydCBjb25zdCBpc01hYyA9IG5hdmlnYXRvci5wbGF0Zm9ybS50b1VwcGVyQ2FzZSgpLmluZGV4T2YoJ01BQycpID49IDA7XG5cbmV4cG9ydCBmdW5jdGlvbiBpc09ubHlDdHJsT3JDbWRLZXlFdmVudChldikge1xuICAgIGlmIChpc01hYykge1xuICAgICAgICByZXR1cm4gZXYubWV0YUtleSAmJiAhZXYuYWx0S2V5ICYmICFldi5jdHJsS2V5ICYmICFldi5zaGlmdEtleTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZXYuY3RybEtleSAmJiAhZXYuYWx0S2V5ICYmICFldi5tZXRhS2V5ICYmICFldi5zaGlmdEtleTtcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc09ubHlDdHJsT3JDbWRJZ25vcmVTaGlmdEtleUV2ZW50KGV2KSB7XG4gICAgaWYgKGlzTWFjKSB7XG4gICAgICAgIHJldHVybiBldi5tZXRhS2V5ICYmICFldi5hbHRLZXkgJiYgIWV2LmN0cmxLZXk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGV2LmN0cmxLZXkgJiYgIWV2LmFsdEtleSAmJiAhZXYubWV0YUtleTtcbiAgICB9XG59XG4iXX0=