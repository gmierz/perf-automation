"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _randomstring = require("matrix-js-sdk/src/randomstring");

var _utils = require("matrix-js-sdk/src/utils");

var _languageHandler = require("./languageHandler");

var _PlatformPeg = _interopRequireDefault(require("./PlatformPeg"));

var _SdkConfig = _interopRequireDefault(require("./SdkConfig"));

var _MatrixClientPeg = require("./MatrixClientPeg");

var _RoomViewStore = _interopRequireDefault(require("./stores/RoomViewStore"));

var _actions = require("./dispatcher/actions");

var _logger = require("matrix-js-sdk/src/logger");

const _excluded = ["count"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const INACTIVITY_TIME = 20; // seconds

const HEARTBEAT_INTERVAL = 5000; // ms

const SESSION_UPDATE_INTERVAL = 60; // seconds

const MAX_PENDING_EVENTS = 1000;
var Orientation;
/* eslint-disable camelcase */

(function (Orientation) {
  Orientation["Landscape"] = "landscape";
  Orientation["Portrait"] = "portrait";
})(Orientation || (Orientation = {}));

/* eslint-enable camelcase */
const hashHex = async input => {
  const buf = new TextEncoder().encode(input);
  const digestBuf = await window.crypto.subtle.digest("sha-256", buf);
  return [...new Uint8Array(digestBuf)].map(b => b.toString(16).padStart(2, "0")).join("");
};

const knownScreens = new Set(["register", "login", "forgot_password", "soft_logout", "new", "settings", "welcome", "home", "start", "directory", "start_sso", "start_cas", "groups", "complete_security", "post_registration", "room", "user", "group"]);

// Apply fn to all hash path parts after the 1st one
async function getViewData(anonymous = true) {
  const rand = (0, _randomstring.randomString)(8);
  const {
    origin,
    hash
  } = window.location;
  let {
    pathname
  } = window.location; // Redact paths which could contain unexpected PII

  if (origin.startsWith('file://')) {
    pathname = `/<redacted_${rand}>/`; // XXX: inject rand because Count.ly doesn't like X->X transitions
  }

  let [_, screen, ...parts] = hash.split("/");

  if (!knownScreens.has(screen)) {
    screen = `<redacted_${rand}>`;
  }

  for (let i = 0; i < parts.length; i++) {
    parts[i] = anonymous ? `<redacted_${rand}>` : await hashHex(parts[i]);
  }

  const hashStr = `${_}/${screen}/${parts.join("/")}`;
  const url = origin + pathname + hashStr;
  const meta = {};
  let name = "$/" + hash;

  switch (screen) {
    case "room":
      {
        name = "view_room";

        const roomId = _RoomViewStore.default.getRoomId();

        name += " " + parts[0]; // XXX: workaround Count.ly missing X->X transitions

        meta["room_id"] = parts[0];
        Object.assign(meta, getRoomStats(roomId));
        break;
      }
  }

  return {
    name,
    url,
    meta
  };
}

const getRoomStats = roomId => {
  var _room$currentState$ge, _room$currentState$ge2;

  const cli = _MatrixClientPeg.MatrixClientPeg.get();

  const room = cli === null || cli === void 0 ? void 0 : cli.getRoom(roomId);
  return {
    "num_users": room === null || room === void 0 ? void 0 : room.getJoinedMemberCount(),
    "is_encrypted": cli === null || cli === void 0 ? void 0 : cli.isRoomEncrypted(roomId),
    // eslint-disable-next-line camelcase
    "is_public": (room === null || room === void 0 ? void 0 : (_room$currentState$ge = room.currentState.getStateEvents("m.room.join_rules", "")) === null || _room$currentState$ge === void 0 ? void 0 : (_room$currentState$ge2 = _room$currentState$ge.getContent()) === null || _room$currentState$ge2 === void 0 ? void 0 : _room$currentState$ge2.join_rule) === "public"
  };
}; // async wrapper for regex-powered String.prototype.replace


const strReplaceAsync = async (str, regex, fn) => {
  const promises = []; // dry-run to calculate the replace values

  str.replace(regex, (...args) => {
    promises.push(fn(...args));
    return "";
  });
  const values = await Promise.all(promises);
  return str.replace(regex, () => values.shift());
};

class CountlyAnalytics {
  constructor() {
    (0, _defineProperty2.default)(this, "baseUrl", null);
    (0, _defineProperty2.default)(this, "appKey", null);
    (0, _defineProperty2.default)(this, "userKey", null);
    (0, _defineProperty2.default)(this, "anonymous", void 0);
    (0, _defineProperty2.default)(this, "appPlatform", void 0);
    (0, _defineProperty2.default)(this, "appVersion", "unknown");
    (0, _defineProperty2.default)(this, "initTime", CountlyAnalytics.getTimestamp());
    (0, _defineProperty2.default)(this, "firstPage", true);
    (0, _defineProperty2.default)(this, "heartbeatIntervalId", void 0);
    (0, _defineProperty2.default)(this, "activityIntervalId", void 0);
    (0, _defineProperty2.default)(this, "trackTime", true);
    (0, _defineProperty2.default)(this, "lastBeat", void 0);
    (0, _defineProperty2.default)(this, "storedDuration", 0);
    (0, _defineProperty2.default)(this, "lastView", void 0);
    (0, _defineProperty2.default)(this, "lastViewTime", 0);
    (0, _defineProperty2.default)(this, "lastViewStoredDuration", 0);
    (0, _defineProperty2.default)(this, "sessionStarted", false);
    (0, _defineProperty2.default)(this, "heartbeatEnabled", false);
    (0, _defineProperty2.default)(this, "inactivityCounter", 0);
    (0, _defineProperty2.default)(this, "pendingEvents", []);
    (0, _defineProperty2.default)(this, "lastMsTs", 0);
    (0, _defineProperty2.default)(this, "getOrientation", () => {
      return window.matchMedia("(orientation: landscape)").matches ? Orientation.Landscape : Orientation.Portrait;
    });
    (0, _defineProperty2.default)(this, "reportOrientation", () => {
      this.track("[CLY]_orientation", {
        mode: this.getOrientation()
      });
    });
    (0, _defineProperty2.default)(this, "endSession", () => {
      if (this.sessionStarted) {
        window.removeEventListener("resize", this.reportOrientation);
        this.reportViewDuration();
        this.request({
          end_session: 1,
          session_duration: CountlyAnalytics.getTimestamp() - this.lastBeat
        });
      }

      this.sessionStarted = false;
    });
    (0, _defineProperty2.default)(this, "onVisibilityChange", () => {
      if (document.hidden) {
        this.stopTime();
      } else {
        this.startTime();
      }
    });
    (0, _defineProperty2.default)(this, "onUserActivity", () => {
      if (this.inactivityCounter >= INACTIVITY_TIME) {
        this.startTime();
      }

      this.inactivityCounter = 0;
    });
  }

  static get instance() {
    return CountlyAnalytics.internalInstance;
  }

  get disabled() {
    return !this.baseUrl;
  }

  canEnable() {
    var _config$countly, _config$countly2;

    const config = _SdkConfig.default.get();

    return Boolean(navigator.doNotTrack !== "1" && (config === null || config === void 0 ? void 0 : (_config$countly = config.countly) === null || _config$countly === void 0 ? void 0 : _config$countly.url) && (config === null || config === void 0 ? void 0 : (_config$countly2 = config.countly) === null || _config$countly2 === void 0 ? void 0 : _config$countly2.appKey));
  }

  async changeUserKey(userKey, merge = false) {
    const oldUserKey = this.userKey;
    this.userKey = userKey;

    if (oldUserKey && merge) {
      await this.request({
        old_device_id: oldUserKey
      });
    }
  }

  async enable(anonymous = true) {
    if (!this.disabled && this.anonymous === anonymous) return;
    if (!this.canEnable()) return;

    if (!this.disabled) {
      // flush request queue as our userKey is going to change, no need to await it
      this.request();
    }

    const config = _SdkConfig.default.get();

    this.baseUrl = new URL("/i", config.countly.url);
    this.appKey = config.countly.appKey;
    this.anonymous = anonymous;

    if (anonymous) {
      await this.changeUserKey((0, _randomstring.randomString)(64));
    } else {
      await this.changeUserKey(await hashHex(_MatrixClientPeg.MatrixClientPeg.get().getUserId()), true);
    }

    const platform = _PlatformPeg.default.get();

    this.appPlatform = platform.getHumanReadableName();

    try {
      this.appVersion = await platform.getAppVersion();
    } catch (e) {
      _logger.logger.warn("Failed to get app version, using 'unknown'");
    } // start heartbeat


    this.heartbeatIntervalId = setInterval(this.heartbeat.bind(this), HEARTBEAT_INTERVAL);
    this.trackSessions();
    this.trackErrors();
  }

  async disable() {
    if (this.disabled) return;
    await this.track("Opt-Out");
    this.endSession();
    window.clearInterval(this.heartbeatIntervalId);
    window.clearTimeout(this.activityIntervalId);
    this.baseUrl = null; // remove listeners bound in trackSessions()

    window.removeEventListener("beforeunload", this.endSession);
    window.removeEventListener("unload", this.endSession);
    window.removeEventListener("visibilitychange", this.onVisibilityChange);
    window.removeEventListener("mousemove", this.onUserActivity);
    window.removeEventListener("click", this.onUserActivity);
    window.removeEventListener("keydown", this.onUserActivity);
    window.removeEventListener("scroll", this.onUserActivity);
  }

  reportFeedback(rating, comment) {
    this.track("[CLY]_star_rating", {
      rating,
      comment
    }, null, {}, true);
  }

  trackPageChange(generationTimeMs) {
    if (this.disabled) return; // TODO use generationTimeMs

    this.trackPageView();
  }

  async trackPageView() {
    this.reportViewDuration();
    await (0, _utils.sleep)(0); // XXX: we sleep here because otherwise we get the old hash and not the new one

    const viewData = await getViewData(this.anonymous);
    const page = viewData.name;
    this.lastView = page;
    this.lastViewTime = CountlyAnalytics.getTimestamp();

    const segments = _objectSpread(_objectSpread({}, viewData.meta), {}, {
      name: page,
      visit: 1,
      domain: window.location.hostname,
      view: viewData.url,
      segment: this.appPlatform,
      start: this.firstPage
    });

    if (this.firstPage) {
      this.firstPage = false;
    }

    this.track("[CLY]_view", segments);
  }

  static getTimestamp() {
    return Math.floor(new Date().getTime() / 1000);
  } // store the last ms timestamp returned
  // we do this to prevent the ts from ever decreasing in the case of system time changing


  getMsTimestamp() {
    const ts = new Date().getTime();

    if (this.lastMsTs >= ts) {
      // increment ts as to keep our data points well-ordered
      this.lastMsTs++;
    } else {
      this.lastMsTs = ts;
    }

    return this.lastMsTs;
  }

  async recordError(err, fatal = false) {
    if (this.disabled || this.anonymous) return;
    let error = "";

    if (typeof err === "object") {
      if (typeof err.stack !== "undefined") {
        error = err.stack;
      } else {
        if (typeof err.name !== "undefined") {
          error += err.name + ":";
        }

        if (typeof err.message !== "undefined") {
          error += err.message + "\n";
        }

        if (typeof err.fileName !== "undefined") {
          error += "in " + err.fileName + "\n";
        }

        if (typeof err.lineNumber !== "undefined") {
          error += "on " + err.lineNumber;
        }

        if (typeof err.columnNumber !== "undefined") {
          error += ":" + err.columnNumber;
        }
      }
    } else {
      error = err + "";
    } // sanitize the error from identifiers


    error = await strReplaceAsync(error, /([!@+#]).+?:[\w:.]+/g, async (substring, glyph) => {
      return glyph + (await hashHex(substring.substring(1)));
    });
    const metrics = this.getMetrics();
    const ob = {
      _resolution: metrics === null || metrics === void 0 ? void 0 : metrics._resolution,
      _error: error,
      _app_version: this.appVersion,
      _run: CountlyAnalytics.getTimestamp() - this.initTime,
      _nonfatal: !fatal,
      _view: this.lastView
    };

    if (typeof navigator.onLine !== "undefined") {
      ob._online = navigator.onLine;
    }

    ob._background = document.hasFocus();
    this.request({
      crash: JSON.stringify(ob)
    });
  }

  trackErrors() {
    //override global uncaught error handler
    window.onerror = (msg, url, line, col, err) => {
      if (typeof err !== "undefined") {
        this.recordError(err, false);
      } else {
        let error = "";

        if (typeof msg !== "undefined") {
          error += msg + "\n";
        }

        if (typeof url !== "undefined") {
          error += "at " + url;
        }

        if (typeof line !== "undefined") {
          error += ":" + line;
        }

        if (typeof col !== "undefined") {
          error += ":" + col;
        }

        error += "\n";

        try {
          const stack = []; // eslint-disable-next-line no-caller

          let f = arguments.callee.caller;

          while (f) {
            stack.push(f.name);
            f = f.caller;
          }

          error += stack.join("\n");
        } catch (ex) {//silent error
        }

        this.recordError(error, false);
      }
    };

    window.addEventListener('unhandledrejection', event => {
      var _event$reason;

      this.recordError(new Error(`Unhandled rejection (reason: ${((_event$reason = event.reason) === null || _event$reason === void 0 ? void 0 : _event$reason.stack) || event.reason}).`), true);
    });
  }

  heartbeat() {
    const args = {}; // extend session if needed

    if (this.sessionStarted && this.trackTime) {
      const last = CountlyAnalytics.getTimestamp();

      if (last - this.lastBeat >= SESSION_UPDATE_INTERVAL) {
        args.session_duration = last - this.lastBeat;
        this.lastBeat = last;
      }
    } // process event queue


    if (this.pendingEvents.length > 0 || args.session_duration) {
      this.request(args);
    }
  }

  async request(args = {}) {
    const request = _objectSpread(_objectSpread({
      app_key: this.appKey,
      device_id: this.userKey
    }, this.getTimeParams()), args);

    if (this.pendingEvents.length > 0) {
      const EVENT_BATCH_SIZE = 10;
      const events = this.pendingEvents.splice(0, EVENT_BATCH_SIZE);
      request.events = JSON.stringify(events);
    }

    const params = new URLSearchParams(request);

    try {
      await window.fetch(this.baseUrl.toString(), {
        method: "POST",
        mode: "no-cors",
        cache: "no-cache",
        redirect: "follow",
        headers: {
          "Content-Type": "application/x-www-form-urlencoded"
        },
        body: params
      });
    } catch (e) {
      _logger.logger.error("Analytics error: ", e);
    }
  }

  getTimeParams() {
    const date = new Date();
    return {
      timestamp: this.getMsTimestamp(),
      hour: date.getHours(),
      dow: date.getDay()
    };
  }

  queue(args) {
    const {
      count = 1
    } = args,
          rest = (0, _objectWithoutProperties2.default)(args, _excluded);

    const ev = _objectSpread(_objectSpread(_objectSpread({}, this.getTimeParams()), rest), {}, {
      count,
      platform: this.appPlatform,
      app_version: this.appVersion
    });

    this.pendingEvents.push(ev);

    if (this.pendingEvents.length > MAX_PENDING_EVENTS) {
      this.pendingEvents.shift();
    }
  }

  startTime() {
    if (!this.trackTime) {
      this.trackTime = true;
      this.lastBeat = CountlyAnalytics.getTimestamp() - this.storedDuration;
      this.lastViewTime = CountlyAnalytics.getTimestamp() - this.lastViewStoredDuration;
      this.lastViewStoredDuration = 0;
    }
  }

  stopTime() {
    if (this.trackTime) {
      this.trackTime = false;
      this.storedDuration = CountlyAnalytics.getTimestamp() - this.lastBeat;
      this.lastViewStoredDuration = CountlyAnalytics.getTimestamp() - this.lastViewTime;
    }
  }

  getMetrics() {
    if (this.anonymous) return undefined;
    const metrics = {}; // getting app version

    metrics._app_version = this.appVersion;
    metrics._ua = navigator.userAgent; // getting resolution

    if (screen.width && screen.height) {
      metrics._resolution = `${screen.width}x${screen.height}`;
    } // getting density ratio


    if (window.devicePixelRatio) {
      metrics._density = window.devicePixelRatio;
    } // getting locale


    metrics._locale = (0, _languageHandler.getCurrentLanguage)();
    return metrics;
  }

  async beginSession(heartbeat = true) {
    if (!this.sessionStarted) {
      this.reportOrientation();
      window.addEventListener("resize", this.reportOrientation);
      this.lastBeat = CountlyAnalytics.getTimestamp();
      this.sessionStarted = true;
      this.heartbeatEnabled = heartbeat;
      const userDetails = {
        custom: {
          "home_server": _MatrixClientPeg.MatrixClientPeg.get() && _MatrixClientPeg.MatrixClientPeg.getHomeserverName(),
          // TODO hash?
          "anonymous": this.anonymous
        }
      };
      const request = {
        begin_session: 1,
        user_details: JSON.stringify(userDetails)
      };
      const metrics = this.getMetrics();

      if (metrics) {
        request.metrics = JSON.stringify(metrics);
      }

      await this.request(request);
    }
  }

  reportViewDuration() {
    if (this.lastView) {
      this.track("[CLY]_view", {
        name: this.lastView
      }, null, {
        dur: this.trackTime ? CountlyAnalytics.getTimestamp() - this.lastViewTime : this.lastViewStoredDuration
      });
      this.lastView = null;
    }
  }

  trackSessions() {
    this.beginSession();
    this.startTime();
    window.addEventListener("beforeunload", this.endSession);
    window.addEventListener("unload", this.endSession);
    window.addEventListener("visibilitychange", this.onVisibilityChange);
    window.addEventListener("mousemove", this.onUserActivity);
    window.addEventListener("click", this.onUserActivity);
    window.addEventListener("keydown", this.onUserActivity); // Using the passive option to not block the main thread
    // https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#improving_scrolling_performance_with_passive_listeners

    window.addEventListener("scroll", this.onUserActivity, {
      passive: true
    });
    this.activityIntervalId = setInterval(() => {
      this.inactivityCounter++;

      if (this.inactivityCounter >= INACTIVITY_TIME) {
        this.stopTime();
      }
    }, 60000);
  }

  trackBeginInvite(roomId) {
    this.track("begin_invite", {}, roomId);
  }

  trackSendInvite(startTime, roomId, qty) {
    this.track("send_invite", {}, roomId, {
      dur: CountlyAnalytics.getTimestamp() - startTime,
      sum: qty
    });
  }

  async trackRoomCreate(startTime, roomId) {
    if (this.disabled) return;
    let endTime = CountlyAnalytics.getTimestamp();

    const cli = _MatrixClientPeg.MatrixClientPeg.get();

    if (!cli.getRoom(roomId)) {
      await new Promise(resolve => {
        const handler = room => {
          if (room.roomId === roomId) {
            cli.off("Room", handler);
            resolve();
          }
        };

        cli.on("Room", handler);
      });
      endTime = CountlyAnalytics.getTimestamp();
    }

    this.track("create_room", {}, roomId, {
      dur: endTime - startTime
    });
  }

  trackRoomJoin(startTime, roomId, type) {
    this.track(_actions.Action.JoinRoom, {
      type
    }, roomId, {
      dur: CountlyAnalytics.getTimestamp() - startTime
    });
  }

  async trackSendMessage(startTime, // eslint-disable-next-line camelcase
  sendPromise, roomId, isEdit, isReply, content) {
    if (this.disabled) return;

    const cli = _MatrixClientPeg.MatrixClientPeg.get();

    const room = cli.getRoom(roomId);
    const eventId = (await sendPromise).event_id;
    let endTime = CountlyAnalytics.getTimestamp();

    if (!room.findEventById(eventId)) {
      await new Promise(resolve => {
        const handler = ev => {
          if (ev.getId() === eventId) {
            room.off("Room.localEchoUpdated", handler);
            resolve();
          }
        };

        room.on("Room.localEchoUpdated", handler);
      });
      endTime = CountlyAnalytics.getTimestamp();
    }

    this.track("send_message", {
      is_edit: isEdit,
      is_reply: isReply,
      msgtype: content.msgtype,
      format: content.format
    }, roomId, {
      dur: endTime - startTime
    });
  }

  trackStartCall(roomId, isVideo = false, isJitsi = false) {
    this.track("start_call", {
      is_video: isVideo,
      is_jitsi: isJitsi
    }, roomId);
  }

  trackJoinCall(roomId, isVideo = false, isJitsi = false) {
    this.track("join_call", {
      is_video: isVideo,
      is_jitsi: isJitsi
    }, roomId);
  }

  trackRoomDirectoryBegin() {
    this.track("room_directory");
  }

  trackRoomDirectory(startTime) {
    this.track("room_directory_done", {}, null, {
      dur: CountlyAnalytics.getTimestamp() - startTime
    });
  }

  trackRoomDirectorySearch(numResults, query) {
    this.track("room_directory_search", {
      query_length: query.length,
      query_num_words: query.split(" ").length
    }, null, {
      sum: numResults
    });
  }

  async track(key, segments, roomId, args, anonymous = false) {
    if (this.disabled && !anonymous) return;
    let segmentation = segments || {};

    if (roomId) {
      segmentation = _objectSpread(_objectSpread({
        room_id: await hashHex(roomId)
      }, getRoomStats(roomId)), segments);
    }

    this.queue(_objectSpread({
      key,
      count: 1,
      segmentation
    }, args)); // if this event can be sent anonymously and we are disabled then dispatch it right away

    if (this.disabled && anonymous) {
      await this.request({
        device_id: (0, _randomstring.randomString)(64)
      });
    }
  }

} // expose on window for easy access from the console


exports.default = CountlyAnalytics;
(0, _defineProperty2.default)(CountlyAnalytics, "internalInstance", new CountlyAnalytics());
window.mxCountlyAnalytics = CountlyAnalytics;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9Db3VudGx5QW5hbHl0aWNzLnRzIl0sIm5hbWVzIjpbIklOQUNUSVZJVFlfVElNRSIsIkhFQVJUQkVBVF9JTlRFUlZBTCIsIlNFU1NJT05fVVBEQVRFX0lOVEVSVkFMIiwiTUFYX1BFTkRJTkdfRVZFTlRTIiwiT3JpZW50YXRpb24iLCJoYXNoSGV4IiwiaW5wdXQiLCJidWYiLCJUZXh0RW5jb2RlciIsImVuY29kZSIsImRpZ2VzdEJ1ZiIsIndpbmRvdyIsImNyeXB0byIsInN1YnRsZSIsImRpZ2VzdCIsIlVpbnQ4QXJyYXkiLCJtYXAiLCJiIiwidG9TdHJpbmciLCJwYWRTdGFydCIsImpvaW4iLCJrbm93blNjcmVlbnMiLCJTZXQiLCJnZXRWaWV3RGF0YSIsImFub255bW91cyIsInJhbmQiLCJvcmlnaW4iLCJoYXNoIiwibG9jYXRpb24iLCJwYXRobmFtZSIsInN0YXJ0c1dpdGgiLCJfIiwic2NyZWVuIiwicGFydHMiLCJzcGxpdCIsImhhcyIsImkiLCJsZW5ndGgiLCJoYXNoU3RyIiwidXJsIiwibWV0YSIsIm5hbWUiLCJyb29tSWQiLCJSb29tVmlld1N0b3JlIiwiZ2V0Um9vbUlkIiwiT2JqZWN0IiwiYXNzaWduIiwiZ2V0Um9vbVN0YXRzIiwiY2xpIiwiTWF0cml4Q2xpZW50UGVnIiwiZ2V0Iiwicm9vbSIsImdldFJvb20iLCJnZXRKb2luZWRNZW1iZXJDb3VudCIsImlzUm9vbUVuY3J5cHRlZCIsImN1cnJlbnRTdGF0ZSIsImdldFN0YXRlRXZlbnRzIiwiZ2V0Q29udGVudCIsImpvaW5fcnVsZSIsInN0clJlcGxhY2VBc3luYyIsInN0ciIsInJlZ2V4IiwiZm4iLCJwcm9taXNlcyIsInJlcGxhY2UiLCJhcmdzIiwicHVzaCIsInZhbHVlcyIsIlByb21pc2UiLCJhbGwiLCJzaGlmdCIsIkNvdW50bHlBbmFseXRpY3MiLCJnZXRUaW1lc3RhbXAiLCJtYXRjaE1lZGlhIiwibWF0Y2hlcyIsIkxhbmRzY2FwZSIsIlBvcnRyYWl0IiwidHJhY2siLCJtb2RlIiwiZ2V0T3JpZW50YXRpb24iLCJzZXNzaW9uU3RhcnRlZCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJyZXBvcnRPcmllbnRhdGlvbiIsInJlcG9ydFZpZXdEdXJhdGlvbiIsInJlcXVlc3QiLCJlbmRfc2Vzc2lvbiIsInNlc3Npb25fZHVyYXRpb24iLCJsYXN0QmVhdCIsImRvY3VtZW50IiwiaGlkZGVuIiwic3RvcFRpbWUiLCJzdGFydFRpbWUiLCJpbmFjdGl2aXR5Q291bnRlciIsImluc3RhbmNlIiwiaW50ZXJuYWxJbnN0YW5jZSIsImRpc2FibGVkIiwiYmFzZVVybCIsImNhbkVuYWJsZSIsImNvbmZpZyIsIlNka0NvbmZpZyIsIkJvb2xlYW4iLCJuYXZpZ2F0b3IiLCJkb05vdFRyYWNrIiwiY291bnRseSIsImFwcEtleSIsImNoYW5nZVVzZXJLZXkiLCJ1c2VyS2V5IiwibWVyZ2UiLCJvbGRVc2VyS2V5Iiwib2xkX2RldmljZV9pZCIsImVuYWJsZSIsIlVSTCIsImdldFVzZXJJZCIsInBsYXRmb3JtIiwiUGxhdGZvcm1QZWciLCJhcHBQbGF0Zm9ybSIsImdldEh1bWFuUmVhZGFibGVOYW1lIiwiYXBwVmVyc2lvbiIsImdldEFwcFZlcnNpb24iLCJlIiwibG9nZ2VyIiwid2FybiIsImhlYXJ0YmVhdEludGVydmFsSWQiLCJzZXRJbnRlcnZhbCIsImhlYXJ0YmVhdCIsImJpbmQiLCJ0cmFja1Nlc3Npb25zIiwidHJhY2tFcnJvcnMiLCJkaXNhYmxlIiwiZW5kU2Vzc2lvbiIsImNsZWFySW50ZXJ2YWwiLCJjbGVhclRpbWVvdXQiLCJhY3Rpdml0eUludGVydmFsSWQiLCJvblZpc2liaWxpdHlDaGFuZ2UiLCJvblVzZXJBY3Rpdml0eSIsInJlcG9ydEZlZWRiYWNrIiwicmF0aW5nIiwiY29tbWVudCIsInRyYWNrUGFnZUNoYW5nZSIsImdlbmVyYXRpb25UaW1lTXMiLCJ0cmFja1BhZ2VWaWV3Iiwidmlld0RhdGEiLCJwYWdlIiwibGFzdFZpZXciLCJsYXN0Vmlld1RpbWUiLCJzZWdtZW50cyIsInZpc2l0IiwiZG9tYWluIiwiaG9zdG5hbWUiLCJ2aWV3Iiwic2VnbWVudCIsInN0YXJ0IiwiZmlyc3RQYWdlIiwiTWF0aCIsImZsb29yIiwiRGF0ZSIsImdldFRpbWUiLCJnZXRNc1RpbWVzdGFtcCIsInRzIiwibGFzdE1zVHMiLCJyZWNvcmRFcnJvciIsImVyciIsImZhdGFsIiwiZXJyb3IiLCJzdGFjayIsIm1lc3NhZ2UiLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJjb2x1bW5OdW1iZXIiLCJzdWJzdHJpbmciLCJnbHlwaCIsIm1ldHJpY3MiLCJnZXRNZXRyaWNzIiwib2IiLCJfcmVzb2x1dGlvbiIsIl9lcnJvciIsIl9hcHBfdmVyc2lvbiIsIl9ydW4iLCJpbml0VGltZSIsIl9ub25mYXRhbCIsIl92aWV3Iiwib25MaW5lIiwiX29ubGluZSIsIl9iYWNrZ3JvdW5kIiwiaGFzRm9jdXMiLCJjcmFzaCIsIkpTT04iLCJzdHJpbmdpZnkiLCJvbmVycm9yIiwibXNnIiwibGluZSIsImNvbCIsImYiLCJhcmd1bWVudHMiLCJjYWxsZWUiLCJjYWxsZXIiLCJleCIsImFkZEV2ZW50TGlzdGVuZXIiLCJldmVudCIsIkVycm9yIiwicmVhc29uIiwidHJhY2tUaW1lIiwibGFzdCIsInBlbmRpbmdFdmVudHMiLCJhcHBfa2V5IiwiZGV2aWNlX2lkIiwiZ2V0VGltZVBhcmFtcyIsIkVWRU5UX0JBVENIX1NJWkUiLCJldmVudHMiLCJzcGxpY2UiLCJwYXJhbXMiLCJVUkxTZWFyY2hQYXJhbXMiLCJmZXRjaCIsIm1ldGhvZCIsImNhY2hlIiwicmVkaXJlY3QiLCJoZWFkZXJzIiwiYm9keSIsImRhdGUiLCJ0aW1lc3RhbXAiLCJob3VyIiwiZ2V0SG91cnMiLCJkb3ciLCJnZXREYXkiLCJxdWV1ZSIsImNvdW50IiwicmVzdCIsImV2IiwiYXBwX3ZlcnNpb24iLCJzdG9yZWREdXJhdGlvbiIsImxhc3RWaWV3U3RvcmVkRHVyYXRpb24iLCJ1bmRlZmluZWQiLCJfdWEiLCJ1c2VyQWdlbnQiLCJ3aWR0aCIsImhlaWdodCIsImRldmljZVBpeGVsUmF0aW8iLCJfZGVuc2l0eSIsIl9sb2NhbGUiLCJiZWdpblNlc3Npb24iLCJoZWFydGJlYXRFbmFibGVkIiwidXNlckRldGFpbHMiLCJjdXN0b20iLCJnZXRIb21lc2VydmVyTmFtZSIsImJlZ2luX3Nlc3Npb24iLCJ1c2VyX2RldGFpbHMiLCJkdXIiLCJwYXNzaXZlIiwidHJhY2tCZWdpbkludml0ZSIsInRyYWNrU2VuZEludml0ZSIsInF0eSIsInN1bSIsInRyYWNrUm9vbUNyZWF0ZSIsImVuZFRpbWUiLCJyZXNvbHZlIiwiaGFuZGxlciIsIm9mZiIsIm9uIiwidHJhY2tSb29tSm9pbiIsInR5cGUiLCJBY3Rpb24iLCJKb2luUm9vbSIsInRyYWNrU2VuZE1lc3NhZ2UiLCJzZW5kUHJvbWlzZSIsImlzRWRpdCIsImlzUmVwbHkiLCJjb250ZW50IiwiZXZlbnRJZCIsImV2ZW50X2lkIiwiZmluZEV2ZW50QnlJZCIsImdldElkIiwiaXNfZWRpdCIsImlzX3JlcGx5IiwibXNndHlwZSIsImZvcm1hdCIsInRyYWNrU3RhcnRDYWxsIiwiaXNWaWRlbyIsImlzSml0c2kiLCJpc192aWRlbyIsImlzX2ppdHNpIiwidHJhY2tKb2luQ2FsbCIsInRyYWNrUm9vbURpcmVjdG9yeUJlZ2luIiwidHJhY2tSb29tRGlyZWN0b3J5IiwidHJhY2tSb29tRGlyZWN0b3J5U2VhcmNoIiwibnVtUmVzdWx0cyIsInF1ZXJ5IiwicXVlcnlfbGVuZ3RoIiwicXVlcnlfbnVtX3dvcmRzIiwia2V5Iiwic2VnbWVudGF0aW9uIiwicm9vbV9pZCIsIm14Q291bnRseUFuYWx5dGljcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQWdCQTs7QUFFQTs7QUFFQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQTs7Ozs7Ozs7QUFFQSxNQUFNQSxlQUFlLEdBQUcsRUFBeEIsQyxDQUE0Qjs7QUFDNUIsTUFBTUMsa0JBQWtCLEdBQUcsSUFBM0IsQyxDQUFrQzs7QUFDbEMsTUFBTUMsdUJB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NUQsTUFBTSxDQUFDd1Isa0JBQVAsR0FBNEI1TixnQkFBNUIiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuQ29weXJpZ2h0IDIwMjAgVGhlIE1hdHJpeC5vcmcgRm91bmRhdGlvbiBDLkkuQy5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG5pbXBvcnQgeyByYW5kb21TdHJpbmcgfSBmcm9tIFwibWF0cml4LWpzLXNkay9zcmMvcmFuZG9tc3RyaW5nXCI7XG5pbXBvcnQgeyBJQ29udGVudCB9IGZyb20gXCJtYXRyaXgtanMtc2RrL3NyYy9tb2RlbHMvZXZlbnRcIjtcbmltcG9ydCB7IHNsZWVwIH0gZnJvbSBcIm1hdHJpeC1qcy1zZGsvc3JjL3V0aWxzXCI7XG5cbmltcG9ydCB7IGdldEN1cnJlbnRMYW5ndWFnZSB9IGZyb20gJy4vbGFuZ3VhZ2VIYW5kbGVyJztcbmltcG9ydCBQbGF0Zm9ybVBlZyBmcm9tICcuL1BsYXRmb3JtUGVnJztcbmltcG9ydCBTZGtDb25maWcgZnJvbSAnLi9TZGtDb25maWcnO1xuaW1wb3J0IHsgTWF0cml4Q2xpZW50UGVnIH0gZnJvbSBcIi4vTWF0cml4Q2xpZW50UGVnXCI7XG5pbXBvcnQgUm9vbVZpZXdTdG9yZSBmcm9tIFwiLi9zdG9yZXMvUm9vbVZpZXdTdG9yZVwiO1xuaW1wb3J0IHsgQWN0aW9uIH0gZnJvbSBcIi4vZGlzcGF0Y2hlci9hY3Rpb25zXCI7XG5cbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gXCJtYXRyaXgtanMtc2RrL3NyYy9sb2dnZXJcIjtcblxuY29uc3QgSU5BQ1RJVklUWV9USU1FID0gMjA7IC8vIHNlY29uZHNcbmNvbnN0IEhFQVJUQkVBVF9JTlRFUlZBTCA9IDVfMDAwOyAvLyBtc1xuY29uc3QgU0VTU0lPTl9VUERBVEVfSU5URVJWQUwgPSA2MDsgLy8gc2Vjb25kc1xuY29uc3QgTUFYX1BFTkRJTkdfRVZFTlRTID0gMTAwMDtcblxuZXhwb3J0IHR5cGUgUmF0aW5nID0gMSB8IDIgfCAzIHwgNCB8IDU7XG5cbmVudW0gT3JpZW50YXRpb24ge1xuICAgIExhbmRzY2FwZSA9IFwibGFuZHNjYXBlXCIsXG4gICAgUG9ydHJhaXQgPSBcInBvcnRyYWl0XCIsXG59XG5cbi8qIGVzbGludC1kaXNhYmxlIGNhbWVsY2FzZSAqL1xuaW50ZXJmYWNlIElNZXRyaWNzIHtcbiAgICBfcmVzb2x1dGlvbj86IHN0cmluZztcbiAgICBfYXBwX3ZlcnNpb24/OiBzdHJpbmc7XG4gICAgX2RlbnNpdHk/OiBudW1iZXI7XG4gICAgX3VhPzogc3RyaW5nO1xuICAgIF9sb2NhbGU/OiBzdHJpbmc7XG59XG5cbmludGVyZmFjZSBJRXZlbnQge1xuICAgIGtleTogc3RyaW5nO1xuICAgIGNvdW50OiBudW1iZXI7XG4gICAgc3VtPzogbnVtYmVyO1xuICAgIGR1cj86IG51bWJlcjtcbiAgICBzZWdtZW50YXRpb24/OiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPjtcbiAgICB0aW1lc3RhbXA/OiBudW1iZXI7IC8vIFRPRE8gc2hvdWxkIHdlIHVzZSB0aGUgdGltZXN0YW1wIHdoZW4gd2Ugc3RhcnQgb3IgZW5kIGZvciB0aGUgZXZlbnQgdGltZXN0YW1wXG4gICAgaG91cj86IHVua25vd247XG4gICAgZG93PzogdW5rbm93bjtcbn1cblxuaW50ZXJmYWNlIElWaWV3RXZlbnQgZXh0ZW5kcyBJRXZlbnQge1xuICAgIGtleTogXCJbQ0xZXV92aWV3XCI7XG59XG5cbmludGVyZmFjZSBJT3JpZW50YXRpb25FdmVudCBleHRlbmRzIElFdmVudCB7XG4gICAga2V5OiBcIltDTFldX29yaWVudGF0aW9uXCI7XG4gICAgc2VnbWVudGF0aW9uOiB7XG4gICAgICAgIG1vZGU6IE9yaWVudGF0aW9uO1xuICAgIH07XG59XG5cbmludGVyZmFjZSBJU3RhclJhdGluZ0V2ZW50IGV4dGVuZHMgSUV2ZW50IHtcbiAgICBrZXk6IFwiW0NMWV1fc3Rhcl9yYXRpbmdcIjtcbiAgICBzZWdtZW50YXRpb246IHtcbiAgICAgICAgLy8gd2UganVzdCBjYXJlIGFib3V0IGNvbGxlY3RpbmcgZmVlZGJhY2ssIG5vIG5lZWQgdG8gYXNzb2NpYXRlIHdpdGggYSBmZWVkYmFjayB3aWRnZXRcbiAgICAgICAgd2lkZ2V0X2lkPzogc3RyaW5nO1xuICAgICAgICBjb250YWN0TWU/OiBib29sZWFuO1xuICAgICAgICBlbWFpbD86IHN0cmluZztcbiAgICAgICAgcmF0aW5nOiAxIHwgMiB8IDMgfCA0IHwgNTtcbiAgICAgICAgY29tbWVudDogc3RyaW5nO1xuICAgIH07XG59XG5cbnR5cGUgVmFsdWUgPSBzdHJpbmcgfCBudW1iZXIgfCBib29sZWFuO1xuXG5pbnRlcmZhY2UgSU9wZXJhdGlvbkluYyB7XG4gICAgXCIkaW5jXCI6IG51bWJlcjtcbn1cbmludGVyZmFjZSBJT3BlcmF0aW9uTXVsIHtcbiAgICBcIiRtdWxcIjogbnVtYmVyO1xufVxuaW50ZXJmYWNlIElPcGVyYXRpb25NYXgge1xuICAgIFwiJG1heFwiOiBudW1iZXI7XG59XG5pbnRlcmZhY2UgSU9wZXJhdGlvbk1pbiB7XG4gICAgXCIkbWluXCI6IG51bWJlcjtcbn1cbmludGVyZmFjZSBJT3BlcmF0aW9uU2V0T25jZSB7XG4gICAgXCIkc2V0T25jZVwiOiBWYWx1ZTtcbn1cbmludGVyZmFjZSBJT3BlcmF0aW9uUHVzaCB7XG4gICAgXCIkcHVzaFwiOiBWYWx1ZSB8IFZhbHVlW107XG59XG5pbnRlcmZhY2UgSU9wZXJhdGlvbkFkZFRvU2V0IHtcbiAgICBcIiRhZGRUb1NldFwiOiBWYWx1ZSB8IFZhbHVlW107XG59XG5pbnRlcmZhY2UgSU9wZXJhdGlvblB1bGwge1xuICAgIFwiJHB1bGxcIjogVmFsdWUgfCBWYWx1ZVtdO1xufVxuXG50eXBlIE9wZXJhdGlvbiA9XG4gICAgSU9wZXJhdGlvbkluYyB8XG4gICAgSU9wZXJhdGlvbk11bCB8XG4gICAgSU9wZXJhdGlvbk1heCB8XG4gICAgSU9wZXJhdGlvbk1pbiB8XG4gICAgSU9wZXJhdGlvblNldE9uY2UgfFxuICAgIElPcGVyYXRpb25QdXNoIHxcbiAgICBJT3BlcmF0aW9uQWRkVG9TZXQgfFxuICAgIElPcGVyYXRpb25QdWxsO1xuXG5pbnRlcmZhY2UgSVVzZXJEZXRhaWxzIHtcbiAgICBuYW1lPzogc3RyaW5nO1xuICAgIHVzZXJuYW1lPzogc3RyaW5nO1xuICAgIGVtYWlsPzogc3RyaW5nO1xuICAgIG9yZ2FuaXphdGlvbj86IHN0cmluZztcbiAgICBwaG9uZT86IHN0cmluZztcbiAgICBwaWN0dXJlPzogc3RyaW5nO1xuICAgIGdlbmRlcj86IHN0cmluZztcbiAgICBieWVhcj86IG51bWJlcjtcbiAgICBjdXN0b20/OiBSZWNvcmQ8c3RyaW5nLCBWYWx1ZSB8IE9wZXJhdGlvbj47IC8vIGAuYCBhbmQgYCRgIHdpbGwgYmUgc3RyaXBwZWQgb3V0XG59XG5cbmludGVyZmFjZSBJQ3Jhc2gge1xuICAgIF9yZXNvbHV0aW9uPzogc3RyaW5nO1xuICAgIF9hcHBfdmVyc2lvbjogc3RyaW5nO1xuXG4gICAgX3JhbV9jdXJyZW50PzogbnVtYmVyO1xuICAgIF9yYW1fdG90YWw/OiBudW1iZXI7XG4gICAgX2Rpc2tfY3VycmVudD86IG51bWJlcjtcbiAgICBfZGlza190b3RhbD86IG51bWJlcjtcbiAgICBfb3JpZW50YXRpb24/OiBPcmllbnRhdGlvbjtcblxuICAgIF9vbmxpbmU/OiBib29sZWFuO1xuICAgIF9tdXRlZD86IGJvb2xlYW47XG4gICAgX2JhY2tncm91bmQ/OiBib29sZWFuO1xuICAgIF92aWV3Pzogc3RyaW5nO1xuXG4gICAgX25hbWU/OiBzdHJpbmc7XG4gICAgX2Vycm9yOiBzdHJpbmc7XG4gICAgX25vbmZhdGFsPzogYm9vbGVhbjtcbiAgICBfbG9ncz86IHN0cmluZztcbiAgICBfcnVuPzogbnVtYmVyO1xuXG4gICAgX2N1c3RvbT86IFJlY29yZDxzdHJpbmcsIHN0cmluZz47XG59XG5cbmludGVyZmFjZSBJUGFyYW1zIHtcbiAgICAvLyBBUFBfS0VZIG9mIGFuIGFwcCBmb3Igd2hpY2ggdG8gcmVwb3J0XG4gICAgYXBwX2tleTogc3RyaW5nO1xuICAgIC8vIFVzZXIgaWRlbnRpZmllclxuICAgIGRldmljZV9pZDogc3RyaW5nO1xuXG4gICAgLy8gU2hvdWxkIHByb3ZpZGUgdmFsdWUgMSB0byBpbmRpY2F0ZSBzZXNzaW9uIHN0YXJ0XG4gICAgYmVnaW5fc2Vzc2lvbj86IG51bWJlcjtcbiAgICAvLyBKU09OIG9iamVjdCBhcyBzdHJpbmcgdG8gcHJvdmlkZSBtZXRyaWNzIHRvIHRyYWNrIHdpdGggdGhlIHVzZXJcbiAgICBtZXRyaWNzPzogc3RyaW5nO1xuICAgIC8vIFByb3ZpZGVzIHNlc3Npb24gZHVyYXRpb24gaW4gc2Vjb25kcywgY2FuIGJlIHVzZWQgYXMgaGVhcnRiZWF0IHRvIHVwZGF0ZSBjdXJyZW50IHNlc3Npb25zIGR1cmF0aW9uLCByZWNvbW1lbmRlZCB0aW1lIGV2ZXJ5IDYwIHNlY29uZHNcbiAgICBzZXNzaW9uX2R1cmF0aW9uPzogbnVtYmVyO1xuICAgIC8vIFNob3VsZCBwcm92aWRlIHZhbHVlIDEgdG8gaW5kaWNhdGUgc2Vzc2lvbiBlbmRcbiAgICBlbmRfc2Vzc2lvbj86IG51bWJlcjtcblxuICAgIC8vIDEwIGRpZ2l0IFVUQyB0aW1lc3RhbXAgZm9yIHJlY29yZGluZyBwYXN0IGRhdGEuXG4gICAgdGltZXN0YW1wPzogbnVtYmVyO1xuICAgIC8vIGN1cnJlbnQgdXNlciBsb2NhbCBob3VyICgwIC0gMjMpXG4gICAgaG91cj86IG51bWJlcjtcbiAgICAvLyBkYXkgb2YgdGhlIHdlZWsgKDAtc3VuZGF5LCAxIC0gbW9uZGF5LCAuLi4gNiAtIHNhdHVyZGF5KVxuICAgIGRvdz86IG51bWJlcjtcblxuICAgIC8vIEpTT04gYXJyYXkgYXMgc3RyaW5nIGNvbnRhaW5pbmcgZXZlbnQgb2JqZWN0c1xuICAgIGV2ZW50cz86IHN0cmluZzsgLy8gSUV2ZW50W11cbiAgICAvLyBKU09OIG9iamVjdCBhcyBzdHJpbmcgY29udGFpbmluZyBpbmZvcm1hdGlvbiBhYm91dCB1c2Vyc1xuICAgIHVzZXJfZGV0YWlscz86IHN0cmluZztcblxuICAgIC8vIHByb3ZpZGUgd2hlbiBjaGFuZ2luZyBkZXZpY2UgSUQsIHNvIHNlcnZlciB3b3VsZCBtZXJnZSB0aGUgZGF0YVxuICAgIG9sZF9kZXZpY2VfaWQ/OiBzdHJpbmc7XG5cbiAgICAvLyBTZWUgSUNyYXNoXG4gICAgY3Jhc2g/OiBzdHJpbmc7XG59XG5cbmludGVyZmFjZSBJUm9vbVNlZ21lbnRzIGV4dGVuZHMgUmVjb3JkPHN0cmluZywgVmFsdWU+IHtcbiAgICByb29tX2lkOiBzdHJpbmc7IC8vIGhhc2hlZFxuICAgIG51bV91c2VyczogbnVtYmVyO1xuICAgIGlzX2VuY3J5cHRlZDogYm9vbGVhbjtcbiAgICBpc19wdWJsaWM6IGJvb2xlYW47XG59XG5cbmludGVyZmFjZSBJU2VuZE1lc3NhZ2VFdmVudCBleHRlbmRzIElFdmVudCB7XG4gICAga2V5OiBcInNlbmRfbWVzc2FnZVwiO1xuICAgIGR1cjogbnVtYmVyOyAvLyBob3cgbG9uZyBpdCB0byBzZW5kICh1bnRpbCByZW1vdGUgZWNobylcbiAgICBzZWdtZW50YXRpb246IElSb29tU2VnbWVudHMgJiB7XG4gICAgICAgIGlzX2VkaXQ6IGJvb2xlYW47XG4gICAgICAgIGlzX3JlcGx5OiBib29sZWFuO1xuICAgICAgICBtc2d0eXBlOiBzdHJpbmc7XG4gICAgICAgIGZvcm1hdD86IHN0cmluZztcbiAgICB9O1xufVxuXG5pbnRlcmZhY2UgSVJvb21EaXJlY3RvcnlFdmVudCBleHRlbmRzIElFdmVudCB7XG4gICAga2V5OiBcInJvb21fZGlyZWN0b3J5XCI7XG59XG5cbmludGVyZmFjZSBJUm9vbURpcmVjdG9yeURvbmVFdmVudCBleHRlbmRzIElFdmVudCB7XG4gICAga2V5OiBcInJvb21fZGlyZWN0b3J5X2RvbmVcIjtcbiAgICBkdXI6IG51bWJlcjsgLy8gdGltZSBzcGVudCBpbiB0aGUgcm9vbSBkaXJlY3RvcnkgbW9kYWxcbn1cblxuaW50ZXJmYWNlIElSb29tRGlyZWN0b3J5U2VhcmNoRXZlbnQgZXh0ZW5kcyBJRXZlbnQge1xuICAgIGtleTogXCJyb29tX2RpcmVjdG9yeV9zZWFyY2hcIjtcbiAgICBzdW06IG51bWJlcjsgLy8gbnVtYmVyIG9mIHNlYXJjaCByZXN1bHRzXG4gICAgc2VnbWVudGF0aW9uOiB7XG4gICAgICAgIHF1ZXJ5X2xlbmd0aDogbnVtYmVyO1xuICAgICAgICBxdWVyeV9udW1fd29yZHM6IG51bWJlcjtcbiAgICB9O1xufVxuXG5pbnRlcmZhY2UgSVN0YXJ0Q2FsbEV2ZW50IGV4dGVuZHMgSUV2ZW50IHtcbiAgICBrZXk6IFwic3RhcnRfY2FsbFwiO1xuICAgIHNlZ21lbnRhdGlvbjogSVJvb21TZWdtZW50cyAmIHtcbiAgICAgICAgaXNfdmlkZW86IGJvb2xlYW47XG4gICAgICAgIGlzX2ppdHNpOiBib29sZWFuO1xuICAgIH07XG59XG5cbmludGVyZmFjZSBJSm9pbkNhbGxFdmVudCBleHRlbmRzIElFdmVudCB7XG4gICAga2V5OiBcImpvaW5fY2FsbFwiO1xuICAgIHNlZ21lbnRhdGlvbjogSVJvb21TZWdtZW50cyAmIHtcbiAgICAgICAgaXNfdmlkZW86IGJvb2xlYW47XG4gICAgICAgIGlzX2ppdHNpOiBib29sZWFuO1xuICAgIH07XG59XG5cbmludGVyZmFjZSBJQmVnaW5JbnZpdGVFdmVudCBleHRlbmRzIElFdmVudCB7XG4gICAga2V5OiBcImJlZ2luX2ludml0ZVwiO1xuICAgIHNlZ21lbnRhdGlvbjogSVJvb21TZWdtZW50cztcbn1cblxuaW50ZXJmYWNlIElTZW5kSW52aXRlRXZlbnQgZXh0ZW5kcyBJRXZlbnQge1xuICAgIGtleTogXCJzZW5kX2ludml0ZVwiO1xuICAgIHN1bTogbnVtYmVyOyAvLyBxdWFudGl0eSB0aGF0IHdhcyBpbnZpdGVkXG4gICAgc2VnbWVudGF0aW9uOiBJUm9vbVNlZ21lbnRzO1xufVxuXG5pbnRlcmZhY2UgSUNyZWF0ZVJvb21FdmVudCBleHRlbmRzIElFdmVudCB7XG4gICAga2V5OiBcImNyZWF0ZV9yb29tXCI7XG4gICAgZHVyOiBudW1iZXI7IC8vIGhvdyBsb25nIGl0IHRvb2sgdG8gY3JlYXRlICh1bnRpbCByZW1vdGUgZWNobylcbiAgICBzZWdtZW50YXRpb246IHtcbiAgICAgICAgcm9vbV9pZDogc3RyaW5nOyAvLyBoYXNoZWRcbiAgICAgICAgbnVtX3VzZXJzOiBudW1iZXI7XG4gICAgICAgIGlzX2VuY3J5cHRlZDogYm9vbGVhbjtcbiAgICAgICAgaXNfcHVibGljOiBib29sZWFuO1xuICAgIH07XG59XG5cbmludGVyZmFjZSBJSm9pblJvb21FdmVudCBleHRlbmRzIElFdmVudCB7XG4gICAga2V5OiBBY3Rpb24uSm9pblJvb207XG4gICAgZHVyOiBudW1iZXI7IC8vIGhvdyBsb25nIGl0IHRvb2sgdG8gam9pbiAodW50aWwgcmVtb3RlIGVjaG8pXG4gICAgc2VnbWVudGF0aW9uOiB7XG4gICAgICAgIHJvb21faWQ6IHN0cmluZzsgLy8gaGFzaGVkXG4gICAgICAgIG51bV91c2VyczogbnVtYmVyO1xuICAgICAgICBpc19lbmNyeXB0ZWQ6IGJvb2xlYW47XG4gICAgICAgIGlzX3B1YmxpYzogYm9vbGVhbjtcbiAgICAgICAgdHlwZTogXCJyb29tX2RpcmVjdG9yeVwiIHwgXCJzbGFzaF9jb21tYW5kXCIgfCBcImxpbmtcIiB8IFwiaW52aXRlXCI7XG4gICAgfTtcbn1cbi8qIGVzbGludC1lbmFibGUgY2FtZWxjYXNlICovXG5cbmNvbnN0IGhhc2hIZXggPSBhc3luYyAoaW5wdXQ6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiA9PiB7XG4gICAgY29uc3QgYnVmID0gbmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKGlucHV0KTtcbiAgICBjb25zdCBkaWdlc3RCdWYgPSBhd2FpdCB3aW5kb3cuY3J5cHRvLnN1YnRsZS5kaWdlc3QoXCJzaGEtMjU2XCIsIGJ1Zik7XG4gICAgcmV0dXJuIFsuLi5uZXcgVWludDhBcnJheShkaWdlc3RCdWYpXS5tYXAoKGI6IG51bWJlcikgPT4gYi50b1N0cmluZygxNikucGFkU3RhcnQoMiwgXCIwXCIpKS5qb2luKFwiXCIpO1xufTtcblxuY29uc3Qga25vd25TY3JlZW5zID0gbmV3IFNldChbXG4gICAgXCJyZWdpc3RlclwiLCBcImxvZ2luXCIsIFwiZm9yZ290X3Bhc3N3b3JkXCIsIFwic29mdF9sb2dvdXRcIiwgXCJuZXdcIiwgXCJzZXR0aW5nc1wiLCBcIndlbGNvbWVcIiwgXCJob21lXCIsIFwic3RhcnRcIiwgXCJkaXJlY3RvcnlcIixcbiAgICBcInN0YXJ0X3Nzb1wiLCBcInN0YXJ0X2Nhc1wiLCBcImdyb3Vwc1wiLCBcImNvbXBsZXRlX3NlY3VyaXR5XCIsIFwicG9zdF9yZWdpc3RyYXRpb25cIiwgXCJyb29tXCIsIFwidXNlclwiLCBcImdyb3VwXCIsXG5dKTtcblxuaW50ZXJmYWNlIElWaWV3RGF0YSB7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIHVybDogc3RyaW5nO1xuICAgIG1ldGE6IFJlY29yZDxzdHJpbmcsIHN0cmluZz47XG59XG5cbi8vIEFwcGx5IGZuIHRvIGFsbCBoYXNoIHBhdGggcGFydHMgYWZ0ZXIgdGhlIDFzdCBvbmVcbmFzeW5jIGZ1bmN0aW9uIGdldFZpZXdEYXRhKGFub255bW91cyA9IHRydWUpOiBQcm9taXNlPElWaWV3RGF0YT4ge1xuICAgIGNvbnN0IHJhbmQgPSByYW5kb21TdHJpbmcoOCk7XG4gICAgY29uc3QgeyBvcmlnaW4sIGhhc2ggfSA9IHdpbmRvdy5sb2NhdGlvbjtcbiAgICBsZXQgeyBwYXRobmFtZSB9ID0gd2luZG93LmxvY2F0aW9uO1xuXG4gICAgLy8gUmVkYWN0IHBhdGhzIHdoaWNoIGNvdWxkIGNvbnRhaW4gdW5leHBlY3RlZCBQSUlcbiAgICBpZiAob3JpZ2luLnN0YXJ0c1dpdGgoJ2ZpbGU6Ly8nKSkge1xuICAgICAgICBwYXRobmFtZSA9IGAvPHJlZGFjdGVkXyR7cmFuZH0+L2A7IC8vIFhYWDogaW5qZWN0IHJhbmQgYmVjYXVzZSBDb3VudC5seSBkb2Vzbid0IGxpa2UgWC0+WCB0cmFuc2l0aW9uc1xuICAgIH1cblxuICAgIGxldCBbXywgc2NyZWVuLCAuLi5wYXJ0c10gPSBoYXNoLnNwbGl0KFwiL1wiKTtcblxuICAgIGlmICgha25vd25TY3JlZW5zLmhhcyhzY3JlZW4pKSB7XG4gICAgICAgIHNjcmVlbiA9IGA8cmVkYWN0ZWRfJHtyYW5kfT5gO1xuICAgIH1cblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFydHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcGFydHNbaV0gPSBhbm9ueW1vdXMgPyBgPHJlZGFjdGVkXyR7cmFuZH0+YCA6IGF3YWl0IGhhc2hIZXgocGFydHNbaV0pO1xuICAgIH1cblxuICAgIGNvbnN0IGhhc2hTdHIgPSBgJHtffS8ke3NjcmVlbn0vJHtwYXJ0cy5qb2luKFwiL1wiKX1gO1xuICAgIGNvbnN0IHVybCA9IG9yaWdpbiArIHBhdGhuYW1lICsgaGFzaFN0cjtcblxuICAgIGNvbnN0IG1ldGEgPSB7fTtcblxuICAgIGxldCBuYW1lID0gXCIkL1wiICsgaGFzaDtcbiAgICBzd2l0Y2ggKHNjcmVlbikge1xuICAgICAgICBjYXNlIFwicm9vbVwiOiB7XG4gICAgICAgICAgICBuYW1lID0gXCJ2aWV3X3Jvb21cIjtcbiAgICAgICAgICAgIGNvbnN0IHJvb21JZCA9IFJvb21WaWV3U3RvcmUuZ2V0Um9vbUlkKCk7XG4gICAgICAgICAgICBuYW1lICs9IFwiIFwiICsgcGFydHNbMF07IC8vIFhYWDogd29ya2Fyb3VuZCBDb3VudC5seSBtaXNzaW5nIFgtPlggdHJhbnNpdGlvbnNcbiAgICAgICAgICAgIG1ldGFbXCJyb29tX2lkXCJdID0gcGFydHNbMF07XG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKG1ldGEsIGdldFJvb21TdGF0cyhyb29tSWQpKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHsgbmFtZSwgdXJsLCBtZXRhIH07XG59XG5cbmNvbnN0IGdldFJvb21TdGF0cyA9IChyb29tSWQ6IHN0cmluZykgPT4ge1xuICAgIGNvbnN0IGNsaSA9IE1hdHJpeENsaWVudFBlZy5nZXQoKTtcbiAgICBjb25zdCByb29tID0gY2xpPy5nZXRSb29tKHJvb21JZCk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBcIm51bV91c2Vyc1wiOiByb29tPy5nZXRKb2luZWRNZW1iZXJDb3VudCgpLFxuICAgICAgICBcImlzX2VuY3J5cHRlZFwiOiBjbGk/LmlzUm9vbUVuY3J5cHRlZChyb29tSWQpLFxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2FtZWxjYXNlXG4gICAgICAgIFwiaXNfcHVibGljXCI6IHJvb20/LmN1cnJlbnRTdGF0ZS5nZXRTdGF0ZUV2ZW50cyhcIm0ucm9vbS5qb2luX3J1bGVzXCIsIFwiXCIpPy5nZXRDb250ZW50KCk/LmpvaW5fcnVsZSA9PT0gXCJwdWJsaWNcIixcbiAgICB9O1xufTtcblxuLy8gYXN5bmMgd3JhcHBlciBmb3IgcmVnZXgtcG93ZXJlZCBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2VcbmNvbnN0IHN0clJlcGxhY2VBc3luYyA9IGFzeW5jIChzdHI6IHN0cmluZywgcmVnZXg6IFJlZ0V4cCwgZm46ICguLi5hcmdzOiBzdHJpbmdbXSkgPT4gUHJvbWlzZTxzdHJpbmc+KSA9PiB7XG4gICAgY29uc3QgcHJvbWlzZXM6IFByb21pc2U8c3RyaW5nPltdID0gW107XG4gICAgLy8gZHJ5LXJ1biB0byBjYWxjdWxhdGUgdGhlIHJlcGxhY2UgdmFsdWVzXG4gICAgc3RyLnJlcGxhY2UocmVnZXgsICguLi5hcmdzOiBzdHJpbmdbXSkgPT4ge1xuICAgICAgICBwcm9taXNlcy5wdXNoKGZuKC4uLmFyZ3MpKTtcbiAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgfSk7XG4gICAgY29uc3QgdmFsdWVzID0gYXdhaXQgUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xuICAgIHJldHVybiBzdHIucmVwbGFjZShyZWdleCwgKCkgPT4gdmFsdWVzLnNoaWZ0KCkpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ291bnRseUFuYWx5dGljcyB7XG4gICAgcHJpdmF0ZSBiYXNlVXJsOiBVUkwgPSBudWxsO1xuICAgIHByaXZhdGUgYXBwS2V5OiBzdHJpbmcgPSBudWxsO1xuICAgIHByaXZhdGUgdXNlcktleTogc3RyaW5nID0gbnVsbDtcbiAgICBwcml2YXRlIGFub255bW91czogYm9vbGVhbjtcbiAgICBwcml2YXRlIGFwcFBsYXRmb3JtOiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBhcHBWZXJzaW9uID0gXCJ1bmtub3duXCI7XG5cbiAgICBwcml2YXRlIGluaXRUaW1lID0gQ291bnRseUFuYWx5dGljcy5nZXRUaW1lc3RhbXAoKTtcbiAgICBwcml2YXRlIGZpcnN0UGFnZSA9IHRydWU7XG4gICAgcHJpdmF0ZSBoZWFydGJlYXRJbnRlcnZhbElkOiBudW1iZXI7XG4gICAgcHJpdmF0ZSBhY3Rpdml0eUludGVydmFsSWQ6IG51bWJlcjtcbiAgICBwcml2YXRlIHRyYWNrVGltZSA9IHRydWU7XG4gICAgcHJpdmF0ZSBsYXN0QmVhdDogbnVtYmVyO1xuICAgIHByaXZhdGUgc3RvcmVkRHVyYXRpb24gPSAwO1xuICAgIHByaXZhdGUgbGFzdFZpZXc6IHN0cmluZztcbiAgICBwcml2YXRlIGxhc3RWaWV3VGltZSA9IDA7XG4gICAgcHJpdmF0ZSBsYXN0Vmlld1N0b3JlZER1cmF0aW9uID0gMDtcbiAgICBwcml2YXRlIHNlc3Npb25TdGFydGVkID0gZmFsc2U7XG4gICAgcHJpdmF0ZSBoZWFydGJlYXRFbmFibGVkID0gZmFsc2U7XG4gICAgcHJpdmF0ZSBpbmFjdGl2aXR5Q291bnRlciA9IDA7XG4gICAgcHJpdmF0ZSBwZW5kaW5nRXZlbnRzOiBJRXZlbnRbXSA9IFtdO1xuXG4gICAgcHJpdmF0ZSBzdGF0aWMgaW50ZXJuYWxJbnN0YW5jZSA9IG5ldyBDb3VudGx5QW5hbHl0aWNzKCk7XG5cbiAgICBwdWJsaWMgc3RhdGljIGdldCBpbnN0YW5jZSgpOiBDb3VudGx5QW5hbHl0aWNzIHtcbiAgICAgICAgcmV0dXJuIENvdW50bHlBbmFseXRpY3MuaW50ZXJuYWxJbnN0YW5jZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGRpc2FibGVkKCkge1xuICAgICAgICByZXR1cm4gIXRoaXMuYmFzZVVybDtcbiAgICB9XG5cbiAgICBwdWJsaWMgY2FuRW5hYmxlKCkge1xuICAgICAgICBjb25zdCBjb25maWcgPSBTZGtDb25maWcuZ2V0KCk7XG4gICAgICAgIHJldHVybiBCb29sZWFuKG5hdmlnYXRvci5kb05vdFRyYWNrICE9PSBcIjFcIiAmJiBjb25maWc/LmNvdW50bHk/LnVybCAmJiBjb25maWc/LmNvdW50bHk/LmFwcEtleSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyBjaGFuZ2VVc2VyS2V5KHVzZXJLZXk6IHN0cmluZywgbWVyZ2UgPSBmYWxzZSkge1xuICAgICAgICBjb25zdCBvbGRVc2VyS2V5ID0gdGhpcy51c2VyS2V5O1xuICAgICAgICB0aGlzLnVzZXJLZXkgPSB1c2VyS2V5O1xuICAgICAgICBpZiAob2xkVXNlcktleSAmJiBtZXJnZSkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5yZXF1ZXN0KHsgb2xkX2RldmljZV9pZDogb2xkVXNlcktleSB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBlbmFibGUoYW5vbnltb3VzID0gdHJ1ZSkge1xuICAgICAgICBpZiAoIXRoaXMuZGlzYWJsZWQgJiYgdGhpcy5hbm9ueW1vdXMgPT09IGFub255bW91cykgcmV0dXJuO1xuICAgICAgICBpZiAoIXRoaXMuY2FuRW5hYmxlKCkpIHJldHVybjtcblxuICAgICAgICBpZiAoIXRoaXMuZGlzYWJsZWQpIHtcbiAgICAgICAgICAgIC8vIGZsdXNoIHJlcXVlc3QgcXVldWUgYXMgb3VyIHVzZXJLZXkgaXMgZ29pbmcgdG8gY2hhbmdlLCBubyBuZWVkIHRvIGF3YWl0IGl0XG4gICAgICAgICAgICB0aGlzLnJlcXVlc3QoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGNvbmZpZyA9IFNka0NvbmZpZy5nZXQoKTtcbiAgICAgICAgdGhpcy5iYXNlVXJsID0gbmV3IFVSTChcIi9pXCIsIGNvbmZpZy5jb3VudGx5LnVybCk7XG4gICAgICAgIHRoaXMuYXBwS2V5ID0gY29uZmlnLmNvdW50bHkuYXBwS2V5O1xuXG4gICAgICAgIHRoaXMuYW5vbnltb3VzID0gYW5vbnltb3VzO1xuICAgICAgICBpZiAoYW5vbnltb3VzKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmNoYW5nZVVzZXJLZXkocmFuZG9tU3RyaW5nKDY0KSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmNoYW5nZVVzZXJLZXkoYXdhaXQgaGFzaEhleChNYXRyaXhDbGllbnRQZWcuZ2V0KCkuZ2V0VXNlcklkKCkpLCB0cnVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHBsYXRmb3JtID0gUGxhdGZvcm1QZWcuZ2V0KCk7XG4gICAgICAgIHRoaXMuYXBwUGxhdGZvcm0gPSBwbGF0Zm9ybS5nZXRIdW1hblJlYWRhYmxlTmFtZSgpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5hcHBWZXJzaW9uID0gYXdhaXQgcGxhdGZvcm0uZ2V0QXBwVmVyc2lvbigpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBsb2dnZXIud2FybihcIkZhaWxlZCB0byBnZXQgYXBwIHZlcnNpb24sIHVzaW5nICd1bmtub3duJ1wiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHN0YXJ0IGhlYXJ0YmVhdFxuICAgICAgICB0aGlzLmhlYXJ0YmVhdEludGVydmFsSWQgPSBzZXRJbnRlcnZhbCh0aGlzLmhlYXJ0YmVhdC5iaW5kKHRoaXMpLCBIRUFSVEJFQVRfSU5URVJWQUwpO1xuICAgICAgICB0aGlzLnRyYWNrU2Vzc2lvbnMoKTtcbiAgICAgICAgdGhpcy50cmFja0Vycm9ycygpO1xuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBkaXNhYmxlKCkge1xuICAgICAgICBpZiAodGhpcy5kaXNhYmxlZCkgcmV0dXJuO1xuICAgICAgICBhd2FpdCB0aGlzLnRyYWNrKFwiT3B0LU91dFwiICk7XG4gICAgICAgIHRoaXMuZW5kU2Vzc2lvbigpO1xuICAgICAgICB3aW5kb3cuY2xlYXJJbnRlcnZhbCh0aGlzLmhlYXJ0YmVhdEludGVydmFsSWQpO1xuICAgICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KHRoaXMuYWN0aXZpdHlJbnRlcnZhbElkKTtcbiAgICAgICAgdGhpcy5iYXNlVXJsID0gbnVsbDtcbiAgICAgICAgLy8gcmVtb3ZlIGxpc3RlbmVycyBib3VuZCBpbiB0cmFja1Nlc3Npb25zKClcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJiZWZvcmV1bmxvYWRcIiwgdGhpcy5lbmRTZXNzaW9uKTtcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ1bmxvYWRcIiwgdGhpcy5lbmRTZXNzaW9uKTtcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ2aXNpYmlsaXR5Y2hhbmdlXCIsIHRoaXMub25WaXNpYmlsaXR5Q2hhbmdlKTtcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgdGhpcy5vblVzZXJBY3Rpdml0eSk7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5vblVzZXJBY3Rpdml0eSk7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCB0aGlzLm9uVXNlckFjdGl2aXR5KTtcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIiwgdGhpcy5vblVzZXJBY3Rpdml0eSk7XG4gICAgfVxuXG4gICAgcHVibGljIHJlcG9ydEZlZWRiYWNrKHJhdGluZzogUmF0aW5nLCBjb21tZW50OiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy50cmFjazxJU3RhclJhdGluZ0V2ZW50PihcIltDTFldX3N0YXJfcmF0aW5nXCIsIHsgcmF0aW5nLCBjb21tZW50IH0sIG51bGwsIHt9LCB0cnVlKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgdHJhY2tQYWdlQ2hhbmdlKGdlbmVyYXRpb25UaW1lTXM/OiBudW1iZXIpIHtcbiAgICAgICAgaWYgKHRoaXMuZGlzYWJsZWQpIHJldHVybjtcbiAgICAgICAgLy8gVE9ETyB1c2UgZ2VuZXJhdGlvblRpbWVNc1xuICAgICAgICB0aGlzLnRyYWNrUGFnZVZpZXcoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIHRyYWNrUGFnZVZpZXcoKSB7XG4gICAgICAgIHRoaXMucmVwb3J0Vmlld0R1cmF0aW9uKCk7XG5cbiAgICAgICAgYXdhaXQgc2xlZXAoMCk7IC8vIFhYWDogd2Ugc2xlZXAgaGVyZSBiZWNhdXNlIG90aGVyd2lzZSB3ZSBnZXQgdGhlIG9sZCBoYXNoIGFuZCBub3QgdGhlIG5ldyBvbmVcbiAgICAgICAgY29uc3Qgdmlld0RhdGEgPSBhd2FpdCBnZXRWaWV3RGF0YSh0aGlzLmFub255bW91cyk7XG5cbiAgICAgICAgY29uc3QgcGFnZSA9IHZpZXdEYXRhLm5hbWU7XG4gICAgICAgIHRoaXMubGFzdFZpZXcgPSBwYWdlO1xuICAgICAgICB0aGlzLmxhc3RWaWV3VGltZSA9IENvdW50bHlBbmFseXRpY3MuZ2V0VGltZXN0YW1wKCk7XG4gICAgICAgIGNvbnN0IHNlZ21lbnRzID0ge1xuICAgICAgICAgICAgLi4udmlld0RhdGEubWV0YSxcbiAgICAgICAgICAgIG5hbWU6IHBhZ2UsXG4gICAgICAgICAgICB2aXNpdDogMSxcbiAgICAgICAgICAgIGRvbWFpbjogd2luZG93LmxvY2F0aW9uLmhvc3RuYW1lLFxuICAgICAgICAgICAgdmlldzogdmlld0RhdGEudXJsLFxuICAgICAgICAgICAgc2VnbWVudDogdGhpcy5hcHBQbGF0Zm9ybSxcbiAgICAgICAgICAgIHN0YXJ0OiB0aGlzLmZpcnN0UGFnZSxcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAodGhpcy5maXJzdFBhZ2UpIHtcbiAgICAgICAgICAgIHRoaXMuZmlyc3RQYWdlID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnRyYWNrPElWaWV3RXZlbnQ+KFwiW0NMWV1fdmlld1wiLCBzZWdtZW50cyk7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBnZXRUaW1lc3RhbXAoKSB7XG4gICAgICAgIHJldHVybiBNYXRoLmZsb29yKG5ldyBEYXRlKCkuZ2V0VGltZSgpIC8gMTAwMCk7XG4gICAgfVxuXG4gICAgLy8gc3RvcmUgdGhlIGxhc3QgbXMgdGltZXN0YW1wIHJldHVybmVkXG4gICAgLy8gd2UgZG8gdGhpcyB0byBwcmV2ZW50IHRoZSB0cyBmcm9tIGV2ZXIgZGVjcmVhc2luZyBpbiB0aGUgY2FzZSBvZiBzeXN0ZW0gdGltZSBjaGFuZ2luZ1xuICAgIHByaXZhdGUgbGFzdE1zVHMgPSAwO1xuXG4gICAgcHJpdmF0ZSBnZXRNc1RpbWVzdGFtcCgpIHtcbiAgICAgICAgY29uc3QgdHMgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICAgICAgaWYgKHRoaXMubGFzdE1zVHMgPj0gdHMpIHtcbiAgICAgICAgICAgIC8vIGluY3JlbWVudCB0cyBhcyB0byBrZWVwIG91ciBkYXRhIHBvaW50cyB3ZWxsLW9yZGVyZWRcbiAgICAgICAgICAgIHRoaXMubGFzdE1zVHMrKztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubGFzdE1zVHMgPSB0cztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5sYXN0TXNUcztcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgcmVjb3JkRXJyb3IoZXJyOiBFcnJvciB8IHN0cmluZywgZmF0YWwgPSBmYWxzZSkge1xuICAgICAgICBpZiAodGhpcy5kaXNhYmxlZCB8fCB0aGlzLmFub255bW91cykgcmV0dXJuO1xuXG4gICAgICAgIGxldCBlcnJvciA9IFwiXCI7XG4gICAgICAgIGlmICh0eXBlb2YgZXJyID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGVyci5zdGFjayAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgIGVycm9yID0gZXJyLnN0YWNrO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGVyci5uYW1lICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGVycm9yICs9IGVyci5uYW1lICsgXCI6XCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZXJyLm1lc3NhZ2UgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3IgKz0gZXJyLm1lc3NhZ2UgKyBcIlxcblwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGVyci5maWxlTmFtZSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgICAgICBlcnJvciArPSBcImluIFwiICsgZXJyLmZpbGVOYW1lICsgXCJcXG5cIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBlcnIubGluZU51bWJlciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgICAgICBlcnJvciArPSBcIm9uIFwiICsgZXJyLmxpbmVOdW1iZXI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZXJyLmNvbHVtbk51bWJlciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgICAgICBlcnJvciArPSBcIjpcIiArIGVyci5jb2x1bW5OdW1iZXI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZXJyb3IgPSBlcnIgKyBcIlwiO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gc2FuaXRpemUgdGhlIGVycm9yIGZyb20gaWRlbnRpZmllcnNcbiAgICAgICAgZXJyb3IgPSBhd2FpdCBzdHJSZXBsYWNlQXN5bmMoZXJyb3IsIC8oWyFAKyNdKS4rPzpbXFx3Oi5dKy9nLCBhc3luYyAoc3Vic3RyaW5nOiBzdHJpbmcsIGdseXBoOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBnbHlwaCArIChhd2FpdCBoYXNoSGV4KHN1YnN0cmluZy5zdWJzdHJpbmcoMSkpKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgbWV0cmljcyA9IHRoaXMuZ2V0TWV0cmljcygpO1xuICAgICAgICBjb25zdCBvYjogSUNyYXNoID0ge1xuICAgICAgICAgICAgX3Jlc29sdXRpb246IG1ldHJpY3M/Ll9yZXNvbHV0aW9uLFxuICAgICAgICAgICAgX2Vycm9yOiBlcnJvcixcbiAgICAgICAgICAgIF9hcHBfdmVyc2lvbjogdGhpcy5hcHBWZXJzaW9uLFxuICAgICAgICAgICAgX3J1bjogQ291bnRseUFuYWx5dGljcy5nZXRUaW1lc3RhbXAoKSAtIHRoaXMuaW5pdFRpbWUsXG4gICAgICAgICAgICBfbm9uZmF0YWw6ICFmYXRhbCxcbiAgICAgICAgICAgIF92aWV3OiB0aGlzLmxhc3RWaWV3LFxuICAgICAgICB9O1xuXG4gICAgICAgIGlmICh0eXBlb2YgbmF2aWdhdG9yLm9uTGluZSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgb2IuX29ubGluZSA9IG5hdmlnYXRvci5vbkxpbmU7XG4gICAgICAgIH1cblxuICAgICAgICBvYi5fYmFja2dyb3VuZCA9IGRvY3VtZW50Lmhhc0ZvY3VzKCk7XG5cbiAgICAgICAgdGhpcy5yZXF1ZXN0KHsgY3Jhc2g6IEpTT04uc3RyaW5naWZ5KG9iKSB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHRyYWNrRXJyb3JzKCkge1xuICAgICAgICAvL292ZXJyaWRlIGdsb2JhbCB1bmNhdWdodCBlcnJvciBoYW5kbGVyXG4gICAgICAgIHdpbmRvdy5vbmVycm9yID0gKG1zZywgdXJsLCBsaW5lLCBjb2wsIGVycikgPT4ge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBlcnIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlY29yZEVycm9yKGVyciwgZmFsc2UpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBsZXQgZXJyb3IgPSBcIlwiO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbXNnICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGVycm9yICs9IG1zZyArIFwiXFxuXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdXJsICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGVycm9yICs9IFwiYXQgXCIgKyB1cmw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbGluZSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgICAgICBlcnJvciArPSBcIjpcIiArIGxpbmU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY29sICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGVycm9yICs9IFwiOlwiICsgY29sO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlcnJvciArPSBcIlxcblwiO1xuXG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3RhY2sgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNhbGxlclxuICAgICAgICAgICAgICAgICAgICBsZXQgZiA9IGFyZ3VtZW50cy5jYWxsZWUuY2FsbGVyO1xuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoZikge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhY2sucHVzaChmLm5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZiA9IGYuY2FsbGVyO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVycm9yICs9IHN0YWNrLmpvaW4oXCJcXG5cIik7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgLy9zaWxlbnQgZXJyb3JcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5yZWNvcmRFcnJvcihlcnJvciwgZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd1bmhhbmRsZWRyZWplY3Rpb24nLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIHRoaXMucmVjb3JkRXJyb3IobmV3IEVycm9yKGBVbmhhbmRsZWQgcmVqZWN0aW9uIChyZWFzb246ICR7ZXZlbnQucmVhc29uPy5zdGFjayB8fCBldmVudC5yZWFzb259KS5gKSwgdHJ1ZSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgaGVhcnRiZWF0KCkge1xuICAgICAgICBjb25zdCBhcmdzOiBQaWNrPElQYXJhbXMsIFwic2Vzc2lvbl9kdXJhdGlvblwiPiA9IHt9O1xuXG4gICAgICAgIC8vIGV4dGVuZCBzZXNzaW9uIGlmIG5lZWRlZFxuICAgICAgICBpZiAodGhpcy5zZXNzaW9uU3RhcnRlZCAmJiB0aGlzLnRyYWNrVGltZSkge1xuICAgICAgICAgICAgY29uc3QgbGFzdCA9IENvdW50bHlBbmFseXRpY3MuZ2V0VGltZXN0YW1wKCk7XG4gICAgICAgICAgICBpZiAobGFzdCAtIHRoaXMubGFzdEJlYXQgPj0gU0VTU0lPTl9VUERBVEVfSU5URVJWQUwpIHtcbiAgICAgICAgICAgICAgICBhcmdzLnNlc3Npb25fZHVyYXRpb24gPSBsYXN0IC0gdGhpcy5sYXN0QmVhdDtcbiAgICAgICAgICAgICAgICB0aGlzLmxhc3RCZWF0ID0gbGFzdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHByb2Nlc3MgZXZlbnQgcXVldWVcbiAgICAgICAgaWYgKHRoaXMucGVuZGluZ0V2ZW50cy5sZW5ndGggPiAwIHx8IGFyZ3Muc2Vzc2lvbl9kdXJhdGlvbikge1xuICAgICAgICAgICAgdGhpcy5yZXF1ZXN0KGFyZ3MpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyByZXF1ZXN0KFxuICAgICAgICBhcmdzOiBPbWl0PElQYXJhbXMsIFwiYXBwX2tleVwiIHwgXCJkZXZpY2VfaWRcIiB8IFwidGltZXN0YW1wXCIgfCBcImhvdXJcIiB8IFwiZG93XCI+XG4gICAgICAgICAgICAmIFBhcnRpYWw8UGljazxJUGFyYW1zLCBcImRldmljZV9pZFwiPj4gPSB7fSxcbiAgICApIHtcbiAgICAgICAgY29uc3QgcmVxdWVzdDogSVBhcmFtcyA9IHtcbiAgICAgICAgICAgIGFwcF9rZXk6IHRoaXMuYXBwS2V5LFxuICAgICAgICAgICAgZGV2aWNlX2lkOiB0aGlzLnVzZXJLZXksXG4gICAgICAgICAgICAuLi50aGlzLmdldFRpbWVQYXJhbXMoKSxcbiAgICAgICAgICAgIC4uLmFyZ3MsXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKHRoaXMucGVuZGluZ0V2ZW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBFVkVOVF9CQVRDSF9TSVpFID0gMTA7XG4gICAgICAgICAgICBjb25zdCBldmVudHMgPSB0aGlzLnBlbmRpbmdFdmVudHMuc3BsaWNlKDAsIEVWRU5UX0JBVENIX1NJWkUpO1xuICAgICAgICAgICAgcmVxdWVzdC5ldmVudHMgPSBKU09OLnN0cmluZ2lmeShldmVudHMpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyhyZXF1ZXN0IGFzIHt9KTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgd2luZG93LmZldGNoKHRoaXMuYmFzZVVybC50b1N0cmluZygpLCB7XG4gICAgICAgICAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgICAgICAgICAgICBtb2RlOiBcIm5vLWNvcnNcIixcbiAgICAgICAgICAgICAgICBjYWNoZTogXCJuby1jYWNoZVwiLFxuICAgICAgICAgICAgICAgIHJlZGlyZWN0OiBcImZvbGxvd1wiLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGJvZHk6IHBhcmFtcyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBsb2dnZXIuZXJyb3IoXCJBbmFseXRpY3MgZXJyb3I6IFwiLCBlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0VGltZVBhcmFtcygpOiBQaWNrPElQYXJhbXMsIFwidGltZXN0YW1wXCIgfCBcImhvdXJcIiB8IFwiZG93XCI+IHtcbiAgICAgICAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0aW1lc3RhbXA6IHRoaXMuZ2V0TXNUaW1lc3RhbXAoKSxcbiAgICAgICAgICAgIGhvdXI6IGRhdGUuZ2V0SG91cnMoKSxcbiAgICAgICAgICAgIGRvdzogZGF0ZS5nZXREYXkoKSxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHF1ZXVlKGFyZ3M6IE9taXQ8SUV2ZW50LCBcInRpbWVzdGFtcFwiIHwgXCJob3VyXCIgfCBcImRvd1wiIHwgXCJjb3VudFwiPiAmIFBhcnRpYWw8UGljazxJRXZlbnQsIFwiY291bnRcIj4+KSB7XG4gICAgICAgIGNvbnN0IHsgY291bnQgPSAxLCAuLi5yZXN0IH0gPSBhcmdzO1xuICAgICAgICBjb25zdCBldiA9IHtcbiAgICAgICAgICAgIC4uLnRoaXMuZ2V0VGltZVBhcmFtcygpLFxuICAgICAgICAgICAgLi4ucmVzdCxcbiAgICAgICAgICAgIGNvdW50LFxuICAgICAgICAgICAgcGxhdGZvcm06IHRoaXMuYXBwUGxhdGZvcm0sXG4gICAgICAgICAgICBhcHBfdmVyc2lvbjogdGhpcy5hcHBWZXJzaW9uLFxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMucGVuZGluZ0V2ZW50cy5wdXNoKGV2KTtcbiAgICAgICAgaWYgKHRoaXMucGVuZGluZ0V2ZW50cy5sZW5ndGggPiBNQVhfUEVORElOR19FVkVOVFMpIHtcbiAgICAgICAgICAgIHRoaXMucGVuZGluZ0V2ZW50cy5zaGlmdCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRPcmllbnRhdGlvbiA9ICgpOiBPcmllbnRhdGlvbiA9PiB7XG4gICAgICAgIHJldHVybiB3aW5kb3cubWF0Y2hNZWRpYShcIihvcmllbnRhdGlvbjogbGFuZHNjYXBlKVwiKS5tYXRjaGVzXG4gICAgICAgICAgICA/IE9yaWVudGF0aW9uLkxhbmRzY2FwZVxuICAgICAgICAgICAgOiBPcmllbnRhdGlvbi5Qb3J0cmFpdDtcbiAgICB9O1xuXG4gICAgcHJpdmF0ZSByZXBvcnRPcmllbnRhdGlvbiA9ICgpID0+IHtcbiAgICAgICAgdGhpcy50cmFjazxJT3JpZW50YXRpb25FdmVudD4oXCJbQ0xZXV9vcmllbnRhdGlvblwiLCB7XG4gICAgICAgICAgICBtb2RlOiB0aGlzLmdldE9yaWVudGF0aW9uKCksXG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBwcml2YXRlIHN0YXJ0VGltZSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLnRyYWNrVGltZSkge1xuICAgICAgICAgICAgdGhpcy50cmFja1RpbWUgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5sYXN0QmVhdCA9IENvdW50bHlBbmFseXRpY3MuZ2V0VGltZXN0YW1wKCkgLSB0aGlzLnN0b3JlZER1cmF0aW9uO1xuICAgICAgICAgICAgdGhpcy5sYXN0Vmlld1RpbWUgPSBDb3VudGx5QW5hbHl0aWNzLmdldFRpbWVzdGFtcCgpIC0gdGhpcy5sYXN0Vmlld1N0b3JlZER1cmF0aW9uO1xuICAgICAgICAgICAgdGhpcy5sYXN0Vmlld1N0b3JlZER1cmF0aW9uID0gMDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgc3RvcFRpbWUoKSB7XG4gICAgICAgIGlmICh0aGlzLnRyYWNrVGltZSkge1xuICAgICAgICAgICAgdGhpcy50cmFja1RpbWUgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuc3RvcmVkRHVyYXRpb24gPSBDb3VudGx5QW5hbHl0aWNzLmdldFRpbWVzdGFtcCgpIC0gdGhpcy5sYXN0QmVhdDtcbiAgICAgICAgICAgIHRoaXMubGFzdFZpZXdTdG9yZWREdXJhdGlvbiA9IENvdW50bHlBbmFseXRpY3MuZ2V0VGltZXN0YW1wKCkgLSB0aGlzLmxhc3RWaWV3VGltZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0TWV0cmljcygpOiBJTWV0cmljcyB7XG4gICAgICAgIGlmICh0aGlzLmFub255bW91cykgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgY29uc3QgbWV0cmljczogSU1ldHJpY3MgPSB7fTtcblxuICAgICAgICAvLyBnZXR0aW5nIGFwcCB2ZXJzaW9uXG4gICAgICAgIG1ldHJpY3MuX2FwcF92ZXJzaW9uID0gdGhpcy5hcHBWZXJzaW9uO1xuICAgICAgICBtZXRyaWNzLl91YSA9IG5hdmlnYXRvci51c2VyQWdlbnQ7XG5cbiAgICAgICAgLy8gZ2V0dGluZyByZXNvbHV0aW9uXG4gICAgICAgIGlmIChzY3JlZW4ud2lkdGggJiYgc2NyZWVuLmhlaWdodCkge1xuICAgICAgICAgICAgbWV0cmljcy5fcmVzb2x1dGlvbiA9IGAke3NjcmVlbi53aWR0aH14JHtzY3JlZW4uaGVpZ2h0fWA7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBnZXR0aW5nIGRlbnNpdHkgcmF0aW9cbiAgICAgICAgaWYgKHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvKSB7XG4gICAgICAgICAgICBtZXRyaWNzLl9kZW5zaXR5ID0gd2luZG93LmRldmljZVBpeGVsUmF0aW87XG4gICAgICAgIH1cblxuICAgICAgICAvLyBnZXR0aW5nIGxvY2FsZVxuICAgICAgICBtZXRyaWNzLl9sb2NhbGUgPSBnZXRDdXJyZW50TGFuZ3VhZ2UoKTtcblxuICAgICAgICByZXR1cm4gbWV0cmljcztcbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIGJlZ2luU2Vzc2lvbihoZWFydGJlYXQgPSB0cnVlKSB7XG4gICAgICAgIGlmICghdGhpcy5zZXNzaW9uU3RhcnRlZCkge1xuICAgICAgICAgICAgdGhpcy5yZXBvcnRPcmllbnRhdGlvbigpO1xuICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgdGhpcy5yZXBvcnRPcmllbnRhdGlvbik7XG5cbiAgICAgICAgICAgIHRoaXMubGFzdEJlYXQgPSBDb3VudGx5QW5hbHl0aWNzLmdldFRpbWVzdGFtcCgpO1xuICAgICAgICAgICAgdGhpcy5zZXNzaW9uU3RhcnRlZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLmhlYXJ0YmVhdEVuYWJsZWQgPSBoZWFydGJlYXQ7XG5cbiAgICAgICAgICAgIGNvbnN0IHVzZXJEZXRhaWxzOiBJVXNlckRldGFpbHMgPSB7XG4gICAgICAgICAgICAgICAgY3VzdG9tOiB7XG4gICAgICAgICAgICAgICAgICAgIFwiaG9tZV9zZXJ2ZXJcIjogTWF0cml4Q2xpZW50UGVnLmdldCgpICYmIE1hdHJpeENsaWVudFBlZy5nZXRIb21lc2VydmVyTmFtZSgpLCAvLyBUT0RPIGhhc2g/XG4gICAgICAgICAgICAgICAgICAgIFwiYW5vbnltb3VzXCI6IHRoaXMuYW5vbnltb3VzLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBjb25zdCByZXF1ZXN0OiBQYXJhbWV0ZXJzPHR5cGVvZiBDb3VudGx5QW5hbHl0aWNzLnByb3RvdHlwZS5yZXF1ZXN0PlswXSA9IHtcbiAgICAgICAgICAgICAgICBiZWdpbl9zZXNzaW9uOiAxLFxuICAgICAgICAgICAgICAgIHVzZXJfZGV0YWlsczogSlNPTi5zdHJpbmdpZnkodXNlckRldGFpbHMpLFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgY29uc3QgbWV0cmljcyA9IHRoaXMuZ2V0TWV0cmljcygpO1xuICAgICAgICAgICAgaWYgKG1ldHJpY3MpIHtcbiAgICAgICAgICAgICAgICByZXF1ZXN0Lm1ldHJpY3MgPSBKU09OLnN0cmluZ2lmeShtZXRyaWNzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYXdhaXQgdGhpcy5yZXF1ZXN0KHJlcXVlc3QpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZXBvcnRWaWV3RHVyYXRpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLmxhc3RWaWV3KSB7XG4gICAgICAgICAgICB0aGlzLnRyYWNrPElWaWV3RXZlbnQ+KFwiW0NMWV1fdmlld1wiLCB7XG4gICAgICAgICAgICAgICAgbmFtZTogdGhpcy5sYXN0VmlldyxcbiAgICAgICAgICAgIH0sIG51bGwsIHtcbiAgICAgICAgICAgICAgICBkdXI6IHRoaXMudHJhY2tUaW1lID8gQ291bnRseUFuYWx5dGljcy5nZXRUaW1lc3RhbXAoKSAtIHRoaXMubGFzdFZpZXdUaW1lIDogdGhpcy5sYXN0Vmlld1N0b3JlZER1cmF0aW9uLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLmxhc3RWaWV3ID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgZW5kU2Vzc2lvbiA9ICgpID0+IHtcbiAgICAgICAgaWYgKHRoaXMuc2Vzc2lvblN0YXJ0ZWQpIHtcbiAgICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIHRoaXMucmVwb3J0T3JpZW50YXRpb24pO1xuXG4gICAgICAgICAgICB0aGlzLnJlcG9ydFZpZXdEdXJhdGlvbigpO1xuICAgICAgICAgICAgdGhpcy5yZXF1ZXN0KHtcbiAgICAgICAgICAgICAgICBlbmRfc2Vzc2lvbjogMSxcbiAgICAgICAgICAgICAgICBzZXNzaW9uX2R1cmF0aW9uOiBDb3VudGx5QW5hbHl0aWNzLmdldFRpbWVzdGFtcCgpIC0gdGhpcy5sYXN0QmVhdCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2Vzc2lvblN0YXJ0ZWQgPSBmYWxzZTtcbiAgICB9O1xuXG4gICAgcHJpdmF0ZSBvblZpc2liaWxpdHlDaGFuZ2UgPSAoKSA9PiB7XG4gICAgICAgIGlmIChkb2N1bWVudC5oaWRkZW4pIHtcbiAgICAgICAgICAgIHRoaXMuc3RvcFRpbWUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc3RhcnRUaW1lKCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcHJpdmF0ZSBvblVzZXJBY3Rpdml0eSA9ICgpID0+IHtcbiAgICAgICAgaWYgKHRoaXMuaW5hY3Rpdml0eUNvdW50ZXIgPj0gSU5BQ1RJVklUWV9USU1FKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0VGltZSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaW5hY3Rpdml0eUNvdW50ZXIgPSAwO1xuICAgIH07XG5cbiAgICBwcml2YXRlIHRyYWNrU2Vzc2lvbnMoKSB7XG4gICAgICAgIHRoaXMuYmVnaW5TZXNzaW9uKCk7XG4gICAgICAgIHRoaXMuc3RhcnRUaW1lKCk7XG5cbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJiZWZvcmV1bmxvYWRcIiwgdGhpcy5lbmRTZXNzaW9uKTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJ1bmxvYWRcIiwgdGhpcy5lbmRTZXNzaW9uKTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJ2aXNpYmlsaXR5Y2hhbmdlXCIsIHRoaXMub25WaXNpYmlsaXR5Q2hhbmdlKTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgdGhpcy5vblVzZXJBY3Rpdml0eSk7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5vblVzZXJBY3Rpdml0eSk7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCB0aGlzLm9uVXNlckFjdGl2aXR5KTtcbiAgICAgICAgLy8gVXNpbmcgdGhlIHBhc3NpdmUgb3B0aW9uIHRvIG5vdCBibG9jayB0aGUgbWFpbiB0aHJlYWRcbiAgICAgICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0V2ZW50VGFyZ2V0L2FkZEV2ZW50TGlzdGVuZXIjaW1wcm92aW5nX3Njcm9sbGluZ19wZXJmb3JtYW5jZV93aXRoX3Bhc3NpdmVfbGlzdGVuZXJzXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsIHRoaXMub25Vc2VyQWN0aXZpdHksIHsgcGFzc2l2ZTogdHJ1ZSB9KTtcblxuICAgICAgICB0aGlzLmFjdGl2aXR5SW50ZXJ2YWxJZCA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuaW5hY3Rpdml0eUNvdW50ZXIrKztcbiAgICAgICAgICAgIGlmICh0aGlzLmluYWN0aXZpdHlDb3VudGVyID49IElOQUNUSVZJVFlfVElNRSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RvcFRpbWUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgNjBfMDAwKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgdHJhY2tCZWdpbkludml0ZShyb29tSWQ6IHN0cmluZykge1xuICAgICAgICB0aGlzLnRyYWNrPElCZWdpbkludml0ZUV2ZW50PihcImJlZ2luX2ludml0ZVwiLCB7fSwgcm9vbUlkKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgdHJhY2tTZW5kSW52aXRlKHN0YXJ0VGltZTogbnVtYmVyLCByb29tSWQ6IHN0cmluZywgcXR5OiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy50cmFjazxJU2VuZEludml0ZUV2ZW50PihcInNlbmRfaW52aXRlXCIsIHt9LCByb29tSWQsIHtcbiAgICAgICAgICAgIGR1cjogQ291bnRseUFuYWx5dGljcy5nZXRUaW1lc3RhbXAoKSAtIHN0YXJ0VGltZSxcbiAgICAgICAgICAgIHN1bTogcXR5LFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgdHJhY2tSb29tQ3JlYXRlKHN0YXJ0VGltZTogbnVtYmVyLCByb29tSWQ6IHN0cmluZykge1xuICAgICAgICBpZiAodGhpcy5kaXNhYmxlZCkgcmV0dXJuO1xuXG4gICAgICAgIGxldCBlbmRUaW1lID0gQ291bnRseUFuYWx5dGljcy5nZXRUaW1lc3RhbXAoKTtcbiAgICAgICAgY29uc3QgY2xpID0gTWF0cml4Q2xpZW50UGVnLmdldCgpO1xuICAgICAgICBpZiAoIWNsaS5nZXRSb29tKHJvb21JZCkpIHtcbiAgICAgICAgICAgIGF3YWl0IG5ldyBQcm9taXNlPHZvaWQ+KHJlc29sdmUgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGhhbmRsZXIgPSAocm9vbSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAocm9vbS5yb29tSWQgPT09IHJvb21JZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2xpLm9mZihcIlJvb21cIiwgaGFuZGxlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGNsaS5vbihcIlJvb21cIiwgaGFuZGxlcik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGVuZFRpbWUgPSBDb3VudGx5QW5hbHl0aWNzLmdldFRpbWVzdGFtcCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy50cmFjazxJQ3JlYXRlUm9vbUV2ZW50PihcImNyZWF0ZV9yb29tXCIsIHt9LCByb29tSWQsIHtcbiAgICAgICAgICAgIGR1cjogZW5kVGltZSAtIHN0YXJ0VGltZSxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHVibGljIHRyYWNrUm9vbUpvaW4oc3RhcnRUaW1lOiBudW1iZXIsIHJvb21JZDogc3RyaW5nLCB0eXBlOiBJSm9pblJvb21FdmVudFtcInNlZ21lbnRhdGlvblwiXVtcInR5cGVcIl0pIHtcbiAgICAgICAgdGhpcy50cmFjazxJSm9pblJvb21FdmVudD4oQWN0aW9uLkpvaW5Sb29tLCB7IHR5cGUgfSwgcm9vbUlkLCB7XG4gICAgICAgICAgICBkdXI6IENvdW50bHlBbmFseXRpY3MuZ2V0VGltZXN0YW1wKCkgLSBzdGFydFRpbWUsXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyB0cmFja1NlbmRNZXNzYWdlKFxuICAgICAgICBzdGFydFRpbWU6IG51bWJlcixcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNhbWVsY2FzZVxuICAgICAgICBzZW5kUHJvbWlzZTogUHJvbWlzZTx7ZXZlbnRfaWQ6IHN0cmluZ30+LFxuICAgICAgICByb29tSWQ6IHN0cmluZyxcbiAgICAgICAgaXNFZGl0OiBib29sZWFuLFxuICAgICAgICBpc1JlcGx5OiBib29sZWFuLFxuICAgICAgICBjb250ZW50OiBJQ29udGVudCxcbiAgICApIHtcbiAgICAgICAgaWYgKHRoaXMuZGlzYWJsZWQpIHJldHVybjtcbiAgICAgICAgY29uc3QgY2xpID0gTWF0cml4Q2xpZW50UGVnLmdldCgpO1xuICAgICAgICBjb25zdCByb29tID0gY2xpLmdldFJvb20ocm9vbUlkKTtcblxuICAgICAgICBjb25zdCBldmVudElkID0gKGF3YWl0IHNlbmRQcm9taXNlKS5ldmVudF9pZDtcbiAgICAgICAgbGV0IGVuZFRpbWUgPSBDb3VudGx5QW5hbHl0aWNzLmdldFRpbWVzdGFtcCgpO1xuXG4gICAgICAgIGlmICghcm9vbS5maW5kRXZlbnRCeUlkKGV2ZW50SWQpKSB7XG4gICAgICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZTx2b2lkPihyZXNvbHZlID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBoYW5kbGVyID0gKGV2KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChldi5nZXRJZCgpID09PSBldmVudElkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByb29tLm9mZihcIlJvb20ubG9jYWxFY2hvVXBkYXRlZFwiLCBoYW5kbGVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICByb29tLm9uKFwiUm9vbS5sb2NhbEVjaG9VcGRhdGVkXCIsIGhhbmRsZXIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBlbmRUaW1lID0gQ291bnRseUFuYWx5dGljcy5nZXRUaW1lc3RhbXAoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudHJhY2s8SVNlbmRNZXNzYWdlRXZlbnQ+KFwic2VuZF9tZXNzYWdlXCIsIHtcbiAgICAgICAgICAgIGlzX2VkaXQ6IGlzRWRpdCxcbiAgICAgICAgICAgIGlzX3JlcGx5OiBpc1JlcGx5LFxuICAgICAgICAgICAgbXNndHlwZTogY29udGVudC5tc2d0eXBlLFxuICAgICAgICAgICAgZm9ybWF0OiBjb250ZW50LmZvcm1hdCxcbiAgICAgICAgfSwgcm9vbUlkLCB7XG4gICAgICAgICAgICBkdXI6IGVuZFRpbWUgLSBzdGFydFRpbWUsXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHB1YmxpYyB0cmFja1N0YXJ0Q2FsbChyb29tSWQ6IHN0cmluZywgaXNWaWRlbyA9IGZhbHNlLCBpc0ppdHNpID0gZmFsc2UpIHtcbiAgICAgICAgdGhpcy50cmFjazxJU3RhcnRDYWxsRXZlbnQ+KFwic3RhcnRfY2FsbFwiLCB7XG4gICAgICAgICAgICBpc192aWRlbzogaXNWaWRlbyxcbiAgICAgICAgICAgIGlzX2ppdHNpOiBpc0ppdHNpLFxuICAgICAgICB9LCByb29tSWQpO1xuICAgIH1cblxuICAgIHB1YmxpYyB0cmFja0pvaW5DYWxsKHJvb21JZDogc3RyaW5nLCBpc1ZpZGVvID0gZmFsc2UsIGlzSml0c2kgPSBmYWxzZSkge1xuICAgICAgICB0aGlzLnRyYWNrPElKb2luQ2FsbEV2ZW50PihcImpvaW5fY2FsbFwiLCB7XG4gICAgICAgICAgICBpc192aWRlbzogaXNWaWRlbyxcbiAgICAgICAgICAgIGlzX2ppdHNpOiBpc0ppdHNpLFxuICAgICAgICB9LCByb29tSWQpO1xuICAgIH1cblxuICAgIHB1YmxpYyB0cmFja1Jvb21EaXJlY3RvcnlCZWdpbigpIHtcbiAgICAgICAgdGhpcy50cmFjazxJUm9vbURpcmVjdG9yeUV2ZW50PihcInJvb21fZGlyZWN0b3J5XCIpO1xuICAgIH1cblxuICAgIHB1YmxpYyB0cmFja1Jvb21EaXJlY3Rvcnkoc3RhcnRUaW1lOiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy50cmFjazxJUm9vbURpcmVjdG9yeURvbmVFdmVudD4oXCJyb29tX2RpcmVjdG9yeV9kb25lXCIsIHt9LCBudWxsLCB7XG4gICAgICAgICAgICBkdXI6IENvdW50bHlBbmFseXRpY3MuZ2V0VGltZXN0YW1wKCkgLSBzdGFydFRpbWUsXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHB1YmxpYyB0cmFja1Jvb21EaXJlY3RvcnlTZWFyY2gobnVtUmVzdWx0czogbnVtYmVyLCBxdWVyeTogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMudHJhY2s8SVJvb21EaXJlY3RvcnlTZWFyY2hFdmVudD4oXCJyb29tX2RpcmVjdG9yeV9zZWFyY2hcIiwge1xuICAgICAgICAgICAgcXVlcnlfbGVuZ3RoOiBxdWVyeS5sZW5ndGgsXG4gICAgICAgICAgICBxdWVyeV9udW1fd29yZHM6IHF1ZXJ5LnNwbGl0KFwiIFwiKS5sZW5ndGgsXG4gICAgICAgIH0sIG51bGwsIHtcbiAgICAgICAgICAgIHN1bTogbnVtUmVzdWx0cyxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIHRyYWNrPEUgZXh0ZW5kcyBJRXZlbnQ+KFxuICAgICAgICBrZXk6IEVbXCJrZXlcIl0sXG4gICAgICAgIHNlZ21lbnRzPzogT21pdDxFW1wic2VnbWVudGF0aW9uXCJdLCBcInJvb21faWRcIiB8IFwibnVtX3VzZXJzXCIgfCBcImlzX2VuY3J5cHRlZFwiIHwgXCJpc19wdWJsaWNcIj4sXG4gICAgICAgIHJvb21JZD86IHN0cmluZyxcbiAgICAgICAgYXJncz86IFBhcnRpYWw8UGljazxFLCBcImR1clwiIHwgXCJzdW1cIiB8IFwidGltZXN0YW1wXCI+PixcbiAgICAgICAgYW5vbnltb3VzID0gZmFsc2UsXG4gICAgKSB7XG4gICAgICAgIGlmICh0aGlzLmRpc2FibGVkICYmICFhbm9ueW1vdXMpIHJldHVybjtcblxuICAgICAgICBsZXQgc2VnbWVudGF0aW9uID0gc2VnbWVudHMgfHwge307XG5cbiAgICAgICAgaWYgKHJvb21JZCkge1xuICAgICAgICAgICAgc2VnbWVudGF0aW9uID0ge1xuICAgICAgICAgICAgICAgIHJvb21faWQ6IGF3YWl0IGhhc2hIZXgocm9vbUlkKSxcbiAgICAgICAgICAgICAgICAuLi5nZXRSb29tU3RhdHMocm9vbUlkKSxcbiAgICAgICAgICAgICAgICAuLi5zZWdtZW50cyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnF1ZXVlKHtcbiAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgIGNvdW50OiAxLFxuICAgICAgICAgICAgc2VnbWVudGF0aW9uLFxuICAgICAgICAgICAgLi4uYXJncyxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gaWYgdGhpcyBldmVudCBjYW4gYmUgc2VudCBhbm9ueW1vdXNseSBhbmQgd2UgYXJlIGRpc2FibGVkIHRoZW4gZGlzcGF0Y2ggaXQgcmlnaHQgYXdheVxuICAgICAgICBpZiAodGhpcy5kaXNhYmxlZCAmJiBhbm9ueW1vdXMpIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucmVxdWVzdCh7IGRldmljZV9pZDogcmFuZG9tU3RyaW5nKDY0KSB9KTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLy8gZXhwb3NlIG9uIHdpbmRvdyBmb3IgZWFzeSBhY2Nlc3MgZnJvbSB0aGUgY29uc29sZVxud2luZG93Lm14Q291bnRseUFuYWx5dGljcyA9IENvdW50bHlBbmFseXRpY3M7XG4iXX0=