"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.legacyVerifyUser = legacyVerifyUser;
exports.pendingVerificationRequestForUser = pendingVerificationRequestForUser;
exports.verifyDevice = verifyDevice;
exports.verifyUser = verifyUser;

var _MatrixClientPeg = require("./MatrixClientPeg");

var _dispatcher = _interopRequireDefault(require("./dispatcher/dispatcher"));

var _Modal = _interopRequireDefault(require("./Modal"));

var _RightPanelStorePhases = require("./stores/RightPanelStorePhases");

var _createRoom = require("./createRoom");

var _SecurityManager = require("./SecurityManager");

var _crypto = require("matrix-js-sdk/src/crypto");

var _actions = require("./dispatcher/actions");

var _UntrustedDeviceDialog = _interopRequireDefault(require("./components/views/dialogs/UntrustedDeviceDialog"));

var _ManualDeviceKeyVerificationDialog = _interopRequireDefault(require("./components/views/dialogs/ManualDeviceKeyVerificationDialog"));

/*
Copyright 2019, 2020, 2021 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
async function enable4SIfNeeded() {
  const cli = _MatrixClientPeg.MatrixClientPeg.get();

  if (!cli.isCryptoEnabled()) {
    return false;
  }

  const usk = cli.getCrossSigningId("user_signing");

  if (!usk) {
    await (0, _SecurityManager.accessSecretStorage)();
    return false;
  }

  return true;
}

async function verifyDevice(user, device) {
  const cli = _MatrixClientPeg.MatrixClientPeg.get();

  if (cli.isGuest()) {
    _dispatcher.default.dispatch({
      action: 'require_registration'
    });

    return;
  } // if cross-signing is not explicitly disabled, check if it should be enabled first.


  if (cli.getCryptoTrustCrossSignedDevices()) {
    if (!(await enable4SIfNeeded())) {
      return;
    }
  }

  _Modal.default.createTrackedDialog("Verification warning", "unverified session", _UntrustedDeviceDialog.default, {
    user,
    device,
    onFinished: async action => {
      if (action === "sas") {
        const verificationRequestPromise = cli.legacyDeviceVerification(user.userId, device.deviceId, _crypto.verificationMethods.SAS);

        _dispatcher.default.dispatch({
          action: _actions.Action.SetRightPanelPhase,
          phase: _RightPanelStorePhases.RightPanelPhases.EncryptionPanel,
          refireParams: {
            member: user,
            verificationRequestPromise
          }
        });
      } else if (action === "legacy") {
        _Modal.default.createTrackedDialog("Legacy verify session", "legacy verify session", _ManualDeviceKeyVerificationDialog.default, {
          userId: user.userId,
          device
        });
      }
    }
  });
}

async function legacyVerifyUser(user) {
  const cli = _MatrixClientPeg.MatrixClientPeg.get();

  if (cli.isGuest()) {
    _dispatcher.default.dispatch({
      action: 'require_registration'
    });

    return;
  } // if cross-signing is not explicitly disabled, check if it should be enabled first.


  if (cli.getCryptoTrustCrossSignedDevices()) {
    if (!(await enable4SIfNeeded())) {
      return;
    }
  }

  const verificationRequestPromise = cli.requestVerification(user.userId);

  _dispatcher.default.dispatch({
    action: _actions.Action.SetRightPanelPhase,
    phase: _RightPanelStorePhases.RightPanelPhases.EncryptionPanel,
    refireParams: {
      member: user,
      verificationRequestPromise
    }
  });
}

async function verifyUser(user) {
  const cli = _MatrixClientPeg.MatrixClientPeg.get();

  if (cli.isGuest()) {
    _dispatcher.default.dispatch({
      action: 'require_registration'
    });

    return;
  }

  if (!(await enable4SIfNeeded())) {
    return;
  }

  const existingRequest = pendingVerificationRequestForUser(user);

  _dispatcher.default.dispatch({
    action: _actions.Action.SetRightPanelPhase,
    phase: _RightPanelStorePhases.RightPanelPhases.EncryptionPanel,
    refireParams: {
      member: user,
      verificationRequest: existingRequest
    }
  });
}

function pendingVerificationRequestForUser(user) {
  const cli = _MatrixClientPeg.MatrixClientPeg.get();

  const dmRoom = (0, _createRoom.findDMForUser)(cli, user.userId);

  if (dmRoom) {
    return cli.findVerificationRequestDMInProgress(dmRoom.roomId);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,