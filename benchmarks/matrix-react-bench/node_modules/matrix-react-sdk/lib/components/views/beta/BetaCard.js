"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.BetaPill = void 0;

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _languageHandler = require("../../../languageHandler");

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

var _SettingsStore = _interopRequireDefault(require("../../../settings/SettingsStore"));

var _SettingLevel = require("../../../settings/SettingLevel");

var _TextWithTooltip = _interopRequireDefault(require("../elements/TextWithTooltip"));

var _Modal = _interopRequireDefault(require("../../../Modal"));

var _BetaFeedbackDialog = _interopRequireDefault(require("../dialogs/BetaFeedbackDialog"));

var _SdkConfig = _interopRequireDefault(require("../../../SdkConfig"));

var _SettingsFlag = _interopRequireDefault(require("../elements/SettingsFlag"));

/*
Copyright 2021 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const BetaPill = ({
  onClick
}) => {
  if (onClick) {
    return /*#__PURE__*/_react.default.createElement(_TextWithTooltip.default, {
      class: (0, _classnames.default)("mx_BetaCard_betaPill", {
        mx_BetaCard_betaPill_clickable: !!onClick
      }),
      tooltip: /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_Tooltip_title"
      }, (0, _languageHandler._t)("Spaces is a beta feature")), /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_Tooltip_sub"
      }, (0, _languageHandler._t)("Tap for more info"))),
      onClick: onClick,
      tooltipProps: {
        yOffset: -10
      }
    }, (0, _languageHandler._t)("Beta"));
  }

  return /*#__PURE__*/_react.default.createElement("span", {
    className: (0, _classnames.default)("mx_BetaCard_betaPill", {
      mx_BetaCard_betaPill_clickable: !!onClick
    }),
    onClick: onClick
  }, (0, _languageHandler._t)("Beta"));
};

exports.BetaPill = BetaPill;

const BetaCard = ({
  title: titleOverride,
  featureId
}) => {
  const info = _SettingsStore.default.getBetaInfo(featureId);

  if (!info) return null; // Beta is invalid/disabled

  const {
    title,
    caption,
    disclaimer,
    image,
    feedbackLabel,
    feedbackSubheading,
    extraSettings
  } = info;

  const value = _SettingsStore.default.getValue(featureId);

  let feedbackButton;

  if (value && feedbackLabel && feedbackSubheading && _SdkConfig.default.get().bug_report_endpoint_url) {
    feedbackButton = /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      onClick: () => {
        _Modal.default.createTrackedDialog("Beta Feedback", featureId, _BetaFeedbackDialog.default, {
          featureId
        });
      },
      kind: "primary"
    }, (0, _languageHandler._t)("Feedback"));
  }

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_BetaCard"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_BetaCard_columns"
  }, /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("h3", {
    className: "mx_BetaCard_title"
  }, titleOverride || (0, _languageHandler._t)(title), /*#__PURE__*/_react.default.createElement(BetaPill, null)), /*#__PURE__*/_react.default.createElement("span", {
    className: "mx_BetaCard_caption"
  }, (0, _languageHandler._t)(caption)), /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_BetaCard_buttons"
  }, feedbackButton, /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
    onClick: () => _SettingsStore.default.setValue(featureId, null, _SettingLevel.SettingLevel.DEVICE, !value),
    kind: feedbackButton ? "primary_outline" : "primary"
  }, value ? (0, _languageHandler._t)("Leave the beta") : (0, _languageHandler._t)("Join the beta"))), disclaimer && /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_BetaCard_disclaimer"
  }, disclaimer(value))), /*#__PURE__*/_react.default.createElement("img", {
    src: image,
    alt: ""
  })), extraSettings && value && /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_BetaCard_relatedSettings"
  }, extraSettings.map(key => /*#__PURE__*/_react.default.createElement(_SettingsFlag.default, {
    key: key,
    name: key,
    level: _SettingLevel.SettingLevel.DEVICE
  }))));
};

var _default = BetaCard;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,