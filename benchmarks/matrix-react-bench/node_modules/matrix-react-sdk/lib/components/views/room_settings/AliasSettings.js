"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _EditableItemList = _interopRequireDefault(require("../elements/EditableItemList"));

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _languageHandler = require("../../../languageHandler");

var _Field = _interopRequireDefault(require("../elements/Field"));

var _Spinner = _interopRequireDefault(require("../elements/Spinner"));

var _ErrorDialog = _interopRequireDefault(require("../dialogs/ErrorDialog"));

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

var _Modal = _interopRequireDefault(require("../../../Modal"));

var _RoomPublishSetting = _interopRequireDefault(require("./RoomPublishSetting"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _RoomAliasField = _interopRequireDefault(require("../elements/RoomAliasField"));

var _logger = require("matrix-js-sdk/src/logger");

var _dec, _class, _class2, _temp;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class EditableAliasesList extends _EditableItemList.default {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "aliasField", /*#__PURE__*/(0, _react.createRef)());
    (0, _defineProperty2.default)(this, "onAliasAdded", async () => {
      await this.aliasField.current.validate({
        allowEmpty: false
      });

      if (this.aliasField.current.isValid) {
        if (this.props.onItemAdded) this.props.onItemAdded(this.props.newItem);
        return;
      }

      this.aliasField.current.focus();
      this.aliasField.current.validate({
        allowEmpty: false,
        focused: true
      });
    });
  }

  renderNewItemField() {
    // if we don't need the RoomAliasField,
    // we don't need to overriden version of renderNewItemField
    if (!this.props.domain) {
      return super.renderNewItemField();
    }

    const onChange = alias => this.onNewItemChanged({
      target: {
        value: alias
      }
    });

    return /*#__PURE__*/_react.default.createElement("form", {
      onSubmit: this.onAliasAdded,
      autoComplete: "off",
      noValidate: true,
      className: "mx_EditableItemList_newItem"
    }, /*#__PURE__*/_react.default.createElement(_RoomAliasField.default, {
      ref: this.aliasField,
      onChange: onChange,
      value: this.props.newItem || "",
      domain: this.props.domain
    }), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      onClick: this.onAliasAdded,
      kind: "primary"
    }, (0, _languageHandler._t)("Add")));
  }

}

let AliasSettings = (_dec = (0, _replaceableComponent.replaceableComponent)("views.room_settings.AliasSettings"), _dec(_class = (_temp = _class2 = class AliasSettings extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "onNewAliasChanged", value => {
      this.setState({
        newAlias: value
      });
    });
    (0, _defineProperty2.default)(this, "onLocalAliasAdded", alias => {
      if (!alias || alias.length === 0) return; // ignore attempts to create blank aliases

      const localDomain = _MatrixClientPeg.MatrixClientPeg.get().getDomain();

      if (!alias.includes(':')) alias += ':' + localDomain;

      _MatrixClientPeg.MatrixClientPeg.get().createAlias(alias, this.props.roomId).then(() => {
        this.setState({
          localAliases: this.state.localAliases.concat(alias),
          newAlias: null
        });

        if (!this.state.canonicalAlias) {
          this.changeCanonicalAlias(alias);
        }
      }).catch(err => {
        _logger.logger.error(err);

        _Modal.default.createTrackedDialog('Error creating address', '', _ErrorDialog.default, {
          title: (0, _languageHandler._t)("Error creating address"),
          description: (0, _languageHandler._t)("There was an error creating that address. It may not be allowed by the server " + "or a temporary failure occurred.")
        });
      });
    });
    (0, _defineProperty2.default)(this, "onLocalAliasDeleted", index => {
      const alias = this.state.localAliases[index]; // TODO: In future, we should probably be making sure that the alias actually belongs
      // to this room. See https://github.com/vector-im/element-web/issues/7353

      _MatrixClientPeg.MatrixClientPeg.get().deleteAlias(alias).then(() => {
        const localAliases = this.state.localAliases.filter(a => a !== alias);
        this.setState({
          localAliases
        });

        if (this.state.canonicalAlias === alias) {
          this.changeCanonicalAlias(null);
        }
      }).catch(err => {
        _logger.logger.error(err);

        let description;

        if (err.errcode === "M_FORBIDDEN") {
          description = (0, _languageHandler._t)("You don't have permission to delete the address.");
        } else {
          description = (0, _languageHandler._t)("There was an error removing that address. It may no longer exist or a temporary " + "error occurred.");
        }

        _Modal.default.createTrackedDialog('Error removing address', '', _ErrorDialog.default, {
          title: (0, _languageHandler._t)("Error removing address"),
          description
        });
      });
    });
    (0, _defineProperty2.default)(this, "onLocalAliasesToggled", event => {
      // expanded
      if (event.target.open) {
        // if local aliases haven't been preloaded yet at component mount
        if (!this.props.canSetCanonicalAlias && this.state.localAliases.length === 0) {
          this.loadLocalAliases();
        }
      }

      this.setState({
        detailsOpen: event.currentTarget.open
      });
    });
    (0, _defineProperty2.default)(this, "onCanonicalAliasChange", event => {
      this.changeCanonicalAlias(event.target.value);
    });
    (0, _defineProperty2.default)(this, "onNewAltAliasChanged", value => {
      this.setState({
        newAltAlias: value
      });
    });
    (0, _defineProperty2.default)(this, "onAltAliasAdded", alias => {
      const altAliases = this.state.altAliases.slice();

      if (!altAliases.some(a => a.trim() === alias.trim())) {
        altAliases.push(alias.trim());
        this.changeAltAliases(altAliases);
        this.setState({
          newAltAlias: ""
        });
      }
    });
    (0, _defineProperty2.default)(this, "onAltAliasDeleted", index => {
      const altAliases = this.state.altAliases.slice();
      altAliases.splice(index, 1);
      this.changeAltAliases(altAliases);
    });
    const state = {
      altAliases: [],
      // [ #alias:domain.tld, ... ]
      localAliases: [],
      // [ #alias:my-hs.tld, ... ]
      canonicalAlias: null,
      // #canonical:domain.tld
      updatingCanonicalAlias: false,
      localAliasesLoading: false,
      detailsOpen: false
    };

    if (props.canonicalAliasEvent) {
      const content = props.canonicalAliasEvent.getContent();
      const altAliases = content.alt_aliases;

      if (Array.isArray(altAliases)) {
        state.altAliases = altAliases.slice();
      }

      state.canonicalAlias = content.alias;
    }

    this.state = state;
  }

  componentDidMount() {
    if (this.props.canSetCanonicalAlias) {
      // load local aliases for providing recommendations
      // for the canonical alias and alt_aliases
      this.loadLocalAliases();
    }
  }

  async loadLocalAliases() {
    this.setState({
      localAliasesLoading: true
    });

    try {
      const cli = _MatrixClientPeg.MatrixClientPeg.get();

      let localAliases = [];

      if (await cli.doesServerSupportUnstableFeature("org.matrix.msc2432")) {
        const response = await cli.unstableGetLocalAliases(this.props.roomId);

        if (Array.isArray(response.aliases)) {
          localAliases = response.aliases;
        }
      }

      this.setState({
        localAliases
      });

      if (localAliases.length === 0) {
        this.setState({
          detailsOpen: true
        });
      }
    } finally {
      this.setState({
        localAliasesLoading: false
      });
    }
  }

  changeCanonicalAlias(alias) {
    if (!this.props.canSetCanonicalAlias) return;
    const oldAlias = this.state.canonicalAlias;
    this.setState({
      canonicalAlias: alias,
      updatingCanonicalAlias: true
    });
    const eventContent = {
      alt_aliases: this.state.altAliases
    };
    if (alias) eventContent["alias"] = alias;

    _MatrixClientPeg.MatrixClientPeg.get().sendStateEvent(this.props.roomId, "m.room.canonical_alias", eventContent, "").catch(err => {
      _logger.logger.error(err);

      _Modal.default.createTrackedDialog('Error updating main address', '', _ErrorDialog.default, {
        title: (0, _languageHandler._t)("Error updating main address"),
        description: (0, _languageHandler._t)("There was an error updating the room's main address. It may not be allowed by the server " + "or a temporary failure occurred.")
      });

      this.setState({
        canonicalAlias: oldAlias
      });
    }).finally(() => {
      this.setState({
        updatingCanonicalAlias: false
      });
    });
  }

  changeAltAliases(altAliases) {
    if (!this.props.canSetCanonicalAlias) return;
    this.setState({
      updatingCanonicalAlias: true,
      altAliases
    });
    const eventContent = {};

    if (this.state.canonicalAlias) {
      eventContent["alias"] = this.state.canonicalAlias;
    }

    if (altAliases) {
      eventContent["alt_aliases"] = altAliases;
    }

    _MatrixClientPeg.MatrixClientPeg.get().sendStateEvent(this.props.roomId, "m.room.canonical_alias", eventContent, "").catch(err => {
      _logger.logger.error(err);

      _Modal.default.createTrackedDialog('Error updating alternative addresses', '', _ErrorDialog.default, {
        title: (0, _languageHandler._t)("Error updating main address"),
        description: (0, _languageHandler._t)("There was an error updating the room's alternative addresses. " + "It may not be allowed by the server or a temporary failure occurred.")
      });
    }).finally(() => {
      this.setState({
        updatingCanonicalAlias: false
      });
    });
  }

  getAliases() {
    return this.state.altAliases.concat(this.getLocalNonAltAliases());
  }

  getLocalNonAltAliases() {
    const {
      altAliases
    } = this.state;
    return this.state.localAliases.filter(alias => !altAliases.includes(alias));
  }

  render() {
    var _cli$getRoom;

    const cli = _MatrixClientPeg.MatrixClientPeg.get();

    const localDomain = cli.getDomain();
    const isSpaceRoom = (_cli$getRoom = cli.getRoom(this.props.roomId)) === null || _cli$getRoom === void 0 ? void 0 : _cli$getRoom.isSpaceRoom();
    let found = false;
    const canonicalValue = this.state.canonicalAlias || "";

    const canonicalAliasSection = /*#__PURE__*/_react.default.createElement(_Field.default, {
      onChange: this.onCanonicalAliasChange,
      value: canonicalValue,
      disabled: this.state.updatingCanonicalAlias || !this.props.canSetCanonicalAlias,
      element: "select",
      id: "canonicalAlias",
      label: (0, _languageHandler._t)('Main address')
    }, /*#__PURE__*/_react.default.createElement("option", {
      value: "",
      key: "unset"
    }, (0, _languageHandler._t)('not specified')), this.getAliases().map((alias, i) => {
      if (alias === this.state.canonicalAlias) found = true;
      return /*#__PURE__*/_react.default.createElement("option", {
        value: alias,
        key: i
      }, alias);
    }), found || !this.state.canonicalAlias ? '' : /*#__PURE__*/_react.default.createElement("option", {
      value: this.state.canonicalAlias,
      key: "arbitrary"
    }, this.state.canonicalAlias));

    let localAliasesList;

    if (this.state.localAliasesLoading) {
      localAliasesList = /*#__PURE__*/_react.default.createElement(_Spinner.default, null);
    } else {
      localAliasesList = /*#__PURE__*/_react.default.createElement(EditableAliasesList, {
        id: "roomAliases",
        items: this.state.localAliases,
        newItem: this.state.newAlias,
        onNewItemChanged: this.onNewAliasChanged,
        canRemove: this.props.canSetAliases,
        canEdit: this.props.canSetAliases,
        onItemAdded: this.onLocalAliasAdded,
        onItemRemoved: this.onLocalAliasDeleted,
        noItemsLabel: isSpaceRoom ? (0, _languageHandler._t)("This space has no local addresses") : (0, _languageHandler._t)("This room has no local addresses"),
        placeholder: (0, _languageHandler._t)('Local address'),
        domain: localDomain
      });
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_AliasSettings"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_SettingsTab_subheading"
    }, (0, _languageHandler._t)("Published Addresses")), /*#__PURE__*/_react.default.createElement("p", null, isSpaceRoom ? (0, _languageHandler._t)("Published addresses can be used by anyone on any server to join your space.") : (0, _languageHandler._t)("Published addresses can be used by anyone on any server to join your room."), "\xA0", (0, _languageHandler._t)("To publish an address, it needs to be set as a local address first.")), canonicalAliasSection, this.props.hidePublishSetting ? null : /*#__PURE__*/_react.default.createElement(_RoomPublishSetting.default, {
      roomId: this.props.roomId,
      canSetCanonicalAlias: this.props.canSetCanonicalAlias
    }), /*#__PURE__*/_react.default.createElement("datalist", {
      id: "mx_AliasSettings_altRecommendations"
    }, this.getLocalNonAltAliases().map(alias => {
      return /*#__PURE__*/_react.default.createElement("option", {
        value: alias,
        key: alias
      });
    }), ";"), /*#__PURE__*/_react.default.createElement(EditableAliasesList, {
      id: "roomAltAliases",
      items: this.state.altAliases,
      newItem: this.state.newAltAlias,
      onNewItemChanged: this.onNewAltAliasChanged,
      canRemove: this.props.canSetCanonicalAlias,
      canEdit: this.props.canSetCanonicalAlias,
      onItemAdded: this.onAltAliasAdded,
      onItemRemoved: this.onAltAliasDeleted,
      suggestionsListId: "mx_AliasSettings_altRecommendations",
      itemsLabel: (0, _languageHandler._t)('Other published addresses:'),
      noItemsLabel: (0, _languageHandler._t)('No other published addresses yet, add one below'),
      placeholder: (0, _languageHandler._t)('New published address (e.g. #alias:server)')
    }), /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_SettingsTab_subheading mx_AliasSettings_localAliasHeader"
    }, (0, _languageHandler._t)("Local Addresses")), /*#__PURE__*/_react.default.createElement("p", null, isSpaceRoom ? (0, _languageHandler._t)("Set addresses for this space so users can find this space " + "through your homeserver (%(localDomain)s)", {
      localDomain
    }) : (0, _languageHandler._t)("Set addresses for this room so users can find this room " + "through your homeserver (%(localDomain)s)", {
      localDomain
    })), /*#__PURE__*/_react.default.createElement("details", {
      onToggle: this.onLocalAliasesToggled,
      open: this.state.detailsOpen
    }, /*#__PURE__*/_react.default.createElement("summary", null, this.state.detailsOpen ? (0, _languageHandler._t)('Show less') : (0, _languageHandler._t)("Show more")), localAliasesList));
  }

}, (0, _defineProperty2.default)(_class2, "defaultProps", {
  canSetAliases: false,
  canSetCanonicalAlias: false
}), _temp)) || _class);
exports.default = AliasSettings;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,