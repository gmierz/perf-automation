"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _partials = require("matrix-js-sdk/src/@types/partials");

var _LabelledToggleSwitch = _interopRequireDefault(require("../elements/LabelledToggleSwitch"));

var _languageHandler = require("../../../languageHandler");

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _Directory = _interopRequireDefault(require("../../../customisations/Directory"));

var _dec, _class;

let RoomPublishSetting = (_dec = (0, _replaceableComponent.replaceableComponent)("views.room_settings.RoomPublishSetting"), _dec(_class = class RoomPublishSetting extends _react.default.PureComponent {
  constructor(props, context) {
    super(props, context);
    (0, _defineProperty2.default)(this, "onRoomPublishChange", e => {
      const valueBefore = this.state.isRoomPublished;
      const newValue = !valueBefore;
      this.setState({
        isRoomPublished: newValue
      });

      const client = _MatrixClientPeg.MatrixClientPeg.get();

      client.setRoomDirectoryVisibility(this.props.roomId, newValue ? _partials.Visibility.Public : _partials.Visibility.Private).catch(() => {
        // Roll back the local echo on the change
        this.setState({
          isRoomPublished: valueBefore
        });
      });
    });
    this.state = {
      isRoomPublished: false
    };
  }

  componentDidMount() {
    const client = _MatrixClientPeg.MatrixClientPeg.get();

    client.getRoomDirectoryVisibility(this.props.roomId).then(result => {
      this.setState({
        isRoomPublished: result.visibility === 'public'
      });
    });
  }

  render() {
    var _DirectoryCustomisati;

    const client = _MatrixClientPeg.MatrixClientPeg.get();

    const enabled = ((_DirectoryCustomisati = _Directory.default.requireCanonicalAliasAccessToPublish) === null || _DirectoryCustomisati === void 0 ? void 0 : _DirectoryCustomisati.call(_Directory.default)) === false || this.props.canSetCanonicalAlias;
    return /*#__PURE__*/_react.default.createElement(_LabelledToggleSwitch.default, {
      value: this.state.isRoomPublished,
      onChange: this.onRoomPublishChange,
      disabled: !enabled,
      label: (0, _languageHandler._t)("Publish this room to the public in %(domain)s's room directory?", {
        domain: client.getDomain()
      })
    });
  }

}) || _class);
exports.default = RoomPublishSetting;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL3Jvb21fc2V0dGluZ3MvUm9vbVB1Ymxpc2hTZXR0aW5nLnRzeCJdLCJuYW1lcyI6WyJSb29tUHVibGlzaFNldHRpbmciLCJSZWFjdCIsIlB1cmVDb21wb25lbnQiLCJjb25zdHJ1Y3RvciIsInByb3BzIiwiY29udGV4dCIsImUiLCJ2YWx1ZUJlZm9yZSIsInN0YXRlIiwiaXNSb29tUHVibGlzaGVkIiwibmV3VmFsdWUiLCJzZXRTdGF0ZSIsImNsaWVudCIsIk1hdHJpeENsaWVudFBlZyIsImdldCIsInNldFJvb21EaXJlY3RvcnlWaXNpYmlsaXR5Iiwicm9vbUlkIiwiVmlzaWJpbGl0eSIsIlB1YmxpYyIsIlByaXZhdGUiLCJjYXRjaCIsImNvbXBvbmVudERpZE1vdW50IiwiZ2V0Um9vbURpcmVjdG9yeVZpc2liaWxpdHkiLCJ0aGVuIiwicmVzdWx0IiwidmlzaWJpbGl0eSIsInJlbmRlciIsImVuYWJsZWQiLCJyZXF1aXJlQ2Fub25pY2FsQWxpYXNBY2Nlc3NUb1B1Ymxpc2giLCJjYW5TZXRDYW5vbmljYWxBbGlhcyIsIm9uUm9vbVB1Ymxpc2hDaGFuZ2UiLCJkb21haW4iLCJnZXREb21haW4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBZ0JBOztBQUNBOztBQUVBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOzs7O0lBYXFCQSxrQixXQURwQixnREFBcUIsd0NBQXJCLEMsZ0JBQUQsTUFDcUJBLGtCQURyQixTQUNnREMsZUFBTUMsYUFEdEQsQ0FDb0Y7QUFDaEZDLEVBQUFBLFdBQVcsQ0FBQ0MsS0FBRCxFQUFRQyxPQUFSLEVBQWlCO0FBQ3hCLFVBQU1ELEtBQU4sRUFBYUMsT0FBYjtBQUR3QiwrREFRR0MsQ0FBRCxJQUFPO0FBQ2pDLFlBQU1DLFdBQVcsR0FBRyxLQUFLQyxLQUFMLENBQVdDLGVBQS9CO0FBQ0EsWUFBTUMsUUFBUSxHQUFHLENBQUNILFdBQWxCO0FBQ0EsV0FBS0ksUUFBTCxDQUFjO0FBQUVGLFFBQUFBLGVBQWUsRUFBRUM7QUFBbkIsT0FBZDs7QUFDQSxZQUFNRSxNQUFNLEdBQUdDLGlDQUFnQkMsR0FBaEIsRUFBZjs7QUFFQUYsTUFBQUEsTUFBTSxDQUFDRywwQkFBUCxDQUNJLEtBQUtYLEtBQUwsQ0FBV1ksTUFEZixFQUVJTixRQUFRLEdBQUdPLHFCQUFXQyxNQUFkLEdBQXVCRCxxQkFBV0UsT0FGOUMsRUFHRUMsS0FIRixDQUdRLE1BQU07QUFDVjtBQUNBLGFBQUtULFFBQUwsQ0FBYztBQUFFRixVQUFBQSxlQUFlLEVBQUVGO0FBQW5CLFNBQWQ7QUFDSCxPQU5EO0FBT0gsS0FyQjJCO0FBR3hCLFNBQUtDLEtBQUwsR0FBYTtBQUNUQyxNQUFBQSxlQUFlLEVBQUU7QUFEUixLQUFiO0FBR0g7O0FBaUJEWSxFQUFBQSxpQkFBaUIsR0FBRztBQUNoQixVQUFNVCxNQUFNLEdBQUdDLGlDQUFnQkMsR0FBaEIsRUFBZjs7QUFDQUYsSUFBQUEsTUFBTSxDQUFDVSwwQkFBUCxDQUFrQyxLQUFLbEIsS0FBTCxDQUFXWSxNQUE3QyxFQUFxRE8sSUFBckQsQ0FBMkRDLE1BQU0sSUFBSTtBQUNqRSxXQUFLYixRQUFMLENBQWM7QUFBRUYsUUFBQUEsZUFBZSxFQUFFZSxNQUFNLENBQUNDLFVBQVAsS0FBc0I7QUFBekMsT0FBZDtBQUNILEtBRkQ7QUFHSDs7QUFFREMsRUFBQUEsTUFBTSxHQUFHO0FBQUE7O0FBQ0wsVUFBTWQsTUFBTSxHQUFHQyxpQ0FBZ0JDLEdBQWhCLEVBQWY7O0FBRUEsVUFBTWEsT0FBTyxHQUNULDZDQUF3QkMsb0NBQXhCLDhHQUFxRSxLQUFyRSxJQUNBLEtBQUt4QixLQUFMLENBQVd5QixvQkFGZjtBQUtBLHdCQUNJLDZCQUFDLDZCQUFEO0FBQXNCLE1BQUEsS0FBSyxFQUFFLEtBQUtyQixLQUFMLENBQVdDLGVBQXhDO0FBQ0ksTUFBQSxRQUFRLEVBQUUsS0FBS3FCLG1CQURuQjtBQUVJLE1BQUEsUUFBUSxFQUFFLENBQUNILE9BRmY7QUFHSSxNQUFBLEtBQUssRUFBRSx5QkFBRyxpRUFBSCxFQUFzRTtBQUN6RUksUUFBQUEsTUFBTSxFQUFFbkIsTUFBTSxDQUFDb0IsU0FBUDtBQURpRSxPQUF0RTtBQUhYLE1BREo7QUFTSDs7QUFoRCtFLEMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuQ29weXJpZ2h0IDIwMjAgLSAyMDIxIFRoZSBNYXRyaXgub3JnIEZvdW5kYXRpb24gQy5JLkMuXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgVmlzaWJpbGl0eSB9IGZyb20gXCJtYXRyaXgtanMtc2RrL3NyYy9AdHlwZXMvcGFydGlhbHNcIjtcblxuaW1wb3J0IExhYmVsbGVkVG9nZ2xlU3dpdGNoIGZyb20gXCIuLi9lbGVtZW50cy9MYWJlbGxlZFRvZ2dsZVN3aXRjaFwiO1xuaW1wb3J0IHsgX3QgfSBmcm9tIFwiLi4vLi4vLi4vbGFuZ3VhZ2VIYW5kbGVyXCI7XG5pbXBvcnQgeyBNYXRyaXhDbGllbnRQZWcgfSBmcm9tIFwiLi4vLi4vLi4vTWF0cml4Q2xpZW50UGVnXCI7XG5pbXBvcnQgeyByZXBsYWNlYWJsZUNvbXBvbmVudCB9IGZyb20gXCIuLi8uLi8uLi91dGlscy9yZXBsYWNlYWJsZUNvbXBvbmVudFwiO1xuaW1wb3J0IERpcmVjdG9yeUN1c3RvbWlzYXRpb25zIGZyb20gJy4uLy4uLy4uL2N1c3RvbWlzYXRpb25zL0RpcmVjdG9yeSc7XG5cbmludGVyZmFjZSBJUHJvcHMge1xuICAgIHJvb21JZDogc3RyaW5nO1xuICAgIGxhYmVsPzogc3RyaW5nO1xuICAgIGNhblNldENhbm9uaWNhbEFsaWFzPzogYm9vbGVhbjtcbn1cblxuaW50ZXJmYWNlIElTdGF0ZSB7XG4gICAgaXNSb29tUHVibGlzaGVkOiBib29sZWFuO1xufVxuXG5AcmVwbGFjZWFibGVDb21wb25lbnQoXCJ2aWV3cy5yb29tX3NldHRpbmdzLlJvb21QdWJsaXNoU2V0dGluZ1wiKVxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUm9vbVB1Ymxpc2hTZXR0aW5nIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudDxJUHJvcHMsIElTdGF0ZT4ge1xuICAgIGNvbnN0cnVjdG9yKHByb3BzLCBjb250ZXh0KSB7XG4gICAgICAgIHN1cGVyKHByb3BzLCBjb250ZXh0KTtcblxuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgaXNSb29tUHVibGlzaGVkOiBmYWxzZSxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG9uUm9vbVB1Ymxpc2hDaGFuZ2UgPSAoZSkgPT4ge1xuICAgICAgICBjb25zdCB2YWx1ZUJlZm9yZSA9IHRoaXMuc3RhdGUuaXNSb29tUHVibGlzaGVkO1xuICAgICAgICBjb25zdCBuZXdWYWx1ZSA9ICF2YWx1ZUJlZm9yZTtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGlzUm9vbVB1Ymxpc2hlZDogbmV3VmFsdWUgfSk7XG4gICAgICAgIGNvbnN0IGNsaWVudCA9IE1hdHJpeENsaWVudFBlZy5nZXQoKTtcblxuICAgICAgICBjbGllbnQuc2V0Um9vbURpcmVjdG9yeVZpc2liaWxpdHkoXG4gICAgICAgICAgICB0aGlzLnByb3BzLnJvb21JZCxcbiAgICAgICAgICAgIG5ld1ZhbHVlID8gVmlzaWJpbGl0eS5QdWJsaWMgOiBWaXNpYmlsaXR5LlByaXZhdGUsXG4gICAgICAgICkuY2F0Y2goKCkgPT4ge1xuICAgICAgICAgICAgLy8gUm9sbCBiYWNrIHRoZSBsb2NhbCBlY2hvIG9uIHRoZSBjaGFuZ2VcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBpc1Jvb21QdWJsaXNoZWQ6IHZhbHVlQmVmb3JlIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICAgIGNvbnN0IGNsaWVudCA9IE1hdHJpeENsaWVudFBlZy5nZXQoKTtcbiAgICAgICAgY2xpZW50LmdldFJvb21EaXJlY3RvcnlWaXNpYmlsaXR5KHRoaXMucHJvcHMucm9vbUlkKS50aGVuKChyZXN1bHQgPT4ge1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGlzUm9vbVB1Ymxpc2hlZDogcmVzdWx0LnZpc2liaWxpdHkgPT09ICdwdWJsaWMnIH0pO1xuICAgICAgICB9KSk7XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICBjb25zdCBjbGllbnQgPSBNYXRyaXhDbGllbnRQZWcuZ2V0KCk7XG5cbiAgICAgICAgY29uc3QgZW5hYmxlZCA9IChcbiAgICAgICAgICAgIERpcmVjdG9yeUN1c3RvbWlzYXRpb25zLnJlcXVpcmVDYW5vbmljYWxBbGlhc0FjY2Vzc1RvUHVibGlzaD8uKCkgPT09IGZhbHNlIHx8XG4gICAgICAgICAgICB0aGlzLnByb3BzLmNhblNldENhbm9uaWNhbEFsaWFzXG4gICAgICAgICk7XG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxMYWJlbGxlZFRvZ2dsZVN3aXRjaCB2YWx1ZT17dGhpcy5zdGF0ZS5pc1Jvb21QdWJsaXNoZWR9XG4gICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMub25Sb29tUHVibGlzaENoYW5nZX1cbiAgICAgICAgICAgICAgICBkaXNhYmxlZD17IWVuYWJsZWR9XG4gICAgICAgICAgICAgICAgbGFiZWw9e190KFwiUHVibGlzaCB0aGlzIHJvb20gdG8gdGhlIHB1YmxpYyBpbiAlKGRvbWFpbilzJ3Mgcm9vbSBkaXJlY3Rvcnk/XCIsIHtcbiAgICAgICAgICAgICAgICAgICAgZG9tYWluOiBjbGllbnQuZ2V0RG9tYWluKCksXG4gICAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICAvPlxuICAgICAgICApO1xuICAgIH1cbn1cbiJdfQ==