"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _event = require("matrix-js-sdk/src/models/event");

var sdk = _interopRequireWildcard(require("../../../index"));

var _languageHandler = require("../../../languageHandler");

var _Modal = _interopRequireDefault(require("../../../Modal"));

var _ErrorDialog = _interopRequireDefault(require("../dialogs/ErrorDialog"));

var _MatrixClientContext = _interopRequireDefault(require("../../../contexts/MatrixClientContext"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _logger = require("matrix-js-sdk/src/logger");

var _dec, _class, _class2, _temp;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const GROUP_ID_REGEX = /\+\S+:\S+/;
let RelatedGroupSettings = (_dec = (0, _replaceableComponent.replaceableComponent)("views.room_settings.RelatedGroupSettings"), _dec(_class = (_temp = _class2 = class RelatedGroupSettings extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "onNewGroupChanged", newGroupId => {
      this.setState({
        newGroupId
      });
    });
    (0, _defineProperty2.default)(this, "onGroupAdded", groupId => {
      if (groupId.length === 0 || !this.validateGroupId(groupId)) {
        return;
      }

      const newGroupsList = [...this.state.newGroupsList, groupId];
      this.setState({
        newGroupsList: newGroupsList,
        newGroupId: ''
      });
      this.updateGroups(newGroupsList);
    });
    (0, _defineProperty2.default)(this, "onGroupDeleted", index => {
      const group = this.state.newGroupsList[index];
      const newGroupsList = this.state.newGroupsList.filter(g => g !== group);
      this.setState({
        newGroupsList
      });
      this.updateGroups(newGroupsList);
    });
    this.state = {
      newGroupId: "",
      newGroupsList: props.relatedGroupsEvent ? props.relatedGroupsEvent.getContent().groups || [] : []
    };
  }

  updateGroups(newGroupsList) {
    this.context.sendStateEvent(this.props.roomId, 'm.room.related_groups', {
      groups: newGroupsList
    }, '').catch(err => {
      _logger.logger.error(err);

      _Modal.default.createTrackedDialog('Error updating flair', '', _ErrorDialog.default, {
        title: (0, _languageHandler._t)("Error updating flair"),
        description: (0, _languageHandler._t)("There was an error updating the flair for this room. The server may not allow it or " + "a temporary error occurred.")
      });
    });
  }

  validateGroupId(groupId) {
    if (!GROUP_ID_REGEX.test(groupId)) {
      const ErrorDialog = sdk.getComponent("dialogs.ErrorDialog");

      _Modal.default.createTrackedDialog('Invalid related community ID', '', ErrorDialog, {
        title: (0, _languageHandler._t)('Invalid community ID'),
        description: (0, _languageHandler._t)('\'%(groupId)s\' is not a valid community ID', {
          groupId
        })
      });

      return false;
    }

    return true;
  }

  render() {
    const localDomain = this.context.getDomain();
    const EditableItemList = sdk.getComponent('elements.EditableItemList');
    return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(EditableItemList, {
      id: "relatedGroups",
      items: this.state.newGroupsList,
      className: "mx_RelatedGroupSettings",
      newItem: this.state.newGroupId,
      canRemove: this.props.canSetRelatedGroups,
      canEdit: this.props.canSetRelatedGroups,
      onNewItemChanged: this.onNewGroupChanged,
      onItemAdded: this.onGroupAdded,
      onItemRemoved: this.onGroupDeleted,
      itemsLabel: (0, _languageHandler._t)('Showing flair for these communities:'),
      noItemsLabel: (0, _languageHandler._t)('This room is not showing flair for any communities'),
      placeholder: (0, _languageHandler._t)('New community ID (e.g. +foo:%(localDomain)s)', {
        localDomain
      })
    }));
  }

}, (0, _defineProperty2.default)(_class2, "propTypes", {
  roomId: _propTypes.default.string.isRequired,
  canSetRelatedGroups: _propTypes.default.bool.isRequired,
  relatedGroupsEvent: _propTypes.default.instanceOf(_event.MatrixEvent)
}), (0, _defineProperty2.default)(_class2, "contextType", _MatrixClientContext.default), (0, _defineProperty2.default)(_class2, "defaultProps", {
  canSetRelatedGroups: false
}), _temp)) || _class);
exports.default = RelatedGroupSettings;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,