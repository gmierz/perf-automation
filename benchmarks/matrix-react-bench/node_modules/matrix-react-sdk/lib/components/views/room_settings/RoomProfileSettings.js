"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _languageHandler = require("../../../languageHandler");

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _Field = _interopRequireDefault(require("../elements/Field"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _Media = require("../../../customisations/Media");

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

var _AvatarSetting = _interopRequireDefault(require("../settings/AvatarSetting"));

var _dec, _class;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

let RoomProfileSettings = ( // TODO: Merge with ProfileSettings?
_dec = (0, _replaceableComponent.replaceableComponent)("views.room_settings.RoomProfileSettings"), _dec(_class = class RoomProfileSettings extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "avatarUpload", /*#__PURE__*/(0, _react.createRef)());
    (0, _defineProperty2.default)(this, "uploadAvatar", () => {
      this.avatarUpload.current.click();
    });
    (0, _defineProperty2.default)(this, "removeAvatar", () => {
      // clear file upload field so same file can be selected
      this.avatarUpload.current.value = "";
      this.setState({
        avatarUrl: null,
        avatarFile: null,
        profileFieldsTouched: _objectSpread(_objectSpread({}, this.state.profileFieldsTouched), {}, {
          avatar: true
        })
      });
    });
    (0, _defineProperty2.default)(this, "isSaveEnabled", () => {
      return Boolean(Object.values(this.state.profileFieldsTouched).length);
    });
    (0, _defineProperty2.default)(this, "cancelProfileChanges", async e => {
      e.stopPropagation();
      e.preventDefault();
      if (!this.isSaveEnabled()) return;
      this.setState({
        profileFieldsTouched: {},
        displayName: this.state.originalDisplayName,
        topic: this.state.originalTopic,
        avatarUrl: this.state.originalAvatarUrl,
        avatarFile: null
      });
    });
    (0, _defineProperty2.default)(this, "saveProfile", async e => {
      e.stopPropagation();
      e.preventDefault();
      if (!this.isSaveEnabled()) return;
      this.setState({
        profileFieldsTouched: {}
      });

      const client = _MatrixClientPeg.MatrixClientPeg.get();

      const newState = {}; // TODO: What do we do about errors?

      const displayName = this.state.displayName.trim();

      if (this.state.originalDisplayName !== this.state.displayName) {
        await client.setRoomName(this.props.roomId, displayName);
        newState.originalDisplayName = displayName;
        newState.displayName = displayName;
      }

      if (this.state.avatarFile) {
        const uri = await client.uploadContent(this.state.avatarFile);
        await client.sendStateEvent(this.props.roomId, 'm.room.avatar', {
          url: uri
        }, '');
        newState.avatarUrl = (0, _Media.mediaFromMxc)(uri).getSquareThumbnailHttp(96);
        newState.originalAvatarUrl = newState.avatarUrl;
        newState.avatarFile = null;
      } else if (this.state.originalAvatarUrl !== this.state.avatarUrl) {
        await client.sendStateEvent(this.props.roomId, 'm.room.avatar', {}, '');
      }

      if (this.state.originalTopic !== this.state.topic) {
        await client.setRoomTopic(this.props.roomId, this.state.topic);
        newState.originalTopic = this.state.topic;
      }

      this.setState(newState);
    });
    (0, _defineProperty2.default)(this, "onDisplayNameChanged", e => {
      this.setState({
        displayName: e.target.value
      });

      if (this.state.originalDisplayName === e.target.value) {
        this.setState({
          profileFieldsTouched: _objectSpread(_objectSpread({}, this.state.profileFieldsTouched), {}, {
            name: false
          })
        });
      } else {
        this.setState({
          profileFieldsTouched: _objectSpread(_objectSpread({}, this.state.profileFieldsTouched), {}, {
            name: true
          })
        });
      }
    });
    (0, _defineProperty2.default)(this, "onTopicChanged", e => {
      this.setState({
        topic: e.target.value
      });

      if (this.state.originalTopic === e.target.value) {
        this.setState({
          profileFieldsTouched: _objectSpread(_objectSpread({}, this.state.profileFieldsTouched), {}, {
            topic: false
          })
        });
      } else {
        this.setState({
          profileFieldsTouched: _objectSpread(_objectSpread({}, this.state.profileFieldsTouched), {}, {
            topic: true
          })
        });
      }
    });
    (0, _defineProperty2.default)(this, "onAvatarChanged", e => {
      if (!e.target.files || !e.target.files.length) {
        this.setState({
          avatarUrl: this.state.originalAvatarUrl,
          avatarFile: null,
          profileFieldsTouched: _objectSpread(_objectSpread({}, this.state.profileFieldsTouched), {}, {
            avatar: false
          })
        });
        return;
      }

      const file = e.target.files[0];
      const reader = new FileReader();

      reader.onload = ev => {
        this.setState({
          avatarUrl: String(ev.target.result),
          avatarFile: file,
          profileFieldsTouched: _objectSpread(_objectSpread({}, this.state.profileFieldsTouched), {}, {
            avatar: true
          })
        });
      };

      reader.readAsDataURL(file);
    });

    const _client = _MatrixClientPeg.MatrixClientPeg.get();

    const room = _client.getRoom(props.roomId);

    if (!room) throw new Error(`Expected a room for ID: ${props.roomId}`);
    const avatarEvent = room.currentState.getStateEvents("m.room.avatar", "");
    let avatarUrl = avatarEvent && avatarEvent.getContent() ? avatarEvent.getContent()["url"] : null;
    if (avatarUrl) avatarUrl = (0, _Media.mediaFromMxc)(avatarUrl).getSquareThumbnailHttp(96);
    const topicEvent = room.currentState.getStateEvents("m.room.topic", "");
    const topic = topicEvent && topicEvent.getContent() ? topicEvent.getContent()['topic'] : '';
    const nameEvent = room.currentState.getStateEvents('m.room.name', '');
    const name = nameEvent && nameEvent.getContent() ? nameEvent.getContent()['name'] : '';
    this.state = {
      originalDisplayName: name,
      displayName: name,
      originalAvatarUrl: avatarUrl,
      avatarUrl: avatarUrl,
      avatarFile: null,
      originalTopic: topic,
      topic: topic,
      profileFieldsTouched: {},
      canSetName: room.currentState.maySendStateEvent('m.room.name', _client.getUserId()),
      canSetTopic: room.currentState.maySendStateEvent('m.room.topic', _client.getUserId()),
      canSetAvatar: room.currentState.maySendStateEvent('m.room.avatar', _client.getUserId())
    };
  }

  render() {
    let profileSettingsButtons;

    if (this.state.canSetName || this.state.canSetTopic || this.state.canSetAvatar) {
      profileSettingsButtons = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_ProfileSettings_buttons"
      }, /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        onClick: this.cancelProfileChanges,
        kind: "link",
        disabled: !this.isSaveEnabled()
      }, (0, _languageHandler._t)("Cancel")), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        onClick: this.saveProfile,
        kind: "primary",
        disabled: !this.isSaveEnabled()
      }, (0, _languageHandler._t)("Save")));
    }

    return /*#__PURE__*/_react.default.createElement("form", {
      onSubmit: this.saveProfile,
      autoComplete: "off",
      noValidate: true,
      className: "mx_ProfileSettings_profileForm"
    }, /*#__PURE__*/_react.default.createElement("input", {
      type: "file",
      ref: this.avatarUpload,
      className: "mx_ProfileSettings_avatarUpload",
      onChange: this.onAvatarChanged,
      accept: "image/*"
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_ProfileSettings_profile"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_ProfileSettings_controls"
    }, /*#__PURE__*/_react.default.createElement(_Field.default, {
      label: (0, _languageHandler._t)("Room Name"),
      type: "text",
      value: this.state.displayName,
      autoComplete: "off",
      onChange: this.onDisplayNameChanged,
      disabled: !this.state.canSetName
    }), /*#__PURE__*/_react.default.createElement(_Field.default, {
      className: "mx_ProfileSettings_controls_topic",
      id: "profileTopic",
      label: (0, _languageHandler._t)("Room Topic"),
      disabled: !this.state.canSetTopic,
      type: "text",
      value: this.state.topic,
      autoComplete: "off",
      onChange: this.onTopicChanged,
      element: "textarea"
    })), /*#__PURE__*/_react.default.createElement(_AvatarSetting.default, {
      avatarUrl: this.state.avatarUrl,
      avatarName: this.state.displayName || this.props.roomId,
      avatarAltText: (0, _languageHandler._t)("Room avatar"),
      uploadAvatar: this.state.canSetAvatar ? this.uploadAvatar : undefined,
      removeAvatar: this.state.canSetAvatar ? this.removeAvatar : undefined
    })), profileSettingsButtons);
  }

}) || _class);
exports.default = RoomProfileSettings;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,