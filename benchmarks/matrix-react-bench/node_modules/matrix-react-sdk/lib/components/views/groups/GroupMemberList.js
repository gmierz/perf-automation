"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _languageHandler = require("../../../languageHandler");

var sdk = _interopRequireWildcard(require("../../../index"));

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _GroupStore = _interopRequireDefault(require("../../../stores/GroupStore"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _GroupAddressPicker = require("../../../GroupAddressPicker");

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

var _RightPanelStorePhases = require("../../../stores/RightPanelStorePhases");

var _AutoHideScrollbar = _interopRequireDefault(require("../../structures/AutoHideScrollbar"));

var _actions = require("../../../dispatcher/actions");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _dec, _class, _class2, _temp;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const INITIAL_LOAD_NUM_MEMBERS = 30;
let GroupMemberList = (_dec = (0, _replaceableComponent.replaceableComponent)("views.groups.GroupMemberList"), _dec(_class = (_temp = _class2 = class GroupMemberList extends _react.default.Component {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "state", {
      members: null,
      membersError: null,
      invitedMembers: null,
      invitedMembersError: null,
      truncateAt: INITIAL_LOAD_NUM_MEMBERS
    });
    (0, _defineProperty2.default)(this, "_createOverflowTile", (overflowCount, totalCount) => {
      // For now we'll pretend this is any entity. It should probably be a separate tile.
      const EntityTile = sdk.getComponent("rooms.EntityTile");
      const BaseAvatar = sdk.getComponent("avatars.BaseAvatar");
      const text = (0, _languageHandler._t)("and %(count)s others...", {
        count: overflowCount
      });
      return /*#__PURE__*/_react.default.createElement(EntityTile, {
        className: "mx_EntityTile_ellipsis",
        avatarJsx: /*#__PURE__*/_react.default.createElement(BaseAvatar, {
          url: require("../../../../res/img/ellipsis.svg"),
          name: "...",
          width: 36,
          height: 36
        }),
        name: text,
        presenceState: "online",
        suppressOnHover: true,
        onClick: this._showFullMemberList
      });
    });
    (0, _defineProperty2.default)(this, "_showFullMemberList", () => {
      this.setState({
        truncateAt: -1
      });
    });
    (0, _defineProperty2.default)(this, "onSearchQueryChanged", ev => {
      this.setState({
        searchQuery: ev.target.value
      });
    });
    (0, _defineProperty2.default)(this, "onInviteToGroupButtonClick", () => {
      (0, _GroupAddressPicker.showGroupInviteDialog)(this.props.groupId).then(() => {
        _dispatcher.default.dispatch({
          action: _actions.Action.SetRightPanelPhase,
          phase: _RightPanelStorePhases.RightPanelPhases.GroupMemberList,
          refireParams: {
            groupId: this.props.groupId
          }
        });
      });
    });
  }

  componentDidMount() {
    this._unmounted = false;

    this._initGroupStore(this.props.groupId);
  }

  componentWillUnmount() {
    this._unmounted = true;
  }

  _initGroupStore(groupId) {
    _GroupStore.default.registerListener(groupId, () => {
      this._fetchMembers();
    });

    _GroupStore.default.on('error', (err, errorGroupId, stateKey) => {
      if (this._unmounted || groupId !== errorGroupId) return;

      if (stateKey === _GroupStore.default.STATE_KEY.GroupMembers) {
        this.setState({
          membersError: err
        });
      }

      if (stateKey === _GroupStore.default.STATE_KEY.GroupInvitedMembers) {
        this.setState({
          invitedMembersError: err
        });
      }
    });
  }

  _fetchMembers() {
    if (this._unmounted) return;
    this.setState({
      members: _GroupStore.default.getGroupMembers(this.props.groupId),
      invitedMembers: _GroupStore.default.getGroupInvitedMembers(this.props.groupId)
    });
  }

  makeGroupMemberTiles(query, memberList, memberListError) {
    if (memberListError) {
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "warning"
      }, (0, _languageHandler._t)("Failed to load group members"));
    }

    const GroupMemberTile = sdk.getComponent("groups.GroupMemberTile");
    const TruncatedList = sdk.getComponent("elements.TruncatedList");
    query = (query || "").toLowerCase();

    if (query) {
      memberList = memberList.filter(m => {
        const matchesName = (m.displayname || "").toLowerCase().includes(query);
        const matchesId = m.userId.toLowerCase().includes(query);

        if (!matchesName && !matchesId) {
          return false;
        }

        return true;
      });
    }

    const uniqueMembers = {};
    memberList.forEach(m => {
      if (!uniqueMembers[m.userId]) uniqueMembers[m.userId] = m;
    });
    memberList = Object.keys(uniqueMembers).map(userId => uniqueMembers[userId]); // Descending sort on isPrivileged = true = 1 to isPrivileged = false = 0

    memberList.sort((a, b) => {
      if (a.isPrivileged === b.isPrivileged) {
        const aName = a.displayname || a.userId;
        const bName = b.displayname || b.userId;

        if (aName < bName) {
          return -1;
        } else if (aName > bName) {
          return 1;
        } else {
          return 0;
        }
      } else {
        return a.isPrivileged ? -1 : 1;
      }
    });
    const memberTiles = memberList.map(m => {
      return /*#__PURE__*/_react.default.createElement(GroupMemberTile, {
        key: m.userId,
        groupId: this.props.groupId,
        member: m
      });
    });
    return /*#__PURE__*/_react.default.createElement(TruncatedList, {
      className: "mx_MemberList_wrapper",
      truncateAt: this.state.truncateAt,
      createOverflowElement: this._createOverflowTile
    }, memberTiles);
  }

  render() {
    if (this.state.fetching || this.state.fetchingInvitedMembers) {
      const Spinner = sdk.getComponent("elements.Spinner");
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_MemberList"
      }, /*#__PURE__*/_react.default.createElement(Spinner, null));
    }

    const inputBox = /*#__PURE__*/_react.default.createElement("input", {
      className: "mx_GroupMemberList_query mx_textinput",
      id: "mx_GroupMemberList_query",
      type: "text",
      onChange: this.onSearchQueryChanged,
      value: this.state.searchQuery,
      placeholder: (0, _languageHandler._t)('Filter community members'),
      autoComplete: "off"
    });

    const joined = this.state.members ? /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_MemberList_joined"
    }, this.makeGroupMemberTiles(this.state.searchQuery, this.state.members, this.state.membersError)) : /*#__PURE__*/_react.default.createElement("div", null);
    const invited = this.state.invitedMembers && this.state.invitedMembers.length > 0 ? /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_MemberList_invited"
    }, /*#__PURE__*/_react.default.createElement("h2", null, (0, _languageHandler._t)("Invited")), this.makeGroupMemberTiles(this.state.searchQuery, this.state.invitedMembers, this.state.invitedMembersError)) : /*#__PURE__*/_react.default.createElement("div", null);
    let inviteButton;

    if (_GroupStore.default.isUserPrivileged(this.props.groupId)) {
      inviteButton = /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        className: "mx_MemberList_invite mx_MemberList_inviteCommunity",
        onClick: this.onInviteToGroupButtonClick
      }, /*#__PURE__*/_react.default.createElement("span", null, (0, _languageHandler._t)('Invite to this community')));
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_MemberList",
      role: "tabpanel"
    }, inviteButton, /*#__PURE__*/_react.default.createElement(_AutoHideScrollbar.default, null, joined, invited), inputBox);
  }

}, (0, _defineProperty2.default)(_class2, "propTypes", {
  groupId: _propTypes.default.string.isRequired
}), _temp)) || _class);
exports.default = GroupMemberList;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,