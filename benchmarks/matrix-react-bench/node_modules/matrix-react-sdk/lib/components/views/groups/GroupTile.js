"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var sdk = _interopRequireWildcard(require("../../../index"));

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _FlairStore = _interopRequireDefault(require("../../../stores/FlairStore"));

var _MatrixClientContext = _interopRequireDefault(require("../../../contexts/MatrixClientContext"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _Media = require("../../../customisations/Media");

var _languageHandler = require("../../../languageHandler");

var _TagOrderActions = _interopRequireDefault(require("../../../actions/TagOrderActions"));

var _GroupFilterOrderStore = _interopRequireDefault(require("../../../stores/GroupFilterOrderStore"));

var _logger = require("matrix-js-sdk/src/logger");

var _dec, _class, _class2, _temp;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

let GroupTile = (_dec = (0, _replaceableComponent.replaceableComponent)("views.groups.GroupTile"), _dec(_class = (_temp = _class2 = class GroupTile extends _react.default.Component {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "state", {
      profile: null
    });
    (0, _defineProperty2.default)(this, "onClick", e => {
      e.preventDefault();

      _dispatcher.default.dispatch({
        action: 'view_group',
        group_id: this.props.groupId
      });
    });
    (0, _defineProperty2.default)(this, "onPinClick", e => {
      e.preventDefault();
      e.stopPropagation();

      _dispatcher.default.dispatch(_TagOrderActions.default.moveTag(this.context, this.props.groupId, 0));
    });
    (0, _defineProperty2.default)(this, "onUnpinClick", e => {
      e.preventDefault();
      e.stopPropagation();

      _dispatcher.default.dispatch(_TagOrderActions.default.removeTag(this.context, this.props.groupId));
    });
  }

  componentDidMount() {
    _FlairStore.default.getGroupProfileCached(this.context, this.props.groupId).then(profile => {
      this.setState({
        profile
      });
    }).catch(err => {
      _logger.logger.error('Error whilst getting cached profile for GroupTile', err);
    });
  }

  render() {
    const BaseAvatar = sdk.getComponent('avatars.BaseAvatar');
    const AccessibleButton = sdk.getComponent('elements.AccessibleButton');
    const profile = this.state.profile || {};
    const name = profile.name || this.props.groupId;
    const avatarHeight = this.props.avatarHeight;
    const descElement = this.props.showDescription ? /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_GroupTile_desc"
    }, profile.shortDescription) : /*#__PURE__*/_react.default.createElement("div", null);
    const httpUrl = profile.avatarUrl ? (0, _Media.mediaFromMxc)(profile.avatarUrl).getSquareThumbnailHttp(avatarHeight) : null;

    const avatarElement = /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_GroupTile_avatar"
    }, /*#__PURE__*/_react.default.createElement(BaseAvatar, {
      name: name,
      idName: this.props.groupId,
      url: httpUrl,
      width: avatarHeight,
      height: avatarHeight
    }));

    return /*#__PURE__*/_react.default.createElement(AccessibleButton, {
      className: "mx_GroupTile",
      onClick: this.onClick
    }, avatarElement, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_GroupTile_profile"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_GroupTile_name"
    }, name), descElement, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_GroupTile_groupId"
    }, this.props.groupId), !(_GroupFilterOrderStore.default.getOrderedTags() || []).includes(this.props.groupId) ? /*#__PURE__*/_react.default.createElement(AccessibleButton, {
      kind: "link",
      onClick: this.onPinClick
    }, (0, _languageHandler._t)("Pin")) : /*#__PURE__*/_react.default.createElement(AccessibleButton, {
      kind: "link",
      onClick: this.onUnpinClick
    }, (0, _languageHandler._t)("Unpin"))));
  }

}, (0, _defineProperty2.default)(_class2, "propTypes", {
  groupId: _propTypes.default.string.isRequired,
  // Whether to show the short description of the group on the tile
  showDescription: _propTypes.default.bool,
  // Height of the group avatar in pixels
  avatarHeight: _propTypes.default.number
}), (0, _defineProperty2.default)(_class2, "contextType", _MatrixClientContext.default), (0, _defineProperty2.default)(_class2, "defaultProps", {
  showDescription: true,
  avatarHeight: 50
}), _temp)) || _class);
var _default = GroupTile;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,