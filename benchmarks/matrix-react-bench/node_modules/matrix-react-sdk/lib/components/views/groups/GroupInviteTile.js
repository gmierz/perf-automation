"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var sdk = _interopRequireWildcard(require("../../../index"));

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _languageHandler = require("../../../languageHandler");

var _classnames = _interopRequireDefault(require("classnames"));

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _ContextMenu = _interopRequireWildcard(require("../../structures/ContextMenu"));

var _MatrixClientContext = _interopRequireDefault(require("../../../contexts/MatrixClientContext"));

var _RovingTabIndex = require("../../../accessibility/RovingTabIndex");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _Media = require("../../../customisations/Media");

var _dec, _class, _class2, _temp;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

let GroupInviteTile = ( // XXX this class copies a lot from RoomTile.js
_dec = (0, _replaceableComponent.replaceableComponent)("views.groups.GroupInviteTile"), _dec(_class = (_temp = _class2 = class GroupInviteTile extends _react.default.Component {
  constructor(props, context) {
    super(props, context);
    (0, _defineProperty2.default)(this, "onClick", e => {
      _dispatcher.default.dispatch({
        action: 'view_group',
        group_id: this.props.group.groupId
      });
    });
    (0, _defineProperty2.default)(this, "onMouseEnter", () => {
      const state = {
        hover: true
      }; // Only allow non-guests to access the context menu

      if (!this.context.isGuest()) {
        state.badgeHover = true;
      }

      this.setState(state);
    });
    (0, _defineProperty2.default)(this, "onMouseLeave", () => {
      this.setState({
        badgeHover: false,
        hover: false
      });
    });
    (0, _defineProperty2.default)(this, "onContextMenuButtonClick", e => {
      // Prevent the RoomTile onClick event firing as well
      e.stopPropagation();
      e.preventDefault();

      this._showContextMenu(e.target.getBoundingClientRect());
    });
    (0, _defineProperty2.default)(this, "onContextMenu", e => {
      // Prevent the native context menu
      e.preventDefault();

      this._showContextMenu({
        right: e.clientX,
        top: e.clientY,
        height: 0
      });
    });
    (0, _defineProperty2.default)(this, "closeMenu", () => {
      this.setState({
        contextMenuPosition: null
      });
    });
    this.state = {
      hover: false,
      badgeHover: false,
      menuDisplayed: false,
      selected: this.props.group.groupId === null // XXX: this needs linking to LoggedInView/GroupView state

    };
  }

  _showContextMenu(boundingClientRect) {
    // Only allow non-guests to access the context menu
    if (_MatrixClientPeg.MatrixClientPeg.get().isGuest()) return;
    const state = {
      contextMenuPosition: boundingClientRect
    }; // If the badge is clicked, then no longer show tooltip

    if (this.props.collapsed) {
      state.hover = false;
    }

    this.setState(state);
  }

  render() {
    const AccessibleButton = sdk.getComponent('elements.AccessibleButton');
    const BaseAvatar = sdk.getComponent('avatars.BaseAvatar');
    const groupName = this.props.group.name || this.props.group.groupId;
    const httpAvatarUrl = this.props.group.avatarUrl ? (0, _Media.mediaFromMxc)(this.props.group.avatarUrl).getSquareThumbnailHttp(24) : null;

    const av = /*#__PURE__*/_react.default.createElement(BaseAvatar, {
      name: groupName,
      width: 24,
      height: 24,
      url: httpAvatarUrl
    });

    const isMenuDisplayed = Boolean(this.state.contextMenuPosition);
    const nameClasses = (0, _classnames.default)('mx_RoomTile_name mx_RoomTile_invite mx_RoomTile_badgeShown', {
      'mx_RoomTile_badgeShown': this.state.badgeHover || isMenuDisplayed
    }); // XXX: this is a workaround for Firefox giving this div a tabstop :( [tabIndex]

    const label = /*#__PURE__*/_react.default.createElement("div", {
      title: this.props.group.groupId,
      className: nameClasses,
      tabIndex: -1,
      dir: "auto"
    }, groupName);

    const badgeEllipsis = this.state.badgeHover || isMenuDisplayed;
    const badgeClasses = (0, _classnames.default)('mx_RoomTile_badge mx_RoomTile_highlight', {
      'mx_RoomTile_badgeButton': badgeEllipsis
    });
    const badgeContent = badgeEllipsis ? '\u00B7\u00B7\u00B7' : '!';
    let tooltip;

    if (this.props.collapsed && this.state.hover) {
      const Tooltip = sdk.getComponent("elements.Tooltip");
      tooltip = /*#__PURE__*/_react.default.createElement(Tooltip, {
        className: "mx_RoomTile_tooltip",
        label: groupName,
        dir: "auto"
      });
    }

    const classes = (0, _classnames.default)('mx_RoomTile mx_RoomTile_highlight', {
      'mx_RoomTile_menuDisplayed': isMenuDisplayed,
      'mx_RoomTile_selected': this.state.selected,
      'mx_GroupInviteTile': true
    });
    let contextMenu;

    if (isMenuDisplayed) {
      const GroupInviteTileContextMenu = sdk.getComponent('context_menus.GroupInviteTileContextMenu');
      contextMenu = /*#__PURE__*/_react.default.createElement(_ContextMenu.default, (0, _extends2.default)({}, (0, _ContextMenu.toRightOf)(this.state.contextMenuPosition), {
        onFinished: this.closeMenu
      }), /*#__PURE__*/_react.default.createElement(GroupInviteTileContextMenu, {
        group: this.props.group,
        onFinished: this.closeMenu
      }));
    }

    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_RovingTabIndex.RovingTabIndexWrapper, null, ({
      onFocus,
      isActive,
      ref
    }) => /*#__PURE__*/_react.default.createElement(AccessibleButton, {
      onFocus: onFocus,
      tabIndex: isActive ? 0 : -1,
      inputRef: ref,
      className: classes,
      onClick: this.onClick,
      onMouseEnter: this.onMouseEnter,
      onMouseLeave: this.onMouseLeave,
      onContextMenu: this.onContextMenu
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_RoomTile_avatar"
    }, av), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_RoomTile_nameContainer"
    }, label, /*#__PURE__*/_react.default.createElement(_ContextMenu.ContextMenuButton, {
      className: badgeClasses,
      onClick: this.onContextMenuButtonClick,
      label: (0, _languageHandler._t)("Options"),
      isExpanded: isMenuDisplayed,
      tabIndex: isActive ? 0 : -1
    }, badgeContent)), tooltip)), contextMenu);
  }

}, (0, _defineProperty2.default)(_class2, "propTypes", {
  group: _propTypes.default.object.isRequired
}), (0, _defineProperty2.default)(_class2, "contextType", _MatrixClientContext.default), _temp)) || _class);
exports.default = GroupInviteTile;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,