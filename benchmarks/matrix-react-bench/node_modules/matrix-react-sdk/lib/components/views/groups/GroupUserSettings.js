"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var sdk = _interopRequireWildcard(require("../../../index"));

var _languageHandler = require("../../../languageHandler");

var _MatrixClientContext = _interopRequireDefault(require("../../../contexts/MatrixClientContext"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _logger = require("matrix-js-sdk/src/logger");

var _dec, _class, _class2, _temp;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

let GroupUserSettings = (_dec = (0, _replaceableComponent.replaceableComponent)("views.groups.GroupUserSettings"), _dec(_class = (_temp = _class2 = class GroupUserSettings extends _react.default.Component {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "state", {
      error: null,
      groups: null
    });
  }

  componentDidMount() {
    this.context.getJoinedGroups().then(result => {
      this.setState({
        groups: result.groups || [],
        error: null
      });
    }, err => {
      _logger.logger.error(err);

      this.setState({
        groups: null,
        error: err
      });
    });
  }

  render() {
    let text = "";
    let groupPublicityToggles = null;
    const groups = this.state.groups;

    if (this.state.error) {
      text = (0, _languageHandler._t)('Something went wrong when trying to get your communities.');
    } else if (groups === null) {
      text = (0, _languageHandler._t)('Loading...');
    } else if (groups.length > 0) {
      const GroupPublicityToggle = sdk.getComponent('groups.GroupPublicityToggle');
      groupPublicityToggles = groups.map((groupId, index) => {
        return /*#__PURE__*/_react.default.createElement(GroupPublicityToggle, {
          key: index,
          groupId: groupId
        });
      });
      text = (0, _languageHandler._t)('Display your community flair in rooms configured to show it.');
    } else {
      text = (0, _languageHandler._t)("You're not currently a member of any communities.");
    }

    return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("p", {
      className: "mx_SettingsTab_subsectionText"
    }, text), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_subsectionText"
    }, groupPublicityToggles));
  }

}, (0, _defineProperty2.default)(_class2, "contextType", _MatrixClientContext.default), _temp)) || _class);
exports.default = GroupUserSettings;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL2dyb3Vwcy9Hcm91cFVzZXJTZXR0aW5ncy5qcyJdLCJuYW1lcyI6WyJHcm91cFVzZXJTZXR0aW5ncyIsIlJlYWN0IiwiQ29tcG9uZW50IiwiZXJyb3IiLCJncm91cHMiLCJjb21wb25lbnREaWRNb3VudCIsImNvbnRleHQiLCJnZXRKb2luZWRHcm91cHMiLCJ0aGVuIiwicmVzdWx0Iiwic2V0U3RhdGUiLCJlcnIiLCJsb2dnZXIiLCJyZW5kZXIiLCJ0ZXh0IiwiZ3JvdXBQdWJsaWNpdHlUb2dnbGVzIiwic3RhdGUiLCJsZW5ndGgiLCJHcm91cFB1YmxpY2l0eVRvZ2dsZSIsInNkayIsImdldENvbXBvbmVudCIsIm1hcCIsImdyb3VwSWQiLCJpbmRleCIsIk1hdHJpeENsaWVudENvbnRleHQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBZ0JBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUVBOzs7Ozs7OztJQUdxQkEsaUIsV0FEcEIsZ0RBQXFCLGdDQUFyQixDLG1DQUFELE1BQ3FCQSxpQkFEckIsU0FDK0NDLGVBQU1DLFNBRHJELENBQytEO0FBQUE7QUFBQTtBQUFBLGlEQUduRDtBQUNKQyxNQUFBQSxLQUFLLEVBQUUsSUFESDtBQUVKQyxNQUFBQSxNQUFNLEVBQUU7QUFGSixLQUhtRDtBQUFBOztBQVEzREMsRUFBQUEsaUJBQWlCLEdBQUc7QUFDaEIsU0FBS0MsT0FBTCxDQUFhQyxlQUFiLEdBQStCQyxJQUEvQixDQUFxQ0MsTUFBRCxJQUFZO0FBQzVDLFdBQUtDLFFBQUwsQ0FBYztBQUFFTixRQUFBQSxNQUFNLEVBQUVLLE1BQU0sQ0FBQ0wsTUFBUCxJQUFpQixFQUEzQjtBQUErQkQsUUFBQUEsS0FBSyxFQUFFO0FBQXRDLE9BQWQ7QUFDSCxLQUZELEVBRUlRLEdBQUQsSUFBUztBQUNSQyxxQkFBT1QsS0FBUCxDQUFhUSxHQUFiOztBQUNBLFdBQUtELFFBQUwsQ0FBYztBQUFFTixRQUFBQSxNQUFNLEVBQUUsSUFBVjtBQUFnQkQsUUFBQUEsS0FBSyxFQUFFUTtBQUF2QixPQUFkO0FBQ0gsS0FMRDtBQU1IOztBQUVERSxFQUFBQSxNQUFNLEdBQUc7QUFDTCxRQUFJQyxJQUFJLEdBQUcsRUFBWDtBQUNBLFFBQUlDLHFCQUFxQixHQUFHLElBQTVCO0FBQ0EsVUFBTVgsTUFBTSxHQUFHLEtBQUtZLEtBQUwsQ0FBV1osTUFBMUI7O0FBRUEsUUFBSSxLQUFLWSxLQUFMLENBQVdiLEtBQWYsRUFBc0I7QUFDbEJXLE1BQUFBLElBQUksR0FBRyx5QkFBRywyREFBSCxDQUFQO0FBQ0gsS0FGRCxNQUVPLElBQUlWLE1BQU0sS0FBSyxJQUFmLEVBQXFCO0FBQ3hCVSxNQUFBQSxJQUFJLEdBQUcseUJBQUcsWUFBSCxDQUFQO0FBQ0gsS0FGTSxNQUVBLElBQUlWLE1BQU0sQ0FBQ2EsTUFBUCxHQUFnQixDQUFwQixFQUF1QjtBQUMxQixZQUFNQyxvQkFBb0IsR0FBR0MsR0FBRyxDQUFDQyxZQUFKLENBQWlCLDZCQUFqQixDQUE3QjtBQUNBTCxNQUFBQSxxQkFBcUIsR0FBR1gsTUFBTSxDQUFDaUIsR0FBUCxDQUFXLENBQUNDLE9BQUQsRUFBVUMsS0FBVixLQUFvQjtBQUNuRCw0QkFBTyw2QkFBQyxvQkFBRDtBQUFzQixVQUFBLEdBQUcsRUFBRUEsS0FBM0I7QUFBa0MsVUFBQSxPQUFPLEVBQUVEO0FBQTNDLFVBQVA7QUFDSCxPQUZ1QixDQUF4QjtBQUdBUixNQUFBQSxJQUFJLEdBQUcseUJBQUcsOERBQUgsQ0FBUDtBQUNILEtBTk0sTUFNQTtBQUNIQSxNQUFBQSxJQUFJLEdBQUcseUJBQUcsbURBQUgsQ0FBUDtBQUNIOztBQUVELHdCQUNJLHVEQUNJO0FBQUcsTUFBQSxTQUFTLEVBQUM7QUFBYixPQUErQ0EsSUFBL0MsQ0FESixlQUVJO0FBQUssTUFBQSxTQUFTLEVBQUM7QUFBZixPQUNNQyxxQkFETixDQUZKLENBREo7QUFRSDs7QUE1QzBELEMsd0RBQ3RDUyw0QiIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5Db3B5cmlnaHQgMjAxNyBOZXcgVmVjdG9yIEx0ZFxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgKiBhcyBzZGsgZnJvbSAnLi4vLi4vLi4vaW5kZXgnO1xuaW1wb3J0IHsgX3QgfSBmcm9tICcuLi8uLi8uLi9sYW5ndWFnZUhhbmRsZXInO1xuaW1wb3J0IE1hdHJpeENsaWVudENvbnRleHQgZnJvbSBcIi4uLy4uLy4uL2NvbnRleHRzL01hdHJpeENsaWVudENvbnRleHRcIjtcbmltcG9ydCB7IHJlcGxhY2VhYmxlQ29tcG9uZW50IH0gZnJvbSBcIi4uLy4uLy4uL3V0aWxzL3JlcGxhY2VhYmxlQ29tcG9uZW50XCI7XG5cbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gXCJtYXRyaXgtanMtc2RrL3NyYy9sb2dnZXJcIjtcblxuQHJlcGxhY2VhYmxlQ29tcG9uZW50KFwidmlld3MuZ3JvdXBzLkdyb3VwVXNlclNldHRpbmdzXCIpXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHcm91cFVzZXJTZXR0aW5ncyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gICAgc3RhdGljIGNvbnRleHRUeXBlID0gTWF0cml4Q2xpZW50Q29udGV4dDtcblxuICAgIHN0YXRlID0ge1xuICAgICAgICBlcnJvcjogbnVsbCxcbiAgICAgICAgZ3JvdXBzOiBudWxsLFxuICAgIH07XG5cbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgICAgdGhpcy5jb250ZXh0LmdldEpvaW5lZEdyb3VwcygpLnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGdyb3VwczogcmVzdWx0Lmdyb3VwcyB8fCBbXSwgZXJyb3I6IG51bGwgfSk7XG4gICAgICAgIH0sIChlcnIpID0+IHtcbiAgICAgICAgICAgIGxvZ2dlci5lcnJvcihlcnIpO1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGdyb3VwczogbnVsbCwgZXJyb3I6IGVyciB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICBsZXQgdGV4dCA9IFwiXCI7XG4gICAgICAgIGxldCBncm91cFB1YmxpY2l0eVRvZ2dsZXMgPSBudWxsO1xuICAgICAgICBjb25zdCBncm91cHMgPSB0aGlzLnN0YXRlLmdyb3VwcztcblxuICAgICAgICBpZiAodGhpcy5zdGF0ZS5lcnJvcikge1xuICAgICAgICAgICAgdGV4dCA9IF90KCdTb21ldGhpbmcgd2VudCB3cm9uZyB3aGVuIHRyeWluZyB0byBnZXQgeW91ciBjb21tdW5pdGllcy4nKTtcbiAgICAgICAgfSBlbHNlIGlmIChncm91cHMgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHRleHQgPSBfdCgnTG9hZGluZy4uLicpO1xuICAgICAgICB9IGVsc2UgaWYgKGdyb3Vwcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBHcm91cFB1YmxpY2l0eVRvZ2dsZSA9IHNkay5nZXRDb21wb25lbnQoJ2dyb3Vwcy5Hcm91cFB1YmxpY2l0eVRvZ2dsZScpO1xuICAgICAgICAgICAgZ3JvdXBQdWJsaWNpdHlUb2dnbGVzID0gZ3JvdXBzLm1hcCgoZ3JvdXBJZCwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gPEdyb3VwUHVibGljaXR5VG9nZ2xlIGtleT17aW5kZXh9IGdyb3VwSWQ9e2dyb3VwSWR9IC8+O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0ZXh0ID0gX3QoJ0Rpc3BsYXkgeW91ciBjb21tdW5pdHkgZmxhaXIgaW4gcm9vbXMgY29uZmlndXJlZCB0byBzaG93IGl0LicpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGV4dCA9IF90KFwiWW91J3JlIG5vdCBjdXJyZW50bHkgYSBtZW1iZXIgb2YgYW55IGNvbW11bml0aWVzLlwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cIm14X1NldHRpbmdzVGFiX3N1YnNlY3Rpb25UZXh0XCI+eyB0ZXh0IH08L3A+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J214X1NldHRpbmdzVGFiX3N1YnNlY3Rpb25UZXh0Jz5cbiAgICAgICAgICAgICAgICAgICAgeyBncm91cFB1YmxpY2l0eVRvZ2dsZXMgfVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgfVxufVxuIl19