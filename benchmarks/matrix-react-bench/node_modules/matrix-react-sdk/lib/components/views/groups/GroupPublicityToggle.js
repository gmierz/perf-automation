"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var sdk = _interopRequireWildcard(require("../../../index"));

var _GroupStore = _interopRequireDefault(require("../../../stores/GroupStore"));

var _ToggleSwitch = _interopRequireDefault(require("../elements/ToggleSwitch"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _dec, _class, _class2, _temp;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

let GroupPublicityToggle = (_dec = (0, _replaceableComponent.replaceableComponent)("views.groups.GroupPublicityTile"), _dec(_class = (_temp = _class2 = class GroupPublicityToggle extends _react.default.Component {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "state", {
      busy: false,
      ready: false,
      isGroupPublicised: false // assume false as <ToggleSwitch /> expects a boolean

    });
    (0, _defineProperty2.default)(this, "_onPublicityToggle", () => {
      this.setState({
        busy: true,
        // Optimistic early update
        isGroupPublicised: !this.state.isGroupPublicised
      });

      _GroupStore.default.setGroupPublicity(this.props.groupId, !this.state.isGroupPublicised).then(() => {
        this.setState({
          busy: false
        });
      });
    });
  }

  componentDidMount() {
    this._initGroupStore(this.props.groupId);
  }

  _initGroupStore(groupId) {
    this._groupStoreToken = _GroupStore.default.registerListener(groupId, () => {
      this.setState({
        isGroupPublicised: Boolean(_GroupStore.default.getGroupPublicity(groupId)),
        ready: _GroupStore.default.isStateReady(groupId, _GroupStore.default.STATE_KEY.Summary)
      });
    });
  }

  componentWillUnmount() {
    if (this._groupStoreToken) this._groupStoreToken.unregister();
  }

  render() {
    const GroupTile = sdk.getComponent('groups.GroupTile');
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_GroupPublicity_toggle"
    }, /*#__PURE__*/_react.default.createElement(GroupTile, {
      groupId: this.props.groupId,
      showDescription: false,
      avatarHeight: 40
    }), /*#__PURE__*/_react.default.createElement(_ToggleSwitch.default, {
      checked: this.state.isGroupPublicised,
      disabled: !this.state.ready || this.state.busy,
      onChange: this._onPublicityToggle
    }));
  }

}, (0, _defineProperty2.default)(_class2, "propTypes", {
  groupId: _propTypes.default.string.isRequired
}), _temp)) || _class);
exports.default = GroupPublicityToggle;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL2dyb3Vwcy9Hcm91cFB1YmxpY2l0eVRvZ2dsZS5qcyJdLCJuYW1lcyI6WyJHcm91cFB1YmxpY2l0eVRvZ2dsZSIsIlJlYWN0IiwiQ29tcG9uZW50IiwiYnVzeSIsInJlYWR5IiwiaXNHcm91cFB1YmxpY2lzZWQiLCJzZXRTdGF0ZSIsInN0YXRlIiwiR3JvdXBTdG9yZSIsInNldEdyb3VwUHVibGljaXR5IiwicHJvcHMiLCJncm91cElkIiwidGhlbiIsImNvbXBvbmVudERpZE1vdW50IiwiX2luaXRHcm91cFN0b3JlIiwiX2dyb3VwU3RvcmVUb2tlbiIsInJlZ2lzdGVyTGlzdGVuZXIiLCJCb29sZWFuIiwiZ2V0R3JvdXBQdWJsaWNpdHkiLCJpc1N0YXRlUmVhZHkiLCJTVEFURV9LRVkiLCJTdW1tYXJ5IiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJ1bnJlZ2lzdGVyIiwicmVuZGVyIiwiR3JvdXBUaWxlIiwic2RrIiwiZ2V0Q29tcG9uZW50IiwiX29uUHVibGljaXR5VG9nZ2xlIiwiUHJvcFR5cGVzIiwic3RyaW5nIiwiaXNSZXF1aXJlZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFnQkE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7Ozs7O0lBR3FCQSxvQixXQURwQixnREFBcUIsaUNBQXJCLEMsbUNBQUQsTUFDcUJBLG9CQURyQixTQUNrREMsZUFBTUMsU0FEeEQsQ0FDa0U7QUFBQTtBQUFBO0FBQUEsaURBS3REO0FBQ0pDLE1BQUFBLElBQUksRUFBRSxLQURGO0FBRUpDLE1BQUFBLEtBQUssRUFBRSxLQUZIO0FBR0pDLE1BQUFBLGlCQUFpQixFQUFFLEtBSGYsQ0FHc0I7O0FBSHRCLEtBTHNEO0FBQUEsOERBNEJ6QyxNQUFNO0FBQ3ZCLFdBQUtDLFFBQUwsQ0FBYztBQUNWSCxRQUFBQSxJQUFJLEVBQUUsSUFESTtBQUVWO0FBQ0FFLFFBQUFBLGlCQUFpQixFQUFFLENBQUMsS0FBS0UsS0FBTCxDQUFXRjtBQUhyQixPQUFkOztBQUtBRywwQkFBV0MsaUJBQVgsQ0FBNkIsS0FBS0MsS0FBTCxDQUFXQyxPQUF4QyxFQUFpRCxDQUFDLEtBQUtKLEtBQUwsQ0FBV0YsaUJBQTdELEVBQWdGTyxJQUFoRixDQUFxRixNQUFNO0FBQ3ZGLGFBQUtOLFFBQUwsQ0FBYztBQUNWSCxVQUFBQSxJQUFJLEVBQUU7QUFESSxTQUFkO0FBR0gsT0FKRDtBQUtILEtBdkM2RDtBQUFBOztBQVc5RFUsRUFBQUEsaUJBQWlCLEdBQUc7QUFDaEIsU0FBS0MsZUFBTCxDQUFxQixLQUFLSixLQUFMLENBQVdDLE9BQWhDO0FBQ0g7O0FBRURHLEVBQUFBLGVBQWUsQ0FBQ0gsT0FBRCxFQUFVO0FBQ3JCLFNBQUtJLGdCQUFMLEdBQXdCUCxvQkFBV1EsZ0JBQVgsQ0FBNEJMLE9BQTVCLEVBQXFDLE1BQU07QUFDL0QsV0FBS0wsUUFBTCxDQUFjO0FBQ1ZELFFBQUFBLGlCQUFpQixFQUFFWSxPQUFPLENBQUNULG9CQUFXVSxpQkFBWCxDQUE2QlAsT0FBN0IsQ0FBRCxDQURoQjtBQUVWUCxRQUFBQSxLQUFLLEVBQUVJLG9CQUFXVyxZQUFYLENBQXdCUixPQUF4QixFQUFpQ0gsb0JBQVdZLFNBQVgsQ0FBcUJDLE9BQXREO0FBRkcsT0FBZDtBQUlILEtBTHVCLENBQXhCO0FBTUg7O0FBRURDLEVBQUFBLG9CQUFvQixHQUFHO0FBQ25CLFFBQUksS0FBS1AsZ0JBQVQsRUFBMkIsS0FBS0EsZ0JBQUwsQ0FBc0JRLFVBQXRCO0FBQzlCOztBQWVEQyxFQUFBQSxNQUFNLEdBQUc7QUFDTCxVQUFNQyxTQUFTLEdBQUdDLEdBQUcsQ0FBQ0MsWUFBSixDQUFpQixrQkFBakIsQ0FBbEI7QUFDQSx3QkFBTztBQUFLLE1BQUEsU0FBUyxFQUFDO0FBQWYsb0JBQ0gsNkJBQUMsU0FBRDtBQUFXLE1BQUEsT0FBTyxFQUFFLEtBQUtqQixLQUFMLENBQVdDLE9BQS9CO0FBQXdDLE1BQUEsZUFBZSxFQUFFLEtBQXpEO0FBQWdFLE1BQUEsWUFBWSxFQUFFO0FBQTlFLE1BREcsZUFFSCw2QkFBQyxxQkFBRDtBQUFjLE1BQUEsT0FBTyxFQUFFLEtBQUtKLEtBQUwsQ0FBV0YsaUJBQWxDO0FBQ0ksTUFBQSxRQUFRLEVBQUUsQ0FBQyxLQUFLRSxLQUFMLENBQVdILEtBQVosSUFBcUIsS0FBS0csS0FBTCxDQUFXSixJQUQ5QztBQUVJLE1BQUEsUUFBUSxFQUFFLEtBQUt5QjtBQUZuQixNQUZHLENBQVA7QUFNSDs7QUFqRDZELEMsc0RBQzNDO0FBQ2ZqQixFQUFBQSxPQUFPLEVBQUVrQixtQkFBVUMsTUFBVixDQUFpQkM7QUFEWCxDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbkNvcHlyaWdodCAyMDE3IE5ldyBWZWN0b3IgTHRkXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgKiBhcyBzZGsgZnJvbSAnLi4vLi4vLi4vaW5kZXgnO1xuaW1wb3J0IEdyb3VwU3RvcmUgZnJvbSAnLi4vLi4vLi4vc3RvcmVzL0dyb3VwU3RvcmUnO1xuaW1wb3J0IFRvZ2dsZVN3aXRjaCBmcm9tIFwiLi4vZWxlbWVudHMvVG9nZ2xlU3dpdGNoXCI7XG5pbXBvcnQgeyByZXBsYWNlYWJsZUNvbXBvbmVudCB9IGZyb20gXCIuLi8uLi8uLi91dGlscy9yZXBsYWNlYWJsZUNvbXBvbmVudFwiO1xuXG5AcmVwbGFjZWFibGVDb21wb25lbnQoXCJ2aWV3cy5ncm91cHMuR3JvdXBQdWJsaWNpdHlUaWxlXCIpXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHcm91cFB1YmxpY2l0eVRvZ2dsZSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gICAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICAgICAgZ3JvdXBJZDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgIH07XG5cbiAgICBzdGF0ZSA9IHtcbiAgICAgICAgYnVzeTogZmFsc2UsXG4gICAgICAgIHJlYWR5OiBmYWxzZSxcbiAgICAgICAgaXNHcm91cFB1YmxpY2lzZWQ6IGZhbHNlLCAvLyBhc3N1bWUgZmFsc2UgYXMgPFRvZ2dsZVN3aXRjaCAvPiBleHBlY3RzIGEgYm9vbGVhblxuICAgIH07XG5cbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgICAgdGhpcy5faW5pdEdyb3VwU3RvcmUodGhpcy5wcm9wcy5ncm91cElkKTtcbiAgICB9XG5cbiAgICBfaW5pdEdyb3VwU3RvcmUoZ3JvdXBJZCkge1xuICAgICAgICB0aGlzLl9ncm91cFN0b3JlVG9rZW4gPSBHcm91cFN0b3JlLnJlZ2lzdGVyTGlzdGVuZXIoZ3JvdXBJZCwgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgaXNHcm91cFB1YmxpY2lzZWQ6IEJvb2xlYW4oR3JvdXBTdG9yZS5nZXRHcm91cFB1YmxpY2l0eShncm91cElkKSksXG4gICAgICAgICAgICAgICAgcmVhZHk6IEdyb3VwU3RvcmUuaXNTdGF0ZVJlYWR5KGdyb3VwSWQsIEdyb3VwU3RvcmUuU1RBVEVfS0VZLlN1bW1hcnkpLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgICBpZiAodGhpcy5fZ3JvdXBTdG9yZVRva2VuKSB0aGlzLl9ncm91cFN0b3JlVG9rZW4udW5yZWdpc3RlcigpO1xuICAgIH1cblxuICAgIF9vblB1YmxpY2l0eVRvZ2dsZSA9ICgpID0+IHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBidXN5OiB0cnVlLFxuICAgICAgICAgICAgLy8gT3B0aW1pc3RpYyBlYXJseSB1cGRhdGVcbiAgICAgICAgICAgIGlzR3JvdXBQdWJsaWNpc2VkOiAhdGhpcy5zdGF0ZS5pc0dyb3VwUHVibGljaXNlZCxcbiAgICAgICAgfSk7XG4gICAgICAgIEdyb3VwU3RvcmUuc2V0R3JvdXBQdWJsaWNpdHkodGhpcy5wcm9wcy5ncm91cElkLCAhdGhpcy5zdGF0ZS5pc0dyb3VwUHVibGljaXNlZCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICBidXN5OiBmYWxzZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICBjb25zdCBHcm91cFRpbGUgPSBzZGsuZ2V0Q29tcG9uZW50KCdncm91cHMuR3JvdXBUaWxlJyk7XG4gICAgICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cIm14X0dyb3VwUHVibGljaXR5X3RvZ2dsZVwiPlxuICAgICAgICAgICAgPEdyb3VwVGlsZSBncm91cElkPXt0aGlzLnByb3BzLmdyb3VwSWR9IHNob3dEZXNjcmlwdGlvbj17ZmFsc2V9IGF2YXRhckhlaWdodD17NDB9IC8+XG4gICAgICAgICAgICA8VG9nZ2xlU3dpdGNoIGNoZWNrZWQ9e3RoaXMuc3RhdGUuaXNHcm91cFB1YmxpY2lzZWR9XG4gICAgICAgICAgICAgICAgZGlzYWJsZWQ9eyF0aGlzLnN0YXRlLnJlYWR5IHx8IHRoaXMuc3RhdGUuYnVzeX1cbiAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5fb25QdWJsaWNpdHlUb2dnbGV9IC8+XG4gICAgICAgIDwvZGl2PjtcbiAgICB9XG59XG4iXX0=