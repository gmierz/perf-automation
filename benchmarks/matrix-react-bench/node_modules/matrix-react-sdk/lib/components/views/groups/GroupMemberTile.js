"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var sdk = _interopRequireWildcard(require("../../../index"));

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _groups = require("../../../groups");

var _MatrixClientContext = _interopRequireDefault(require("../../../contexts/MatrixClientContext"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _Media = require("../../../customisations/Media");

var _dec, _class, _class2, _temp;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

let GroupMemberTile = (_dec = (0, _replaceableComponent.replaceableComponent)("views.groups.GroupMemberTile"), _dec(_class = (_temp = _class2 = class GroupMemberTile extends _react.default.Component {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "onClick", e => {
      _dispatcher.default.dispatch({
        action: 'view_group_user',
        member: this.props.member,
        groupId: this.props.groupId
      });
    });
  }

  render() {
    const BaseAvatar = sdk.getComponent('avatars.BaseAvatar');
    const EntityTile = sdk.getComponent('rooms.EntityTile');
    const name = this.props.member.displayname || this.props.member.userId;
    const avatarUrl = this.props.member.avatarUrl ? (0, _Media.mediaFromMxc)(this.props.member.avatarUrl).getSquareThumbnailHttp(36) : null;

    const av = /*#__PURE__*/_react.default.createElement(BaseAvatar, {
      "aria-hidden": "true",
      name: this.props.member.displayname || this.props.member.userId,
      idName: this.props.member.userId,
      width: 36,
      height: 36,
      url: avatarUrl
    });

    return /*#__PURE__*/_react.default.createElement(EntityTile, {
      name: name,
      avatarJsx: av,
      onClick: this.onClick,
      suppressOnHover: true,
      presenceState: "online",
      powerStatus: this.props.member.isPrivileged ? EntityTile.POWER_STATUS_ADMIN : null
    });
  }

}, (0, _defineProperty2.default)(_class2, "propTypes", {
  groupId: _propTypes.default.string.isRequired,
  member: _groups.GroupMemberType.isRequired
}), (0, _defineProperty2.default)(_class2, "contextType", _MatrixClientContext.default), _temp)) || _class);
exports.default = GroupMemberTile;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL2dyb3Vwcy9Hcm91cE1lbWJlclRpbGUuanMiXSwibmFtZXMiOlsiR3JvdXBNZW1iZXJUaWxlIiwiUmVhY3QiLCJDb21wb25lbnQiLCJlIiwiZGlzIiwiZGlzcGF0Y2giLCJhY3Rpb24iLCJtZW1iZXIiLCJwcm9wcyIsImdyb3VwSWQiLCJyZW5kZXIiLCJCYXNlQXZhdGFyIiwic2RrIiwiZ2V0Q29tcG9uZW50IiwiRW50aXR5VGlsZSIsIm5hbWUiLCJkaXNwbGF5bmFtZSIsInVzZXJJZCIsImF2YXRhclVybCIsImdldFNxdWFyZVRodW1ibmFpbEh0dHAiLCJhdiIsIm9uQ2xpY2siLCJpc1ByaXZpbGVnZWQiLCJQT1dFUl9TVEFUVVNfQURNSU4iLCJQcm9wVHlwZXMiLCJzdHJpbmciLCJpc1JlcXVpcmVkIiwiR3JvdXBNZW1iZXJUeXBlIiwiTWF0cml4Q2xpZW50Q29udGV4dCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFrQkE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7Ozs7O0lBR3FCQSxlLFdBRHBCLGdEQUFxQiw4QkFBckIsQyxtQ0FBRCxNQUNxQkEsZUFEckIsU0FDNkNDLGVBQU1DLFNBRG5ELENBQzZEO0FBQUE7QUFBQTtBQUFBLG1EQVEvQ0MsQ0FBQyxJQUFJO0FBQ1hDLDBCQUFJQyxRQUFKLENBQWE7QUFDVEMsUUFBQUEsTUFBTSxFQUFFLGlCQURDO0FBRVRDLFFBQUFBLE1BQU0sRUFBRSxLQUFLQyxLQUFMLENBQVdELE1BRlY7QUFHVEUsUUFBQUEsT0FBTyxFQUFFLEtBQUtELEtBQUwsQ0FBV0M7QUFIWCxPQUFiO0FBS0gsS0Fkd0Q7QUFBQTs7QUFnQnpEQyxFQUFBQSxNQUFNLEdBQUc7QUFDTCxVQUFNQyxVQUFVLEdBQUdDLEdBQUcsQ0FBQ0MsWUFBSixDQUFpQixvQkFBakIsQ0FBbkI7QUFDQSxVQUFNQyxVQUFVLEdBQUdGLEdBQUcsQ0FBQ0MsWUFBSixDQUFpQixrQkFBakIsQ0FBbkI7QUFFQSxVQUFNRSxJQUFJLEdBQUcsS0FBS1AsS0FBTCxDQUFXRCxNQUFYLENBQWtCUyxXQUFsQixJQUFpQyxLQUFLUixLQUFMLENBQVdELE1BQVgsQ0FBa0JVLE1BQWhFO0FBQ0EsVUFBTUMsU0FBUyxHQUFHLEtBQUtWLEtBQUwsQ0FBV0QsTUFBWCxDQUFrQlcsU0FBbEIsR0FDWix5QkFBYSxLQUFLVixLQUFMLENBQVdELE1BQVgsQ0FBa0JXLFNBQS9CLEVBQTBDQyxzQkFBMUMsQ0FBaUUsRUFBakUsQ0FEWSxHQUVaLElBRk47O0FBSUEsVUFBTUMsRUFBRSxnQkFDSiw2QkFBQyxVQUFEO0FBQ0kscUJBQVksTUFEaEI7QUFFSSxNQUFBLElBQUksRUFBRSxLQUFLWixLQUFMLENBQVdELE1BQVgsQ0FBa0JTLFdBQWxCLElBQWlDLEtBQUtSLEtBQUwsQ0FBV0QsTUFBWCxDQUFrQlUsTUFGN0Q7QUFHSSxNQUFBLE1BQU0sRUFBRSxLQUFLVCxLQUFMLENBQVdELE1BQVgsQ0FBa0JVLE1BSDlCO0FBSUksTUFBQSxLQUFLLEVBQUUsRUFKWDtBQUtJLE1BQUEsTUFBTSxFQUFFLEVBTFo7QUFNSSxNQUFBLEdBQUcsRUFBRUM7QUFOVCxNQURKOztBQVdBLHdCQUNJLDZCQUFDLFVBQUQ7QUFDSSxNQUFBLElBQUksRUFBRUgsSUFEVjtBQUVJLE1BQUEsU0FBUyxFQUFFSyxFQUZmO0FBR0ksTUFBQSxPQUFPLEVBQUUsS0FBS0MsT0FIbEI7QUFJSSxNQUFBLGVBQWUsRUFBRSxJQUpyQjtBQUtJLE1BQUEsYUFBYSxFQUFDLFFBTGxCO0FBTUksTUFBQSxXQUFXLEVBQUUsS0FBS2IsS0FBTCxDQUFXRCxNQUFYLENBQWtCZSxZQUFsQixHQUFpQ1IsVUFBVSxDQUFDUyxrQkFBNUMsR0FBaUU7QUFObEYsTUFESjtBQVVIOztBQTlDd0QsQyxzREFDdEM7QUFDZmQsRUFBQUEsT0FBTyxFQUFFZSxtQkFBVUMsTUFBVixDQUFpQkMsVUFEWDtBQUVmbkIsRUFBQUEsTUFBTSxFQUFFb0Isd0JBQWdCRDtBQUZULEMseURBS0VFLDRCIiwic291cmNlc0NvbnRlbnQiOlsiLypcbkNvcHlyaWdodCAyMDE3IFZlY3RvciBDcmVhdGlvbnMgTHRkXG5Db3B5cmlnaHQgMjAxNyBOZXcgVmVjdG9yIEx0ZFxuQ29weXJpZ2h0IDIwMTkgTWljaGFlbCBUZWxhdHluc2tpIDw3dDNjaGd1eUBnbWFpbC5jb20+XG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgKiBhcyBzZGsgZnJvbSAnLi4vLi4vLi4vaW5kZXgnO1xuaW1wb3J0IGRpcyBmcm9tICcuLi8uLi8uLi9kaXNwYXRjaGVyL2Rpc3BhdGNoZXInO1xuaW1wb3J0IHsgR3JvdXBNZW1iZXJUeXBlIH0gZnJvbSAnLi4vLi4vLi4vZ3JvdXBzJztcbmltcG9ydCBNYXRyaXhDbGllbnRDb250ZXh0IGZyb20gXCIuLi8uLi8uLi9jb250ZXh0cy9NYXRyaXhDbGllbnRDb250ZXh0XCI7XG5pbXBvcnQgeyByZXBsYWNlYWJsZUNvbXBvbmVudCB9IGZyb20gXCIuLi8uLi8uLi91dGlscy9yZXBsYWNlYWJsZUNvbXBvbmVudFwiO1xuaW1wb3J0IHsgbWVkaWFGcm9tTXhjIH0gZnJvbSBcIi4uLy4uLy4uL2N1c3RvbWlzYXRpb25zL01lZGlhXCI7XG5cbkByZXBsYWNlYWJsZUNvbXBvbmVudChcInZpZXdzLmdyb3Vwcy5Hcm91cE1lbWJlclRpbGVcIilcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdyb3VwTWVtYmVyVGlsZSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gICAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICAgICAgZ3JvdXBJZDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgICAgICBtZW1iZXI6IEdyb3VwTWVtYmVyVHlwZS5pc1JlcXVpcmVkLFxuICAgIH07XG5cbiAgICBzdGF0aWMgY29udGV4dFR5cGUgPSBNYXRyaXhDbGllbnRDb250ZXh0O1xuXG4gICAgb25DbGljayA9IGUgPT4ge1xuICAgICAgICBkaXMuZGlzcGF0Y2goe1xuICAgICAgICAgICAgYWN0aW9uOiAndmlld19ncm91cF91c2VyJyxcbiAgICAgICAgICAgIG1lbWJlcjogdGhpcy5wcm9wcy5tZW1iZXIsXG4gICAgICAgICAgICBncm91cElkOiB0aGlzLnByb3BzLmdyb3VwSWQsXG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGNvbnN0IEJhc2VBdmF0YXIgPSBzZGsuZ2V0Q29tcG9uZW50KCdhdmF0YXJzLkJhc2VBdmF0YXInKTtcbiAgICAgICAgY29uc3QgRW50aXR5VGlsZSA9IHNkay5nZXRDb21wb25lbnQoJ3Jvb21zLkVudGl0eVRpbGUnKTtcblxuICAgICAgICBjb25zdCBuYW1lID0gdGhpcy5wcm9wcy5tZW1iZXIuZGlzcGxheW5hbWUgfHwgdGhpcy5wcm9wcy5tZW1iZXIudXNlcklkO1xuICAgICAgICBjb25zdCBhdmF0YXJVcmwgPSB0aGlzLnByb3BzLm1lbWJlci5hdmF0YXJVcmxcbiAgICAgICAgICAgID8gbWVkaWFGcm9tTXhjKHRoaXMucHJvcHMubWVtYmVyLmF2YXRhclVybCkuZ2V0U3F1YXJlVGh1bWJuYWlsSHR0cCgzNilcbiAgICAgICAgICAgIDogbnVsbDtcblxuICAgICAgICBjb25zdCBhdiA9IChcbiAgICAgICAgICAgIDxCYXNlQXZhdGFyXG4gICAgICAgICAgICAgICAgYXJpYS1oaWRkZW49XCJ0cnVlXCJcbiAgICAgICAgICAgICAgICBuYW1lPXt0aGlzLnByb3BzLm1lbWJlci5kaXNwbGF5bmFtZSB8fCB0aGlzLnByb3BzLm1lbWJlci51c2VySWR9XG4gICAgICAgICAgICAgICAgaWROYW1lPXt0aGlzLnByb3BzLm1lbWJlci51c2VySWR9XG4gICAgICAgICAgICAgICAgd2lkdGg9ezM2fVxuICAgICAgICAgICAgICAgIGhlaWdodD17MzZ9XG4gICAgICAgICAgICAgICAgdXJsPXthdmF0YXJVcmx9XG4gICAgICAgICAgICAvPlxuICAgICAgICApO1xuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8RW50aXR5VGlsZVxuICAgICAgICAgICAgICAgIG5hbWU9e25hbWV9XG4gICAgICAgICAgICAgICAgYXZhdGFySnN4PXthdn1cbiAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLm9uQ2xpY2t9XG4gICAgICAgICAgICAgICAgc3VwcHJlc3NPbkhvdmVyPXt0cnVlfVxuICAgICAgICAgICAgICAgIHByZXNlbmNlU3RhdGU9XCJvbmxpbmVcIlxuICAgICAgICAgICAgICAgIHBvd2VyU3RhdHVzPXt0aGlzLnByb3BzLm1lbWJlci5pc1ByaXZpbGVnZWQgPyBFbnRpdHlUaWxlLlBPV0VSX1NUQVRVU19BRE1JTiA6IG51bGx9XG4gICAgICAgICAgICAvPlxuICAgICAgICApO1xuICAgIH1cbn1cbiJdfQ==