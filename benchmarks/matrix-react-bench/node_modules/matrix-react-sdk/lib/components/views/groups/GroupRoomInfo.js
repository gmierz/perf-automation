"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _Modal = _interopRequireDefault(require("../../../Modal"));

var sdk = _interopRequireWildcard(require("../../../index"));

var _languageHandler = require("../../../languageHandler");

var _GroupStore = _interopRequireDefault(require("../../../stores/GroupStore"));

var _MatrixClientContext = _interopRequireDefault(require("../../../contexts/MatrixClientContext"));

var _AutoHideScrollbar = _interopRequireDefault(require("../../structures/AutoHideScrollbar"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _Media = require("../../../customisations/Media");

var _logger = require("matrix-js-sdk/src/logger");

var _dec, _class, _class2, _temp;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

let GroupRoomInfo = (_dec = (0, _replaceableComponent.replaceableComponent)("views.groups.GroupRoomInfo"), _dec(_class = (_temp = _class2 = class GroupRoomInfo extends _react.default.Component {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "state", {
      isUserPrivilegedInGroup: null,
      groupRoom: null,
      groupRoomPublicityLoading: false,
      groupRoomRemoveLoading: false
    });
    (0, _defineProperty2.default)(this, "onGroupStoreUpdated", () => {
      this.setState({
        isUserPrivilegedInGroup: _GroupStore.default.isUserPrivileged(this.props.groupId)
      });

      this._updateGroupRoom();
    });
    (0, _defineProperty2.default)(this, "_onRemove", e => {
      const groupId = this.props.groupId;
      const roomName = this.state.groupRoom.displayname;
      e.preventDefault();
      e.stopPropagation();
      const QuestionDialog = sdk.getComponent("dialogs.QuestionDialog");

      _Modal.default.createTrackedDialog('Confirm removal of group from room', '', QuestionDialog, {
        title: (0, _languageHandler._t)("Are you sure you want to remove '%(roomName)s' from %(groupId)s?", {
          roomName,
          groupId
        }),
        description: (0, _languageHandler._t)("Removing a room from the community will also remove it from the community page."),
        button: (0, _languageHandler._t)("Remove"),
        onFinished: proceed => {
          if (!proceed) return;
          this.setState({
            groupRoomRemoveLoading: true
          });
          const groupId = this.props.groupId;
          const roomId = this.props.groupRoomId;

          _GroupStore.default.removeRoomFromGroup(this.props.groupId, roomId).then(() => {
            _dispatcher.default.dispatch({
              action: "view_group_room_list"
            });
          }).catch(err => {
            _logger.logger.error(`Error whilst removing ${roomId} from ${groupId}`, err);

            const ErrorDialog = sdk.getComponent("dialogs.ErrorDialog");

            _Modal.default.createTrackedDialog('Failed to remove room from group', '', ErrorDialog, {
              title: (0, _languageHandler._t)("Failed to remove room from community"),
              description: (0, _languageHandler._t)("Failed to remove '%(roomName)s' from %(groupId)s", {
                groupId,
                roomName
              })
            });
          }).finally(() => {
            this.setState({
              groupRoomRemoveLoading: false
            });
          });
        }
      });
    });
    (0, _defineProperty2.default)(this, "_onCancel", e => {
      _dispatcher.default.dispatch({
        action: "view_group_room_list"
      });
    });
    (0, _defineProperty2.default)(this, "_changeGroupRoomPublicity", e => {
      const isPublic = e.target.value === "public";
      this.setState({
        groupRoomPublicityLoading: true
      });
      const groupId = this.props.groupId;
      const roomId = this.props.groupRoomId;
      const roomName = this.state.groupRoom.displayname;

      _GroupStore.default.updateGroupRoomVisibility(this.props.groupId, roomId, isPublic).catch(err => {
        _logger.logger.error(`Error whilst changing visibility of ${roomId} in ${groupId} to ${isPublic}`, err);

        const ErrorDialog = sdk.getComponent("dialogs.ErrorDialog");

        _Modal.default.createTrackedDialog('Failed to remove room from group', '', ErrorDialog, {
          title: (0, _languageHandler._t)("Something went wrong!"),
          description: (0, _languageHandler._t)("The visibility of '%(roomName)s' in %(groupId)s could not be updated.", {
            roomName,
            groupId
          })
        });
      }).finally(() => {
        this.setState({
          groupRoomPublicityLoading: false
        });
      });
    });
  }

  componentDidMount() {
    this._initGroupStore(this.props.groupId);
  } // TODO: [REACT-WARNING] Replace with appropriate lifecycle event
  // eslint-disable-next-line camelcase


  UNSAFE_componentWillReceiveProps(newProps) {
    if (newProps.groupId !== this.props.groupId) {
      this._unregisterGroupStore(this.props.groupId);

      this._initGroupStore(newProps.groupId);
    }
  }

  componentWillUnmount() {
    this._unregisterGroupStore(this.props.groupId);
  }

  _initGroupStore(groupId) {
    _GroupStore.default.registerListener(groupId, this.onGroupStoreUpdated);
  }

  _unregisterGroupStore(groupId) {
    _GroupStore.default.unregisterListener(this.onGroupStoreUpdated);
  }

  _updateGroupRoom() {
    this.setState({
      groupRoom: _GroupStore.default.getGroupRooms(this.props.groupId).find(r => r.roomId === this.props.groupRoomId)
    });
  }

  render() {
    const AccessibleButton = sdk.getComponent('elements.AccessibleButton');
    const InlineSpinner = sdk.getComponent('elements.InlineSpinner');

    if (this.state.groupRoomRemoveLoading || !this.state.groupRoom) {
      const Spinner = sdk.getComponent("elements.Spinner");
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_MemberInfo"
      }, /*#__PURE__*/_react.default.createElement(Spinner, null));
    }

    let adminTools;

    if (this.state.isUserPrivilegedInGroup) {
      adminTools = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_MemberInfo_adminTools"
      }, /*#__PURE__*/_react.default.createElement("h3", null, (0, _languageHandler._t)("Admin Tools")), /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_MemberInfo_buttons"
      }, /*#__PURE__*/_react.default.createElement(AccessibleButton, {
        className: "mx_MemberInfo_field",
        onClick: this._onRemove
      }, (0, _languageHandler._t)('Remove from community'))), /*#__PURE__*/_react.default.createElement("h3", null, (0, _languageHandler._t)('Visibility in Room List'), this.state.groupRoomPublicityLoading ? /*#__PURE__*/_react.default.createElement(InlineSpinner, null) : /*#__PURE__*/_react.default.createElement("div", null)), /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("label", null, /*#__PURE__*/_react.default.createElement("input", {
        type: "radio",
        value: "public",
        checked: this.state.groupRoom.isPublic,
        onChange: this._changeGroupRoomPublicity
      }), /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_MemberInfo_label_text"
      }, (0, _languageHandler._t)('Visible to everyone')))), /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("label", null, /*#__PURE__*/_react.default.createElement("input", {
        type: "radio",
        value: "private",
        checked: !this.state.groupRoom.isPublic,
        onChange: this._changeGroupRoomPublicity
      }), /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_MemberInfo_label_text"
      }, (0, _languageHandler._t)('Only visible to community members')))));
    }

    const avatarUrl = this.state.groupRoom.avatarUrl;
    let avatarElement;

    if (avatarUrl) {
      const httpUrl = (0, _Media.mediaFromMxc)(avatarUrl).getSquareThumbnailHttp(800);
      avatarElement = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_MemberInfo_avatar"
      }, /*#__PURE__*/_react.default.createElement("img", {
        src: httpUrl
      }));
    }

    const groupRoomName = this.state.groupRoom.displayname;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_MemberInfo",
      role: "tabpanel"
    }, /*#__PURE__*/_react.default.createElement(_AutoHideScrollbar.default, null, /*#__PURE__*/_react.default.createElement(AccessibleButton, {
      className: "mx_MemberInfo_cancel",
      onClick: this._onCancel
    }, /*#__PURE__*/_react.default.createElement("img", {
      src: require("../../../../res/img/cancel.svg"),
      width: "18",
      height: "18",
      className: "mx_filterFlipColor"
    })), avatarElement, /*#__PURE__*/_react.default.createElement("h2", null, groupRoomName), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_MemberInfo_profile"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_MemberInfo_profileField"
    }, this.state.groupRoom.canonicalAlias)), adminTools));
  }

}, (0, _defineProperty2.default)(_class2, "contextType", _MatrixClientContext.default), (0, _defineProperty2.default)(_class2, "propTypes", {
  groupId: _propTypes.default.string,
  groupRoomId: _propTypes.default.string
}), _temp)) || _class);
exports.default = GroupRoomInfo;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,