"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _event = require("matrix-js-sdk/src/@types/event");

var _languageHandler = require("../../../languageHandler");

var _EventUtils = require("../../../utils/EventUtils");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _ContextMenuTooltipButton = require("../../../accessibility/context_menu/ContextMenuTooltipButton");

var _ContextMenu = _interopRequireWildcard(require("../../structures/ContextMenu"));

var _ReactionPicker = _interopRequireDefault(require("../emojipicker/ReactionPicker"));

var _ReactionsRowButton = _interopRequireDefault(require("./ReactionsRowButton"));

var _MatrixClientContext = _interopRequireDefault(require("../../../contexts/MatrixClientContext"));

var _dec, _class, _class2, _temp;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// The maximum number of reactions to initially show on a message.
const MAX_ITEMS_WHEN_LIMITED = 8;

const ReactButton = ({
  mxEvent,
  reactions
}) => {
  const [menuDisplayed, button, openMenu, closeMenu] = (0, _ContextMenu.useContextMenu)();
  let contextMenu;

  if (menuDisplayed) {
    const buttonRect = button.current.getBoundingClientRect();
    contextMenu = /*#__PURE__*/_react.default.createElement(_ContextMenu.default, (0, _extends2.default)({}, (0, _ContextMenu.aboveLeftOf)(buttonRect), {
      onFinished: closeMenu,
      managed: false
    }), /*#__PURE__*/_react.default.createElement(_ReactionPicker.default, {
      mxEvent: mxEvent,
      reactions: reactions,
      onFinished: closeMenu
    }));
  }

  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_ContextMenuTooltipButton.ContextMenuTooltipButton, {
    className: (0, _classnames.default)("mx_ReactionsRow_addReactionButton", {
      mx_ReactionsRow_addReactionButton_active: menuDisplayed
    }),
    title: (0, _languageHandler._t)("Add reaction"),
    onClick: openMenu,
    onContextMenu: e => {
      e.preventDefault();
      openMenu();
    },
    isExpanded: menuDisplayed,
    inputRef: button
  }), contextMenu);
};

let ReactionsRow = (_dec = (0, _replaceableComponent.replaceableComponent)("views.messages.ReactionsRow"), _dec(_class = (_temp = _class2 = class ReactionsRow extends _react.default.PureComponent {
  constructor(props, context) {
    super(props, context);
    (0, _defineProperty2.default)(this, "onDecrypted", () => {
      // Decryption changes whether the event is actionable
      this.forceUpdate();
    });
    (0, _defineProperty2.default)(this, "onReactionsChange", () => {
      // TODO: Call `onHeightChanged` as needed
      this.setState({
        myReactions: this.getMyReactions()
      }); // Using `forceUpdate` for the moment, since we know the overall set of reactions
      // has changed (this is triggered by events for that purpose only) and
      // `PureComponent`s shallow state / props compare would otherwise filter this out.

      this.forceUpdate();
    });
    (0, _defineProperty2.default)(this, "onShowAllClick", () => {
      this.setState({
        showAll: true
      });
    });
    this.state = {
      myReactions: this.getMyReactions(),
      showAll: false
    };
  }

  componentDidMount() {
    const {
      mxEvent,
      reactions
    } = this.props;

    if (mxEvent.isBeingDecrypted() || mxEvent.shouldAttemptDecryption()) {
      mxEvent.once("Event.decrypted", this.onDecrypted);
    }

    if (reactions) {
      reactions.on("Relations.add", this.onReactionsChange);
      reactions.on("Relations.remove", this.onReactionsChange);
      reactions.on("Relations.redaction", this.onReactionsChange);
    }
  }

  componentWillUnmount() {
    const {
      mxEvent,
      reactions
    } = this.props;
    mxEvent.off("Event.decrypted", this.onDecrypted);

    if (reactions) {
      reactions.off("Relations.add", this.onReactionsChange);
      reactions.off("Relations.remove", this.onReactionsChange);
      reactions.off("Relations.redaction", this.onReactionsChange);
    }
  }

  componentDidUpdate(prevProps) {
    if (prevProps.reactions !== this.props.reactions) {
      this.props.reactions.on("Relations.add", this.onReactionsChange);
      this.props.reactions.on("Relations.remove", this.onReactionsChange);
      this.props.reactions.on("Relations.redaction", this.onReactionsChange);
      this.onReactionsChange();
    }
  }

  getMyReactions() {
    const reactions = this.props.reactions;

    if (!reactions) {
      return null;
    }

    const userId = this.context.getUserId();
    const myReactions = reactions.getAnnotationsBySender()[userId];

    if (!myReactions) {
      return null;
    }

    return [...myReactions.values()];
  }

  render() {
    const {
      mxEvent,
      reactions
    } = this.props;
    const {
      myReactions,
      showAll
    } = this.state;

    if (!reactions || !(0, _EventUtils.isContentActionable)(mxEvent)) {
      return null;
    }

    let items = reactions.getSortedAnnotationsByKey().map(([content, events]) => {
      const count = events.size;

      if (!count) {
        return null;
      }

      const myReactionEvent = myReactions && myReactions.find(mxEvent => {
        if (mxEvent.isRedacted()) {
          return false;
        }

        return mxEvent.getRelation().key === content;
      });
      return /*#__PURE__*/_react.default.createElement(_ReactionsRowButton.default, {
        key: content,
        content: content,
        count: count,
        mxEvent: mxEvent,
        reactionEvents: events,
        myReactionEvent: myReactionEvent
      });
    }).filter(item => !!item);
    if (!items.length) return null; // Show the first MAX_ITEMS if there are MAX_ITEMS + 1 or more items.
    // The "+ 1" ensure that the "show all" reveals something that takes up
    // more space than the button itself.

    let showAllButton;

    if (items.length > MAX_ITEMS_WHEN_LIMITED + 1 && !showAll) {
      items = items.slice(0, MAX_ITEMS_WHEN_LIMITED);
      showAllButton = /*#__PURE__*/_react.default.createElement("a", {
        className: "mx_ReactionsRow_showAll",
        href: "#",
        onClick: this.onShowAllClick
      }, (0, _languageHandler._t)("Show all"));
    }

    const cli = this.context;
    let addReactionButton;
    const room = cli.getRoom(mxEvent.getRoomId());

    if (room.getMyMembership() === "join" && room.currentState.maySendEvent(_event.EventType.Reaction, cli.getUserId())) {
      addReactionButton = /*#__PURE__*/_react.default.createElement(ReactButton, {
        mxEvent: mxEvent,
        reactions: reactions
      });
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_ReactionsRow",
      role: "toolbar",
      "aria-label": (0, _languageHandler._t)("Reactions")
    }, items, showAllButton, addReactionButton);
  }

}, (0, _defineProperty2.default)(_class2, "contextType", _MatrixClientContext.default), _temp)) || _class);
exports.default = ReactionsRow;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,