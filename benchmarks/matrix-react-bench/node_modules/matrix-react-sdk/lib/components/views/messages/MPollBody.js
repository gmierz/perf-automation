"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UserVote = void 0;
exports.allVotes = allVotes;
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _languageHandler = require("../../../languageHandler");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _Modal = _interopRequireDefault(require("../../../Modal"));

var _consts = require("../../../polls/consts");

var _StyledRadioButton = _interopRequireDefault(require("../elements/StyledRadioButton"));

var _MatrixClientContext = _interopRequireDefault(require("../../../contexts/MatrixClientContext"));

var _ErrorDialog = _interopRequireDefault(require("../dialogs/ErrorDialog"));

var _dec, _class, _class2, _temp;

// TODO: [andyb] Use extensible events library when ready
const TEXT_NODE_TYPE = "org.matrix.msc1767.text";
let MPollBody = (_dec = (0, _replaceableComponent.replaceableComponent)("views.messages.MPollBody"), _dec(_class = (_temp = _class2 = class MPollBody extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "context", void 0);
    (0, _defineProperty2.default)(this, "onPollRelationsCreated", (relationType, eventType) => {
      if (relationType === "m.reference" && _consts.POLL_RESPONSE_EVENT_TYPE.matches(eventType)) {
        this.props.mxEvent.removeListener("Event.relationsCreated", this.onPollRelationsCreated);
        const newPollRelations = this.fetchPollRelations();
        this.addListeners(newPollRelations);
        this.removeListeners(this.state.pollRelations);
        this.setState({
          pollRelations: newPollRelations
        });
      }
    });
    (0, _defineProperty2.default)(this, "onRelationsChange", () => {
      // We hold pollRelations in our state, and it has changed under us
      this.forceUpdate();
    });
    (0, _defineProperty2.default)(this, "onOptionSelected", e => {
      this.selectOption(e.currentTarget.value);
    });
    this.state = {
      selected: null,
      pollRelations: this.fetchPollRelations()
    };
    this.addListeners(this.state.pollRelations);
    this.props.mxEvent.on("Event.relationsCreated", this.onPollRelationsCreated);
  }

  componentWillUnmount() {
    this.props.mxEvent.off("Event.relationsCreated", this.onPollRelationsCreated);
    this.removeListeners(this.state.pollRelations);
  }

  addListeners(pollRelations) {
    if (pollRelations) {
      pollRelations.on("Relations.add", this.onRelationsChange);
      pollRelations.on("Relations.remove", this.onRelationsChange);
      pollRelations.on("Relations.redaction", this.onRelationsChange);
    }
  }

  removeListeners(pollRelations) {
    if (pollRelations) {
      pollRelations.off("Relations.add", this.onRelationsChange);
      pollRelations.off("Relations.remove", this.onRelationsChange);
      pollRelations.off("Relations.redaction", this.onRelationsChange);
    }
  }

  selectOption(answerId) {
    if (answerId === this.state.selected) {
      return;
    }

    const responseContent = {
      [_consts.POLL_RESPONSE_EVENT_TYPE.name]: {
        "answers": [answerId]
      },
      "m.relates_to": {
        "event_id": this.props.mxEvent.getId(),
        "rel_type": "m.reference"
      }
    };
    this.context.sendEvent(this.props.mxEvent.getRoomId(), _consts.POLL_RESPONSE_EVENT_TYPE.name, responseContent).catch(e => {
      console.error("Failed to submit poll response event:", e);

      _Modal.default.createTrackedDialog('Vote not registered', '', _ErrorDialog.default, {
        title: (0, _languageHandler._t)("Vote not registered"),
        description: (0, _languageHandler._t)("Sorry, your vote was not registered. Please try again.")
      });
    });
    this.setState({
      selected: answerId
    });
  }

  fetchPollRelations() {
    if (this.props.getRelationsForEvent) {
      return this.props.getRelationsForEvent(this.props.mxEvent.getId(), "m.reference", _consts.POLL_RESPONSE_EVENT_TYPE.name);
    } else {
      return null;
    }
  }
  /**
   * @returns userId -> UserVote
   */


  collectUserVotes() {
    return collectUserVotes(allVotes(this.state.pollRelations), this.context.getUserId(), this.state.selected);
  }

  totalVotes(collectedVotes) {
    let sum = 0;

    for (const v of collectedVotes.values()) {
      sum += v;
    }

    return sum;
  }

  render() {
    var _userVotes$get;

    const pollStart = this.props.mxEvent.getContent();
    const pollInfo = pollStart[_consts.POLL_START_EVENT_TYPE.name];

    if (pollInfo.answers.length < 1 || pollInfo.answers.length > 20) {
      return null;
    }

    const pollId = this.props.mxEvent.getId();
    const userVotes = this.collectUserVotes();
    const votes = countVotes(userVotes, this.props.mxEvent.getContent());
    const totalVotes = this.totalVotes(votes);
    const userId = this.context.getUserId();
    const myVote = (_userVotes$get = userVotes.get(userId)) === null || _userVotes$get === void 0 ? void 0 : _userVotes$get.answers[0];
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_MPollBody"
    }, /*#__PURE__*/_react.default.createElement("h2", null, pollInfo.question[TEXT_NODE_TYPE]), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_MPollBody_allOptions"
    }, pollInfo.answers.map(answer => {
      const checked = myVote === answer.id;
      const classNames = `mx_MPollBody_option${checked ? " mx_MPollBody_option_checked" : ""}`;
      const answerVotes = votes.get(answer.id) ?? 0;
      const answerPercent = Math.round(100.0 * answerVotes / totalVotes);
      return /*#__PURE__*/_react.default.createElement("div", {
        key: answer.id,
        className: classNames,
        onClick: () => this.selectOption(answer.id)
      }, /*#__PURE__*/_react.default.createElement(_StyledRadioButton.default, {
        name: `poll_answer_select-${pollId}`,
        value: answer.id,
        checked: checked,
        onChange: this.onOptionSelected
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_MPollBody_optionDescription"
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_MPollBody_optionText"
      }, answer[TEXT_NODE_TYPE]), /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_MPollBody_optionVoteCount"
      }, (0, _languageHandler._t)("%(count)s votes", {
        count: answerVotes
      })))), /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_MPollBody_popularityBackground"
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_MPollBody_popularityAmount",
        style: {
          "width": `${answerPercent}%`
        }
      })));
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_MPollBody_totalVotes"
    }, (0, _languageHandler._t)("Based on %(count)s votes", {
      count: totalVotes
    })));
  }

}, (0, _defineProperty2.default)(_class2, "contextType", _MatrixClientContext.default), _temp)) || _class);
exports.default = MPollBody;

class UserVote {
  constructor(ts, sender, answers) {
    this.ts = ts;
    this.sender = sender;
    this.answers = answers;
  }

}

exports.UserVote = UserVote;

function userResponseFromPollResponseEvent(event) {
  const pr = event.getContent();
  const answers = pr[_consts.POLL_RESPONSE_EVENT_TYPE.name].answers;
  return new UserVote(event.getTs(), event.getSender(), answers);
}

function allVotes(pollRelations) {
  function isPollResponse(responseEvent) {
    return responseEvent.getType() === _consts.POLL_RESPONSE_EVENT_TYPE.name && responseEvent.getContent().hasOwnProperty(_consts.POLL_RESPONSE_EVENT_TYPE.name);
  }

  if (pollRelations) {
    return pollRelations.getRelations().filter(isPollResponse).map(userResponseFromPollResponseEvent);
  } else {
    return [];
  }
}
/**
 * Figure out the correct vote for each user.
 * @returns a Map of user ID to their vote info
 */


function collectUserVotes(userResponses, userId, selected) {
  const userVotes = new Map();

  for (const response of userResponses) {
    const otherResponse = userVotes.get(response.sender);

    if (!otherResponse || otherResponse.ts < response.ts) {
      userVotes.set(response.sender, response);
    }
  }

  if (selected) {
    userVotes.set(userId, new UserVote(0, userId, [selected]));
  }

  return userVotes;
}

function countVotes(userVotes, pollStart) {
  const collected = new Map();
  const pollInfo = pollStart[_consts.POLL_START_EVENT_TYPE.name];
  const maxSelections = 1; // See MSC3381 - later this will be in pollInfo

  const allowedAnswerIds = pollInfo.answers.map(ans => ans.id);

  function isValidAnswer(answerId) {
    return allowedAnswerIds.includes(answerId);
  }

  for (const response of userVotes.values()) {
    if (response.answers.every(isValidAnswer)) {
      for (const [index, answerId] of response.answers.entries()) {
        if (index >= maxSelections) {
          break;
        }

        if (collected.has(answerId)) {
          collected.set(answerId, collected.get(answerId) + 1);
        } else {
          collected.set(answerId, 1);
        }
      }
    }
  }

  return collected;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,