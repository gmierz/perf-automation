"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var HtmlUtils = _interopRequireWildcard(require("../../../HtmlUtils"));

var _MessageDiffUtils = require("../../../utils/MessageDiffUtils");

var _DateUtils = require("../../../DateUtils");

var _pillify = require("../../../utils/pillify");

var _languageHandler = require("../../../languageHandler");

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _Modal = _interopRequireDefault(require("../../../Modal"));

var _classnames = _interopRequireDefault(require("classnames"));

var _RedactedBody = _interopRequireDefault(require("./RedactedBody"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

var _ConfirmAndWaitRedactDialog = _interopRequireDefault(require("../dialogs/ConfirmAndWaitRedactDialog"));

var _ViewSource = _interopRequireDefault(require("../../structures/ViewSource"));

var _dec, _class;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function getReplacedContent(event) {
  const originalContent = event.getOriginalContent();
  return originalContent["m.new_content"] || originalContent;
}

let EditHistoryMessage = (_dec = (0, _replaceableComponent.replaceableComponent)("views.messages.EditHistoryMessage"), _dec(_class = class EditHistoryMessage extends _react.default.PureComponent {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "content", /*#__PURE__*/(0, _react.createRef)());
    (0, _defineProperty2.default)(this, "pills", []);
    (0, _defineProperty2.default)(this, "onAssociatedStatusChanged", () => {
      this.setState({
        sendStatus: this.props.mxEvent.getAssociatedStatus()
      });
    });
    (0, _defineProperty2.default)(this, "onRedactClick", async () => {
      const event = this.props.mxEvent;

      const cli = _MatrixClientPeg.MatrixClientPeg.get();

      _Modal.default.createTrackedDialog('Confirm Redact Dialog', 'Edit history', _ConfirmAndWaitRedactDialog.default, {
        redact: () => cli.redactEvent(event.getRoomId(), event.getId())
      }, 'mx_Dialog_confirmredact');
    });
    (0, _defineProperty2.default)(this, "onViewSourceClick", () => {
      _Modal.default.createTrackedDialog('View Event Source', 'Edit history', _ViewSource.default, {
        mxEvent: this.props.mxEvent
      }, 'mx_Dialog_viewsource');
    });

    const _cli = _MatrixClientPeg.MatrixClientPeg.get();

    const {
      userId
    } = _cli.credentials;
    const _event = this.props.mxEvent;

    const room = _cli.getRoom(_event.getRoomId());

    if (_event.localRedactionEvent()) {
      _event.localRedactionEvent().on("status", this.onAssociatedStatusChanged);
    }

    const canRedact = room.currentState.maySendRedactionForEvent(_event, userId);
    this.state = {
      canRedact,
      sendStatus: _event.getAssociatedStatus()
    };
  }

  pillifyLinks() {
    // not present for redacted events
    if (this.content.current) {
      (0, _pillify.pillifyLinks)(this.content.current.children, this.props.mxEvent, this.pills);
    }
  }

  componentDidMount() {
    this.pillifyLinks();
  }

  componentWillUnmount() {
    (0, _pillify.unmountPills)(this.pills);
    const event = this.props.mxEvent;

    if (event.localRedactionEvent()) {
      event.localRedactionEvent().off("status", this.onAssociatedStatusChanged);
    }
  }

  componentDidUpdate() {
    this.pillifyLinks();
  }

  renderActionBar() {
    // hide the button when already redacted
    let redactButton;

    if (!this.props.mxEvent.isRedacted() && !this.props.isBaseEvent && this.state.canRedact) {
      redactButton = /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        onClick: this.onRedactClick
      }, (0, _languageHandler._t)("Remove"));
    }

    const viewSourceButton = /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      onClick: this.onViewSourceClick
    }, (0, _languageHandler._t)("View Source")); // disabled remove button when not allowed


    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_MessageActionBar"
    }, redactButton, viewSourceButton);
  }

  render() {
    const {
      mxEvent
    } = this.props;
    const content = getReplacedContent(mxEvent);
    let contentContainer;

    if (mxEvent.isRedacted()) {
      contentContainer = /*#__PURE__*/_react.default.createElement(_RedactedBody.default, {
        mxEvent: this.props.mxEvent
      });
    } else {
      let contentElements;

      if (this.props.previousEdit) {
        contentElements = (0, _MessageDiffUtils.editBodyDiffToHtml)(getReplacedContent(this.props.previousEdit), content);
      } else {
        contentElements = HtmlUtils.bodyToHtml(content, null, {
          stripReplyFallback: true,
          returnString: false
        });
      }

      if (mxEvent.getContent().msgtype === "m.emote") {
        const name = mxEvent.sender ? mxEvent.sender.name : mxEvent.getSender();
        contentContainer = /*#__PURE__*/_react.default.createElement("div", {
          className: "mx_EventTile_content",
          ref: this.content
        }, "*\xA0", /*#__PURE__*/_react.default.createElement("span", {
          className: "mx_MEmoteBody_sender"
        }, name), "\xA0", contentElements);
      } else {
        contentContainer = /*#__PURE__*/_react.default.createElement("div", {
          className: "mx_EventTile_content",
          ref: this.content
        }, contentElements);
      }
    }

    const timestamp = (0, _DateUtils.formatTime)(new Date(mxEvent.getTs()), this.props.isTwelveHour);
    const isSending = ['sending', 'queued', 'encrypting'].indexOf(this.state.sendStatus) !== -1;
    const classes = (0, _classnames.default)({
      "mx_EventTile": true,
      // Note: we keep the `sending` state class for tests, not for our styles
      "mx_EventTile_sending": isSending
    });
    return /*#__PURE__*/_react.default.createElement("li", null, /*#__PURE__*/_react.default.createElement("div", {
      className: classes
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_EventTile_line"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_MessageTimestamp"
    }, timestamp), contentContainer, this.renderActionBar())));
  }

}) || _class);
exports.default = EditHistoryMessage;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,