"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _event = require("matrix-js-sdk/src/@types/event");

var _Flair = _interopRequireDefault(require("../elements/Flair"));

var _FlairStore = _interopRequireDefault(require("../../../stores/FlairStore"));

var _FormattingUtils = require("../../../utils/FormattingUtils");

var _MatrixClientContext = _interopRequireDefault(require("../../../contexts/MatrixClientContext"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _dec, _class, _class2, _temp;

let SenderProfile = (_dec = (0, _replaceableComponent.replaceableComponent)("views.messages.SenderProfile"), _dec(_class = (_temp = _class2 = class SenderProfile extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "unmounted", false);
    (0, _defineProperty2.default)(this, "onRoomStateEvents", event => {
      if (event.getType() === 'm.room.related_groups' && event.getRoomId() === this.props.mxEvent.getRoomId()) {
        this.updateRelatedGroups();
      }
    });
    const senderId = this.props.mxEvent.getSender();
    this.state = {
      userGroups: _FlairStore.default.cachedPublicisedGroups(senderId) || [],
      relatedGroups: []
    };
  }

  componentDidMount() {
    this.updateRelatedGroups();

    if (this.state.userGroups.length === 0) {
      this.getPublicisedGroups();
    }

    this.context.on('RoomState.events', this.onRoomStateEvents);
  }

  componentWillUnmount() {
    this.unmounted = true;
    this.context.removeListener('RoomState.events', this.onRoomStateEvents);
  }

  async getPublicisedGroups() {
    const userGroups = await _FlairStore.default.getPublicisedGroupsCached(this.context, this.props.mxEvent.getSender());
    if (this.unmounted) return;
    this.setState({
      userGroups
    });
  }

  updateRelatedGroups() {
    const room = this.context.getRoom(this.props.mxEvent.getRoomId());
    if (!room) return;
    const relatedGroupsEvent = room.currentState.getStateEvents('m.room.related_groups', '');
    this.setState({
      relatedGroups: (relatedGroupsEvent === null || relatedGroupsEvent === void 0 ? void 0 : relatedGroupsEvent.getContent().groups) || []
    });
  }

  getDisplayedGroups(userGroups, relatedGroups) {
    let displayedGroups = userGroups || [];

    if (relatedGroups && relatedGroups.length > 0) {
      displayedGroups = relatedGroups.filter(groupId => {
        return displayedGroups.includes(groupId);
      });
    } else {
      displayedGroups = [];
    }

    return displayedGroups;
  }

  render() {
    var _mxEvent$sender, _mxEvent$sender2, _mxEvent$sender3;

    const {
      mxEvent
    } = this.props;
    const colorClass = (0, _FormattingUtils.getUserNameColorClass)(mxEvent.getSender());
    const {
      msgtype
    } = mxEvent.getContent();
    const disambiguate = (_mxEvent$sender = mxEvent.sender) === null || _mxEvent$sender === void 0 ? void 0 : _mxEvent$sender.disambiguate;
    const displayName = ((_mxEvent$sender2 = mxEvent.sender) === null || _mxEvent$sender2 === void 0 ? void 0 : _mxEvent$sender2.rawDisplayName) || mxEvent.getSender() || "";
    const mxid = ((_mxEvent$sender3 = mxEvent.sender) === null || _mxEvent$sender3 === void 0 ? void 0 : _mxEvent$sender3.userId) || mxEvent.getSender() || "";

    if (msgtype === _event.MsgType.Emote) {
      return null; // emote message must include the name so don't duplicate it
    }

    let mxidElement;

    if (disambiguate) {
      mxidElement = /*#__PURE__*/_react.default.createElement("span", {
        className: "mx_SenderProfile_mxid"
      }, mxid);
    }

    let flair;

    if (this.props.enableFlair) {
      const displayedGroups = this.getDisplayedGroups(this.state.userGroups, this.state.relatedGroups);
      flair = /*#__PURE__*/_react.default.createElement(_Flair.default, {
        key: "flair",
        userId: mxEvent.getSender(),
        groups: displayedGroups
      });
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SenderProfile",
      dir: "auto",
      onClick: this.props.onClick
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: `mx_SenderProfile_displayName ${colorClass}`
    }, displayName), mxidElement, flair);
  }

}, (0, _defineProperty2.default)(_class2, "contextType", _MatrixClientContext.default), _temp)) || _class);
exports.default = SenderProfile;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,