"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _languageHandler = require("../../../languageHandler");

var _KeyVerificationStateObserver = require("../../../utils/KeyVerificationStateObserver");

var _EventTileBubble = _interopRequireDefault(require("./EventTileBubble"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _event = require("matrix-js-sdk/src/@types/event");

var _dec, _class;

let MKeyVerificationConclusion = (_dec = (0, _replaceableComponent.replaceableComponent)("views.messages.MKeyVerificationConclusion"), _dec(_class = class MKeyVerificationConclusion extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "onRequestChanged", () => {
      this.forceUpdate();
    });
    (0, _defineProperty2.default)(this, "onTrustChanged", userId => {
      const {
        mxEvent
      } = this.props;
      const request = mxEvent.verificationRequest;

      if (!request || request.otherUserId !== userId) {
        return;
      }

      this.forceUpdate();
    });
  }

  componentDidMount() {
    const request = this.props.mxEvent.verificationRequest;

    if (request) {
      request.on("change", this.onRequestChanged);
    }

    _MatrixClientPeg.MatrixClientPeg.get().on("userTrustStatusChanged", this.onTrustChanged);
  }

  componentWillUnmount() {
    const request = this.props.mxEvent.verificationRequest;

    if (request) {
      request.off("change", this.onRequestChanged);
    }

    const cli = _MatrixClientPeg.MatrixClientPeg.get();

    if (cli) {
      cli.removeListener("userTrustStatusChanged", this.onTrustChanged);
    }
  }

  static shouldRender(mxEvent, request) {
    // normally should not happen
    if (!request) {
      return false;
    } // .cancel event that was sent after the verification finished, ignore


    if (mxEvent.getType() === _event.EventType.KeyVerificationCancel && !request.cancelled) {
      return false;
    } // .done event that was sent after the verification cancelled, ignore


    if (mxEvent.getType() === _event.EventType.KeyVerificationDone && !request.done) {
      return false;
    } // request hasn't concluded yet


    if (request.pending) {
      return false;
    } // User isn't actually verified


    if (!_MatrixClientPeg.MatrixClientPeg.get().checkUserTrust(request.otherUserId).isCrossSigningVerified()) {
      return false;
    }

    return true;
  }

  render() {
    const {
      mxEvent
    } = this.props;
    const request = mxEvent.verificationRequest;

    if (!MKeyVerificationConclusion.shouldRender(mxEvent, request)) {
      return null;
    }

    const client = _MatrixClientPeg.MatrixClientPeg.get();

    const myUserId = client.getUserId();
    let title;

    if (request.done) {
      title = (0, _languageHandler._t)("You verified %(name)s", {
        name: (0, _KeyVerificationStateObserver.getNameForEventRoom)(request.otherUserId, mxEvent.getRoomId())
      });
    } else if (request.cancelled) {
      const userId = request.cancellingUserId;

      if (userId === myUserId) {
        title = (0, _languageHandler._t)("You cancelled verifying %(name)s", {
          name: (0, _KeyVerificationStateObserver.getNameForEventRoom)(request.otherUserId, mxEvent.getRoomId())
        });
      } else {
        title = (0, _languageHandler._t)("%(name)s cancelled verifying", {
          name: (0, _KeyVerificationStateObserver.getNameForEventRoom)(userId, mxEvent.getRoomId())
        });
      }
    }

    if (title) {
      const classes = (0, _classnames.default)("mx_cryptoEvent mx_cryptoEvent_icon", {
        mx_cryptoEvent_icon_verified: request.done
      });
      return /*#__PURE__*/_react.default.createElement(_EventTileBubble.default, {
        className: classes,
        title: title,
        subtitle: (0, _KeyVerificationStateObserver.userLabelForEventRoom)(request.otherUserId, mxEvent.getRoomId())
      });
    }

    return null;
  }

}) || _class);
exports.default = MKeyVerificationConclusion;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,