"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _RovingTabIndex = require("../../../accessibility/RovingTabIndex");

var _Spinner = _interopRequireDefault(require("../elements/Spinner"));

var _classnames = _interopRequireDefault(require("classnames"));

var _languageHandler = require("../../../languageHandler");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _FileDownloader = require("../../../utils/FileDownloader");

var _dec, _class;

let DownloadActionButton = (_dec = (0, _replaceableComponent.replaceableComponent)("views.messages.DownloadActionButton"), _dec(_class = class DownloadActionButton extends _react.default.PureComponent {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "downloader", new _FileDownloader.FileDownloader());
    (0, _defineProperty2.default)(this, "onDownloadClick", async () => {
      if (this.state.loading) return;

      if (this.props.mediaEventHelperGet().media.isEncrypted) {
        this.setState({
          tooltip: (0, _languageHandler._td)("Decrypting")
        });
      }

      this.setState({
        loading: true
      });

      if (this.state.blob) {
        // Cheat and trigger a download, again.
        return this.doDownload();
      }

      const blob = await this.props.mediaEventHelperGet().sourceBlob.value;
      this.setState({
        blob
      });
      await this.doDownload();
    });
    this.state = {
      loading: false,
      tooltip: (0, _languageHandler._td)("Downloading")
    };
  }

  async doDownload() {
    await this.downloader.download({
      blob: this.state.blob,
      name: this.props.mediaEventHelperGet().fileName
    });
    this.setState({
      loading: false
    });
  }

  render() {
    let spinner;

    if (this.state.loading) {
      spinner = /*#__PURE__*/_react.default.createElement(_Spinner.default, {
        w: 18,
        h: 18
      });
    }

    const classes = (0, _classnames.default)({
      'mx_MessageActionBar_maskButton': true,
      'mx_MessageActionBar_downloadButton': true,
      'mx_MessageActionBar_downloadSpinnerButton': !!spinner
    });
    return /*#__PURE__*/_react.default.createElement(_RovingTabIndex.RovingAccessibleTooltipButton, {
      className: classes,
      title: spinner ? (0, _languageHandler._t)(this.state.tooltip) : (0, _languageHandler._t)("Download"),
      onClick: this.onDownloadClick,
      disabled: !!spinner
    }, spinner);
  }

}) || _class);
exports.default = DownloadActionButton;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL21lc3NhZ2VzL0Rvd25sb2FkQWN0aW9uQnV0dG9uLnRzeCJdLCJuYW1lcyI6WyJEb3dubG9hZEFjdGlvbkJ1dHRvbiIsIlJlYWN0IiwiUHVyZUNvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwicHJvcHMiLCJGaWxlRG93bmxvYWRlciIsInN0YXRlIiwibG9hZGluZyIsIm1lZGlhRXZlbnRIZWxwZXJHZXQiLCJtZWRpYSIsImlzRW5jcnlwdGVkIiwic2V0U3RhdGUiLCJ0b29sdGlwIiwiYmxvYiIsImRvRG93bmxvYWQiLCJzb3VyY2VCbG9iIiwidmFsdWUiLCJkb3dubG9hZGVyIiwiZG93bmxvYWQiLCJuYW1lIiwiZmlsZU5hbWUiLCJyZW5kZXIiLCJzcGlubmVyIiwiY2xhc3NlcyIsIm9uRG93bmxvYWRDbGljayJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFrQkE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7SUFrQnFCQSxvQixXQURwQixnREFBcUIscUNBQXJCLEMsZ0JBQUQsTUFDcUJBLG9CQURyQixTQUNrREMsZUFBTUMsYUFEeEQsQ0FDc0Y7QUFHM0VDLEVBQUFBLFdBQVcsQ0FBQ0MsS0FBRCxFQUFnQjtBQUM5QixVQUFNQSxLQUFOO0FBRDhCLHNEQUZiLElBQUlDLDhCQUFKLEVBRWE7QUFBQSwyREFTUixZQUFZO0FBQ2xDLFVBQUksS0FBS0MsS0FBTCxDQUFXQyxPQUFmLEVBQXdCOztBQUV4QixVQUFJLEtBQUtILEtBQUwsQ0FBV0ksbUJBQVgsR0FBaUNDLEtBQWpDLENBQXVDQyxXQUEzQyxFQUF3RDtBQUNwRCxhQUFLQyxRQUFMLENBQWM7QUFBRUMsVUFBQUEsT0FBTyxFQUFFLDBCQUFJLFlBQUo7QUFBWCxTQUFkO0FBQ0g7O0FBRUQsV0FBS0QsUUFBTCxDQUFjO0FBQUVKLFFBQUFBLE9BQU8sRUFBRTtBQUFYLE9BQWQ7O0FBRUEsVUFBSSxLQUFLRCxLQUFMLENBQVdPLElBQWYsRUFBcUI7QUFDakI7QUFDQSxlQUFPLEtBQUtDLFVBQUwsRUFBUDtBQUNIOztBQUVELFlBQU1ELElBQUksR0FBRyxNQUFNLEtBQUtULEtBQUwsQ0FBV0ksbUJBQVgsR0FBaUNPLFVBQWpDLENBQTRDQyxLQUEvRDtBQUNBLFdBQUtMLFFBQUwsQ0FBYztBQUFFRSxRQUFBQTtBQUFGLE9BQWQ7QUFDQSxZQUFNLEtBQUtDLFVBQUwsRUFBTjtBQUNILEtBMUJpQztBQUc5QixTQUFLUixLQUFMLEdBQWE7QUFDVEMsTUFBQUEsT0FBTyxFQUFFLEtBREE7QUFFVEssTUFBQUEsT0FBTyxFQUFFLDBCQUFJLGFBQUo7QUFGQSxLQUFiO0FBSUg7O0FBcUJ1QixRQUFWRSxVQUFVLEdBQUc7QUFDdkIsVUFBTSxLQUFLRyxVQUFMLENBQWdCQyxRQUFoQixDQUF5QjtBQUMzQkwsTUFBQUEsSUFBSSxFQUFFLEtBQUtQLEtBQUwsQ0FBV08sSUFEVTtBQUUzQk0sTUFBQUEsSUFBSSxFQUFFLEtBQUtmLEtBQUwsQ0FBV0ksbUJBQVgsR0FBaUNZO0FBRlosS0FBekIsQ0FBTjtBQUlBLFNBQUtULFFBQUwsQ0FBYztBQUFFSixNQUFBQSxPQUFPLEVBQUU7QUFBWCxLQUFkO0FBQ0g7O0FBRU1jLEVBQUFBLE1BQU0sR0FBRztBQUNaLFFBQUlDLE9BQUo7O0FBQ0EsUUFBSSxLQUFLaEIsS0FBTCxDQUFXQyxPQUFmLEVBQXdCO0FBQ3BCZSxNQUFBQSxPQUFPLGdCQUFHLDZCQUFDLGdCQUFEO0FBQVMsUUFBQSxDQUFDLEVBQUUsRUFBWjtBQUFnQixRQUFBLENBQUMsRUFBRTtBQUFuQixRQUFWO0FBQ0g7O0FBRUQsVUFBTUMsT0FBTyxHQUFHLHlCQUFXO0FBQ3ZCLHdDQUFrQyxJQURYO0FBRXZCLDRDQUFzQyxJQUZmO0FBR3ZCLG1EQUE2QyxDQUFDLENBQUNEO0FBSHhCLEtBQVgsQ0FBaEI7QUFNQSx3QkFBTyw2QkFBQyw2Q0FBRDtBQUNILE1BQUEsU0FBUyxFQUFFQyxPQURSO0FBRUgsTUFBQSxLQUFLLEVBQUVELE9BQU8sR0FBRyx5QkFBRyxLQUFLaEIsS0FBTCxDQUFXTSxPQUFkLENBQUgsR0FBNEIseUJBQUcsVUFBSCxDQUZ2QztBQUdILE1BQUEsT0FBTyxFQUFFLEtBQUtZLGVBSFg7QUFJSCxNQUFBLFFBQVEsRUFBRSxDQUFDLENBQUNGO0FBSlQsT0FNREEsT0FOQyxDQUFQO0FBUUg7O0FBM0RpRixDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbkNvcHlyaWdodCAyMDIxIFRoZSBNYXRyaXgub3JnIEZvdW5kYXRpb24gQy5JLkMuXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuaW1wb3J0IHsgTWF0cml4RXZlbnQgfSBmcm9tIFwibWF0cml4LWpzLXNkay9zcmNcIjtcbmltcG9ydCB7IE1lZGlhRXZlbnRIZWxwZXIgfSBmcm9tIFwiLi4vLi4vLi4vdXRpbHMvTWVkaWFFdmVudEhlbHBlclwiO1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgUm92aW5nQWNjZXNzaWJsZVRvb2x0aXBCdXR0b24gfSBmcm9tIFwiLi4vLi4vLi4vYWNjZXNzaWJpbGl0eS9Sb3ZpbmdUYWJJbmRleFwiO1xuaW1wb3J0IFNwaW5uZXIgZnJvbSBcIi4uL2VsZW1lbnRzL1NwaW5uZXJcIjtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gXCJjbGFzc25hbWVzXCI7XG5pbXBvcnQgeyBfdCwgX3RkIH0gZnJvbSBcIi4uLy4uLy4uL2xhbmd1YWdlSGFuZGxlclwiO1xuaW1wb3J0IHsgcmVwbGFjZWFibGVDb21wb25lbnQgfSBmcm9tIFwiLi4vLi4vLi4vdXRpbHMvcmVwbGFjZWFibGVDb21wb25lbnRcIjtcbmltcG9ydCB7IEZpbGVEb3dubG9hZGVyIH0gZnJvbSBcIi4uLy4uLy4uL3V0aWxzL0ZpbGVEb3dubG9hZGVyXCI7XG5cbmludGVyZmFjZSBJUHJvcHMge1xuICAgIG14RXZlbnQ6IE1hdHJpeEV2ZW50O1xuXG4gICAgLy8gWFhYOiBJdCBjYW4gdGFrZSBhIGN5Y2xlIG9yIHR3byBmb3IgdGhlIE1lc3NhZ2VBY3Rpb25CYXIgdG8gaGF2ZSBhbGwgdGhlIHByb3BzL3NldHVwXG4gICAgLy8gcmVxdWlyZWQgdG8gZ2V0IHVzIGEgTWVkaWFFdmVudEhlbHBlciwgc28gd2UgdXNlIGEgZ2V0dGVyIGZ1bmN0aW9uIGluc3RlYWQgdG8gcHJvZCBmb3JcbiAgICAvLyBvbmUuXG4gICAgbWVkaWFFdmVudEhlbHBlckdldDogKCkgPT4gTWVkaWFFdmVudEhlbHBlcjtcbn1cblxuaW50ZXJmYWNlIElTdGF0ZSB7XG4gICAgbG9hZGluZzogYm9vbGVhbjtcbiAgICBibG9iPzogQmxvYjtcbiAgICB0b29sdGlwOiBzdHJpbmc7XG59XG5cbkByZXBsYWNlYWJsZUNvbXBvbmVudChcInZpZXdzLm1lc3NhZ2VzLkRvd25sb2FkQWN0aW9uQnV0dG9uXCIpXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEb3dubG9hZEFjdGlvbkJ1dHRvbiBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQ8SVByb3BzLCBJU3RhdGU+IHtcbiAgICBwcml2YXRlIGRvd25sb2FkZXIgPSBuZXcgRmlsZURvd25sb2FkZXIoKTtcblxuICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcihwcm9wczogSVByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcblxuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgbG9hZGluZzogZmFsc2UsXG4gICAgICAgICAgICB0b29sdGlwOiBfdGQoXCJEb3dubG9hZGluZ1wiKSxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG9uRG93bmxvYWRDbGljayA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUubG9hZGluZykgcmV0dXJuO1xuXG4gICAgICAgIGlmICh0aGlzLnByb3BzLm1lZGlhRXZlbnRIZWxwZXJHZXQoKS5tZWRpYS5pc0VuY3J5cHRlZCkge1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHRvb2x0aXA6IF90ZChcIkRlY3J5cHRpbmdcIikgfSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNldFN0YXRlKHsgbG9hZGluZzogdHJ1ZSB9KTtcblxuICAgICAgICBpZiAodGhpcy5zdGF0ZS5ibG9iKSB7XG4gICAgICAgICAgICAvLyBDaGVhdCBhbmQgdHJpZ2dlciBhIGRvd25sb2FkLCBhZ2Fpbi5cbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRvRG93bmxvYWQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGJsb2IgPSBhd2FpdCB0aGlzLnByb3BzLm1lZGlhRXZlbnRIZWxwZXJHZXQoKS5zb3VyY2VCbG9iLnZhbHVlO1xuICAgICAgICB0aGlzLnNldFN0YXRlKHsgYmxvYiB9KTtcbiAgICAgICAgYXdhaXQgdGhpcy5kb0Rvd25sb2FkKCk7XG4gICAgfTtcblxuICAgIHByaXZhdGUgYXN5bmMgZG9Eb3dubG9hZCgpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5kb3dubG9hZGVyLmRvd25sb2FkKHtcbiAgICAgICAgICAgIGJsb2I6IHRoaXMuc3RhdGUuYmxvYixcbiAgICAgICAgICAgIG5hbWU6IHRoaXMucHJvcHMubWVkaWFFdmVudEhlbHBlckdldCgpLmZpbGVOYW1lLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGxvYWRpbmc6IGZhbHNlIH0pO1xuICAgIH1cblxuICAgIHB1YmxpYyByZW5kZXIoKSB7XG4gICAgICAgIGxldCBzcGlubmVyOiBKU1guRWxlbWVudDtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUubG9hZGluZykge1xuICAgICAgICAgICAgc3Bpbm5lciA9IDxTcGlubmVyIHc9ezE4fSBoPXsxOH0gLz47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBjbGFzc2VzID0gY2xhc3NOYW1lcyh7XG4gICAgICAgICAgICAnbXhfTWVzc2FnZUFjdGlvbkJhcl9tYXNrQnV0dG9uJzogdHJ1ZSxcbiAgICAgICAgICAgICdteF9NZXNzYWdlQWN0aW9uQmFyX2Rvd25sb2FkQnV0dG9uJzogdHJ1ZSxcbiAgICAgICAgICAgICdteF9NZXNzYWdlQWN0aW9uQmFyX2Rvd25sb2FkU3Bpbm5lckJ1dHRvbic6ICEhc3Bpbm5lcixcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIDxSb3ZpbmdBY2Nlc3NpYmxlVG9vbHRpcEJ1dHRvblxuICAgICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc2VzfVxuICAgICAgICAgICAgdGl0bGU9e3NwaW5uZXIgPyBfdCh0aGlzLnN0YXRlLnRvb2x0aXApIDogX3QoXCJEb3dubG9hZFwiKX1cbiAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMub25Eb3dubG9hZENsaWNrfVxuICAgICAgICAgICAgZGlzYWJsZWQ9eyEhc3Bpbm5lcn1cbiAgICAgICAgPlxuICAgICAgICAgICAgeyBzcGlubmVyIH1cbiAgICAgICAgPC9Sb3ZpbmdBY2Nlc3NpYmxlVG9vbHRpcEJ1dHRvbj47XG4gICAgfVxufVxuIl19