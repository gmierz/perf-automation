"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _languageHandler = require("../../../languageHandler");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _dec, _class;

let MjolnirBody = (_dec = (0, _replaceableComponent.replaceableComponent)("views.messages.MjolnirBody"), _dec(_class = class MjolnirBody extends _react.default.Component {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "onAllowClick", e => {
      e.preventDefault();
      e.stopPropagation();
      const key = `mx_mjolnir_render_${this.props.mxEvent.getRoomId()}__${this.props.mxEvent.getId()}`;
      localStorage.setItem(key, "true");
      this.props.onMessageAllowed();
    });
  }

  render() {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_MjolnirBody"
    }, /*#__PURE__*/_react.default.createElement("i", null, (0, _languageHandler._t)("You have ignored this user, so their message is hidden. <a>Show anyways.</a>", {}, {
      a: sub => /*#__PURE__*/_react.default.createElement("a", {
        href: "#",
        onClick: this.onAllowClick
      }, sub)
    })));
  }

}) || _class);
exports.default = MjolnirBody;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL21lc3NhZ2VzL01qb2xuaXJCb2R5LnRzeCJdLCJuYW1lcyI6WyJNam9sbmlyQm9keSIsIlJlYWN0IiwiQ29tcG9uZW50IiwiZSIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwia2V5IiwicHJvcHMiLCJteEV2ZW50IiwiZ2V0Um9vbUlkIiwiZ2V0SWQiLCJsb2NhbFN0b3JhZ2UiLCJzZXRJdGVtIiwib25NZXNzYWdlQWxsb3dlZCIsInJlbmRlciIsImEiLCJzdWIiLCJvbkFsbG93Q2xpY2siXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBZ0JBOztBQUNBOztBQUNBOzs7O0lBU3FCQSxXLFdBRHBCLGdEQUFxQiw0QkFBckIsQyxnQkFBRCxNQUNxQkEsV0FEckIsU0FDeUNDLGVBQU1DLFNBRC9DLENBQ2lFO0FBQUE7QUFBQTtBQUFBLHdEQUNyQ0MsQ0FBRCxJQUErQjtBQUNsREEsTUFBQUEsQ0FBQyxDQUFDQyxjQUFGO0FBQ0FELE1BQUFBLENBQUMsQ0FBQ0UsZUFBRjtBQUVBLFlBQU1DLEdBQUcsR0FBSSxxQkFBb0IsS0FBS0MsS0FBTCxDQUFXQyxPQUFYLENBQW1CQyxTQUFuQixFQUErQixLQUFJLEtBQUtGLEtBQUwsQ0FBV0MsT0FBWCxDQUFtQkUsS0FBbkIsRUFBMkIsRUFBL0Y7QUFDQUMsTUFBQUEsWUFBWSxDQUFDQyxPQUFiLENBQXFCTixHQUFyQixFQUEwQixNQUExQjtBQUNBLFdBQUtDLEtBQUwsQ0FBV00sZ0JBQVg7QUFDSCxLQVI0RDtBQUFBOztBQVV0REMsRUFBQUEsTUFBTSxHQUFnQjtBQUN6Qix3QkFDSTtBQUFLLE1BQUEsU0FBUyxFQUFDO0FBQWYsb0JBQWdDLHdDQUFLLHlCQUNqQyw4RUFEaUMsRUFFakMsRUFGaUMsRUFFN0I7QUFBRUMsTUFBQUEsQ0FBQyxFQUFHQyxHQUFELGlCQUFTO0FBQUcsUUFBQSxJQUFJLEVBQUMsR0FBUjtBQUFZLFFBQUEsT0FBTyxFQUFFLEtBQUtDO0FBQTFCLFNBQTBDRCxHQUExQztBQUFkLEtBRjZCLENBQUwsQ0FBaEMsQ0FESjtBQU1IOztBQWpCNEQsQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5Db3B5cmlnaHQgMjAxOSBUaGUgTWF0cml4Lm9yZyBGb3VuZGF0aW9uIEMuSS5DLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBfdCB9IGZyb20gJy4uLy4uLy4uL2xhbmd1YWdlSGFuZGxlcic7XG5pbXBvcnQgeyByZXBsYWNlYWJsZUNvbXBvbmVudCB9IGZyb20gXCIuLi8uLi8uLi91dGlscy9yZXBsYWNlYWJsZUNvbXBvbmVudFwiO1xuaW1wb3J0IHsgTWF0cml4RXZlbnQgfSBmcm9tIFwibWF0cml4LWpzLXNkay9zcmMvbW9kZWxzL2V2ZW50XCI7XG5cbmludGVyZmFjZSBJUHJvcHMge1xuICAgIG14RXZlbnQ6IE1hdHJpeEV2ZW50O1xuICAgIG9uTWVzc2FnZUFsbG93ZWQ6ICgpID0+IHZvaWQ7XG59XG5cbkByZXBsYWNlYWJsZUNvbXBvbmVudChcInZpZXdzLm1lc3NhZ2VzLk1qb2xuaXJCb2R5XCIpXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNam9sbmlyQm9keSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxJUHJvcHM+IHtcbiAgICBwcml2YXRlIG9uQWxsb3dDbGljayA9IChlOiBSZWFjdC5Nb3VzZUV2ZW50KTogdm9pZCA9PiB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICAgICBjb25zdCBrZXkgPSBgbXhfbWpvbG5pcl9yZW5kZXJfJHt0aGlzLnByb3BzLm14RXZlbnQuZ2V0Um9vbUlkKCl9X18ke3RoaXMucHJvcHMubXhFdmVudC5nZXRJZCgpfWA7XG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKGtleSwgXCJ0cnVlXCIpO1xuICAgICAgICB0aGlzLnByb3BzLm9uTWVzc2FnZUFsbG93ZWQoKTtcbiAgICB9O1xuXG4gICAgcHVibGljIHJlbmRlcigpOiBKU1guRWxlbWVudCB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nbXhfTWpvbG5pckJvZHknPjxpPnsgX3QoXG4gICAgICAgICAgICAgICAgXCJZb3UgaGF2ZSBpZ25vcmVkIHRoaXMgdXNlciwgc28gdGhlaXIgbWVzc2FnZSBpcyBoaWRkZW4uIDxhPlNob3cgYW55d2F5cy48L2E+XCIsXG4gICAgICAgICAgICAgICAge30sIHsgYTogKHN1YikgPT4gPGEgaHJlZj1cIiNcIiBvbkNsaWNrPXt0aGlzLm9uQWxsb3dDbGlja30+eyBzdWIgfTwvYT4gfSxcbiAgICAgICAgICAgICkgfTwvaT48L2Rpdj5cbiAgICAgICAgKTtcbiAgICB9XG59XG4iXX0=