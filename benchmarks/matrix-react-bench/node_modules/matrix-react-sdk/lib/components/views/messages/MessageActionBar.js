"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireWildcard(require("react"));

var _event = require("matrix-js-sdk/src/models/event");

var _languageHandler = require("../../../languageHandler");

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _actions = require("../../../dispatcher/actions");

var _ContextMenu = _interopRequireWildcard(require("../../structures/ContextMenu"));

var _EventUtils = require("../../../utils/EventUtils");

var _RoomContext = _interopRequireWildcard(require("../../../contexts/RoomContext"));

var _Toolbar = _interopRequireDefault(require("../../../accessibility/Toolbar"));

var _RovingTabIndex = require("../../../accessibility/RovingTabIndex");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _MessageContextMenu = _interopRequireWildcard(require("../context_menus/MessageContextMenu"));

var _Resend = _interopRequireDefault(require("../../../Resend"));

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _MediaEventHelper = require("../../../utils/MediaEventHelper");

var _DownloadActionButton = _interopRequireDefault(require("./DownloadActionButton"));

var _classnames = _interopRequireDefault(require("classnames"));

var _SettingsStore = _interopRequireDefault(require("../../../settings/SettingsStore"));

var _ReplyChain = _interopRequireDefault(require("../elements/ReplyChain"));

var _threads = require("../../../dispatcher/dispatch-actions/threads");

var _ReactionPicker = _interopRequireDefault(require("../emojipicker/ReactionPicker"));

var _event2 = require("matrix-js-sdk/src/@types/event");

var _dec, _class, _class2, _temp;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const OptionsButton = ({
  mxEvent,
  getTile,
  getReplyChain,
  permalinkCreator,
  onFocusChange
}) => {
  const [menuDisplayed, button, openMenu, closeMenu] = (0, _ContextMenu.useContextMenu)();
  const [onFocus, isActive, ref] = (0, _RovingTabIndex.useRovingTabIndex)(button);
  (0, _react.useEffect)(() => {
    onFocusChange(menuDisplayed);
  }, [onFocusChange, menuDisplayed]);
  let contextMenu;

  if (menuDisplayed) {
    const tile = getTile && getTile();
    const replyChain = getReplyChain && getReplyChain();
    const buttonRect = button.current.getBoundingClientRect();
    contextMenu = /*#__PURE__*/_react.default.createElement(_MessageContextMenu.default, (0, _extends2.default)({}, (0, _ContextMenu.aboveLeftOf)(buttonRect), {
      mxEvent: mxEvent,
      permalinkCreator: permalinkCreator,
      eventTileOps: tile && tile.getEventTileOps ? tile.getEventTileOps() : undefined,
      collapseReplyChain: replyChain && replyChain.canCollapse() ? replyChain.collapse : undefined,
      onFinished: closeMenu
    }));
  }

  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_ContextMenu.ContextMenuTooltipButton, {
    className: "mx_MessageActionBar_maskButton mx_MessageActionBar_optionsButton",
    title: (0, _languageHandler._t)("Options"),
    onClick: openMenu,
    isExpanded: menuDisplayed,
    inputRef: ref,
    onFocus: onFocus,
    tabIndex: isActive ? 0 : -1
  }), contextMenu);
};

const ReactButton = ({
  mxEvent,
  reactions,
  onFocusChange
}) => {
  const [menuDisplayed, button, openMenu, closeMenu] = (0, _ContextMenu.useContextMenu)();
  const [onFocus, isActive, ref] = (0, _RovingTabIndex.useRovingTabIndex)(button);
  (0, _react.useEffect)(() => {
    onFocusChange(menuDisplayed);
  }, [onFocusChange, menuDisplayed]);
  let contextMenu;

  if (menuDisplayed) {
    const buttonRect = button.current.getBoundingClientRect();
    contextMenu = /*#__PURE__*/_react.default.createElement(_ContextMenu.default, (0, _extends2.default)({}, (0, _ContextMenu.aboveLeftOf)(buttonRect), {
      onFinished: closeMenu,
      managed: false
    }), /*#__PURE__*/_react.default.createElement(_ReactionPicker.default, {
      mxEvent: mxEvent,
      reactions: reactions,
      onFinished: closeMenu
    }));
  }

  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_ContextMenu.ContextMenuTooltipButton, {
    className: "mx_MessageActionBar_maskButton mx_MessageActionBar_reactButton",
    title: (0, _languageHandler._t)("React"),
    onClick: openMenu,
    isExpanded: menuDisplayed,
    inputRef: ref,
    onFocus: onFocus,
    tabIndex: isActive ? 0 : -1
  }), contextMenu);
};

let MessageActionBar = (_dec = (0, _replaceableComponent.replaceableComponent)("views.messages.MessageActionBar"), _dec(_class = (_temp = _class2 = class MessageActionBar extends _react.default.PureComponent {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "onDecrypted", () => {
      // When an event decrypts, it is likely to change the set of available
      // actions, so we force an update to check again.
      this.forceUpdate();
    });
    (0, _defineProperty2.default)(this, "onBeforeRedaction", () => {
      // When an event is redacted, we can't edit it so update the available actions.
      this.forceUpdate();
    });
    (0, _defineProperty2.default)(this, "onSent", () => {
      // When an event is sent and echoed the possible actions change.
      this.forceUpdate();
    });
    (0, _defineProperty2.default)(this, "onFocusChange", focused => {
      if (!this.props.onFocusChange) {
        return;
      }

      this.props.onFocusChange(focused);
    });
    (0, _defineProperty2.default)(this, "onReplyClick", ev => {
      _dispatcher.default.dispatch({
        action: 'reply_to_event',
        event: this.props.mxEvent,
        context: this.context.timelineRenderingType
      });
    });
    (0, _defineProperty2.default)(this, "onThreadClick", () => {
      (0, _threads.dispatchShowThreadEvent)(this.props.mxEvent);

      _dispatcher.default.dispatch({
        action: _actions.Action.FocusSendMessageComposer,
        context: _RoomContext.TimelineRenderingType.Thread
      });
    });
    (0, _defineProperty2.default)(this, "onEditClick", ev => {
      _dispatcher.default.dispatch({
        action: _actions.Action.EditEvent,
        event: this.props.mxEvent,
        timelineRenderingType: this.context.timelineRenderingType
      });
    });
    (0, _defineProperty2.default)(this, "forbiddenThreadHeadMsgType", [_event2.MsgType.KeyVerificationRequest]);
    (0, _defineProperty2.default)(this, "onResendClick", ev => {
      this.runActionOnFailedEv(tarEv => _Resend.default.resend(tarEv));
    });
    (0, _defineProperty2.default)(this, "onCancelClick", ev => {
      this.runActionOnFailedEv(tarEv => _Resend.default.removeFromQueue(tarEv), testEv => (0, _MessageContextMenu.canCancel)(testEv.status));
    });
  }

  componentDidMount() {
    if (this.props.mxEvent.status && this.props.mxEvent.status !== _event.EventStatus.SENT) {
      this.props.mxEvent.on("Event.status", this.onSent);
    }

    const client = _MatrixClientPeg.MatrixClientPeg.get();

    client.decryptEventIfNeeded(this.props.mxEvent);

    if (this.props.mxEvent.isBeingDecrypted()) {
      this.props.mxEvent.once("Event.decrypted", this.onDecrypted);
    }

    this.props.mxEvent.on("Event.beforeRedaction", this.onBeforeRedaction);
  }

  componentWillUnmount() {
    this.props.mxEvent.off("Event.status", this.onSent);
    this.props.mxEvent.off("Event.decrypted", this.onDecrypted);
    this.props.mxEvent.off("Event.beforeRedaction", this.onBeforeRedaction);
  }

  get showReplyInThreadAction() {
    const isThreadEnabled = _SettingsStore.default.getValue("feature_thread");

    const inNotThreadTimeline = this.context.timelineRenderingType !== _RoomContext.TimelineRenderingType.Thread;
    const isAllowedMessageType = !this.forbiddenThreadHeadMsgType.includes(this.props.mxEvent.getContent().msgtype);
    return isThreadEnabled && inNotThreadTimeline && isAllowedMessageType;
  }
  /**
   * Runs a given fn on the set of possible events to test. The first event
   * that passes the checkFn will have fn executed on it. Both functions take
   * a MatrixEvent object. If no particular conditions are needed, checkFn can
   * be null/undefined. If no functions pass the checkFn, no action will be
   * taken.
   * @param {Function} fn The execution function.
   * @param {Function} checkFn The test function.
   */


  runActionOnFailedEv(fn, checkFn) {
    if (!checkFn) checkFn = () => true;
    const mxEvent = this.props.mxEvent;
    const editEvent = mxEvent.replacingEvent();
    const redactEvent = mxEvent.localRedactionEvent();
    const tryOrder = [redactEvent, editEvent, mxEvent];

    for (const ev of tryOrder) {
      if (ev && checkFn(ev)) {
        fn(ev);
        break;
      }
    }
  }

  render() {
    const toolbarOpts = [];

    if ((0, _EventUtils.canEditContent)(this.props.mxEvent)) {
      toolbarOpts.push( /*#__PURE__*/_react.default.createElement(_RovingTabIndex.RovingAccessibleTooltipButton, {
        className: "mx_MessageActionBar_maskButton mx_MessageActionBar_editButton",
        title: (0, _languageHandler._t)("Edit"),
        onClick: this.onEditClick,
        key: "edit"
      }));
    }

    const cancelSendingButton = /*#__PURE__*/_react.default.createElement(_RovingTabIndex.RovingAccessibleTooltipButton, {
      className: "mx_MessageActionBar_maskButton mx_MessageActionBar_cancelButton",
      title: (0, _languageHandler._t)("Delete"),
      onClick: this.onCancelClick,
      key: "cancel"
    }); // We show a different toolbar for failed events, so detect that first.


    const mxEvent = this.props.mxEvent;
    const editStatus = mxEvent.replacingEvent() && mxEvent.replacingEvent().status;
    const redactStatus = mxEvent.localRedactionEvent() && mxEvent.localRedactionEvent().status;
    const allowCancel = (0, _MessageContextMenu.canCancel)(mxEvent.status) || (0, _MessageContextMenu.canCancel)(editStatus) || (0, _MessageContextMenu.canCancel)(redactStatus);
    const isFailed = [mxEvent.status, editStatus, redactStatus].includes(_event.EventStatus.NOT_SENT);

    if (allowCancel && isFailed) {
      // The resend button needs to appear ahead of the edit button, so insert to the
      // start of the opts
      toolbarOpts.splice(0, 0, /*#__PURE__*/_react.default.createElement(_RovingTabIndex.RovingAccessibleTooltipButton, {
        className: "mx_MessageActionBar_maskButton mx_MessageActionBar_resendButton",
        title: (0, _languageHandler._t)("Retry"),
        onClick: this.onResendClick,
        key: "resend"
      })); // The delete button should appear last, so we can just drop it at the end

      toolbarOpts.push(cancelSendingButton);
    } else {
      if ((0, _EventUtils.isContentActionable)(this.props.mxEvent)) {
        // Like the resend button, the react and reply buttons need to appear before the edit.
        // The only catch is we do the reply button first so that we can make sure the react
        // button is the very first button without having to do length checks for `splice()`.
        if (this.context.canReply) {
          toolbarOpts.splice(0, 0, /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_RovingTabIndex.RovingAccessibleTooltipButton, {
            className: "mx_MessageActionBar_maskButton mx_MessageActionBar_replyButton",
            title: (0, _languageHandler._t)("Reply"),
            onClick: this.onReplyClick,
            key: "reply"
          }), this.showReplyInThreadAction && /*#__PURE__*/_react.default.createElement(_RovingTabIndex.RovingAccessibleTooltipButton, {
            className: "mx_MessageActionBar_maskButton mx_MessageActionBar_threadButton",
            title: (0, _languageHandler._t)("Reply in thread"),
            onClick: this.onThreadClick,
            key: "thread"
          })));
        }

        if (this.context.canReact) {
          toolbarOpts.splice(0, 0, /*#__PURE__*/_react.default.createElement(ReactButton, {
            mxEvent: this.props.mxEvent,
            reactions: this.props.reactions,
            onFocusChange: this.onFocusChange,
            key: "react"
          }));
        } // XXX: Assuming that the underlying tile will be a media event if it is eligible media.


        if (_MediaEventHelper.MediaEventHelper.isEligible(this.props.mxEvent)) {
          toolbarOpts.splice(0, 0, /*#__PURE__*/_react.default.createElement(_DownloadActionButton.default, {
            mxEvent: this.props.mxEvent,
            mediaEventHelperGet: () => {
              var _this$props$getTile, _this$props, _this$props$getTile$c, _this$props$getTile$c2;

              return (_this$props$getTile = (_this$props = this.props).getTile) === null || _this$props$getTile === void 0 ? void 0 : (_this$props$getTile$c = (_this$props$getTile$c2 = _this$props$getTile.call(_this$props)).getMediaHelper) === null || _this$props$getTile$c === void 0 ? void 0 : _this$props$getTile$c.call(_this$props$getTile$c2);
            },
            key: "download"
          }));
        }
      } // Show thread icon even for deleted messages, but only within main timeline


      if (this.context.timelineRenderingType === _RoomContext.TimelineRenderingType.Room && _SettingsStore.default.getValue("feature_thread") && this.props.mxEvent.getThread() && !(0, _EventUtils.isContentActionable)(this.props.mxEvent)) {
        toolbarOpts.unshift( /*#__PURE__*/_react.default.createElement(_RovingTabIndex.RovingAccessibleTooltipButton, {
          className: "mx_MessageActionBar_maskButton mx_MessageActionBar_threadButton",
          title: (0, _languageHandler._t)("Reply in thread"),
          onClick: this.onThreadClick,
          key: "thread"
        }));
      }

      if (allowCancel) {
        toolbarOpts.push(cancelSendingButton);
      }

      if (this.props.isQuoteExpanded !== undefined && _ReplyChain.default.hasReply(this.props.mxEvent)) {
        const expandClassName = (0, _classnames.default)({
          'mx_MessageActionBar_maskButton': true,
          'mx_MessageActionBar_expandMessageButton': !this.props.isQuoteExpanded,
          'mx_MessageActionBar_collapseMessageButton': this.props.isQuoteExpanded
        });
        toolbarOpts.push( /*#__PURE__*/_react.default.createElement(_RovingTabIndex.RovingAccessibleTooltipButton, {
          className: expandClassName,
          title: this.props.isQuoteExpanded ? (0, _languageHandler._t)("Collapse quotes │ ⇧+click") : (0, _languageHandler._t)("Expand quotes │ ⇧+click"),
          onClick: this.props.toggleThreadExpanded,
          key: "expand"
        }));
      } // The menu button should be last, so dump it there.


      toolbarOpts.push( /*#__PURE__*/_react.default.createElement(OptionsButton, {
        mxEvent: this.props.mxEvent,
        getReplyChain: this.props.getReplyChain,
        getTile: this.props.getTile,
        permalinkCreator: this.props.permalinkCreator,
        onFocusChange: this.onFocusChange,
        key: "menu"
      }));
    } // aria-live=off to not have this read out automatically as navigating around timeline, gets repetitive.


    return /*#__PURE__*/_react.default.createElement(_Toolbar.default, {
      className: "mx_MessageActionBar",
      "aria-label": (0, _languageHandler._t)("Message Actions"),
      "aria-live": "off"
    }, toolbarOpts);
  }

}, (0, _defineProperty2.default)(_class2, "contextType", _RoomContext.default), _temp)) || _class);
exports.default = MessageActionBar;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,