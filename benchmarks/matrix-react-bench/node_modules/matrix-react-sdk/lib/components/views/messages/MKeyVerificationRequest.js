"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _languageHandler = require("../../../languageHandler");

var _KeyVerificationStateObserver = require("../../../utils/KeyVerificationStateObserver");

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _RightPanelStorePhases = require("../../../stores/RightPanelStorePhases");

var _actions = require("../../../dispatcher/actions");

var _EventTileBubble = _interopRequireDefault(require("./EventTileBubble"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

var _logger = require("matrix-js-sdk/src/logger");

var _dec, _class;

let MKeyVerificationRequest = (_dec = (0, _replaceableComponent.replaceableComponent)("views.messages.MKeyVerificationRequest"), _dec(_class = class MKeyVerificationRequest extends _react.default.Component {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "openRequest", () => {
      const {
        verificationRequest
      } = this.props.mxEvent;

      const member = _MatrixClientPeg.MatrixClientPeg.get().getUser(verificationRequest.otherUserId);

      _dispatcher.default.dispatch({
        action: _actions.Action.SetRightPanelPhase,
        phase: _RightPanelStorePhases.RightPanelPhases.EncryptionPanel,
        refireParams: {
          verificationRequest,
          member
        }
      });
    });
    (0, _defineProperty2.default)(this, "onRequestChanged", () => {
      this.forceUpdate();
    });
    (0, _defineProperty2.default)(this, "onAcceptClicked", async () => {
      const request = this.props.mxEvent.verificationRequest;

      if (request) {
        try {
          this.openRequest();
          await request.accept();
        } catch (err) {
          _logger.logger.error(err.message);
        }
      }
    });
    (0, _defineProperty2.default)(this, "onRejectClicked", async () => {
      const request = this.props.mxEvent.verificationRequest;

      if (request) {
        try {
          await request.cancel();
        } catch (err) {
          _logger.logger.error(err.message);
        }
      }
    });
  }

  componentDidMount() {
    const request = this.props.mxEvent.verificationRequest;

    if (request) {
      request.on("change", this.onRequestChanged);
    }
  }

  componentWillUnmount() {
    const request = this.props.mxEvent.verificationRequest;

    if (request) {
      request.off("change", this.onRequestChanged);
    }
  }

  acceptedLabel(userId) {
    const client = _MatrixClientPeg.MatrixClientPeg.get();

    const myUserId = client.getUserId();

    if (userId === myUserId) {
      return (0, _languageHandler._t)("You accepted");
    } else {
      return (0, _languageHandler._t)("%(name)s accepted", {
        name: (0, _KeyVerificationStateObserver.getNameForEventRoom)(userId, this.props.mxEvent.getRoomId())
      });
    }
  }

  cancelledLabel(userId) {
    const client = _MatrixClientPeg.MatrixClientPeg.get();

    const myUserId = client.getUserId();
    const {
      cancellationCode
    } = this.props.mxEvent.verificationRequest;
    const declined = cancellationCode === "m.user";

    if (userId === myUserId) {
      if (declined) {
        return (0, _languageHandler._t)("You declined");
      } else {
        return (0, _languageHandler._t)("You cancelled");
      }
    } else {
      if (declined) {
        return (0, _languageHandler._t)("%(name)s declined", {
          name: (0, _KeyVerificationStateObserver.getNameForEventRoom)(userId, this.props.mxEvent.getRoomId())
        });
      } else {
        return (0, _languageHandler._t)("%(name)s cancelled", {
          name: (0, _KeyVerificationStateObserver.getNameForEventRoom)(userId, this.props.mxEvent.getRoomId())
        });
      }
    }
  }

  render() {
    const {
      mxEvent
    } = this.props;
    const request = mxEvent.verificationRequest;

    if (!request || request.invalid) {
      return null;
    }

    let title;
    let subtitle;
    let stateNode;

    if (!request.canAccept) {
      let stateLabel;
      const accepted = request.ready || request.started || request.done;

      if (accepted) {
        stateLabel = /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
          onClick: this.openRequest
        }, this.acceptedLabel(request.receivingUserId));
      } else if (request.cancelled) {
        stateLabel = this.cancelledLabel(request.cancellingUserId);
      } else if (request.accepting) {
        stateLabel = (0, _languageHandler._t)("Accepting …");
      } else if (request.declining) {
        stateLabel = (0, _languageHandler._t)("Declining …");
      }

      stateNode = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_cryptoEvent_state"
      }, stateLabel);
    }

    if (!request.initiatedByMe) {
      const name = (0, _KeyVerificationStateObserver.getNameForEventRoom)(request.requestingUserId, mxEvent.getRoomId());
      title = (0, _languageHandler._t)("%(name)s wants to verify", {
        name
      });
      subtitle = (0, _KeyVerificationStateObserver.userLabelForEventRoom)(request.requestingUserId, mxEvent.getRoomId());

      if (request.canAccept) {
        stateNode = /*#__PURE__*/_react.default.createElement("div", {
          className: "mx_cryptoEvent_buttons"
        }, /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
          kind: "danger",
          onClick: this.onRejectClicked
        }, (0, _languageHandler._t)("Decline")), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
          kind: "primary",
          onClick: this.onAcceptClicked
        }, (0, _languageHandler._t)("Accept")));
      }
    } else {
      // request sent by us
      title = (0, _languageHandler._t)("You sent a verification request");
      subtitle = (0, _KeyVerificationStateObserver.userLabelForEventRoom)(request.receivingUserId, mxEvent.getRoomId());
    }

    if (title) {
      return /*#__PURE__*/_react.default.createElement(_EventTileBubble.default, {
        className: "mx_cryptoEvent mx_cryptoEvent_icon",
        title: title,
        subtitle: subtitle
      }, stateNode);
    }

    return null;
  }

}) || _class);
exports.default = MKeyVerificationRequest;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,