"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _blurhash = require("blurhash");

var _languageHandler = require("../../../languageHandler");

var _SettingsStore = _interopRequireDefault(require("../../../settings/SettingsStore"));

var _InlineSpinner = _interopRequireDefault(require("../elements/InlineSpinner"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _Media = require("../../../customisations/Media");

var _ContentMessages = require("../../../ContentMessages");

var _MFileBody = _interopRequireDefault(require("./MFileBody"));

var _logger = require("matrix-js-sdk/src/logger");

var _ImageSize = require("../../../settings/enums/ImageSize");

var _dec, _class;

let MVideoBody = (_dec = (0, _replaceableComponent.replaceableComponent)("views.messages.MVideoBody"), _dec(_class = class MVideoBody extends _react.default.PureComponent {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "videoRef", /*#__PURE__*/_react.default.createRef());
    (0, _defineProperty2.default)(this, "sizeWatcher", void 0);
    (0, _defineProperty2.default)(this, "videoOnPlay", async () => {
      if (this.hasContentUrl() || this.state.fetchingData || this.state.error) {
        // We have the file, we are fetching the file, or there is an error.
        return;
      }

      this.setState({
        // To stop subsequent download attempts
        fetchingData: true
      });

      if (!this.props.mediaEventHelper.media.isEncrypted) {
        this.setState({
          error: "No file given in content"
        });
        return;
      }

      this.setState({
        decryptedUrl: await this.props.mediaEventHelper.sourceUrl.value,
        decryptedBlob: await this.props.mediaEventHelper.sourceBlob.value,
        fetchingData: false
      }, () => {
        if (!this.videoRef.current) return;
        this.videoRef.current.play();
      });
      this.props.onHeightChanged();
    });
    (0, _defineProperty2.default)(this, "getFileBody", () => {
      if (this.props.forExport) return null;
      return this.props.tileShape && /*#__PURE__*/_react.default.createElement(_MFileBody.default, (0, _extends2.default)({}, this.props, {
        showGenericPlaceholder: false
      }));
    });
    this.state = {
      fetchingData: false,
      decryptedUrl: null,
      decryptedThumbnailUrl: null,
      decryptedBlob: null,
      error: null,
      posterLoading: false,
      blurhashUrl: null
    };
  }

  suggestedDimensions(isPortrait) {
    return (0, _ImageSize.suggestedSize)(_SettingsStore.default.getValue("Images.size"));
  }

  thumbScale(fullWidth, fullHeight, thumbWidth, thumbHeight) {
    if (!fullWidth || !fullHeight) {
      // Cannot calculate thumbnail height for image: missing w/h in metadata. We can't even
      // log this because it's spammy
      return undefined;
    }

    if (!thumbWidth || !thumbHeight) {
      const dims = this.suggestedDimensions(fullWidth < fullHeight);
      thumbWidth = dims.w;
      thumbHeight = dims.h;
    }

    if (fullWidth < thumbWidth && fullHeight < thumbHeight) {
      // no scaling needs to be applied
      return 1;
    } // always scale the videos based on their width.


    const widthMulti = thumbWidth / fullWidth;
    return widthMulti;
  }

  getContentUrl() {
    var _content$file;

    const content = this.props.mxEvent.getContent(); // During export, the content url will point to the MSC, which will later point to a local url

    if (this.props.forExport) return ((_content$file = content.file) === null || _content$file === void 0 ? void 0 : _content$file.url) || content.url;
    const media = (0, _Media.mediaFromContent)(content);

    if (media.isEncrypted) {
      return this.state.decryptedUrl;
    } else {
      return media.srcHttp;
    }
  }

  hasContentUrl() {
    const url = this.getContentUrl();
    return url && !url.startsWith("data:");
  }

  getThumbUrl() {
    // there's no need of thumbnail when the content is local
    if (this.props.forExport) return null;
    const content = this.props.mxEvent.getContent();
    const media = (0, _Media.mediaFromContent)(content);

    if (media.isEncrypted && this.state.decryptedThumbnailUrl) {
      return this.state.decryptedThumbnailUrl;
    } else if (this.state.posterLoading) {
      return this.state.blurhashUrl;
    } else if (media.hasThumbnail) {
      return media.thumbnailHttp;
    } else {
      return null;
    }
  }

  loadBlurhash() {
    var _this$props$mxEvent$g;

    const info = (_this$props$mxEvent$g = this.props.mxEvent.getContent()) === null || _this$props$mxEvent$g === void 0 ? void 0 : _this$props$mxEvent$g.info;
    if (!info[_ContentMessages.BLURHASH_FIELD]) return;
    const canvas = document.createElement("canvas");
    let width = info.w;
    let height = info.h;
    const scale = this.thumbScale(info.w, info.h);

    if (scale) {
      width = Math.floor(info.w * scale);
      height = Math.floor(info.h * scale);
    }

    canvas.width = width;
    canvas.height = height;
    const pixels = (0, _blurhash.decode)(info[_ContentMessages.BLURHASH_FIELD], width, height);
    const ctx = canvas.getContext("2d");
    const imgData = ctx.createImageData(width, height);
    imgData.data.set(pixels);
    ctx.putImageData(imgData, 0, 0);
    this.setState({
      blurhashUrl: canvas.toDataURL(),
      posterLoading: true
    });
    const content = this.props.mxEvent.getContent();
    const media = (0, _Media.mediaFromContent)(content);

    if (media.hasThumbnail) {
      const image = new Image();

      image.onload = () => {
        this.setState({
          posterLoading: false
        });
      };

      image.src = media.thumbnailHttp;
    }
  }

  async componentDidMount() {
    this.sizeWatcher = _SettingsStore.default.watchSetting("Images.size", null, () => {
      this.forceUpdate(); // we don't really have a reliable thing to update, so just update the whole thing
    });
    this.loadBlurhash();

    if (this.props.mediaEventHelper.media.isEncrypted && this.state.decryptedUrl === null) {
      try {
        const autoplay = _SettingsStore.default.getValue("autoplayVideo");

        const thumbnailUrl = await this.props.mediaEventHelper.thumbnailUrl.value;

        if (autoplay) {
          _logger.logger.log("Preloading video");

          this.setState({
            decryptedUrl: await this.props.mediaEventHelper.sourceUrl.value,
            decryptedThumbnailUrl: thumbnailUrl,
            decryptedBlob: await this.props.mediaEventHelper.sourceBlob.value
          });
          this.props.onHeightChanged();
        } else {
          var _content$info, _content$info2;

          _logger.logger.log("NOT preloading video");

          const content = this.props.mxEvent.getContent();
          this.setState({
            // For Chrome and Electron, we need to set some non-empty `src` to
            // enable the play button. Firefox does not seem to care either
            // way, so it's fine to do for all browsers.
            decryptedUrl: `data:${content === null || content === void 0 ? void 0 : (_content$info = content.info) === null || _content$info === void 0 ? void 0 : _content$info.mimetype},`,
            decryptedThumbnailUrl: thumbnailUrl || `data:${content === null || content === void 0 ? void 0 : (_content$info2 = content.info) === null || _content$info2 === void 0 ? void 0 : _content$info2.mimetype},`,
            decryptedBlob: null
          });
        }
      } catch (err) {
        _logger.logger.warn("Unable to decrypt attachment: ", err); // Set a placeholder image when we can't decrypt the image.


        this.setState({
          error: err
        });
      }
    }
  }

  componentWillUnmount() {
    _SettingsStore.default.unwatchSetting(this.sizeWatcher);
  }

  render() {
    const content = this.props.mxEvent.getContent();

    const autoplay = _SettingsStore.default.getValue("autoplayVideo");

    if (this.state.error !== null) {
      return /*#__PURE__*/_react.default.createElement("span", {
        className: "mx_MVideoBody"
      }, /*#__PURE__*/_react.default.createElement("img", {
        src: require("../../../../res/img/warning.svg"),
        width: "16",
        height: "16"
      }), (0, _languageHandler._t)("Error decrypting video"));
    } // Important: If we aren't autoplaying and we haven't decrypted it yet, show a video with a poster.


    if (!this.props.forExport && content.file !== undefined && this.state.decryptedUrl === null && autoplay) {
      // Need to decrypt the attachment
      // The attachment is decrypted in componentDidMount.
      // For now add an img tag with a spinner.
      return /*#__PURE__*/_react.default.createElement("span", {
        className: "mx_MVideoBody"
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_MImageBody_thumbnail mx_MImageBody_thumbnail_spinner"
      }, /*#__PURE__*/_react.default.createElement(_InlineSpinner.default, null)));
    }

    const contentUrl = this.getContentUrl();
    const thumbUrl = this.getThumbUrl();
    const defaultDims = this.suggestedDimensions(false);
    let height = defaultDims.h;
    let width = defaultDims.w;
    let poster = null;
    let preload = "metadata";

    if (content.info) {
      const scale = this.thumbScale(content.info.w, content.info.h);

      if (scale) {
        width = Math.floor(content.info.w * scale);
        height = Math.floor(content.info.h * scale);
      }

      if (thumbUrl) {
        poster = thumbUrl;
        preload = "none";
      }
    }

    const fileBody = this.getFileBody();
    return /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_MVideoBody"
    }, /*#__PURE__*/_react.default.createElement("video", {
      className: "mx_MVideoBody",
      ref: this.videoRef,
      src: contentUrl,
      title: content.body,
      controls: true,
      preload: preload,
      muted: autoplay,
      autoPlay: autoplay,
      height: height,
      width: width,
      poster: poster,
      onPlay: this.videoOnPlay
    }), fileBody);
  }

}) || _class);
exports.default = MVideoBody;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,