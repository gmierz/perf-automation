"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.HiddenImagePlaceholder = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _reactBlurhash = require("react-blurhash");

var _MFileBody = _interopRequireDefault(require("./MFileBody"));

var _Modal = _interopRequireDefault(require("../../../Modal"));

var _languageHandler = require("../../../languageHandler");

var _SettingsStore = _interopRequireDefault(require("../../../settings/SettingsStore"));

var _MatrixClientContext = _interopRequireDefault(require("../../../contexts/MatrixClientContext"));

var _InlineSpinner = _interopRequireDefault(require("../elements/InlineSpinner"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _Media = require("../../../customisations/Media");

var _ContentMessages = require("../../../ContentMessages");

var _ImageView = _interopRequireDefault(require("../elements/ImageView"));

var _classnames = _interopRequireDefault(require("classnames"));

var _reactTransitionGroup = require("react-transition-group");

var _logger = require("matrix-js-sdk/src/logger");

var _EventTile = require("../rooms/EventTile");

var _ImageSize = require("../../../settings/enums/ImageSize");

var _dec, _class, _class2, _temp;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

let MImageBody = (_dec = (0, _replaceableComponent.replaceableComponent)("views.messages.MImageBody"), _dec(_class = (_temp = _class2 = class MImageBody extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "unmounted", true);
    (0, _defineProperty2.default)(this, "image", /*#__PURE__*/(0, _react.createRef)());
    (0, _defineProperty2.default)(this, "timeout", void 0);
    (0, _defineProperty2.default)(this, "sizeWatcher", void 0);
    (0, _defineProperty2.default)(this, "onClientSync", (syncState, prevState) => {
      if (this.unmounted) return; // Consider the client reconnected if there is no error with syncing.
      // This means the state could be RECONNECTING, SYNCING, PREPARED or CATCHUP.

      const reconnected = syncState !== "ERROR" && prevState !== syncState;

      if (reconnected && this.state.imgError) {
        // Load the image again
        this.setState({
          imgError: false
        });
      }
    });
    (0, _defineProperty2.default)(this, "onClick", ev => {
      if (ev.button === 0 && !ev.metaKey) {
        var _content$body;

        ev.preventDefault();

        if (!this.state.showImage) {
          this.showImage();
          return;
        }

        const content = this.props.mxEvent.getContent();
        const httpUrl = this.getContentUrl();
        const params = {
          src: httpUrl,
          name: ((_content$body = content.body) === null || _content$body === void 0 ? void 0 : _content$body.length) > 0 ? content.body : (0, _languageHandler._t)('Attachment'),
          mxEvent: this.props.mxEvent,
          permalinkCreator: this.props.permalinkCreator
        };

        if (content.info) {
          params.width = content.info.w;
          params.height = content.info.h;
          params.fileSize = content.info.size;
        }

        if (this.image.current) {
          const clientRect = this.image.current.getBoundingClientRect();
          params.thumbnailInfo = {
            width: clientRect.width,
            height: clientRect.height,
            positionX: clientRect.x,
            positionY: clientRect.y
          };
        }

        _Modal.default.createDialog(_ImageView.default, params, "mx_Dialog_lightbox", null, true);
      }
    });
    (0, _defineProperty2.default)(this, "isGif", () => {
      var _content$info;

      const content = this.props.mxEvent.getContent();
      return ((_content$info = content.info) === null || _content$info === void 0 ? void 0 : _content$info.mimetype) === "image/gif";
    });
    (0, _defineProperty2.default)(this, "onImageEnter", e => {
      this.setState({
        hover: true
      });

      if (!this.state.showImage || !this.isGif() || _SettingsStore.default.getValue("autoplayGifs")) {
        return;
      }

      const imgElement = e.currentTarget;
      imgElement.src = this.getContentUrl();
    });
    (0, _defineProperty2.default)(this, "onImageLeave", e => {
      this.setState({
        hover: false
      });

      if (!this.state.showImage || !this.isGif() || _SettingsStore.default.getValue("autoplayGifs")) {
        return;
      }

      const imgElement = e.currentTarget;
      imgElement.src = this.getThumbUrl();
    });
    (0, _defineProperty2.default)(this, "onImageError", () => {
      this.clearBlurhashTimeout();
      this.setState({
        imgError: true
      });
    });
    (0, _defineProperty2.default)(this, "onImageLoad", () => {
      this.clearBlurhashTimeout();
      this.props.onHeightChanged();
      let loadedImageDimensions;

      if (this.image.current) {
        const {
          naturalWidth,
          naturalHeight
        } = this.image.current; // this is only used as a fallback in case content.info.w/h is missing

        loadedImageDimensions = {
          naturalWidth,
          naturalHeight
        };
      }

      this.setState({
        imgLoaded: true,
        loadedImageDimensions
      });
    });
    this.state = {
      decryptedUrl: null,
      decryptedThumbnailUrl: null,
      decryptedBlob: null,
      error: null,
      imgError: false,
      imgLoaded: false,
      loadedImageDimensions: null,
      hover: false,
      showImage: _SettingsStore.default.getValue("showImages"),
      placeholder: 'no-image'
    };
  } // FIXME: factor this out and apply it to MVideoBody and MAudioBody too!


  showImage() {
    localStorage.setItem("mx_ShowImage_" + this.props.mxEvent.getId(), "true");
    this.setState({
      showImage: true
    });
    this.downloadImage();
  }

  getContentUrl() {
    var _content$file;

    const content = this.props.mxEvent.getContent(); // During export, the content url will point to the MSC, which will later point to a local url

    if (this.props.forExport) return content.url || ((_content$file = content.file) === null || _content$file === void 0 ? void 0 : _content$file.url);

    if (this.media.isEncrypted) {
      return this.state.decryptedUrl;
    } else {
      return this.media.srcHttp;
    }
  }

  get media() {
    return (0, _Media.mediaFromContent)(this.props.mxEvent.getContent());
  }

  getThumbUrl() {
    // FIXME: we let images grow as wide as you like, rather than capped to 800x600.
    // So either we need to support custom timeline widths here, or reimpose the cap, otherwise the
    // thumbnail resolution will be unnecessarily reduced.
    // custom timeline widths seems preferable.
    const thumbWidth = 800;
    const thumbHeight = 600;
    const content = this.props.mxEvent.getContent();
    const media = (0, _Media.mediaFromContent)(content);

    if (media.isEncrypted) {
      // Don't use the thumbnail for clients wishing to autoplay gifs.
      if (this.state.decryptedThumbnailUrl) {
        return this.state.decryptedThumbnailUrl;
      }

      return this.state.decryptedUrl;
    } else if (content.info && content.info.mimetype === "image/svg+xml" && media.hasThumbnail) {
      // special case to return clientside sender-generated thumbnails for SVGs, if any,
      // given we deliberately don't thumbnail them serverside to prevent
      // billion lol attacks and similar
      return media.getThumbnailHttp(thumbWidth, thumbHeight, 'scale');
    } else {
      // we try to download the correct resolution
      // for hi-res images (like retina screenshots).
      // synapse only supports 800x600 thumbnails for now though,
      // so we'll need to download the original image for this to work
      // well for now. First, let's try a few cases that let us avoid
      // downloading the original, including:
      //   - When displaying a GIF, we always want to thumbnail so that we can
      //     properly respect the user's GIF autoplay setting (which relies on
      //     thumbnailing to produce the static preview image)
      //   - On a low DPI device, always thumbnail to save bandwidth
      //   - If there's no sizing info in the event, default to thumbnail
      const info = content.info;

      if (this.isGif() || window.devicePixelRatio === 1.0 || !info || !info.w || !info.h || !info.size) {
        return media.getThumbnailOfSourceHttp(thumbWidth, thumbHeight);
      } else {
        // we should only request thumbnails if the image is bigger than 800x600
        // (or 1600x1200 on retina) otherwise the image in the timeline will just
        // end up resampled and de-retina'd for no good reason.
        // Ideally the server would pregen 1600x1200 thumbnails in order to provide retina
        // thumbnails, but we don't do this currently in synapse for fear of disk space.
        // As a compromise, let's switch to non-retina thumbnails only if the original
        // image is both physically too large and going to be massive to load in the
        // timeline (e.g. >1MB).
        const isLargerThanThumbnail = info.w > thumbWidth || info.h > thumbHeight;
        const isLargeFileSize = info.size > 1 * 1024 * 1024; // 1mb

        if (isLargeFileSize && isLargerThanThumbnail) {
          // image is too large physically and bytewise to clutter our timeline so
          // we ask for a thumbnail, despite knowing that it will be max 800x600
          // despite us being retina (as synapse doesn't do 1600x1200 thumbs yet).
          return media.getThumbnailOfSourceHttp(thumbWidth, thumbHeight);
        } else {
          // download the original image otherwise, so we can scale it client side
          // to take pixelRatio into account.
          return media.srcHttp;
        }
      }
    }
  }

  async downloadImage() {
    if (this.props.mediaEventHelper.media.isEncrypted && this.state.decryptedUrl === null) {
      try {
        const thumbnailUrl = await this.props.mediaEventHelper.thumbnailUrl.value;
        this.setState({
          decryptedUrl: await this.props.mediaEventHelper.sourceUrl.value,
          decryptedThumbnailUrl: thumbnailUrl,
          decryptedBlob: await this.props.mediaEventHelper.sourceBlob.value
        });
      } catch (err) {
        if (this.unmounted) return;

        _logger.logger.warn("Unable to decrypt attachment: ", err); // Set a placeholder image when we can't decrypt the image.


        this.setState({
          error: err
        });
      }
    }
  }

  clearBlurhashTimeout() {
    if (this.timeout) {
      clearTimeout(this.timeout);
      this.timeout = undefined;
    }
  }

  componentDidMount() {
    var _this$props$mxEvent$g;

    this.unmounted = false;
    this.context.on('sync', this.onClientSync);
    const showImage = this.state.showImage || localStorage.getItem("mx_ShowImage_" + this.props.mxEvent.getId()) === "true";

    if (showImage) {
      // noinspection JSIgnoredPromiseFromCall
      this.downloadImage();
      this.setState({
        showImage: true
      });
    } // else don't download anything because we don't want to display anything.
    // Add a 150ms timer for blurhash to first appear.


    if ((_this$props$mxEvent$g = this.props.mxEvent.getContent().info) !== null && _this$props$mxEvent$g !== void 0 && _this$props$mxEvent$g[_ContentMessages.BLURHASH_FIELD]) {
      this.clearBlurhashTimeout();
      this.timeout = setTimeout(() => {
        if (!this.state.imgLoaded || !this.state.imgError) {
          this.setState({
            placeholder: 'blurhash'
          });
        }
      }, 150);
    }

    this.sizeWatcher = _SettingsStore.default.watchSetting("Images.size", null, () => {
      this.forceUpdate(); // we don't really have a reliable thing to update, so just update the whole thing
    });
  }

  componentWillUnmount() {
    this.unmounted = true;
    this.context.removeListener('sync', this.onClientSync);
    this.clearBlurhashTimeout();

    _SettingsStore.default.unwatchSetting(this.sizeWatcher);
  }

  messageContent(contentUrl, thumbUrl, content, forcedHeight) {
    var _this$props$mxEvent$g2;

    let infoWidth;
    let infoHeight;

    if (content && content.info && content.info.w && content.info.h) {
      infoWidth = content.info.w;
      infoHeight = content.info.h;
    } else {
      // Whilst the image loads, display nothing. We also don't display a blurhash image
      // because we don't really know what size of image we'll end up with.
      //
      // Once loaded, use the loaded image dimensions stored in `loadedImageDimensions`.
      //
      // By doing this, the image "pops" into the timeline, but is still restricted
      // by the same width and height logic below.
      if (!this.state.loadedImageDimensions) {
        let imageElement;

        if (!this.state.showImage) {
          imageElement = /*#__PURE__*/_react.default.createElement(HiddenImagePlaceholder, null);
        } else {
          imageElement = /*#__PURE__*/_react.default.createElement("img", {
            style: {
              display: 'none'
            },
            src: thumbUrl,
            ref: this.image,
            alt: content.body,
            onError: this.onImageError,
            onLoad: this.onImageLoad
          });
        }

        return this.wrapImage(contentUrl, imageElement);
      }

      infoWidth = this.state.loadedImageDimensions.naturalWidth;
      infoHeight = this.state.loadedImageDimensions.naturalHeight;
    } // The maximum size of the thumbnail as it is rendered as an <img>
    // check for any height constraints


    const imageSize = _SettingsStore.default.getValue("Images.size");

    const isPortrait = infoWidth < infoHeight;
    const suggestedAndPossibleWidth = Math.min((0, _ImageSize.suggestedSize)(imageSize, isPortrait).w, infoWidth);
    const suggestedAndPossibleHeight = Math.min((0, _ImageSize.suggestedSize)(imageSize, isPortrait).h, infoHeight);
    const aspectRatio = infoWidth / infoHeight;
    let maxWidth;
    let maxHeight;
    const maxHeightConstraint = forcedHeight || this.props.maxImageHeight || suggestedAndPossibleHeight;

    if (maxHeightConstraint * aspectRatio < suggestedAndPossibleWidth || imageSize === _ImageSize.ImageSize.Large) {
      // The width is dictated by the maximum height that was defined by the props or the function param `forcedHeight`
      // If the thumbnail size is set to Large, we always let the size be dictated by the height.
      maxWidth = maxHeightConstraint * aspectRatio; // there is no need to check for infoHeight here since this is done with `maxHeightConstraint * aspectRatio < suggestedAndPossibleWidth`

      maxHeight = maxHeightConstraint;
    } else {
      // height is dictated by suggestedWidth (based on the Image.size setting)
      maxWidth = suggestedAndPossibleWidth;
      maxHeight = suggestedAndPossibleWidth / aspectRatio;
    }

    let img = null;
    let placeholder = null;
    let gifLabel = null;

    if (!this.props.forExport && !this.state.imgLoaded) {
      placeholder = this.getPlaceholder(maxWidth, maxHeight);
    }

    let showPlaceholder = Boolean(placeholder);

    if (thumbUrl && !this.state.imgError) {
      // Restrict the width of the thumbnail here, otherwise it will fill the container
      // which has the same width as the timeline
      // mx_MImageBody_thumbnail resizes img to exactly container size
      img = /*#__PURE__*/_react.default.createElement("img", {
        className: "mx_MImageBody_thumbnail",
        src: thumbUrl,
        ref: this.image // Force the image to be the full size of the container, even if the
        // pixel size is smaller. The problem here is that we don't know what
        // thumbnail size the HS is going to give us, but we have to commit to
        // a container size immediately and not change it when the image loads
        // or we'll get a scroll jump (or have to leave blank space).
        // This will obviously result in an upscaled image which will be a bit
        // blurry. The best fix would be for the HS to advertise what size thumbnails
        // it guarantees to produce.
        ,
        style: {
          height: '100%'
        },
        alt: content.body,
        onError: this.onImageError,
        onLoad: this.onImageLoad,
        onMouseEnter: this.onImageEnter,
        onMouseLeave: this.onImageLeave
      });
    }

    if (!this.state.showImage) {
      img = /*#__PURE__*/_react.default.createElement(HiddenImagePlaceholder, {
        maxWidth: maxWidth
      });
      showPlaceholder = false; // because we're hiding the image, so don't show the placeholder.
    }

    if (this.isGif() && !_SettingsStore.default.getValue("autoplayGifs") && !this.state.hover) {
      gifLabel = /*#__PURE__*/_react.default.createElement("p", {
        className: "mx_MImageBody_gifLabel"
      }, "GIF");
    }

    const classes = (0, _classnames.default)({
      'mx_MImageBody_thumbnail': true,
      'mx_MImageBody_thumbnail--blurhash': (_this$props$mxEvent$g2 = this.props.mxEvent.getContent().info) === null || _this$props$mxEvent$g2 === void 0 ? void 0 : _this$props$mxEvent$g2[_ContentMessages.BLURHASH_FIELD]
    }); // This has incredibly broken types.

    const C = _reactTransitionGroup.CSSTransition;

    const thumbnail = /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_MImageBody_thumbnail_container",
      style: {
        maxHeight: maxHeight,
        maxWidth: maxWidth,
        aspectRatio: `${infoWidth}/${infoHeight}`
      }
    }, /*#__PURE__*/_react.default.createElement(_reactTransitionGroup.SwitchTransition, {
      mode: "out-in"
    }, /*#__PURE__*/_react.default.createElement(C, {
      classNames: "mx_rtg--fade",
      key: `img-${showPlaceholder}`,
      timeout: 300
    }, /*#__PURE__*/_react.default.createElement("div", null, showPlaceholder && /*#__PURE__*/_react.default.createElement("div", {
      className: classes,
      style: {
        // Constrain width here so that spinner appears central to the loaded thumbnail
        maxWidth: `min(100%, ${infoWidth}px)`,
        maxHeight: maxHeight,
        aspectRatio: `${infoWidth}/${infoHeight}`
      }
    }, placeholder)))), /*#__PURE__*/_react.default.createElement("div", {
      style: {
        height: '100%'
      }
    }, img, gifLabel), this.state.hover && this.getTooltip());

    return this.wrapImage(contentUrl, thumbnail);
  } // Overidden by MStickerBody


  wrapImage(contentUrl, children) {
    return /*#__PURE__*/_react.default.createElement("a", {
      href: contentUrl,
      target: this.props.forExport ? "_blank" : undefined,
      onClick: this.onClick
    }, children);
  } // Overidden by MStickerBody


  getPlaceholder(width, height) {
    var _this$props$mxEvent$g3;

    const blurhash = (_this$props$mxEvent$g3 = this.props.mxEvent.getContent().info) === null || _this$props$mxEvent$g3 === void 0 ? void 0 : _this$props$mxEvent$g3[_ContentMessages.BLURHASH_FIELD];

    if (blurhash) {
      if (this.state.placeholder === 'no-image') {
        return /*#__PURE__*/_react.default.createElement("div", {
          className: "mx_no-image-placeholder",
          style: {
            width: width,
            height: height
          }
        });
      } else if (this.state.placeholder === 'blurhash') {
        return /*#__PURE__*/_react.default.createElement(_reactBlurhash.Blurhash, {
          className: "mx_Blurhash",
          hash: blurhash,
          width: width,
          height: height
        });
      }
    }

    return /*#__PURE__*/_react.default.createElement(_InlineSpinner.default, {
      w: 32,
      h: 32
    });
  } // Overidden by MStickerBody


  getTooltip() {
    return null;
  } // Overidden by MStickerBody


  getFileBody() {
    if (this.props.forExport) return null;
    /*
     * In the room timeline or the thread context we don't need the download
     * link as the message action bar will fullfil that
     */

    const hasMessageActionBar = !this.props.tileShape || this.props.tileShape === _EventTile.TileShape.Thread || this.props.tileShape === _EventTile.TileShape.ThreadPanel;

    if (!hasMessageActionBar) {
      return /*#__PURE__*/_react.default.createElement(_MFileBody.default, (0, _extends2.default)({}, this.props, {
        showGenericPlaceholder: false
      }));
    }
  }

  render() {
    const content = this.props.mxEvent.getContent();

    if (this.state.error !== null) {
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_MImageBody"
      }, /*#__PURE__*/_react.default.createElement("img", {
        src: require("../../../../res/img/warning.svg"),
        width: "16",
        height: "16"
      }), (0, _languageHandler._t)("Error decrypting image"));
    }

    const contentUrl = this.getContentUrl();
    let thumbUrl;

    if (this.props.forExport || this.isGif() && _SettingsStore.default.getValue("autoplayGifs")) {
      thumbUrl = contentUrl;
    } else {
      thumbUrl = this.getThumbUrl();
    }

    const thumbnail = this.messageContent(contentUrl, thumbUrl, content);
    const fileBody = this.getFileBody();
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_MImageBody"
    }, thumbnail, fileBody);
  }

}, (0, _defineProperty2.default)(_class2, "contextType", _MatrixClientContext.default), _temp)) || _class);
exports.default = MImageBody;

class HiddenImagePlaceholder extends _react.default.PureComponent {
  render() {
    const maxWidth = this.props.maxWidth ? this.props.maxWidth + "px" : null;
    let className = 'mx_HiddenImagePlaceholder';
    if (this.props.hover) className += ' mx_HiddenImagePlaceholder_hover';
    return /*#__PURE__*/_react.default.createElement("div", {
      className: className,
      style: {
        maxWidth: `min(100%, ${maxWidth}px)`
      }
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_HiddenImagePlaceholder_button"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_HiddenImagePlaceholder_eye"
    }), /*#__PURE__*/_react.default.createElement("span", null, (0, _languageHandler._t)("Show image"))));
  }

}

exports.HiddenImagePlaceholder = HiddenImagePlaceholder;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,