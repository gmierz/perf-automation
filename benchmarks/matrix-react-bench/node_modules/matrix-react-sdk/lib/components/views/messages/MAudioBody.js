"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _InlineSpinner = _interopRequireDefault(require("../elements/InlineSpinner"));

var _languageHandler = require("../../../languageHandler");

var _AudioPlayer = _interopRequireDefault(require("../audio_messages/AudioPlayer"));

var _MFileBody = _interopRequireDefault(require("./MFileBody"));

var _PlaybackManager = require("../../../audio/PlaybackManager");

var _EventUtils = require("../../../utils/EventUtils");

var _PlaybackQueue = require("../../../audio/PlaybackQueue");

var _logger = require("matrix-js-sdk/src/logger");

var _dec, _class;

let MAudioBody = (_dec = (0, _replaceableComponent.replaceableComponent)("views.messages.MAudioBody"), _dec(_class = class MAudioBody extends _react.default.PureComponent {
  constructor(props) {
    super(props);
    this.state = {};
  }

  async componentDidMount() {
    var _content$orgMatrixM, _content$orgMatrixM$w;

    let buffer;

    try {
      try {
        const blob = await this.props.mediaEventHelper.sourceBlob.value;
        buffer = await blob.arrayBuffer();
      } catch (e) {
        this.setState({
          error: e
        });

        _logger.logger.warn("Unable to decrypt audio message", e);

        return; // stop processing the audio file
      }
    } catch (e) {
      this.setState({
        error: e
      });

      _logger.logger.warn("Unable to decrypt/download audio message", e);

      return; // stop processing the audio file
    } // We should have a buffer to work with now: let's set it up
    // Note: we don't actually need a waveform to render an audio event, but voice messages do.


    const content = this.props.mxEvent.getContent();
    const waveform = content === null || content === void 0 ? void 0 : (_content$orgMatrixM = content["org.matrix.msc1767.audio"]) === null || _content$orgMatrixM === void 0 ? void 0 : (_content$orgMatrixM$w = _content$orgMatrixM.waveform) === null || _content$orgMatrixM$w === void 0 ? void 0 : _content$orgMatrixM$w.map(p => p / 1024); // We should have a buffer to work with now: let's set it up

    const playback = _PlaybackManager.PlaybackManager.instance.createPlaybackInstance(buffer, waveform);

    playback.clockInfo.populatePlaceholdersFrom(this.props.mxEvent);
    this.setState({
      playback
    });

    if ((0, _EventUtils.isVoiceMessage)(this.props.mxEvent)) {
      _PlaybackQueue.PlaybackQueue.forRoom(this.props.mxEvent.getRoomId()).unsortedEnqueue(this.props.mxEvent, playback);
    } // Note: the components later on will handle preparing the Playback class for us.

  }

  componentWillUnmount() {
    var _this$state$playback;

    (_this$state$playback = this.state.playback) === null || _this$state$playback === void 0 ? void 0 : _this$state$playback.destroy();
  }

  render() {
    if (this.state.error) {
      return /*#__PURE__*/_react.default.createElement("span", {
        className: "mx_MAudioBody"
      }, /*#__PURE__*/_react.default.createElement("img", {
        src: require("../../../../res/img/warning.svg"),
        width: "16",
        height: "16"
      }), (0, _languageHandler._t)("Error processing audio message"));
    }

    if (this.props.forExport) {
      var _content$file;

      const content = this.props.mxEvent.getContent(); // During export, the content url will point to the MSC, which will later point to a local url

      const contentUrl = ((_content$file = content.file) === null || _content$file === void 0 ? void 0 : _content$file.url) || content.url;
      return /*#__PURE__*/_react.default.createElement("span", {
        className: "mx_MAudioBody"
      }, /*#__PURE__*/_react.default.createElement("audio", {
        src: contentUrl,
        controls: true
      }));
    }

    if (!this.state.playback) {
      return /*#__PURE__*/_react.default.createElement("span", {
        className: "mx_MAudioBody"
      }, /*#__PURE__*/_react.default.createElement(_InlineSpinner.default, null));
    } // At this point we should have a playable state


    return /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_MAudioBody"
    }, /*#__PURE__*/_react.default.createElement(_AudioPlayer.default, {
      playback: this.state.playback,
      mediaName: this.props.mxEvent.getContent().body
    }), this.props.tileShape && /*#__PURE__*/_react.default.createElement(_MFileBody.default, (0, _extends2.default)({}, this.props, {
      showGenericPlaceholder: false
    })));
  }

}) || _class);
exports.default = MAudioBody;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,