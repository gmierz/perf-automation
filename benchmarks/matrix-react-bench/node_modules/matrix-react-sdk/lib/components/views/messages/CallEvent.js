"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _languageHandler = require("../../../languageHandler");

var _MemberAvatar = _interopRequireDefault(require("../avatars/MemberAvatar"));

var _CallEventGrouper = require("../../structures/CallEventGrouper");

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

var _call = require("matrix-js-sdk/src/webrtc/call");

var _InfoTooltip = _interopRequireWildcard(require("../elements/InfoTooltip"));

var _classnames = _interopRequireDefault(require("classnames"));

var _AccessibleTooltipButton = _interopRequireDefault(require("../elements/AccessibleTooltipButton"));

var _DateUtils = require("../../../DateUtils");

var _Clock = _interopRequireDefault(require("../audio_messages/Clock"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
Copyright 2021 Šimon Brandner <simon.bra.ag@gmail.com>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const MAX_NON_NARROW_WIDTH = 450 / 70 * 100;

class CallEvent extends _react.default.PureComponent {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "wrapperElement", /*#__PURE__*/(0, _react.createRef)());
    (0, _defineProperty2.default)(this, "resizeObserver", void 0);
    (0, _defineProperty2.default)(this, "onLengthChanged", length => {
      this.setState({
        length
      });
    });
    (0, _defineProperty2.default)(this, "resizeObserverCallback", entries => {
      const wrapperElementEntry = entries.find(entry => entry.target === this.wrapperElement.current);
      if (!wrapperElementEntry) return;
      this.setState({
        narrow: wrapperElementEntry.contentRect.width < MAX_NON_NARROW_WIDTH
      });
    });
    (0, _defineProperty2.default)(this, "onSilencedChanged", newState => {
      this.setState({
        silenced: newState
      });
    });
    (0, _defineProperty2.default)(this, "onStateChanged", newState => {
      this.setState({
        callState: newState
      });
    });
    this.state = {
      callState: this.props.callEventGrouper.state,
      silenced: false,
      narrow: false,
      length: 0
    };
  }

  componentDidMount() {
    this.props.callEventGrouper.addListener(_CallEventGrouper.CallEventGrouperEvent.StateChanged, this.onStateChanged);
    this.props.callEventGrouper.addListener(_CallEventGrouper.CallEventGrouperEvent.SilencedChanged, this.onSilencedChanged);
    this.props.callEventGrouper.addListener(_CallEventGrouper.CallEventGrouperEvent.LengthChanged, this.onLengthChanged);
    this.resizeObserver = new ResizeObserver(this.resizeObserverCallback);
    this.resizeObserver.observe(this.wrapperElement.current);
  }

  componentWillUnmount() {
    this.props.callEventGrouper.removeListener(_CallEventGrouper.CallEventGrouperEvent.StateChanged, this.onStateChanged);
    this.props.callEventGrouper.removeListener(_CallEventGrouper.CallEventGrouperEvent.SilencedChanged, this.onSilencedChanged);
    this.props.callEventGrouper.removeListener(_CallEventGrouper.CallEventGrouperEvent.LengthChanged, this.onLengthChanged);
    this.resizeObserver.disconnect();
  }

  renderCallBackButton(text) {
    return /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      className: "mx_CallEvent_content_button mx_CallEvent_content_button_callBack",
      onClick: this.props.callEventGrouper.callBack,
      kind: "primary"
    }, /*#__PURE__*/_react.default.createElement("span", null, " ", text, " "));
  }

  renderSilenceIcon() {
    const silenceClass = (0, _classnames.default)({
      "mx_CallEvent_iconButton": true,
      "mx_CallEvent_unSilence": this.state.silenced,
      "mx_CallEvent_silence": !this.state.silenced
    });
    return /*#__PURE__*/_react.default.createElement(_AccessibleTooltipButton.default, {
      className: silenceClass,
      onClick: this.props.callEventGrouper.toggleSilenced,
      title: this.state.silenced ? (0, _languageHandler._t)("Sound on") : (0, _languageHandler._t)("Silence call")
    });
  }

  renderContent(state) {
    if (state === _call.CallState.Ringing) {
      let silenceIcon;

      if (!this.state.narrow) {
        silenceIcon = this.renderSilenceIcon();
      }

      return /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_CallEvent_content"
      }, silenceIcon, /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        className: "mx_CallEvent_content_button mx_CallEvent_content_button_reject",
        onClick: this.props.callEventGrouper.rejectCall,
        kind: "danger"
      }, /*#__PURE__*/_react.default.createElement("span", null, " ", (0, _languageHandler._t)("Decline"), " ")), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        className: "mx_CallEvent_content_button mx_CallEvent_content_button_answer",
        onClick: this.props.callEventGrouper.answerCall,
        kind: "primary"
      }, /*#__PURE__*/_react.default.createElement("span", null, " ", (0, _languageHandler._t)("Accept"), " ")));
    }

    if (state === _call.CallState.Ended) {
      const hangupReason = this.props.callEventGrouper.hangupReason;
      const gotRejected = this.props.callEventGrouper.gotRejected;

      if (gotRejected) {
        return /*#__PURE__*/_react.default.createElement("div", {
          className: "mx_CallEvent_content"
        }, (0, _languageHandler._t)("Call declined"), this.renderCallBackButton((0, _languageHandler._t)("Call back")));
      } else if ([_call.CallErrorCode.UserHangup, "user hangup"].includes(hangupReason) || !hangupReason) {
        // workaround for https://github.com/vector-im/element-web/issues/5178
        // it seems Android randomly sets a reason of "user hangup" which is
        // interpreted as an error code :(
        // https://github.com/vector-im/riot-android/issues/2623
        // Also the correct hangup code as of VoIP v1 (with underscore)
        // Also, if we don't have a reason
        const duration = this.props.callEventGrouper.duration;
        let text = (0, _languageHandler._t)("Call ended");

        if (duration) {
          text += " • " + (0, _DateUtils.formatCallTime)(duration);
        }

        return /*#__PURE__*/_react.default.createElement("div", {
          className: "mx_CallEvent_content"
        }, text);
      } else if (hangupReason === _call.CallErrorCode.InviteTimeout) {
        return /*#__PURE__*/_react.default.createElement("div", {
          className: "mx_CallEvent_content"
        }, (0, _languageHandler._t)("No answer"), this.renderCallBackButton((0, _languageHandler._t)("Call back")));
      }

      let reason;

      if (hangupReason === _call.CallErrorCode.IceFailed) {
        // We couldn't establish a connection at all
        reason = (0, _languageHandler._t)("Could not connect media");
      } else if (hangupReason === "ice_timeout") {
        // We established a connection but it died
        reason = (0, _languageHandler._t)("Connection failed");
      } else if (hangupReason === _call.CallErrorCode.NoUserMedia) {
        // The other side couldn't open capture devices
        reason = (0, _languageHandler._t)("Their device couldn't start the camera or microphone");
      } else if (hangupReason === "unknown_error") {
        // An error code the other side doesn't have a way to express
        // (as opposed to an error code they gave but we don't know about,
        // in which case we show the error code)
        reason = (0, _languageHandler._t)("An unknown error occurred");
      } else if (hangupReason === _call.CallErrorCode.UserBusy) {
        reason = (0, _languageHandler._t)("The user you called is busy.");
      } else {
        reason = (0, _languageHandler._t)('Unknown failure: %(reason)s', {
          reason: hangupReason
        });
      }

      return /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_CallEvent_content"
      }, /*#__PURE__*/_react.default.createElement(_InfoTooltip.default, {
        tooltip: reason,
        className: "mx_CallEvent_content_tooltip",
        kind: _InfoTooltip.InfoTooltipKind.Warning
      }), (0, _languageHandler._t)("Connection failed"), this.renderCallBackButton((0, _languageHandler._t)("Retry")));
    }

    if (state === _call.CallState.Connected) {
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_CallEvent_content"
      }, /*#__PURE__*/_react.default.createElement(_Clock.default, {
        seconds: this.state.length
      }));
    }

    if (state === _call.CallState.Connecting) {
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_CallEvent_content"
      }, (0, _languageHandler._t)("Connecting"));
    }

    if (state === _CallEventGrouper.CustomCallState.Missed) {
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_CallEvent_content"
      }, (0, _languageHandler._t)("Missed call"), this.renderCallBackButton((0, _languageHandler._t)("Call back")));
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_CallEvent_content"
    }, (0, _languageHandler._t)("The call is in an unknown state!"));
  }

  render() {
    const event = this.props.mxEvent;
    const sender = event.sender ? event.sender.name : event.getSender();
    const isVoice = this.props.callEventGrouper.isVoice;
    const callType = isVoice ? (0, _languageHandler._t)("Voice call") : (0, _languageHandler._t)("Video call");
    const callState = this.state.callState;
    const hangupReason = this.props.callEventGrouper.hangupReason;
    const content = this.renderContent(callState);
    const className = (0, _classnames.default)("mx_CallEvent", {
      mx_CallEvent_voice: isVoice,
      mx_CallEvent_video: !isVoice,
      mx_CallEvent_narrow: this.state.narrow,
      mx_CallEvent_missed: callState === _CallEventGrouper.CustomCallState.Missed,
      mx_CallEvent_noAnswer: callState === _call.CallState.Ended && hangupReason === _call.CallErrorCode.InviteTimeout,
      mx_CallEvent_rejected: callState === _call.CallState.Ended && this.props.callEventGrouper.gotRejected
    });
    let silenceIcon;

    if (this.state.narrow && this.state.callState === _call.CallState.Ringing) {
      silenceIcon = this.renderSilenceIcon();
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_CallEvent_wrapper",
      ref: this.wrapperElement
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: className
    }, silenceIcon, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_CallEvent_info"
    }, /*#__PURE__*/_react.default.createElement(_MemberAvatar.default, {
      member: event.sender,
      width: 32,
      height: 32
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_CallEvent_info_basic"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_CallEvent_sender"
    }, sender), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_CallEvent_type"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_CallEvent_type_icon"
    }), callType))), content));
  }

}

exports.default = CallEvent;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,