"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _languageHandler = require("../../../languageHandler");

var _Modal = _interopRequireDefault(require("../../../Modal"));

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _Media = require("../../../customisations/Media");

var _RoomAvatar = _interopRequireDefault(require("../avatars/RoomAvatar"));

var _ImageView = _interopRequireDefault(require("../elements/ImageView"));

var _dec, _class;

let RoomAvatarEvent = (_dec = (0, _replaceableComponent.replaceableComponent)("views.messages.RoomAvatarEvent"), _dec(_class = class RoomAvatarEvent extends _react.default.Component {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "onAvatarClick", () => {
      const cli = _MatrixClientPeg.MatrixClientPeg.get();

      const ev = this.props.mxEvent;
      const httpUrl = (0, _Media.mediaFromMxc)(ev.getContent().url).srcHttp;
      const room = cli.getRoom(this.props.mxEvent.getRoomId());
      const text = (0, _languageHandler._t)('%(senderDisplayName)s changed the avatar for %(roomName)s', {
        senderDisplayName: ev.sender && ev.sender.name ? ev.sender.name : ev.getSender(),
        roomName: room ? room.name : ''
      });
      const params = {
        src: httpUrl,
        name: text
      };

      _Modal.default.createDialog(_ImageView.default, params, "mx_Dialog_lightbox", null, true);
    });
  }

  render() {
    const ev = this.props.mxEvent;
    const senderDisplayName = ev.sender && ev.sender.name ? ev.sender.name : ev.getSender();

    if (!ev.getContent().url || ev.getContent().url.trim().length === 0) {
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_TextualEvent"
      }, (0, _languageHandler._t)('%(senderDisplayName)s removed the room avatar.', {
        senderDisplayName
      }));
    }

    const room = _MatrixClientPeg.MatrixClientPeg.get().getRoom(ev.getRoomId()); // Provide all arguments to RoomAvatar via oobData because the avatar is historic


    const oobData = {
      avatarUrl: ev.getContent().url,
      name: room ? room.name : ""
    };
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_RoomAvatarEvent"
    }, (0, _languageHandler._t)('%(senderDisplayName)s changed the room avatar to <img/>', {
      senderDisplayName: senderDisplayName
    }, {
      'img': () => /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        key: "avatar",
        className: "mx_RoomAvatarEvent_avatar",
        onClick: this.onAvatarClick
      }, /*#__PURE__*/_react.default.createElement(_RoomAvatar.default, {
        width: 14,
        height: 14,
        oobData: oobData
      }))
    }));
  }

}) || _class);
exports.default = RoomAvatarEvent;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,