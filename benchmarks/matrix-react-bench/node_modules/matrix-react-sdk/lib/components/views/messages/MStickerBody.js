"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _MImageBody = _interopRequireDefault(require("./MImageBody"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _ContentMessages = require("../../../ContentMessages");

var _Tooltip = _interopRequireDefault(require("../elements/Tooltip"));

var _dec, _class;

let MStickerBody = (_dec = (0, _replaceableComponent.replaceableComponent)("views.messages.MStickerBody"), _dec(_class = class MStickerBody extends _MImageBody.default {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "onClick", ev => {
      ev.preventDefault();

      if (!this.state.showImage) {
        this.showImage();
      }
    });
  }

  // MStickerBody doesn't need a wrapping `<a href=...>`, but it does need extra padding
  // which is added by mx_MStickerBody_wrapper
  wrapImage(contentUrl, children) {
    let onClick = null;

    if (!this.state.showImage) {
      onClick = this.onClick;
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_MStickerBody_wrapper",
      onClick: onClick
    }, " ", children, " ");
  } // Placeholder to show in place of the sticker image if
  // img onLoad hasn't fired yet.


  getPlaceholder(width, height) {
    var _this$props$mxEvent$g;

    if ((_this$props$mxEvent$g = this.props.mxEvent.getContent().info) !== null && _this$props$mxEvent$g !== void 0 && _this$props$mxEvent$g[_ContentMessages.BLURHASH_FIELD]) return super.getPlaceholder(width, height);
    return /*#__PURE__*/_react.default.createElement("img", {
      src: require("../../../../res/img/icons-show-stickers.svg"),
      width: "75",
      height: "75"
    });
  } // Tooltip to show on mouse over


  getTooltip() {
    const content = this.props.mxEvent && this.props.mxEvent.getContent();
    if (!content || !content.body || !content.info || !content.info.w) return null;
    return /*#__PURE__*/_react.default.createElement("div", {
      style: {
        left: content.info.w + 'px'
      },
      className: "mx_MStickerBody_tooltip"
    }, /*#__PURE__*/_react.default.createElement(_Tooltip.default, {
      label: content.body
    }));
  } // Don't show "Download this_file.png ..."


  getFileBody() {
    return null;
  }

}) || _class);
exports.default = MStickerBody;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL21lc3NhZ2VzL01TdGlja2VyQm9keS50c3giXSwibmFtZXMiOlsiTVN0aWNrZXJCb2R5IiwiTUltYWdlQm9keSIsImV2IiwicHJldmVudERlZmF1bHQiLCJzdGF0ZSIsInNob3dJbWFnZSIsIndyYXBJbWFnZSIsImNvbnRlbnRVcmwiLCJjaGlsZHJlbiIsIm9uQ2xpY2siLCJnZXRQbGFjZWhvbGRlciIsIndpZHRoIiwiaGVpZ2h0IiwicHJvcHMiLCJteEV2ZW50IiwiZ2V0Q29udGVudCIsImluZm8iLCJCTFVSSEFTSF9GSUVMRCIsInJlcXVpcmUiLCJnZXRUb29sdGlwIiwiY29udGVudCIsImJvZHkiLCJ3IiwibGVmdCIsImdldEZpbGVCb2R5Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQWdCQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7OztJQUdxQkEsWSxXQURwQixnREFBcUIsNkJBQXJCLEMsZ0JBQUQsTUFDcUJBLFlBRHJCLFNBQzBDQyxtQkFEMUMsQ0FDcUQ7QUFBQTtBQUFBO0FBQUEsbURBRTVCQyxFQUFELElBQTBCO0FBQzFDQSxNQUFBQSxFQUFFLENBQUNDLGNBQUg7O0FBQ0EsVUFBSSxDQUFDLEtBQUtDLEtBQUwsQ0FBV0MsU0FBaEIsRUFBMkI7QUFDdkIsYUFBS0EsU0FBTDtBQUNIO0FBQ0osS0FQZ0Q7QUFBQTs7QUFTakQ7QUFDQTtBQUNVQyxFQUFBQSxTQUFTLENBQUNDLFVBQUQsRUFBcUJDLFFBQXJCLEVBQTZEO0FBQzVFLFFBQUlDLE9BQU8sR0FBRyxJQUFkOztBQUNBLFFBQUksQ0FBQyxLQUFLTCxLQUFMLENBQVdDLFNBQWhCLEVBQTJCO0FBQ3ZCSSxNQUFBQSxPQUFPLEdBQUcsS0FBS0EsT0FBZjtBQUNIOztBQUNELHdCQUFPO0FBQUssTUFBQSxTQUFTLEVBQUMseUJBQWY7QUFBeUMsTUFBQSxPQUFPLEVBQUVBO0FBQWxELFlBQThERCxRQUE5RCxNQUFQO0FBQ0gsR0FqQmdELENBbUJqRDtBQUNBOzs7QUFDVUUsRUFBQUEsY0FBYyxDQUFDQyxLQUFELEVBQWdCQyxNQUFoQixFQUE2QztBQUFBOztBQUNqRSxpQ0FBSSxLQUFLQyxLQUFMLENBQVdDLE9BQVgsQ0FBbUJDLFVBQW5CLEdBQWdDQyxJQUFwQyxrREFBSSxzQkFBdUNDLCtCQUF2QyxDQUFKLEVBQTRELE9BQU8sTUFBTVAsY0FBTixDQUFxQkMsS0FBckIsRUFBNEJDLE1BQTVCLENBQVA7QUFDNUQsd0JBQU87QUFBSyxNQUFBLEdBQUcsRUFBRU0sT0FBTyxDQUFDLDZDQUFELENBQWpCO0FBQWtFLE1BQUEsS0FBSyxFQUFDLElBQXhFO0FBQTZFLE1BQUEsTUFBTSxFQUFDO0FBQXBGLE1BQVA7QUFDSCxHQXhCZ0QsQ0EwQmpEOzs7QUFDVUMsRUFBQUEsVUFBVSxHQUFnQjtBQUNoQyxVQUFNQyxPQUFPLEdBQUcsS0FBS1AsS0FBTCxDQUFXQyxPQUFYLElBQXNCLEtBQUtELEtBQUwsQ0FBV0MsT0FBWCxDQUFtQkMsVUFBbkIsRUFBdEM7QUFFQSxRQUFJLENBQUNLLE9BQUQsSUFBWSxDQUFDQSxPQUFPLENBQUNDLElBQXJCLElBQTZCLENBQUNELE9BQU8sQ0FBQ0osSUFBdEMsSUFBOEMsQ0FBQ0ksT0FBTyxDQUFDSixJQUFSLENBQWFNLENBQWhFLEVBQW1FLE9BQU8sSUFBUDtBQUVuRSx3QkFBTztBQUFLLE1BQUEsS0FBSyxFQUFFO0FBQUVDLFFBQUFBLElBQUksRUFBRUgsT0FBTyxDQUFDSixJQUFSLENBQWFNLENBQWIsR0FBaUI7QUFBekIsT0FBWjtBQUE2QyxNQUFBLFNBQVMsRUFBQztBQUF2RCxvQkFDSCw2QkFBQyxnQkFBRDtBQUFTLE1BQUEsS0FBSyxFQUFFRixPQUFPLENBQUNDO0FBQXhCLE1BREcsQ0FBUDtBQUdILEdBbkNnRCxDQXFDakQ7OztBQUNVRyxFQUFBQSxXQUFXLEdBQUc7QUFDcEIsV0FBTyxJQUFQO0FBQ0g7O0FBeENnRCxDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbkNvcHlyaWdodCAyMDE4IE5ldyBWZWN0b3IgTHRkXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBNSW1hZ2VCb2R5IGZyb20gJy4vTUltYWdlQm9keSc7XG5pbXBvcnQgeyByZXBsYWNlYWJsZUNvbXBvbmVudCB9IGZyb20gXCIuLi8uLi8uLi91dGlscy9yZXBsYWNlYWJsZUNvbXBvbmVudFwiO1xuaW1wb3J0IHsgQkxVUkhBU0hfRklFTEQgfSBmcm9tIFwiLi4vLi4vLi4vQ29udGVudE1lc3NhZ2VzXCI7XG5pbXBvcnQgVG9vbHRpcCBmcm9tIFwiLi4vZWxlbWVudHMvVG9vbHRpcFwiO1xuXG5AcmVwbGFjZWFibGVDb21wb25lbnQoXCJ2aWV3cy5tZXNzYWdlcy5NU3RpY2tlckJvZHlcIilcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1TdGlja2VyQm9keSBleHRlbmRzIE1JbWFnZUJvZHkge1xuICAgIC8vIE1vc3RseSBlbXB0eSB0byBwcmV2ZW50IGRlZmF1bHQgYmVoYXZpb3VyIG9mIE1JbWFnZUJvZHlcbiAgICBwcm90ZWN0ZWQgb25DbGljayA9IChldjogUmVhY3QuTW91c2VFdmVudCkgPT4ge1xuICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBpZiAoIXRoaXMuc3RhdGUuc2hvd0ltYWdlKSB7XG4gICAgICAgICAgICB0aGlzLnNob3dJbWFnZSgpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8vIE1TdGlja2VyQm9keSBkb2Vzbid0IG5lZWQgYSB3cmFwcGluZyBgPGEgaHJlZj0uLi4+YCwgYnV0IGl0IGRvZXMgbmVlZCBleHRyYSBwYWRkaW5nXG4gICAgLy8gd2hpY2ggaXMgYWRkZWQgYnkgbXhfTVN0aWNrZXJCb2R5X3dyYXBwZXJcbiAgICBwcm90ZWN0ZWQgd3JhcEltYWdlKGNvbnRlbnRVcmw6IHN0cmluZywgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZSk6IEpTWC5FbGVtZW50IHtcbiAgICAgICAgbGV0IG9uQ2xpY2sgPSBudWxsO1xuICAgICAgICBpZiAoIXRoaXMuc3RhdGUuc2hvd0ltYWdlKSB7XG4gICAgICAgICAgICBvbkNsaWNrID0gdGhpcy5vbkNsaWNrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cIm14X01TdGlja2VyQm9keV93cmFwcGVyXCIgb25DbGljaz17b25DbGlja30+IHsgY2hpbGRyZW4gfSA8L2Rpdj47XG4gICAgfVxuXG4gICAgLy8gUGxhY2Vob2xkZXIgdG8gc2hvdyBpbiBwbGFjZSBvZiB0aGUgc3RpY2tlciBpbWFnZSBpZlxuICAgIC8vIGltZyBvbkxvYWQgaGFzbid0IGZpcmVkIHlldC5cbiAgICBwcm90ZWN0ZWQgZ2V0UGxhY2Vob2xkZXIod2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpOiBKU1guRWxlbWVudCB7XG4gICAgICAgIGlmICh0aGlzLnByb3BzLm14RXZlbnQuZ2V0Q29udGVudCgpLmluZm8/LltCTFVSSEFTSF9GSUVMRF0pIHJldHVybiBzdXBlci5nZXRQbGFjZWhvbGRlcih3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgcmV0dXJuIDxpbWcgc3JjPXtyZXF1aXJlKFwiLi4vLi4vLi4vLi4vcmVzL2ltZy9pY29ucy1zaG93LXN0aWNrZXJzLnN2Z1wiKX0gd2lkdGg9XCI3NVwiIGhlaWdodD1cIjc1XCIgLz47XG4gICAgfVxuXG4gICAgLy8gVG9vbHRpcCB0byBzaG93IG9uIG1vdXNlIG92ZXJcbiAgICBwcm90ZWN0ZWQgZ2V0VG9vbHRpcCgpOiBKU1guRWxlbWVudCB7XG4gICAgICAgIGNvbnN0IGNvbnRlbnQgPSB0aGlzLnByb3BzLm14RXZlbnQgJiYgdGhpcy5wcm9wcy5teEV2ZW50LmdldENvbnRlbnQoKTtcblxuICAgICAgICBpZiAoIWNvbnRlbnQgfHwgIWNvbnRlbnQuYm9keSB8fCAhY29udGVudC5pbmZvIHx8ICFjb250ZW50LmluZm8udykgcmV0dXJuIG51bGw7XG5cbiAgICAgICAgcmV0dXJuIDxkaXYgc3R5bGU9e3sgbGVmdDogY29udGVudC5pbmZvLncgKyAncHgnIH19IGNsYXNzTmFtZT1cIm14X01TdGlja2VyQm9keV90b29sdGlwXCI+XG4gICAgICAgICAgICA8VG9vbHRpcCBsYWJlbD17Y29udGVudC5ib2R5fSAvPlxuICAgICAgICA8L2Rpdj47XG4gICAgfVxuXG4gICAgLy8gRG9uJ3Qgc2hvdyBcIkRvd25sb2FkIHRoaXNfZmlsZS5wbmcgLi4uXCJcbiAgICBwcm90ZWN0ZWQgZ2V0RmlsZUJvZHkoKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn1cbiJdfQ==