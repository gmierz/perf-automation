"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _highlight = _interopRequireDefault(require("highlight.js"));

var _event = require("matrix-js-sdk/src/@types/event");

var HtmlUtils = _interopRequireWildcard(require("../../../HtmlUtils"));

var _DateUtils = require("../../../DateUtils");

var _Modal = _interopRequireDefault(require("../../../Modal"));

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _languageHandler = require("../../../languageHandler");

var ContextMenu = _interopRequireWildcard(require("../../structures/ContextMenu"));

var _SettingsStore = _interopRequireDefault(require("../../../settings/SettingsStore"));

var _ReplyChain = _interopRequireDefault(require("../elements/ReplyChain"));

var _pillify = require("../../../utils/pillify");

var _IntegrationManagers = require("../../../integrations/IntegrationManagers");

var _Permalinks = require("../../../utils/permalinks/Permalinks");

var _strings = require("../../../utils/strings");

var _AccessibleTooltipButton = _interopRequireDefault(require("../elements/AccessibleTooltipButton"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _UIStore = _interopRequireDefault(require("../../../stores/UIStore"));

var _actions = require("../../../dispatcher/actions");

var _GenericTextContextMenu = _interopRequireDefault(require("../context_menus/GenericTextContextMenu"));

var _Spoiler = _interopRequireDefault(require("../elements/Spoiler"));

var _QuestionDialog = _interopRequireDefault(require("../dialogs/QuestionDialog"));

var _MessageEditHistoryDialog = _interopRequireDefault(require("../dialogs/MessageEditHistoryDialog"));

var _EditMessageComposer = _interopRequireDefault(require("../rooms/EditMessageComposer"));

var _LinkPreviewGroup = _interopRequireDefault(require("../rooms/LinkPreviewGroup"));

var _RoomContext = _interopRequireDefault(require("../../../contexts/RoomContext"));

var _dec, _class, _class2, _temp;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const MAX_HIGHLIGHT_LENGTH = 4096;
let TextualBody = (_dec = (0, _replaceableComponent.replaceableComponent)("views.messages.TextualBody"), _dec(_class = (_temp = _class2 = class TextualBody extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "contentRef", /*#__PURE__*/(0, _react.createRef)());
    (0, _defineProperty2.default)(this, "unmounted", false);
    (0, _defineProperty2.default)(this, "pills", []);
    (0, _defineProperty2.default)(this, "context", void 0);
    (0, _defineProperty2.default)(this, "onCancelClick", () => {
      this.setState({
        widgetHidden: true
      }); // FIXME: persist this somewhere smarter than local storage

      if (global.localStorage) {
        global.localStorage.setItem("hide_preview_" + this.props.mxEvent.getId(), "1");
      }

      this.forceUpdate();
    });
    (0, _defineProperty2.default)(this, "onEmoteSenderClick", () => {
      const mxEvent = this.props.mxEvent;

      _dispatcher.default.dispatch({
        action: _actions.Action.ComposerInsert,
        userId: mxEvent.getSender(),
        timelineRenderingType: this.context.timelineRenderingType
      });
    });
    (0, _defineProperty2.default)(this, "getEventTileOps", () => ({
      isWidgetHidden: () => {
        return this.state.widgetHidden;
      },
      unhideWidget: () => {
        this.setState({
          widgetHidden: false
        });

        if (global.localStorage) {
          global.localStorage.removeItem("hide_preview_" + this.props.mxEvent.getId());
        }
      }
    }));
    (0, _defineProperty2.default)(this, "onStarterLinkClick", (starterLink, ev) => {
      ev.preventDefault(); // We need to add on our scalar token to the starter link, but we may not have one!
      // In addition, we can't fetch one on click and then go to it immediately as that
      // is then treated as a popup!
      // We can get around this by fetching one now and showing a "confirmation dialog" (hurr hurr)
      // which requires the user to click through and THEN we can open the link in a new tab because
      // the window.open command occurs in the same stack frame as the onClick callback.

      const managers = _IntegrationManagers.IntegrationManagers.sharedInstance();

      if (!managers.hasManager()) {
        managers.openNoManagerDialog();
        return;
      } // Go fetch a scalar token


      const integrationManager = managers.getPrimaryManager();
      const scalarClient = integrationManager.getScalarClient();
      scalarClient.connect().then(() => {
        const completeUrl = scalarClient.getStarterLink(starterLink);
        const integrationsUrl = integrationManager.uiUrl;

        _Modal.default.createTrackedDialog('Add an integration', '', _QuestionDialog.default, {
          title: (0, _languageHandler._t)("Add an Integration"),
          description: /*#__PURE__*/_react.default.createElement("div", null, (0, _languageHandler._t)("You are about to be taken to a third-party site so you can " + "authenticate your account for use with %(integrationsUrl)s. " + "Do you wish to continue?", {
            integrationsUrl: integrationsUrl
          })),
          button: (0, _languageHandler._t)("Continue"),

          onFinished(confirmed) {
            if (!confirmed) {
              return;
            }

            const width = window.screen.width > 1024 ? 1024 : window.screen.width;
            const height = window.screen.height > 800 ? 800 : window.screen.height;
            const left = (window.screen.width - width) / 2;
            const top = (window.screen.height - height) / 2;
            const features = `height=${height}, width=${width}, top=${top}, left=${left},`;
            const wnd = window.open(completeUrl, '_blank', features);
            wnd.opener = null;
          }

        });
      });
    });
    (0, _defineProperty2.default)(this, "openHistoryDialog", async () => {
      _Modal.default.createDialog(_MessageEditHistoryDialog.default, {
        mxEvent: this.props.mxEvent
      });
    });
    this.state = {
      links: [],
      widgetHidden: false
    };
  }

  componentDidMount() {
    if (!this.props.editState) {
      this.applyFormatting();
    }
  }

  applyFormatting() {
    const showLineNumbers = _SettingsStore.default.getValue("showCodeLineNumbers");

    this.activateSpoilers([this.contentRef.current]); // pillifyLinks BEFORE linkifyElement because plain room/user URLs in the composer
    // are still sent as plaintext URLs. If these are ever pillified in the composer,
    // we should be pillify them here by doing the linkifying BEFORE the pillifying.

    (0, _pillify.pillifyLinks)([this.contentRef.current], this.props.mxEvent, this.pills);
    HtmlUtils.linkifyElement(this.contentRef.current);
    this.calculateUrlPreview();

    if (this.props.mxEvent.getContent().format === "org.matrix.custom.html") {
      // Handle expansion and add buttons
      const pres = _reactDom.default.findDOMNode(this).getElementsByTagName("pre");

      if (pres.length > 0) {
        for (let i = 0; i < pres.length; i++) {
          // If there already is a div wrapping the codeblock we want to skip this.
          // This happens after the codeblock was edited.
          if (pres[i].parentElement.className == "mx_EventTile_pre_container") continue; // Add code element if it's missing since we depend on it

          if (pres[i].getElementsByTagName("code").length == 0) {
            this.addCodeElement(pres[i]);
          } // Wrap a div around <pre> so that the copy button can be correctly positioned
          // when the <pre> overflows and is scrolled horizontally.


          const div = this.wrapInDiv(pres[i]);
          this.handleCodeBlockExpansion(pres[i]);
          this.addCodeExpansionButton(div, pres[i]);
          this.addCodeCopyButton(div);

          if (showLineNumbers) {
            this.addLineNumbers(pres[i]);
          }
        }
      } // Highlight code


      const codes = _reactDom.default.findDOMNode(this).getElementsByTagName("code");

      if (codes.length > 0) {
        // Do this asynchronously: parsing code takes time and we don't
        // need to block the DOM update on it.
        setTimeout(() => {
          if (this.unmounted) return;

          for (let i = 0; i < codes.length; i++) {
            this.highlightCode(codes[i]);
          }
        }, 10);
      }
    }
  }

  addCodeElement(pre) {
    const code = document.createElement("code");
    code.append(...pre.childNodes);
    pre.appendChild(code);
  }

  addCodeExpansionButton(div, pre) {
    // Calculate how many percent does the pre element take up.
    // If it's less than 30% we don't add the expansion button.
    // We also round the number as it sometimes can be 29.99...
    const percentageOfViewport = Math.round(pre.offsetHeight / _UIStore.default.instance.windowHeight * 100); // TODO: additionally show the button if it's an expanded quoted message

    if (percentageOfViewport < 30) return;
    const button = document.createElement("span");
    button.className = "mx_EventTile_button ";

    if (pre.className == "mx_EventTile_collapsedCodeBlock") {
      button.className += "mx_EventTile_expandButton";
    } else {
      button.className += "mx_EventTile_collapseButton";
    }

    button.onclick = async () => {
      button.className = "mx_EventTile_button ";

      if (pre.className == "mx_EventTile_collapsedCodeBlock") {
        pre.className = "";
        button.className += "mx_EventTile_collapseButton";
      } else {
        pre.className = "mx_EventTile_collapsedCodeBlock";
        button.className += "mx_EventTile_expandButton";
      } // By expanding/collapsing we changed
      // the height, therefore we call this


      this.props.onHeightChanged();
    };

    div.appendChild(button);
  }

  addCodeCopyButton(div) {
    const button = document.createElement("span");
    button.className = "mx_EventTile_button mx_EventTile_copyButton "; // Check if expansion button exists. If so
    // we put the copy button to the bottom

    const expansionButtonExists = div.getElementsByClassName("mx_EventTile_button");
    if (expansionButtonExists.length > 0) button.className += "mx_EventTile_buttonBottom";

    button.onclick = async () => {
      const copyCode = button.parentElement.getElementsByTagName("code")[0];
      const successful = await (0, _strings.copyPlaintext)(copyCode.textContent);
      const buttonRect = button.getBoundingClientRect();
      const {
        close
      } = ContextMenu.createMenu(_GenericTextContextMenu.default, _objectSpread(_objectSpread({}, (0, ContextMenu.toRightOf)(buttonRect, 2)), {}, {
        message: successful ? (0, _languageHandler._t)('Copied!') : (0, _languageHandler._t)('Failed to copy')
      }));
      button.onmouseleave = close;
    };

    div.appendChild(button);
  }

  wrapInDiv(pre) {
    const div = document.createElement("div");
    div.className = "mx_EventTile_pre_container"; // Insert containing div in place of <pre> block

    pre.parentNode.replaceChild(div, pre); // Append <pre> block and copy button to container

    div.appendChild(pre);
    return div;
  }

  handleCodeBlockExpansion(pre) {
    if (!_SettingsStore.default.getValue("expandCodeByDefault")) {
      pre.className = "mx_EventTile_collapsedCodeBlock";
    }
  }

  addLineNumbers(pre) {
    // Calculate number of lines in pre
    const number = pre.innerHTML.replace(/\n(<\/code>)?$/, "").split(/\n/).length;
    const lineNumbers = document.createElement('span');
    lineNumbers.className = 'mx_EventTile_lineNumbers'; // Iterate through lines starting with 1 (number of the first line is 1)

    for (let i = 1; i <= number; i++) {
      const s = document.createElement('span');
      s.textContent = i.toString();
      lineNumbers.appendChild(s);
    }

    pre.prepend(lineNumbers);
    pre.append(document.createElement('span'));
  }

  highlightCode(code) {
    if (code.textContent.length > MAX_HIGHLIGHT_LENGTH) {
      console.log("Code block is bigger than highlight limit (" + code.textContent.length + " > " + MAX_HIGHLIGHT_LENGTH + "): not highlighting");
      return;
    }

    let advertisedLang;

    for (const cl of code.className.split(/\s+/)) {
      if (cl.startsWith('language-')) {
        const maybeLang = cl.split('-', 2)[1];

        if (_highlight.default.getLanguage(maybeLang)) {
          advertisedLang = maybeLang;
          break;
        }
      }
    }

    if (advertisedLang) {
      // If the code says what language it is, highlight it in that language
      // We don't use highlightElement here because we can't force language detection
      // off. It should use the one we've found in the CSS class but we'd rather pass
      // it in explicitly to make sure.
      code.innerHTML = _highlight.default.highlight(advertisedLang, code.textContent).value;
    } else if (_SettingsStore.default.getValue("enableSyntaxHighlightLanguageDetection") && code.parentElement instanceof HTMLPreElement) {
      // User has language detection enabled and the code is within a pre
      // we only auto-highlight if the code block is in a pre), so highlight
      // the block with auto-highlighting enabled.
      // We pass highlightjs the text to highlight rather than letting it
      // work on the DOM with highlightElement because that also adds CSS
      // classes to the pre/code element that we don't want (the CSS
      // conflicts with our own).
      code.innerHTML = _highlight.default.highlightAuto(code.textContent).value;
    }
  }

  componentDidUpdate(prevProps) {
    if (!this.props.editState) {
      const stoppedEditing = prevProps.editState && !this.props.editState;
      const messageWasEdited = prevProps.replacingEventId !== this.props.replacingEventId;

      if (messageWasEdited || stoppedEditing) {
        this.applyFormatting();
      }
    }
  }

  componentWillUnmount() {
    this.unmounted = true;
    (0, _pillify.unmountPills)(this.pills);
  }

  shouldComponentUpdate(nextProps, nextState) {
    //console.info("shouldComponentUpdate: ShowUrlPreview for %s is %s", this.props.mxEvent.getId(), this.props.showUrlPreview);
    // exploit that events are immutable :)
    return nextProps.mxEvent.getId() !== this.props.mxEvent.getId() || nextProps.highlights !== this.props.highlights || nextProps.replacingEventId !== this.props.replacingEventId || nextProps.highlightLink !== this.props.highlightLink || nextProps.showUrlPreview !== this.props.showUrlPreview || nextProps.editState !== this.props.editState || nextState.links !== this.state.links || nextState.widgetHidden !== this.state.widgetHidden;
  }

  calculateUrlPreview() {
    //console.info("calculateUrlPreview: ShowUrlPreview for %s is %s", this.props.mxEvent.getId(), this.props.showUrlPreview);
    if (this.props.showUrlPreview) {
      // pass only the first child which is the event tile otherwise this recurses on edited events
      let links = this.findLinks([this.contentRef.current]);

      if (links.length) {
        // de-duplicate the links using a set here maintains the order
        links = Array.from(new Set(links));
        this.setState({
          links
        }); // lazy-load the hidden state of the preview widget from localstorage

        if (window.localStorage) {
          const hidden = !!window.localStorage.getItem("hide_preview_" + this.props.mxEvent.getId());
          this.setState({
            widgetHidden: hidden
          });
        }
      } else if (this.state.links.length) {
        this.setState({
          links: []
        });
      }
    }
  }

  activateSpoilers(nodes) {
    let node = nodes[0];

    while (node) {
      if (node.tagName === "SPAN" && typeof node.getAttribute("data-mx-spoiler") === "string") {
        const spoilerContainer = document.createElement('span');
        const reason = node.getAttribute("data-mx-spoiler");
        node.removeAttribute("data-mx-spoiler"); // we don't want to recurse

        const spoiler = /*#__PURE__*/_react.default.createElement(_Spoiler.default, {
          reason: reason,
          contentHtml: node.outerHTML
        });

        _reactDom.default.render(spoiler, spoilerContainer);

        node.parentNode.replaceChild(spoilerContainer, node);
        node = spoilerContainer;
      }

      if (node.childNodes && node.childNodes.length) {
        this.activateSpoilers(node.childNodes);
      }

      node = node.nextSibling;
    }
  }

  findLinks(nodes) {
    let links = [];

    for (let i = 0; i < nodes.length; i++) {
      const node = nodes[i];

      if (node.tagName === "A" && node.getAttribute("href")) {
        if (this.isLinkPreviewable(node)) {
          links.push(node.getAttribute("href"));
        }
      } else if (node.tagName === "PRE" || node.tagName === "CODE" || node.tagName === "BLOCKQUOTE") {
        continue;
      } else if (node.children && node.children.length) {
        links = links.concat(this.findLinks(node.children));
      }
    }

    return links;
  }

  isLinkPreviewable(node) {
    // don't try to preview relative links
    if (!node.getAttribute("href").startsWith("http://") && !node.getAttribute("href").startsWith("https://")) {
      return false;
    } // as a random heuristic to avoid highlighting things like "foo.pl"
    // we require the linked text to either include a / (either from http://
    // or from a full foo.bar/baz style schemeless URL) - or be a markdown-style
    // link, in which case we check the target text differs from the link value.
    // TODO: make this configurable?


    if (node.textContent.indexOf("/") > -1) {
      return true;
    } else {
      const url = node.getAttribute("href");
      const host = url.match(/^https?:\/\/(.*?)(\/|$)/)[1]; // never preview permalinks (if anything we should give a smart
      // preview of the room/user they point to: nobody needs to be reminded
      // what the matrix.to site looks like).

      if ((0, _Permalinks.isPermalinkHost)(host)) return false;

      if (node.textContent.toLowerCase().trim().startsWith(host.toLowerCase())) {
        // it's a "foo.pl" style link
        return false;
      } else {
        // it's a [foo bar](http://foo.com) style link
        return true;
      }
    }
  }

  renderEditedMarker() {
    const date = this.props.mxEvent.replacingEventDate();
    const dateString = date && (0, _DateUtils.formatDate)(date);

    const tooltip = /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_Tooltip_title"
    }, (0, _languageHandler._t)("Edited at %(date)s", {
      date: dateString
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_Tooltip_sub"
    }, (0, _languageHandler._t)("Click to view edits")));

    return /*#__PURE__*/_react.default.createElement(_AccessibleTooltipButton.default, {
      className: "mx_EventTile_edited",
      onClick: this.openHistoryDialog,
      title: (0, _languageHandler._t)("Edited at %(date)s. Click to view edits.", {
        date: dateString
      }),
      tooltip: tooltip
    }, /*#__PURE__*/_react.default.createElement("span", null, `(${(0, _languageHandler._t)("edited")})`));
  }

  render() {
    if (this.props.editState) {
      return /*#__PURE__*/_react.default.createElement(_EditMessageComposer.default, {
        editState: this.props.editState,
        className: "mx_EventTile_content"
      });
    }

    const mxEvent = this.props.mxEvent;
    const content = mxEvent.getContent(); // only strip reply if this is the original replying event, edits thereafter do not have the fallback

    const stripReply = !mxEvent.replacingEvent() && !!_ReplyChain.default.getParentEventId(mxEvent);
    let body = HtmlUtils.bodyToHtml(content, this.props.highlights, {
      disableBigEmoji: content.msgtype === _event.MsgType.Emote || !_SettingsStore.default.getValue('TextualBody.enableBigEmoji'),
      // Part of Replies fallback support
      stripReplyFallback: stripReply,
      ref: this.contentRef,
      returnString: false
    });

    if (this.props.replacingEventId) {
      body = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, body, this.renderEditedMarker());
    }

    if (this.props.highlightLink) {
      body = /*#__PURE__*/_react.default.createElement("a", {
        href: this.props.highlightLink
      }, body);
    } else if (content.data && typeof content.data["org.matrix.neb.starter_link"] === "string") {
      body = /*#__PURE__*/_react.default.createElement("a", {
        href: "#",
        onClick: this.onStarterLinkClick.bind(this, content.data["org.matrix.neb.starter_link"])
      }, body);
    }

    let widgets;

    if (this.state.links.length && !this.state.widgetHidden && this.props.showUrlPreview) {
      widgets = /*#__PURE__*/_react.default.createElement(_LinkPreviewGroup.default, {
        links: this.state.links,
        mxEvent: this.props.mxEvent,
        onCancelClick: this.onCancelClick,
        onHeightChanged: this.props.onHeightChanged
      });
    }

    switch (content.msgtype) {
      case _event.MsgType.Emote:
        return /*#__PURE__*/_react.default.createElement("div", {
          className: "mx_MEmoteBody mx_EventTile_content"
        }, "*\xA0", /*#__PURE__*/_react.default.createElement("span", {
          className: "mx_MEmoteBody_sender",
          onClick: this.onEmoteSenderClick
        }, mxEvent.sender ? mxEvent.sender.name : mxEvent.getSender()), "\xA0", body, widgets);

      case _event.MsgType.Notice:
        return /*#__PURE__*/_react.default.createElement("div", {
          className: "mx_MNoticeBody mx_EventTile_content"
        }, body, widgets);

      default:
        // including "m.text"
        return /*#__PURE__*/_react.default.createElement("div", {
          className: "mx_MTextBody mx_EventTile_content"
        }, body, widgets);
    }
  }

}, (0, _defineProperty2.default)(_class2, "contextType", _RoomContext.default), _temp)) || _class);
exports.default = TextualBody;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,