"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DOWNLOAD_ICON_URL = void 0;
exports.computedStyle = computedStyle;
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _filesize = _interopRequireDefault(require("filesize"));

var _languageHandler = require("../../../languageHandler");

var _Modal = _interopRequireDefault(require("../../../Modal"));

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _Media = require("../../../customisations/Media");

var _ErrorDialog = _interopRequireDefault(require("../dialogs/ErrorDialog"));

var _EventTile = require("../rooms/EventTile");

var _FileUtils = require("../../../utils/FileUtils");

var _FileDownloader = require("../../../utils/FileDownloader");

var _TextWithTooltip = _interopRequireDefault(require("../elements/TextWithTooltip"));

var _logger = require("matrix-js-sdk/src/logger");

var _dec, _class, _class2, _temp;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

let DOWNLOAD_ICON_URL; // cached copy of the download.svg asset for the sandboxed iframe later on

exports.DOWNLOAD_ICON_URL = DOWNLOAD_ICON_URL;

async function cacheDownloadIcon() {
  if (DOWNLOAD_ICON_URL) return; // cached already
  // eslint-disable-next-line @typescript-eslint/no-var-requires

  const svg = await fetch(require("../../../../res/img/download.svg")).then(r => r.text());
  exports.DOWNLOAD_ICON_URL = DOWNLOAD_ICON_URL = "data:image/svg+xml;base64," + window.btoa(svg);
} // Cache the asset immediately
// noinspection JSIgnoredPromiseFromCall


cacheDownloadIcon(); // User supplied content can contain scripts, we have to be careful that
// we don't accidentally run those script within the same origin as the
// client. Otherwise those scripts written by remote users can read
// the access token and end-to-end keys that are in local storage.
//
// For attachments downloaded directly from the homeserver we can use
// Content-Security-Policy headers to disable script execution.
//
// But attachments with end-to-end encryption are more difficult to handle.
// We need to decrypt the attachment on the client and then display it.
// To display the attachment we need to turn the decrypted bytes into a URL.
//
// There are two ways to turn bytes into URLs, data URL and blob URLs.
// Data URLs aren't suitable for downloading a file because Chrome has a
// 2MB limit on the size of URLs that can be viewed in the browser or
// downloaded. This limit does not seem to apply when the url is used as
// the source attribute of an image tag.
//
// Blob URLs are generated using window.URL.createObjectURL and unfortunately
// for our purposes they inherit the origin of the page that created them.
// This means that any scripts that run when the URL is viewed will be able
// to access local storage.
//
// The easiest solution is to host the code that generates the blob URL on
// a different domain to the client.
// Another possibility is to generate the blob URL within a sandboxed iframe.
// The downside of using a second domain is that it complicates hosting,
// the downside of using a sandboxed iframe is that the browers are overly
// restrictive in what you are allowed to do with the generated URL.

/**
 * Get the current CSS style for a DOMElement.
 * @param {HTMLElement} element The element to get the current style of.
 * @return {string} The CSS style encoded as a string.
 */

function computedStyle(element) {
  if (!element) {
    return "";
  }

  const style = window.getComputedStyle(element, null);
  let cssText = style.cssText; // noinspection EqualityComparisonWithCoercionJS

  if (cssText == "") {
    // Firefox doesn't implement ".cssText" for computed styles.
    // https://bugzilla.mozilla.org/show_bug.cgi?id=137687
    for (let i = 0; i < style.length; i++) {
      cssText += style[i] + ":";
      cssText += style.getPropertyValue(style[i]) + ";";
    }
  }

  return cssText;
}

let MFileBody = (_dec = (0, _replaceableComponent.replaceableComponent)("views.messages.MFileBody"), _dec(_class = (_temp = _class2 = class MFileBody extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "iframe", /*#__PURE__*/(0, _react.createRef)());
    (0, _defineProperty2.default)(this, "dummyLink", /*#__PURE__*/(0, _react.createRef)());
    (0, _defineProperty2.default)(this, "userDidClick", false);
    (0, _defineProperty2.default)(this, "fileDownloader", new _FileDownloader.FileDownloader(() => this.iframe.current));
    (0, _defineProperty2.default)(this, "decryptFile", async () => {
      if (this.state.decryptedBlob) {
        return;
      }

      try {
        this.userDidClick = true;
        this.setState({
          decryptedBlob: await this.props.mediaEventHelper.sourceBlob.value
        });
      } catch (err) {
        _logger.logger.warn("Unable to decrypt attachment: ", err);

        _Modal.default.createTrackedDialog('Error decrypting attachment', '', _ErrorDialog.default, {
          title: (0, _languageHandler._t)("Error"),
          description: (0, _languageHandler._t)("Error decrypting attachment")
        });
      }
    });
    (0, _defineProperty2.default)(this, "onPlaceholderClick", async () => {
      const mediaHelper = this.props.mediaEventHelper;

      if (mediaHelper !== null && mediaHelper !== void 0 && mediaHelper.media.isEncrypted) {
        await this.decryptFile();
        this.downloadFile(this.fileName, this.linkText);
      } else {
        // As a button we're missing the `download` attribute for styling reasons, so
        // download with the file downloader.
        this.fileDownloader.download({
          blob: await mediaHelper.sourceBlob.value,
          name: this.fileName
        });
      }
    });
    this.state = {};
  }

  getContentUrl() {
    if (this.props.forExport) return null;
    const media = (0, _Media.mediaFromContent)(this.props.mxEvent.getContent());
    return media.srcHttp;
  }

  get content() {
    return this.props.mxEvent.getContent();
  }

  get fileName() {
    return this.content.body && this.content.body.length > 0 ? this.content.body : (0, _languageHandler._t)("Attachment");
  }

  get linkText() {
    return (0, _FileUtils.presentableTextForFile)(this.content);
  }

  downloadFile(fileName, text) {
    this.fileDownloader.download({
      blob: this.state.decryptedBlob,
      name: fileName,
      autoDownload: this.userDidClick,
      opts: {
        imgSrc: DOWNLOAD_ICON_URL,
        imgStyle: null,
        style: computedStyle(this.dummyLink.current),
        textContent: (0, _languageHandler._t)("Download %(text)s", {
          text
        })
      }
    });
  }

  componentDidUpdate(prevProps, prevState) {
    if (this.props.onHeightChanged && !prevState.decryptedBlob && this.state.decryptedBlob) {
      this.props.onHeightChanged();
    }
  }

  render() {
    var _this$props$mediaEven;

    const isEncrypted = (_this$props$mediaEven = this.props.mediaEventHelper) === null || _this$props$mediaEven === void 0 ? void 0 : _this$props$mediaEven.media.isEncrypted;
    const contentUrl = this.getContentUrl();
    const fileSize = this.content.info ? this.content.info.size : null;
    const fileType = this.content.info ? this.content.info.mimetype : "application/octet-stream";
    let placeholder = null;

    if (this.props.showGenericPlaceholder) {
      placeholder = /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        className: "mx_MediaBody mx_MFileBody_info",
        onClick: this.onPlaceholderClick
      }, /*#__PURE__*/_react.default.createElement("span", {
        className: "mx_MFileBody_info_icon"
      }), /*#__PURE__*/_react.default.createElement(_TextWithTooltip.default, {
        tooltip: (0, _FileUtils.presentableTextForFile)(this.content, (0, _languageHandler._t)("Attachment"), true)
      }, /*#__PURE__*/_react.default.createElement("span", {
        className: "mx_MFileBody_info_filename"
      }, (0, _FileUtils.presentableTextForFile)(this.content, (0, _languageHandler._t)("Attachment"), true, true))));
    }

    if (this.props.forExport) {
      var _content$file;

      const content = this.props.mxEvent.getContent(); // During export, the content url will point to the MSC, which will later point to a local url

      return /*#__PURE__*/_react.default.createElement("span", {
        className: "mx_MFileBody"
      }, /*#__PURE__*/_react.default.createElement("a", {
        href: ((_content$file = content.file) === null || _content$file === void 0 ? void 0 : _content$file.url) || content.url
      }, placeholder));
    }

    const showDownloadLink = this.props.tileShape || !this.props.showGenericPlaceholder;

    if (isEncrypted) {
      if (!this.state.decryptedBlob) {
        // Need to decrypt the attachment
        // Wait for the user to click on the link before downloading
        // and decrypting the attachment.
        // This button should actually Download because usercontent/ will try to click itself
        // but it is not guaranteed between various browsers' settings.
        return /*#__PURE__*/_react.default.createElement("span", {
          className: "mx_MFileBody"
        }, placeholder, showDownloadLink && /*#__PURE__*/_react.default.createElement("div", {
          className: "mx_MFileBody_download"
        }, /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
          onClick: this.decryptFile
        }, (0, _languageHandler._t)("Decrypt %(text)s", {
          text: this.linkText
        }))));
      }

      const url = "usercontent/"; // XXX: this path should probably be passed from the skin
      // If the attachment is encrypted then put the link inside an iframe.

      return /*#__PURE__*/_react.default.createElement("span", {
        className: "mx_MFileBody"
      }, placeholder, showDownloadLink && /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_MFileBody_download"
      }, /*#__PURE__*/_react.default.createElement("div", {
        style: {
          display: "none"
        }
      }, /*#__PURE__*/_react.default.createElement("a", {
        ref: this.dummyLink
      })), /*#__PURE__*/_react.default.createElement("iframe", {
        src: url,
        onLoad: () => this.downloadFile(this.fileName, this.linkText),
        ref: this.iframe,
        sandbox: "allow-scripts allow-downloads allow-downloads-without-user-activation"
      })));
    } else if (contentUrl) {
      const downloadProps = {
        target: "_blank",
        rel: "noreferrer noopener",
        // We set the href regardless of whether or not we intercept the download
        // because we don't really want to convert the file to a blob eagerly, and
        // still want "open in new tab" and "save link as" to work.
        href: contentUrl
      }; // Blobs can only have up to 500mb, so if the file reports as being too large then
      // we won't try and convert it. Likewise, if the file size is unknown then we'll assume
      // it is too big. There is the risk of the reported file size and the actual file size
      // being different, however the user shouldn't normally run into this problem.

      const fileTooBig = typeof fileSize === 'number' ? fileSize > 524288000 : true;

      if (["application/pdf"].includes(fileType) && !fileTooBig) {
        // We want to force a download on this type, so use an onClick handler.
        downloadProps["onClick"] = e => {
          _logger.logger.log(`Downloading ${fileType} as blob (unencrypted)`); // Avoid letting the <a> do its thing


          e.preventDefault();
          e.stopPropagation(); // Start a fetch for the download
          // Based upon https://stackoverflow.com/a/49500465

          this.props.mediaEventHelper.sourceBlob.value.then(blob => {
            const blobUrl = URL.createObjectURL(blob); // We have to create an anchor to download the file

            const tempAnchor = document.createElement('a');
            tempAnchor.download = this.fileName;
            tempAnchor.href = blobUrl;
            document.body.appendChild(tempAnchor); // for firefox: https://stackoverflow.com/a/32226068

            tempAnchor.click();
            tempAnchor.remove();
          });
        };
      } else {
        // Else we are hoping the browser will do the right thing
        downloadProps["download"] = this.fileName;
      }

      return /*#__PURE__*/_react.default.createElement("span", {
        className: "mx_MFileBody"
      }, placeholder, showDownloadLink && /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_MFileBody_download"
      }, /*#__PURE__*/_react.default.createElement("a", downloadProps, /*#__PURE__*/_react.default.createElement("span", {
        className: "mx_MFileBody_download_icon"
      }), (0, _languageHandler._t)("Download %(text)s", {
        text: this.linkText
      })), this.props.tileShape === _EventTile.TileShape.FileGrid && /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_MImageBody_size"
      }, this.content.info && this.content.info.size ? (0, _filesize.default)(this.content.info.size) : "")));
    } else {
      const extra = this.linkText ? ': ' + this.linkText : '';
      return /*#__PURE__*/_react.default.createElement("span", {
        className: "mx_MFileBody"
      }, placeholder, (0, _languageHandler._t)("Invalid file%(extra)s", {
        extra: extra
      }));
    }
  }

}, (0, _defineProperty2.default)(_class2, "defaultProps", {
  showGenericPlaceholder: true
}), _temp)) || _class);
exports.default = MFileBody;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,