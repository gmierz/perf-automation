"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _languageHandler = require("../../../languageHandler");

var _WidgetStore = _interopRequireDefault(require("../../../stores/WidgetStore"));

var _EventTileBubble = _interopRequireDefault(require("./EventTileBubble"));

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _WidgetLayoutStore = require("../../../stores/widgets/WidgetLayoutStore");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _dec, _class;

let MJitsiWidgetEvent = (_dec = (0, _replaceableComponent.replaceableComponent)("views.messages.MJitsiWidgetEvent"), _dec(_class = class MJitsiWidgetEvent extends _react.default.PureComponent {
  constructor(props) {
    super(props);
  }

  render() {
    var _this$props$mxEvent$s;

    const url = this.props.mxEvent.getContent()['url'];
    const prevUrl = this.props.mxEvent.getPrevContent()['url'];
    const senderName = ((_this$props$mxEvent$s = this.props.mxEvent.sender) === null || _this$props$mxEvent$s === void 0 ? void 0 : _this$props$mxEvent$s.name) || this.props.mxEvent.getSender();

    const room = _MatrixClientPeg.MatrixClientPeg.get().getRoom(this.props.mxEvent.getRoomId());

    const widgetId = this.props.mxEvent.getStateKey();

    const widget = _WidgetStore.default.instance.getRoom(room.roomId, true).widgets.find(w => w.id === widgetId);

    let joinCopy = (0, _languageHandler._t)('Join the conference at the top of this room');

    if (widget && _WidgetLayoutStore.WidgetLayoutStore.instance.isInContainer(room, widget, _WidgetLayoutStore.Container.Right)) {
      joinCopy = (0, _languageHandler._t)('Join the conference from the room information card on the right');
    } else if (!widget) {
      joinCopy = null;
    }

    if (!url) {
      // removed
      return /*#__PURE__*/_react.default.createElement(_EventTileBubble.default, {
        className: "mx_MJitsiWidgetEvent",
        title: (0, _languageHandler._t)('Video conference ended by %(senderName)s', {
          senderName
        })
      });
    } else if (prevUrl) {
      // modified
      return /*#__PURE__*/_react.default.createElement(_EventTileBubble.default, {
        className: "mx_MJitsiWidgetEvent",
        title: (0, _languageHandler._t)('Video conference updated by %(senderName)s', {
          senderName
        }),
        subtitle: joinCopy
      });
    } else {
      // assume added
      return /*#__PURE__*/_react.default.createElement(_EventTileBubble.default, {
        className: "mx_MJitsiWidgetEvent",
        title: (0, _languageHandler._t)("Video conference started by %(senderName)s", {
          senderName
        }),
        subtitle: joinCopy
      });
    }
  }

}) || _class);
exports.default = MJitsiWidgetEvent;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL21lc3NhZ2VzL01KaXRzaVdpZGdldEV2ZW50LnRzeCJdLCJuYW1lcyI6WyJNSml0c2lXaWRnZXRFdmVudCIsIlJlYWN0IiwiUHVyZUNvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwicHJvcHMiLCJyZW5kZXIiLCJ1cmwiLCJteEV2ZW50IiwiZ2V0Q29udGVudCIsInByZXZVcmwiLCJnZXRQcmV2Q29udGVudCIsInNlbmRlck5hbWUiLCJzZW5kZXIiLCJuYW1lIiwiZ2V0U2VuZGVyIiwicm9vbSIsIk1hdHJpeENsaWVudFBlZyIsImdldCIsImdldFJvb20iLCJnZXRSb29tSWQiLCJ3aWRnZXRJZCIsImdldFN0YXRlS2V5Iiwid2lkZ2V0IiwiV2lkZ2V0U3RvcmUiLCJpbnN0YW5jZSIsInJvb21JZCIsIndpZGdldHMiLCJmaW5kIiwidyIsImlkIiwiam9pbkNvcHkiLCJXaWRnZXRMYXlvdXRTdG9yZSIsImlzSW5Db250YWluZXIiLCJDb250YWluZXIiLCJSaWdodCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBZ0JBOztBQUVBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOzs7O0lBT3FCQSxpQixXQURwQixnREFBcUIsa0NBQXJCLEMsZ0JBQUQsTUFDcUJBLGlCQURyQixTQUMrQ0MsZUFBTUMsYUFEckQsQ0FDMkU7QUFDdkVDLEVBQUFBLFdBQVcsQ0FBQ0MsS0FBRCxFQUFRO0FBQ2YsVUFBTUEsS0FBTjtBQUNIOztBQUVEQyxFQUFBQSxNQUFNLEdBQUc7QUFBQTs7QUFDTCxVQUFNQyxHQUFHLEdBQUcsS0FBS0YsS0FBTCxDQUFXRyxPQUFYLENBQW1CQyxVQUFuQixHQUFnQyxLQUFoQyxDQUFaO0FBQ0EsVUFBTUMsT0FBTyxHQUFHLEtBQUtMLEtBQUwsQ0FBV0csT0FBWCxDQUFtQkcsY0FBbkIsR0FBb0MsS0FBcEMsQ0FBaEI7QUFDQSxVQUFNQyxVQUFVLEdBQUcsK0JBQUtQLEtBQUwsQ0FBV0csT0FBWCxDQUFtQkssTUFBbkIsZ0ZBQTJCQyxJQUEzQixLQUFtQyxLQUFLVCxLQUFMLENBQVdHLE9BQVgsQ0FBbUJPLFNBQW5CLEVBQXREOztBQUNBLFVBQU1DLElBQUksR0FBR0MsaUNBQWdCQyxHQUFoQixHQUFzQkMsT0FBdEIsQ0FBOEIsS0FBS2QsS0FBTCxDQUFXRyxPQUFYLENBQW1CWSxTQUFuQixFQUE5QixDQUFiOztBQUNBLFVBQU1DLFFBQVEsR0FBRyxLQUFLaEIsS0FBTCxDQUFXRyxPQUFYLENBQW1CYyxXQUFuQixFQUFqQjs7QUFDQSxVQUFNQyxNQUFNLEdBQUdDLHFCQUFZQyxRQUFaLENBQXFCTixPQUFyQixDQUE2QkgsSUFBSSxDQUFDVSxNQUFsQyxFQUEwQyxJQUExQyxFQUFnREMsT0FBaEQsQ0FBd0RDLElBQXhELENBQTZEQyxDQUFDLElBQUlBLENBQUMsQ0FBQ0MsRUFBRixLQUFTVCxRQUEzRSxDQUFmOztBQUVBLFFBQUlVLFFBQVEsR0FBRyx5QkFBRyw2Q0FBSCxDQUFmOztBQUNBLFFBQUlSLE1BQU0sSUFBSVMscUNBQWtCUCxRQUFsQixDQUEyQlEsYUFBM0IsQ0FBeUNqQixJQUF6QyxFQUErQ08sTUFBL0MsRUFBdURXLDZCQUFVQyxLQUFqRSxDQUFkLEVBQXVGO0FBQ25GSixNQUFBQSxRQUFRLEdBQUcseUJBQUcsaUVBQUgsQ0FBWDtBQUNILEtBRkQsTUFFTyxJQUFJLENBQUNSLE1BQUwsRUFBYTtBQUNoQlEsTUFBQUEsUUFBUSxHQUFHLElBQVg7QUFDSDs7QUFFRCxRQUFJLENBQUN4QixHQUFMLEVBQVU7QUFDTjtBQUNBLDBCQUFPLDZCQUFDLHdCQUFEO0FBQ0gsUUFBQSxTQUFTLEVBQUMsc0JBRFA7QUFFSCxRQUFBLEtBQUssRUFBRSx5QkFBRywwQ0FBSCxFQUErQztBQUFFSyxVQUFBQTtBQUFGLFNBQS9DO0FBRkosUUFBUDtBQUlILEtBTkQsTUFNTyxJQUFJRixPQUFKLEVBQWE7QUFDaEI7QUFDQSwwQkFBTyw2QkFBQyx3QkFBRDtBQUNILFFBQUEsU0FBUyxFQUFDLHNCQURQO0FBRUgsUUFBQSxLQUFLLEVBQUUseUJBQUcsNENBQUgsRUFBaUQ7QUFBRUUsVUFBQUE7QUFBRixTQUFqRCxDQUZKO0FBR0gsUUFBQSxRQUFRLEVBQUVtQjtBQUhQLFFBQVA7QUFLSCxLQVBNLE1BT0E7QUFDSDtBQUNBLDBCQUFPLDZCQUFDLHdCQUFEO0FBQ0gsUUFBQSxTQUFTLEVBQUMsc0JBRFA7QUFFSCxRQUFBLEtBQUssRUFBRSx5QkFBRyw0Q0FBSCxFQUFpRDtBQUFFbkIsVUFBQUE7QUFBRixTQUFqRCxDQUZKO0FBR0gsUUFBQSxRQUFRLEVBQUVtQjtBQUhQLFFBQVA7QUFLSDtBQUNKOztBQXpDc0UsQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5Db3B5cmlnaHQgMjAyMCBUaGUgTWF0cml4Lm9yZyBGb3VuZGF0aW9uIEMuSS5DLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBNYXRyaXhFdmVudCB9IGZyb20gXCJtYXRyaXgtanMtc2RrL3NyYy9tb2RlbHMvZXZlbnRcIjtcbmltcG9ydCB7IF90IH0gZnJvbSBcIi4uLy4uLy4uL2xhbmd1YWdlSGFuZGxlclwiO1xuaW1wb3J0IFdpZGdldFN0b3JlIGZyb20gXCIuLi8uLi8uLi9zdG9yZXMvV2lkZ2V0U3RvcmVcIjtcbmltcG9ydCBFdmVudFRpbGVCdWJibGUgZnJvbSBcIi4vRXZlbnRUaWxlQnViYmxlXCI7XG5pbXBvcnQgeyBNYXRyaXhDbGllbnRQZWcgfSBmcm9tIFwiLi4vLi4vLi4vTWF0cml4Q2xpZW50UGVnXCI7XG5pbXBvcnQgeyBDb250YWluZXIsIFdpZGdldExheW91dFN0b3JlIH0gZnJvbSBcIi4uLy4uLy4uL3N0b3Jlcy93aWRnZXRzL1dpZGdldExheW91dFN0b3JlXCI7XG5pbXBvcnQgeyByZXBsYWNlYWJsZUNvbXBvbmVudCB9IGZyb20gXCIuLi8uLi8uLi91dGlscy9yZXBsYWNlYWJsZUNvbXBvbmVudFwiO1xuXG5pbnRlcmZhY2UgSVByb3BzIHtcbiAgICBteEV2ZW50OiBNYXRyaXhFdmVudDtcbn1cblxuQHJlcGxhY2VhYmxlQ29tcG9uZW50KFwidmlld3MubWVzc2FnZXMuTUppdHNpV2lkZ2V0RXZlbnRcIilcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1KaXRzaVdpZGdldEV2ZW50IGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudDxJUHJvcHM+IHtcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICBjb25zdCB1cmwgPSB0aGlzLnByb3BzLm14RXZlbnQuZ2V0Q29udGVudCgpWyd1cmwnXTtcbiAgICAgICAgY29uc3QgcHJldlVybCA9IHRoaXMucHJvcHMubXhFdmVudC5nZXRQcmV2Q29udGVudCgpWyd1cmwnXTtcbiAgICAgICAgY29uc3Qgc2VuZGVyTmFtZSA9IHRoaXMucHJvcHMubXhFdmVudC5zZW5kZXI/Lm5hbWUgfHwgdGhpcy5wcm9wcy5teEV2ZW50LmdldFNlbmRlcigpO1xuICAgICAgICBjb25zdCByb29tID0gTWF0cml4Q2xpZW50UGVnLmdldCgpLmdldFJvb20odGhpcy5wcm9wcy5teEV2ZW50LmdldFJvb21JZCgpKTtcbiAgICAgICAgY29uc3Qgd2lkZ2V0SWQgPSB0aGlzLnByb3BzLm14RXZlbnQuZ2V0U3RhdGVLZXkoKTtcbiAgICAgICAgY29uc3Qgd2lkZ2V0ID0gV2lkZ2V0U3RvcmUuaW5zdGFuY2UuZ2V0Um9vbShyb29tLnJvb21JZCwgdHJ1ZSkud2lkZ2V0cy5maW5kKHcgPT4gdy5pZCA9PT0gd2lkZ2V0SWQpO1xuXG4gICAgICAgIGxldCBqb2luQ29weSA9IF90KCdKb2luIHRoZSBjb25mZXJlbmNlIGF0IHRoZSB0b3Agb2YgdGhpcyByb29tJyk7XG4gICAgICAgIGlmICh3aWRnZXQgJiYgV2lkZ2V0TGF5b3V0U3RvcmUuaW5zdGFuY2UuaXNJbkNvbnRhaW5lcihyb29tLCB3aWRnZXQsIENvbnRhaW5lci5SaWdodCkpIHtcbiAgICAgICAgICAgIGpvaW5Db3B5ID0gX3QoJ0pvaW4gdGhlIGNvbmZlcmVuY2UgZnJvbSB0aGUgcm9vbSBpbmZvcm1hdGlvbiBjYXJkIG9uIHRoZSByaWdodCcpO1xuICAgICAgICB9IGVsc2UgaWYgKCF3aWRnZXQpIHtcbiAgICAgICAgICAgIGpvaW5Db3B5ID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdXJsKSB7XG4gICAgICAgICAgICAvLyByZW1vdmVkXG4gICAgICAgICAgICByZXR1cm4gPEV2ZW50VGlsZUJ1YmJsZVxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cIm14X01KaXRzaVdpZGdldEV2ZW50XCJcbiAgICAgICAgICAgICAgICB0aXRsZT17X3QoJ1ZpZGVvIGNvbmZlcmVuY2UgZW5kZWQgYnkgJShzZW5kZXJOYW1lKXMnLCB7IHNlbmRlck5hbWUgfSl9XG4gICAgICAgICAgICAvPjtcbiAgICAgICAgfSBlbHNlIGlmIChwcmV2VXJsKSB7XG4gICAgICAgICAgICAvLyBtb2RpZmllZFxuICAgICAgICAgICAgcmV0dXJuIDxFdmVudFRpbGVCdWJibGVcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJteF9NSml0c2lXaWRnZXRFdmVudFwiXG4gICAgICAgICAgICAgICAgdGl0bGU9e190KCdWaWRlbyBjb25mZXJlbmNlIHVwZGF0ZWQgYnkgJShzZW5kZXJOYW1lKXMnLCB7IHNlbmRlck5hbWUgfSl9XG4gICAgICAgICAgICAgICAgc3VidGl0bGU9e2pvaW5Db3B5fVxuICAgICAgICAgICAgLz47XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBhc3N1bWUgYWRkZWRcbiAgICAgICAgICAgIHJldHVybiA8RXZlbnRUaWxlQnViYmxlXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwibXhfTUppdHNpV2lkZ2V0RXZlbnRcIlxuICAgICAgICAgICAgICAgIHRpdGxlPXtfdChcIlZpZGVvIGNvbmZlcmVuY2Ugc3RhcnRlZCBieSAlKHNlbmRlck5hbWUpc1wiLCB7IHNlbmRlck5hbWUgfSl9XG4gICAgICAgICAgICAgICAgc3VidGl0bGU9e2pvaW5Db3B5fVxuICAgICAgICAgICAgLz47XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=