"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var sdk = _interopRequireWildcard(require("../../../index"));

var _SettingsStore = _interopRequireDefault(require("../../../settings/SettingsStore"));

var _Mjolnir = require("../../../mjolnir/Mjolnir");

var _RedactedBody = _interopRequireDefault(require("./RedactedBody"));

var _UnknownBody = _interopRequireDefault(require("./UnknownBody"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _MediaEventHelper = require("../../../utils/MediaEventHelper");

var _event = require("matrix-js-sdk/src/@types/event");

var _consts = require("../../../polls/consts");

var _dec, _class;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

let MessageEvent = (_dec = (0, _replaceableComponent.replaceableComponent)("views.messages.MessageEvent"), _dec(_class = class MessageEvent extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "body", /*#__PURE__*/(0, _react.createRef)());
    (0, _defineProperty2.default)(this, "mediaHelper", void 0);
    (0, _defineProperty2.default)(this, "getEventTileOps", () => {
      var _this$body$current, _this$body$current$ge;

      return ((_this$body$current = this.body.current) === null || _this$body$current === void 0 ? void 0 : (_this$body$current$ge = _this$body$current.getEventTileOps) === null || _this$body$current$ge === void 0 ? void 0 : _this$body$current$ge.call(_this$body$current)) || null;
    });
    (0, _defineProperty2.default)(this, "onTileUpdate", () => {
      this.forceUpdate();
    });

    if (_MediaEventHelper.MediaEventHelper.isEligible(this.props.mxEvent)) {
      this.mediaHelper = new _MediaEventHelper.MediaEventHelper(this.props.mxEvent);
    }
  }

  componentWillUnmount() {
    var _this$mediaHelper;

    (_this$mediaHelper = this.mediaHelper) === null || _this$mediaHelper === void 0 ? void 0 : _this$mediaHelper.destroy();
  }

  componentDidUpdate(prevProps) {
    if (this.props.mxEvent !== prevProps.mxEvent && _MediaEventHelper.MediaEventHelper.isEligible(this.props.mxEvent)) {
      var _this$mediaHelper2;

      (_this$mediaHelper2 = this.mediaHelper) === null || _this$mediaHelper2 === void 0 ? void 0 : _this$mediaHelper2.destroy();
      this.mediaHelper = new _MediaEventHelper.MediaEventHelper(this.props.mxEvent);
    }
  }

  get bodyTypes() {
    return _objectSpread({
      [_event.MsgType.Text]: sdk.getComponent('messages.TextualBody'),
      [_event.MsgType.Notice]: sdk.getComponent('messages.TextualBody'),
      [_event.MsgType.Emote]: sdk.getComponent('messages.TextualBody'),
      [_event.MsgType.Image]: sdk.getComponent('messages.MImageBody'),
      [_event.MsgType.File]: sdk.getComponent('messages.MFileBody'),
      [_event.MsgType.Audio]: sdk.getComponent('messages.MVoiceOrAudioBody'),
      [_event.MsgType.Video]: sdk.getComponent('messages.MVideoBody')
    }, this.props.overrideBodyTypes || {});
  }

  get evTypes() {
    return _objectSpread({
      [_event.EventType.Sticker]: sdk.getComponent('messages.MStickerBody')
    }, this.props.overrideEventTypes || {});
  }

  getMediaHelper() {
    return this.mediaHelper;
  }

  render() {
    const content = this.props.mxEvent.getContent();
    const type = this.props.mxEvent.getType();
    const msgtype = content.msgtype;
    let BodyType = _RedactedBody.default;

    if (!this.props.mxEvent.isRedacted()) {
      // only resolve BodyType if event is not redacted
      if (type && this.evTypes[type]) {
        BodyType = this.evTypes[type];
      } else if (msgtype && this.bodyTypes[msgtype]) {
        BodyType = this.bodyTypes[msgtype];
      } else if (content.url) {
        // Fallback to MFileBody if there's a content URL
        BodyType = this.bodyTypes[_event.MsgType.File];
      } else {
        // Fallback to UnknownBody otherwise if not redacted
        BodyType = _UnknownBody.default;
      }

      if (type && type === _consts.POLL_START_EVENT_TYPE.name) {
        // TODO: this can all disappear when Polls comes out of labs -
        // instead, add something like this into this.evTypes:
        // [EventType.Poll]: "messages.MPollBody"
        if (_SettingsStore.default.getValue("feature_polls")) {
          BodyType = sdk.getComponent('messages.MPollBody');
        }
      }
    }

    if (_SettingsStore.default.getValue("feature_mjolnir")) {
      const key = `mx_mjolnir_render_${this.props.mxEvent.getRoomId()}__${this.props.mxEvent.getId()}`;
      const allowRender = localStorage.getItem(key) === "true";

      if (!allowRender) {
        const userDomain = this.props.mxEvent.getSender().split(':').slice(1).join(':');

        const userBanned = _Mjolnir.Mjolnir.sharedInstance().isUserBanned(this.props.mxEvent.getSender());

        const serverBanned = _Mjolnir.Mjolnir.sharedInstance().isServerBanned(userDomain);

        if (userBanned || serverBanned) {
          BodyType = sdk.getComponent('messages.MjolnirBody');
        }
      }
    } // @ts-ignore - this is a dynamic react component


    return BodyType ? /*#__PURE__*/_react.default.createElement(BodyType, {
      ref: this.body,
      mxEvent: this.props.mxEvent,
      highlights: this.props.highlights,
      highlightLink: this.props.highlightLink,
      showUrlPreview: this.props.showUrlPreview,
      tileShape: this.props.tileShape,
      forExport: this.props.forExport,
      maxImageHeight: this.props.maxImageHeight,
      replacingEventId: this.props.replacingEventId,
      editState: this.props.editState,
      onHeightChanged: this.props.onHeightChanged,
      onMessageAllowed: this.onTileUpdate,
      permalinkCreator: this.props.permalinkCreator,
      mediaEventHelper: this.mediaHelper,
      getRelationsForEvent: this.props.getRelationsForEvent
    }) : null;
  }

}) || _class);
exports.default = MessageEvent;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,