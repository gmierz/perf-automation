"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _languageHandler = require("../../../languageHandler");

var _FormattingUtils = require("../../../utils/FormattingUtils");

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _ReactionsRowButtonTooltip = _interopRequireDefault(require("./ReactionsRowButtonTooltip"));

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

var _MatrixClientContext = _interopRequireDefault(require("../../../contexts/MatrixClientContext"));

var _dec, _class, _class2, _temp;

let ReactionsRowButton = (_dec = (0, _replaceableComponent.replaceableComponent)("views.messages.ReactionsRowButton"), _dec(_class = (_temp = _class2 = class ReactionsRowButton extends _react.default.PureComponent {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "state", {
      tooltipRendered: false,
      tooltipVisible: false
    });
    (0, _defineProperty2.default)(this, "onClick", () => {
      const {
        mxEvent,
        myReactionEvent,
        content
      } = this.props;

      if (myReactionEvent) {
        this.context.redactEvent(mxEvent.getRoomId(), myReactionEvent.getId());
      } else {
        this.context.sendEvent(mxEvent.getRoomId(), "m.reaction", {
          "m.relates_to": {
            "rel_type": "m.annotation",
            "event_id": mxEvent.getId(),
            "key": content
          }
        });

        _dispatcher.default.dispatch({
          action: "message_sent"
        });
      }
    });
    (0, _defineProperty2.default)(this, "onMouseOver", () => {
      this.setState({
        // To avoid littering the DOM with a tooltip for every reaction,
        // only render it on first use.
        tooltipRendered: true,
        tooltipVisible: true
      });
    });
    (0, _defineProperty2.default)(this, "onMouseLeave", () => {
      this.setState({
        tooltipVisible: false
      });
    });
  }

  render() {
    const {
      mxEvent,
      content,
      count,
      reactionEvents,
      myReactionEvent
    } = this.props;
    const classes = (0, _classnames.default)({
      mx_ReactionsRowButton: true,
      mx_ReactionsRowButton_selected: !!myReactionEvent
    });
    let tooltip;

    if (this.state.tooltipRendered) {
      tooltip = /*#__PURE__*/_react.default.createElement(_ReactionsRowButtonTooltip.default, {
        mxEvent: this.props.mxEvent,
        content: content,
        reactionEvents: reactionEvents,
        visible: this.state.tooltipVisible
      });
    }

    const room = this.context.getRoom(mxEvent.getRoomId());
    let label;

    if (room) {
      const senders = [];

      for (const reactionEvent of reactionEvents) {
        const member = room.getMember(reactionEvent.getSender());
        senders.push((member === null || member === void 0 ? void 0 : member.name) || reactionEvent.getSender());
      }

      const reactors = (0, _FormattingUtils.formatCommaSeparatedList)(senders, 6);

      if (content) {
        label = (0, _languageHandler._t)("%(reactors)s reacted with %(content)s", {
          reactors,
          content
        });
      } else {
        label = reactors;
      }
    }

    const isPeeking = room.getMyMembership() !== "join";
    return /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      className: classes,
      "aria-label": label,
      onClick: this.onClick,
      disabled: isPeeking,
      onMouseOver: this.onMouseOver,
      onMouseLeave: this.onMouseLeave
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_ReactionsRowButton_content",
      "aria-hidden": "true"
    }, content), /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_ReactionsRowButton_count",
      "aria-hidden": "true"
    }, count), tooltip);
  }

}, (0, _defineProperty2.default)(_class2, "contextType", _MatrixClientContext.default), _temp)) || _class);
exports.default = ReactionsRowButton;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL21lc3NhZ2VzL1JlYWN0aW9uc1Jvd0J1dHRvbi50c3giXSwibmFtZXMiOlsiUmVhY3Rpb25zUm93QnV0dG9uIiwiUmVhY3QiLCJQdXJlQ29tcG9uZW50IiwidG9vbHRpcFJlbmRlcmVkIiwidG9vbHRpcFZpc2libGUiLCJteEV2ZW50IiwibXlSZWFjdGlvbkV2ZW50IiwiY29udGVudCIsInByb3BzIiwiY29udGV4dCIsInJlZGFjdEV2ZW50IiwiZ2V0Um9vbUlkIiwiZ2V0SWQiLCJzZW5kRXZlbnQiLCJkaXMiLCJkaXNwYXRjaCIsImFjdGlvbiIsInNldFN0YXRlIiwicmVuZGVyIiwiY291bnQiLCJyZWFjdGlvbkV2ZW50cyIsImNsYXNzZXMiLCJteF9SZWFjdGlvbnNSb3dCdXR0b24iLCJteF9SZWFjdGlvbnNSb3dCdXR0b25fc2VsZWN0ZWQiLCJ0b29sdGlwIiwic3RhdGUiLCJyb29tIiwiZ2V0Um9vbSIsImxhYmVsIiwic2VuZGVycyIsInJlYWN0aW9uRXZlbnQiLCJtZW1iZXIiLCJnZXRNZW1iZXIiLCJnZXRTZW5kZXIiLCJwdXNoIiwibmFtZSIsInJlYWN0b3JzIiwiaXNQZWVraW5nIiwiZ2V0TXlNZW1iZXJzaGlwIiwib25DbGljayIsIm9uTW91c2VPdmVyIiwib25Nb3VzZUxlYXZlIiwiTWF0cml4Q2xpZW50Q29udGV4dCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFnQkE7O0FBQ0E7O0FBR0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7SUFxQnFCQSxrQixXQURwQixnREFBcUIsbUNBQXJCLEMsbUNBQUQsTUFDcUJBLGtCQURyQixTQUNnREMsZUFBTUMsYUFEdEQsQ0FDb0Y7QUFBQTtBQUFBO0FBQUEsaURBR3hFO0FBQ0pDLE1BQUFBLGVBQWUsRUFBRSxLQURiO0FBRUpDLE1BQUFBLGNBQWMsRUFBRTtBQUZaLEtBSHdFO0FBQUEsbURBUXRFLE1BQU07QUFD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QUFPLDZCQUFDLHlCQUFEO0FBQ0gsTUFBQSxTQUFTLEVBQUVqQixPQURSO0FBRUgsb0JBQVlPLEtBRlQ7QUFHSCxNQUFBLE9BQU8sRUFBRSxLQUFLVyxPQUhYO0FBSUgsTUFBQSxRQUFRLEVBQUVGLFNBSlA7QUFLSCxNQUFBLFdBQVcsRUFBRSxLQUFLRyxXQUxmO0FBTUgsTUFBQSxZQUFZLEVBQUUsS0FBS0M7QUFOaEIsb0JBUUg7QUFBTSxNQUFBLFNBQVMsRUFBQywrQkFBaEI7QUFBZ0QscUJBQVk7QUFBNUQsT0FDTWxDLE9BRE4sQ0FSRyxlQVdIO0FBQU0sTUFBQSxTQUFTLEVBQUMsNkJBQWhCO0FBQThDLHFCQUFZO0FBQTFELE9BQ01ZLEtBRE4sQ0FYRyxFQWNESyxPQWRDLENBQVA7QUFnQkg7O0FBN0YrRSxDLHdEQUMzRGtCLDRCIiwic291cmNlc0NvbnRlbnQiOlsiLypcbkNvcHlyaWdodCAyMDE5LCAyMDIxIFRoZSBNYXRyaXgub3JnIEZvdW5kYXRpb24gQy5JLkMuXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSBcImNsYXNzbmFtZXNcIjtcbmltcG9ydCB7IE1hdHJpeEV2ZW50IH0gZnJvbSBcIm1hdHJpeC1qcy1zZGsvc3JjL21vZGVscy9ldmVudFwiO1xuXG5pbXBvcnQgeyBfdCB9IGZyb20gJy4uLy4uLy4uL2xhbmd1YWdlSGFuZGxlcic7XG5pbXBvcnQgeyBmb3JtYXRDb21tYVNlcGFyYXRlZExpc3QgfSBmcm9tICcuLi8uLi8uLi91dGlscy9Gb3JtYXR0aW5nVXRpbHMnO1xuaW1wb3J0IGRpcyBmcm9tIFwiLi4vLi4vLi4vZGlzcGF0Y2hlci9kaXNwYXRjaGVyXCI7XG5pbXBvcnQgeyByZXBsYWNlYWJsZUNvbXBvbmVudCB9IGZyb20gXCIuLi8uLi8uLi91dGlscy9yZXBsYWNlYWJsZUNvbXBvbmVudFwiO1xuaW1wb3J0IFJlYWN0aW9uc1Jvd0J1dHRvblRvb2x0aXAgZnJvbSBcIi4vUmVhY3Rpb25zUm93QnV0dG9uVG9vbHRpcFwiO1xuaW1wb3J0IEFjY2Vzc2libGVCdXR0b24gZnJvbSBcIi4uL2VsZW1lbnRzL0FjY2Vzc2libGVCdXR0b25cIjtcbmltcG9ydCBNYXRyaXhDbGllbnRDb250ZXh0IGZyb20gXCIuLi8uLi8uLi9jb250ZXh0cy9NYXRyaXhDbGllbnRDb250ZXh0XCI7XG5cbmludGVyZmFjZSBJUHJvcHMge1xuICAgIC8vIFRoZSBldmVudCB3ZSdyZSBkaXNwbGF5aW5nIHJlYWN0aW9ucyBmb3JcbiAgICBteEV2ZW50OiBNYXRyaXhFdmVudDtcbiAgICAvLyBUaGUgcmVhY3Rpb24gY29udGVudCAvIGtleSAvIGVtb2ppXG4gICAgY29udGVudDogc3RyaW5nO1xuICAgIC8vIFRoZSBjb3VudCBvZiB2b3RlcyBmb3IgdGhpcyBrZXlcbiAgICBjb3VudDogbnVtYmVyO1xuICAgIC8vIEEgU2V0IG9mIE1hdHJpeCByZWFjdGlvbiBldmVudHMgZm9yIHRoaXMga2V5XG4gICAgcmVhY3Rpb25FdmVudHM6IFNldDxNYXRyaXhFdmVudD47XG4gICAgLy8gQSBwb3NzaWJsZSBNYXRyaXggZXZlbnQgaWYgdGhlIGN1cnJlbnQgdXNlciBoYXMgdm90ZWQgZm9yIHRoaXMgdHlwZVxuICAgIG15UmVhY3Rpb25FdmVudD86IE1hdHJpeEV2ZW50O1xufVxuXG5pbnRlcmZhY2UgSVN0YXRlIHtcbiAgICB0b29sdGlwUmVuZGVyZWQ6IGJvb2xlYW47XG4gICAgdG9vbHRpcFZpc2libGU6IGJvb2xlYW47XG59XG5cbkByZXBsYWNlYWJsZUNvbXBvbmVudChcInZpZXdzLm1lc3NhZ2VzLlJlYWN0aW9uc1Jvd0J1dHRvblwiKVxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVhY3Rpb25zUm93QnV0dG9uIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudDxJUHJvcHMsIElTdGF0ZT4ge1xuICAgIHN0YXRpYyBjb250ZXh0VHlwZSA9IE1hdHJpeENsaWVudENvbnRleHQ7XG5cbiAgICBzdGF0ZSA9IHtcbiAgICAgICAgdG9vbHRpcFJlbmRlcmVkOiBmYWxzZSxcbiAgICAgICAgdG9vbHRpcFZpc2libGU6IGZhbHNlLFxuICAgIH07XG5cbiAgICBvbkNsaWNrID0gKCkgPT4ge1xuICAgICAgICBjb25zdCB7IG14RXZlbnQsIG15UmVhY3Rpb25FdmVudCwgY29udGVudCB9ID0gdGhpcy5wcm9wcztcbiAgICAgICAgaWYgKG15UmVhY3Rpb25FdmVudCkge1xuICAgICAgICAgICAgdGhpcy5jb250ZXh0LnJlZGFjdEV2ZW50KFxuICAgICAgICAgICAgICAgIG14RXZlbnQuZ2V0Um9vbUlkKCksXG4gICAgICAgICAgICAgICAgbXlSZWFjdGlvbkV2ZW50LmdldElkKCksXG4gICAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jb250ZXh0LnNlbmRFdmVudChteEV2ZW50LmdldFJvb21JZCgpLCBcIm0ucmVhY3Rpb25cIiwge1xuICAgICAgICAgICAgICAgIFwibS5yZWxhdGVzX3RvXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJyZWxfdHlwZVwiOiBcIm0uYW5ub3RhdGlvblwiLFxuICAgICAgICAgICAgICAgICAgICBcImV2ZW50X2lkXCI6IG14RXZlbnQuZ2V0SWQoKSxcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogY29udGVudCxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBkaXMuZGlzcGF0Y2goeyBhY3Rpb246IFwibWVzc2FnZV9zZW50XCIgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgb25Nb3VzZU92ZXIgPSAoKSA9PiB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgLy8gVG8gYXZvaWQgbGl0dGVyaW5nIHRoZSBET00gd2l0aCBhIHRvb2x0aXAgZm9yIGV2ZXJ5IHJlYWN0aW9uLFxuICAgICAgICAgICAgLy8gb25seSByZW5kZXIgaXQgb24gZmlyc3QgdXNlLlxuICAgICAgICAgICAgdG9vbHRpcFJlbmRlcmVkOiB0cnVlLFxuICAgICAgICAgICAgdG9vbHRpcFZpc2libGU6IHRydWUsXG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBvbk1vdXNlTGVhdmUgPSAoKSA9PiB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgdG9vbHRpcFZpc2libGU6IGZhbHNlLFxuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICBjb25zdCB7IG14RXZlbnQsIGNvbnRlbnQsIGNvdW50LCByZWFjdGlvbkV2ZW50cywgbXlSZWFjdGlvbkV2ZW50IH0gPSB0aGlzLnByb3BzO1xuXG4gICAgICAgIGNvbnN0IGNsYXNzZXMgPSBjbGFzc05hbWVzKHtcbiAgICAgICAgICAgIG14X1JlYWN0aW9uc1Jvd0J1dHRvbjogdHJ1ZSxcbiAgICAgICAgICAgIG14X1JlYWN0aW9uc1Jvd0J1dHRvbl9zZWxlY3RlZDogISFteVJlYWN0aW9uRXZlbnQsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGxldCB0b29sdGlwO1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS50b29sdGlwUmVuZGVyZWQpIHtcbiAgICAgICAgICAgIHRvb2x0aXAgPSA8UmVhY3Rpb25zUm93QnV0dG9uVG9vbHRpcFxuICAgICAgICAgICAgICAgIG14RXZlbnQ9e3RoaXMucHJvcHMubXhFdmVudH1cbiAgICAgICAgICAgICAgICBjb250ZW50PXtjb250ZW50fVxuICAgICAgICAgICAgICAgIHJlYWN0aW9uRXZlbnRzPXtyZWFjdGlvbkV2ZW50c31cbiAgICAgICAgICAgICAgICB2aXNpYmxlPXt0aGlzLnN0YXRlLnRvb2x0aXBWaXNpYmxlfVxuICAgICAgICAgICAgLz47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCByb29tID0gdGhpcy5jb250ZXh0LmdldFJvb20obXhFdmVudC5nZXRSb29tSWQoKSk7XG4gICAgICAgIGxldCBsYWJlbDogc3RyaW5nO1xuICAgICAgICBpZiAocm9vbSkge1xuICAgICAgICAgICAgY29uc3Qgc2VuZGVycyA9IFtdO1xuICAgICAgICAgICAgZm9yIChjb25zdCByZWFjdGlvbkV2ZW50IG9mIHJlYWN0aW9uRXZlbnRzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbWVtYmVyID0gcm9vbS5nZXRNZW1iZXIocmVhY3Rpb25FdmVudC5nZXRTZW5kZXIoKSk7XG4gICAgICAgICAgICAgICAgc2VuZGVycy5wdXNoKG1lbWJlcj8ubmFtZSB8fCByZWFjdGlvbkV2ZW50LmdldFNlbmRlcigpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgcmVhY3RvcnMgPSBmb3JtYXRDb21tYVNlcGFyYXRlZExpc3Qoc2VuZGVycywgNik7XG4gICAgICAgICAgICBpZiAoY29udGVudCkge1xuICAgICAgICAgICAgICAgIGxhYmVsID0gX3QoXCIlKHJlYWN0b3JzKXMgcmVhY3RlZCB3aXRoICUoY29udGVudClzXCIsIHsgcmVhY3RvcnMsIGNvbnRlbnQgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGxhYmVsID0gcmVhY3RvcnM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaXNQZWVraW5nID0gcm9vbS5nZXRNeU1lbWJlcnNoaXAoKSAhPT0gXCJqb2luXCI7XG4gICAgICAgIHJldHVybiA8QWNjZXNzaWJsZUJ1dHRvblxuICAgICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc2VzfVxuICAgICAgICAgICAgYXJpYS1sYWJlbD17bGFiZWx9XG4gICAgICAgICAgICBvbkNsaWNrPXt0aGlzLm9uQ2xpY2t9XG4gICAgICAgICAgICBkaXNhYmxlZD17aXNQZWVraW5nfVxuICAgICAgICAgICAgb25Nb3VzZU92ZXI9e3RoaXMub25Nb3VzZU92ZXJ9XG4gICAgICAgICAgICBvbk1vdXNlTGVhdmU9e3RoaXMub25Nb3VzZUxlYXZlfVxuICAgICAgICA+XG4gICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJteF9SZWFjdGlvbnNSb3dCdXR0b25fY29udGVudFwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPlxuICAgICAgICAgICAgICAgIHsgY29udGVudCB9XG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJteF9SZWFjdGlvbnNSb3dCdXR0b25fY291bnRcIiBhcmlhLWhpZGRlbj1cInRydWVcIj5cbiAgICAgICAgICAgICAgICB7IGNvdW50IH1cbiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgIHsgdG9vbHRpcCB9XG4gICAgICAgIDwvQWNjZXNzaWJsZUJ1dHRvbj47XG4gICAgfVxufVxuIl19