"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _actions = require("../../../dispatcher/actions");

var _Permalinks = require("../../../utils/permalinks/Permalinks");

var _languageHandler = require("../../../languageHandler");

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _EventTileBubble = _interopRequireDefault(require("./EventTileBubble"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _dec, _class;

let RoomCreate = (_dec = (0, _replaceableComponent.replaceableComponent)("views.messages.RoomCreate"), _dec(_class = class RoomCreate extends _react.default.Component {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "onLinkClicked", e => {
      e.preventDefault();
      const predecessor = this.props.mxEvent.getContent()['predecessor'];

      _dispatcher.default.dispatch({
        action: _actions.Action.ViewRoom,
        event_id: predecessor['event_id'],
        highlighted: true,
        room_id: predecessor['room_id']
      });
    });
  }

  render() {
    const predecessor = this.props.mxEvent.getContent()['predecessor'];

    if (predecessor === undefined) {
      return /*#__PURE__*/_react.default.createElement("div", null); // We should never have been instantiated in this case
    }

    const prevRoom = _MatrixClientPeg.MatrixClientPeg.get().getRoom(predecessor['room_id']);

    const permalinkCreator = new _Permalinks.RoomPermalinkCreator(prevRoom, predecessor['room_id']);
    permalinkCreator.load();
    const predecessorPermalink = permalinkCreator.forEvent(predecessor['event_id']);

    const link = /*#__PURE__*/_react.default.createElement("a", {
      href: predecessorPermalink,
      onClick: this.onLinkClicked
    }, (0, _languageHandler._t)("Click here to see older messages."));

    return /*#__PURE__*/_react.default.createElement(_EventTileBubble.default, {
      className: "mx_CreateEvent",
      title: (0, _languageHandler._t)("This room is a continuation of another conversation."),
      subtitle: link
    });
  }

}) || _class);
exports.default = RoomCreate;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL21lc3NhZ2VzL1Jvb21DcmVhdGUudHN4Il0sIm5hbWVzIjpbIlJvb21DcmVhdGUiLCJSZWFjdCIsIkNvbXBvbmVudCIsImUiLCJwcmV2ZW50RGVmYXVsdCIsInByZWRlY2Vzc29yIiwicHJvcHMiLCJteEV2ZW50IiwiZ2V0Q29udGVudCIsImRpcyIsImRpc3BhdGNoIiwiYWN0aW9uIiwiQWN0aW9uIiwiVmlld1Jvb20iLCJldmVudF9pZCIsImhpZ2hsaWdodGVkIiwicm9vbV9pZCIsInJlbmRlciIsInVuZGVmaW5lZCIsInByZXZSb29tIiwiTWF0cml4Q2xpZW50UGVnIiwiZ2V0IiwiZ2V0Um9vbSIsInBlcm1hbGlua0NyZWF0b3IiLCJSb29tUGVybWFsaW5rQ3JlYXRvciIsImxvYWQiLCJwcmVkZWNlc3NvclBlcm1hbGluayIsImZvckV2ZW50IiwibGluayIsIm9uTGlua0NsaWNrZWQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBaUJBOztBQUVBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOzs7O0lBU3FCQSxVLFdBRHBCLGdEQUFxQiwyQkFBckIsQyxnQkFBRCxNQUNxQkEsVUFEckIsU0FDd0NDLGVBQU1DLFNBRDlDLENBQ2dFO0FBQUE7QUFBQTtBQUFBLHlEQUNuQ0MsQ0FBRCxJQUErQjtBQUNuREEsTUFBQUEsQ0FBQyxDQUFDQyxjQUFGO0FBRUEsWUFBTUMsV0FBVyxHQUFHLEtBQUtDLEtBQUwsQ0FBV0MsT0FBWCxDQUFtQkMsVUFBbkIsR0FBZ0MsYUFBaEMsQ0FBcEI7O0FBRUFDLDBCQUFJQyxRQUFKLENBQWE7QUFDVEMsUUFBQUEsTUFBTSxFQUFFQyxnQkFBT0MsUUFETjtBQUVUQyxRQUFBQSxRQUFRLEVBQUVULFdBQVcsQ0FBQyxVQUFELENBRlo7QUFHVFUsUUFBQUEsV0FBVyxFQUFFLElBSEo7QUFJVEMsUUFBQUEsT0FBTyxFQUFFWCxXQUFXLENBQUMsU0FBRDtBQUpYLE9BQWI7QUFNSCxLQVoyRDtBQUFBOztBQWNyRFksRUFBQUEsTUFBTSxHQUFnQjtBQUN6QixVQUFNWixXQUFXLEdBQUcsS0FBS0MsS0FBTCxDQUFXQyxPQUFYLENBQW1CQyxVQUFuQixHQUFnQyxhQUFoQyxDQUFwQjs7QUFDQSxRQUFJSCxXQUFXLEtBQUthLFNBQXBCLEVBQStCO0FBQzNCLDBCQUFPLHlDQUFQLENBRDJCLENBQ1g7QUFDbkI7O0FBQ0QsVUFBTUMsUUFBUSxHQUFHQyxpQ0FBZ0JDLEdBQWhCLEdBQXNCQyxPQUF0QixDQUE4QmpCLFdBQVcsQ0FBQyxTQUFELENBQXpDLENBQWpCOztBQUNBLFVBQU1rQixnQkFBZ0IsR0FBRyxJQUFJQyxnQ0FBSixDQUF5QkwsUUFBekIsRUFBbUNkLFdBQVcsQ0FBQyxTQUFELENBQTlDLENBQXpCO0FBQ0FrQixJQUFBQSxnQkFBZ0IsQ0FBQ0UsSUFBakI7QUFDQSxVQUFNQyxvQkFBb0IsR0FBR0gsZ0JBQWdCLENBQUNJLFFBQWpCLENBQTBCdEIsV0FBVyxDQUFDLFVBQUQsQ0FBckMsQ0FBN0I7O0FBQ0EsVUFBTXVCLElBQUksZ0JBQ047QUFBRyxNQUFBLElBQUksRUFBRUYsb0JBQVQ7QUFBK0IsTUFBQSxPQUFPLEVBQUUsS0FBS0c7QUFBN0MsT0FDTSx5QkFBRyxtQ0FBSCxDQUROLENBREo7O0FBTUEsd0JBQU8sNkJBQUMsd0JBQUQ7QUFDSCxNQUFBLFNBQVMsRUFBQyxnQkFEUDtBQUVILE1BQUEsS0FBSyxFQUFFLHlCQUFHLHNEQUFILENBRko7QUFHSCxNQUFBLFFBQVEsRUFBRUQ7QUFIUCxNQUFQO0FBS0g7O0FBbEMyRCxDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbkNvcHlyaWdodCAyMDE4IE5ldyBWZWN0b3IgTHRkXG5Db3B5cmlnaHQgMjAxOSBUaGUgTWF0cml4Lm9yZyBGb3VuZGF0aW9uIEMuSS5DLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBkaXMgZnJvbSAnLi4vLi4vLi4vZGlzcGF0Y2hlci9kaXNwYXRjaGVyJztcbmltcG9ydCB7IEFjdGlvbiB9IGZyb20gJy4uLy4uLy4uL2Rpc3BhdGNoZXIvYWN0aW9ucyc7XG5pbXBvcnQgeyBSb29tUGVybWFsaW5rQ3JlYXRvciB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3Blcm1hbGlua3MvUGVybWFsaW5rcyc7XG5pbXBvcnQgeyBfdCB9IGZyb20gJy4uLy4uLy4uL2xhbmd1YWdlSGFuZGxlcic7XG5pbXBvcnQgeyBNYXRyaXhDbGllbnRQZWcgfSBmcm9tICcuLi8uLi8uLi9NYXRyaXhDbGllbnRQZWcnO1xuaW1wb3J0IEV2ZW50VGlsZUJ1YmJsZSBmcm9tIFwiLi9FdmVudFRpbGVCdWJibGVcIjtcbmltcG9ydCB7IHJlcGxhY2VhYmxlQ29tcG9uZW50IH0gZnJvbSBcIi4uLy4uLy4uL3V0aWxzL3JlcGxhY2VhYmxlQ29tcG9uZW50XCI7XG5pbXBvcnQgeyBNYXRyaXhFdmVudCB9IGZyb20gXCJtYXRyaXgtanMtc2RrL3NyYy9tb2RlbHMvZXZlbnRcIjtcblxuaW50ZXJmYWNlIElQcm9wcyB7XG4gICAgLyogdGhlIE1hdHJpeEV2ZW50IHRvIHNob3cgKi9cbiAgICBteEV2ZW50OiBNYXRyaXhFdmVudDtcbn1cblxuQHJlcGxhY2VhYmxlQ29tcG9uZW50KFwidmlld3MubWVzc2FnZXMuUm9vbUNyZWF0ZVwiKVxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUm9vbUNyZWF0ZSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxJUHJvcHM+IHtcbiAgICBwcml2YXRlIG9uTGlua0NsaWNrZWQgPSAoZTogUmVhY3QuTW91c2VFdmVudCk6IHZvaWQgPT4ge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgY29uc3QgcHJlZGVjZXNzb3IgPSB0aGlzLnByb3BzLm14RXZlbnQuZ2V0Q29udGVudCgpWydwcmVkZWNlc3NvciddO1xuXG4gICAgICAgIGRpcy5kaXNwYXRjaCh7XG4gICAgICAgICAgICBhY3Rpb246IEFjdGlvbi5WaWV3Um9vbSxcbiAgICAgICAgICAgIGV2ZW50X2lkOiBwcmVkZWNlc3NvclsnZXZlbnRfaWQnXSxcbiAgICAgICAgICAgIGhpZ2hsaWdodGVkOiB0cnVlLFxuICAgICAgICAgICAgcm9vbV9pZDogcHJlZGVjZXNzb3JbJ3Jvb21faWQnXSxcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIHB1YmxpYyByZW5kZXIoKTogSlNYLkVsZW1lbnQge1xuICAgICAgICBjb25zdCBwcmVkZWNlc3NvciA9IHRoaXMucHJvcHMubXhFdmVudC5nZXRDb250ZW50KClbJ3ByZWRlY2Vzc29yJ107XG4gICAgICAgIGlmIChwcmVkZWNlc3NvciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gPGRpdiAvPjsgLy8gV2Ugc2hvdWxkIG5ldmVyIGhhdmUgYmVlbiBpbnN0YW50aWF0ZWQgaW4gdGhpcyBjYXNlXG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcHJldlJvb20gPSBNYXRyaXhDbGllbnRQZWcuZ2V0KCkuZ2V0Um9vbShwcmVkZWNlc3Nvclsncm9vbV9pZCddKTtcbiAgICAgICAgY29uc3QgcGVybWFsaW5rQ3JlYXRvciA9IG5ldyBSb29tUGVybWFsaW5rQ3JlYXRvcihwcmV2Um9vbSwgcHJlZGVjZXNzb3JbJ3Jvb21faWQnXSk7XG4gICAgICAgIHBlcm1hbGlua0NyZWF0b3IubG9hZCgpO1xuICAgICAgICBjb25zdCBwcmVkZWNlc3NvclBlcm1hbGluayA9IHBlcm1hbGlua0NyZWF0b3IuZm9yRXZlbnQocHJlZGVjZXNzb3JbJ2V2ZW50X2lkJ10pO1xuICAgICAgICBjb25zdCBsaW5rID0gKFxuICAgICAgICAgICAgPGEgaHJlZj17cHJlZGVjZXNzb3JQZXJtYWxpbmt9IG9uQ2xpY2s9e3RoaXMub25MaW5rQ2xpY2tlZH0+XG4gICAgICAgICAgICAgICAgeyBfdChcIkNsaWNrIGhlcmUgdG8gc2VlIG9sZGVyIG1lc3NhZ2VzLlwiKSB9XG4gICAgICAgICAgICA8L2E+XG4gICAgICAgICk7XG5cbiAgICAgICAgcmV0dXJuIDxFdmVudFRpbGVCdWJibGVcbiAgICAgICAgICAgIGNsYXNzTmFtZT1cIm14X0NyZWF0ZUV2ZW50XCJcbiAgICAgICAgICAgIHRpdGxlPXtfdChcIlRoaXMgcm9vbSBpcyBhIGNvbnRpbnVhdGlvbiBvZiBhbm90aGVyIGNvbnZlcnNhdGlvbi5cIil9XG4gICAgICAgICAgICBzdWJ0aXRsZT17bGlua31cbiAgICAgICAgLz47XG4gICAgfVxufVxuIl19