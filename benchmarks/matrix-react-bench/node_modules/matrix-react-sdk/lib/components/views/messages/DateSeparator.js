"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _languageHandler = require("../../../languageHandler");

var _DateUtils = require("../../../DateUtils");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _dec, _class;

function getDaysArray() {
  return [(0, _languageHandler._t)('Sunday'), (0, _languageHandler._t)('Monday'), (0, _languageHandler._t)('Tuesday'), (0, _languageHandler._t)('Wednesday'), (0, _languageHandler._t)('Thursday'), (0, _languageHandler._t)('Friday'), (0, _languageHandler._t)('Saturday')];
}

let DateSeparator = (_dec = (0, _replaceableComponent.replaceableComponent)("views.messages.DateSeparator"), _dec(_class = class DateSeparator extends _react.default.Component {
  getLabel() {
    const date = new Date(this.props.ts); // During the time the archive is being viewed, a specific day might not make sense, so we return the full date

    if (this.props.forExport) return (0, _DateUtils.formatFullDateNoTime)(date);
    const today = new Date();
    const yesterday = new Date();
    const days = getDaysArray();
    yesterday.setDate(today.getDate() - 1);

    if (date.toDateString() === today.toDateString()) {
      return (0, _languageHandler._t)('Today');
    } else if (date.toDateString() === yesterday.toDateString()) {
      return (0, _languageHandler._t)('Yesterday');
    } else if (today.getTime() - date.getTime() < 6 * 24 * 60 * 60 * 1000) {
      return days[date.getDay()];
    } else {
      return (0, _DateUtils.formatFullDateNoTime)(date);
    }
  }

  render() {
    // ARIA treats <hr/>s as separators, here we abuse them slightly so manually treat this entire thing as one
    // tab-index=-1 to allow it to be focusable but do not add tab stop for it, primarily for screen readers
    return /*#__PURE__*/_react.default.createElement("h2", {
      className: "mx_DateSeparator",
      role: "separator",
      tabIndex: -1,
      "aria-label": this.getLabel()
    }, /*#__PURE__*/_react.default.createElement("hr", {
      role: "none"
    }), /*#__PURE__*/_react.default.createElement("div", {
      "aria-hidden": "true"
    }, this.getLabel()), /*#__PURE__*/_react.default.createElement("hr", {
      role: "none"
    }));
  }

}) || _class);
exports.default = DateSeparator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL21lc3NhZ2VzL0RhdGVTZXBhcmF0b3IudHN4Il0sIm5hbWVzIjpbImdldERheXNBcnJheSIsIkRhdGVTZXBhcmF0b3IiLCJSZWFjdCIsIkNvbXBvbmVudCIsImdldExhYmVsIiwiZGF0ZSIsIkRhdGUiLCJwcm9wcyIsInRzIiwiZm9yRXhwb3J0IiwidG9kYXkiLCJ5ZXN0ZXJkYXkiLCJkYXlzIiwic2V0RGF0ZSIsImdldERhdGUiLCJ0b0RhdGVTdHJpbmciLCJnZXRUaW1lIiwiZ2V0RGF5IiwicmVuZGVyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFpQkE7O0FBRUE7O0FBQ0E7O0FBQ0E7Ozs7QUFFQSxTQUFTQSxZQUFULEdBQWtDO0FBQzlCLFNBQU8sQ0FDSCx5QkFBRyxRQUFILENBREcsRUFFSCx5QkFBRyxRQUFILENBRkcsRUFHSCx5QkFBRyxTQUFILENBSEcsRUFJSCx5QkFBRyxXQUFILENBSkcsRUFLSCx5QkFBRyxVQUFILENBTEcsRUFNSCx5QkFBRyxRQUFILENBTkcsRUFPSCx5QkFBRyxVQUFILENBUEcsQ0FBUDtBQVNIOztJQVFvQkMsYSxXQURwQixnREFBcUIsOEJBQXJCLEMsZ0JBQUQsTUFDcUJBLGFBRHJCLFNBQzJDQyxlQUFNQyxTQURqRCxDQUNtRTtBQUN2REMsRUFBQUEsUUFBUSxHQUFHO0FBQ2YsVUFBTUMsSUFBSSxHQUFHLElBQUlDLElBQUosQ0FBUyxLQUFLQyxLQUFMLENBQVdDLEVBQXBCLENBQWIsQ0FEZSxDQUdmOztBQUNBLFFBQUksS0FBS0QsS0FBTCxDQUFXRSxTQUFmLEVBQTBCLE9BQU8scUNBQXFCSixJQUFyQixDQUFQO0FBRTFCLFVBQU1LLEtBQUssR0FBRyxJQUFJSixJQUFKLEVBQWQ7QUFDQSxVQUFNSyxTQUFTLEdBQUcsSUFBSUwsSUFBSixFQUFsQjtBQUNBLFVBQU1NLElBQUksR0FBR1osWUFBWSxFQUF6QjtBQUNBVyxJQUFBQSxTQUFTLENBQUNFLE9BQVYsQ0FBa0JILEtBQUssQ0FBQ0ksT0FBTixLQUFrQixDQUFwQzs7QUFFQSxRQUFJVCxJQUFJLENBQUNVLFlBQUwsT0FBd0JMLEtBQUssQ0FBQ0ssWUFBTixFQUE1QixFQUFrRDtBQUM5QyxhQUFPLHlCQUFHLE9BQUgsQ0FBUDtBQUNILEtBRkQsTUFFTyxJQUFJVixJQUFJLENBQUNVLFlBQUwsT0FBd0JKLFNBQVMsQ0FBQ0ksWUFBVixFQUE1QixFQUFzRDtBQUN6RCxhQUFPLHlCQUFHLFdBQUgsQ0FBUDtBQUNILEtBRk0sTUFFQSxJQUFJTCxLQUFLLENBQUNNLE9BQU4sS0FBa0JYLElBQUksQ0FBQ1csT0FBTCxFQUFsQixHQUFtQyxJQUFJLEVBQUosR0FBUyxFQUFULEdBQWMsRUFBZCxHQUFtQixJQUExRCxFQUFnRTtBQUNuRSxhQUFPSixJQUFJLENBQUNQLElBQUksQ0FBQ1ksTUFBTCxFQUFELENBQVg7QUFDSCxLQUZNLE1BRUE7QUFDSCxhQUFPLHFDQUFxQlosSUFBckIsQ0FBUDtBQUNIO0FBQ0o7O0FBRURhLEVBQUFBLE1BQU0sR0FBRztBQUNMO0FBQ0E7QUFDQSx3QkFBTztBQUFJLE1BQUEsU0FBUyxFQUFDLGtCQUFkO0FBQWlDLE1BQUEsSUFBSSxFQUFDLFdBQXRDO0FBQWtELE1BQUEsUUFBUSxFQUFFLENBQUMsQ0FBN0Q7QUFBZ0Usb0JBQVksS0FBS2QsUUFBTDtBQUE1RSxvQkFDSDtBQUFJLE1BQUEsSUFBSSxFQUFDO0FBQVQsTUFERyxlQUVIO0FBQUsscUJBQVk7QUFBakIsT0FBMEIsS0FBS0EsUUFBTCxFQUExQixDQUZHLGVBR0g7QUFBSSxNQUFBLElBQUksRUFBQztBQUFULE1BSEcsQ0FBUDtBQUtIOztBQS9COEQsQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5Db3B5cmlnaHQgMjAxOCBNaWNoYWVsIFRlbGF0eW5za2kgPDd0M2NoZ3V5QGdtYWlsLmNvbT5cbkNvcHlyaWdodCAyMDE1IC0gMjAyMSBUaGUgTWF0cml4Lm9yZyBGb3VuZGF0aW9uIEMuSS5DLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IF90IH0gZnJvbSAnLi4vLi4vLi4vbGFuZ3VhZ2VIYW5kbGVyJztcbmltcG9ydCB7IGZvcm1hdEZ1bGxEYXRlTm9UaW1lIH0gZnJvbSAnLi4vLi4vLi4vRGF0ZVV0aWxzJztcbmltcG9ydCB7IHJlcGxhY2VhYmxlQ29tcG9uZW50IH0gZnJvbSBcIi4uLy4uLy4uL3V0aWxzL3JlcGxhY2VhYmxlQ29tcG9uZW50XCI7XG5cbmZ1bmN0aW9uIGdldERheXNBcnJheSgpOiBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIFtcbiAgICAgICAgX3QoJ1N1bmRheScpLFxuICAgICAgICBfdCgnTW9uZGF5JyksXG4gICAgICAgIF90KCdUdWVzZGF5JyksXG4gICAgICAgIF90KCdXZWRuZXNkYXknKSxcbiAgICAgICAgX3QoJ1RodXJzZGF5JyksXG4gICAgICAgIF90KCdGcmlkYXknKSxcbiAgICAgICAgX3QoJ1NhdHVyZGF5JyksXG4gICAgXTtcbn1cblxuaW50ZXJmYWNlIElQcm9wcyB7XG4gICAgdHM6IG51bWJlcjtcbiAgICBmb3JFeHBvcnQ/OiBib29sZWFuO1xufVxuXG5AcmVwbGFjZWFibGVDb21wb25lbnQoXCJ2aWV3cy5tZXNzYWdlcy5EYXRlU2VwYXJhdG9yXCIpXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEYXRlU2VwYXJhdG9yIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PElQcm9wcz4ge1xuICAgIHByaXZhdGUgZ2V0TGFiZWwoKSB7XG4gICAgICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZSh0aGlzLnByb3BzLnRzKTtcblxuICAgICAgICAvLyBEdXJpbmcgdGhlIHRpbWUgdGhlIGFyY2hpdmUgaXMgYmVpbmcgdmlld2VkLCBhIHNwZWNpZmljIGRheSBtaWdodCBub3QgbWFrZSBzZW5zZSwgc28gd2UgcmV0dXJuIHRoZSBmdWxsIGRhdGVcbiAgICAgICAgaWYgKHRoaXMucHJvcHMuZm9yRXhwb3J0KSByZXR1cm4gZm9ybWF0RnVsbERhdGVOb1RpbWUoZGF0ZSk7XG5cbiAgICAgICAgY29uc3QgdG9kYXkgPSBuZXcgRGF0ZSgpO1xuICAgICAgICBjb25zdCB5ZXN0ZXJkYXkgPSBuZXcgRGF0ZSgpO1xuICAgICAgICBjb25zdCBkYXlzID0gZ2V0RGF5c0FycmF5KCk7XG4gICAgICAgIHllc3RlcmRheS5zZXREYXRlKHRvZGF5LmdldERhdGUoKSAtIDEpO1xuXG4gICAgICAgIGlmIChkYXRlLnRvRGF0ZVN0cmluZygpID09PSB0b2RheS50b0RhdGVTdHJpbmcoKSkge1xuICAgICAgICAgICAgcmV0dXJuIF90KCdUb2RheScpO1xuICAgICAgICB9IGVsc2UgaWYgKGRhdGUudG9EYXRlU3RyaW5nKCkgPT09IHllc3RlcmRheS50b0RhdGVTdHJpbmcoKSkge1xuICAgICAgICAgICAgcmV0dXJuIF90KCdZZXN0ZXJkYXknKTtcbiAgICAgICAgfSBlbHNlIGlmICh0b2RheS5nZXRUaW1lKCkgLSBkYXRlLmdldFRpbWUoKSA8IDYgKiAyNCAqIDYwICogNjAgKiAxMDAwKSB7XG4gICAgICAgICAgICByZXR1cm4gZGF5c1tkYXRlLmdldERheSgpXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBmb3JtYXRGdWxsRGF0ZU5vVGltZShkYXRlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgLy8gQVJJQSB0cmVhdHMgPGhyLz5zIGFzIHNlcGFyYXRvcnMsIGhlcmUgd2UgYWJ1c2UgdGhlbSBzbGlnaHRseSBzbyBtYW51YWxseSB0cmVhdCB0aGlzIGVudGlyZSB0aGluZyBhcyBvbmVcbiAgICAgICAgLy8gdGFiLWluZGV4PS0xIHRvIGFsbG93IGl0IHRvIGJlIGZvY3VzYWJsZSBidXQgZG8gbm90IGFkZCB0YWIgc3RvcCBmb3IgaXQsIHByaW1hcmlseSBmb3Igc2NyZWVuIHJlYWRlcnNcbiAgICAgICAgcmV0dXJuIDxoMiBjbGFzc05hbWU9XCJteF9EYXRlU2VwYXJhdG9yXCIgcm9sZT1cInNlcGFyYXRvclwiIHRhYkluZGV4PXstMX0gYXJpYS1sYWJlbD17dGhpcy5nZXRMYWJlbCgpfT5cbiAgICAgICAgICAgIDxociByb2xlPVwibm9uZVwiIC8+XG4gICAgICAgICAgICA8ZGl2IGFyaWEtaGlkZGVuPVwidHJ1ZVwiPnsgdGhpcy5nZXRMYWJlbCgpIH08L2Rpdj5cbiAgICAgICAgICAgIDxociByb2xlPVwibm9uZVwiIC8+XG4gICAgICAgIDwvaDI+O1xuICAgIH1cbn1cbiJdfQ==