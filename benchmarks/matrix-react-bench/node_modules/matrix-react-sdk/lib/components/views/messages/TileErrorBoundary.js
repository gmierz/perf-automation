"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _languageHandler = require("../../../languageHandler");

var _Modal = _interopRequireDefault(require("../../../Modal"));

var _SdkConfig = _interopRequireDefault(require("../../../SdkConfig"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _BugReportDialog = _interopRequireDefault(require("../dialogs/BugReportDialog"));

var _dec, _class;

let TileErrorBoundary = (_dec = (0, _replaceableComponent.replaceableComponent)("views.messages.TileErrorBoundary"), _dec(_class = class TileErrorBoundary extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "onBugReport", () => {
      _Modal.default.createTrackedDialog('Bug Report Dialog', '', _BugReportDialog.default, {
        label: 'react-soft-crash-tile',
        error: this.state.error
      });
    });
    this.state = {
      error: null
    };
  }

  static getDerivedStateFromError(error) {
    // Side effects are not permitted here, so we only update the state so
    // that the next render shows an error message.
    return {
      error
    };
  }

  render() {
    if (this.state.error) {
      const {
        mxEvent
      } = this.props;
      const classes = {
        mx_EventTile: true,
        mx_EventTile_info: true,
        mx_EventTile_content: true,
        mx_EventTile_tileError: true
      };
      let submitLogsButton;

      if (_SdkConfig.default.get().bug_report_endpoint_url) {
        submitLogsButton = /*#__PURE__*/_react.default.createElement("a", {
          onClick: this.onBugReport,
          href: "#"
        }, (0, _languageHandler._t)("Submit logs"));
      }

      return /*#__PURE__*/_react.default.createElement("div", {
        className: (0, _classnames.default)(classes)
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_EventTile_line"
      }, /*#__PURE__*/_react.default.createElement("span", null, (0, _languageHandler._t)("Can't load this message"), mxEvent && ` (${mxEvent.getType()})`, submitLogsButton)));
    }

    return this.props.children;
  }

}) || _class);
exports.default = TileErrorBoundary;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL21lc3NhZ2VzL1RpbGVFcnJvckJvdW5kYXJ5LnRzeCJdLCJuYW1lcyI6WyJUaWxlRXJyb3JCb3VuZGFyeSIsIlJlYWN0IiwiQ29tcG9uZW50IiwiY29uc3RydWN0b3IiLCJwcm9wcyIsIk1vZGFsIiwiY3JlYXRlVHJhY2tlZERpYWxvZyIsIkJ1Z1JlcG9ydERpYWxvZyIsImxhYmVsIiwiZXJyb3IiLCJzdGF0ZSIsImdldERlcml2ZWRTdGF0ZUZyb21FcnJvciIsInJlbmRlciIsIm14RXZlbnQiLCJjbGFzc2VzIiwibXhfRXZlbnRUaWxlIiwibXhfRXZlbnRUaWxlX2luZm8iLCJteF9FdmVudFRpbGVfY29udGVudCIsIm14X0V2ZW50VGlsZV90aWxlRXJyb3IiLCJzdWJtaXRMb2dzQnV0dG9uIiwiU2RrQ29uZmlnIiwiZ2V0IiwiYnVnX3JlcG9ydF9lbmRwb2ludF91cmwiLCJvbkJ1Z1JlcG9ydCIsImdldFR5cGUiLCJjaGlsZHJlbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFnQkE7O0FBQ0E7O0FBR0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7SUFXcUJBLGlCLFdBRHBCLGdEQUFxQixrQ0FBckIsQyxnQkFBRCxNQUNxQkEsaUJBRHJCLFNBQytDQyxlQUFNQyxTQURyRCxDQUMrRTtBQUMzRUMsRUFBQUEsV0FBVyxDQUFDQyxLQUFELEVBQVE7QUFDZixVQUFNQSxLQUFOO0FBRGUsdURBY0csTUFBWTtBQUM5QkMscUJBQU1DLG1CQUFOLENBQTBCLG1CQUExQixFQUErQyxFQUEvQyxFQUFtREMsd0JBQW5ELEVBQW9FO0FBQ2hFQyxRQUFBQSxLQUFLLEVBQUUsdUJBRHlEO0FBRWhFQyxRQUFBQSxLQUFLLEVBQUUsS0FBS0MsS0FBTCxDQUFXRDtBQUY4QyxPQUFwRTtBQUlILEtBbkJrQjtBQUdmLFNBQUtDLEtBQUwsR0FBYTtBQUNURCxNQUFBQSxLQUFLLEVBQUU7QUFERSxLQUFiO0FBR0g7O0FBRThCLFNBQXhCRSx3QkFBd0IsQ0FBQ0YsS0FBRCxFQUFnQztBQUMzRDtBQUNBO0FBQ0EsV0FBTztBQUFFQSxNQUFBQTtBQUFGLEtBQVA7QUFDSDs7QUFTREcsRUFBQUEsTUFBTSxHQUFHO0FBQ0wsUUFBSSxLQUFLRixLQUFMLENBQVdELEtBQWYsRUFBc0I7QUFDbEIsWUFBTTtBQUFFSSxRQUFBQTtBQUFGLFVBQWMsS0FBS1QsS0FBekI7QUFDQSxZQUFNVSxPQUFPLEdBQUc7QUFDWkMsUUFBQUEsWUFBWSxFQUFFLElBREY7QUFFWkMsUUFBQUEsaUJBQWlCLEVBQUUsSUFGUDtBQUdaQyxRQUFBQSxvQkFBb0IsRUFBRSxJQUhWO0FBSVpDLFFBQUFBLHNCQUFzQixFQUFFO0FBSlosT0FBaEI7QUFPQSxVQUFJQyxnQkFBSjs7QUFDQSxVQUFJQyxtQkFBVUMsR0FBVixHQUFnQkMsdUJBQXBCLEVBQTZDO0FBQ3pDSCxRQUFBQSxnQkFBZ0IsZ0JBQUc7QUFBRyxVQUFBLE9BQU8sRUFBRSxLQUFLSSxXQUFqQjtBQUE4QixVQUFBLElBQUksRUFBQztBQUFuQyxXQUNiLHlCQUFHLGFBQUgsQ0FEYSxDQUFuQjtBQUdIOztBQUVELDBCQUFRO0FBQUssUUFBQSxTQUFTLEVBQUUseUJBQVdULE9BQVg7QUFBaEIsc0JBQ0o7QUFBSyxRQUFBLFNBQVMsRUFBQztBQUFmLHNCQUNJLDJDQUNNLHlCQUFHLHlCQUFILENBRE4sRUFFTUQsT0FBTyxJQUFLLEtBQUlBLE9BQU8sQ0FBQ1csT0FBUixFQUFrQixHQUZ4QyxFQUdNTCxnQkFITixDQURKLENBREksQ0FBUjtBQVNIOztBQUVELFdBQU8sS0FBS2YsS0FBTCxDQUFXcUIsUUFBbEI7QUFDSDs7QUFuRDBFLEMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuQ29weXJpZ2h0IDIwMjAgLSAyMDIxIFRoZSBNYXRyaXgub3JnIEZvdW5kYXRpb24gQy5JLkMuXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IHsgTWF0cml4RXZlbnQgfSBmcm9tIFwibWF0cml4LWpzLXNkay9zcmMvbW9kZWxzL2V2ZW50XCI7XG5cbmltcG9ydCB7IF90IH0gZnJvbSAnLi4vLi4vLi4vbGFuZ3VhZ2VIYW5kbGVyJztcbmltcG9ydCBNb2RhbCBmcm9tICcuLi8uLi8uLi9Nb2RhbCc7XG5pbXBvcnQgU2RrQ29uZmlnIGZyb20gXCIuLi8uLi8uLi9TZGtDb25maWdcIjtcbmltcG9ydCB7IHJlcGxhY2VhYmxlQ29tcG9uZW50IH0gZnJvbSBcIi4uLy4uLy4uL3V0aWxzL3JlcGxhY2VhYmxlQ29tcG9uZW50XCI7XG5pbXBvcnQgQnVnUmVwb3J0RGlhbG9nIGZyb20gJy4uL2RpYWxvZ3MvQnVnUmVwb3J0RGlhbG9nJztcblxuaW50ZXJmYWNlIElQcm9wcyB7XG4gICAgbXhFdmVudDogTWF0cml4RXZlbnQ7XG59XG5cbmludGVyZmFjZSBJU3RhdGUge1xuICAgIGVycm9yOiBFcnJvcjtcbn1cblxuQHJlcGxhY2VhYmxlQ29tcG9uZW50KFwidmlld3MubWVzc2FnZXMuVGlsZUVycm9yQm91bmRhcnlcIilcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRpbGVFcnJvckJvdW5kYXJ5IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PElQcm9wcywgSVN0YXRlPiB7XG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBlcnJvcjogbnVsbCxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yKGVycm9yOiBFcnJvcik6IFBhcnRpYWw8SVN0YXRlPiB7XG4gICAgICAgIC8vIFNpZGUgZWZmZWN0cyBhcmUgbm90IHBlcm1pdHRlZCBoZXJlLCBzbyB3ZSBvbmx5IHVwZGF0ZSB0aGUgc3RhdGUgc29cbiAgICAgICAgLy8gdGhhdCB0aGUgbmV4dCByZW5kZXIgc2hvd3MgYW4gZXJyb3IgbWVzc2FnZS5cbiAgICAgICAgcmV0dXJuIHsgZXJyb3IgfTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG9uQnVnUmVwb3J0ID0gKCk6IHZvaWQgPT4ge1xuICAgICAgICBNb2RhbC5jcmVhdGVUcmFja2VkRGlhbG9nKCdCdWcgUmVwb3J0IERpYWxvZycsICcnLCBCdWdSZXBvcnREaWFsb2csIHtcbiAgICAgICAgICAgIGxhYmVsOiAncmVhY3Qtc29mdC1jcmFzaC10aWxlJyxcbiAgICAgICAgICAgIGVycm9yOiB0aGlzLnN0YXRlLmVycm9yLFxuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS5lcnJvcikge1xuICAgICAgICAgICAgY29uc3QgeyBteEV2ZW50IH0gPSB0aGlzLnByb3BzO1xuICAgICAgICAgICAgY29uc3QgY2xhc3NlcyA9IHtcbiAgICAgICAgICAgICAgICBteF9FdmVudFRpbGU6IHRydWUsXG4gICAgICAgICAgICAgICAgbXhfRXZlbnRUaWxlX2luZm86IHRydWUsXG4gICAgICAgICAgICAgICAgbXhfRXZlbnRUaWxlX2NvbnRlbnQ6IHRydWUsXG4gICAgICAgICAgICAgICAgbXhfRXZlbnRUaWxlX3RpbGVFcnJvcjogdHJ1ZSxcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGxldCBzdWJtaXRMb2dzQnV0dG9uO1xuICAgICAgICAgICAgaWYgKFNka0NvbmZpZy5nZXQoKS5idWdfcmVwb3J0X2VuZHBvaW50X3VybCkge1xuICAgICAgICAgICAgICAgIHN1Ym1pdExvZ3NCdXR0b24gPSA8YSBvbkNsaWNrPXt0aGlzLm9uQnVnUmVwb3J0fSBocmVmPVwiI1wiPlxuICAgICAgICAgICAgICAgICAgICB7IF90KFwiU3VibWl0IGxvZ3NcIikgfVxuICAgICAgICAgICAgICAgIDwvYT47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiAoPGRpdiBjbGFzc05hbWU9e2NsYXNzTmFtZXMoY2xhc3Nlcyl9PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibXhfRXZlbnRUaWxlX2xpbmVcIj5cbiAgICAgICAgICAgICAgICAgICAgPHNwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICB7IF90KFwiQ2FuJ3QgbG9hZCB0aGlzIG1lc3NhZ2VcIikgfVxuICAgICAgICAgICAgICAgICAgICAgICAgeyBteEV2ZW50ICYmIGAgKCR7bXhFdmVudC5nZXRUeXBlKCl9KWAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgeyBzdWJtaXRMb2dzQnV0dG9uIH1cbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLmNoaWxkcmVuO1xuICAgIH1cbn1cbiJdfQ==