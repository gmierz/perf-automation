"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _RoomAvatar = _interopRequireDefault(require("./RoomAvatar"));

var _NotificationBadge = _interopRequireDefault(require("../rooms/NotificationBadge"));

var _RoomNotificationStateStore = require("../../../stores/notifications/RoomNotificationStateStore");

var _presence = require("../../../utils/presence");

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _languageHandler = require("../../../languageHandler");

var _TextWithTooltip = _interopRequireDefault(require("../elements/TextWithTooltip"));

var _DMRoomMap = _interopRequireDefault(require("../../../utils/DMRoomMap"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _dec, _class;

var Icon;

(function (Icon) {
  Icon["None"] = "NONE";
  Icon["Globe"] = "GLOBE";
  Icon["PresenceOnline"] = "ONLINE";
  Icon["PresenceAway"] = "AWAY";
  Icon["PresenceOffline"] = "OFFLINE";
})(Icon || (Icon = {}));

function tooltipText(variant) {
  switch (variant) {
    case Icon.Globe:
      return (0, _languageHandler._t)("This room is public");

    case Icon.PresenceOnline:
      return (0, _languageHandler._t)("Online");

    case Icon.PresenceAway:
      return (0, _languageHandler._t)("Away");

    case Icon.PresenceOffline:
      return (0, _languageHandler._t)("Offline");
  }
}

let DecoratedRoomAvatar = (_dec = (0, _replaceableComponent.replaceableComponent)("views.avatars.DecoratedRoomAvatar"), _dec(_class = class DecoratedRoomAvatar extends _react.default.PureComponent {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "_dmUser", void 0);
    (0, _defineProperty2.default)(this, "isUnmounted", false);
    (0, _defineProperty2.default)(this, "isWatchingTimeline", false);
    (0, _defineProperty2.default)(this, "onRoomTimeline", (ev, room) => {
      if (this.isUnmounted) return; // apparently these can happen?

      if (!room) return;
      if (this.props.room.roomId !== room.roomId) return;

      if (ev.getType() === 'm.room.join_rules' || ev.getType() === 'm.room.member') {
        const newIcon = this.calculateIcon();

        if (newIcon !== this.state.icon) {
          this.setState({
            icon: newIcon
          });
        }
      }
    });
    (0, _defineProperty2.default)(this, "onPresenceUpdate", () => {
      if (this.isUnmounted) return;
      const newIcon = this.getPresenceIcon();
      if (newIcon !== this.state.icon) this.setState({
        icon: newIcon
      });
    });
    this.state = {
      notificationState: _RoomNotificationStateStore.RoomNotificationStateStore.instance.getRoomState(this.props.room),
      icon: this.calculateIcon()
    };
  }

  componentWillUnmount() {
    this.isUnmounted = true;
    if (this.isWatchingTimeline) this.props.room.off('Room.timeline', this.onRoomTimeline);
    this.dmUser = null; // clear listeners, if any
  }

  get isPublicRoom() {
    const joinRules = this.props.room.currentState.getStateEvents("m.room.join_rules", "");
    const joinRule = joinRules && joinRules.getContent().join_rule;
    return joinRule === 'public';
  }

  get dmUser() {
    return this._dmUser;
  }

  set dmUser(val) {
    const oldUser = this._dmUser;
    this._dmUser = val;

    if (oldUser && oldUser !== this._dmUser) {
      oldUser.off('User.currentlyActive', this.onPresenceUpdate);
      oldUser.off('User.presence', this.onPresenceUpdate);
    }

    if (this._dmUser && oldUser !== this._dmUser) {
      this._dmUser.on('User.currentlyActive', this.onPresenceUpdate);

      this._dmUser.on('User.presence', this.onPresenceUpdate);
    }
  }

  getPresenceIcon() {
    if (!this.dmUser) return Icon.None;
    let icon = Icon.None;
    const isOnline = this.dmUser.currentlyActive || this.dmUser.presence === 'online';

    if (isOnline) {
      icon = Icon.PresenceOnline;
    } else if (this.dmUser.presence === 'offline') {
      icon = Icon.PresenceOffline;
    } else if (this.dmUser.presence === 'unavailable') {
      icon = Icon.PresenceAway;
    }

    return icon;
  }

  calculateIcon() {
    let icon = Icon.None; // We look at the DMRoomMap and not the tag here so that we don't exclude DMs in Favourites

    const otherUserId = _DMRoomMap.default.shared().getUserIdForRoomId(this.props.room.roomId);

    if (otherUserId && this.props.room.getJoinedMemberCount() === 2) {
      // Track presence, if available
      if ((0, _presence.isPresenceEnabled)()) {
        if (otherUserId) {
          this.dmUser = _MatrixClientPeg.MatrixClientPeg.get().getUser(otherUserId);
          icon = this.getPresenceIcon();
        }
      }
    } else {
      // Track publicity
      icon = this.isPublicRoom ? Icon.Globe : Icon.None;

      if (!this.isWatchingTimeline) {
        this.props.room.on('Room.timeline', this.onRoomTimeline);
        this.isWatchingTimeline = true;
      }
    }

    return icon;
  }

  render() {
    let badge;

    if (this.props.displayBadge) {
      badge = /*#__PURE__*/_react.default.createElement(_NotificationBadge.default, {
        notification: this.state.notificationState,
        forceCount: this.props.forceCount,
        roomId: this.props.room.roomId
      });
    }

    let icon;

    if (this.state.icon !== Icon.None) {
      icon = /*#__PURE__*/_react.default.createElement(_TextWithTooltip.default, {
        tooltip: tooltipText(this.state.icon),
        class: `mx_DecoratedRoomAvatar_icon mx_DecoratedRoomAvatar_icon_${this.state.icon.toLowerCase()}`
      });
    }

    const classes = (0, _classnames.default)("mx_DecoratedRoomAvatar", {
      mx_DecoratedRoomAvatar_cutout: icon
    });
    return /*#__PURE__*/_react.default.createElement("div", {
      className: classes
    }, /*#__PURE__*/_react.default.createElement(_RoomAvatar.default, {
      room: this.props.room,
      width: this.props.avatarSize,
      height: this.props.avatarSize,
      oobData: this.props.oobData,
      viewAvatarOnClick: this.props.viewAvatarOnClick
    }), icon, badge);
  }

}) || _class);
exports.default = DecoratedRoomAvatar;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,