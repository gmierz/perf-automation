"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _BaseAvatar = _interopRequireDefault(require("./BaseAvatar"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _Media = require("../../../customisations/Media");

const _excluded = ["groupId", "groupAvatarUrl", "groupName"];

var _dec, _class, _class2, _temp;

let GroupAvatar = (_dec = (0, _replaceableComponent.replaceableComponent)("views.avatars.GroupAvatar"), _dec(_class = (_temp = _class2 = class GroupAvatar extends _react.default.Component {
  getGroupAvatarUrl() {
    if (!this.props.groupAvatarUrl) return null;
    return (0, _Media.mediaFromMxc)(this.props.groupAvatarUrl).getThumbnailOfSourceHttp(this.props.width, this.props.height, this.props.resizeMethod);
  }

  render() {
    // extract the props we use from props so we can pass any others through
    // should consider adding this as a global rule in js-sdk?

    /* eslint @typescript-eslint/no-unused-vars: ["error", { "ignoreRestSiblings": true }] */
    const _this$props = this.props,
          {
      groupId,
      groupAvatarUrl,
      groupName
    } = _this$props,
          otherProps = (0, _objectWithoutProperties2.default)(_this$props, _excluded);
    return /*#__PURE__*/_react.default.createElement(_BaseAvatar.default, (0, _extends2.default)({
      name: groupName || this.props.groupId[1],
      idName: this.props.groupId,
      url: this.getGroupAvatarUrl()
    }, otherProps));
  }

}, (0, _defineProperty2.default)(_class2, "defaultProps", {
  width: 36,
  height: 36,
  resizeMethod: 'crop'
}), _temp)) || _class);
exports.default = GroupAvatar;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL2F2YXRhcnMvR3JvdXBBdmF0YXIudHN4Il0sIm5hbWVzIjpbIkdyb3VwQXZhdGFyIiwiUmVhY3QiLCJDb21wb25lbnQiLCJnZXRHcm91cEF2YXRhclVybCIsInByb3BzIiwiZ3JvdXBBdmF0YXJVcmwiLCJnZXRUaHVtYm5haWxPZlNvdXJjZUh0dHAiLCJ3aWR0aCIsImhlaWdodCIsInJlc2l6ZU1ldGhvZCIsInJlbmRlciIsImdyb3VwSWQiLCJncm91cE5hbWUiLCJvdGhlclByb3BzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFnQkE7O0FBR0E7O0FBQ0E7O0FBQ0E7Ozs7OztJQWFxQkEsVyxXQURwQixnREFBcUIsMkJBQXJCLEMsbUNBQUQsTUFDcUJBLFdBRHJCLFNBQ3lDQyxlQUFNQyxTQUQvQyxDQUNpRTtBQU83REMsRUFBQUEsaUJBQWlCLEdBQUc7QUFDaEIsUUFBSSxDQUFDLEtBQUtDLEtBQUwsQ0FBV0MsY0FBaEIsRUFBZ0MsT0FBTyxJQUFQO0FBQ2hDLFdBQU8seUJBQWEsS0FBS0QsS0FBTCxDQUFXQyxjQUF4QixFQUF3Q0Msd0JBQXhDLENBQ0gsS0FBS0YsS0FBTCxDQUFXRyxLQURSLEVBRUgsS0FBS0gsS0FBTCxDQUFXSSxNQUZSLEVBR0gsS0FBS0osS0FBTCxDQUFXSyxZQUhSLENBQVA7QUFLSDs7QUFFREMsRUFBQUEsTUFBTSxHQUFHO0FBQ0w7QUFDQTs7QUFDQTtBQUNBLHdCQUE4RCxLQUFLTixLQUFuRTtBQUFBLFVBQU07QUFBRU8sTUFBQUEsT0FBRjtBQUFXTixNQUFBQSxjQUFYO0FBQTJCTyxNQUFBQTtBQUEzQixLQUFOO0FBQUEsVUFBK0NDLFVBQS9DO0FBRUEsd0JBQ0ksNkJBQUMsbUJBQUQ7QUFDSSxNQUFBLElBQUksRUFBRUQsU0FBUyxJQUFJLEtBQUtSLEtBQUwsQ0FBV08sT0FBWCxDQUFtQixDQUFuQixDQUR2QjtBQUVJLE1BQUEsTUFBTSxFQUFFLEtBQUtQLEtBQUwsQ0FBV08sT0FGdkI7QUFHSSxNQUFBLEdBQUcsRUFBRSxLQUFLUixpQkFBTDtBQUhULE9BSVFVLFVBSlIsRUFESjtBQVFIOztBQTlCNEQsQyx5REFDaEM7QUFDekJOLEVBQUFBLEtBQUssRUFBRSxFQURrQjtBQUV6QkMsRUFBQUEsTUFBTSxFQUFFLEVBRmlCO0FBR3pCQyxFQUFBQSxZQUFZLEVBQUU7QUFIVyxDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbkNvcHlyaWdodCAyMDE3LCAyMDIxIFRoZSBNYXRyaXgub3JnIEZvdW5kYXRpb24gQy5JLkMuXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFJlc2l6ZU1ldGhvZCB9IGZyb20gJ21hdHJpeC1qcy1zZGsvc3JjL0B0eXBlcy9wYXJ0aWFscyc7XG5cbmltcG9ydCBCYXNlQXZhdGFyIGZyb20gJy4vQmFzZUF2YXRhcic7XG5pbXBvcnQgeyByZXBsYWNlYWJsZUNvbXBvbmVudCB9IGZyb20gXCIuLi8uLi8uLi91dGlscy9yZXBsYWNlYWJsZUNvbXBvbmVudFwiO1xuaW1wb3J0IHsgbWVkaWFGcm9tTXhjIH0gZnJvbSBcIi4uLy4uLy4uL2N1c3RvbWlzYXRpb25zL01lZGlhXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVByb3BzIHtcbiAgICAgICAgZ3JvdXBJZD86IHN0cmluZztcbiAgICAgICAgZ3JvdXBOYW1lPzogc3RyaW5nO1xuICAgICAgICBncm91cEF2YXRhclVybD86IHN0cmluZztcbiAgICAgICAgd2lkdGg/OiBudW1iZXI7XG4gICAgICAgIGhlaWdodD86IG51bWJlcjtcbiAgICAgICAgcmVzaXplTWV0aG9kPzogUmVzaXplTWV0aG9kO1xuICAgICAgICBvbkNsaWNrPzogUmVhY3QuTW91c2VFdmVudEhhbmRsZXI7XG59XG5cbkByZXBsYWNlYWJsZUNvbXBvbmVudChcInZpZXdzLmF2YXRhcnMuR3JvdXBBdmF0YXJcIilcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdyb3VwQXZhdGFyIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PElQcm9wcz4ge1xuICAgIHB1YmxpYyBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgICAgICB3aWR0aDogMzYsXG4gICAgICAgIGhlaWdodDogMzYsXG4gICAgICAgIHJlc2l6ZU1ldGhvZDogJ2Nyb3AnLFxuICAgIH07XG5cbiAgICBnZXRHcm91cEF2YXRhclVybCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLnByb3BzLmdyb3VwQXZhdGFyVXJsKSByZXR1cm4gbnVsbDtcbiAgICAgICAgcmV0dXJuIG1lZGlhRnJvbU14Yyh0aGlzLnByb3BzLmdyb3VwQXZhdGFyVXJsKS5nZXRUaHVtYm5haWxPZlNvdXJjZUh0dHAoXG4gICAgICAgICAgICB0aGlzLnByb3BzLndpZHRoLFxuICAgICAgICAgICAgdGhpcy5wcm9wcy5oZWlnaHQsXG4gICAgICAgICAgICB0aGlzLnByb3BzLnJlc2l6ZU1ldGhvZCxcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIC8vIGV4dHJhY3QgdGhlIHByb3BzIHdlIHVzZSBmcm9tIHByb3BzIHNvIHdlIGNhbiBwYXNzIGFueSBvdGhlcnMgdGhyb3VnaFxuICAgICAgICAvLyBzaG91bGQgY29uc2lkZXIgYWRkaW5nIHRoaXMgYXMgYSBnbG9iYWwgcnVsZSBpbiBqcy1zZGs/XG4gICAgICAgIC8qIGVzbGludCBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnM6IFtcImVycm9yXCIsIHsgXCJpZ25vcmVSZXN0U2libGluZ3NcIjogdHJ1ZSB9XSAqL1xuICAgICAgICBjb25zdCB7IGdyb3VwSWQsIGdyb3VwQXZhdGFyVXJsLCBncm91cE5hbWUsIC4uLm90aGVyUHJvcHMgfSA9IHRoaXMucHJvcHM7XG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxCYXNlQXZhdGFyXG4gICAgICAgICAgICAgICAgbmFtZT17Z3JvdXBOYW1lIHx8IHRoaXMucHJvcHMuZ3JvdXBJZFsxXX1cbiAgICAgICAgICAgICAgICBpZE5hbWU9e3RoaXMucHJvcHMuZ3JvdXBJZH1cbiAgICAgICAgICAgICAgICB1cmw9e3RoaXMuZ2V0R3JvdXBBdmF0YXJVcmwoKX1cbiAgICAgICAgICAgICAgICB7Li4ub3RoZXJQcm9wc31cbiAgICAgICAgICAgIC8+XG4gICAgICAgICk7XG4gICAgfVxufVxuIl19