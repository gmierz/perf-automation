"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var AvatarLogic = _interopRequireWildcard(require("../../../Avatar"));

var _SettingsStore = _interopRequireDefault(require("../../../settings/SettingsStore"));

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

var _RoomContext = _interopRequireDefault(require("../../../contexts/RoomContext"));

var _MatrixClientContext = _interopRequireDefault(require("../../../contexts/MatrixClientContext"));

var _useEventEmitter = require("../../../hooks/useEventEmitter");

var _units = require("../../../utils/units");

var _languageHandler = require("../../../languageHandler");

const _excluded = ["name", "idName", "title", "url", "urls", "width", "height", "resizeMethod", "defaultToInitialLetter", "onClick", "inputRef", "className"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const calculateUrls = (url, urls, lowBandwidth) => {
  // work out the full set of urls to try to load. This is formed like so:
  // imageUrls: [ props.url, ...props.urls ]
  let _urls = [];

  if (!lowBandwidth) {
    _urls = urls || [];

    if (url) {
      // copy urls and put url first
      _urls = [url, ..._urls];
    }
  } // deduplicate URLs


  return Array.from(new Set(_urls));
};

const useImageUrl = ({
  url,
  urls
}) => {
  // Since this is a hot code path and the settings store can be slow, we
  // use the cached lowBandwidth value from the room context if it exists
  const roomContext = (0, _react.useContext)(_RoomContext.default);
  const lowBandwidth = roomContext ? roomContext.lowBandwidth : _SettingsStore.default.getValue("lowBandwidth");
  const [imageUrls, setUrls] = (0, _react.useState)(calculateUrls(url, urls, lowBandwidth));
  const [urlsIndex, setIndex] = (0, _react.useState)(0);
  const onError = (0, _react.useCallback)(() => {
    setIndex(i => i + 1); // try the next one
  }, []);
  (0, _react.useEffect)(() => {
    setUrls(calculateUrls(url, urls, lowBandwidth));
    setIndex(0);
  }, [url, JSON.stringify(urls)]); // eslint-disable-line react-hooks/exhaustive-deps

  const cli = (0, _react.useContext)(_MatrixClientContext.default);
  const onClientSync = (0, _react.useCallback)((syncState, prevState) => {
    // Consider the client reconnected if there is no error with syncing.
    // This means the state could be RECONNECTING, SYNCING, PREPARED or CATCHUP.
    const reconnected = syncState !== "ERROR" && prevState !== syncState;

    if (reconnected) {
      setIndex(0);
    }
  }, []);
  (0, _useEventEmitter.useEventEmitter)(cli, "sync", onClientSync);
  const imageUrl = imageUrls[urlsIndex];
  return [imageUrl, onError];
};

const BaseAvatar = props => {
  const {
    name,
    idName,
    title,
    url,
    urls,
    width = 40,
    height = 40,
    resizeMethod = "crop",
    // eslint-disable-line @typescript-eslint/no-unused-vars
    defaultToInitialLetter = true,
    onClick,
    inputRef,
    className
  } = props,
        otherProps = (0, _objectWithoutProperties2.default)(props, _excluded);
  const [imageUrl, onError] = useImageUrl({
    url,
    urls
  });

  if (!imageUrl && defaultToInitialLetter) {
    const initialLetter = AvatarLogic.getInitialLetter(name);

    const textNode = /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_BaseAvatar_initial",
      "aria-hidden": "true",
      style: {
        fontSize: (0, _units.toPx)(width * 0.65),
        width: (0, _units.toPx)(width),
        lineHeight: (0, _units.toPx)(height)
      }
    }, initialLetter);

    const imgNode = /*#__PURE__*/_react.default.createElement("img", {
      className: "mx_BaseAvatar_image",
      src: AvatarLogic.defaultAvatarUrlForString(idName || name),
      alt: "",
      title: title,
      onError: onError,
      style: {
        width: (0, _units.toPx)(width),
        height: (0, _units.toPx)(height)
      },
      "aria-hidden": "true"
    });

    if (onClick) {
      return /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, (0, _extends2.default)({
        "aria-label": (0, _languageHandler._t)("Avatar"),
        "aria-live": "off"
      }, otherProps, {
        element: "span",
        className: (0, _classnames.default)("mx_BaseAvatar", className),
        onClick: onClick,
        inputRef: inputRef
      }), textNode, imgNode);
    } else {
      return /*#__PURE__*/_react.default.createElement("span", (0, _extends2.default)({
        className: (0, _classnames.default)("mx_BaseAvatar", className),
        ref: inputRef
      }, otherProps, {
        role: "presentation"
      }), textNode, imgNode);
    }
  }

  if (onClick) {
    return /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, (0, _extends2.default)({
      className: (0, _classnames.default)("mx_BaseAvatar mx_BaseAvatar_image", className),
      element: "img",
      src: imageUrl,
      onClick: onClick,
      onError: onError,
      style: {
        width: (0, _units.toPx)(width),
        height: (0, _units.toPx)(height)
      },
      title: title,
      alt: (0, _languageHandler._t)("Avatar"),
      inputRef: inputRef
    }, otherProps));
  } else {
    return /*#__PURE__*/_react.default.createElement("img", (0, _extends2.default)({
      className: (0, _classnames.default)("mx_BaseAvatar mx_BaseAvatar_image", className),
      src: imageUrl,
      onError: onError,
      style: {
        width: (0, _units.toPx)(width),
        height: (0, _units.toPx)(height)
      },
      title: title,
      alt: "",
      ref: inputRef
    }, otherProps));
  }
};

var _default = BaseAvatar;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,