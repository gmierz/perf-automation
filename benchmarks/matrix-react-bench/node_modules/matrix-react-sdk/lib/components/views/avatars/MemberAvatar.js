"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _actions = require("../../../dispatcher/actions");

var _BaseAvatar = _interopRequireDefault(require("./BaseAvatar"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _Media = require("../../../customisations/Media");

var _logger = require("matrix-js-sdk/src/logger");

const _excluded = ["member", "fallbackUserId", "onClick", "viewUserOnClick"];

var _dec, _class, _class2, _temp;

let MemberAvatar = (_dec = (0, _replaceableComponent.replaceableComponent)("views.avatars.MemberAvatar"), _dec(_class = (_temp = _class2 = class MemberAvatar extends _react.default.Component {
  constructor(props) {
    super(props);
    this.state = MemberAvatar.getState(props);
  }

  static getDerivedStateFromProps(nextProps) {
    return MemberAvatar.getState(nextProps);
  }

  static getState(props) {
    var _props$member;

    if ((_props$member = props.member) !== null && _props$member !== void 0 && _props$member.name) {
      let imageUrl = null;

      if (props.member.getMxcAvatarUrl()) {
        imageUrl = (0, _Media.mediaFromMxc)(props.member.getMxcAvatarUrl()).getThumbnailOfSourceHttp(props.width, props.height, props.resizeMethod);
      }

      return {
        name: props.member.name,
        title: props.title || props.member.userId,
        imageUrl: imageUrl
      };
    } else if (props.fallbackUserId) {
      return {
        name: props.fallbackUserId,
        title: props.fallbackUserId
      };
    } else {
      _logger.logger.error("MemberAvatar called somehow with null member or fallbackUserId");
    }
  }

  render() {
    let _this$props = this.props,
        {
      member,
      fallbackUserId,
      onClick,
      viewUserOnClick
    } = _this$props,
        otherProps = (0, _objectWithoutProperties2.default)(_this$props, _excluded);
    const userId = member ? member.userId : fallbackUserId;

    if (viewUserOnClick) {
      onClick = () => {
        _dispatcher.default.dispatch({
          action: _actions.Action.ViewUser,
          member: this.props.member
        });
      };
    }

    return /*#__PURE__*/_react.default.createElement(_BaseAvatar.default, (0, _extends2.default)({}, otherProps, {
      name: this.state.name,
      title: this.state.title,
      idName: userId,
      url: this.state.imageUrl,
      onClick: onClick
    }));
  }

}, (0, _defineProperty2.default)(_class2, "defaultProps", {
  width: 40,
  height: 40,
  resizeMethod: 'crop',
  viewUserOnClick: false
}), _temp)) || _class);
exports.default = MemberAvatar;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,