"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _BaseAvatar = _interopRequireDefault(require("./BaseAvatar"));

var _Media = require("../../../customisations/Media");

const _excluded = ["app", "className", "width", "height"];

const WidgetAvatar = _ref => {
  let {
    app,
    className,
    width = 20,
    height = 20
  } = _ref,
      props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  let iconUrls = [require("../../../../res/img/element-icons/room/default_app.svg")]; // heuristics for some better icons until Widgets support their own icons

  if (app.type.includes("jitsi")) {
    iconUrls = [require("../../../../res/img/element-icons/room/default_video.svg")];
  } else if (app.type.includes("meeting") || app.type.includes("calendar")) {
    iconUrls = [require("../../../../res/img/element-icons/room/default_cal.svg")];
  } else if (app.type.includes("pad") || app.type.includes("doc") || app.type.includes("calc")) {
    iconUrls = [require("../../../../res/img/element-icons/room/default_doc.svg")];
  } else if (app.type.includes("clock")) {
    iconUrls = [require("../../../../res/img/element-icons/room/default_clock.svg")];
  }

  return /*#__PURE__*/_react.default.createElement(_BaseAvatar.default, (0, _extends2.default)({}, props, {
    name: app.id,
    className: (0, _classnames.default)("mx_WidgetAvatar", className) // MSC2765
    ,
    url: app.avatar_url ? (0, _Media.mediaFromMxc)(app.avatar_url).getSquareThumbnailHttp(20) : undefined,
    urls: iconUrls,
    width: width,
    height: height
  }));
};

var _default = WidgetAvatar;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL2F2YXRhcnMvV2lkZ2V0QXZhdGFyLnRzeCJdLCJuYW1lcyI6WyJXaWRnZXRBdmF0YXIiLCJhcHAiLCJjbGFzc05hbWUiLCJ3aWR0aCIsImhlaWdodCIsInByb3BzIiwiaWNvblVybHMiLCJyZXF1aXJlIiwidHlwZSIsImluY2x1ZGVzIiwiaWQiLCJhdmF0YXJfdXJsIiwiZ2V0U3F1YXJlVGh1bWJuYWlsSHR0cCIsInVuZGVmaW5lZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQWdCQTs7QUFDQTs7QUFHQTs7QUFDQTs7OztBQU1BLE1BQU1BLFlBQThCLEdBQUcsUUFBMkQ7QUFBQSxNQUExRDtBQUFFQyxJQUFBQSxHQUFGO0FBQU9DLElBQUFBLFNBQVA7QUFBa0JDLElBQUFBLEtBQUssR0FBRyxFQUExQjtBQUE4QkMsSUFBQUEsTUFBTSxHQUFHO0FBQXZDLEdBQTBEO0FBQUEsTUFBWkMsS0FBWTtBQUM5RixNQUFJQyxRQUFRLEdBQUcsQ0FBQ0MsT0FBTyxDQUFDLHdEQUFELENBQVIsQ0FBZixDQUQ4RixDQUU5Rjs7QUFDQSxNQUFJTixHQUFHLENBQUNPLElBQUosQ0FBU0MsUUFBVCxDQUFrQixPQUFsQixDQUFKLEVBQWdDO0FBQzVCSCxJQUFBQSxRQUFRLEdBQUcsQ0FBQ0MsT0FBTyxDQUFDLDBEQUFELENBQVIsQ0FBWDtBQUNILEdBRkQsTUFFTyxJQUFJTixHQUFHLENBQUNPLElBQUosQ0FBU0MsUUFBVCxDQUFrQixTQUFsQixLQUFnQ1IsR0FBRyxDQUFDTyxJQUFKLENBQVNDLFFBQVQsQ0FBa0IsVUFBbEIsQ0FBcEMsRUFBbUU7QUFDdEVILElBQUFBLFFBQVEsR0FBRyxDQUFDQyxPQUFPLENBQUMsd0RBQUQsQ0FBUixDQUFYO0FBQ0gsR0FGTSxNQUVBLElBQUlOLEdBQUcsQ0FBQ08sSUFBSixDQUFTQyxRQUFULENBQWtCLEtBQWxCLEtBQTRCUixHQUFHLENBQUNPLElBQUosQ0FBU0MsUUFBVCxDQUFrQixLQUFsQixDQUE1QixJQUF3RFIsR0FBRyxDQUFDTyxJQUFKLENBQVNDLFFBQVQsQ0FBa0IsTUFBbEIsQ0FBNUQsRUFBdUY7QUFDMUZILElBQUFBLFFBQVEsR0FBRyxDQUFDQyxPQUFPLENBQUMsd0RBQUQsQ0FBUixDQUFYO0FBQ0gsR0FGTSxNQUVBLElBQUlOLEdBQUcsQ0FBQ08sSUFBSixDQUFTQyxRQUFULENBQWtCLE9BQWxCLENBQUosRUFBZ0M7QUFDbkNILElBQUFBLFFBQVEsR0FBRyxDQUFDQyxPQUFPLENBQUMsMERBQUQsQ0FBUixDQUFYO0FBQ0g7O0FBRUQsc0JBQ0ksNkJBQUMsbUJBQUQsNkJBQ1FGLEtBRFI7QUFFSSxJQUFBLElBQUksRUFBRUosR0FBRyxDQUFDUyxFQUZkO0FBR0ksSUFBQSxTQUFTLEVBQUUseUJBQVcsaUJBQVgsRUFBOEJSLFNBQTlCLENBSGYsQ0FJSTtBQUpKO0FBS0ksSUFBQSxHQUFHLEVBQUVELEdBQUcsQ0FBQ1UsVUFBSixHQUFpQix5QkFBYVYsR0FBRyxDQUFDVSxVQUFqQixFQUE2QkMsc0JBQTdCLENBQW9ELEVBQXBELENBQWpCLEdBQTJFQyxTQUxwRjtBQU1JLElBQUEsSUFBSSxFQUFFUCxRQU5WO0FBT0ksSUFBQSxLQUFLLEVBQUVILEtBUFg7QUFRSSxJQUFBLE1BQU0sRUFBRUM7QUFSWixLQURKO0FBWUgsQ0F6QkQ7O2VBMkJlSixZIiwic291cmNlc0NvbnRlbnQiOlsiLypcbkNvcHlyaWdodCAyMDIwIFRoZSBNYXRyaXgub3JnIEZvdW5kYXRpb24gQy5JLkMuXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudFByb3BzIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5cbmltcG9ydCB7IElBcHAgfSBmcm9tIFwiLi4vLi4vLi4vc3RvcmVzL1dpZGdldFN0b3JlXCI7XG5pbXBvcnQgQmFzZUF2YXRhciwgeyBCYXNlQXZhdGFyVHlwZSB9IGZyb20gXCIuL0Jhc2VBdmF0YXJcIjtcbmltcG9ydCB7IG1lZGlhRnJvbU14YyB9IGZyb20gXCIuLi8uLi8uLi9jdXN0b21pc2F0aW9ucy9NZWRpYVwiO1xuXG5pbnRlcmZhY2UgSVByb3BzIGV4dGVuZHMgT21pdDxDb21wb25lbnRQcm9wczxCYXNlQXZhdGFyVHlwZT4sIFwibmFtZVwiIHwgXCJ1cmxcIiB8IFwidXJsc1wiPiB7XG4gICAgYXBwOiBJQXBwO1xufVxuXG5jb25zdCBXaWRnZXRBdmF0YXI6IFJlYWN0LkZDPElQcm9wcz4gPSAoeyBhcHAsIGNsYXNzTmFtZSwgd2lkdGggPSAyMCwgaGVpZ2h0ID0gMjAsIC4uLnByb3BzIH0pID0+IHtcbiAgICBsZXQgaWNvblVybHMgPSBbcmVxdWlyZShcIi4uLy4uLy4uLy4uL3Jlcy9pbWcvZWxlbWVudC1pY29ucy9yb29tL2RlZmF1bHRfYXBwLnN2Z1wiKV07XG4gICAgLy8gaGV1cmlzdGljcyBmb3Igc29tZSBiZXR0ZXIgaWNvbnMgdW50aWwgV2lkZ2V0cyBzdXBwb3J0IHRoZWlyIG93biBpY29uc1xuICAgIGlmIChhcHAudHlwZS5pbmNsdWRlcyhcImppdHNpXCIpKSB7XG4gICAgICAgIGljb25VcmxzID0gW3JlcXVpcmUoXCIuLi8uLi8uLi8uLi9yZXMvaW1nL2VsZW1lbnQtaWNvbnMvcm9vbS9kZWZhdWx0X3ZpZGVvLnN2Z1wiKV07XG4gICAgfSBlbHNlIGlmIChhcHAudHlwZS5pbmNsdWRlcyhcIm1lZXRpbmdcIikgfHwgYXBwLnR5cGUuaW5jbHVkZXMoXCJjYWxlbmRhclwiKSkge1xuICAgICAgICBpY29uVXJscyA9IFtyZXF1aXJlKFwiLi4vLi4vLi4vLi4vcmVzL2ltZy9lbGVtZW50LWljb25zL3Jvb20vZGVmYXVsdF9jYWwuc3ZnXCIpXTtcbiAgICB9IGVsc2UgaWYgKGFwcC50eXBlLmluY2x1ZGVzKFwicGFkXCIpIHx8IGFwcC50eXBlLmluY2x1ZGVzKFwiZG9jXCIpIHx8IGFwcC50eXBlLmluY2x1ZGVzKFwiY2FsY1wiKSkge1xuICAgICAgICBpY29uVXJscyA9IFtyZXF1aXJlKFwiLi4vLi4vLi4vLi4vcmVzL2ltZy9lbGVtZW50LWljb25zL3Jvb20vZGVmYXVsdF9kb2Muc3ZnXCIpXTtcbiAgICB9IGVsc2UgaWYgKGFwcC50eXBlLmluY2x1ZGVzKFwiY2xvY2tcIikpIHtcbiAgICAgICAgaWNvblVybHMgPSBbcmVxdWlyZShcIi4uLy4uLy4uLy4uL3Jlcy9pbWcvZWxlbWVudC1pY29ucy9yb29tL2RlZmF1bHRfY2xvY2suc3ZnXCIpXTtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8QmFzZUF2YXRhclxuICAgICAgICAgICAgey4uLnByb3BzfVxuICAgICAgICAgICAgbmFtZT17YXBwLmlkfVxuICAgICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWVzKFwibXhfV2lkZ2V0QXZhdGFyXCIsIGNsYXNzTmFtZSl9XG4gICAgICAgICAgICAvLyBNU0MyNzY1XG4gICAgICAgICAgICB1cmw9e2FwcC5hdmF0YXJfdXJsID8gbWVkaWFGcm9tTXhjKGFwcC5hdmF0YXJfdXJsKS5nZXRTcXVhcmVUaHVtYm5haWxIdHRwKDIwKSA6IHVuZGVmaW5lZH1cbiAgICAgICAgICAgIHVybHM9e2ljb25VcmxzfVxuICAgICAgICAgICAgd2lkdGg9e3dpZHRofVxuICAgICAgICAgICAgaGVpZ2h0PXtoZWlnaHR9XG4gICAgICAgIC8+XG4gICAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFdpZGdldEF2YXRhcjtcbiJdfQ==