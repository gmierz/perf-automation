"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _languageHandler = require("../../../languageHandler");

var _MemberAvatar = _interopRequireDefault(require("../avatars/MemberAvatar"));

var _classnames = _interopRequireDefault(require("classnames"));

var _StatusMessageContextMenu = _interopRequireDefault(require("../context_menus/StatusMessageContextMenu"));

var _SettingsStore = _interopRequireDefault(require("../../../settings/SettingsStore"));

var _ContextMenu = _interopRequireWildcard(require("../../structures/ContextMenu"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _dec, _class, _class2, _temp;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

let MemberStatusMessageAvatar = (_dec = (0, _replaceableComponent.replaceableComponent)("views.avatars.MemberStatusMessageAvatar"), _dec(_class = (_temp = _class2 = class MemberStatusMessageAvatar extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "button", /*#__PURE__*/(0, _react.createRef)());
    (0, _defineProperty2.default)(this, "onStatusMessageCommitted", () => {
      // The `User` object has observed a status message change.
      this.setState({
        hasStatus: this.hasStatus
      });
    });
    (0, _defineProperty2.default)(this, "openMenu", () => {
      this.setState({
        menuDisplayed: true
      });
    });
    (0, _defineProperty2.default)(this, "closeMenu", () => {
      this.setState({
        menuDisplayed: false
      });
    });
    this.state = {
      hasStatus: this.hasStatus,
      menuDisplayed: false
    };
  }

  componentDidMount() {
    if (this.props.member.userId !== _MatrixClientPeg.MatrixClientPeg.get().getUserId()) {
      throw new Error("Cannot use MemberStatusMessageAvatar on anyone but the logged in user");
    }

    if (!_SettingsStore.default.getValue("feature_custom_status")) {
      return;
    }

    const {
      user
    } = this.props.member;

    if (!user) {
      return;
    }

    user.on("User._unstable_statusMessage", this.onStatusMessageCommitted);
  }

  componentWillUnmount() {
    const {
      user
    } = this.props.member;

    if (!user) {
      return;
    }

    user.removeListener("User._unstable_statusMessage", this.onStatusMessageCommitted);
  }

  get hasStatus() {
    const {
      user
    } = this.props.member;

    if (!user) {
      return false;
    }

    return !!user.unstable_statusMessage;
  }

  render() {
    const avatar = /*#__PURE__*/_react.default.createElement(_MemberAvatar.default, {
      member: this.props.member,
      width: this.props.width,
      height: this.props.height,
      resizeMethod: this.props.resizeMethod
    });

    if (!_SettingsStore.default.getValue("feature_custom_status")) {
      return avatar;
    }

    const classes = (0, _classnames.default)({
      "mx_MemberStatusMessageAvatar": true,
      "mx_MemberStatusMessageAvatar_hasStatus": this.state.hasStatus
    });
    let contextMenu;

    if (this.state.menuDisplayed) {
      const elementRect = this.button.current.getBoundingClientRect();
      const chevronWidth = 16; // See .mx_ContextualMenu_chevron_bottom

      const chevronMargin = 1; // Add some spacing away from target

      contextMenu = /*#__PURE__*/_react.default.createElement(_ContextMenu.default, {
        chevronOffset: (elementRect.width - chevronWidth) / 2,
        chevronFace: _ContextMenu.ChevronFace.Bottom,
        left: elementRect.left + window.pageXOffset,
        top: elementRect.top + window.pageYOffset - chevronMargin,
        menuWidth: 226,
        onFinished: this.closeMenu
      }, /*#__PURE__*/_react.default.createElement(_StatusMessageContextMenu.default, {
        user: this.props.member.user
      }));
    }

    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_ContextMenu.ContextMenuButton, {
      className: classes,
      inputRef: this.button,
      onClick: this.openMenu,
      isExpanded: this.state.menuDisplayed,
      label: (0, _languageHandler._t)("User Status")
    }, avatar), contextMenu);
  }

}, (0, _defineProperty2.default)(_class2, "defaultProps", {
  width: 40,
  height: 40,
  resizeMethod: 'crop'
}), _temp)) || _class);
exports.default = MemberStatusMessageAvatar;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,