"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _BaseAvatar = _interopRequireDefault(require("./BaseAvatar"));

var _ImageView = _interopRequireDefault(require("../elements/ImageView"));

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _Modal = _interopRequireDefault(require("../../../Modal"));

var Avatar = _interopRequireWildcard(require("../../../Avatar"));

var _DMRoomMap = _interopRequireDefault(require("../../../utils/DMRoomMap"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _Media = require("../../../customisations/Media");

const _excluded = ["room", "oobData", "viewAvatarOnClick", "onClick", "className"];

var _dec, _class, _class2, _temp;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

let RoomAvatar = (_dec = (0, _replaceableComponent.replaceableComponent)("views.avatars.RoomAvatar"), _dec(_class = (_temp = _class2 = class RoomAvatar extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "onRoomStateEvents", ev => {
      if (!this.props.room || ev.getRoomId() !== this.props.room.roomId || ev.getType() !== 'm.room.avatar') return;
      this.setState({
        urls: RoomAvatar.getImageUrls(this.props)
      });
    });
    (0, _defineProperty2.default)(this, "onRoomAvatarClick", () => {
      const avatarUrl = Avatar.avatarUrlForRoom(this.props.room, null, null, null);
      const params = {
        src: avatarUrl,
        name: this.props.room.name
      };

      _Modal.default.createDialog(_ImageView.default, params, "mx_Dialog_lightbox", null, true);
    });
    this.state = {
      urls: RoomAvatar.getImageUrls(this.props)
    };
  }

  componentDidMount() {
    _MatrixClientPeg.MatrixClientPeg.get().on("RoomState.events", this.onRoomStateEvents);
  }

  componentWillUnmount() {
    const cli = _MatrixClientPeg.MatrixClientPeg.get();

    if (cli) {
      cli.removeListener("RoomState.events", this.onRoomStateEvents);
    }
  }

  static getDerivedStateFromProps(nextProps) {
    return {
      urls: RoomAvatar.getImageUrls(nextProps)
    };
  }

  static getImageUrls(props) {
    let oobAvatar = null;

    if (props.oobData.avatarUrl) {
      oobAvatar = (0, _Media.mediaFromMxc)(props.oobData.avatarUrl).getThumbnailOfSourceHttp(props.width, props.height, props.resizeMethod);
    }

    return [oobAvatar, // highest priority
    RoomAvatar.getRoomAvatarUrl(props)].filter(function (url) {
      return url !== null && url !== "";
    });
  }

  static getRoomAvatarUrl(props) {
    if (!props.room) return null;
    return Avatar.avatarUrlForRoom(props.room, props.width, props.height, props.resizeMethod);
  }

  render() {
    const _this$props = this.props,
          {
      room,
      oobData,
      viewAvatarOnClick,
      onClick,
      className
    } = _this$props,
          otherProps = (0, _objectWithoutProperties2.default)(_this$props, _excluded);
    const roomName = room ? room.name : oobData.name; // If the room is a DM, we use the other user's ID for the color hash
    // in order to match the room avatar with their avatar

    const idName = room ? _DMRoomMap.default.shared().getUserIdForRoomId(room.roomId) ?? room.roomId : oobData.roomId;
    return /*#__PURE__*/_react.default.createElement(_BaseAvatar.default, (0, _extends2.default)({}, otherProps, {
      className: (0, _classnames.default)(className, {
        mx_RoomAvatar_isSpaceRoom: room === null || room === void 0 ? void 0 : room.isSpaceRoom()
      }),
      name: roomName,
      idName: idName,
      urls: this.state.urls,
      onClick: viewAvatarOnClick && this.state.urls[0] ? this.onRoomAvatarClick : onClick
    }));
  }

}, (0, _defineProperty2.default)(_class2, "defaultProps", {
  width: 36,
  height: 36,
  resizeMethod: 'crop',
  oobData: {}
}), _temp)) || _class);
exports.default = RoomAvatar;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,