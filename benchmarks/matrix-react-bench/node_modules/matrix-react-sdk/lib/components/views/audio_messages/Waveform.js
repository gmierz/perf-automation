"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _classnames = _interopRequireDefault(require("classnames"));

var _dec, _class, _class2, _temp;

let Waveform = (
/**
 * A simple waveform component. This renders bars (centered vertically) for each
 * height provided in the component properties. Updating the properties will update
 * the rendered waveform.
 *
 * For CSS purposes, a mx_Waveform_bar_100pct class is added when the bar should be
 * "filled", as a demonstration of the progress property.
 */
_dec = (0, _replaceableComponent.replaceableComponent)("views.audio_messages.Waveform"), _dec(_class = (_temp = _class2 = class Waveform extends _react.default.PureComponent {
  render() {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_Waveform"
    }, this.props.relHeights.map((h, i) => {
      const progress = this.props.progress;
      const isCompleteBar = i / this.props.relHeights.length <= progress && progress > 0;
      const classes = (0, _classnames.default)({
        'mx_Waveform_bar': true,
        'mx_Waveform_bar_100pct': isCompleteBar
      });
      return /*#__PURE__*/_react.default.createElement("span", {
        key: i,
        style: {
          "--barHeight": h
        },
        className: classes
      });
    }));
  }

}, (0, _defineProperty2.default)(_class2, "defaultProps", {
  progress: 1
}), _temp)) || _class);
exports.default = Waveform;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL2F1ZGlvX21lc3NhZ2VzL1dhdmVmb3JtLnRzeCJdLCJuYW1lcyI6WyJXYXZlZm9ybSIsIlJlYWN0IiwiUHVyZUNvbXBvbmVudCIsInJlbmRlciIsInByb3BzIiwicmVsSGVpZ2h0cyIsIm1hcCIsImgiLCJpIiwicHJvZ3Jlc3MiLCJpc0NvbXBsZXRlQmFyIiwibGVuZ3RoIiwiY2xhc3NlcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFnQkE7O0FBQ0E7O0FBQ0E7Ozs7SUF3QnFCQSxRO0FBVHJCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7T0FDQyxnREFBcUIsK0JBQXJCLEMsbUNBQUQsTUFDcUJBLFFBRHJCLFNBQ3NDQyxlQUFNQyxhQUQ1QyxDQUMwRTtBQUsvREMsRUFBQUEsTUFBTSxHQUFHO0FBQ1osd0JBQU87QUFBSyxNQUFBLFNBQVMsRUFBQztBQUFmLE9BQ0QsS0FBS0MsS0FBTCxDQUFXQyxVQUFYLENBQXNCQyxHQUF0QixDQUEwQixDQUFDQyxDQUFELEVBQUlDLENBQUosS0FBVTtBQUNsQyxZQUFNQyxRQUFRLEdBQUcsS0FBS0wsS0FBTCxDQUFXSyxRQUE1QjtBQUNBLFlBQU1DLGFBQWEsR0FBSUYsQ0FBQyxHQUFHLEtBQUtKLEtBQUwsQ0FBV0MsVUFBWCxDQUFzQk0sTUFBM0IsSUFBc0NGLFFBQXRDLElBQWtEQSxRQUFRLEdBQUcsQ0FBbkY7QUFDQSxZQUFNRyxPQUFPLEdBQUcseUJBQVc7QUFDdkIsMkJBQW1CLElBREk7QUFFdkIsa0NBQTBCRjtBQUZILE9BQVgsQ0FBaEI7QUFJQSwwQkFBTztBQUNILFFBQUEsR0FBRyxFQUFFRixDQURGO0FBRUgsUUFBQSxLQUFLLEVBQUU7QUFDSCx5QkFBZUQ7QUFEWixTQUZKO0FBS0gsUUFBQSxTQUFTLEVBQUVLO0FBTFIsUUFBUDtBQU9ILEtBZEMsQ0FEQyxDQUFQO0FBaUJIOztBQXZCcUUsQyx5REFDekM7QUFDekJILEVBQUFBLFFBQVEsRUFBRTtBQURlLEMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuQ29weXJpZ2h0IDIwMjEgVGhlIE1hdHJpeC5vcmcgRm91bmRhdGlvbiBDLkkuQy5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyByZXBsYWNlYWJsZUNvbXBvbmVudCB9IGZyb20gXCIuLi8uLi8uLi91dGlscy9yZXBsYWNlYWJsZUNvbXBvbmVudFwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSBcImNsYXNzbmFtZXNcIjtcbmltcG9ydCB7IENTU1Byb3BlcnRpZXMgfSBmcm9tIFwicmVhY3RcIjtcblxuaW50ZXJmYWNlIFdhdmVmb3JtQ1NTUHJvcGVydGllcyBleHRlbmRzIENTU1Byb3BlcnRpZXMge1xuICAgICctLWJhckhlaWdodCc6IG51bWJlcjtcbn1cblxuaW50ZXJmYWNlIElQcm9wcyB7XG4gICAgcmVsSGVpZ2h0czogbnVtYmVyW107IC8vIHJlbGF0aXZlIGhlaWdodHMgKDAtMSlcbiAgICBwcm9ncmVzczogbnVtYmVyOyAvLyBwZXJjZW50IGNvbXBsZXRlLCAwLTEsIGRlZmF1bHQgMTAwJVxufVxuXG5pbnRlcmZhY2UgSVN0YXRlIHtcbn1cblxuLyoqXG4gKiBBIHNpbXBsZSB3YXZlZm9ybSBjb21wb25lbnQuIFRoaXMgcmVuZGVycyBiYXJzIChjZW50ZXJlZCB2ZXJ0aWNhbGx5KSBmb3IgZWFjaFxuICogaGVpZ2h0IHByb3ZpZGVkIGluIHRoZSBjb21wb25lbnQgcHJvcGVydGllcy4gVXBkYXRpbmcgdGhlIHByb3BlcnRpZXMgd2lsbCB1cGRhdGVcbiAqIHRoZSByZW5kZXJlZCB3YXZlZm9ybS5cbiAqXG4gKiBGb3IgQ1NTIHB1cnBvc2VzLCBhIG14X1dhdmVmb3JtX2Jhcl8xMDBwY3QgY2xhc3MgaXMgYWRkZWQgd2hlbiB0aGUgYmFyIHNob3VsZCBiZVxuICogXCJmaWxsZWRcIiwgYXMgYSBkZW1vbnN0cmF0aW9uIG9mIHRoZSBwcm9ncmVzcyBwcm9wZXJ0eS5cbiAqL1xuQHJlcGxhY2VhYmxlQ29tcG9uZW50KFwidmlld3MuYXVkaW9fbWVzc2FnZXMuV2F2ZWZvcm1cIilcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFdhdmVmb3JtIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudDxJUHJvcHMsIElTdGF0ZT4ge1xuICAgIHB1YmxpYyBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgICAgICBwcm9ncmVzczogMSxcbiAgICB9O1xuXG4gICAgcHVibGljIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPSdteF9XYXZlZm9ybSc+XG4gICAgICAgICAgICB7IHRoaXMucHJvcHMucmVsSGVpZ2h0cy5tYXAoKGgsIGkpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBwcm9ncmVzcyA9IHRoaXMucHJvcHMucHJvZ3Jlc3M7XG4gICAgICAgICAgICAgICAgY29uc3QgaXNDb21wbGV0ZUJhciA9IChpIC8gdGhpcy5wcm9wcy5yZWxIZWlnaHRzLmxlbmd0aCkgPD0gcHJvZ3Jlc3MgJiYgcHJvZ3Jlc3MgPiAwO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNsYXNzZXMgPSBjbGFzc05hbWVzKHtcbiAgICAgICAgICAgICAgICAgICAgJ214X1dhdmVmb3JtX2Jhcic6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICdteF9XYXZlZm9ybV9iYXJfMTAwcGN0JzogaXNDb21wbGV0ZUJhcixcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gPHNwYW5cbiAgICAgICAgICAgICAgICAgICAga2V5PXtpfVxuICAgICAgICAgICAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgICAgICAgICAgICAgXCItLWJhckhlaWdodFwiOiBoLFxuICAgICAgICAgICAgICAgICAgICB9IGFzIFdhdmVmb3JtQ1NTUHJvcGVydGllc31cbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc2VzfVxuICAgICAgICAgICAgICAgIC8+O1xuICAgICAgICAgICAgfSkgfVxuICAgICAgICA8L2Rpdj47XG4gICAgfVxufVxuIl19