"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _PlayPauseButton = _interopRequireDefault(require("./PlayPauseButton"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _FormattingUtils = require("../../../utils/FormattingUtils");

var _DurationClock = _interopRequireDefault(require("./DurationClock"));

var _Keyboard = require("../../../Keyboard");

var _languageHandler = require("../../../languageHandler");

var _SeekBar = _interopRequireDefault(require("./SeekBar"));

var _PlaybackClock = _interopRequireDefault(require("./PlaybackClock"));

var _AudioPlayerBase = _interopRequireDefault(require("./AudioPlayerBase"));

var _dec, _class;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

let AudioPlayer = (_dec = (0, _replaceableComponent.replaceableComponent)("views.audio_messages.AudioPlayer"), _dec(_class = class AudioPlayer extends _AudioPlayerBase.default {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "playPauseRef", /*#__PURE__*/(0, _react.createRef)());
    (0, _defineProperty2.default)(this, "seekRef", /*#__PURE__*/(0, _react.createRef)());
    (0, _defineProperty2.default)(this, "onKeyDown", ev => {
      // stopPropagation() prevents the FocusComposer catch-all from triggering,
      // but we need to do it on key down instead of press (even though the user
      // interaction is typically on press).
      if (ev.key === _Keyboard.Key.SPACE) {
        var _this$playPauseRef$cu;

        ev.stopPropagation();
        (_this$playPauseRef$cu = this.playPauseRef.current) === null || _this$playPauseRef$cu === void 0 ? void 0 : _this$playPauseRef$cu.toggleState();
      } else if (ev.key === _Keyboard.Key.ARROW_LEFT) {
        var _this$seekRef$current;

        ev.stopPropagation();
        (_this$seekRef$current = this.seekRef.current) === null || _this$seekRef$current === void 0 ? void 0 : _this$seekRef$current.left();
      } else if (ev.key === _Keyboard.Key.ARROW_RIGHT) {
        var _this$seekRef$current2;

        ev.stopPropagation();
        (_this$seekRef$current2 = this.seekRef.current) === null || _this$seekRef$current2 === void 0 ? void 0 : _this$seekRef$current2.right();
      }
    });
  }

  renderFileSize() {
    const bytes = this.props.playback.sizeBytes;
    if (!bytes) return null; // Not translated here - we're just presenting the data which should already
    // be translated if needed.

    return `(${(0, _FormattingUtils.formatBytes)(bytes)})`;
  }

  renderComponent() {
    // tabIndex=0 to ensure that the whole component becomes a tab stop, where we handle keyboard
    // events for accessibility
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_MediaBody mx_AudioPlayer_container",
      tabIndex: 0,
      onKeyDown: this.onKeyDown
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_AudioPlayer_primaryContainer"
    }, /*#__PURE__*/_react.default.createElement(_PlayPauseButton.default, {
      playback: this.props.playback,
      playbackPhase: this.state.playbackPhase,
      tabIndex: -1 // prevent tabbing into the button
      ,
      ref: this.playPauseRef
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_AudioPlayer_mediaInfo"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_AudioPlayer_mediaName"
    }, this.props.mediaName || (0, _languageHandler._t)("Unnamed audio")), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_AudioPlayer_byline"
    }, /*#__PURE__*/_react.default.createElement(_DurationClock.default, {
      playback: this.props.playback
    }), "\xA0 ", this.renderFileSize()))), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_AudioPlayer_seek"
    }, /*#__PURE__*/_react.default.createElement(_SeekBar.default, {
      playback: this.props.playback,
      tabIndex: -1 // prevent tabbing into the bar
      ,
      playbackPhase: this.state.playbackPhase,
      ref: this.seekRef
    }), /*#__PURE__*/_react.default.createElement(_PlaybackClock.default, {
      playback: this.props.playback,
      defaultDisplaySeconds: 0
    })));
  }

}) || _class);
exports.default = AudioPlayer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,