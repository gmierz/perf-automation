"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _VoiceRecording = require("../../../audio/VoiceRecording");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _arrays = require("../../../utils/arrays");

var _Waveform = _interopRequireDefault(require("./Waveform"));

var _MarkedExecution = require("../../../utils/MarkedExecution");

var _dec, _class, _class2, _temp;

let LiveRecordingWaveform = (
/**
 * A waveform which shows the waveform of a live recording
 */
_dec = (0, _replaceableComponent.replaceableComponent)("views.audio_messages.LiveRecordingWaveform"), _dec(_class = (_temp = _class2 = class LiveRecordingWaveform extends _react.default.PureComponent {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "waveform", []);
    (0, _defineProperty2.default)(this, "scheduledUpdate", new _MarkedExecution.MarkedExecution(() => this.updateWaveform(), () => requestAnimationFrame(() => this.scheduledUpdate.trigger())));
    this.state = {
      waveform: (0, _arrays.arraySeed)(0, _VoiceRecording.RECORDING_PLAYBACK_SAMPLES)
    };
  }

  componentDidMount() {
    this.props.recorder.liveData.onUpdate(update => {
      // The incoming data is between zero and one, so we don't need to clamp/rescale it.
      this.waveform = (0, _arrays.arrayFastResample)(Array.from(update.waveform), _VoiceRecording.RECORDING_PLAYBACK_SAMPLES);
      this.scheduledUpdate.mark();
    });
  }

  updateWaveform() {
    this.setState({
      waveform: this.waveform
    });
  }

  render() {
    return /*#__PURE__*/_react.default.createElement(_Waveform.default, {
      relHeights: this.state.waveform
    });
  }

}, (0, _defineProperty2.default)(_class2, "defaultProps", {
  progress: 1
}), _temp)) || _class);
exports.default = LiveRecordingWaveform;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL2F1ZGlvX21lc3NhZ2VzL0xpdmVSZWNvcmRpbmdXYXZlZm9ybS50c3giXSwibmFtZXMiOlsiTGl2ZVJlY29yZGluZ1dhdmVmb3JtIiwiUmVhY3QiLCJQdXJlQ29tcG9uZW50IiwiY29uc3RydWN0b3IiLCJwcm9wcyIsIk1hcmtlZEV4ZWN1dGlvbiIsInVwZGF0ZVdhdmVmb3JtIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwic2NoZWR1bGVkVXBkYXRlIiwidHJpZ2dlciIsInN0YXRlIiwid2F2ZWZvcm0iLCJSRUNPUkRJTkdfUExBWUJBQ0tfU0FNUExFUyIsImNvbXBvbmVudERpZE1vdW50IiwicmVjb3JkZXIiLCJsaXZlRGF0YSIsIm9uVXBkYXRlIiwidXBkYXRlIiwiQXJyYXkiLCJmcm9tIiwibWFyayIsInNldFN0YXRlIiwicmVuZGVyIiwicHJvZ3Jlc3MiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBZ0JBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOzs7O0lBY3FCQSxxQjtBQUpyQjtBQUNBO0FBQ0E7T0FDQyxnREFBcUIsNENBQXJCLEMsbUNBQUQsTUFDcUJBLHFCQURyQixTQUNtREMsZUFBTUMsYUFEekQsQ0FDdUY7QUFXbkZDLEVBQUFBLFdBQVcsQ0FBQ0MsS0FBRCxFQUFRO0FBQ2YsVUFBTUEsS0FBTjtBQURlLG9EQU5VLEVBTVY7QUFBQSwyREFMTyxJQUFJQyxnQ0FBSixDQUN0QixNQUFNLEtBQUtDLGNBQUwsRUFEZ0IsRUFFdEIsTUFBTUMscUJBQXFCLENBQUMsTUFBTSxLQUFLQyxlQUFMLENBQXFCQyxPQUFyQixFQUFQLENBRkwsQ0FLUDtBQUVmLFNBQUtDLEtBQUwsR0FBYTtBQUNUQyxNQUFBQSxRQUFRLEVBQUUsdUJBQVUsQ0FBVixFQUFhQywwQ0FBYjtBQURELEtBQWI7QUFHSDs7QUFFREMsRUFBQUEsaUJBQWlCLEdBQUc7QUFDaEIsU0FBS1QsS0FBTCxDQUFXVSxRQUFYLENBQW9CQyxRQUFwQixDQUE2QkMsUUFBN0IsQ0FBdUNDLE1BQUQsSUFBOEI7QUFDaEU7QUFDQSxXQUFLTixRQUFMLEdBQWdCLCtCQUFrQk8sS0FBSyxDQUFDQyxJQUFOLENBQVdGLE1BQU0sQ0FBQ04sUUFBbEIsQ0FBbEIsRUFBK0NDLDBDQUEvQyxDQUFoQjtBQUNBLFdBQUtKLGVBQUwsQ0FBcUJZLElBQXJCO0FBQ0gsS0FKRDtBQUtIOztBQUVPZCxFQUFBQSxjQUFjLEdBQUc7QUFDckIsU0FBS2UsUUFBTCxDQUFjO0FBQUVWLE1BQUFBLFFBQVEsRUFBRSxLQUFLQTtBQUFqQixLQUFkO0FBQ0g7O0FBRU1XLEVBQUFBLE1BQU0sR0FBRztBQUNaLHdCQUFPLDZCQUFDLGlCQUFEO0FBQVUsTUFBQSxVQUFVLEVBQUUsS0FBS1osS0FBTCxDQUFXQztBQUFqQyxNQUFQO0FBQ0g7O0FBaENrRixDLHlEQUN0RDtBQUN6QlksRUFBQUEsUUFBUSxFQUFFO0FBRGUsQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5Db3B5cmlnaHQgMjAyMSBUaGUgTWF0cml4Lm9yZyBGb3VuZGF0aW9uIEMuSS5DLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IElSZWNvcmRpbmdVcGRhdGUsIFJFQ09SRElOR19QTEFZQkFDS19TQU1QTEVTLCBWb2ljZVJlY29yZGluZyB9IGZyb20gXCIuLi8uLi8uLi9hdWRpby9Wb2ljZVJlY29yZGluZ1wiO1xuaW1wb3J0IHsgcmVwbGFjZWFibGVDb21wb25lbnQgfSBmcm9tIFwiLi4vLi4vLi4vdXRpbHMvcmVwbGFjZWFibGVDb21wb25lbnRcIjtcbmltcG9ydCB7IGFycmF5RmFzdFJlc2FtcGxlLCBhcnJheVNlZWQgfSBmcm9tIFwiLi4vLi4vLi4vdXRpbHMvYXJyYXlzXCI7XG5pbXBvcnQgV2F2ZWZvcm0gZnJvbSBcIi4vV2F2ZWZvcm1cIjtcbmltcG9ydCB7IE1hcmtlZEV4ZWN1dGlvbiB9IGZyb20gXCIuLi8uLi8uLi91dGlscy9NYXJrZWRFeGVjdXRpb25cIjtcblxuaW50ZXJmYWNlIElQcm9wcyB7XG4gICAgcmVjb3JkZXI6IFZvaWNlUmVjb3JkaW5nO1xufVxuXG5pbnRlcmZhY2UgSVN0YXRlIHtcbiAgICB3YXZlZm9ybTogbnVtYmVyW107XG59XG5cbi8qKlxuICogQSB3YXZlZm9ybSB3aGljaCBzaG93cyB0aGUgd2F2ZWZvcm0gb2YgYSBsaXZlIHJlY29yZGluZ1xuICovXG5AcmVwbGFjZWFibGVDb21wb25lbnQoXCJ2aWV3cy5hdWRpb19tZXNzYWdlcy5MaXZlUmVjb3JkaW5nV2F2ZWZvcm1cIilcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExpdmVSZWNvcmRpbmdXYXZlZm9ybSBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQ8SVByb3BzLCBJU3RhdGU+IHtcbiAgICBwdWJsaWMgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICAgICAgcHJvZ3Jlc3M6IDEsXG4gICAgfTtcblxuICAgIHByaXZhdGUgd2F2ZWZvcm06IG51bWJlcltdID0gW107XG4gICAgcHJpdmF0ZSBzY2hlZHVsZWRVcGRhdGUgPSBuZXcgTWFya2VkRXhlY3V0aW9uKFxuICAgICAgICAoKSA9PiB0aGlzLnVwZGF0ZVdhdmVmb3JtKCksXG4gICAgICAgICgpID0+IHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB0aGlzLnNjaGVkdWxlZFVwZGF0ZS50cmlnZ2VyKCkpLFxuICAgICk7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICB3YXZlZm9ybTogYXJyYXlTZWVkKDAsIFJFQ09SRElOR19QTEFZQkFDS19TQU1QTEVTKSxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgICAgdGhpcy5wcm9wcy5yZWNvcmRlci5saXZlRGF0YS5vblVwZGF0ZSgodXBkYXRlOiBJUmVjb3JkaW5nVXBkYXRlKSA9PiB7XG4gICAgICAgICAgICAvLyBUaGUgaW5jb21pbmcgZGF0YSBpcyBiZXR3ZWVuIHplcm8gYW5kIG9uZSwgc28gd2UgZG9uJ3QgbmVlZCB0byBjbGFtcC9yZXNjYWxlIGl0LlxuICAgICAgICAgICAgdGhpcy53YXZlZm9ybSA9IGFycmF5RmFzdFJlc2FtcGxlKEFycmF5LmZyb20odXBkYXRlLndhdmVmb3JtKSwgUkVDT1JESU5HX1BMQVlCQUNLX1NBTVBMRVMpO1xuICAgICAgICAgICAgdGhpcy5zY2hlZHVsZWRVcGRhdGUubWFyaygpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHVwZGF0ZVdhdmVmb3JtKCkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHsgd2F2ZWZvcm06IHRoaXMud2F2ZWZvcm0gfSk7XG4gICAgfVxuXG4gICAgcHVibGljIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIDxXYXZlZm9ybSByZWxIZWlnaHRzPXt0aGlzLnN0YXRlLndhdmVmb3JtfSAvPjtcbiAgICB9XG59XG4iXX0=