"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _arrays = require("../../../utils/arrays");

var _Waveform = _interopRequireDefault(require("./Waveform"));

var _Playback = require("../../../audio/Playback");

var _numbers = require("../../../utils/numbers");

var _dec, _class;

let PlaybackWaveform = (
/**
 * A waveform which shows the waveform of a previously recorded recording
 */
_dec = (0, _replaceableComponent.replaceableComponent)("views.audio_messages.PlaybackWaveform"), _dec(_class = class PlaybackWaveform extends _react.default.PureComponent {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "onWaveformUpdate", waveform => {
      this.setState({
        heights: this.toHeights(waveform)
      });
    });
    (0, _defineProperty2.default)(this, "onTimeUpdate", time => {
      // Track percentages to a general precision to avoid over-waking the component.
      const progress = Number((0, _numbers.percentageOf)(time[0], 0, time[1]).toFixed(3));
      this.setState({
        progress
      });
    });
    this.state = {
      heights: this.toHeights(this.props.playback.waveform),
      progress: 0 // default no progress

    };
    this.props.playback.waveformData.onUpdate(this.onWaveformUpdate);
    this.props.playback.clockInfo.liveData.onUpdate(this.onTimeUpdate);
  }

  toHeights(waveform) {
    const seed = (0, _arrays.arraySeed)(0, _Playback.PLAYBACK_WAVEFORM_SAMPLES);
    return (0, _arrays.arrayTrimFill)(waveform, _Playback.PLAYBACK_WAVEFORM_SAMPLES, seed);
  }

  render() {
    return /*#__PURE__*/_react.default.createElement(_Waveform.default, {
      relHeights: this.state.heights,
      progress: this.state.progress
    });
  }

}) || _class);
exports.default = PlaybackWaveform;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL2F1ZGlvX21lc3NhZ2VzL1BsYXliYWNrV2F2ZWZvcm0udHN4Il0sIm5hbWVzIjpbIlBsYXliYWNrV2F2ZWZvcm0iLCJSZWFjdCIsIlB1cmVDb21wb25lbnQiLCJjb25zdHJ1Y3RvciIsInByb3BzIiwid2F2ZWZvcm0iLCJzZXRTdGF0ZSIsImhlaWdodHMiLCJ0b0hlaWdodHMiLCJ0aW1lIiwicHJvZ3Jlc3MiLCJOdW1iZXIiLCJ0b0ZpeGVkIiwic3RhdGUiLCJwbGF5YmFjayIsIndhdmVmb3JtRGF0YSIsIm9uVXBkYXRlIiwib25XYXZlZm9ybVVwZGF0ZSIsImNsb2NrSW5mbyIsImxpdmVEYXRhIiwib25UaW1lVXBkYXRlIiwic2VlZCIsIlBMQVlCQUNLX1dBVkVGT1JNX1NBTVBMRVMiLCJyZW5kZXIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBZ0JBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOzs7O0lBZXFCQSxnQjtBQUpyQjtBQUNBO0FBQ0E7T0FDQyxnREFBcUIsdUNBQXJCLEMsZ0JBQUQsTUFDcUJBLGdCQURyQixTQUM4Q0MsZUFBTUMsYUFEcEQsQ0FDa0Y7QUFDdkVDLEVBQUFBLFdBQVcsQ0FBQ0MsS0FBRCxFQUFRO0FBQ3RCLFVBQU1BLEtBQU47QUFEc0IsNERBaUJFQyxRQUFELElBQXdCO0FBQy9DLFdBQUtDLFFBQUwsQ0FBYztBQUFFQyxRQUFBQSxPQUFPLEVBQUUsS0FBS0MsU0FBTCxDQUFlSCxRQUFmO0FBQVgsT0FBZDtBQUNILEtBbkJ5QjtBQUFBLHdEQXFCRkksSUFBRCxJQUFvQjtBQUN2QztBQUNBLFlBQU1DLFFBQVEsR0FBR0MsTUFBTSxDQUFDLDJCQUFhRixJQUFJLENBQUMsQ0FBRCxDQUFqQixFQUFzQixDQUF0QixFQUF5QkEsSUFBSSxDQUFDLENBQUQsQ0FBN0IsRUFBa0NHLE9BQWxDLENBQTBDLENBQTFDLENBQUQsQ0FBdkI7QUFDQSxXQUFLTixRQUFMLENBQWM7QUFBRUksUUFBQUE7QUFBRixPQUFkO0FBQ0gsS0F6QnlCO0FBR3RCLFNBQUtHLEtBQUwsR0FBYTtBQUNUTixNQUFBQSxPQUFPLEVBQUUsS0FBS0MsU0FBTCxDQUFlLEtBQUtKLEtBQUwsQ0FBV1UsUUFBWCxDQUFvQlQsUUFBbkMsQ0FEQTtBQUVUSyxNQUFBQSxRQUFRLEVBQUUsQ0FGRCxDQUVJOztBQUZKLEtBQWI7QUFLQSxTQUFLTixLQUFMLENBQVdVLFFBQVgsQ0FBb0JDLFlBQXBCLENBQWlDQyxRQUFqQyxDQUEwQyxLQUFLQyxnQkFBL0M7QUFDQSxTQUFLYixLQUFMLENBQVdVLFFBQVgsQ0FBb0JJLFNBQXBCLENBQThCQyxRQUE5QixDQUF1Q0gsUUFBdkMsQ0FBZ0QsS0FBS0ksWUFBckQ7QUFDSDs7QUFFT1osRUFBQUEsU0FBUyxDQUFDSCxRQUFELEVBQXFCO0FBQ2xDLFVBQU1nQixJQUFJLEdBQUcsdUJBQVUsQ0FBVixFQUFhQyxtQ0FBYixDQUFiO0FBQ0EsV0FBTywyQkFBY2pCLFFBQWQsRUFBd0JpQixtQ0FBeEIsRUFBbURELElBQW5ELENBQVA7QUFDSDs7QUFZTUUsRUFBQUEsTUFBTSxHQUFHO0FBQ1osd0JBQU8sNkJBQUMsaUJBQUQ7QUFBVSxNQUFBLFVBQVUsRUFBRSxLQUFLVixLQUFMLENBQVdOLE9BQWpDO0FBQTBDLE1BQUEsUUFBUSxFQUFFLEtBQUtNLEtBQUwsQ0FBV0g7QUFBL0QsTUFBUDtBQUNIOztBQTlCNkUsQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5Db3B5cmlnaHQgMjAyMSBUaGUgTWF0cml4Lm9yZyBGb3VuZGF0aW9uIEMuSS5DLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHJlcGxhY2VhYmxlQ29tcG9uZW50IH0gZnJvbSBcIi4uLy4uLy4uL3V0aWxzL3JlcGxhY2VhYmxlQ29tcG9uZW50XCI7XG5pbXBvcnQgeyBhcnJheVNlZWQsIGFycmF5VHJpbUZpbGwgfSBmcm9tIFwiLi4vLi4vLi4vdXRpbHMvYXJyYXlzXCI7XG5pbXBvcnQgV2F2ZWZvcm0gZnJvbSBcIi4vV2F2ZWZvcm1cIjtcbmltcG9ydCB7IFBsYXliYWNrLCBQTEFZQkFDS19XQVZFRk9STV9TQU1QTEVTIH0gZnJvbSBcIi4uLy4uLy4uL2F1ZGlvL1BsYXliYWNrXCI7XG5pbXBvcnQgeyBwZXJjZW50YWdlT2YgfSBmcm9tIFwiLi4vLi4vLi4vdXRpbHMvbnVtYmVyc1wiO1xuXG5pbnRlcmZhY2UgSVByb3BzIHtcbiAgICBwbGF5YmFjazogUGxheWJhY2s7XG59XG5cbmludGVyZmFjZSBJU3RhdGUge1xuICAgIGhlaWdodHM6IG51bWJlcltdO1xuICAgIHByb2dyZXNzOiBudW1iZXI7XG59XG5cbi8qKlxuICogQSB3YXZlZm9ybSB3aGljaCBzaG93cyB0aGUgd2F2ZWZvcm0gb2YgYSBwcmV2aW91c2x5IHJlY29yZGVkIHJlY29yZGluZ1xuICovXG5AcmVwbGFjZWFibGVDb21wb25lbnQoXCJ2aWV3cy5hdWRpb19tZXNzYWdlcy5QbGF5YmFja1dhdmVmb3JtXCIpXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQbGF5YmFja1dhdmVmb3JtIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudDxJUHJvcHMsIElTdGF0ZT4ge1xuICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG5cbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIGhlaWdodHM6IHRoaXMudG9IZWlnaHRzKHRoaXMucHJvcHMucGxheWJhY2sud2F2ZWZvcm0pLFxuICAgICAgICAgICAgcHJvZ3Jlc3M6IDAsIC8vIGRlZmF1bHQgbm8gcHJvZ3Jlc3NcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLnByb3BzLnBsYXliYWNrLndhdmVmb3JtRGF0YS5vblVwZGF0ZSh0aGlzLm9uV2F2ZWZvcm1VcGRhdGUpO1xuICAgICAgICB0aGlzLnByb3BzLnBsYXliYWNrLmNsb2NrSW5mby5saXZlRGF0YS5vblVwZGF0ZSh0aGlzLm9uVGltZVVwZGF0ZSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB0b0hlaWdodHMod2F2ZWZvcm06IG51bWJlcltdKSB7XG4gICAgICAgIGNvbnN0IHNlZWQgPSBhcnJheVNlZWQoMCwgUExBWUJBQ0tfV0FWRUZPUk1fU0FNUExFUyk7XG4gICAgICAgIHJldHVybiBhcnJheVRyaW1GaWxsKHdhdmVmb3JtLCBQTEFZQkFDS19XQVZFRk9STV9TQU1QTEVTLCBzZWVkKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG9uV2F2ZWZvcm1VcGRhdGUgPSAod2F2ZWZvcm06IG51bWJlcltdKSA9PiB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBoZWlnaHRzOiB0aGlzLnRvSGVpZ2h0cyh3YXZlZm9ybSkgfSk7XG4gICAgfTtcblxuICAgIHByaXZhdGUgb25UaW1lVXBkYXRlID0gKHRpbWU6IG51bWJlcltdKSA9PiB7XG4gICAgICAgIC8vIFRyYWNrIHBlcmNlbnRhZ2VzIHRvIGEgZ2VuZXJhbCBwcmVjaXNpb24gdG8gYXZvaWQgb3Zlci13YWtpbmcgdGhlIGNvbXBvbmVudC5cbiAgICAgICAgY29uc3QgcHJvZ3Jlc3MgPSBOdW1iZXIocGVyY2VudGFnZU9mKHRpbWVbMF0sIDAsIHRpbWVbMV0pLnRvRml4ZWQoMykpO1xuICAgICAgICB0aGlzLnNldFN0YXRlKHsgcHJvZ3Jlc3MgfSk7XG4gICAgfTtcblxuICAgIHB1YmxpYyByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiA8V2F2ZWZvcm0gcmVsSGVpZ2h0cz17dGhpcy5zdGF0ZS5oZWlnaHRzfSBwcm9ncmVzcz17dGhpcy5zdGF0ZS5wcm9ncmVzc30gLz47XG4gICAgfVxufVxuIl19