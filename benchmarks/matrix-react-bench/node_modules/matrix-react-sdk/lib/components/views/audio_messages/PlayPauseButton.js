"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _AccessibleTooltipButton = _interopRequireDefault(require("../elements/AccessibleTooltipButton"));

var _languageHandler = require("../../../languageHandler");

var _Playback = require("../../../audio/Playback");

var _classnames = _interopRequireDefault(require("classnames"));

const _excluded = ["playback", "playbackPhase"];

var _dec, _class;

let PlayPauseButton = (
/**
 * Displays a play/pause button (activating the play/pause function of the recorder)
 * to be displayed in reference to a recording.
 */
_dec = (0, _replaceableComponent.replaceableComponent)("views.audio_messages.PlayPauseButton"), _dec(_class = class PlayPauseButton extends _react.default.PureComponent {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "onClick", () => {
      // noinspection JSIgnoredPromiseFromCall
      this.toggleState();
    });
  }

  async toggleState() {
    await this.props.playback.toggle();
  }

  render() {
    const _this$props = this.props,
          {
      playback,
      playbackPhase
    } = _this$props,
          restProps = (0, _objectWithoutProperties2.default)(_this$props, _excluded);
    const isPlaying = playback.isPlaying;
    const isDisabled = playbackPhase === _Playback.PlaybackState.Decoding;
    const classes = (0, _classnames.default)('mx_PlayPauseButton', {
      'mx_PlayPauseButton_play': !isPlaying,
      'mx_PlayPauseButton_pause': isPlaying,
      'mx_PlayPauseButton_disabled': isDisabled
    });
    return /*#__PURE__*/_react.default.createElement(_AccessibleTooltipButton.default, (0, _extends2.default)({
      className: classes,
      title: isPlaying ? (0, _languageHandler._t)("Pause") : (0, _languageHandler._t)("Play"),
      onClick: this.onClick,
      disabled: isDisabled
    }, restProps));
  }

}) || _class);
exports.default = PlayPauseButton;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL2F1ZGlvX21lc3NhZ2VzL1BsYXlQYXVzZUJ1dHRvbi50c3giXSwibmFtZXMiOlsiUGxheVBhdXNlQnV0dG9uIiwiUmVhY3QiLCJQdXJlQ29tcG9uZW50IiwiY29uc3RydWN0b3IiLCJwcm9wcyIsInRvZ2dsZVN0YXRlIiwicGxheWJhY2siLCJ0b2dnbGUiLCJyZW5kZXIiLCJwbGF5YmFja1BoYXNlIiwicmVzdFByb3BzIiwiaXNQbGF5aW5nIiwiaXNEaXNhYmxlZCIsIlBsYXliYWNrU3RhdGUiLCJEZWNvZGluZyIsImNsYXNzZXMiLCJvbkNsaWNrIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFnQkE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7OztJQWdCcUJBLGU7QUFMckI7QUFDQTtBQUNBO0FBQ0E7T0FDQyxnREFBcUIsc0NBQXJCLEMsZ0JBQUQsTUFDcUJBLGVBRHJCLFNBQzZDQyxlQUFNQyxhQURuRCxDQUN5RTtBQUM5REMsRUFBQUEsV0FBVyxDQUFDQyxLQUFELEVBQVE7QUFDdEIsVUFBTUEsS0FBTjtBQURzQixtREFJUixNQUFNO0FBQ3BCO0FBQ0EsV0FBS0MsV0FBTDtBQUNILEtBUHlCO0FBRXpCOztBQU91QixRQUFYQSxXQUFXLEdBQUc7QUFDdkIsVUFBTSxLQUFLRCxLQUFMLENBQVdFLFFBQVgsQ0FBb0JDLE1BQXBCLEVBQU47QUFDSDs7QUFFTUMsRUFBQUEsTUFBTSxHQUFjO0FBQ3ZCLHdCQUFrRCxLQUFLSixLQUF2RDtBQUFBLFVBQU07QUFBRUUsTUFBQUEsUUFBRjtBQUFZRyxNQUFBQTtBQUFaLEtBQU47QUFBQSxVQUFvQ0MsU0FBcEM7QUFDQSxVQUFNQyxTQUFTLEdBQUdMLFFBQVEsQ0FBQ0ssU0FBM0I7QUFDQSxVQUFNQyxVQUFVLEdBQUdILGFBQWEsS0FBS0ksd0JBQWNDLFFBQW5EO0FBQ0EsVUFBTUMsT0FBTyxHQUFHLHlCQUFXLG9CQUFYLEVBQWlDO0FBQzdDLGlDQUEyQixDQUFDSixTQURpQjtBQUU3QyxrQ0FBNEJBLFNBRmlCO0FBRzdDLHFDQUErQkM7QUFIYyxLQUFqQyxDQUFoQjtBQUtBLHdCQUFPLDZCQUFDLGdDQUFEO0FBQ0gsTUFBQSxTQUFTLEVBQUVHLE9BRFI7QUFFSCxNQUFBLEtBQUssRUFBRUosU0FBUyxHQUFHLHlCQUFHLE9BQUgsQ0FBSCxHQUFpQix5QkFBRyxNQUFILENBRjlCO0FBR0gsTUFBQSxPQUFPLEVBQUUsS0FBS0ssT0FIWDtBQUlILE1BQUEsUUFBUSxFQUFFSjtBQUpQLE9BS0NGLFNBTEQsRUFBUDtBQU9IOztBQTlCb0UsQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5Db3B5cmlnaHQgMjAyMSBUaGUgTWF0cml4Lm9yZyBGb3VuZGF0aW9uIEMuSS5DLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbmltcG9ydCBSZWFjdCwgeyBSZWFjdE5vZGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHJlcGxhY2VhYmxlQ29tcG9uZW50IH0gZnJvbSBcIi4uLy4uLy4uL3V0aWxzL3JlcGxhY2VhYmxlQ29tcG9uZW50XCI7XG5pbXBvcnQgQWNjZXNzaWJsZVRvb2x0aXBCdXR0b24gZnJvbSBcIi4uL2VsZW1lbnRzL0FjY2Vzc2libGVUb29sdGlwQnV0dG9uXCI7XG5pbXBvcnQgeyBfdCB9IGZyb20gXCIuLi8uLi8uLi9sYW5ndWFnZUhhbmRsZXJcIjtcbmltcG9ydCB7IFBsYXliYWNrLCBQbGF5YmFja1N0YXRlIH0gZnJvbSBcIi4uLy4uLy4uL2F1ZGlvL1BsYXliYWNrXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tIFwiY2xhc3NuYW1lc1wiO1xuXG4vLyBvbWl0dGVkIHByb3BzIGFyZSBoYW5kbGVkIGJ5IHJlbmRlciBmdW5jdGlvblxuaW50ZXJmYWNlIElQcm9wcyBleHRlbmRzIE9taXQ8UmVhY3QuQ29tcG9uZW50UHJvcHM8dHlwZW9mIEFjY2Vzc2libGVUb29sdGlwQnV0dG9uPiwgXCJ0aXRsZVwiIHwgXCJvbkNsaWNrXCIgfCBcImRpc2FibGVkXCI+IHtcbiAgICAvLyBQbGF5YmFjayBpbnN0YW5jZSB0byBtYW5pcHVsYXRlLiBDYW5ub3QgY2hhbmdlIGR1cmluZyB0aGUgY29tcG9uZW50IGxpZmVjeWNsZS5cbiAgICBwbGF5YmFjazogUGxheWJhY2s7XG5cbiAgICAvLyBUaGUgcGxheWJhY2sgcGhhc2UgdG8gcmVuZGVyLiBBYmxlIHRvIGNoYW5nZSBkdXJpbmcgdGhlIGNvbXBvbmVudCBsaWZlY3ljbGUuXG4gICAgcGxheWJhY2tQaGFzZTogUGxheWJhY2tTdGF0ZTtcbn1cblxuLyoqXG4gKiBEaXNwbGF5cyBhIHBsYXkvcGF1c2UgYnV0dG9uIChhY3RpdmF0aW5nIHRoZSBwbGF5L3BhdXNlIGZ1bmN0aW9uIG9mIHRoZSByZWNvcmRlcilcbiAqIHRvIGJlIGRpc3BsYXllZCBpbiByZWZlcmVuY2UgdG8gYSByZWNvcmRpbmcuXG4gKi9cbkByZXBsYWNlYWJsZUNvbXBvbmVudChcInZpZXdzLmF1ZGlvX21lc3NhZ2VzLlBsYXlQYXVzZUJ1dHRvblwiKVxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGxheVBhdXNlQnV0dG9uIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudDxJUHJvcHM+IHtcbiAgICBwdWJsaWMgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgIH1cblxuICAgIHByaXZhdGUgb25DbGljayA9ICgpID0+IHtcbiAgICAgICAgLy8gbm9pbnNwZWN0aW9uIEpTSWdub3JlZFByb21pc2VGcm9tQ2FsbFxuICAgICAgICB0aGlzLnRvZ2dsZVN0YXRlKCk7XG4gICAgfTtcblxuICAgIHB1YmxpYyBhc3luYyB0b2dnbGVTdGF0ZSgpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5wcm9wcy5wbGF5YmFjay50b2dnbGUoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcmVuZGVyKCk6IFJlYWN0Tm9kZSB7XG4gICAgICAgIGNvbnN0IHsgcGxheWJhY2ssIHBsYXliYWNrUGhhc2UsIC4uLnJlc3RQcm9wcyB9ID0gdGhpcy5wcm9wcztcbiAgICAgICAgY29uc3QgaXNQbGF5aW5nID0gcGxheWJhY2suaXNQbGF5aW5nO1xuICAgICAgICBjb25zdCBpc0Rpc2FibGVkID0gcGxheWJhY2tQaGFzZSA9PT0gUGxheWJhY2tTdGF0ZS5EZWNvZGluZztcbiAgICAgICAgY29uc3QgY2xhc3NlcyA9IGNsYXNzTmFtZXMoJ214X1BsYXlQYXVzZUJ1dHRvbicsIHtcbiAgICAgICAgICAgICdteF9QbGF5UGF1c2VCdXR0b25fcGxheSc6ICFpc1BsYXlpbmcsXG4gICAgICAgICAgICAnbXhfUGxheVBhdXNlQnV0dG9uX3BhdXNlJzogaXNQbGF5aW5nLFxuICAgICAgICAgICAgJ214X1BsYXlQYXVzZUJ1dHRvbl9kaXNhYmxlZCc6IGlzRGlzYWJsZWQsXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gPEFjY2Vzc2libGVUb29sdGlwQnV0dG9uXG4gICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzZXN9XG4gICAgICAgICAgICB0aXRsZT17aXNQbGF5aW5nID8gX3QoXCJQYXVzZVwiKSA6IF90KFwiUGxheVwiKX1cbiAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMub25DbGlja31cbiAgICAgICAgICAgIGRpc2FibGVkPXtpc0Rpc2FibGVkfVxuICAgICAgICAgICAgey4uLnJlc3RQcm9wc31cbiAgICAgICAgLz47XG4gICAgfVxufVxuIl19