"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _Clock = _interopRequireDefault(require("./Clock"));

var _MarkedExecution = require("../../../utils/MarkedExecution");

var _dec, _class;

let LiveRecordingClock = (
/**
 * A clock for a live recording.
 */
_dec = (0, _replaceableComponent.replaceableComponent)("views.audio_messages.LiveRecordingClock"), _dec(_class = class LiveRecordingClock extends _react.default.PureComponent {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "seconds", 0);
    (0, _defineProperty2.default)(this, "scheduledUpdate", new _MarkedExecution.MarkedExecution(() => this.updateClock(), () => requestAnimationFrame(() => this.scheduledUpdate.trigger())));
    this.state = {
      seconds: 0
    };
  }

  componentDidMount() {
    this.props.recorder.liveData.onUpdate(update => {
      this.seconds = update.timeSeconds;
      this.scheduledUpdate.mark();
    });
  }

  updateClock() {
    this.setState({
      seconds: this.seconds
    });
  }

  render() {
    return /*#__PURE__*/_react.default.createElement(_Clock.default, {
      seconds: this.state.seconds
    });
  }

}) || _class);
exports.default = LiveRecordingClock;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL2F1ZGlvX21lc3NhZ2VzL0xpdmVSZWNvcmRpbmdDbG9jay50c3giXSwibmFtZXMiOlsiTGl2ZVJlY29yZGluZ0Nsb2NrIiwiUmVhY3QiLCJQdXJlQ29tcG9uZW50IiwiY29uc3RydWN0b3IiLCJwcm9wcyIsIk1hcmtlZEV4ZWN1dGlvbiIsInVwZGF0ZUNsb2NrIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwic2NoZWR1bGVkVXBkYXRlIiwidHJpZ2dlciIsInN0YXRlIiwic2Vjb25kcyIsImNvbXBvbmVudERpZE1vdW50IiwicmVjb3JkZXIiLCJsaXZlRGF0YSIsIm9uVXBkYXRlIiwidXBkYXRlIiwidGltZVNlY29uZHMiLCJtYXJrIiwic2V0U3RhdGUiLCJyZW5kZXIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBZ0JBOztBQUVBOztBQUNBOztBQUNBOzs7O0lBY3FCQSxrQjtBQUpyQjtBQUNBO0FBQ0E7T0FDQyxnREFBcUIseUNBQXJCLEMsZ0JBQUQsTUFDcUJBLGtCQURyQixTQUNnREMsZUFBTUMsYUFEdEQsQ0FDb0Y7QUFPaEZDLEVBQUFBLFdBQVcsQ0FBQ0MsS0FBRCxFQUFRO0FBQ2YsVUFBTUEsS0FBTjtBQURlLG1EQU5ELENBTUM7QUFBQSwyREFMTyxJQUFJQyxnQ0FBSixDQUN0QixNQUFNLEtBQUtDLFdBQUwsRUFEZ0IsRUFFdEIsTUFBTUMscUJBQXFCLENBQUMsTUFBTSxLQUFLQyxlQUFMLENBQXFCQyxPQUFyQixFQUFQLENBRkwsQ0FLUDtBQUVmLFNBQUtDLEtBQUwsR0FBYTtBQUNUQyxNQUFBQSxPQUFPLEVBQUU7QUFEQSxLQUFiO0FBR0g7O0FBRURDLEVBQUFBLGlCQUFpQixHQUFHO0FBQ2hCLFNBQUtSLEtBQUwsQ0FBV1MsUUFBWCxDQUFvQkMsUUFBcEIsQ0FBNkJDLFFBQTdCLENBQXVDQyxNQUFELElBQThCO0FBQ2hFLFdBQUtMLE9BQUwsR0FBZUssTUFBTSxDQUFDQyxXQUF0QjtBQUNBLFdBQUtULGVBQUwsQ0FBcUJVLElBQXJCO0FBQ0gsS0FIRDtBQUlIOztBQUVPWixFQUFBQSxXQUFXLEdBQUc7QUFDbEIsU0FBS2EsUUFBTCxDQUFjO0FBQ1ZSLE1BQUFBLE9BQU8sRUFBRSxLQUFLQTtBQURKLEtBQWQ7QUFHSDs7QUFFTVMsRUFBQUEsTUFBTSxHQUFHO0FBQ1osd0JBQU8sNkJBQUMsY0FBRDtBQUFPLE1BQUEsT0FBTyxFQUFFLEtBQUtWLEtBQUwsQ0FBV0M7QUFBM0IsTUFBUDtBQUNIOztBQTdCK0UsQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5Db3B5cmlnaHQgMjAyMSBUaGUgTWF0cml4Lm9yZyBGb3VuZGF0aW9uIEMuSS5DLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IElSZWNvcmRpbmdVcGRhdGUsIFZvaWNlUmVjb3JkaW5nIH0gZnJvbSBcIi4uLy4uLy4uL2F1ZGlvL1ZvaWNlUmVjb3JkaW5nXCI7XG5pbXBvcnQgeyByZXBsYWNlYWJsZUNvbXBvbmVudCB9IGZyb20gXCIuLi8uLi8uLi91dGlscy9yZXBsYWNlYWJsZUNvbXBvbmVudFwiO1xuaW1wb3J0IENsb2NrIGZyb20gXCIuL0Nsb2NrXCI7XG5pbXBvcnQgeyBNYXJrZWRFeGVjdXRpb24gfSBmcm9tIFwiLi4vLi4vLi4vdXRpbHMvTWFya2VkRXhlY3V0aW9uXCI7XG5cbmludGVyZmFjZSBJUHJvcHMge1xuICAgIHJlY29yZGVyOiBWb2ljZVJlY29yZGluZztcbn1cblxuaW50ZXJmYWNlIElTdGF0ZSB7XG4gICAgc2Vjb25kczogbnVtYmVyO1xufVxuXG4vKipcbiAqIEEgY2xvY2sgZm9yIGEgbGl2ZSByZWNvcmRpbmcuXG4gKi9cbkByZXBsYWNlYWJsZUNvbXBvbmVudChcInZpZXdzLmF1ZGlvX21lc3NhZ2VzLkxpdmVSZWNvcmRpbmdDbG9ja1wiKVxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTGl2ZVJlY29yZGluZ0Nsb2NrIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudDxJUHJvcHMsIElTdGF0ZT4ge1xuICAgIHByaXZhdGUgc2Vjb25kcyA9IDA7XG4gICAgcHJpdmF0ZSBzY2hlZHVsZWRVcGRhdGUgPSBuZXcgTWFya2VkRXhlY3V0aW9uKFxuICAgICAgICAoKSA9PiB0aGlzLnVwZGF0ZUNsb2NrKCksXG4gICAgICAgICgpID0+IHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB0aGlzLnNjaGVkdWxlZFVwZGF0ZS50cmlnZ2VyKCkpLFxuICAgICk7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBzZWNvbmRzOiAwLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgICB0aGlzLnByb3BzLnJlY29yZGVyLmxpdmVEYXRhLm9uVXBkYXRlKCh1cGRhdGU6IElSZWNvcmRpbmdVcGRhdGUpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc2Vjb25kcyA9IHVwZGF0ZS50aW1lU2Vjb25kcztcbiAgICAgICAgICAgIHRoaXMuc2NoZWR1bGVkVXBkYXRlLm1hcmsoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB1cGRhdGVDbG9jaygpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBzZWNvbmRzOiB0aGlzLnNlY29uZHMsXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHB1YmxpYyByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiA8Q2xvY2sgc2Vjb25kcz17dGhpcy5zdGF0ZS5zZWNvbmRzfSAvPjtcbiAgICB9XG59XG4iXX0=