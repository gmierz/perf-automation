"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _Playback = require("../../../audio/Playback");

var _react = _interopRequireDefault(require("react"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _MarkedExecution = require("../../../utils/MarkedExecution");

var _numbers = require("../../../utils/numbers");

var _dec, _class, _class2, _temp;

const ARROW_SKIP_SECONDS = 5; // arbitrary

let SeekBar = (_dec = (0, _replaceableComponent.replaceableComponent)("views.audio_messages.SeekBar"), _dec(_class = (_temp = _class2 = class SeekBar extends _react.default.PureComponent {
  // We use an animation frame request to avoid overly spamming prop updates, even if we aren't
  // really using anything demanding on the CSS front.
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "animationFrameFn", new _MarkedExecution.MarkedExecution(() => this.doUpdate(), () => requestAnimationFrame(() => this.animationFrameFn.trigger())));
    (0, _defineProperty2.default)(this, "onChange", ev => {
      // Thankfully, onChange is only called when the user changes the value, not when we
      // change the value on the component. We can use this as a reliable "skip to X" function.
      //
      // noinspection JSIgnoredPromiseFromCall
      this.props.playback.skipTo(Number(ev.target.value) * this.props.playback.clockInfo.durationSeconds);
    });
    this.state = {
      percentage: 0
    }; // We don't need to de-register: the class handles this for us internally

    this.props.playback.clockInfo.liveData.onUpdate(() => this.animationFrameFn.mark());
  }

  doUpdate() {
    this.setState({
      percentage: (0, _numbers.percentageOf)(this.props.playback.clockInfo.timeSeconds, 0, this.props.playback.clockInfo.durationSeconds)
    });
  }

  left() {
    // noinspection JSIgnoredPromiseFromCall
    this.props.playback.skipTo(this.props.playback.clockInfo.timeSeconds - ARROW_SKIP_SECONDS);
  }

  right() {
    // noinspection JSIgnoredPromiseFromCall
    this.props.playback.skipTo(this.props.playback.clockInfo.timeSeconds + ARROW_SKIP_SECONDS);
  }

  render() {
    // We use a range input to avoid having to re-invent accessibility handling on
    // a custom set of divs.
    return /*#__PURE__*/_react.default.createElement("input", {
      type: "range",
      className: "mx_SeekBar",
      tabIndex: this.props.tabIndex,
      onChange: this.onChange,
      min: 0,
      max: 1,
      value: this.state.percentage,
      step: 0.001,
      style: {
        '--fillTo': this.state.percentage
      },
      disabled: this.props.playbackPhase === _Playback.PlaybackState.Decoding
    });
  }

}, (0, _defineProperty2.default)(_class2, "defaultProps", {
  tabIndex: 0
}), _temp)) || _class);
exports.default = SeekBar;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,