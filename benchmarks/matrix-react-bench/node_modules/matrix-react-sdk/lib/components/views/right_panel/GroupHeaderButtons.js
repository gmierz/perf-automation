"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _languageHandler = require("../../../languageHandler");

var _HeaderButton = _interopRequireDefault(require("./HeaderButton"));

var _HeaderButtons = _interopRequireWildcard(require("./HeaderButtons"));

var _RightPanelStorePhases = require("../../../stores/RightPanelStorePhases");

var _actions = require("../../../dispatcher/actions");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _dec, _class;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const GROUP_PHASES = [_RightPanelStorePhases.RightPanelPhases.GroupMemberInfo, _RightPanelStorePhases.RightPanelPhases.GroupMemberList];
const ROOM_PHASES = [_RightPanelStorePhases.RightPanelPhases.GroupRoomList, _RightPanelStorePhases.RightPanelPhases.GroupRoomInfo];
let GroupHeaderButtons = (_dec = (0, _replaceableComponent.replaceableComponent)("views.right_panel.GroupHeaderButtons"), _dec(_class = class GroupHeaderButtons extends _HeaderButtons.default {
  constructor(props) {
    super(props, _HeaderButtons.HeaderKind.Group);
    (0, _defineProperty2.default)(this, "onMembersClicked", () => {
      if (this.state.phase === _RightPanelStorePhases.RightPanelPhases.GroupMemberInfo) {
        // send the active phase to trigger a toggle
        this.setPhase(_RightPanelStorePhases.RightPanelPhases.GroupMemberInfo);
      } else {
        // This toggles for us, if needed
        this.setPhase(_RightPanelStorePhases.RightPanelPhases.GroupMemberList);
      }
    });
    (0, _defineProperty2.default)(this, "onRoomsClicked", () => {
      // This toggles for us, if needed
      this.setPhase(_RightPanelStorePhases.RightPanelPhases.GroupRoomList);
    });
  }

  onAction(payload) {
    if (payload.action === _actions.Action.ViewUser) {
      if (payload.member) {
        this.setPhase(_RightPanelStorePhases.RightPanelPhases.RoomMemberInfo, {
          member: payload.member
        });
      } else {
        this.setPhase(_RightPanelStorePhases.RightPanelPhases.GroupMemberList);
      }
    } else if (payload.action === "view_group") {
      this.setPhase(_RightPanelStorePhases.RightPanelPhases.GroupMemberList);
    } else if (payload.action === "view_group_room") {
      this.setPhase(_RightPanelStorePhases.RightPanelPhases.GroupRoomInfo, {
        groupRoomId: payload.groupRoomId,
        groupId: payload.groupId
      });
    } else if (payload.action === "view_group_room_list") {
      this.setPhase(_RightPanelStorePhases.RightPanelPhases.GroupRoomList);
    } else if (payload.action === "view_group_member_list") {
      this.setPhase(_RightPanelStorePhases.RightPanelPhases.GroupMemberList);
    } else if (payload.action === "view_group_user") {
      this.setPhase(_RightPanelStorePhases.RightPanelPhases.GroupMemberInfo, {
        member: payload.member
      });
    }
  }

  renderButtons() {
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_HeaderButton.default, {
      name: "groupMembersButton",
      title: (0, _languageHandler._t)('Members'),
      isHighlighted: this.isPhase(GROUP_PHASES),
      onClick: this.onMembersClicked,
      analytics: ['Right Panel', 'Group Member List Button', 'click']
    }), /*#__PURE__*/_react.default.createElement(_HeaderButton.default, {
      name: "roomsButton",
      title: (0, _languageHandler._t)('Rooms'),
      isHighlighted: this.isPhase(ROOM_PHASES),
      onClick: this.onRoomsClicked,
      analytics: ['Right Panel', 'Group Room List Button', 'click']
    }));
  }

}) || _class);
exports.default = GroupHeaderButtons;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,