"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useReadPinnedEvents = exports.usePinnedEvents = exports.default = exports.ReadPinsEventId = void 0;

var _react = _interopRequireWildcard(require("react"));

var _event = require("matrix-js-sdk/src/models/event");

var _event2 = require("matrix-js-sdk/src/@types/event");

var _languageHandler = require("../../../languageHandler");

var _BaseCard = _interopRequireDefault(require("./BaseCard"));

var _Spinner = _interopRequireDefault(require("../elements/Spinner"));

var _MatrixClientContext = _interopRequireDefault(require("../../../contexts/MatrixClientContext"));

var _useEventEmitter = require("../../../hooks/useEventEmitter");

var _PinningUtils = _interopRequireDefault(require("../../../utils/PinningUtils"));

var _useAsyncMemo = require("../../../hooks/useAsyncMemo");

var _PinnedEventTile = _interopRequireDefault(require("../rooms/PinnedEventTile"));

var _useRoomState = require("../../../hooks/useRoomState");

var _logger = require("matrix-js-sdk/src/logger");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
Copyright 2021 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const usePinnedEvents = room => {
  const [pinnedEvents, setPinnedEvents] = (0, _react.useState)([]);
  const update = (0, _react.useCallback)(ev => {
    var _room$currentState$ge, _room$currentState$ge2;

    if (!room) return;
    if (ev && ev.getType() !== _event2.EventType.RoomPinnedEvents) return;
    setPinnedEvents(((_room$currentState$ge = room.currentState.getStateEvents(_event2.EventType.RoomPinnedEvents, "")) === null || _room$currentState$ge === void 0 ? void 0 : (_room$currentState$ge2 = _room$currentState$ge.getContent()) === null || _room$currentState$ge2 === void 0 ? void 0 : _room$currentState$ge2.pinned) || []);
  }, [room]);
  (0, _useEventEmitter.useEventEmitter)(room === null || room === void 0 ? void 0 : room.currentState, "RoomState.events", update);
  (0, _react.useEffect)(() => {
    update();
    return () => {
      setPinnedEvents([]);
    };
  }, [update]);
  return pinnedEvents;
};

exports.usePinnedEvents = usePinnedEvents;
const ReadPinsEventId = "im.vector.room.read_pins";
exports.ReadPinsEventId = ReadPinsEventId;

const useReadPinnedEvents = room => {
  const [readPinnedEvents, setReadPinnedEvents] = (0, _react.useState)(new Set());
  const update = (0, _react.useCallback)(ev => {
    var _room$getAccountData, _room$getAccountData$;

    if (!room) return;
    if (ev && ev.getType() !== ReadPinsEventId) return;
    const readPins = (_room$getAccountData = room.getAccountData(ReadPinsEventId)) === null || _room$getAccountData === void 0 ? void 0 : (_room$getAccountData$ = _room$getAccountData.getContent()) === null || _room$getAccountData$ === void 0 ? void 0 : _room$getAccountData$.event_ids;
    setReadPinnedEvents(new Set(readPins || []));
  }, [room]);
  (0, _useEventEmitter.useEventEmitter)(room, "Room.accountData", update);
  (0, _react.useEffect)(() => {
    update();
    return () => {
      setReadPinnedEvents(new Set());
    };
  }, [update]);
  return readPinnedEvents;
};

exports.useReadPinnedEvents = useReadPinnedEvents;

const PinnedMessagesCard = ({
  room,
  onClose
}) => {
  const cli = (0, _react.useContext)(_MatrixClientContext.default);
  const canUnpin = (0, _useRoomState.useRoomState)(room, state => state.mayClientSendStateEvent(_event2.EventType.RoomPinnedEvents, cli));
  const pinnedEventIds = usePinnedEvents(room);
  const readPinnedEvents = useReadPinnedEvents(room);
  (0, _react.useEffect)(() => {
    const newlyRead = pinnedEventIds.filter(id => !readPinnedEvents.has(id));

    if (newlyRead.length > 0) {
      // clear out any read pinned events which no longer are pinned
      cli.setRoomAccountData(room.roomId, ReadPinsEventId, {
        event_ids: pinnedEventIds
      });
    }
  }, [cli, room.roomId, pinnedEventIds, readPinnedEvents]);
  const pinnedEvents = (0, _useAsyncMemo.useAsyncMemo)(() => {
    const promises = pinnedEventIds.map(async eventId => {
      var _timelineSet$getTimel;

      const timelineSet = room.getUnfilteredTimelineSet();
      const localEvent = timelineSet === null || timelineSet === void 0 ? void 0 : (_timelineSet$getTimel = timelineSet.getTimelineForEvent(eventId)) === null || _timelineSet$getTimel === void 0 ? void 0 : _timelineSet$getTimel.getEvents().find(e => e.getId() === eventId);
      if (localEvent) return localEvent;

      try {
        const evJson = await cli.fetchRoomEvent(room.roomId, eventId);
        const event = new _event.MatrixEvent(evJson);

        if (event.isEncrypted()) {
          await cli.decryptEventIfNeeded(event); // TODO await?
        }

        if (event && _PinningUtils.default.isPinnable(event)) {
          return event;
        }
      } catch (err) {
        _logger.logger.error("Error looking up pinned event " + eventId + " in room " + room.roomId);

        _logger.logger.error(err);
      }

      return null;
    });
    return Promise.all(promises);
  }, [cli, room, pinnedEventIds], null);
  let content;

  if (!pinnedEvents) {
    content = /*#__PURE__*/_react.default.createElement(_Spinner.default, null);
  } else if (pinnedEvents.length > 0) {
    const onUnpinClicked = async event => {
      var _pinnedEvents$getCont;

      const pinnedEvents = room.currentState.getStateEvents(_event2.EventType.RoomPinnedEvents, "");

      if (pinnedEvents !== null && pinnedEvents !== void 0 && (_pinnedEvents$getCont = pinnedEvents.getContent()) !== null && _pinnedEvents$getCont !== void 0 && _pinnedEvents$getCont.pinned) {
        const pinned = pinnedEvents.getContent().pinned;
        const index = pinned.indexOf(event.getId());

        if (index !== -1) {
          pinned.splice(index, 1);
          await cli.sendStateEvent(room.roomId, _event2.EventType.RoomPinnedEvents, {
            pinned
          }, "");
        }
      }
    }; // show them in reverse, with latest pinned at the top


    content = pinnedEvents.filter(Boolean).reverse().map(ev => /*#__PURE__*/_react.default.createElement(_PinnedEventTile.default, {
      key: ev.getId(),
      room: room,
      event: ev,
      onUnpinClicked: canUnpin ? () => onUnpinClicked(ev) : undefined
    }));
  } else {
    content = /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_PinnedMessagesCard_empty"
    }, /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_PinnedMessagesCard_MessageActionBar"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_MessageActionBar_maskButton mx_MessageActionBar_reactButton"
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_MessageActionBar_maskButton mx_MessageActionBar_replyButton"
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_MessageActionBar_maskButton mx_MessageActionBar_optionsButton"
    })), /*#__PURE__*/_react.default.createElement("h2", null, (0, _languageHandler._t)("Nothing pinned, yet")), (0, _languageHandler._t)("If you have permissions, open the menu on any message and select " + "<b>Pin</b> to stick them here.", {}, {
      b: sub => /*#__PURE__*/_react.default.createElement("b", null, sub)
    })));
  }

  return /*#__PURE__*/_react.default.createElement(_BaseCard.default, {
    header: /*#__PURE__*/_react.default.createElement("h2", null, (0, _languageHandler._t)("Pinned messages")),
    className: "mx_PinnedMessagesCard",
    onClose: onClose
  }, content);
};

var _default = PinnedMessagesCard;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,