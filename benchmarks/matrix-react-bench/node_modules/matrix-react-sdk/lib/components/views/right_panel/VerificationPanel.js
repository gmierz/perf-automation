"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _crypto = require("matrix-js-sdk/src/crypto");

var _QRCode = require("matrix-js-sdk/src/crypto/verification/QRCode");

var _VerificationQRCode = _interopRequireDefault(require("../elements/crypto/VerificationQRCode"));

var _languageHandler = require("../../../languageHandler");

var _SdkConfig = _interopRequireDefault(require("../../../SdkConfig"));

var _E2EIcon = _interopRequireWildcard(require("../rooms/E2EIcon"));

var _VerificationRequest = require("matrix-js-sdk/src/crypto/verification/request/VerificationRequest");

var _Spinner = _interopRequireDefault(require("../elements/Spinner"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

var _VerificationShowSas = _interopRequireDefault(require("../verification/VerificationShowSas"));

var _logger = require("matrix-js-sdk/src/logger");

var _dec, _class;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

let VerificationPanel = (_dec = (0, _replaceableComponent.replaceableComponent)("views.right_panel.VerificationPanel"), _dec(_class = class VerificationPanel extends _react.default.PureComponent {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "hasVerifier", void 0);
    (0, _defineProperty2.default)(this, "onReciprocateYesClick", () => {
      this.setState({
        reciprocateButtonClicked: true
      });
      this.state.reciprocateQREvent.confirm();
    });
    (0, _defineProperty2.default)(this, "onReciprocateNoClick", () => {
      this.setState({
        reciprocateButtonClicked: true
      });
      this.state.reciprocateQREvent.cancel();
    });
    (0, _defineProperty2.default)(this, "startSAS", async () => {
      this.setState({
        emojiButtonClicked: true
      });
      const verifier = this.props.request.beginKeyVerification(_crypto.verificationMethods.SAS);

      try {
        await verifier.verify();
      } catch (err) {
        _logger.logger.error(err);
      }
    });
    (0, _defineProperty2.default)(this, "onSasMatchesClick", () => {
      this.state.sasEvent.confirm();
    });
    (0, _defineProperty2.default)(this, "onSasMismatchesClick", () => {
      this.state.sasEvent.mismatch();
    });
    (0, _defineProperty2.default)(this, "updateVerifierState", () => {
      const {
        request
      } = this.props;
      const sasEvent = request.verifier.sasEvent;
      const reciprocateQREvent = request.verifier.reciprocateQREvent;
      request.verifier.off('show_sas', this.updateVerifierState);
      request.verifier.off('show_reciprocate_qr', this.updateVerifierState);
      this.setState({
        sasEvent,
        reciprocateQREvent
      });
    });
    (0, _defineProperty2.default)(this, "onRequestChange", async () => {
      const {
        request
      } = this.props;
      const hadVerifier = this.hasVerifier;
      this.hasVerifier = !!request.verifier;

      if (!hadVerifier && this.hasVerifier) {
        request.verifier.on('show_sas', this.updateVerifierState);
        request.verifier.on('show_reciprocate_qr', this.updateVerifierState);

        try {
          // on the requester side, this is also awaited in startSAS,
          // but that's ok as verify should return the same promise.
          await request.verifier.verify();
        } catch (err) {
          _logger.logger.error("error verify", err);
        }
      }
    });
    this.state = {};
    this.hasVerifier = false;
  }

  renderQRPhase() {
    const {
      member,
      request
    } = this.props;
    const showSAS = request.otherPartySupportsMethod(_crypto.verificationMethods.SAS);
    const showQR = request.otherPartySupportsMethod(_QRCode.SCAN_QR_CODE_METHOD);

    const brand = _SdkConfig.default.get().brand;

    const noCommonMethodError = !showSAS && !showQR ? /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("The session you are trying to verify doesn't support scanning a " + "QR code or emoji verification, which is what %(brand)s supports. Try " + "with a different client.", {
      brand
    })) : null;

    if (this.props.layout === 'dialog') {
      // HACK: This is a terrible idea.
      let qrBlockDialog;
      let sasBlockDialog;

      if (showQR) {
        qrBlockDialog = /*#__PURE__*/_react.default.createElement("div", {
          className: "mx_VerificationPanel_QRPhase_startOption"
        }, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Scan this unique code")), /*#__PURE__*/_react.default.createElement(_VerificationQRCode.default, {
          qrCodeData: request.qrCodeData
        }));
      }

      if (showSAS) {
        sasBlockDialog = /*#__PURE__*/_react.default.createElement("div", {
          className: "mx_VerificationPanel_QRPhase_startOption"
        }, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Compare unique emoji")), /*#__PURE__*/_react.default.createElement("span", {
          className: "mx_VerificationPanel_QRPhase_helpText"
        }, (0, _languageHandler._t)("Compare a unique set of emoji if you don't have a camera on either device")), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
          disabled: this.state.emojiButtonClicked,
          onClick: this.startSAS,
          kind: "primary"
        }, (0, _languageHandler._t)("Start")));
      }

      const or = qrBlockDialog && sasBlockDialog ? /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_VerificationPanel_QRPhase_betweenText"
      }, (0, _languageHandler._t)("or")) : null;
      return /*#__PURE__*/_react.default.createElement("div", null, (0, _languageHandler._t)("Verify this session by completing one of the following:"), /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_VerificationPanel_QRPhase_startOptions"
      }, qrBlockDialog, or, sasBlockDialog, noCommonMethodError));
    }

    let qrBlock;

    if (showQR) {
      qrBlock = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_UserInfo_container"
      }, /*#__PURE__*/_react.default.createElement("h3", null, (0, _languageHandler._t)("Verify by scanning")), /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Ask %(displayName)s to scan your code:", {
        displayName: member.displayName || member.name || member.userId
      })), /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_VerificationPanel_qrCode"
      }, /*#__PURE__*/_react.default.createElement(_VerificationQRCode.default, {
        qrCodeData: request.qrCodeData
      })));
    }

    let sasBlock;

    if (showSAS) {
      const disabled = this.state.emojiButtonClicked;
      const sasLabel = showQR ? (0, _languageHandler._t)("If you can't scan the code above, verify by comparing unique emoji.") : (0, _languageHandler._t)("Verify by comparing unique emoji."); // Note: mx_VerificationPanel_verifyByEmojiButton is for the end-to-end tests

      sasBlock = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_UserInfo_container"
      }, /*#__PURE__*/_react.default.createElement("h3", null, (0, _languageHandler._t)("Verify by emoji")), /*#__PURE__*/_react.default.createElement("p", null, sasLabel), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        disabled: disabled,
        kind: "primary",
        className: "mx_UserInfo_wideButton mx_VerificationPanel_verifyByEmojiButton",
        onClick: this.startSAS
      }, (0, _languageHandler._t)("Verify by emoji")));
    }

    const noCommonMethodBlock = noCommonMethodError ? /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_UserInfo_container"
    }, noCommonMethodError) : null; // TODO: add way to open camera to scan a QR code

    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, qrBlock, sasBlock, noCommonMethodBlock);
  }

  getDevice() {
    const deviceId = this.props.request && this.props.request.channel.deviceId;
    return _MatrixClientPeg.MatrixClientPeg.get().getStoredDevice(_MatrixClientPeg.MatrixClientPeg.get().getUserId(), deviceId);
  }

  renderQRReciprocatePhase() {
    const {
      member,
      request
    } = this.props;
    const description = request.isSelfVerification ? (0, _languageHandler._t)("Almost there! Is your other session showing the same shield?") : (0, _languageHandler._t)("Almost there! Is %(displayName)s showing the same shield?", {
      displayName: member.displayName || member.name || member.userId
    });
    let body;

    if (this.state.reciprocateQREvent) {
      // Element Web doesn't support scanning yet, so assume here we're the client being scanned.
      body = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("p", null, description), /*#__PURE__*/_react.default.createElement(_E2EIcon.default, {
        isUser: true,
        status: _E2EIcon.E2EState.Verified,
        size: 128,
        hideTooltip: true
      }), /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_VerificationPanel_reciprocateButtons"
      }, /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        kind: "danger",
        disabled: this.state.reciprocateButtonClicked,
        onClick: this.onReciprocateNoClick
      }, (0, _languageHandler._t)("No")), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        kind: "primary",
        disabled: this.state.reciprocateButtonClicked,
        onClick: this.onReciprocateYesClick
      }, (0, _languageHandler._t)("Yes"))));
    } else {
      body = /*#__PURE__*/_react.default.createElement("p", null, /*#__PURE__*/_react.default.createElement(_Spinner.default, null));
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_UserInfo_container mx_VerificationPanel_reciprocate_section"
    }, /*#__PURE__*/_react.default.createElement("h3", null, (0, _languageHandler._t)("Verify by scanning")), body);
  }

  renderVerifiedPhase() {
    const {
      member,
      request
    } = this.props;
    let text;

    if (!request.isSelfVerification) {
      if (this.props.isRoomEncrypted) {
        text = (0, _languageHandler._t)("Verify all users in a room to ensure it's secure.");
      } else {
        text = (0, _languageHandler._t)("In encrypted rooms, verify all users to ensure it's secure.");
      }
    }

    let description;

    if (request.isSelfVerification) {
      const device = this.getDevice();

      if (!device) {
        // This can happen if the device is logged out while we're still showing verification
        // UI for it.
        _logger.logger.warn("Verified device we don't know about: " + this.props.request.channel.deviceId);

        description = (0, _languageHandler._t)("You've successfully verified your device!");
      } else {
        description = (0, _languageHandler._t)("You've successfully verified %(deviceName)s (%(deviceId)s)!", {
          deviceName: device ? device.getDisplayName() : '',
          deviceId: this.props.request.channel.deviceId
        });
      }
    } else {
      description = (0, _languageHandler._t)("You've successfully verified %(displayName)s!", {
        displayName: member.displayName || member.name || member.userId
      });
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_UserInfo_container mx_VerificationPanel_verified_section"
    }, /*#__PURE__*/_react.default.createElement("p", null, description), /*#__PURE__*/_react.default.createElement(_E2EIcon.default, {
      isUser: true,
      status: _E2EIcon.E2EState.Verified,
      size: 128,
      hideTooltip: true
    }), text ? /*#__PURE__*/_react.default.createElement("p", null, text) : null, /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      kind: "primary",
      className: "mx_UserInfo_wideButton",
      onClick: this.props.onClose
    }, (0, _languageHandler._t)("Got it")));
  }

  renderCancelledPhase() {
    const {
      member,
      request
    } = this.props;
    let startAgainInstruction;

    if (request.isSelfVerification) {
      startAgainInstruction = (0, _languageHandler._t)("Start verification again from the notification.");
    } else {
      startAgainInstruction = (0, _languageHandler._t)("Start verification again from their profile.");
    }

    let text;

    if (request.cancellationCode === "m.timeout") {
      text = (0, _languageHandler._t)("Verification timed out.") + ` ${startAgainInstruction}`;
    } else if (request.cancellingUserId === request.otherUserId) {
      if (request.isSelfVerification) {
        text = (0, _languageHandler._t)("You cancelled verification on your other session.");
      } else {
        text = (0, _languageHandler._t)("%(displayName)s cancelled verification.", {
          displayName: member.displayName || member.name || member.userId
        });
      }

      text = `${text} ${startAgainInstruction}`;
    } else {
      text = (0, _languageHandler._t)("You cancelled verification.") + ` ${startAgainInstruction}`;
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_UserInfo_container"
    }, /*#__PURE__*/_react.default.createElement("h3", null, (0, _languageHandler._t)("Verification cancelled")), /*#__PURE__*/_react.default.createElement("p", null, text), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      kind: "primary",
      className: "mx_UserInfo_wideButton",
      onClick: this.props.onClose
    }, (0, _languageHandler._t)("Got it")));
  }

  render() {
    const {
      member,
      phase,
      request
    } = this.props;
    const displayName = member.displayName || member.name || member.userId;

    switch (phase) {
      case _VerificationRequest.Phase.Ready:
        return this.renderQRPhase();

      case _VerificationRequest.Phase.Started:
        switch (request.chosenMethod) {
          case _crypto.verificationMethods.RECIPROCATE_QR_CODE:
            return this.renderQRReciprocatePhase();

          case _crypto.verificationMethods.SAS:
            {
              const emojis = this.state.sasEvent ? /*#__PURE__*/_react.default.createElement(_VerificationShowSas.default, {
                displayName: displayName,
                device: this.getDevice(),
                sas: this.state.sasEvent.sas,
                onCancel: this.onSasMismatchesClick,
                onDone: this.onSasMatchesClick,
                inDialog: this.props.inDialog,
                isSelf: request.isSelfVerification
              }) : /*#__PURE__*/_react.default.createElement(_Spinner.default, null);
              return /*#__PURE__*/_react.default.createElement("div", {
                className: "mx_UserInfo_container"
              }, emojis);
            }

          default:
            return null;
        }

      case _VerificationRequest.Phase.Done:
        return this.renderVerifiedPhase();

      case _VerificationRequest.Phase.Cancelled:
        return this.renderCancelledPhase();
    }

    _logger.logger.error("VerificationPanel unhandled phase:", phase);

    return null;
  }

  componentDidMount() {
    const {
      request
    } = this.props;
    request.on("change", this.onRequestChange);

    if (request.verifier) {
      const sasEvent = request.verifier.sasEvent;
      const reciprocateQREvent = request.verifier.reciprocateQREvent;
      this.setState({
        sasEvent,
        reciprocateQREvent
      });
    }

    this.onRequestChange();
  }

  componentWillUnmount() {
    const {
      request
    } = this.props;

    if (request.verifier) {
      request.verifier.off('show_sas', this.updateVerifierState);
      request.verifier.off('show_reciprocate_qr', this.updateVerifierState);
    }

    request.off("change", this.onRequestChange);
  }

}) || _class);
exports.default = VerificationPanel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,