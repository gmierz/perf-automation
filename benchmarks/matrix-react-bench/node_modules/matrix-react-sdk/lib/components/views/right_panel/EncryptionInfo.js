"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.PendingActionSpinner = void 0;

var _react = _interopRequireDefault(require("react"));

var _languageHandler = require("../../../languageHandler");

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

var _Spinner = _interopRequireDefault(require("../elements/Spinner"));

/*
Copyright 2019, 2020 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const PendingActionSpinner = ({
  text
}) => {
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_EncryptionInfo_spinner"
  }, /*#__PURE__*/_react.default.createElement(_Spinner.default, null), text);
};

exports.PendingActionSpinner = PendingActionSpinner;

const EncryptionInfo = ({
  waitingForOtherParty,
  waitingForNetwork,
  member,
  onStartVerification,
  isRoomEncrypted,
  inDialog,
  isSelfVerification
}) => {
  let content;

  if (waitingForOtherParty && isSelfVerification) {
    content = /*#__PURE__*/_react.default.createElement("div", null, (0, _languageHandler._t)("To proceed, please accept the verification request on your other login."));
  } else if (waitingForOtherParty || waitingForNetwork) {
    let text;

    if (waitingForOtherParty) {
      text = (0, _languageHandler._t)("Waiting for %(displayName)s to accept…", {
        displayName: member.displayName || member.name || member.userId
      });
    } else {
      text = (0, _languageHandler._t)("Accepting…");
    }

    content = /*#__PURE__*/_react.default.createElement(PendingActionSpinner, {
      text: text
    });
  } else {
    content = /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      kind: "primary",
      className: "mx_UserInfo_wideButton",
      onClick: onStartVerification
    }, (0, _languageHandler._t)("Start Verification"));
  }

  let description;

  if (isRoomEncrypted) {
    description = /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Messages in this room are end-to-end encrypted.")), /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Your messages are secured and only you and the recipient have " + "the unique keys to unlock them.")));
  } else {
    description = /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Messages in this room are not end-to-end encrypted.")), /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("In encrypted rooms, your messages are secured and only you and the recipient have " + "the unique keys to unlock them.")));
  }

  if (inDialog) {
    return content;
  }

  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_UserInfo_container"
  }, /*#__PURE__*/_react.default.createElement("h3", null, (0, _languageHandler._t)("Encryption")), description), /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_UserInfo_container"
  }, /*#__PURE__*/_react.default.createElement("h3", null, (0, _languageHandler._t)("Verify User")), /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("For extra security, verify this user by checking a one-time code on both of your devices.")), /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("To be secure, do this in person or use a trusted way to communicate.")), content)));
};

var _default = EncryptionInfo;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL3JpZ2h0X3BhbmVsL0VuY3J5cHRpb25JbmZvLnRzeCJdLCJuYW1lcyI6WyJQZW5kaW5nQWN0aW9uU3Bpbm5lciIsInRleHQiLCJFbmNyeXB0aW9uSW5mbyIsIndhaXRpbmdGb3JPdGhlclBhcnR5Iiwid2FpdGluZ0Zvck5ldHdvcmsiLCJtZW1iZXIiLCJvblN0YXJ0VmVyaWZpY2F0aW9uIiwiaXNSb29tRW5jcnlwdGVkIiwiaW5EaWFsb2ciLCJpc1NlbGZWZXJpZmljYXRpb24iLCJjb250ZW50IiwiZGlzcGxheU5hbWUiLCJuYW1lIiwidXNlcklkIiwiZGVzY3JpcHRpb24iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQWdCQTs7QUFFQTs7QUFHQTs7QUFDQTs7QUF0QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBVU8sTUFBTUEsb0JBQW9CLEdBQUcsQ0FBQztBQUFFQyxFQUFBQTtBQUFGLENBQUQsS0FBYztBQUM5QyxzQkFBTztBQUFLLElBQUEsU0FBUyxFQUFDO0FBQWYsa0JBQ0gsNkJBQUMsZ0JBQUQsT0FERyxFQUVEQSxJQUZDLENBQVA7QUFJSCxDQUxNOzs7O0FBaUJQLE1BQU1DLGNBQWdDLEdBQUcsQ0FBQztBQUN0Q0MsRUFBQUEsb0JBRHNDO0FBRXRDQyxFQUFBQSxpQkFGc0M7QUFHdENDLEVBQUFBLE1BSHNDO0FBSXRDQyxFQUFBQSxtQkFKc0M7QUFLdENDLEVBQUFBLGVBTHNDO0FBTXRDQyxFQUFBQSxRQU5zQztBQU90Q0MsRUFBQUE7QUFQc0MsQ0FBRCxLQVEzQjtBQUNWLE1BQUlDLE9BQUo7O0FBQ0EsTUFBSVAsb0JBQW9CLElBQUlNLGtCQUE1QixFQUFnRDtBQUM1Q0MsSUFBQUEsT0FBTyxnQkFDSCwwQ0FDTSx5QkFBRyx5RUFBSCxDQUROLENBREo7QUFLSCxHQU5ELE1BTU8sSUFBSVAsb0JBQW9CLElBQUlDLGlCQUE1QixFQUErQztBQUNsRCxRQUFJSCxJQUFKOztBQUNBLFFBQUlFLG9CQUFKLEVBQTBCO0FBQ3RCRixNQUFBQSxJQUFJLEdBQUcseUJBQUcsd0NBQUgsRUFBNkM7QUFDaERVLFFBQUFBLFdBQVcsRUFBR04sTUFBRCxDQUFpQk0sV0FBakIsSUFBaUNOLE1BQUQsQ0FBdUJPLElBQXZELElBQStEUCxNQUFNLENBQUNRO0FBRG5DLE9BQTdDLENBQVA7QUFHSCxLQUpELE1BSU87QUFDSFosTUFBQUEsSUFBSSxHQUFHLHlCQUFHLFlBQUgsQ0FBUDtBQUNIOztBQUNEUyxJQUFBQSxPQUFPLGdCQUFHLDZCQUFDLG9CQUFEO0FBQXNCLE1BQUEsSUFBSSxFQUFFVDtBQUE1QixNQUFWO0FBQ0gsR0FWTSxNQVVBO0FBQ0hTLElBQUFBLE9BQU8sZ0JBQ0gsNkJBQUMseUJBQUQ7QUFBa0IsTUFBQSxJQUFJLEVBQUMsU0FBdkI7QUFBaUMsTUFBQSxTQUFTLEVBQUMsd0JBQTNDO0FBQW9FLE1BQUEsT0FBTyxFQUFFSjtBQUE3RSxPQUNNLHlCQUFHLG9CQUFILENBRE4sQ0FESjtBQUtIOztBQUVELE1BQUlRLFdBQUo7O0FBQ0EsTUFBSVAsZUFBSixFQUFxQjtBQUNqQk8sSUFBQUEsV0FBVyxnQkFDUCx1REFDSSx3Q0FBSyx5QkFBRyxpREFBSCxDQUFMLENBREosZUFFSSx3Q0FBSyx5QkFBRyxtRUFDSixpQ0FEQyxDQUFMLENBRkosQ0FESjtBQU9ILEdBUkQsTUFRTztBQUNIQSxJQUFBQSxXQUFXLGdCQUNQLHVEQUNJLHdDQUFLLHlCQUFHLHFEQUFILENBQUwsQ0FESixlQUVJLHdDQUFLLHlCQUFHLHVGQUNKLGlDQURDLENBQUwsQ0FGSixDQURKO0FBT0g7O0FBRUQsTUFBSU4sUUFBSixFQUFjO0FBQ1YsV0FBT0UsT0FBUDtBQUNIOztBQUVELHNCQUFPLDZCQUFDLGNBQUQsQ0FBTyxRQUFQLHFCQUNIO0FBQUssSUFBQSxTQUFTLEVBQUM7QUFBZixrQkFDSSx5Q0FBTSx5QkFBRyxZQUFILENBQU4sQ0FESixFQUVNSSxXQUZOLENBREcsZUFLSDtBQUFLLElBQUEsU0FBUyxFQUFDO0FBQWYsa0JBQ0kseUNBQU0seUJBQUcsYUFBSCxDQUFOLENBREosZUFFSSx1REFDSSx3Q0FBSyx5QkFBRywyRkFBSCxDQUFMLENBREosZUFFSSx3Q0FBSyx5QkFBRyxzRUFBSCxDQUFMLENBRkosRUFHTUosT0FITixDQUZKLENBTEcsQ0FBUDtBQWNILENBdkVEOztlQXlFZVIsYyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5Db3B5cmlnaHQgMjAxOSwgMjAyMCBUaGUgTWF0cml4Lm9yZyBGb3VuZGF0aW9uIEMuSS5DLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxuaW1wb3J0IHsgX3QgfSBmcm9tIFwiLi4vLi4vLi4vbGFuZ3VhZ2VIYW5kbGVyXCI7XG5pbXBvcnQgeyBSb29tTWVtYmVyIH0gZnJvbSBcIm1hdHJpeC1qcy1zZGsvc3JjL21vZGVscy9yb29tLW1lbWJlclwiO1xuaW1wb3J0IHsgVXNlciB9IGZyb20gXCJtYXRyaXgtanMtc2RrL3NyYy9tb2RlbHMvdXNlclwiO1xuaW1wb3J0IEFjY2Vzc2libGVCdXR0b24gZnJvbSBcIi4uL2VsZW1lbnRzL0FjY2Vzc2libGVCdXR0b25cIjtcbmltcG9ydCBTcGlubmVyIGZyb20gXCIuLi9lbGVtZW50cy9TcGlubmVyXCI7XG5cbmV4cG9ydCBjb25zdCBQZW5kaW5nQWN0aW9uU3Bpbm5lciA9ICh7IHRleHQgfSkgPT4ge1xuICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cIm14X0VuY3J5cHRpb25JbmZvX3NwaW5uZXJcIj5cbiAgICAgICAgPFNwaW5uZXIgLz5cbiAgICAgICAgeyB0ZXh0IH1cbiAgICA8L2Rpdj47XG59O1xuXG5pbnRlcmZhY2UgSVByb3BzIHtcbiAgICB3YWl0aW5nRm9yT3RoZXJQYXJ0eTogYm9vbGVhbjtcbiAgICB3YWl0aW5nRm9yTmV0d29yazogYm9vbGVhbjtcbiAgICBtZW1iZXI6IFJvb21NZW1iZXIgfCBVc2VyO1xuICAgIG9uU3RhcnRWZXJpZmljYXRpb246ICgpID0+IFByb21pc2U8dm9pZD47XG4gICAgaXNSb29tRW5jcnlwdGVkOiBib29sZWFuO1xuICAgIGluRGlhbG9nOiBib29sZWFuO1xuICAgIGlzU2VsZlZlcmlmaWNhdGlvbjogYm9vbGVhbjtcbn1cblxuY29uc3QgRW5jcnlwdGlvbkluZm86IFJlYWN0LkZDPElQcm9wcz4gPSAoe1xuICAgIHdhaXRpbmdGb3JPdGhlclBhcnR5LFxuICAgIHdhaXRpbmdGb3JOZXR3b3JrLFxuICAgIG1lbWJlcixcbiAgICBvblN0YXJ0VmVyaWZpY2F0aW9uLFxuICAgIGlzUm9vbUVuY3J5cHRlZCxcbiAgICBpbkRpYWxvZyxcbiAgICBpc1NlbGZWZXJpZmljYXRpb24sXG59OiBJUHJvcHMpID0+IHtcbiAgICBsZXQgY29udGVudDogSlNYLkVsZW1lbnQ7XG4gICAgaWYgKHdhaXRpbmdGb3JPdGhlclBhcnR5ICYmIGlzU2VsZlZlcmlmaWNhdGlvbikge1xuICAgICAgICBjb250ZW50ID0gKFxuICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICB7IF90KFwiVG8gcHJvY2VlZCwgcGxlYXNlIGFjY2VwdCB0aGUgdmVyaWZpY2F0aW9uIHJlcXVlc3Qgb24geW91ciBvdGhlciBsb2dpbi5cIikgfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgfSBlbHNlIGlmICh3YWl0aW5nRm9yT3RoZXJQYXJ0eSB8fCB3YWl0aW5nRm9yTmV0d29yaykge1xuICAgICAgICBsZXQgdGV4dDogc3RyaW5nO1xuICAgICAgICBpZiAod2FpdGluZ0Zvck90aGVyUGFydHkpIHtcbiAgICAgICAgICAgIHRleHQgPSBfdChcIldhaXRpbmcgZm9yICUoZGlzcGxheU5hbWUpcyB0byBhY2NlcHTigKZcIiwge1xuICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lOiAobWVtYmVyIGFzIFVzZXIpLmRpc3BsYXlOYW1lIHx8IChtZW1iZXIgYXMgUm9vbU1lbWJlcikubmFtZSB8fCBtZW1iZXIudXNlcklkLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0ZXh0ID0gX3QoXCJBY2NlcHRpbmfigKZcIik7XG4gICAgICAgIH1cbiAgICAgICAgY29udGVudCA9IDxQZW5kaW5nQWN0aW9uU3Bpbm5lciB0ZXh0PXt0ZXh0fSAvPjtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjb250ZW50ID0gKFxuICAgICAgICAgICAgPEFjY2Vzc2libGVCdXR0b24ga2luZD1cInByaW1hcnlcIiBjbGFzc05hbWU9XCJteF9Vc2VySW5mb193aWRlQnV0dG9uXCIgb25DbGljaz17b25TdGFydFZlcmlmaWNhdGlvbn0+XG4gICAgICAgICAgICAgICAgeyBfdChcIlN0YXJ0IFZlcmlmaWNhdGlvblwiKSB9XG4gICAgICAgICAgICA8L0FjY2Vzc2libGVCdXR0b24+XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgbGV0IGRlc2NyaXB0aW9uOiBKU1guRWxlbWVudDtcbiAgICBpZiAoaXNSb29tRW5jcnlwdGVkKSB7XG4gICAgICAgIGRlc2NyaXB0aW9uID0gKFxuICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICA8cD57IF90KFwiTWVzc2FnZXMgaW4gdGhpcyByb29tIGFyZSBlbmQtdG8tZW5kIGVuY3J5cHRlZC5cIikgfTwvcD5cbiAgICAgICAgICAgICAgICA8cD57IF90KFwiWW91ciBtZXNzYWdlcyBhcmUgc2VjdXJlZCBhbmQgb25seSB5b3UgYW5kIHRoZSByZWNpcGllbnQgaGF2ZSBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwidGhlIHVuaXF1ZSBrZXlzIHRvIHVubG9jayB0aGVtLlwiKSB9PC9wPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZGVzY3JpcHRpb24gPSAoXG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgIDxwPnsgX3QoXCJNZXNzYWdlcyBpbiB0aGlzIHJvb20gYXJlIG5vdCBlbmQtdG8tZW5kIGVuY3J5cHRlZC5cIikgfTwvcD5cbiAgICAgICAgICAgICAgICA8cD57IF90KFwiSW4gZW5jcnlwdGVkIHJvb21zLCB5b3VyIG1lc3NhZ2VzIGFyZSBzZWN1cmVkIGFuZCBvbmx5IHlvdSBhbmQgdGhlIHJlY2lwaWVudCBoYXZlIFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJ0aGUgdW5pcXVlIGtleXMgdG8gdW5sb2NrIHRoZW0uXCIpIH08L3A+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoaW5EaWFsb2cpIHtcbiAgICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJteF9Vc2VySW5mb19jb250YWluZXJcIj5cbiAgICAgICAgICAgIDxoMz57IF90KFwiRW5jcnlwdGlvblwiKSB9PC9oMz5cbiAgICAgICAgICAgIHsgZGVzY3JpcHRpb24gfVxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJteF9Vc2VySW5mb19jb250YWluZXJcIj5cbiAgICAgICAgICAgIDxoMz57IF90KFwiVmVyaWZ5IFVzZXJcIikgfTwvaDM+XG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgIDxwPnsgX3QoXCJGb3IgZXh0cmEgc2VjdXJpdHksIHZlcmlmeSB0aGlzIHVzZXIgYnkgY2hlY2tpbmcgYSBvbmUtdGltZSBjb2RlIG9uIGJvdGggb2YgeW91ciBkZXZpY2VzLlwiKSB9PC9wPlxuICAgICAgICAgICAgICAgIDxwPnsgX3QoXCJUbyBiZSBzZWN1cmUsIGRvIHRoaXMgaW4gcGVyc29uIG9yIHVzZSBhIHRydXN0ZWQgd2F5IHRvIGNvbW11bmljYXRlLlwiKSB9PC9wPlxuICAgICAgICAgICAgICAgIHsgY29udGVudCB9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgPC9SZWFjdC5GcmFnbWVudD47XG59O1xuXG5leHBvcnQgZGVmYXVsdCBFbmNyeXB0aW9uSW5mbztcbiJdfQ==