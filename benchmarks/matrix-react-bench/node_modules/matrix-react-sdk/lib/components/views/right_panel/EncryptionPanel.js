"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _VerificationRequest = require("matrix-js-sdk/src/crypto/verification/request/VerificationRequest");

var _EncryptionInfo = _interopRequireDefault(require("./EncryptionInfo"));

var _VerificationPanel = _interopRequireDefault(require("./VerificationPanel"));

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _createRoom = require("../../../createRoom");

var _useEventEmitter = require("../../../hooks/useEventEmitter");

var _Modal = _interopRequireDefault(require("../../../Modal"));

var sdk = _interopRequireWildcard(require("../../../index"));

var _languageHandler = require("../../../languageHandler");

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _actions = require("../../../dispatcher/actions");

var _RightPanelStorePhases = require("../../../stores/RightPanelStorePhases");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
Copyright 2019, 2020 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// cancellation codes which constitute a key mismatch
const MISMATCHES = ["m.key_mismatch", "m.user_error", "m.mismatched_sas"];

const EncryptionPanel = props => {
  const {
    verificationRequest,
    verificationRequestPromise,
    member,
    onClose,
    layout,
    isRoomEncrypted
  } = props;
  const [request, setRequest] = (0, _react.useState)(verificationRequest); // state to show a spinner immediately after clicking "start verification",
  // before we have a request

  const [isRequesting, setRequesting] = (0, _react.useState)(false);
  const [phase, setPhase] = (0, _react.useState)(request === null || request === void 0 ? void 0 : request.phase);
  (0, _react.useEffect)(() => {
    setRequest(verificationRequest);

    if (verificationRequest) {
      setRequesting(false);
      setPhase(verificationRequest.phase);
    }
  }, [verificationRequest]);
  (0, _react.useEffect)(() => {
    async function awaitPromise() {
      setRequesting(true);
      const requestFromPromise = await verificationRequestPromise;
      setRequesting(false);
      setRequest(requestFromPromise);
      setPhase(requestFromPromise.phase);
    }

    if (verificationRequestPromise) {
      awaitPromise();
    }
  }, [verificationRequestPromise]);
  const changeHandler = (0, _react.useCallback)(() => {
    // handle transitions -> cancelled for mismatches which fire a modal instead of showing a card
    if (request && request.cancelled && MISMATCHES.includes(request.cancellationCode)) {
      // FIXME: Using an import will result in test failures
      const ErrorDialog = sdk.getComponent("dialogs.ErrorDialog");

      _Modal.default.createTrackedDialog("Verification failed", "insecure", ErrorDialog, {
        headerImage: require("../../../../res/img/e2e/warning.svg"),
        title: (0, _languageHandler._t)("Your messages are not secure"),
        description: /*#__PURE__*/_react.default.createElement("div", null, (0, _languageHandler._t)("One of the following may be compromised:"), /*#__PURE__*/_react.default.createElement("ul", null, /*#__PURE__*/_react.default.createElement("li", null, (0, _languageHandler._t)("Your homeserver")), /*#__PURE__*/_react.default.createElement("li", null, (0, _languageHandler._t)("The homeserver the user you're verifying is connected to")), /*#__PURE__*/_react.default.createElement("li", null, (0, _languageHandler._t)("Yours, or the other users' internet connection")), /*#__PURE__*/_react.default.createElement("li", null, (0, _languageHandler._t)("Yours, or the other users' session")))),
        onFinished: onClose
      });

      return; // don't update phase here as we will be transitioning away from this view shortly
    }

    if (request) {
      setPhase(request.phase);
    }
  }, [onClose, request]);
  (0, _useEventEmitter.useEventEmitter)(request, "change", changeHandler);
  const onStartVerification = (0, _react.useCallback)(async () => {
    setRequesting(true);

    const cli = _MatrixClientPeg.MatrixClientPeg.get();

    const roomId = await (0, _createRoom.ensureDMExists)(cli, member.userId);
    const verificationRequest_ = await cli.requestVerificationDM(member.userId, roomId);
    setRequest(verificationRequest_);
    setPhase(verificationRequest_.phase); // Notify the RightPanelStore about this

    _dispatcher.default.dispatch({
      action: _actions.Action.SetRightPanelPhase,
      phase: _RightPanelStorePhases.RightPanelPhases.EncryptionPanel,
      refireParams: {
        member,
        verificationRequest: verificationRequest_
      }
    });
  }, [member]);
  const requested = !request && isRequesting || request && (phase === _VerificationRequest.PHASE_REQUESTED || phase === _VerificationRequest.PHASE_UNSENT || phase === undefined);
  const isSelfVerification = request ? request.isSelfVerification : member.userId === _MatrixClientPeg.MatrixClientPeg.get().getUserId();

  if (!request || requested) {
    const initiatedByMe = !request && isRequesting || request && request.initiatedByMe;
    return /*#__PURE__*/_react.default.createElement(_EncryptionInfo.default, {
      isRoomEncrypted: isRoomEncrypted,
      onStartVerification: onStartVerification,
      member: member,
      isSelfVerification: isSelfVerification,
      waitingForOtherParty: requested && initiatedByMe,
      waitingForNetwork: requested && !initiatedByMe,
      inDialog: layout === "dialog"
    });
  } else {
    return /*#__PURE__*/_react.default.createElement(_VerificationPanel.default, {
      isRoomEncrypted: isRoomEncrypted,
      layout: layout,
      onClose: onClose,
      member: member,
      request: request,
      key: request.channel.transactionId,
      inDialog: layout === "dialog",
      phase: phase
    });
  }
};

var _default = EncryptionPanel;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,