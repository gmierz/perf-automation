"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.HeaderKind = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _RightPanelStore = _interopRequireDefault(require("../../../stores/RightPanelStore"));

var _actions = require("../../../dispatcher/actions");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _dec, _class;

let HeaderKind;
exports.HeaderKind = HeaderKind;

(function (HeaderKind) {
  HeaderKind["Room"] = "room";
  HeaderKind["Group"] = "group";
})(HeaderKind || (exports.HeaderKind = HeaderKind = {}));

let HeaderButtons = (_dec = (0, _replaceableComponent.replaceableComponent)("views.right_panel.HeaderButtons"), _dec(_class = class HeaderButtons extends _react.default.Component {
  constructor(props, kind) {
    super(props);
    (0, _defineProperty2.default)(this, "storeToken", void 0);
    (0, _defineProperty2.default)(this, "dispatcherRef", void 0);

    const rps = _RightPanelStore.default.getSharedInstance();

    this.state = {
      headerKind: kind,
      phase: kind === HeaderKind.Room ? rps.visibleRoomPanelPhase : rps.visibleGroupPanelPhase
    };
  }

  componentDidMount() {
    this.storeToken = _RightPanelStore.default.getSharedInstance().addListener(this.onRightPanelUpdate.bind(this));
    this.dispatcherRef = _dispatcher.default.register(this.onAction.bind(this)); // used by subclasses
  }

  componentWillUnmount() {
    if (this.storeToken) this.storeToken.remove();
    if (this.dispatcherRef) _dispatcher.default.unregister(this.dispatcherRef);
  }

  setPhase(phase, extras) {
    _dispatcher.default.dispatch({
      action: _actions.Action.SetRightPanelPhase,
      phase: phase,
      refireParams: extras
    });
  }

  isPhase(phases) {
    if (Array.isArray(phases)) {
      return phases.includes(this.state.phase);
    } else {
      return phases === this.state.phase;
    }
  }

  onRightPanelUpdate() {
    const rps = _RightPanelStore.default.getSharedInstance();

    if (this.state.headerKind === HeaderKind.Room) {
      this.setState({
        phase: rps.visibleRoomPanelPhase
      });
    } else if (this.state.headerKind === HeaderKind.Group) {
      this.setState({
        phase: rps.visibleGroupPanelPhase
      });
    }
  } // XXX: Make renderButtons a prop


  render() {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_HeaderButtons"
    }, this.renderButtons());
  }

}) || _class);
exports.default = HeaderButtons;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,