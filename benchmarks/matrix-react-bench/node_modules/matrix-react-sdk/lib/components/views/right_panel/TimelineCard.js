"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _BaseCard = _interopRequireDefault(require("./BaseCard"));

var _MessageComposer = _interopRequireDefault(require("../rooms/MessageComposer"));

var _Layout = require("../../../settings/enums/Layout");

var _TimelinePanel = _interopRequireDefault(require("../../structures/TimelinePanel"));

var _RoomContext = _interopRequireDefault(require("../../../contexts/RoomContext"));

var _languageHandler = require("../../../languageHandler");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _dec, _class, _class2, _temp;

let TimelineCard = (_dec = (0, _replaceableComponent.replaceableComponent)("structures.TimelineCard"), _dec(_class = (_temp = _class2 = class TimelineCard extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "renderTimelineCardHeader", () => {
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_TimelineCard__header"
      }, /*#__PURE__*/_react.default.createElement("span", null, (0, _languageHandler._t)("Chat")));
    });
    this.state = {};
  }

  render() {
    var _this$props$initialEv;

    return /*#__PURE__*/_react.default.createElement(_BaseCard.default, {
      className: "mx_ThreadPanel mx_TimelineCard",
      onClose: this.props.onClose,
      withoutScrollContainer: true,
      header: this.renderTimelineCardHeader()
    }, /*#__PURE__*/_react.default.createElement(_TimelinePanel.default, {
      showReadReceipts: false // TODO: RR's cause issues with limited horizontal space
      ,
      manageReadReceipts: true,
      manageReadMarkers: false // No RM support in the TimelineCard
      ,
      sendReadReceiptOnLoad: true,
      timelineSet: this.props.room.getUnfilteredTimelineSet(),
      showUrlPreview: true,
      layout: _Layout.Layout.Group,
      hideThreadedMessages: false,
      hidden: false,
      showReactions: true,
      className: "mx_RoomView_messagePanel mx_GroupLayout",
      permalinkCreator: this.props.permalinkCreator,
      membersLoaded: true,
      editState: this.state.editState,
      eventId: (_this$props$initialEv = this.props.initialEvent) === null || _this$props$initialEv === void 0 ? void 0 : _this$props$initialEv.getId(),
      resizeNotifier: this.props.resizeNotifier
    }), /*#__PURE__*/_react.default.createElement(_MessageComposer.default, {
      room: this.props.room,
      resizeNotifier: this.props.resizeNotifier,
      replyToEvent: this.state.replyToEvent,
      permalinkCreator: this.props.permalinkCreator,
      e2eStatus: this.props.e2eStatus,
      compact: true
    }));
  }

}, (0, _defineProperty2.default)(_class2, "contextType", _RoomContext.default), _temp)) || _class);
exports.default = TimelineCard;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL3JpZ2h0X3BhbmVsL1RpbWVsaW5lQ2FyZC50c3giXSwibmFtZXMiOlsiVGltZWxpbmVDYXJkIiwiUmVhY3QiLCJDb21wb25lbnQiLCJjb25zdHJ1Y3RvciIsInByb3BzIiwic3RhdGUiLCJyZW5kZXIiLCJvbkNsb3NlIiwicmVuZGVyVGltZWxpbmVDYXJkSGVhZGVyIiwicm9vbSIsImdldFVuZmlsdGVyZWRUaW1lbGluZVNldCIsIkxheW91dCIsIkdyb3VwIiwicGVybWFsaW5rQ3JlYXRvciIsImVkaXRTdGF0ZSIsImluaXRpYWxFdmVudCIsImdldElkIiwicmVzaXplTm90aWZpZXIiLCJyZXBseVRvRXZlbnQiLCJlMmVTdGF0dXMiLCJSb29tQ29udGV4dCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFnQkE7O0FBSUE7O0FBR0E7O0FBRUE7O0FBQ0E7O0FBR0E7O0FBRUE7O0FBQ0E7Ozs7SUFrQnFCQSxZLFdBRHBCLGdEQUFxQix5QkFBckIsQyxtQ0FBRCxNQUNxQkEsWUFEckIsU0FDMENDLGVBQU1DLFNBRGhELENBQzBFO0FBR3RFQyxFQUFBQSxXQUFXLENBQUNDLEtBQUQsRUFBZ0I7QUFDdkIsVUFBTUEsS0FBTjtBQUR1QixvRUFLUSxNQUFtQjtBQUNsRCwwQkFBTztBQUFLLFFBQUEsU0FBUyxFQUFDO0FBQWYsc0JBQ0gsMkNBQVEseUJBQUcsTUFBSCxDQUFSLENBREcsQ0FBUDtBQUdILEtBVDBCO0FBRXZCLFNBQUtDLEtBQUwsR0FBYSxFQUFiO0FBQ0g7O0FBUU1DLEVBQUFBLE1BQU0sR0FBZ0I7QUFBQTs7QUFDekIsd0JBQ0ksNkJBQUMsaUJBQUQ7QUFDSSxNQUFBLFNBQVMsRUFBQyxnQ0FEZDtBQUVJLE1BQUEsT0FBTyxFQUFFLEtBQUtGLEtBQUwsQ0FBV0csT0FGeEI7QUFHSSxNQUFBLHNCQUFzQixFQUFFLElBSDVCO0FBSUksTUFBQSxNQUFNLEVBQUUsS0FBS0Msd0JBQUw7QUFKWixvQkFNSSw2QkFBQyxzQkFBRDtBQUNJLE1BQUEsZ0JBQWdCLEVBQUUsS0FEdEIsQ0FDNkI7QUFEN0I7QUFFSSxNQUFBLGtCQUFrQixFQUFFLElBRnhCO0FBR0ksTUFBQSxpQkFBaUIsRUFBRSxLQUh2QixDQUc4QjtBQUg5QjtBQUlJLE1BQUEscUJBQXFCLEVBQUUsSUFKM0I7QUFLSSxNQUFBLFdBQVcsRUFBRSxLQUFLSixLQUFMLENBQVdLLElBQVgsQ0FBZ0JDLHdCQUFoQixFQUxqQjtBQU1JLE1BQUEsY0FBYyxFQUFFLElBTnBCO0FBT0ksTUFBQSxNQUFNLEVBQUVDLGVBQU9DLEtBUG5CO0FBUUksTUFBQSxvQkFBb0IsRUFBRSxLQVIxQjtBQVNJLE1BQUEsTUFBTSxFQUFFLEtBVFo7QUFVSSxNQUFBLGFBQWEsRUFBRSxJQVZuQjtBQVdJLE1BQUEsU0FBUyxFQUFDLHlDQVhkO0FBWUksTUFBQSxnQkFBZ0IsRUFBRSxLQUFLUixLQUFMLENBQVdTLGdCQVpqQztBQWFJLE1BQUEsYUFBYSxFQUFFLElBYm5CO0FBY0ksTUFBQSxTQUFTLEVBQUUsS0FBS1IsS0FBTCxDQUFXUyxTQWQxQjtBQWVJLE1BQUEsT0FBTywyQkFBRSxLQUFLVixLQUFMLENBQVdXLFlBQWIsMERBQUUsc0JBQXlCQyxLQUF6QixFQWZiO0FBZ0JJLE1BQUEsY0FBYyxFQUFFLEtBQUtaLEtBQUwsQ0FBV2E7QUFoQi9CLE1BTkosZUF5QkksNkJBQUMsd0JBQUQ7QUFDSSxNQUFBLElBQUksRUFBRSxLQUFLYixLQUFMLENBQVdLLElBRHJCO0FBRUksTUFBQSxjQUFjLEVBQUUsS0FBS0wsS0FBTCxDQUFXYSxjQUYvQjtBQUdJLE1BQUEsWUFBWSxFQUFFLEtBQUtaLEtBQUwsQ0FBV2EsWUFIN0I7QUFJSSxNQUFBLGdCQUFnQixFQUFFLEtBQUtkLEtBQUwsQ0FBV1MsZ0JBSmpDO0FBS0ksTUFBQSxTQUFTLEVBQUUsS0FBS1QsS0FBTCxDQUFXZSxTQUwxQjtBQU1JLE1BQUEsT0FBTyxFQUFFO0FBTmIsTUF6QkosQ0FESjtBQW9DSDs7QUFuRHFFLEMsd0RBQ2pEQyxvQiIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5Db3B5cmlnaHQgMjAyMSBUaGUgTWF0cml4Lm9yZyBGb3VuZGF0aW9uIEMuSS5DLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBNYXRyaXhFdmVudCwgUm9vbSB9IGZyb20gJ21hdHJpeC1qcy1zZGsvc3JjJztcbmltcG9ydCB7IFRocmVhZCB9IGZyb20gJ21hdHJpeC1qcy1zZGsvc3JjL21vZGVscy90aHJlYWQnO1xuXG5pbXBvcnQgQmFzZUNhcmQgZnJvbSBcIi4vQmFzZUNhcmRcIjtcblxuaW1wb3J0IFJlc2l6ZU5vdGlmaWVyIGZyb20gJy4uLy4uLy4uL3V0aWxzL1Jlc2l6ZU5vdGlmaWVyJztcbmltcG9ydCBNZXNzYWdlQ29tcG9zZXIgZnJvbSAnLi4vcm9vbXMvTWVzc2FnZUNvbXBvc2VyJztcbmltcG9ydCB7IFJvb21QZXJtYWxpbmtDcmVhdG9yIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvcGVybWFsaW5rcy9QZXJtYWxpbmtzJztcbmltcG9ydCB7IExheW91dCB9IGZyb20gJy4uLy4uLy4uL3NldHRpbmdzL2VudW1zL0xheW91dCc7XG5pbXBvcnQgVGltZWxpbmVQYW5lbCBmcm9tICcuLi8uLi9zdHJ1Y3R1cmVzL1RpbWVsaW5lUGFuZWwnO1xuaW1wb3J0IHsgRTJFU3RhdHVzIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvU2hpZWxkVXRpbHMnO1xuaW1wb3J0IEVkaXRvclN0YXRlVHJhbnNmZXIgZnJvbSAnLi4vLi4vLi4vdXRpbHMvRWRpdG9yU3RhdGVUcmFuc2Zlcic7XG5pbXBvcnQgUm9vbUNvbnRleHQgZnJvbSAnLi4vLi4vLi4vY29udGV4dHMvUm9vbUNvbnRleHQnO1xuXG5pbXBvcnQgeyBfdCB9IGZyb20gJy4uLy4uLy4uL2xhbmd1YWdlSGFuZGxlcic7XG5pbXBvcnQgeyByZXBsYWNlYWJsZUNvbXBvbmVudCB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3JlcGxhY2VhYmxlQ29tcG9uZW50JztcblxuaW50ZXJmYWNlIElQcm9wcyB7XG4gICAgcm9vbTogUm9vbTtcbiAgICBvbkNsb3NlOiAoKSA9PiB2b2lkO1xuICAgIHJlc2l6ZU5vdGlmaWVyOiBSZXNpemVOb3RpZmllcjtcbiAgICBwZXJtYWxpbmtDcmVhdG9yPzogUm9vbVBlcm1hbGlua0NyZWF0b3I7XG4gICAgZTJlU3RhdHVzPzogRTJFU3RhdHVzO1xuICAgIGluaXRpYWxFdmVudD86IE1hdHJpeEV2ZW50O1xuICAgIGluaXRpYWxFdmVudEhpZ2hsaWdodGVkPzogYm9vbGVhbjtcbn1cbmludGVyZmFjZSBJU3RhdGUge1xuICAgIHRocmVhZD86IFRocmVhZDtcbiAgICBlZGl0U3RhdGU/OiBFZGl0b3JTdGF0ZVRyYW5zZmVyO1xuICAgIHJlcGx5VG9FdmVudD86IE1hdHJpeEV2ZW50O1xufVxuXG5AcmVwbGFjZWFibGVDb21wb25lbnQoXCJzdHJ1Y3R1cmVzLlRpbWVsaW5lQ2FyZFwiKVxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGltZWxpbmVDYXJkIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PElQcm9wcywgSVN0YXRlPiB7XG4gICAgc3RhdGljIGNvbnRleHRUeXBlID0gUm9vbUNvbnRleHQ7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm9wczogSVByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHt9O1xuICAgIH1cblxuICAgIHByaXZhdGUgcmVuZGVyVGltZWxpbmVDYXJkSGVhZGVyID0gKCk6IEpTWC5FbGVtZW50ID0+IHtcbiAgICAgICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPVwibXhfVGltZWxpbmVDYXJkX19oZWFkZXJcIj5cbiAgICAgICAgICAgIDxzcGFuPnsgX3QoXCJDaGF0XCIpIH08L3NwYW4+XG4gICAgICAgIDwvZGl2PjtcbiAgICB9O1xuXG4gICAgcHVibGljIHJlbmRlcigpOiBKU1guRWxlbWVudCB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8QmFzZUNhcmRcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJteF9UaHJlYWRQYW5lbCBteF9UaW1lbGluZUNhcmRcIlxuICAgICAgICAgICAgICAgIG9uQ2xvc2U9e3RoaXMucHJvcHMub25DbG9zZX1cbiAgICAgICAgICAgICAgICB3aXRob3V0U2Nyb2xsQ29udGFpbmVyPXt0cnVlfVxuICAgICAgICAgICAgICAgIGhlYWRlcj17dGhpcy5yZW5kZXJUaW1lbGluZUNhcmRIZWFkZXIoKX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8VGltZWxpbmVQYW5lbFxuICAgICAgICAgICAgICAgICAgICBzaG93UmVhZFJlY2VpcHRzPXtmYWxzZX0gLy8gVE9ETzogUlIncyBjYXVzZSBpc3N1ZXMgd2l0aCBsaW1pdGVkIGhvcml6b250YWwgc3BhY2VcbiAgICAgICAgICAgICAgICAgICAgbWFuYWdlUmVhZFJlY2VpcHRzPXt0cnVlfVxuICAgICAgICAgICAgICAgICAgICBtYW5hZ2VSZWFkTWFya2Vycz17ZmFsc2V9IC8vIE5vIFJNIHN1cHBvcnQgaW4gdGhlIFRpbWVsaW5lQ2FyZFxuICAgICAgICAgICAgICAgICAgICBzZW5kUmVhZFJlY2VpcHRPbkxvYWQ9e3RydWV9XG4gICAgICAgICAgICAgICAgICAgIHRpbWVsaW5lU2V0PXt0aGlzLnByb3BzLnJvb20uZ2V0VW5maWx0ZXJlZFRpbWVsaW5lU2V0KCl9XG4gICAgICAgICAgICAgICAgICAgIHNob3dVcmxQcmV2aWV3PXt0cnVlfVxuICAgICAgICAgICAgICAgICAgICBsYXlvdXQ9e0xheW91dC5Hcm91cH1cbiAgICAgICAgICAgICAgICAgICAgaGlkZVRocmVhZGVkTWVzc2FnZXM9e2ZhbHNlfVxuICAgICAgICAgICAgICAgICAgICBoaWRkZW49e2ZhbHNlfVxuICAgICAgICAgICAgICAgICAgICBzaG93UmVhY3Rpb25zPXt0cnVlfVxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJteF9Sb29tVmlld19tZXNzYWdlUGFuZWwgbXhfR3JvdXBMYXlvdXRcIlxuICAgICAgICAgICAgICAgICAgICBwZXJtYWxpbmtDcmVhdG9yPXt0aGlzLnByb3BzLnBlcm1hbGlua0NyZWF0b3J9XG4gICAgICAgICAgICAgICAgICAgIG1lbWJlcnNMb2FkZWQ9e3RydWV9XG4gICAgICAgICAgICAgICAgICAgIGVkaXRTdGF0ZT17dGhpcy5zdGF0ZS5lZGl0U3RhdGV9XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50SWQ9e3RoaXMucHJvcHMuaW5pdGlhbEV2ZW50Py5nZXRJZCgpfVxuICAgICAgICAgICAgICAgICAgICByZXNpemVOb3RpZmllcj17dGhpcy5wcm9wcy5yZXNpemVOb3RpZmllcn1cbiAgICAgICAgICAgICAgICAvPlxuXG4gICAgICAgICAgICAgICAgPE1lc3NhZ2VDb21wb3NlclxuICAgICAgICAgICAgICAgICAgICByb29tPXt0aGlzLnByb3BzLnJvb219XG4gICAgICAgICAgICAgICAgICAgIHJlc2l6ZU5vdGlmaWVyPXt0aGlzLnByb3BzLnJlc2l6ZU5vdGlmaWVyfVxuICAgICAgICAgICAgICAgICAgICByZXBseVRvRXZlbnQ9e3RoaXMuc3RhdGUucmVwbHlUb0V2ZW50fVxuICAgICAgICAgICAgICAgICAgICBwZXJtYWxpbmtDcmVhdG9yPXt0aGlzLnByb3BzLnBlcm1hbGlua0NyZWF0b3J9XG4gICAgICAgICAgICAgICAgICAgIGUyZVN0YXR1cz17dGhpcy5wcm9wcy5lMmVTdGF0dXN9XG4gICAgICAgICAgICAgICAgICAgIGNvbXBhY3Q9e3RydWV9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvQmFzZUNhcmQ+XG4gICAgICAgICk7XG4gICAgfVxufVxuIl19