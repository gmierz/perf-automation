"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Group = void 0;

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _AutoHideScrollbar = _interopRequireDefault(require("../../structures/AutoHideScrollbar"));

var _languageHandler = require("../../../languageHandler");

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _actions = require("../../../dispatcher/actions");

/*
Copyright 2020 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const Group = ({
  className,
  title,
  children
}) => {
  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)("mx_BaseCard_Group", className)
  }, /*#__PURE__*/_react.default.createElement("h1", null, title), children);
};

exports.Group = Group;

const BaseCard = ({
  closeLabel,
  onClose,
  className,
  header,
  footer,
  withoutScrollContainer,
  previousPhase,
  previousPhaseLabel,
  children,
  refireParams
}) => {
  let backButton;

  if (previousPhase) {
    const onBackClick = () => {
      _dispatcher.default.dispatch({
        action: _actions.Action.SetRightPanelPhase,
        phase: previousPhase,
        refireParams: refireParams
      });
    };

    const label = previousPhaseLabel ?? (0, _languageHandler._t)("Back");
    backButton = /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      className: "mx_BaseCard_back",
      onClick: onBackClick,
      title: label
    });
  }

  let closeButton;

  if (onClose) {
    closeButton = /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      className: "mx_BaseCard_close",
      onClick: onClose,
      title: closeLabel || (0, _languageHandler._t)("Close")
    });
  }

  if (!withoutScrollContainer) {
    children = /*#__PURE__*/_react.default.createElement(_AutoHideScrollbar.default, null, children);
  }

  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)("mx_BaseCard", className)
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_BaseCard_header"
  }, backButton, closeButton, header), children, footer && /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_BaseCard_footer"
  }, footer));
};

var _default = BaseCard;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL3JpZ2h0X3BhbmVsL0Jhc2VDYXJkLnRzeCJdLCJuYW1lcyI6WyJHcm91cCIsImNsYXNzTmFtZSIsInRpdGxlIiwiY2hpbGRyZW4iLCJCYXNlQ2FyZCIsImNsb3NlTGFiZWwiLCJvbkNsb3NlIiwiaGVhZGVyIiwiZm9vdGVyIiwid2l0aG91dFNjcm9sbENvbnRhaW5lciIsInByZXZpb3VzUGhhc2UiLCJwcmV2aW91c1BoYXNlTGFiZWwiLCJyZWZpcmVQYXJhbXMiLCJiYWNrQnV0dG9uIiwib25CYWNrQ2xpY2siLCJkZWZhdWx0RGlzcGF0Y2hlciIsImRpc3BhdGNoIiwiYWN0aW9uIiwiQWN0aW9uIiwiU2V0UmlnaHRQYW5lbFBoYXNlIiwicGhhc2UiLCJsYWJlbCIsImNsb3NlQnV0dG9uIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFnQkE7O0FBQ0E7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRUE7O0FBeEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQThCTyxNQUFNQSxLQUE0QixHQUFHLENBQUM7QUFBRUMsRUFBQUEsU0FBRjtBQUFhQyxFQUFBQSxLQUFiO0FBQW9CQyxFQUFBQTtBQUFwQixDQUFELEtBQW9DO0FBQzVFLHNCQUFPO0FBQUssSUFBQSxTQUFTLEVBQUUseUJBQVcsbUJBQVgsRUFBZ0NGLFNBQWhDO0FBQWhCLGtCQUNILHlDQUFNQyxLQUFOLENBREcsRUFFREMsUUFGQyxDQUFQO0FBSUgsQ0FMTTs7OztBQU9QLE1BQU1DLFFBQTBCLEdBQUcsQ0FBQztBQUNoQ0MsRUFBQUEsVUFEZ0M7QUFFaENDLEVBQUFBLE9BRmdDO0FBR2hDTCxFQUFBQSxTQUhnQztBQUloQ00sRUFBQUEsTUFKZ0M7QUFLaENDLEVBQUFBLE1BTGdDO0FBTWhDQyxFQUFBQSxzQkFOZ0M7QUFPaENDLEVBQUFBLGFBUGdDO0FBUWhDQyxFQUFBQSxrQkFSZ0M7QUFTaENSLEVBQUFBLFFBVGdDO0FBVWhDUyxFQUFBQTtBQVZnQyxDQUFELEtBVzdCO0FBQ0YsTUFBSUMsVUFBSjs7QUFDQSxNQUFJSCxhQUFKLEVBQW1CO0FBQ2YsVUFBTUksV0FBVyxHQUFHLE1BQU07QUFDdEJDLDBCQUFrQkMsUUFBbEIsQ0FBc0Q7QUFDbERDLFFBQUFBLE1BQU0sRUFBRUMsZ0JBQU9DLGtCQURtQztBQUVsREMsUUFBQUEsS0FBSyxFQUFFVixhQUYyQztBQUdsREUsUUFBQUEsWUFBWSxFQUFFQTtBQUhvQyxPQUF0RDtBQUtILEtBTkQ7O0FBT0EsVUFBTVMsS0FBSyxHQUFHVixrQkFBa0IsSUFBSSx5QkFBRyxNQUFILENBQXBDO0FBQ0FFLElBQUFBLFVBQVUsZ0JBQUcsNkJBQUMseUJBQUQ7QUFBa0IsTUFBQSxTQUFTLEVBQUMsa0JBQTVCO0FBQStDLE1BQUEsT0FBTyxFQUFFQyxXQUF4RDtBQUFxRSxNQUFBLEtBQUssRUFBRU87QUFBNUUsTUFBYjtBQUNIOztBQUVELE1BQUlDLFdBQUo7O0FBQ0EsTUFBSWhCLE9BQUosRUFBYTtBQUNUZ0IsSUFBQUEsV0FBVyxnQkFBRyw2QkFBQyx5QkFBRDtBQUNWLE1BQUEsU0FBUyxFQUFDLG1CQURBO0FBRVYsTUFBQSxPQUFPLEVBQUVoQixPQUZDO0FBR1YsTUFBQSxLQUFLLEVBQUVELFVBQVUsSUFBSSx5QkFBRyxPQUFIO0FBSFgsTUFBZDtBQUtIOztBQUVELE1BQUksQ0FBQ0ksc0JBQUwsRUFBNkI7QUFDekJOLElBQUFBLFFBQVEsZ0JBQUcsNkJBQUMsMEJBQUQsUUFDTEEsUUFESyxDQUFYO0FBR0g7O0FBRUQsc0JBQ0k7QUFBSyxJQUFBLFNBQVMsRUFBRSx5QkFBVyxhQUFYLEVBQTBCRixTQUExQjtBQUFoQixrQkFDSTtBQUFLLElBQUEsU0FBUyxFQUFDO0FBQWYsS0FDTVksVUFETixFQUVNUyxXQUZOLEVBR01mLE1BSE4sQ0FESixFQU1NSixRQU5OLEVBT01LLE1BQU0saUJBQUk7QUFBSyxJQUFBLFNBQVMsRUFBQztBQUFmLEtBQXNDQSxNQUF0QyxDQVBoQixDQURKO0FBV0gsQ0FuREQ7O2VBcURlSixRIiwic291cmNlc0NvbnRlbnQiOlsiLypcbkNvcHlyaWdodCAyMDIwIFRoZSBNYXRyaXgub3JnIEZvdW5kYXRpb24gQy5JLkMuXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuaW1wb3J0IFJlYWN0LCB7IFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuXG5pbXBvcnQgQXV0b0hpZGVTY3JvbGxiYXIgZnJvbSBcIi4uLy4uL3N0cnVjdHVyZXMvQXV0b0hpZGVTY3JvbGxiYXJcIjtcbmltcG9ydCB7IF90IH0gZnJvbSBcIi4uLy4uLy4uL2xhbmd1YWdlSGFuZGxlclwiO1xuaW1wb3J0IEFjY2Vzc2libGVCdXR0b24gZnJvbSBcIi4uL2VsZW1lbnRzL0FjY2Vzc2libGVCdXR0b25cIjtcbmltcG9ydCBkZWZhdWx0RGlzcGF0Y2hlciBmcm9tIFwiLi4vLi4vLi4vZGlzcGF0Y2hlci9kaXNwYXRjaGVyXCI7XG5pbXBvcnQgeyBTZXRSaWdodFBhbmVsUGhhc2VQYXlsb2FkIH0gZnJvbSBcIi4uLy4uLy4uL2Rpc3BhdGNoZXIvcGF5bG9hZHMvU2V0UmlnaHRQYW5lbFBoYXNlUGF5bG9hZFwiO1xuaW1wb3J0IHsgQWN0aW9uIH0gZnJvbSBcIi4uLy4uLy4uL2Rpc3BhdGNoZXIvYWN0aW9uc1wiO1xuaW1wb3J0IHsgUmlnaHRQYW5lbFBoYXNlcyB9IGZyb20gXCIuLi8uLi8uLi9zdG9yZXMvUmlnaHRQYW5lbFN0b3JlUGhhc2VzXCI7XG5cbmludGVyZmFjZSBJUHJvcHMge1xuICAgIGhlYWRlcj86IFJlYWN0Tm9kZTtcbiAgICBmb290ZXI/OiBSZWFjdE5vZGU7XG4gICAgY2xhc3NOYW1lPzogc3RyaW5nO1xuICAgIHdpdGhvdXRTY3JvbGxDb250YWluZXI/OiBib29sZWFuO1xuICAgIHByZXZpb3VzUGhhc2U/OiBSaWdodFBhbmVsUGhhc2VzO1xuICAgIHByZXZpb3VzUGhhc2VMYWJlbD86IHN0cmluZztcbiAgICBjbG9zZUxhYmVsPzogc3RyaW5nO1xuICAgIG9uQ2xvc2U/KCk6IHZvaWQ7XG4gICAgcmVmaXJlUGFyYW1zPztcbn1cblxuaW50ZXJmYWNlIElHcm91cFByb3BzIHtcbiAgICBjbGFzc05hbWU/OiBzdHJpbmc7XG4gICAgdGl0bGU6IHN0cmluZztcbn1cblxuZXhwb3J0IGNvbnN0IEdyb3VwOiBSZWFjdC5GQzxJR3JvdXBQcm9wcz4gPSAoeyBjbGFzc05hbWUsIHRpdGxlLCBjaGlsZHJlbiB9KSA9PiB7XG4gICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPXtjbGFzc05hbWVzKFwibXhfQmFzZUNhcmRfR3JvdXBcIiwgY2xhc3NOYW1lKX0+XG4gICAgICAgIDxoMT57IHRpdGxlIH08L2gxPlxuICAgICAgICB7IGNoaWxkcmVuIH1cbiAgICA8L2Rpdj47XG59O1xuXG5jb25zdCBCYXNlQ2FyZDogUmVhY3QuRkM8SVByb3BzPiA9ICh7XG4gICAgY2xvc2VMYWJlbCxcbiAgICBvbkNsb3NlLFxuICAgIGNsYXNzTmFtZSxcbiAgICBoZWFkZXIsXG4gICAgZm9vdGVyLFxuICAgIHdpdGhvdXRTY3JvbGxDb250YWluZXIsXG4gICAgcHJldmlvdXNQaGFzZSxcbiAgICBwcmV2aW91c1BoYXNlTGFiZWwsXG4gICAgY2hpbGRyZW4sXG4gICAgcmVmaXJlUGFyYW1zLFxufSkgPT4ge1xuICAgIGxldCBiYWNrQnV0dG9uO1xuICAgIGlmIChwcmV2aW91c1BoYXNlKSB7XG4gICAgICAgIGNvbnN0IG9uQmFja0NsaWNrID0gKCkgPT4ge1xuICAgICAgICAgICAgZGVmYXVsdERpc3BhdGNoZXIuZGlzcGF0Y2g8U2V0UmlnaHRQYW5lbFBoYXNlUGF5bG9hZD4oe1xuICAgICAgICAgICAgICAgIGFjdGlvbjogQWN0aW9uLlNldFJpZ2h0UGFuZWxQaGFzZSxcbiAgICAgICAgICAgICAgICBwaGFzZTogcHJldmlvdXNQaGFzZSxcbiAgICAgICAgICAgICAgICByZWZpcmVQYXJhbXM6IHJlZmlyZVBhcmFtcyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBsYWJlbCA9IHByZXZpb3VzUGhhc2VMYWJlbCA/PyBfdChcIkJhY2tcIik7XG4gICAgICAgIGJhY2tCdXR0b24gPSA8QWNjZXNzaWJsZUJ1dHRvbiBjbGFzc05hbWU9XCJteF9CYXNlQ2FyZF9iYWNrXCIgb25DbGljaz17b25CYWNrQ2xpY2t9IHRpdGxlPXtsYWJlbH0gLz47XG4gICAgfVxuXG4gICAgbGV0IGNsb3NlQnV0dG9uO1xuICAgIGlmIChvbkNsb3NlKSB7XG4gICAgICAgIGNsb3NlQnV0dG9uID0gPEFjY2Vzc2libGVCdXR0b25cbiAgICAgICAgICAgIGNsYXNzTmFtZT1cIm14X0Jhc2VDYXJkX2Nsb3NlXCJcbiAgICAgICAgICAgIG9uQ2xpY2s9e29uQ2xvc2V9XG4gICAgICAgICAgICB0aXRsZT17Y2xvc2VMYWJlbCB8fCBfdChcIkNsb3NlXCIpfVxuICAgICAgICAvPjtcbiAgICB9XG5cbiAgICBpZiAoIXdpdGhvdXRTY3JvbGxDb250YWluZXIpIHtcbiAgICAgICAgY2hpbGRyZW4gPSA8QXV0b0hpZGVTY3JvbGxiYXI+XG4gICAgICAgICAgICB7IGNoaWxkcmVuIH1cbiAgICAgICAgPC9BdXRvSGlkZVNjcm9sbGJhcj47XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzTmFtZXMoXCJteF9CYXNlQ2FyZFwiLCBjbGFzc05hbWUpfT5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibXhfQmFzZUNhcmRfaGVhZGVyXCI+XG4gICAgICAgICAgICAgICAgeyBiYWNrQnV0dG9uIH1cbiAgICAgICAgICAgICAgICB7IGNsb3NlQnV0dG9uIH1cbiAgICAgICAgICAgICAgICB7IGhlYWRlciB9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIHsgY2hpbGRyZW4gfVxuICAgICAgICAgICAgeyBmb290ZXIgJiYgPGRpdiBjbGFzc05hbWU9XCJteF9CYXNlQ2FyZF9mb290ZXJcIj57IGZvb3RlciB9PC9kaXY+IH1cbiAgICAgICAgPC9kaXY+XG4gICAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEJhc2VDYXJkO1xuIl19