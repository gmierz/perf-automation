"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _Analytics = _interopRequireDefault(require("../../../Analytics"));

var _AccessibleTooltipButton = _interopRequireDefault(require("../elements/AccessibleTooltipButton"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

const _excluded = ["isHighlighted", "onClick", "analytics", "name", "title"];

var _dec, _class;

let HeaderButton = ( // TODO: replace this, the composer buttons and the right panel buttons with a unified representation
_dec = (0, _replaceableComponent.replaceableComponent)("views.right_panel.HeaderButton"), _dec(_class = class HeaderButton extends _react.default.Component {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "onClick", () => {
      _Analytics.default.trackEvent(...this.props.analytics);

      this.props.onClick();
    });
  }

  render() {
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    const _this$props = this.props,
          {
      isHighlighted,
      onClick,
      analytics,
      name,
      title
    } = _this$props,
          props = (0, _objectWithoutProperties2.default)(_this$props, _excluded);
    const classes = (0, _classnames.default)({
      mx_RightPanel_headerButton: true,
      mx_RightPanel_headerButton_highlight: isHighlighted,
      [`mx_RightPanel_${name}`]: true
    });
    return /*#__PURE__*/_react.default.createElement(_AccessibleTooltipButton.default, (0, _extends2.default)({}, props, {
      "aria-selected": isHighlighted,
      role: "tab",
      title: title,
      className: classes,
      onClick: this.onClick
    }));
  }

}) || _class);
exports.default = HeaderButton;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL3JpZ2h0X3BhbmVsL0hlYWRlckJ1dHRvbi50c3giXSwibmFtZXMiOlsiSGVhZGVyQnV0dG9uIiwiUmVhY3QiLCJDb21wb25lbnQiLCJBbmFseXRpY3MiLCJ0cmFja0V2ZW50IiwicHJvcHMiLCJhbmFseXRpY3MiLCJvbkNsaWNrIiwicmVuZGVyIiwiaXNIaWdobGlnaHRlZCIsIm5hbWUiLCJ0aXRsZSIsImNsYXNzZXMiLCJteF9SaWdodFBhbmVsX2hlYWRlckJ1dHRvbiIsIm14X1JpZ2h0UGFuZWxfaGVhZGVyQnV0dG9uX2hpZ2hsaWdodCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBb0JBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOzs7Ozs7SUFrQnFCQSxZLEtBRnJCO09BQ0MsZ0RBQXFCLGdDQUFyQixDLGdCQUFELE1BQ3FCQSxZQURyQixTQUMwQ0MsZUFBTUMsU0FEaEQsQ0FDa0U7QUFBQTtBQUFBO0FBQUEsbURBQzVDLE1BQU07QUFDcEJDLHlCQUFVQyxVQUFWLENBQXFCLEdBQUcsS0FBS0MsS0FBTCxDQUFXQyxTQUFuQzs7QUFDQSxXQUFLRCxLQUFMLENBQVdFLE9BQVg7QUFDSCxLQUo2RDtBQUFBOztBQU12REMsRUFBQUEsTUFBTSxHQUFHO0FBQ1o7QUFDQSx3QkFBcUUsS0FBS0gsS0FBMUU7QUFBQSxVQUFNO0FBQUVJLE1BQUFBLGFBQUY7QUFBaUJGLE1BQUFBLE9BQWpCO0FBQTBCRCxNQUFBQSxTQUExQjtBQUFxQ0ksTUFBQUEsSUFBckM7QUFBMkNDLE1BQUFBO0FBQTNDLEtBQU47QUFBQSxVQUEyRE4sS0FBM0Q7QUFFQSxVQUFNTyxPQUFPLEdBQUcseUJBQVc7QUFDdkJDLE1BQUFBLDBCQUEwQixFQUFFLElBREw7QUFFdkJDLE1BQUFBLG9DQUFvQyxFQUFFTCxhQUZmO0FBR3ZCLE9BQUUsaUJBQWdCQyxJQUFLLEVBQXZCLEdBQTJCO0FBSEosS0FBWCxDQUFoQjtBQU1BLHdCQUFPLDZCQUFDLGdDQUFELDZCQUNDTCxLQUREO0FBRUgsdUJBQWVJLGFBRlo7QUFHSCxNQUFBLElBQUksRUFBQyxLQUhGO0FBSUgsTUFBQSxLQUFLLEVBQUVFLEtBSko7QUFLSCxNQUFBLFNBQVMsRUFBRUMsT0FMUjtBQU1ILE1BQUEsT0FBTyxFQUFFLEtBQUtMO0FBTlgsT0FBUDtBQVFIOztBQXhCNkQsQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5Db3B5cmlnaHQgMjAxNSwgMjAxNiBPcGVuTWFya2V0IEx0ZFxuQ29weXJpZ2h0IDIwMTcgVmVjdG9yIENyZWF0aW9ucyBMdGRcbkNvcHlyaWdodCAyMDE3IE5ldyBWZWN0b3IgTHRkXG5Db3B5cmlnaHQgMjAxOCBOZXcgVmVjdG9yIEx0ZFxuQ29weXJpZ2h0IDIwMTkgVGhlIE1hdHJpeC5vcmcgRm91bmRhdGlvbiBDLkkuQy5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgQW5hbHl0aWNzIGZyb20gJy4uLy4uLy4uL0FuYWx5dGljcyc7XG5pbXBvcnQgQWNjZXNzaWJsZVRvb2x0aXBCdXR0b24gZnJvbSBcIi4uL2VsZW1lbnRzL0FjY2Vzc2libGVUb29sdGlwQnV0dG9uXCI7XG5pbXBvcnQgeyByZXBsYWNlYWJsZUNvbXBvbmVudCB9IGZyb20gXCIuLi8uLi8uLi91dGlscy9yZXBsYWNlYWJsZUNvbXBvbmVudFwiO1xuXG5pbnRlcmZhY2UgSVByb3BzIHtcbiAgICAvLyBXaGV0aGVyIHRoaXMgYnV0dG9uIGlzIGhpZ2hsaWdodGVkXG4gICAgaXNIaWdobGlnaHRlZDogYm9vbGVhbjtcbiAgICAvLyBjbGljayBoYW5kbGVyXG4gICAgb25DbGljazogKCkgPT4gdm9pZDtcbiAgICAvLyBUaGUgcGFyYW1ldGVycyB0byB0cmFjayB0aGUgY2xpY2sgZXZlbnRcbiAgICBhbmFseXRpY3M6IFBhcmFtZXRlcnM8dHlwZW9mIEFuYWx5dGljcy50cmFja0V2ZW50PjtcblxuICAgIC8vIEJ1dHRvbiBuYW1lXG4gICAgbmFtZTogc3RyaW5nO1xuICAgIC8vIEJ1dHRvbiB0aXRsZVxuICAgIHRpdGxlOiBzdHJpbmc7XG59XG5cbi8vIFRPRE86IHJlcGxhY2UgdGhpcywgdGhlIGNvbXBvc2VyIGJ1dHRvbnMgYW5kIHRoZSByaWdodCBwYW5lbCBidXR0b25zIHdpdGggYSB1bmlmaWVkIHJlcHJlc2VudGF0aW9uXG5AcmVwbGFjZWFibGVDb21wb25lbnQoXCJ2aWV3cy5yaWdodF9wYW5lbC5IZWFkZXJCdXR0b25cIilcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEhlYWRlckJ1dHRvbiBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxJUHJvcHM+IHtcbiAgICBwcml2YXRlIG9uQ2xpY2sgPSAoKSA9PiB7XG4gICAgICAgIEFuYWx5dGljcy50cmFja0V2ZW50KC4uLnRoaXMucHJvcHMuYW5hbHl0aWNzKTtcbiAgICAgICAgdGhpcy5wcm9wcy5vbkNsaWNrKCk7XG4gICAgfTtcblxuICAgIHB1YmxpYyByZW5kZXIoKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcbiAgICAgICAgY29uc3QgeyBpc0hpZ2hsaWdodGVkLCBvbkNsaWNrLCBhbmFseXRpY3MsIG5hbWUsIHRpdGxlLCAuLi5wcm9wcyB9ID0gdGhpcy5wcm9wcztcblxuICAgICAgICBjb25zdCBjbGFzc2VzID0gY2xhc3NOYW1lcyh7XG4gICAgICAgICAgICBteF9SaWdodFBhbmVsX2hlYWRlckJ1dHRvbjogdHJ1ZSxcbiAgICAgICAgICAgIG14X1JpZ2h0UGFuZWxfaGVhZGVyQnV0dG9uX2hpZ2hsaWdodDogaXNIaWdobGlnaHRlZCxcbiAgICAgICAgICAgIFtgbXhfUmlnaHRQYW5lbF8ke25hbWV9YF06IHRydWUsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiA8QWNjZXNzaWJsZVRvb2x0aXBCdXR0b25cbiAgICAgICAgICAgIHsuLi5wcm9wc31cbiAgICAgICAgICAgIGFyaWEtc2VsZWN0ZWQ9e2lzSGlnaGxpZ2h0ZWR9XG4gICAgICAgICAgICByb2xlPVwidGFiXCJcbiAgICAgICAgICAgIHRpdGxlPXt0aXRsZX1cbiAgICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3Nlc31cbiAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMub25DbGlja31cbiAgICAgICAgLz47XG4gICAgfVxufVxuIl19