"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useWidgets = exports.onRoomMembersClick = exports.onRoomFilesClick = exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _MatrixClientContext = _interopRequireDefault(require("../../../contexts/MatrixClientContext"));

var _useIsEncrypted = require("../../../hooks/useIsEncrypted");

var _BaseCard = _interopRequireWildcard(require("./BaseCard"));

var _languageHandler = require("../../../languageHandler");

var _RoomAvatar = _interopRequireDefault(require("../avatars/RoomAvatar"));

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _actions = require("../../../dispatcher/actions");

var _RightPanelStorePhases = require("../../../stores/RightPanelStorePhases");

var _Modal = _interopRequireDefault(require("../../../Modal"));

var _ShareDialog = _interopRequireDefault(require("../dialogs/ShareDialog"));

var _useEventEmitter = require("../../../hooks/useEventEmitter");

var _WidgetUtils = _interopRequireDefault(require("../../../utils/WidgetUtils"));

var _IntegrationManagers = require("../../../integrations/IntegrationManagers");

var _SettingsStore = _interopRequireDefault(require("../../../settings/SettingsStore"));

var _TextWithTooltip = _interopRequireDefault(require("../elements/TextWithTooltip"));

var _WidgetAvatar = _interopRequireDefault(require("../avatars/WidgetAvatar"));

var _AccessibleTooltipButton = _interopRequireDefault(require("../elements/AccessibleTooltipButton"));

var _WidgetStore = _interopRequireDefault(require("../../../stores/WidgetStore"));

var _ShieldUtils = require("../../../utils/ShieldUtils");

var _RoomContext = _interopRequireDefault(require("../../../contexts/RoomContext"));

var _UIFeature = require("../../../settings/UIFeature");

var _ContextMenu = require("../../structures/ContextMenu");

var _WidgetContextMenu = _interopRequireDefault(require("../context_menus/WidgetContextMenu"));

var _useRoomMembers = require("../../../hooks/useRoomMembers");

var _WidgetLayoutStore = require("../../../stores/widgets/WidgetLayoutStore");

var _RoomName = _interopRequireDefault(require("../elements/RoomName"));

var _UIStore = _interopRequireDefault(require("../../../stores/UIStore"));

var _ExportDialog = _interopRequireDefault(require("../dialogs/ExportDialog"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
Copyright 2020 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const Button = ({
  children,
  className,
  onClick
}) => {
  return /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
    className: (0, _classnames.default)("mx_BaseCard_Button mx_RoomSummaryCard_Button", className),
    onClick: onClick
  }, children);
};

const useWidgets = room => {
  const [apps, setApps] = (0, _react.useState)(_WidgetStore.default.instance.getApps(room.roomId));
  const updateApps = (0, _react.useCallback)(() => {
    // Copy the array so that we always trigger a re-render, as some updates mutate the array of apps/settings
    setApps([..._WidgetStore.default.instance.getApps(room.roomId)]);
  }, [room]);
  (0, _react.useEffect)(updateApps, [room, updateApps]);
  (0, _useEventEmitter.useEventEmitter)(_WidgetStore.default.instance, room.roomId, updateApps);
  (0, _useEventEmitter.useEventEmitter)(_WidgetLayoutStore.WidgetLayoutStore.instance, _WidgetLayoutStore.WidgetLayoutStore.emissionForRoom(room), updateApps);
  return apps;
};

exports.useWidgets = useWidgets;

const AppRow = ({
  app,
  room
}) => {
  const name = _WidgetUtils.default.getWidgetName(app);

  const dataTitle = _WidgetUtils.default.getWidgetDataTitle(app);

  const subtitle = dataTitle && " - " + dataTitle;

  const onOpenWidgetClick = () => {
    _dispatcher.default.dispatch({
      action: _actions.Action.SetRightPanelPhase,
      phase: _RightPanelStorePhases.RightPanelPhases.Widget,
      refireParams: {
        widgetId: app.id
      }
    });
  };

  const isPinned = _WidgetLayoutStore.WidgetLayoutStore.instance.isInContainer(room, app, _WidgetLayoutStore.Container.Top);

  const togglePin = isPinned ? () => {
    _WidgetLayoutStore.WidgetLayoutStore.instance.moveToContainer(room, app, _WidgetLayoutStore.Container.Right);
  } : () => {
    _WidgetLayoutStore.WidgetLayoutStore.instance.moveToContainer(room, app, _WidgetLayoutStore.Container.Top);
  };
  const [menuDisplayed, handle, openMenu, closeMenu] = (0, _ContextMenu.useContextMenu)();
  let contextMenu;

  if (menuDisplayed) {
    const rect = handle.current.getBoundingClientRect();
    contextMenu = /*#__PURE__*/_react.default.createElement(_WidgetContextMenu.default, {
      chevronFace: _ContextMenu.ChevronFace.None,
      right: _UIStore.default.instance.windowWidth - rect.right,
      bottom: _UIStore.default.instance.windowHeight - rect.top,
      onFinished: closeMenu,
      app: app
    });
  }

  const cannotPin = !isPinned && !_WidgetLayoutStore.WidgetLayoutStore.instance.canAddToContainer(room, _WidgetLayoutStore.Container.Top);
  let pinTitle;

  if (cannotPin) {
    pinTitle = (0, _languageHandler._t)("You can only pin up to %(count)s widgets", {
      count: _WidgetLayoutStore.MAX_PINNED
    });
  } else {
    pinTitle = isPinned ? (0, _languageHandler._t)("Unpin") : (0, _languageHandler._t)("Pin");
  }

  const classes = (0, _classnames.default)("mx_BaseCard_Button mx_RoomSummaryCard_Button", {
    mx_RoomSummaryCard_Button_pinned: isPinned
  });

  const isMaximised = _WidgetLayoutStore.WidgetLayoutStore.instance.isInContainer(room, app, _WidgetLayoutStore.Container.Center);

  const toggleMaximised = isMaximised ? () => {
    _WidgetLayoutStore.WidgetLayoutStore.instance.moveToContainer(room, app, _WidgetLayoutStore.Container.Right);
  } : () => {
    _WidgetLayoutStore.WidgetLayoutStore.instance.moveToContainer(room, app, _WidgetLayoutStore.Container.Center);
  };
  const maximiseTitle = isMaximised ? (0, _languageHandler._t)("Close") : (0, _languageHandler._t)("Maximise widget");
  let openTitle = "";

  if (isPinned) {
    openTitle = (0, _languageHandler._t)("Unpin this widget to view it in this panel");
  } else if (isMaximised) {
    openTitle = (0, _languageHandler._t)("Close this widget to view it in this panel");
  }

  return /*#__PURE__*/_react.default.createElement("div", {
    className: classes,
    ref: handle
  }, /*#__PURE__*/_react.default.createElement(_AccessibleTooltipButton.default, {
    className: "mx_RoomSummaryCard_icon_app",
    onClick: onOpenWidgetClick // only show a tooltip if the widget is pinned
    ,
    title: openTitle,
    forceHide: !(isPinned || isMaximised),
    disabled: isPinned || isMaximised,
    yOffset: -48
  }, /*#__PURE__*/_react.default.createElement(_WidgetAvatar.default, {
    app: app
  }), /*#__PURE__*/_react.default.createElement("span", null, name), subtitle), /*#__PURE__*/_react.default.createElement(_ContextMenu.ContextMenuTooltipButton, {
    className: (0, _classnames.default)({
      "mx_RoomSummaryCard_app_options": true,
      "mx_RoomSummaryCard_maximised_widget": _SettingsStore.default.getValue("feature_maximised_widgets")
    }),
    isExpanded: menuDisplayed,
    onClick: openMenu,
    title: (0, _languageHandler._t)("Options"),
    yOffset: -24
  }), /*#__PURE__*/_react.default.createElement(_AccessibleTooltipButton.default, {
    className: "mx_RoomSummaryCard_app_pinToggle",
    onClick: togglePin,
    title: pinTitle,
    disabled: cannotPin,
    yOffset: -24
  }), _SettingsStore.default.getValue("feature_maximised_widgets") && /*#__PURE__*/_react.default.createElement(_AccessibleTooltipButton.default, {
    className: isMaximised ? "mx_RoomSummaryCard_app_minimise" : "mx_RoomSummaryCard_app_maximise",
    onClick: toggleMaximised,
    title: maximiseTitle,
    yOffset: -24
  }), contextMenu);
};

const AppsSection = ({
  room
}) => {
  const apps = useWidgets(room);

  const onManageIntegrations = () => {
    const managers = _IntegrationManagers.IntegrationManagers.sharedInstance();

    if (!managers.hasManager()) {
      managers.openNoManagerDialog();
    } else {
      if (_SettingsStore.default.getValue("feature_many_integration_managers")) {
        managers.openAll(room);
      } else {
        managers.getPrimaryManager().open(room);
      }
    }
  };

  let copyLayoutBtn = null;

  if (apps.length > 0 && _WidgetLayoutStore.WidgetLayoutStore.instance.canCopyLayoutToRoom(room)) {
    copyLayoutBtn = /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      kind: "link",
      onClick: () => _WidgetLayoutStore.WidgetLayoutStore.instance.copyLayoutToRoom(room)
    }, (0, _languageHandler._t)("Set my room layout for everyone"));
  }

  return /*#__PURE__*/_react.default.createElement(_BaseCard.Group, {
    className: "mx_RoomSummaryCard_appsGroup",
    title: (0, _languageHandler._t)("Widgets")
  }, apps.map(app => /*#__PURE__*/_react.default.createElement(AppRow, {
    key: app.id,
    app: app,
    room: room
  })), copyLayoutBtn, /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
    kind: "link",
    onClick: onManageIntegrations
  }, apps.length > 0 ? (0, _languageHandler._t)("Edit widgets, bridges & bots") : (0, _languageHandler._t)("Add widgets, bridges & bots")));
};

const onRoomMembersClick = (allowClose = true) => {
  _dispatcher.default.dispatch({
    action: _actions.Action.SetRightPanelPhase,
    phase: _RightPanelStorePhases.RightPanelPhases.RoomMemberList,
    allowClose
  });
};

exports.onRoomMembersClick = onRoomMembersClick;

const onRoomFilesClick = (allowClose = true) => {
  _dispatcher.default.dispatch({
    action: _actions.Action.SetRightPanelPhase,
    phase: _RightPanelStorePhases.RightPanelPhases.FilePanel,
    allowClose
  });
};

exports.onRoomFilesClick = onRoomFilesClick;

const onRoomSettingsClick = () => {
  _dispatcher.default.dispatch({
    action: "open_room_settings"
  });
};

const RoomSummaryCard = ({
  room,
  onClose
}) => {
  const cli = (0, _react.useContext)(_MatrixClientContext.default);

  const onShareRoomClick = () => {
    _Modal.default.createTrackedDialog('share room dialog', '', _ShareDialog.default, {
      target: room
    });
  };

  const onRoomExportClick = async () => {
    _Modal.default.createTrackedDialog('export room dialog', '', _ExportDialog.default, {
      room
    });
  };

  const isRoomEncrypted = (0, _useIsEncrypted.useIsEncrypted)(cli, room);
  const roomContext = (0, _react.useContext)(_RoomContext.default);
  const e2eStatus = roomContext.e2eStatus;
  const alias = room.getCanonicalAlias() || room.getAltAliases()[0] || "";

  const header = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_RoomSummaryCard_avatar",
    role: "presentation"
  }, /*#__PURE__*/_react.default.createElement(_RoomAvatar.default, {
    room: room,
    height: 54,
    width: 54,
    viewAvatarOnClick: true
  }), /*#__PURE__*/_react.default.createElement(_TextWithTooltip.default, {
    tooltip: isRoomEncrypted ? (0, _languageHandler._t)("Encrypted") : (0, _languageHandler._t)("Not encrypted"),
    class: (0, _classnames.default)("mx_RoomSummaryCard_e2ee", {
      mx_RoomSummaryCard_e2ee_normal: isRoomEncrypted,
      mx_RoomSummaryCard_e2ee_warning: isRoomEncrypted && e2eStatus === _ShieldUtils.E2EStatus.Warning,
      mx_RoomSummaryCard_e2ee_verified: isRoomEncrypted && e2eStatus === _ShieldUtils.E2EStatus.Verified
    })
  })), /*#__PURE__*/_react.default.createElement(_RoomName.default, {
    room: room
  }, name => /*#__PURE__*/_react.default.createElement("h2", {
    title: name
  }, name)), /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_RoomSummaryCard_alias",
    title: alias
  }, alias));

  const memberCount = (0, _useRoomMembers.useRoomMemberCount)(room);
  return /*#__PURE__*/_react.default.createElement(_BaseCard.default, {
    header: header,
    className: "mx_RoomSummaryCard",
    onClose: onClose
  }, /*#__PURE__*/_react.default.createElement(_BaseCard.Group, {
    title: (0, _languageHandler._t)("About"),
    className: "mx_RoomSummaryCard_aboutGroup"
  }, /*#__PURE__*/_react.default.createElement(Button, {
    className: "mx_RoomSummaryCard_icon_people",
    onClick: onRoomMembersClick
  }, (0, _languageHandler._t)("People"), /*#__PURE__*/_react.default.createElement("span", {
    className: "mx_BaseCard_Button_sublabel"
  }, memberCount)), /*#__PURE__*/_react.default.createElement(Button, {
    className: "mx_RoomSummaryCard_icon_files",
    onClick: onRoomFilesClick
  }, (0, _languageHandler._t)("Files")), /*#__PURE__*/_react.default.createElement(Button, {
    className: "mx_RoomSummaryCard_icon_export",
    onClick: onRoomExportClick
  }, (0, _languageHandler._t)("Export chat")), /*#__PURE__*/_react.default.createElement(Button, {
    className: "mx_RoomSummaryCard_icon_share",
    onClick: onShareRoomClick
  }, (0, _languageHandler._t)("Share room")), /*#__PURE__*/_react.default.createElement(Button, {
    className: "mx_RoomSummaryCard_icon_settings",
    onClick: onRoomSettingsClick
  }, (0, _languageHandler._t)("Room settings"))), _SettingsStore.default.getValue(_UIFeature.UIFeature.Widgets) && /*#__PURE__*/_react.default.createElement(AppsSection, {
    room: room
  }));
};

var _default = RoomSummaryCard;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,