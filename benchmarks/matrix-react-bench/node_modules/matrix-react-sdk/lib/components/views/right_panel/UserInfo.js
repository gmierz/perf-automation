"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useRoomPowerLevels = exports.useDevices = exports.getE2EStatus = exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _roomMember = require("matrix-js-sdk/src/models/room-member");

var _eventTimeline = require("matrix-js-sdk/src/models/event-timeline");

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _Modal = _interopRequireDefault(require("../../../Modal"));

var _languageHandler = require("../../../languageHandler");

var _createRoom = _interopRequireWildcard(require("../../../createRoom"));

var _DMRoomMap = _interopRequireDefault(require("../../../utils/DMRoomMap"));

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

var _SdkConfig = _interopRequireDefault(require("../../../SdkConfig"));

var _SettingsStore = _interopRequireDefault(require("../../../settings/SettingsStore"));

var _RoomViewStore = _interopRequireDefault(require("../../../stores/RoomViewStore"));

var _MultiInviter = _interopRequireDefault(require("../../../utils/MultiInviter"));

var _GroupStore = _interopRequireDefault(require("../../../stores/GroupStore"));

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _E2EIcon = _interopRequireDefault(require("../rooms/E2EIcon"));

var _useEventEmitter = require("../../../hooks/useEventEmitter");

var _Roles = require("../../../Roles");

var _MatrixClientContext = _interopRequireDefault(require("../../../contexts/MatrixClientContext"));

var _RightPanelStorePhases = require("../../../stores/RightPanelStorePhases");

var _EncryptionPanel = _interopRequireDefault(require("./EncryptionPanel"));

var _useAsyncMemo = require("../../../hooks/useAsyncMemo");

var _verification = require("../../../verification");

var _actions = require("../../../dispatcher/actions");

var _UserSettingsDialog = require("../dialogs/UserSettingsDialog");

var _useIsEncrypted = require("../../../hooks/useIsEncrypted");

var _BaseCard = _interopRequireDefault(require("./BaseCard"));

var _ShieldUtils = require("../../../utils/ShieldUtils");

var _ImageView = _interopRequireDefault(require("../elements/ImageView"));

var _Spinner = _interopRequireDefault(require("../elements/Spinner"));

var _PowerSelector = _interopRequireDefault(require("../elements/PowerSelector"));

var _MemberAvatar = _interopRequireDefault(require("../avatars/MemberAvatar"));

var _PresenceLabel = _interopRequireDefault(require("../rooms/PresenceLabel"));

var _ShareDialog = _interopRequireDefault(require("../dialogs/ShareDialog"));

var _ErrorDialog = _interopRequireDefault(require("../dialogs/ErrorDialog"));

var _QuestionDialog = _interopRequireDefault(require("../dialogs/QuestionDialog"));

var _ConfirmUserActionDialog = _interopRequireDefault(require("../dialogs/ConfirmUserActionDialog"));

var _InfoDialog = _interopRequireDefault(require("../dialogs/InfoDialog"));

var _event = require("matrix-js-sdk/src/@types/event");

var _RoomAvatar = _interopRequireDefault(require("../avatars/RoomAvatar"));

var _RoomName = _interopRequireDefault(require("../elements/RoomName"));

var _Media = require("../../../customisations/Media");

var _UIStore = _interopRequireDefault(require("../../../stores/UIStore"));

var _SpaceStore = _interopRequireDefault(require("../../../stores/spaces/SpaceStore"));

var _ConfirmSpaceUserActionDialog = _interopRequireDefault(require("../dialogs/ConfirmSpaceUserActionDialog"));

var _space = require("../../../utils/space");

var _logger = require("matrix-js-sdk/src/logger");

var _UIComponents = require("../../../customisations/helpers/UIComponents");

var _UIFeature = require("../../../settings/UIFeature");

var _RoomContext = require("../../../contexts/RoomContext");

const _excluded = ["user", "groupId", "room", "onClose", "phase"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const disambiguateDevices = devices => {
  const names = Object.create(null);

  for (let i = 0; i < devices.length; i++) {
    const name = devices[i].getDisplayName();
    const indexList = names[name] || [];
    indexList.push(i);
    names[name] = indexList;
  }

  for (const name in names) {
    if (names[name].length > 1) {
      names[name].forEach(j => {
        devices[j].ambiguous = true;
      });
    }
  }
};

const getE2EStatus = (cli, userId, devices) => {
  const isMe = userId === cli.getUserId();
  const userTrust = cli.checkUserTrust(userId);

  if (!userTrust.isCrossSigningVerified()) {
    return userTrust.wasCrossSigningVerified() ? _ShieldUtils.E2EStatus.Warning : _ShieldUtils.E2EStatus.Normal;
  }

  const anyDeviceUnverified = devices.some(device => {
    const {
      deviceId
    } = device; // For your own devices, we use the stricter check of cross-signing
    // verification to encourage everyone to trust their own devices via
    // cross-signing so that other users can then safely trust you.
    // For other people's devices, the more general verified check that
    // includes locally verified devices can be used.

    const deviceTrust = cli.checkDeviceTrust(userId, deviceId);
    return isMe ? !deviceTrust.isCrossSigningVerified() : !deviceTrust.isVerified();
  });
  return anyDeviceUnverified ? _ShieldUtils.E2EStatus.Warning : _ShieldUtils.E2EStatus.Verified;
};

exports.getE2EStatus = getE2EStatus;

async function openDMForUser(matrixClient, userId) {
  const lastActiveRoom = (0, _createRoom.findDMForUser)(matrixClient, userId);

  if (lastActiveRoom) {
    _dispatcher.default.dispatch({
      action: _actions.Action.ViewRoom,
      room_id: lastActiveRoom.roomId
    });

    return;
  }

  const createRoomOptions = {
    dmUserId: userId,
    encryption: undefined
  };

  if ((0, _createRoom.privateShouldBeEncrypted)()) {
    // Check whether all users have uploaded device keys before.
    // If so, enable encryption in the new room.
    const usersToDevicesMap = await matrixClient.downloadKeys([userId]);
    const allHaveDeviceKeys = Object.values(usersToDevicesMap).every(devices => {
      // `devices` is an object of the form { deviceId: deviceInfo, ... }.
      return Object.keys(devices).length > 0;
    });

    if (allHaveDeviceKeys) {
      createRoomOptions.encryption = true;
    }
  }

  return (0, _createRoom.default)(createRoomOptions);
}

function useHasCrossSigningKeys(cli, member, canVerify, setUpdating) {
  return (0, _useAsyncMemo.useAsyncMemo)(async () => {
    if (!canVerify) {
      return undefined;
    }

    setUpdating(true);

    try {
      await cli.downloadKeys([member.userId]);
      const xsi = cli.getStoredCrossSigningForUser(member.userId);
      const key = xsi && xsi.getId();
      return !!key;
    } finally {
      setUpdating(false);
    }
  }, [cli, member, canVerify], undefined);
}

function DeviceItem({
  userId,
  device
}) {
  var _device$getDisplayNam;

  const cli = (0, _react.useContext)(_MatrixClientContext.default);
  const isMe = userId === cli.getUserId();
  const deviceTrust = cli.checkDeviceTrust(userId, device.deviceId);
  const userTrust = cli.checkUserTrust(userId); // For your own devices, we use the stricter check of cross-signing
  // verification to encourage everyone to trust their own devices via
  // cross-signing so that other users can then safely trust you.
  // For other people's devices, the more general verified check that
  // includes locally verified devices can be used.

  const isVerified = isMe ? deviceTrust.isCrossSigningVerified() : deviceTrust.isVerified();
  const classes = (0, _classnames.default)("mx_UserInfo_device", {
    mx_UserInfo_device_verified: isVerified,
    mx_UserInfo_device_unverified: !isVerified
  });
  const iconClasses = (0, _classnames.default)("mx_E2EIcon", {
    mx_E2EIcon_normal: !userTrust.isVerified(),
    mx_E2EIcon_verified: isVerified,
    mx_E2EIcon_warning: userTrust.isVerified() && !isVerified
  });

  const onDeviceClick = () => {
    (0, _verification.verifyDevice)(cli.getUser(userId), device);
  };

  let deviceName;

  if (!((_device$getDisplayNam = device.getDisplayName()) !== null && _device$getDisplayNam !== void 0 && _device$getDisplayNam.trim())) {
    deviceName = device.deviceId;
  } else {
    deviceName = device.ambiguous ? device.getDisplayName() + " (" + device.deviceId + ")" : device.getDisplayName();
  }

  let trustedLabel = null;
  if (userTrust.isVerified()) trustedLabel = isVerified ? (0, _languageHandler._t)("Trusted") : (0, _languageHandler._t)("Not trusted");

  if (isVerified) {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: classes,
      title: device.deviceId
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: iconClasses
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_UserInfo_device_name"
    }, deviceName), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_UserInfo_device_trusted"
    }, trustedLabel));
  } else {
    return /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      className: classes,
      title: device.deviceId,
      onClick: onDeviceClick
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: iconClasses
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_UserInfo_device_name"
    }, deviceName), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_UserInfo_device_trusted"
    }, trustedLabel));
  }
}

function DevicesSection({
  devices,
  userId,
  loading
}) {
  const cli = (0, _react.useContext)(_MatrixClientContext.default);
  const userTrust = cli.checkUserTrust(userId);
  const [isExpanded, setExpanded] = (0, _react.useState)(false);

  if (loading) {
    // still loading
    return /*#__PURE__*/_react.default.createElement(_Spinner.default, null);
  }

  if (devices === null) {
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, (0, _languageHandler._t)("Unable to load session list"));
  }

  const isMe = userId === cli.getUserId();
  const deviceTrusts = devices.map(d => cli.checkDeviceTrust(userId, d.deviceId));
  let expandSectionDevices = [];
  const unverifiedDevices = [];
  let expandCountCaption;
  let expandHideCaption;
  let expandIconClasses = "mx_E2EIcon";

  if (userTrust.isVerified()) {
    for (let i = 0; i < devices.length; ++i) {
      const device = devices[i];
      const deviceTrust = deviceTrusts[i]; // For your own devices, we use the stricter check of cross-signing
      // verification to encourage everyone to trust their own devices via
      // cross-signing so that other users can then safely trust you.
      // For other people's devices, the more general verified check that
      // includes locally verified devices can be used.

      const isVerified = isMe ? deviceTrust.isCrossSigningVerified() : deviceTrust.isVerified();

      if (isVerified) {
        expandSectionDevices.push(device);
      } else {
        unverifiedDevices.push(device);
      }
    }

    expandCountCaption = (0, _languageHandler._t)("%(count)s verified sessions", {
      count: expandSectionDevices.length
    });
    expandHideCaption = (0, _languageHandler._t)("Hide verified sessions");
    expandIconClasses += " mx_E2EIcon_verified";
  } else {
    expandSectionDevices = devices;
    expandCountCaption = (0, _languageHandler._t)("%(count)s sessions", {
      count: devices.length
    });
    expandHideCaption = (0, _languageHandler._t)("Hide sessions");
    expandIconClasses += " mx_E2EIcon_normal";
  }

  let expandButton;

  if (expandSectionDevices.length) {
    if (isExpanded) {
      expandButton = /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        className: "mx_UserInfo_expand mx_linkButton",
        onClick: () => setExpanded(false)
      }, /*#__PURE__*/_react.default.createElement("div", null, expandHideCaption));
    } else {
      expandButton = /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        className: "mx_UserInfo_expand mx_linkButton",
        onClick: () => setExpanded(true)
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: expandIconClasses
      }), /*#__PURE__*/_react.default.createElement("div", null, expandCountCaption));
    }
  }

  let deviceList = unverifiedDevices.map((device, i) => {
    return /*#__PURE__*/_react.default.createElement(DeviceItem, {
      key: i,
      userId: userId,
      device: device
    });
  });

  if (isExpanded) {
    const keyStart = unverifiedDevices.length;
    deviceList = deviceList.concat(expandSectionDevices.map((device, i) => {
      return /*#__PURE__*/_react.default.createElement(DeviceItem, {
        key: i + keyStart,
        userId: userId,
        device: device
      });
    }));
  }

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_UserInfo_devices"
  }, /*#__PURE__*/_react.default.createElement("div", null, deviceList), /*#__PURE__*/_react.default.createElement("div", null, expandButton));
}

const UserOptionsSection = ({
  member,
  isIgnored,
  canInvite,
  isSpace
}) => {
  const cli = (0, _react.useContext)(_MatrixClientContext.default);
  let ignoreButton = null;
  let insertPillButton = null;
  let inviteUserButton = null;
  let readReceiptButton = null;
  const isMe = member.userId === cli.getUserId();

  const onShareUserClick = () => {
    _Modal.default.createTrackedDialog('share room member dialog', '', _ShareDialog.default, {
      target: member
    });
  }; // Only allow the user to ignore the user if its not ourselves
  // same goes for jumping to read receipt


  if (!isMe) {
    const onIgnoreToggle = () => {
      const ignoredUsers = cli.getIgnoredUsers();

      if (isIgnored) {
        const index = ignoredUsers.indexOf(member.userId);
        if (index !== -1) ignoredUsers.splice(index, 1);
      } else {
        ignoredUsers.push(member.userId);
      }

      cli.setIgnoredUsers(ignoredUsers);
    };

    ignoreButton = /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      onClick: onIgnoreToggle,
      className: (0, _classnames.default)("mx_UserInfo_field", {
        mx_UserInfo_destructive: !isIgnored
      })
    }, isIgnored ? (0, _languageHandler._t)("Unignore") : (0, _languageHandler._t)("Ignore"));

    if (member.roomId && !isSpace) {
      const onReadReceiptButton = function () {
        const room = cli.getRoom(member.roomId);

        _dispatcher.default.dispatch({
          action: _actions.Action.ViewRoom,
          highlighted: true,
          event_id: room.getEventReadUpTo(member.userId),
          room_id: member.roomId
        });
      };

      const onInsertPillButton = function () {
        _dispatcher.default.dispatch({
          action: _actions.Action.ComposerInsert,
          userId: member.userId,
          timelineRenderingType: _RoomContext.TimelineRenderingType.Room
        });
      };

      const room = cli.getRoom(member.roomId);

      if (room !== null && room !== void 0 && room.getEventReadUpTo(member.userId)) {
        readReceiptButton = /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
          onClick: onReadReceiptButton,
          className: "mx_UserInfo_field"
        }, (0, _languageHandler._t)('Jump to read receipt'));
      }

      insertPillButton = /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        onClick: onInsertPillButton,
        className: "mx_UserInfo_field"
      }, (0, _languageHandler._t)('Mention'));
    }

    if (canInvite && ((member === null || member === void 0 ? void 0 : member.membership) ?? 'leave') === 'leave' && (0, _UIComponents.shouldShowComponent)(_UIFeature.UIComponent.InviteUsers)) {
      const roomId = member && member.roomId ? member.roomId : _RoomViewStore.default.getRoomId();

      const onInviteUserButton = async () => {
        try {
          // We use a MultiInviter to re-use the invite logic, even though
          // we're only inviting one user.
          const inviter = new _MultiInviter.default(roomId);
          await inviter.invite([member.userId]).then(() => {
            if (inviter.getCompletionState(member.userId) !== "invited") {
              throw new Error(inviter.getErrorText(member.userId));
            }
          });
        } catch (err) {
          _Modal.default.createTrackedDialog('Failed to invite', '', _ErrorDialog.default, {
            title: (0, _languageHandler._t)('Failed to invite'),
            description: err && err.message ? err.message : (0, _languageHandler._t)("Operation failed")
          });
        }
      };

      inviteUserButton = /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        onClick: onInviteUserButton,
        className: "mx_UserInfo_field"
      }, (0, _languageHandler._t)('Invite'));
    }
  }

  const shareUserButton = /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
    onClick: onShareUserClick,
    className: "mx_UserInfo_field"
  }, (0, _languageHandler._t)('Share Link to User'));

  let directMessageButton;

  if (!isMe) {
    directMessageButton = /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      onClick: () => {
        openDMForUser(cli, member.userId);
      },
      className: "mx_UserInfo_field"
    }, (0, _languageHandler._t)("Message"));
  }

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_UserInfo_container"
  }, /*#__PURE__*/_react.default.createElement("h3", null, (0, _languageHandler._t)("Options")), /*#__PURE__*/_react.default.createElement("div", null, directMessageButton, readReceiptButton, shareUserButton, insertPillButton, inviteUserButton, ignoreButton));
};

const warnSelfDemote = async isSpace => {
  const {
    finished
  } = _Modal.default.createTrackedDialog('Demoting Self', '', _QuestionDialog.default, {
    title: (0, _languageHandler._t)("Demote yourself?"),
    description: /*#__PURE__*/_react.default.createElement("div", null, isSpace ? (0, _languageHandler._t)("You will not be able to undo this change as you are demoting yourself, " + "if you are the last privileged user in the space it will be impossible " + "to regain privileges.") : (0, _languageHandler._t)("You will not be able to undo this change as you are demoting yourself, " + "if you are the last privileged user in the room it will be impossible " + "to regain privileges.")),
    button: (0, _languageHandler._t)("Demote")
  });

  const [confirmed] = await finished;
  return confirmed;
};

const GenericAdminToolsContainer = ({
  children
}) => {
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_UserInfo_container"
  }, /*#__PURE__*/_react.default.createElement("h3", null, (0, _languageHandler._t)("Admin Tools")), /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_UserInfo_buttons"
  }, children));
};

const isMuted = (member, powerLevelContent) => {
  if (!powerLevelContent || !member) return false;
  const levelToSend = (powerLevelContent.events ? powerLevelContent.events["m.room.message"] : null) || powerLevelContent.events_default;
  return member.powerLevel < levelToSend;
};

const getPowerLevels = room => {
  var _room$currentState, _room$currentState$ge;

  return (room === null || room === void 0 ? void 0 : (_room$currentState = room.currentState) === null || _room$currentState === void 0 ? void 0 : (_room$currentState$ge = _room$currentState.getStateEvents(_event.EventType.RoomPowerLevels, "")) === null || _room$currentState$ge === void 0 ? void 0 : _room$currentState$ge.getContent()) || {};
};

const useRoomPowerLevels = (cli, room) => {
  const [powerLevels, setPowerLevels] = (0, _react.useState)(getPowerLevels(room));
  const update = (0, _react.useCallback)(ev => {
    if (!room) return;
    if (ev && ev.getType() !== _event.EventType.RoomPowerLevels) return;
    setPowerLevels(getPowerLevels(room));
  }, [room]);
  (0, _useEventEmitter.useEventEmitter)(cli, "RoomState.events", update);
  (0, _react.useEffect)(() => {
    update();
    return () => {
      setPowerLevels({});
    };
  }, [update]);
  return powerLevels;
};

exports.useRoomPowerLevels = useRoomPowerLevels;

const RoomKickButton = ({
  room,
  member,
  startUpdating,
  stopUpdating
}) => {
  const cli = (0, _react.useContext)(_MatrixClientContext.default); // check if user can be kicked/disinvited

  if (member.membership !== "invite" && member.membership !== "join") return null;

  const onKick = async () => {
    const {
      finished
    } = _Modal.default.createTrackedDialog('Confirm User Action Dialog', 'onKick', room.isSpaceRoom() ? _ConfirmSpaceUserActionDialog.default : _ConfirmUserActionDialog.default, {
      member,
      action: member.membership === "invite" ? (0, _languageHandler._t)("Disinvite") : (0, _languageHandler._t)("Kick"),
      title: member.membership === "invite" ? (0, _languageHandler._t)("Disinvite from %(roomName)s", {
        roomName: room.name
      }) : (0, _languageHandler._t)("Kick from %(roomName)s", {
        roomName: room.name
      }),
      askReason: member.membership === "join",
      danger: true,
      // space-specific props
      space: room,
      spaceChildFilter: child => {
        // Return true if the target member is not banned and we have sufficient PL to ban them
        const myMember = child.getMember(cli.credentials.userId);
        const theirMember = child.getMember(member.userId);
        return myMember && theirMember && theirMember.membership === member.membership && myMember.powerLevel > theirMember.powerLevel && child.currentState.hasSufficientPowerLevelFor("kick", myMember.powerLevel);
      },
      allLabel: (0, _languageHandler._t)("Kick them from everything I'm able to"),
      specificLabel: (0, _languageHandler._t)("Kick them from specific things I'm able to"),
      warningMessage: (0, _languageHandler._t)("They'll still be able to access whatever you're not an admin of.")
    }, room.isSpaceRoom() ? "mx_ConfirmSpaceUserActionDialog_wrapper" : undefined);

    const [proceed, reason, rooms = []] = await finished;
    if (!proceed) return;
    startUpdating();
    (0, _space.bulkSpaceBehaviour)(room, rooms, room => cli.kick(room.roomId, member.userId, reason || undefined)).then(() => {
      // NO-OP; rely on the m.room.member event coming down else we could
      // get out of sync if we force setState here!
      _logger.logger.log("Kick success");
    }, function (err) {
      _logger.logger.error("Kick error: " + err);

      _Modal.default.createTrackedDialog('Failed to kick', '', _ErrorDialog.default, {
        title: (0, _languageHandler._t)("Failed to kick"),
        description: err && err.message ? err.message : "Operation failed"
      });
    }).finally(() => {
      stopUpdating();
    });
  };

  const kickLabel = member.membership === "invite" ? (0, _languageHandler._t)("Disinvite") : (0, _languageHandler._t)("Kick");
  return /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
    className: "mx_UserInfo_field mx_UserInfo_destructive",
    onClick: onKick
  }, kickLabel);
};

const RedactMessagesButton = ({
  member
}) => {
  const cli = (0, _react.useContext)(_MatrixClientContext.default);

  const onRedactAllMessages = async () => {
    const {
      roomId,
      userId
    } = member;
    const room = cli.getRoom(roomId);

    if (!room) {
      return;
    }

    let timeline = room.getLiveTimeline();
    let eventsToRedact = [];

    while (timeline) {
      eventsToRedact = timeline.getEvents().reduce((events, event) => {
        if (event.getSender() === userId && !event.isRedacted() && !event.isRedaction() && event.getType() !== _event.EventType.RoomCreate && // Don't redact ACLs because that'll obliterate the room
        // See https://github.com/matrix-org/synapse/issues/4042 for details.
        event.getType() !== _event.EventType.RoomServerAcl) {
          return events.concat(event);
        } else {
          return events;
        }
      }, eventsToRedact);
      timeline = timeline.getNeighbouringTimeline(_eventTimeline.EventTimeline.BACKWARDS);
    }

    const count = eventsToRedact.length;
    const user = member.name;

    if (count === 0) {
      _Modal.default.createTrackedDialog('No user messages found to remove', '', _InfoDialog.default, {
        title: (0, _languageHandler._t)("No recent messages by %(user)s found", {
          user
        }),
        description: /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Try scrolling up in the timeline to see if there are any earlier ones.")))
      });
    } else {
      const {
        finished
      } = _Modal.default.createTrackedDialog('Remove recent messages by user', '', _QuestionDialog.default, {
        title: (0, _languageHandler._t)("Remove recent messages by %(user)s", {
          user
        }),
        description: /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("You are about to remove %(count)s messages by %(user)s. " + "This cannot be undone. Do you wish to continue?", {
          count,
          user
        })), /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("For a large amount of messages, this might take some time. " + "Please don't refresh your client in the meantime."))),
        button: (0, _languageHandler._t)("Remove %(count)s messages", {
          count
        })
      });

      const [confirmed] = await finished;

      if (!confirmed) {
        return;
      } // Submitting a large number of redactions freezes the UI,
      // so first yield to allow to rerender after closing the dialog.


      await Promise.resolve();

      _logger.logger.info(`Started redacting recent ${count} messages for ${user} in ${roomId}`);

      await Promise.all(eventsToRedact.map(async event => {
        try {
          await cli.redactEvent(roomId, event.getId());
        } catch (err) {
          // log and swallow errors
          _logger.logger.error("Could not redact", event.getId());

          _logger.logger.error(err);
        }
      }));

      _logger.logger.info(`Finished redacting recent ${count} messages for ${user} in ${roomId}`);
    }
  };

  return /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
    className: "mx_UserInfo_field mx_UserInfo_destructive",
    onClick: onRedactAllMessages
  }, (0, _languageHandler._t)("Remove recent messages"));
};

const BanToggleButton = ({
  room,
  member,
  startUpdating,
  stopUpdating
}) => {
  const cli = (0, _react.useContext)(_MatrixClientContext.default);
  const isBanned = member.membership === "ban";

  const onBanOrUnban = async () => {
    const {
      finished
    } = _Modal.default.createTrackedDialog('Confirm User Action Dialog', 'onBanOrUnban', room.isSpaceRoom() ? _ConfirmSpaceUserActionDialog.default : _ConfirmUserActionDialog.default, {
      member,
      action: isBanned ? (0, _languageHandler._t)("Unban") : (0, _languageHandler._t)("Ban"),
      title: isBanned ? (0, _languageHandler._t)("Unban from %(roomName)s", {
        roomName: room.name
      }) : (0, _languageHandler._t)("Ban from %(roomName)s", {
        roomName: room.name
      }),
      askReason: !isBanned,
      danger: !isBanned,
      // space-specific props
      space: room,
      spaceChildFilter: isBanned ? child => {
        // Return true if the target member is banned and we have sufficient PL to unban
        const myMember = child.getMember(cli.credentials.userId);
        const theirMember = child.getMember(member.userId);
        return myMember && theirMember && theirMember.membership === "ban" && myMember.powerLevel > theirMember.powerLevel && child.currentState.hasSufficientPowerLevelFor("ban", myMember.powerLevel);
      } : child => {
        // Return true if the target member isn't banned and we have sufficient PL to ban
        const myMember = child.getMember(cli.credentials.userId);
        const theirMember = child.getMember(member.userId);
        return myMember && theirMember && theirMember.membership !== "ban" && myMember.powerLevel > theirMember.powerLevel && child.currentState.hasSufficientPowerLevelFor("ban", myMember.powerLevel);
      },
      allLabel: isBanned ? (0, _languageHandler._t)("Unban them from everything I'm able to") : (0, _languageHandler._t)("Ban them from everything I'm able to"),
      specificLabel: isBanned ? (0, _languageHandler._t)("Unban them from specific things I'm able to") : (0, _languageHandler._t)("Ban them from specific things I'm able to"),
      warningMessage: isBanned ? (0, _languageHandler._t)("They won't be able to access whatever you're not an admin of.") : (0, _languageHandler._t)("They'll still be able to access whatever you're not an admin of.")
    }, room.isSpaceRoom() ? "mx_ConfirmSpaceUserActionDialog_wrapper" : undefined);

    const [proceed, reason, rooms = []] = await finished;
    if (!proceed) return;
    startUpdating();

    const fn = roomId => {
      if (isBanned) {
        return cli.unban(roomId, member.userId);
      } else {
        return cli.ban(roomId, member.userId, reason || undefined);
      }
    };

    (0, _space.bulkSpaceBehaviour)(room, rooms, room => fn(room.roomId)).then(() => {
      // NO-OP; rely on the m.room.member event coming down else we could
      // get out of sync if we force setState here!
      _logger.logger.log("Ban success");
    }, function (err) {
      _logger.logger.error("Ban error: " + err);

      _Modal.default.createTrackedDialog('Failed to ban user', '', _ErrorDialog.default, {
        title: (0, _languageHandler._t)("Error"),
        description: (0, _languageHandler._t)("Failed to ban user")
      });
    }).finally(() => {
      stopUpdating();
    });
  };

  let label = (0, _languageHandler._t)("Ban");

  if (isBanned) {
    label = (0, _languageHandler._t)("Unban");
  }

  const classes = (0, _classnames.default)("mx_UserInfo_field", {
    mx_UserInfo_destructive: !isBanned
  });
  return /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
    className: classes,
    onClick: onBanOrUnban
  }, label);
};

const MuteToggleButton = ({
  member,
  room,
  powerLevels,
  startUpdating,
  stopUpdating
}) => {
  const cli = (0, _react.useContext)(_MatrixClientContext.default); // Don't show the mute/unmute option if the user is not in the room

  if (member.membership !== "join") return null;
  const muted = isMuted(member, powerLevels);

  const onMuteToggle = async () => {
    const roomId = member.roomId;
    const target = member.userId; // if muting self, warn as it may be irreversible

    if (target === cli.getUserId()) {
      try {
        if (!(await warnSelfDemote(_SpaceStore.default.spacesEnabled && (room === null || room === void 0 ? void 0 : room.isSpaceRoom())))) return;
      } catch (e) {
        _logger.logger.error("Failed to warn about self demotion: ", e);

        return;
      }
    }

    const powerLevelEvent = room.currentState.getStateEvents("m.room.power_levels", "");
    if (!powerLevelEvent) return;
    const powerLevels = powerLevelEvent.getContent();
    const levelToSend = (powerLevels.events ? powerLevels.events["m.room.message"] : null) || powerLevels.events_default;
    let level;

    if (muted) {
      // unmute
      level = levelToSend;
    } else {
      // mute
      level = levelToSend - 1;
    }

    level = parseInt(level);

    if (!isNaN(level)) {
      startUpdating();
      cli.setPowerLevel(roomId, target, level, powerLevelEvent).then(() => {
        // NO-OP; rely on the m.room.member event coming down else we could
        // get out of sync if we force setState here!
        _logger.logger.log("Mute toggle success");
      }, function (err) {
        _logger.logger.error("Mute error: " + err);

        _Modal.default.createTrackedDialog('Failed to mute user', '', _ErrorDialog.default, {
          title: (0, _languageHandler._t)("Error"),
          description: (0, _languageHandler._t)("Failed to mute user")
        });
      }).finally(() => {
        stopUpdating();
      });
    }
  };

  const classes = (0, _classnames.default)("mx_UserInfo_field", {
    mx_UserInfo_destructive: !muted
  });
  const muteLabel = muted ? (0, _languageHandler._t)("Unmute") : (0, _languageHandler._t)("Mute");
  return /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
    className: classes,
    onClick: onMuteToggle
  }, muteLabel);
};

const RoomAdminToolsContainer = ({
  room,
  children,
  member,
  startUpdating,
  stopUpdating,
  powerLevels
}) => {
  const cli = (0, _react.useContext)(_MatrixClientContext.default);
  let kickButton;
  let banButton;
  let muteButton;
  let redactButton;
  const editPowerLevel = (powerLevels.events ? powerLevels.events["m.room.power_levels"] : null) || powerLevels.state_default; // if these do not exist in the event then they should default to 50 as per the spec

  const {
    ban: banPowerLevel = 50,
    kick: kickPowerLevel = 50,
    redact: redactPowerLevel = 50
  } = powerLevels;
  const me = room.getMember(cli.getUserId());

  if (!me) {
    // we aren't in the room, so return no admin tooling
    return /*#__PURE__*/_react.default.createElement("div", null);
  }

  const isMe = me.userId === member.userId;
  const canAffectUser = member.powerLevel < me.powerLevel || isMe;

  if (!isMe && canAffectUser && me.powerLevel >= kickPowerLevel) {
    kickButton = /*#__PURE__*/_react.default.createElement(RoomKickButton, {
      room: room,
      member: member,
      startUpdating: startUpdating,
      stopUpdating: stopUpdating
    });
  }

  if (me.powerLevel >= redactPowerLevel && (!_SpaceStore.default.spacesEnabled || !room.isSpaceRoom())) {
    redactButton = /*#__PURE__*/_react.default.createElement(RedactMessagesButton, {
      member: member,
      startUpdating: startUpdating,
      stopUpdating: stopUpdating
    });
  }

  if (!isMe && canAffectUser && me.powerLevel >= banPowerLevel) {
    banButton = /*#__PURE__*/_react.default.createElement(BanToggleButton, {
      room: room,
      member: member,
      startUpdating: startUpdating,
      stopUpdating: stopUpdating
    });
  }

  if (!isMe && canAffectUser && me.powerLevel >= editPowerLevel && !room.isSpaceRoom()) {
    muteButton = /*#__PURE__*/_react.default.createElement(MuteToggleButton, {
      member: member,
      room: room,
      powerLevels: powerLevels,
      startUpdating: startUpdating,
      stopUpdating: stopUpdating
    });
  }

  if (kickButton || banButton || muteButton || redactButton || children) {
    return /*#__PURE__*/_react.default.createElement(GenericAdminToolsContainer, null, muteButton, kickButton, banButton, redactButton, children);
  }

  return /*#__PURE__*/_react.default.createElement("div", null);
};

const GroupAdminToolsSection = ({
  children,
  groupId,
  groupMember,
  startUpdating,
  stopUpdating
}) => {
  const cli = (0, _react.useContext)(_MatrixClientContext.default);
  const [isPrivileged, setIsPrivileged] = (0, _react.useState)(false);
  const [isInvited, setIsInvited] = (0, _react.useState)(false); // Listen to group store changes

  (0, _react.useEffect)(() => {
    let unmounted = false;

    const onGroupStoreUpdated = () => {
      if (unmounted) return;
      setIsPrivileged(_GroupStore.default.isUserPrivileged(groupId));
      setIsInvited(_GroupStore.default.getGroupInvitedMembers(groupId).some(m => m.userId === groupMember.userId));
    };

    _GroupStore.default.registerListener(groupId, onGroupStoreUpdated);

    onGroupStoreUpdated(); // Handle unmount

    return () => {
      unmounted = true;

      _GroupStore.default.unregisterListener(onGroupStoreUpdated);
    };
  }, [groupId, groupMember.userId]);

  if (isPrivileged) {
    const onKick = async () => {
      const {
        finished
      } = _Modal.default.createDialog(_ConfirmUserActionDialog.default, {
        matrixClient: cli,
        groupMember,
        action: isInvited ? (0, _languageHandler._t)('Disinvite') : (0, _languageHandler._t)('Remove from community'),
        title: isInvited ? (0, _languageHandler._t)('Disinvite this user from community?') : (0, _languageHandler._t)('Remove this user from community?'),
        danger: true
      });

      const [proceed] = await finished;
      if (!proceed) return;
      startUpdating();
      cli.removeUserFromGroup(groupId, groupMember.userId).then(() => {
        // return to the user list
        _dispatcher.default.dispatch({
          action: _actions.Action.ViewUser,
          member: null
        });
      }).catch(e => {
        _Modal.default.createTrackedDialog('Failed to remove user from group', '', _ErrorDialog.default, {
          title: (0, _languageHandler._t)('Error'),
          description: isInvited ? (0, _languageHandler._t)('Failed to withdraw invitation') : (0, _languageHandler._t)('Failed to remove user from community')
        });

        _logger.logger.log(e);
      }).finally(() => {
        stopUpdating();
      });
    };

    const kickButton = /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      className: "mx_UserInfo_field mx_UserInfo_destructive",
      onClick: onKick
    }, isInvited ? (0, _languageHandler._t)('Disinvite') : (0, _languageHandler._t)('Remove from community')); // No make/revoke admin API yet

    /*const opLabel = this.state.isTargetMod ? _t("Revoke Moderator") : _t("Make Moderator");
    giveModButton = <AccessibleButton className="mx_UserInfo_field" onClick={this.onModToggle}>
        {giveOpLabel}
    </AccessibleButton>;*/


    return /*#__PURE__*/_react.default.createElement(GenericAdminToolsContainer, null, kickButton, children);
  }

  return /*#__PURE__*/_react.default.createElement("div", null);
};

const useIsSynapseAdmin = cli => {
  const [isAdmin, setIsAdmin] = (0, _react.useState)(false);
  (0, _react.useEffect)(() => {
    cli.isSynapseAdministrator().then(isAdmin => {
      setIsAdmin(isAdmin);
    }, () => {
      setIsAdmin(false);
    });
  }, [cli]);
  return isAdmin;
};

const useHomeserverSupportsCrossSigning = cli => {
  return (0, _useAsyncMemo.useAsyncMemo)(async () => {
    return cli.doesServerSupportUnstableFeature("org.matrix.e2e_cross_signing");
  }, [cli], false);
};

function useRoomPermissions(cli, room, user) {
  const [roomPermissions, setRoomPermissions] = (0, _react.useState)({
    // modifyLevelMax is the max PL we can set this user to, typically min(their PL, our PL) && canSetPL
    modifyLevelMax: -1,
    canEdit: false,
    canInvite: false
  });
  const updateRoomPermissions = (0, _react.useCallback)(() => {
    if (!room) {
      return;
    }

    const powerLevelEvent = room.currentState.getStateEvents("m.room.power_levels", "");
    if (!powerLevelEvent) return;
    const powerLevels = powerLevelEvent.getContent();
    if (!powerLevels) return;
    const me = room.getMember(cli.getUserId());
    if (!me) return;
    const them = user;
    const isMe = me.userId === them.userId;
    const canAffectUser = them.powerLevel < me.powerLevel || isMe;
    let modifyLevelMax = -1;

    if (canAffectUser) {
      const editPowerLevel = (powerLevels.events ? powerLevels.events["m.room.power_levels"] : null) || powerLevels.state_default;

      if (me.powerLevel >= editPowerLevel && (isMe || me.powerLevel > them.powerLevel)) {
        modifyLevelMax = me.powerLevel;
      }
    }

    setRoomPermissions({
      canInvite: me.powerLevel >= powerLevels.invite,
      canEdit: modifyLevelMax >= 0,
      modifyLevelMax
    });
  }, [cli, user, room]);
  (0, _useEventEmitter.useEventEmitter)(cli, "RoomState.members", updateRoomPermissions);
  (0, _react.useEffect)(() => {
    updateRoomPermissions();
    return () => {
      setRoomPermissions({
        modifyLevelMax: -1,
        canEdit: false,
        canInvite: false
      });
    };
  }, [updateRoomPermissions]);
  return roomPermissions;
}

const PowerLevelSection = ({
  user,
  room,
  roomPermissions,
  powerLevels
}) => {
  if (roomPermissions.canEdit) {
    return /*#__PURE__*/_react.default.createElement(PowerLevelEditor, {
      user: user,
      room: room,
      roomPermissions: roomPermissions
    });
  } else {
    const powerLevelUsersDefault = powerLevels.users_default || 0;
    const powerLevel = user.powerLevel;
    const role = (0, _Roles.textualPowerLevel)(powerLevel, powerLevelUsersDefault);
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_UserInfo_profileField"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_UserInfo_roleDescription"
    }, role));
  }
};

const PowerLevelEditor = ({
  user,
  room,
  roomPermissions
}) => {
  const cli = (0, _react.useContext)(_MatrixClientContext.default);
  const [selectedPowerLevel, setSelectedPowerLevel] = (0, _react.useState)(user.powerLevel);
  (0, _react.useEffect)(() => {
    setSelectedPowerLevel(user.powerLevel);
  }, [user]);
  const onPowerChange = (0, _react.useCallback)(async powerLevel => {
    setSelectedPowerLevel(powerLevel);

    const applyPowerChange = (roomId, target, powerLevel, powerLevelEvent) => {
      return cli.setPowerLevel(roomId, target, parseInt(powerLevel), powerLevelEvent).then(function () {
        // NO-OP; rely on the m.room.member event coming down else we could
        // get out of sync if we force setState here!
        _logger.logger.log("Power change success");
      }, function (err) {
        _logger.logger.error("Failed to change power level " + err);

        _Modal.default.createTrackedDialog('Failed to change power level', '', _ErrorDialog.default, {
          title: (0, _languageHandler._t)("Error"),
          description: (0, _languageHandler._t)("Failed to change power level")
        });
      });
    };

    const roomId = user.roomId;
    const target = user.userId;
    const powerLevelEvent = room.currentState.getStateEvents("m.room.power_levels", "");
    if (!powerLevelEvent) return;
    const myUserId = cli.getUserId();
    const myPower = powerLevelEvent.getContent().users[myUserId];

    if (myPower && parseInt(myPower) === powerLevel) {
      const {
        finished
      } = _Modal.default.createTrackedDialog('Promote to PL100 Warning', '', _QuestionDialog.default, {
        title: (0, _languageHandler._t)("Warning!"),
        description: /*#__PURE__*/_react.default.createElement("div", null, (0, _languageHandler._t)("You will not be able to undo this change as you are promoting the user " + "to have the same power level as yourself."), /*#__PURE__*/_react.default.createElement("br", null), (0, _languageHandler._t)("Are you sure?")),
        button: (0, _languageHandler._t)("Continue")
      });

      const [confirmed] = await finished;
      if (!confirmed) return;
    } else if (myUserId === target) {
      // If we are changing our own PL it can only ever be decreasing, which we cannot reverse.
      try {
        if (!(await warnSelfDemote(_SpaceStore.default.spacesEnabled && (room === null || room === void 0 ? void 0 : room.isSpaceRoom())))) return;
      } catch (e) {
        _logger.logger.error("Failed to warn about self demotion: ", e);
      }
    }

    await applyPowerChange(roomId, target, powerLevel, powerLevelEvent);
  }, [user.roomId, user.userId, cli, room]);
  const powerLevelEvent = room.currentState.getStateEvents("m.room.power_levels", "");
  const powerLevelUsersDefault = powerLevelEvent ? powerLevelEvent.getContent().users_default : 0;
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_UserInfo_profileField"
  }, /*#__PURE__*/_react.default.createElement(_PowerSelector.default, {
    label: null,
    value: selectedPowerLevel,
    maxValue: roomPermissions.modifyLevelMax,
    usersDefault: powerLevelUsersDefault,
    onChange: onPowerChange
  }));
};

const useDevices = userId => {
  const cli = (0, _react.useContext)(_MatrixClientContext.default); // undefined means yet to be loaded, null means failed to load, otherwise list of devices

  const [devices, setDevices] = (0, _react.useState)(undefined); // Download device lists

  (0, _react.useEffect)(() => {
    setDevices(undefined);
    let cancelled = false;

    async function downloadDeviceList() {
      try {
        await cli.downloadKeys([userId], true);
        const devices = cli.getStoredDevicesForUser(userId);

        if (cancelled) {
          // we got cancelled - presumably a different user now
          return;
        }

        disambiguateDevices(devices);
        setDevices(devices);
      } catch (err) {
        setDevices(null);
      }
    }

    downloadDeviceList(); // Handle being unmounted

    return () => {
      cancelled = true;
    };
  }, [cli, userId]); // Listen to changes

  (0, _react.useEffect)(() => {
    let cancel = false;

    const updateDevices = async () => {
      const newDevices = cli.getStoredDevicesForUser(userId);
      if (cancel) return;
      setDevices(newDevices);
    };

    const onDevicesUpdated = users => {
      if (!users.includes(userId)) return;
      updateDevices();
    };

    const onDeviceVerificationChanged = (_userId, device) => {
      if (_userId !== userId) return;
      updateDevices();
    };

    const onUserTrustStatusChanged = (_userId, trustStatus) => {
      if (_userId !== userId) return;
      updateDevices();
    };

    cli.on("crypto.devicesUpdated", onDevicesUpdated);
    cli.on("deviceVerificationChanged", onDeviceVerificationChanged);
    cli.on("userTrustStatusChanged", onUserTrustStatusChanged); // Handle being unmounted

    return () => {
      cancel = true;
      cli.removeListener("crypto.devicesUpdated", onDevicesUpdated);
      cli.removeListener("deviceVerificationChanged", onDeviceVerificationChanged);
      cli.removeListener("userTrustStatusChanged", onUserTrustStatusChanged);
    };
  }, [cli, userId]);
  return devices;
};

exports.useDevices = useDevices;

const BasicUserInfo = ({
  room,
  member,
  groupId,
  devices,
  isRoomEncrypted
}) => {
  const cli = (0, _react.useContext)(_MatrixClientContext.default);
  const powerLevels = useRoomPowerLevels(cli, room); // Load whether or not we are a Synapse Admin

  const isSynapseAdmin = useIsSynapseAdmin(cli); // Check whether the user is ignored

  const [isIgnored, setIsIgnored] = (0, _react.useState)(cli.isUserIgnored(member.userId)); // Recheck if the user or client changes

  (0, _react.useEffect)(() => {
    setIsIgnored(cli.isUserIgnored(member.userId));
  }, [cli, member.userId]); // Recheck also if we receive new accountData m.ignored_user_list

  const accountDataHandler = (0, _react.useCallback)(ev => {
    if (ev.getType() === "m.ignored_user_list") {
      setIsIgnored(cli.isUserIgnored(member.userId));
    }
  }, [cli, member.userId]);
  (0, _useEventEmitter.useEventEmitter)(cli, "accountData", accountDataHandler); // Count of how many operations are currently in progress, if > 0 then show a Spinner

  const [pendingUpdateCount, setPendingUpdateCount] = (0, _react.useState)(0);
  const startUpdating = (0, _react.useCallback)(() => {
    setPendingUpdateCount(pendingUpdateCount + 1);
  }, [pendingUpdateCount]);
  const stopUpdating = (0, _react.useCallback)(() => {
    setPendingUpdateCount(pendingUpdateCount - 1);
  }, [pendingUpdateCount]);
  const roomPermissions = useRoomPermissions(cli, room, member);
  const onSynapseDeactivate = (0, _react.useCallback)(async () => {
    const {
      finished
    } = _Modal.default.createTrackedDialog('Synapse User Deactivation', '', _QuestionDialog.default, {
      title: (0, _languageHandler._t)("Deactivate user?"),
      description: /*#__PURE__*/_react.default.createElement("div", null, (0, _languageHandler._t)("Deactivating this user will log them out and prevent them from logging back in. Additionally, " + "they will leave all the rooms they are in. This action cannot be reversed. Are you sure you " + "want to deactivate this user?")),
      button: (0, _languageHandler._t)("Deactivate user"),
      danger: true
    });

    const [accepted] = await finished;
    if (!accepted) return;

    try {
      await cli.deactivateSynapseUser(member.userId);
    } catch (err) {
      _logger.logger.error("Failed to deactivate user");

      _logger.logger.error(err);

      _Modal.default.createTrackedDialog('Failed to deactivate Synapse user', '', _ErrorDialog.default, {
        title: (0, _languageHandler._t)('Failed to deactivate user'),
        description: err && err.message ? err.message : (0, _languageHandler._t)("Operation failed")
      });
    }
  }, [cli, member.userId]);
  let synapseDeactivateButton;
  let spinner; // We don't need a perfect check here, just something to pass as "probably not our homeserver". If
  // someone does figure out how to bypass this check the worst that happens is an error.
  // FIXME this should be using cli instead of MatrixClientPeg.matrixClient

  if (isSynapseAdmin && member.userId.endsWith(`:${_MatrixClientPeg.MatrixClientPeg.getHomeserverName()}`)) {
    synapseDeactivateButton = /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      onClick: onSynapseDeactivate,
      className: "mx_UserInfo_field mx_UserInfo_destructive"
    }, (0, _languageHandler._t)("Deactivate user"));
  }

  let memberDetails;
  let adminToolsContainer;

  if (room && member.roomId) {
    // hide the Roles section for DMs as it doesn't make sense there
    if (!_DMRoomMap.default.shared().getUserIdForRoomId(member.roomId)) {
      memberDetails = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_UserInfo_container"
      }, /*#__PURE__*/_react.default.createElement("h3", null, (0, _languageHandler._t)("Role in <RoomName/>", {}, {
        RoomName: () => /*#__PURE__*/_react.default.createElement("b", null, room.name)
      })), /*#__PURE__*/_react.default.createElement(PowerLevelSection, {
        powerLevels: powerLevels,
        user: member,
        room: room,
        roomPermissions: roomPermissions
      }));
    }

    adminToolsContainer = /*#__PURE__*/_react.default.createElement(RoomAdminToolsContainer, {
      powerLevels: powerLevels,
      member: member,
      room: room,
      startUpdating: startUpdating,
      stopUpdating: stopUpdating
    }, synapseDeactivateButton);
  } else if (groupId) {
    adminToolsContainer = /*#__PURE__*/_react.default.createElement(GroupAdminToolsSection, {
      groupId: groupId,
      groupMember: member,
      startUpdating: startUpdating,
      stopUpdating: stopUpdating
    }, synapseDeactivateButton);
  } else if (synapseDeactivateButton) {
    adminToolsContainer = /*#__PURE__*/_react.default.createElement(GenericAdminToolsContainer, null, synapseDeactivateButton);
  }

  if (pendingUpdateCount > 0) {
    spinner = /*#__PURE__*/_react.default.createElement(_Spinner.default, null);
  } // only display the devices list if our client supports E2E


  const cryptoEnabled = cli.isCryptoEnabled();
  let text;

  if (!isRoomEncrypted) {
    if (!cryptoEnabled) {
      text = (0, _languageHandler._t)("This client does not support end-to-end encryption.");
    } else if (room && (!_SpaceStore.default.spacesEnabled || !room.isSpaceRoom())) {
      text = (0, _languageHandler._t)("Messages in this room are not end-to-end encrypted.");
    }
  } else if (!_SpaceStore.default.spacesEnabled || !room.isSpaceRoom()) {
    text = (0, _languageHandler._t)("Messages in this room are end-to-end encrypted.");
  }

  let verifyButton;
  const homeserverSupportsCrossSigning = useHomeserverSupportsCrossSigning(cli);
  const userTrust = cryptoEnabled && cli.checkUserTrust(member.userId);
  const userVerified = cryptoEnabled && userTrust.isCrossSigningVerified();
  const isMe = member.userId === cli.getUserId();
  const canVerify = cryptoEnabled && homeserverSupportsCrossSigning && !userVerified && !isMe && devices && devices.length > 0;

  const setUpdating = updating => {
    setPendingUpdateCount(count => count + (updating ? 1 : -1));
  };

  const hasCrossSigningKeys = useHasCrossSigningKeys(cli, member, canVerify, setUpdating);
  const showDeviceListSpinner = devices === undefined;

  if (canVerify) {
    if (hasCrossSigningKeys !== undefined) {
      // Note: mx_UserInfo_verifyButton is for the end-to-end tests
      verifyButton = /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        className: "mx_UserInfo_field mx_UserInfo_verifyButton",
        onClick: () => {
          if (hasCrossSigningKeys) {
            (0, _verification.verifyUser)(member);
          } else {
            (0, _verification.legacyVerifyUser)(member);
          }
        }
      }, (0, _languageHandler._t)("Verify"));
    } else if (!showDeviceListSpinner) {
      // HACK: only show a spinner if the device section spinner is not shown,
      // to avoid showing a double spinner
      // We should ask for a design that includes all the different loading states here
      verifyButton = /*#__PURE__*/_react.default.createElement(_Spinner.default, null);
    }
  }

  let editDevices;

  if (member.userId == cli.getUserId()) {
    editDevices = /*#__PURE__*/_react.default.createElement("p", null, /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      className: "mx_UserInfo_field",
      onClick: () => {
        _dispatcher.default.dispatch({
          action: _actions.Action.ViewUserSettings,
          initialTabId: _UserSettingsDialog.UserTab.Security
        });
      }
    }, (0, _languageHandler._t)("Edit devices")));
  }

  const securitySection = /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_UserInfo_container"
  }, /*#__PURE__*/_react.default.createElement("h3", null, (0, _languageHandler._t)("Security")), /*#__PURE__*/_react.default.createElement("p", null, text), verifyButton, cryptoEnabled && /*#__PURE__*/_react.default.createElement(DevicesSection, {
    loading: showDeviceListSpinner,
    devices: devices,
    userId: member.userId
  }), editDevices);

  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, memberDetails, securitySection, /*#__PURE__*/_react.default.createElement(UserOptionsSection, {
    canInvite: roomPermissions.canInvite,
    isIgnored: isIgnored,
    member: member,
    isSpace: _SpaceStore.default.spacesEnabled && (room === null || room === void 0 ? void 0 : room.isSpaceRoom())
  }), adminToolsContainer, spinner);
};

const UserInfoHeader = ({
  member,
  e2eStatus
}) => {
  const cli = (0, _react.useContext)(_MatrixClientContext.default);
  const onMemberAvatarClick = (0, _react.useCallback)(() => {
    const avatarUrl = member.getMxcAvatarUrl ? member.getMxcAvatarUrl() : member.avatarUrl;
    if (!avatarUrl) return;
    const httpUrl = (0, _Media.mediaFromMxc)(avatarUrl).srcHttp;
    const params = {
      src: httpUrl,
      name: member.name || member.displayName
    };

    _Modal.default.createDialog(_ImageView.default, params, "mx_Dialog_lightbox", null, true);
  }, [member]);

  const avatarElement = /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_UserInfo_avatar"
  }, /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_MemberAvatar.default, {
    key: member.userId // to instantly blank the avatar when UserInfo changes members
    ,
    member: member,
    width: 2 * 0.3 * _UIStore.default.instance.windowHeight // 2x@30vh
    ,
    height: 2 * 0.3 * _UIStore.default.instance.windowHeight // 2x@30vh
    ,
    resizeMethod: "scale",
    fallbackUserId: member.userId,
    onClick: onMemberAvatarClick,
    urls: member.avatarUrl ? [member.avatarUrl] : undefined
  }))));

  let presenceState;
  let presenceLastActiveAgo;
  let presenceCurrentlyActive;
  let statusMessage;

  if (member instanceof _roomMember.RoomMember && member.user) {
    presenceState = member.user.presence;
    presenceLastActiveAgo = member.user.lastActiveAgo;
    presenceCurrentlyActive = member.user.currentlyActive;

    if (_SettingsStore.default.getValue("feature_custom_status")) {
      if (member.user) {
        statusMessage = member.user.unstable_statusMessage;
      } else {
        statusMessage = member.unstable_statusMessage;
      }
    }
  }

  const enablePresenceByHsUrl = _SdkConfig.default.get()["enable_presence_by_hs_url"];

  let showPresence = true;

  if (enablePresenceByHsUrl && enablePresenceByHsUrl[cli.baseUrl] !== undefined) {
    showPresence = enablePresenceByHsUrl[cli.baseUrl];
  }

  let presenceLabel = null;

  if (showPresence) {
    presenceLabel = /*#__PURE__*/_react.default.createElement(_PresenceLabel.default, {
      activeAgo: presenceLastActiveAgo,
      currentlyActive: presenceCurrentlyActive,
      presenceState: presenceState
    });
  }

  let statusLabel = null;

  if (statusMessage) {
    statusLabel = /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_UserInfo_statusMessage"
    }, statusMessage);
  }

  let e2eIcon;

  if (e2eStatus) {
    e2eIcon = /*#__PURE__*/_react.default.createElement(_E2EIcon.default, {
      size: 18,
      status: e2eStatus,
      isUser: true
    });
  }

  const displayName = member.rawDisplayName || member.displayname;
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, avatarElement, /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_UserInfo_container mx_UserInfo_separator"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_UserInfo_profile"
  }, /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("h2", null, e2eIcon, /*#__PURE__*/_react.default.createElement("span", {
    title: displayName,
    "aria-label": displayName
  }, displayName))), /*#__PURE__*/_react.default.createElement("div", null, member.userId), /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_UserInfo_profileStatus"
  }, presenceLabel, statusLabel))));
};

const UserInfo = _ref => {
  let {
    user,
    groupId,
    room,
    onClose,
    phase = _RightPanelStorePhases.RightPanelPhases.RoomMemberInfo
  } = _ref,
      props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  const cli = (0, _react.useContext)(_MatrixClientContext.default); // fetch latest room member if we have a room, so we don't show historical information, falling back to user

  const member = (0, _react.useMemo)(() => room ? room.getMember(user.userId) || user : user, [room, user]);
  const isRoomEncrypted = (0, _useIsEncrypted.useIsEncrypted)(cli, room);
  const devices = useDevices(user.userId);
  let e2eStatus;

  if (isRoomEncrypted && devices) {
    e2eStatus = getE2EStatus(cli, user.userId, devices);
  }

  const classes = ["mx_UserInfo"];
  let refireParams;
  let previousPhase; // We have no previousPhase for when viewing a UserInfo from a Group or without a Room at this time

  if (room && phase === _RightPanelStorePhases.RightPanelPhases.EncryptionPanel) {
    previousPhase = _RightPanelStorePhases.RightPanelPhases.RoomMemberInfo;
    refireParams = {
      member
    };
  } else if (room !== null && room !== void 0 && room.isSpaceRoom() && _SpaceStore.default.spacesEnabled) {
    previousPhase = previousPhase = _RightPanelStorePhases.RightPanelPhases.SpaceMemberList;
    refireParams = {
      space: room
    };
  } else if (room) {
    previousPhase = _RightPanelStorePhases.RightPanelPhases.RoomMemberList;
  }

  const onEncryptionPanelClose = () => {
    _dispatcher.default.dispatch({
      action: _actions.Action.SetRightPanelPhase,
      phase: previousPhase,
      refireParams: refireParams
    });
  };

  let content;

  switch (phase) {
    case _RightPanelStorePhases.RightPanelPhases.RoomMemberInfo:
    case _RightPanelStorePhases.RightPanelPhases.GroupMemberInfo:
    case _RightPanelStorePhases.RightPanelPhases.SpaceMemberInfo:
      content = /*#__PURE__*/_react.default.createElement(BasicUserInfo, {
        room: room,
        member: member,
        groupId: groupId,
        devices: devices,
        isRoomEncrypted: isRoomEncrypted
      });
      break;

    case _RightPanelStorePhases.RightPanelPhases.EncryptionPanel:
      classes.push("mx_UserInfo_smallAvatar");
      content = /*#__PURE__*/_react.default.createElement(_EncryptionPanel.default, (0, _extends2.default)({}, props, {
        member: member,
        onClose: onEncryptionPanelClose,
        isRoomEncrypted: isRoomEncrypted
      }));
      break;
  }

  let closeLabel = undefined;

  if (phase === _RightPanelStorePhases.RightPanelPhases.EncryptionPanel) {
    const verificationRequest = props.verificationRequest;

    if (verificationRequest && verificationRequest.pending) {
      closeLabel = (0, _languageHandler._t)("Cancel");
    }
  }

  let scopeHeader;

  if (_SpaceStore.default.spacesEnabled && room !== null && room !== void 0 && room.isSpaceRoom()) {
    scopeHeader = /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_RightPanel_scopeHeader"
    }, /*#__PURE__*/_react.default.createElement(_RoomAvatar.default, {
      room: room,
      height: 32,
      width: 32
    }), /*#__PURE__*/_react.default.createElement(_RoomName.default, {
      room: room
    }));
  }

  const header = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, scopeHeader, /*#__PURE__*/_react.default.createElement(UserInfoHeader, {
    member: member,
    e2eStatus: e2eStatus
  }));

  return /*#__PURE__*/_react.default.createElement(_BaseCard.default, {
    className: classes.join(" "),
    header: header,
    onClose: onClose,
    closeLabel: closeLabel,
    previousPhase: previousPhase,
    refireParams: refireParams
  }, content);
};

var _default = UserInfo;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,