"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _languageHandler = require("../../../languageHandler");

var _HeaderButton = _interopRequireDefault(require("./HeaderButton"));

var _HeaderButtons = _interopRequireWildcard(require("./HeaderButtons"));

var _RightPanelStorePhases = require("../../../stores/RightPanelStorePhases");

var _actions = require("../../../dispatcher/actions");

var _RightPanelStore = _interopRequireDefault(require("../../../stores/RightPanelStore"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _useSettings = require("../../../hooks/useSettings");

var _PinnedMessagesCard = require("./PinnedMessagesCard");

var _threads = require("../../../dispatcher/dispatch-actions/threads");

var _SettingsStore = _interopRequireDefault(require("../../../settings/SettingsStore"));

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _RoomNotificationStateStore = require("../../../stores/notifications/RoomNotificationStateStore");

var _NotificationColor = require("../../../stores/notifications/NotificationColor");

var _dec, _class, _class2, _temp;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const ROOM_INFO_PHASES = [_RightPanelStorePhases.RightPanelPhases.RoomSummary, _RightPanelStorePhases.RightPanelPhases.Widget, _RightPanelStorePhases.RightPanelPhases.FilePanel, _RightPanelStorePhases.RightPanelPhases.RoomMemberList, _RightPanelStorePhases.RightPanelPhases.RoomMemberInfo, _RightPanelStorePhases.RightPanelPhases.EncryptionPanel, _RightPanelStorePhases.RightPanelPhases.Room3pidMemberInfo];

const UnreadIndicator = ({
  className
}) => {
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_RightPanel_headerButton_unreadIndicator_bg"
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: className
  }));
};

const PinnedMessagesHeaderButton = ({
  room,
  isHighlighted,
  onClick
}) => {
  const pinningEnabled = (0, _useSettings.useSettingValue)("feature_pinning");
  const pinnedEvents = (0, _PinnedMessagesCard.usePinnedEvents)(pinningEnabled && room);
  const readPinnedEvents = (0, _PinnedMessagesCard.useReadPinnedEvents)(pinningEnabled && room);
  if (!pinningEnabled) return null;
  let unreadIndicator;

  if (pinnedEvents.some(id => !readPinnedEvents.has(id))) {
    unreadIndicator = /*#__PURE__*/_react.default.createElement(UnreadIndicator, {
      className: "mx_RightPanel_headerButton_unreadIndicator"
    });
  }

  return /*#__PURE__*/_react.default.createElement(_HeaderButton.default, {
    name: "pinnedMessagesButton",
    title: (0, _languageHandler._t)("Pinned messages"),
    isHighlighted: isHighlighted,
    onClick: onClick,
    analytics: ["Right Panel", "Pinned Messages Button", "click"]
  }, unreadIndicator);
};

const TimelineCardHeaderButton = ({
  room,
  isHighlighted,
  onClick
}) => {
  if (!_SettingsStore.default.getValue("feature_maximised_widgets")) return null;
  let unreadIndicator;

  switch (_RoomNotificationStateStore.RoomNotificationStateStore.instance.getRoomState(room).color) {
    case _NotificationColor.NotificationColor.Grey:
      unreadIndicator = /*#__PURE__*/_react.default.createElement(UnreadIndicator, {
        className: "mx_RightPanel_headerButton_unreadIndicator mx_Indicator_gray"
      });
      break;

    case _NotificationColor.NotificationColor.Red:
      unreadIndicator = /*#__PURE__*/_react.default.createElement(UnreadIndicator, {
        className: "mx_RightPanel_headerButton_unreadIndicator"
      });
      break;

    default:
      break;
  }

  return /*#__PURE__*/_react.default.createElement(_HeaderButton.default, {
    name: "timelineCardButton",
    title: (0, _languageHandler._t)("Chat"),
    isHighlighted: isHighlighted,
    onClick: onClick,
    analytics: ["Right Panel", "Timeline Panel Button", "click"]
  }, unreadIndicator);
};

let RoomHeaderButtons = (_dec = (0, _replaceableComponent.replaceableComponent)("views.right_panel.RoomHeaderButtons"), _dec(_class = (_temp = _class2 = class RoomHeaderButtons extends _HeaderButtons.default {
  constructor(props) {
    super(props, _HeaderButtons.HeaderKind.Room);
    (0, _defineProperty2.default)(this, "onRoomSummaryClicked", () => {
      // use roomPanelPhase rather than this.state.phase as it remembers the latest one if we close
      const lastPhase = _RightPanelStore.default.getSharedInstance().roomPanelPhase;

      if (ROOM_INFO_PHASES.includes(lastPhase)) {
        if (this.state.phase === lastPhase) {
          this.setPhase(lastPhase);
        } else {
          this.setPhase(lastPhase, _RightPanelStore.default.getSharedInstance().roomPanelPhaseParams);
        }
      } else {
        // This toggles for us, if needed
        this.setPhase(_RightPanelStorePhases.RightPanelPhases.RoomSummary);
      }
    });
    (0, _defineProperty2.default)(this, "onNotificationsClicked", () => {
      // This toggles for us, if needed
      this.setPhase(_RightPanelStorePhases.RightPanelPhases.NotificationPanel);
    });
    (0, _defineProperty2.default)(this, "onPinnedMessagesClicked", () => {
      // This toggles for us, if needed
      this.setPhase(_RightPanelStorePhases.RightPanelPhases.PinnedMessages);
    });
    (0, _defineProperty2.default)(this, "onTimelineCardClicked", () => {
      this.setPhase(_RightPanelStorePhases.RightPanelPhases.Timeline);
    });
    (0, _defineProperty2.default)(this, "onThreadsPanelClicked", () => {
      if (RoomHeaderButtons.THREAD_PHASES.includes(this.state.phase)) {
        _dispatcher.default.dispatch({
          action: _actions.Action.ToggleRightPanel,
          type: "room"
        });
      } else {
        (0, _threads.dispatchShowThreadsPanelEvent)();
      }
    });
  }

  onAction(payload) {
    if (payload.action === _actions.Action.ViewUser) {
      if (payload.member) {
        this.setPhase(_RightPanelStorePhases.RightPanelPhases.RoomMemberInfo, {
          member: payload.member
        });
      } else {
        this.setPhase(_RightPanelStorePhases.RightPanelPhases.RoomMemberList);
      }
    } else if (payload.action === "view_3pid_invite") {
      if (payload.event) {
        this.setPhase(_RightPanelStorePhases.RightPanelPhases.Room3pidMemberInfo, {
          event: payload.event
        });
      } else {
        this.setPhase(_RightPanelStorePhases.RightPanelPhases.RoomMemberList);
      }
    }
  }

  renderButtons() {
    const rightPanelPhaseButtons = new Map();
    rightPanelPhaseButtons.set(_RightPanelStorePhases.RightPanelPhases.PinnedMessages, /*#__PURE__*/_react.default.createElement(PinnedMessagesHeaderButton, {
      room: this.props.room,
      isHighlighted: this.isPhase(_RightPanelStorePhases.RightPanelPhases.PinnedMessages),
      onClick: this.onPinnedMessagesClicked
    }));
    rightPanelPhaseButtons.set(_RightPanelStorePhases.RightPanelPhases.Timeline, /*#__PURE__*/_react.default.createElement(TimelineCardHeaderButton, {
      room: this.props.room,
      isHighlighted: this.isPhase(_RightPanelStorePhases.RightPanelPhases.Timeline),
      onClick: this.onTimelineCardClicked
    }));
    rightPanelPhaseButtons.set(_RightPanelStorePhases.RightPanelPhases.ThreadPanel, _SettingsStore.default.getValue("feature_thread") ? /*#__PURE__*/_react.default.createElement(_HeaderButton.default, {
      name: "threadsButton",
      title: (0, _languageHandler._t)("Threads"),
      onClick: this.onThreadsPanelClicked,
      isHighlighted: this.isPhase(RoomHeaderButtons.THREAD_PHASES),
      analytics: ['Right Panel', 'Threads List Button', 'click']
    }) : null);
    rightPanelPhaseButtons.set(_RightPanelStorePhases.RightPanelPhases.NotificationPanel, /*#__PURE__*/_react.default.createElement(_HeaderButton.default, {
      name: "notifsButton",
      title: (0, _languageHandler._t)('Notifications'),
      isHighlighted: this.isPhase(_RightPanelStorePhases.RightPanelPhases.NotificationPanel),
      onClick: this.onNotificationsClicked,
      analytics: ['Right Panel', 'Notification List Button', 'click']
    }));
    rightPanelPhaseButtons.set(_RightPanelStorePhases.RightPanelPhases.RoomSummary, /*#__PURE__*/_react.default.createElement(_HeaderButton.default, {
      name: "roomSummaryButton",
      title: (0, _languageHandler._t)('Room Info'),
      isHighlighted: this.isPhase(ROOM_INFO_PHASES),
      onClick: this.onRoomSummaryClicked,
      analytics: ['Right Panel', 'Room Summary Button', 'click']
    }));
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, Array.from(rightPanelPhaseButtons.keys()).map(phase => this.props.excludedRightPanelPhaseButtons.includes(phase) ? null : rightPanelPhaseButtons.get(phase)));
  }

}, (0, _defineProperty2.default)(_class2, "THREAD_PHASES", [_RightPanelStorePhases.RightPanelPhases.ThreadPanel, _RightPanelStorePhases.RightPanelPhases.ThreadView]), _temp)) || _class);
exports.default = RoomHeaderButtons;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,