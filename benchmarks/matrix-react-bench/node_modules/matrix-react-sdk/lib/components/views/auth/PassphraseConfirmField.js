"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _Field = _interopRequireDefault(require("../elements/Field"));

var _Validation = _interopRequireDefault(require("../elements/Validation"));

var _languageHandler = require("../../../languageHandler");

var _dec, _class, _class2, _temp;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

let PassphraseConfirmField = (_dec = (0, _replaceableComponent.replaceableComponent)("views.auth.EmailField"), _dec(_class = (_temp = _class2 = class PassphraseConfirmField extends _react.PureComponent {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "validate", (0, _Validation.default)({
      rules: [{
        key: "required",
        test: ({
          value,
          allowEmpty
        }) => allowEmpty || !!value,
        invalid: () => (0, _languageHandler._t)(this.props.labelRequired)
      }, {
        key: "match",
        test: ({
          value
        }) => !value || value === this.props.password,
        invalid: () => (0, _languageHandler._t)(this.props.labelInvalid)
      }]
    }));
    (0, _defineProperty2.default)(this, "onValidate", async fieldState => {
      const result = await this.validate(fieldState);

      if (this.props.onValidate) {
        this.props.onValidate(result);
      }

      return result;
    });
  }

  render() {
    return /*#__PURE__*/_react.default.createElement(_Field.default, {
      id: this.props.id,
      ref: this.props.fieldRef,
      type: "password",
      label: (0, _languageHandler._t)(this.props.label),
      autoComplete: this.props.autoComplete,
      value: this.props.value,
      onChange: this.props.onChange,
      onValidate: this.onValidate
    });
  }

}, (0, _defineProperty2.default)(_class2, "defaultProps", {
  label: (0, _languageHandler._td)("Confirm password"),
  labelRequired: (0, _languageHandler._td)("Confirm password"),
  labelInvalid: (0, _languageHandler._td)("Passwords don't match")
}), _temp)) || _class);
var _default = PassphraseConfirmField;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL2F1dGgvUGFzc3BocmFzZUNvbmZpcm1GaWVsZC50c3giXSwibmFtZXMiOlsiUGFzc3BocmFzZUNvbmZpcm1GaWVsZCIsIlB1cmVDb21wb25lbnQiLCJydWxlcyIsImtleSIsInRlc3QiLCJ2YWx1ZSIsImFsbG93RW1wdHkiLCJpbnZhbGlkIiwicHJvcHMiLCJsYWJlbFJlcXVpcmVkIiwicGFzc3dvcmQiLCJsYWJlbEludmFsaWQiLCJmaWVsZFN0YXRlIiwicmVzdWx0IiwidmFsaWRhdGUiLCJvblZhbGlkYXRlIiwicmVuZGVyIiwiaWQiLCJmaWVsZFJlZiIsImxhYmVsIiwiYXV0b0NvbXBsZXRlIiwib25DaGFuZ2UiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBZ0JBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOzs7Ozs7OztJQWlCTUEsc0IsV0FETCxnREFBcUIsdUJBQXJCLEMsbUNBQUQsTUFDTUEsc0JBRE4sU0FDcUNDLG9CQURyQyxDQUMyRDtBQUFBO0FBQUE7QUFBQSxvREFPcEMseUJBQWU7QUFDOUJDLE1BQUFBLEtBQUssRUFBRSxDQUNIO0FBQ0lDLFFBQUFBLEdBQUcsRUFBRSxVQURUO0FBRUlDLFFBQUFBLElBQUksRUFBRSxDQUFDO0FBQUVDLFVBQUFBLEtBQUY7QUFBU0MsVUFBQUE7QUFBVCxTQUFELEtBQTJCQSxVQUFVLElBQUksQ0FBQyxDQUFDRCxLQUZyRDtBQUdJRSxRQUFBQSxPQUFPLEVBQUUsTUFBTSx5QkFBRyxLQUFLQyxLQUFMLENBQVdDLGFBQWQ7QUFIbkIsT0FERyxFQU1IO0FBQ0lOLFFBQUFBLEdBQUcsRUFBRSxPQURUO0FBRUlDLFFBQUFBLElBQUksRUFBRSxDQUFDO0FBQUVDLFVBQUFBO0FBQUYsU0FBRCxLQUFlLENBQUNBLEtBQUQsSUFBVUEsS0FBSyxLQUFLLEtBQUtHLEtBQUwsQ0FBV0UsUUFGeEQ7QUFHSUgsUUFBQUEsT0FBTyxFQUFFLE1BQU0seUJBQUcsS0FBS0MsS0FBTCxDQUFXRyxZQUFkO0FBSG5CLE9BTkc7QUFEdUIsS0FBZixDQVBvQztBQUFBLHNEQXNCbEMsTUFBT0MsVUFBUCxJQUFtQztBQUNwRCxZQUFNQyxNQUFNLEdBQUcsTUFBTSxLQUFLQyxRQUFMLENBQWNGLFVBQWQsQ0FBckI7O0FBQ0EsVUFBSSxLQUFLSixLQUFMLENBQVdPLFVBQWYsRUFBMkI7QUFDdkIsYUFBS1AsS0FBTCxDQUFXTyxVQUFYLENBQXNCRixNQUF0QjtBQUNIOztBQUVELGFBQU9BLE1BQVA7QUFDSCxLQTdCc0Q7QUFBQTs7QUErQnZERyxFQUFBQSxNQUFNLEdBQUc7QUFDTCx3QkFBTyw2QkFBQyxjQUFEO0FBQ0gsTUFBQSxFQUFFLEVBQUUsS0FBS1IsS0FBTCxDQUFXUyxFQURaO0FBRUgsTUFBQSxHQUFHLEVBQUUsS0FBS1QsS0FBTCxDQUFXVSxRQUZiO0FBR0gsTUFBQSxJQUFJLEVBQUMsVUFIRjtBQUlILE1BQUEsS0FBSyxFQUFFLHlCQUFHLEtBQUtWLEtBQUwsQ0FBV1csS0FBZCxDQUpKO0FBS0gsTUFBQSxZQUFZLEVBQUUsS0FBS1gsS0FBTCxDQUFXWSxZQUx0QjtBQU1ILE1BQUEsS0FBSyxFQUFFLEtBQUtaLEtBQUwsQ0FBV0gsS0FOZjtBQU9ILE1BQUEsUUFBUSxFQUFFLEtBQUtHLEtBQUwsQ0FBV2EsUUFQbEI7QUFRSCxNQUFBLFVBQVUsRUFBRSxLQUFLTjtBQVJkLE1BQVA7QUFVSDs7QUExQ3NELEMseURBQ2pDO0FBQ2xCSSxFQUFBQSxLQUFLLEVBQUUsMEJBQUksa0JBQUosQ0FEVztBQUVsQlYsRUFBQUEsYUFBYSxFQUFFLDBCQUFJLGtCQUFKLENBRkc7QUFHbEJFLEVBQUFBLFlBQVksRUFBRSwwQkFBSSx1QkFBSjtBQUhJLEM7ZUE0Q1hYLHNCIiwic291cmNlc0NvbnRlbnQiOlsiLypcbkNvcHlyaWdodCAyMDIxIFRoZSBNYXRyaXgub3JnIEZvdW5kYXRpb24gQy5JLkMuXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuaW1wb3J0IFJlYWN0LCB7IFB1cmVDb21wb25lbnQsIFJlZkNhbGxiYWNrLCBSZWZPYmplY3QgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHJlcGxhY2VhYmxlQ29tcG9uZW50IH0gZnJvbSBcIi4uLy4uLy4uL3V0aWxzL3JlcGxhY2VhYmxlQ29tcG9uZW50XCI7XG5pbXBvcnQgRmllbGQsIHsgSUlucHV0UHJvcHMgfSBmcm9tIFwiLi4vZWxlbWVudHMvRmllbGRcIjtcbmltcG9ydCB3aXRoVmFsaWRhdGlvbiwgeyBJRmllbGRTdGF0ZSwgSVZhbGlkYXRpb25SZXN1bHQgfSBmcm9tIFwiLi4vZWxlbWVudHMvVmFsaWRhdGlvblwiO1xuaW1wb3J0IHsgX3QsIF90ZCB9IGZyb20gXCIuLi8uLi8uLi9sYW5ndWFnZUhhbmRsZXJcIjtcblxuaW50ZXJmYWNlIElQcm9wcyBleHRlbmRzIE9taXQ8SUlucHV0UHJvcHMsIFwib25WYWxpZGF0ZVwiPiB7XG4gICAgaWQ/OiBzdHJpbmc7XG4gICAgZmllbGRSZWY/OiBSZWZDYWxsYmFjazxGaWVsZD4gfCBSZWZPYmplY3Q8RmllbGQ+O1xuICAgIGF1dG9Db21wbGV0ZT86IHN0cmluZztcbiAgICB2YWx1ZTogc3RyaW5nO1xuICAgIHBhc3N3b3JkOiBzdHJpbmc7IC8vIFRoZSBwYXNzd29yZCB3ZSdyZSBjb25maXJtaW5nXG5cbiAgICBsYWJlbFJlcXVpcmVkPzogc3RyaW5nO1xuICAgIGxhYmVsSW52YWxpZD86IHN0cmluZztcblxuICAgIG9uQ2hhbmdlKGV2OiBSZWFjdC5Gb3JtRXZlbnQ8SFRNTEVsZW1lbnQ+KTtcbiAgICBvblZhbGlkYXRlPyhyZXN1bHQ6IElWYWxpZGF0aW9uUmVzdWx0KTtcbn1cblxuQHJlcGxhY2VhYmxlQ29tcG9uZW50KFwidmlld3MuYXV0aC5FbWFpbEZpZWxkXCIpXG5jbGFzcyBQYXNzcGhyYXNlQ29uZmlybUZpZWxkIGV4dGVuZHMgUHVyZUNvbXBvbmVudDxJUHJvcHM+IHtcbiAgICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgICAgICBsYWJlbDogX3RkKFwiQ29uZmlybSBwYXNzd29yZFwiKSxcbiAgICAgICAgbGFiZWxSZXF1aXJlZDogX3RkKFwiQ29uZmlybSBwYXNzd29yZFwiKSxcbiAgICAgICAgbGFiZWxJbnZhbGlkOiBfdGQoXCJQYXNzd29yZHMgZG9uJ3QgbWF0Y2hcIiksXG4gICAgfTtcblxuICAgIHByaXZhdGUgdmFsaWRhdGUgPSB3aXRoVmFsaWRhdGlvbih7XG4gICAgICAgIHJ1bGVzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAga2V5OiBcInJlcXVpcmVkXCIsXG4gICAgICAgICAgICAgICAgdGVzdDogKHsgdmFsdWUsIGFsbG93RW1wdHkgfSkgPT4gYWxsb3dFbXB0eSB8fCAhIXZhbHVlLFxuICAgICAgICAgICAgICAgIGludmFsaWQ6ICgpID0+IF90KHRoaXMucHJvcHMubGFiZWxSZXF1aXJlZCksXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGtleTogXCJtYXRjaFwiLFxuICAgICAgICAgICAgICAgIHRlc3Q6ICh7IHZhbHVlIH0pID0+ICF2YWx1ZSB8fCB2YWx1ZSA9PT0gdGhpcy5wcm9wcy5wYXNzd29yZCxcbiAgICAgICAgICAgICAgICBpbnZhbGlkOiAoKSA9PiBfdCh0aGlzLnByb3BzLmxhYmVsSW52YWxpZCksXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgIH0pO1xuXG4gICAgcHJpdmF0ZSBvblZhbGlkYXRlID0gYXN5bmMgKGZpZWxkU3RhdGU6IElGaWVsZFN0YXRlKSA9PiB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMudmFsaWRhdGUoZmllbGRTdGF0ZSk7XG4gICAgICAgIGlmICh0aGlzLnByb3BzLm9uVmFsaWRhdGUpIHtcbiAgICAgICAgICAgIHRoaXMucHJvcHMub25WYWxpZGF0ZShyZXN1bHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gPEZpZWxkXG4gICAgICAgICAgICBpZD17dGhpcy5wcm9wcy5pZH1cbiAgICAgICAgICAgIHJlZj17dGhpcy5wcm9wcy5maWVsZFJlZn1cbiAgICAgICAgICAgIHR5cGU9XCJwYXNzd29yZFwiXG4gICAgICAgICAgICBsYWJlbD17X3QodGhpcy5wcm9wcy5sYWJlbCl9XG4gICAgICAgICAgICBhdXRvQ29tcGxldGU9e3RoaXMucHJvcHMuYXV0b0NvbXBsZXRlfVxuICAgICAgICAgICAgdmFsdWU9e3RoaXMucHJvcHMudmFsdWV9XG4gICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5wcm9wcy5vbkNoYW5nZX1cbiAgICAgICAgICAgIG9uVmFsaWRhdGU9e3RoaXMub25WYWxpZGF0ZX1cbiAgICAgICAgLz47XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBQYXNzcGhyYXNlQ29uZmlybUZpZWxkO1xuIl19