"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.PASSWORD_MIN_SCORE = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var Email = _interopRequireWildcard(require("../../../email"));

var _phonenumber = require("../../../phonenumber");

var _Modal = _interopRequireDefault(require("../../../Modal"));

var _languageHandler = require("../../../languageHandler");

var _SdkConfig = _interopRequireDefault(require("../../../SdkConfig"));

var _Registration = require("../../../Registration");

var _Validation = _interopRequireDefault(require("../elements/Validation"));

var _EmailField = _interopRequireDefault(require("./EmailField"));

var _PassphraseField = _interopRequireDefault(require("./PassphraseField"));

var _CountlyAnalytics = _interopRequireDefault(require("../../../CountlyAnalytics"));

var _Field = _interopRequireDefault(require("../elements/Field"));

var _RegistrationEmailPromptDialog = _interopRequireDefault(require("../dialogs/RegistrationEmailPromptDialog"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _CountryDropdown = _interopRequireDefault(require("./CountryDropdown"));

var _logger = require("matrix-js-sdk/src/logger");

var _PassphraseConfirmField = _interopRequireDefault(require("./PassphraseConfirmField"));

var _dec, _class, _class2, _temp;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var RegistrationField;

(function (RegistrationField) {
  RegistrationField["Email"] = "field_email";
  RegistrationField["PhoneNumber"] = "field_phone_number";
  RegistrationField["Username"] = "field_username";
  RegistrationField["Password"] = "field_password";
  RegistrationField["PasswordConfirm"] = "field_password_confirm";
})(RegistrationField || (RegistrationField = {}));

const PASSWORD_MIN_SCORE = 3; // safely unguessable: moderate protection from offline slow-hash scenario.

exports.PASSWORD_MIN_SCORE = PASSWORD_MIN_SCORE;
let RegistrationForm = (
/*
 * A pure UI component which displays a registration form.
 */
_dec = (0, _replaceableComponent.replaceableComponent)("views.auth.RegistrationForm"), _dec(_class = (_temp = _class2 = class RegistrationForm extends _react.default.PureComponent {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "onSubmit", async ev => {
      ev.preventDefault();
      ev.persist();
      if (!this.props.canSubmit) return;
      const allFieldsValid = await this.verifyFieldsBeforeSubmit();

      if (!allFieldsValid) {
        _CountlyAnalytics.default.instance.track("onboarding_registration_submit_failed");

        return;
      }

      if (this.state.email === '') {
        if (this.showEmail()) {
          _CountlyAnalytics.default.instance.track("onboarding_registration_submit_warn");

          _Modal.default.createTrackedDialog("Email prompt dialog", '', _RegistrationEmailPromptDialog.default, {
            onFinished: async (confirmed, email) => {
              if (confirmed) {
                this.setState({
                  email
                }, () => {
                  this.doSubmit(ev);
                });
              }
            }
          });
        } else {
          // user can't set an e-mail so don't prompt them to
          this.doSubmit(ev);
          return;
        }
      } else {
        this.doSubmit(ev);
      }
    });
    (0, _defineProperty2.default)(this, "onEmailChange", ev => {
      this.setState({
        email: ev.target.value
      });
    });
    (0, _defineProperty2.default)(this, "onEmailValidate", result => {
      this.markFieldValid(RegistrationField.Email, result.valid);
    });
    (0, _defineProperty2.default)(this, "validateEmailRules", (0, _Validation.default)({
      description: () => (0, _languageHandler._t)("Use an email address to recover your account"),
      hideDescriptionIfValid: true,
      rules: [{
        key: "required",

        test({
          value,
          allowEmpty
        }) {
          return allowEmpty || !this.authStepIsRequired('m.login.email.identity') || !!value;
        },

        invalid: () => (0, _languageHandler._t)("Enter email address (required on this homeserver)")
      }, {
        key: "email",
        test: ({
          value
        }) => !value || Email.looksValid(value),
        invalid: () => (0, _languageHandler._t)("Doesn't look like a valid email address")
      }]
    }));
    (0, _defineProperty2.default)(this, "onPasswordChange", ev => {
      this.setState({
        password: ev.target.value
      });
    });
    (0, _defineProperty2.default)(this, "onPasswordValidate", result => {
      this.markFieldValid(RegistrationField.Password, result.valid);
    });
    (0, _defineProperty2.default)(this, "onPasswordConfirmChange", ev => {
      this.setState({
        passwordConfirm: ev.target.value
      });
    });
    (0, _defineProperty2.default)(this, "onPasswordConfirmValidate", result => {
      this.markFieldValid(RegistrationField.PasswordConfirm, result.valid);
    });
    (0, _defineProperty2.default)(this, "onPhoneCountryChange", newVal => {
      this.setState({
        phoneCountry: newVal.iso2
      });
    });
    (0, _defineProperty2.default)(this, "onPhoneNumberChange", ev => {
      this.setState({
        phoneNumber: ev.target.value
      });
    });
    (0, _defineProperty2.default)(this, "onPhoneNumberValidate", async fieldState => {
      const result = await this.validatePhoneNumberRules(fieldState);
      this.markFieldValid(RegistrationField.PhoneNumber, result.valid);
      return result;
    });
    (0, _defineProperty2.default)(this, "validatePhoneNumberRules", (0, _Validation.default)({
      description: () => (0, _languageHandler._t)("Other users can invite you to rooms using your contact details"),
      hideDescriptionIfValid: true,
      rules: [{
        key: "required",

        test({
          value,
          allowEmpty
        }) {
          return allowEmpty || !this.authStepIsRequired('m.login.msisdn') || !!value;
        },

        invalid: () => (0, _languageHandler._t)("Enter phone number (required on this homeserver)")
      }, {
        key: "email",
        test: ({
          value
        }) => !value || (0, _phonenumber.looksValid)(value),
        invalid: () => (0, _languageHandler._t)("That phone number doesn't look quite right, please check and try again")
      }]
    }));
    (0, _defineProperty2.default)(this, "onUsernameChange", ev => {
      this.setState({
        username: ev.target.value
      });
    });
    (0, _defineProperty2.default)(this, "onUsernameValidate", async fieldState => {
      const result = await this.validateUsernameRules(fieldState);
      this.markFieldValid(RegistrationField.Username, result.valid);
      return result;
    });
    (0, _defineProperty2.default)(this, "validateUsernameRules", (0, _Validation.default)({
      description: (_, results) => {
        // omit the description if the only failing result is the `available` one as it makes no sense for it.
        if (results.every(({
          key,
          valid
        }) => key === "available" || valid)) return;
        return (0, _languageHandler._t)("Use lowercase letters, numbers, dashes and underscores only");
      },
      hideDescriptionIfValid: true,
      rules: [{
        key: "required",
        test: ({
          value,
          allowEmpty
        }) => allowEmpty || !!value,
        invalid: () => (0, _languageHandler._t)("Enter username")
      }, {
        key: "safeLocalpart",
        test: ({
          value
        }) => !value || _Registration.SAFE_LOCALPART_REGEX.test(value),
        invalid: () => (0, _languageHandler._t)("Some characters not allowed")
      }, {
        key: "available",
        final: true,
        test: async ({
          value
        }) => {
          if (!value) {
            return true;
          }

          try {
            await this.props.matrixClient.isUsernameAvailable(value);
            return true;
          } catch (err) {
            return false;
          }
        },
        invalid: () => (0, _languageHandler._t)("Someone already has that username. Try another or if it is you, sign in below.")
      }]
    }));
    this.state = {
      fieldValid: {},
      phoneCountry: this.props.defaultPhoneCountry,
      username: this.props.defaultUsername || "",
      email: this.props.defaultEmail || "",
      phoneNumber: this.props.defaultPhoneNumber || "",
      password: this.props.defaultPassword || "",
      passwordConfirm: this.props.defaultPassword || "",
      passwordComplexity: null
    };

    _CountlyAnalytics.default.instance.track("onboarding_registration_begin");
  }

  doSubmit(ev) {
    const email = this.state.email.trim();

    _CountlyAnalytics.default.instance.track("onboarding_registration_submit_ok", {
      email: !!email
    });

    const promise = this.props.onRegisterClick({
      username: this.state.username.trim(),
      password: this.state.password.trim(),
      email: email,
      phoneCountry: this.state.phoneCountry,
      phoneNumber: this.state.phoneNumber
    });

    if (promise) {
      ev.target.disabled = true;
      promise.finally(function () {
        ev.target.disabled = false;
      });
    }
  }

  async verifyFieldsBeforeSubmit() {
    // Blur the active element if any, so we first run its blur validation,
    // which is less strict than the pass we're about to do below for all fields.
    const activeElement = document.activeElement;

    if (activeElement) {
      activeElement.blur();
    }

    const fieldIDsInDisplayOrder = [RegistrationField.Username, RegistrationField.Password, RegistrationField.PasswordConfirm, RegistrationField.Email, RegistrationField.PhoneNumber]; // Run all fields with stricter validation that no longer allows empty
    // values for required fields.

    for (const fieldID of fieldIDsInDisplayOrder) {
      const field = this[fieldID];

      if (!field) {
        continue;
      } // We must wait for these validations to finish before queueing
      // up the setState below so our setState goes in the queue after
      // all the setStates from these validate calls (that's how we
      // know they've finished).


      await field.validate({
        allowEmpty: false
      });
    } // Validation and state updates are async, so we need to wait for them to complete
    // first. Queue a `setState` callback and wait for it to resolve.


    await new Promise(resolve => this.setState({}, resolve));

    if (this.allFieldsValid()) {
      return true;
    }

    const invalidField = this.findFirstInvalidField(fieldIDsInDisplayOrder);

    if (!invalidField) {
      return true;
    } // Focus the first invalid field and show feedback in the stricter mode
    // that no longer allows empty values for required fields.


    invalidField.focus();
    invalidField.validate({
      allowEmpty: false,
      focused: true
    });
    return false;
  }
  /**
   * @returns {boolean} true if all fields were valid last time they were validated.
   */


  allFieldsValid() {
    const keys = Object.keys(this.state.fieldValid);

    for (let i = 0; i < keys.length; ++i) {
      if (!this.state.fieldValid[keys[i]]) {
        return false;
      }
    }

    return true;
  }

  findFirstInvalidField(fieldIDs) {
    for (const fieldID of fieldIDs) {
      if (!this.state.fieldValid[fieldID] && this[fieldID]) {
        return this[fieldID];
      }
    }

    return null;
  }

  markFieldValid(fieldID, valid) {
    const {
      fieldValid
    } = this.state;
    fieldValid[fieldID] = valid;
    this.setState({
      fieldValid
    });
  }

  /**
   * A step is required if all flows include that step.
   *
   * @param {string} step A stage name to check
   * @returns {boolean} Whether it is required
   */
  authStepIsRequired(step) {
    return this.props.flows.every(flow => {
      return flow.stages.includes(step);
    });
  }
  /**
   * A step is used if any flows include that step.
   *
   * @param {string} step A stage name to check
   * @returns {boolean} Whether it is used
   */


  authStepIsUsed(step) {
    return this.props.flows.some(flow => {
      return flow.stages.includes(step);
    });
  }

  showEmail() {
    if (!this.authStepIsUsed('m.login.email.identity')) {
      return false;
    }

    return true;
  }

  showPhoneNumber() {
    const threePidLogin = !_SdkConfig.default.get().disable_3pid_login;

    if (!threePidLogin || !this.authStepIsUsed('m.login.msisdn')) {
      return false;
    }

    return true;
  }

  renderEmail() {
    if (!this.showEmail()) {
      return null;
    }

    const emailLabel = this.authStepIsRequired('m.login.email.identity') ? (0, _languageHandler._t)("Email") : (0, _languageHandler._t)("Email (optional)");
    return /*#__PURE__*/_react.default.createElement(_EmailField.default, {
      fieldRef: field => this[RegistrationField.Email] = field,
      label: emailLabel,
      value: this.state.email,
      validationRules: this.validateEmailRules.bind(this),
      onChange: this.onEmailChange,
      onValidate: this.onEmailValidate,
      onFocus: () => _CountlyAnalytics.default.instance.track("onboarding_registration_email_focus"),
      onBlur: () => _CountlyAnalytics.default.instance.track("onboarding_registration_email_blur")
    });
  }

  renderPassword() {
    return /*#__PURE__*/_react.default.createElement(_PassphraseField.default, {
      id: "mx_RegistrationForm_password",
      fieldRef: field => this[RegistrationField.Password] = field,
      minScore: PASSWORD_MIN_SCORE,
      value: this.state.password,
      onChange: this.onPasswordChange,
      onValidate: this.onPasswordValidate,
      onFocus: () => _CountlyAnalytics.default.instance.track("onboarding_registration_password_focus"),
      onBlur: () => _CountlyAnalytics.default.instance.track("onboarding_registration_password_blur")
    });
  }

  renderPasswordConfirm() {
    return /*#__PURE__*/_react.default.createElement(_PassphraseConfirmField.default, {
      id: "mx_RegistrationForm_passwordConfirm",
      fieldRef: field => this[RegistrationField.PasswordConfirm] = field,
      autoComplete: "new-password",
      value: this.state.passwordConfirm,
      password: this.state.password,
      onChange: this.onPasswordConfirmChange,
      onValidate: this.onPasswordConfirmValidate,
      onFocus: () => _CountlyAnalytics.default.instance.track("onboarding_registration_passwordConfirm_focus"),
      onBlur: () => _CountlyAnalytics.default.instance.track("onboarding_registration_passwordConfirm_blur")
    });
  }

  renderPhoneNumber() {
    if (!this.showPhoneNumber()) {
      return null;
    }

    const phoneLabel = this.authStepIsRequired('m.login.msisdn') ? (0, _languageHandler._t)("Phone") : (0, _languageHandler._t)("Phone (optional)");

    const phoneCountry = /*#__PURE__*/_react.default.createElement(_CountryDropdown.default, {
      value: this.state.phoneCountry,
      isSmall: true,
      showPrefix: true,
      onOptionChange: this.onPhoneCountryChange
    });

    return /*#__PURE__*/_react.default.createElement(_Field.default, {
      ref: field => this[RegistrationField.PhoneNumber] = field,
      type: "text",
      label: phoneLabel,
      value: this.state.phoneNumber,
      prefixComponent: phoneCountry,
      onChange: this.onPhoneNumberChange,
      onValidate: this.onPhoneNumberValidate
    });
  }

  renderUsername() {
    return /*#__PURE__*/_react.default.createElement(_Field.default, {
      id: "mx_RegistrationForm_username",
      ref: field => this[RegistrationField.Username] = field,
      type: "text",
      autoFocus: true,
      label: (0, _languageHandler._t)("Username"),
      placeholder: (0, _languageHandler._t)("Username").toLocaleLowerCase(),
      value: this.state.username,
      onChange: this.onUsernameChange,
      onValidate: this.onUsernameValidate,
      onFocus: () => _CountlyAnalytics.default.instance.track("onboarding_registration_username_focus"),
      onBlur: () => _CountlyAnalytics.default.instance.track("onboarding_registration_username_blur")
    });
  }

  render() {
    const registerButton = /*#__PURE__*/_react.default.createElement("input", {
      className: "mx_Login_submit",
      type: "submit",
      value: (0, _languageHandler._t)("Register"),
      disabled: !this.props.canSubmit
    });

    let emailHelperText = null;

    if (this.showEmail()) {
      if (this.showPhoneNumber()) {
        emailHelperText = /*#__PURE__*/_react.default.createElement("div", null, (0, _languageHandler._t)("Add an email to be able to reset your password."), " ", (0, _languageHandler._t)("Use email or phone to optionally be discoverable by existing contacts."));
      } else {
        emailHelperText = /*#__PURE__*/_react.default.createElement("div", null, (0, _languageHandler._t)("Add an email to be able to reset your password."), " ", (0, _languageHandler._t)("Use email to optionally be discoverable by existing contacts."));
      }
    }

    return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("form", {
      onSubmit: this.onSubmit
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_AuthBody_fieldRow"
    }, this.renderUsername()), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_AuthBody_fieldRow"
    }, this.renderPassword(), this.renderPasswordConfirm()), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_AuthBody_fieldRow"
    }, this.renderEmail(), this.renderPhoneNumber()), emailHelperText, registerButton));
  }

}, (0, _defineProperty2.default)(_class2, "defaultProps", {
  onValidationChange: _logger.logger.error,
  canSubmit: true
}), _temp)) || _class);
exports.default = RegistrationForm;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,