"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _languageHandler = require("../../../languageHandler");

var _CountlyAnalytics = _interopRequireDefault(require("../../../CountlyAnalytics"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _logger = require("matrix-js-sdk/src/logger");

var _dec, _class, _class2, _temp;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const DIV_ID = 'mx_recaptcha';
let CaptchaForm = (
/**
 * A pure UI component which displays a captcha form.
 */
_dec = (0, _replaceableComponent.replaceableComponent)("views.auth.CaptchaForm"), _dec(_class = (_temp = _class2 = class CaptchaForm extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "captchaWidgetId", void 0);
    (0, _defineProperty2.default)(this, "recaptchaContainer", /*#__PURE__*/(0, _react.createRef)());
    this.state = {
      errorText: undefined
    };

    _CountlyAnalytics.default.instance.track("onboarding_grecaptcha_begin");
  }

  componentDidMount() {
    // Just putting a script tag into the returned jsx doesn't work, annoyingly,
    // so we do this instead.
    if (this.isRecaptchaReady()) {
      // already loaded
      this.onCaptchaLoaded();
    } else {
      _logger.logger.log("Loading recaptcha script...");

      window.mxOnRecaptchaLoaded = () => {
        this.onCaptchaLoaded();
      };

      const scriptTag = document.createElement('script');
      scriptTag.setAttribute('src', `https://www.recaptcha.net/recaptcha/api.js?onload=mxOnRecaptchaLoaded&render=explicit`);
      this.recaptchaContainer.current.appendChild(scriptTag);
    }
  }

  componentWillUnmount() {
    this.resetRecaptcha();
  } // Borrowed directly from: https://github.com/codeep/react-recaptcha-google/commit/e118fa5670fa268426969323b2e7fe77698376ba


  isRecaptchaReady() {
    return typeof window !== "undefined" && typeof global.grecaptcha !== "undefined" && typeof global.grecaptcha.render === 'function';
  }

  renderRecaptcha(divId) {
    if (!this.isRecaptchaReady()) {
      _logger.logger.error("grecaptcha not loaded!");

      throw new Error("Recaptcha did not load successfully");
    }

    const publicKey = this.props.sitePublicKey;

    if (!publicKey) {
      _logger.logger.error("No public key for recaptcha!");

      throw new Error("This server has not supplied enough information for Recaptcha " + "authentication");
    }

    _logger.logger.info("Rendering to %s", divId);

    this.captchaWidgetId = global.grecaptcha.render(divId, {
      sitekey: publicKey,
      callback: this.props.onCaptchaResponse
    });
  }

  resetRecaptcha() {
    if (this.captchaWidgetId) {
      var _global, _global$grecaptcha;

      (_global = global) === null || _global === void 0 ? void 0 : (_global$grecaptcha = _global.grecaptcha) === null || _global$grecaptcha === void 0 ? void 0 : _global$grecaptcha.reset(this.captchaWidgetId);
    }
  }

  onCaptchaLoaded() {
    _logger.logger.log("Loaded recaptcha script.");

    try {
      this.renderRecaptcha(DIV_ID); // clear error if re-rendered

      this.setState({
        errorText: null
      });

      _CountlyAnalytics.default.instance.track("onboarding_grecaptcha_loaded");
    } catch (e) {
      this.setState({
        errorText: e.toString()
      });

      _CountlyAnalytics.default.instance.track("onboarding_grecaptcha_error", {
        error: e.toString()
      });
    }
  }

  render() {
    let error = null;

    if (this.state.errorText) {
      error = /*#__PURE__*/_react.default.createElement("div", {
        className: "error"
      }, this.state.errorText);
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      ref: this.recaptchaContainer
    }, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("This homeserver would like to make sure you are not a robot.")), /*#__PURE__*/_react.default.createElement("div", {
      id: DIV_ID
    }), error);
  }

}, (0, _defineProperty2.default)(_class2, "defaultProps", {
  onCaptchaResponse: () => {}
}), _temp)) || _class);
exports.default = CaptchaForm;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,