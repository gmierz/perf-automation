"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _SdkConfig = _interopRequireDefault(require("../../../SdkConfig"));

var _Validation = _interopRequireDefault(require("../elements/Validation"));

var _languageHandler = require("../../../languageHandler");

var _Field = _interopRequireDefault(require("../elements/Field"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _dec, _class, _class2, _temp;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

let PassphraseField = (_dec = (0, _replaceableComponent.replaceableComponent)("views.auth.PassphraseField"), _dec(_class = (_temp = _class2 = class PassphraseField extends _react.PureComponent {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "validate", (0, _Validation.default)({
      description: function (complexity) {
        const score = complexity ? complexity.score : 0;
        return /*#__PURE__*/_react.default.createElement("progress", {
          className: "mx_PassphraseField_progress",
          max: 4,
          value: score
        });
      },
      deriveData: async ({
        value
      }) => {
        if (!value) return null;
        const {
          scorePassword
        } = await Promise.resolve().then(() => _interopRequireWildcard(require('../../../utils/PasswordScorer')));
        return scorePassword(value);
      },
      rules: [{
        key: "required",
        test: ({
          value,
          allowEmpty
        }) => allowEmpty || !!value,
        invalid: () => (0, _languageHandler._t)(this.props.labelEnterPassword)
      }, {
        key: "complexity",
        test: async function ({
          value
        }, complexity) {
          if (!value) {
            return false;
          }

          const safe = complexity.score >= this.props.minScore;

          const allowUnsafe = _SdkConfig.default.get()["dangerously_allow_unsafe_and_insecure_passwords"];

          return allowUnsafe || safe;
        },
        valid: function (complexity) {
          // Unsafe passwords that are valid are only possible through a
          // configuration flag. We'll print some helper text to signal
          // to the user that their password is allowed, but unsafe.
          if (complexity.score >= this.props.minScore) {
            return (0, _languageHandler._t)(this.props.labelStrongPassword);
          }

          return (0, _languageHandler._t)(this.props.labelAllowedButUnsafe);
        },
        invalid: function (complexity) {
          if (!complexity) {
            return null;
          }

          const {
            feedback
          } = complexity;
          return feedback.warning || feedback.suggestions[0] || (0, _languageHandler._t)("Keep going...");
        }
      }]
    }));
    (0, _defineProperty2.default)(this, "onValidate", async fieldState => {
      const result = await this.validate(fieldState);

      if (this.props.onValidate) {
        this.props.onValidate(result);
      }

      return result;
    });
  }

  render() {
    return /*#__PURE__*/_react.default.createElement(_Field.default, {
      id: this.props.id,
      autoFocus: this.props.autoFocus,
      className: (0, _classnames.default)("mx_PassphraseField", this.props.className),
      ref: this.props.fieldRef,
      type: "password",
      autoComplete: "new-password",
      label: (0, _languageHandler._t)(this.props.label),
      value: this.props.value,
      onChange: this.props.onChange,
      onValidate: this.onValidate
    });
  }

}, (0, _defineProperty2.default)(_class2, "defaultProps", {
  label: (0, _languageHandler._td)("Password"),
  labelEnterPassword: (0, _languageHandler._td)("Enter password"),
  labelStrongPassword: (0, _languageHandler._td)("Nice, strong password!"),
  labelAllowedButUnsafe: (0, _languageHandler._td)("Password is allowed, but unsafe")
}), _temp)) || _class);
var _default = PassphraseField;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,