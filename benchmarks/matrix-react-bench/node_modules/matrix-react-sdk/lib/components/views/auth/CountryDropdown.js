"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _phonenumber = require("../../../phonenumber");

var _SdkConfig = _interopRequireDefault(require("../../../SdkConfig"));

var _languageHandler = require("../../../languageHandler");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _Dropdown = _interopRequireDefault(require("../elements/Dropdown"));

var _dec, _class;

const COUNTRIES_BY_ISO2 = {};

for (const c of _phonenumber.COUNTRIES) {
  COUNTRIES_BY_ISO2[c.iso2] = c;
}

function countryMatchesSearchQuery(query, country) {
  // Remove '+' if present (when searching for a prefix)
  if (query[0] === '+') {
    query = query.slice(1);
  }

  if (country.name.toUpperCase().indexOf(query.toUpperCase()) == 0) return true;
  if (country.iso2 == query.toUpperCase()) return true;
  if (country.prefix.indexOf(query) !== -1) return true;
  return false;
}

let CountryDropdown = (_dec = (0, _replaceableComponent.replaceableComponent)("views.auth.CountryDropdown"), _dec(_class = class CountryDropdown extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "onSearchChange", search => {
      this.setState({
        searchQuery: search
      });
    });
    (0, _defineProperty2.default)(this, "onOptionChange", iso2 => {
      this.props.onOptionChange(COUNTRIES_BY_ISO2[iso2]);
    });
    (0, _defineProperty2.default)(this, "getShortOption", iso2 => {
      if (!this.props.isSmall) {
        return undefined;
      }

      let countryPrefix;

      if (this.props.showPrefix) {
        countryPrefix = '+' + COUNTRIES_BY_ISO2[iso2].prefix;
      }

      return /*#__PURE__*/_react.default.createElement("span", {
        className: "mx_CountryDropdown_shortOption"
      }, this.flagImgForIso2(iso2), countryPrefix);
    });
    let defaultCountry = _phonenumber.COUNTRIES[0];

    const defaultCountryCode = _SdkConfig.default.get()["defaultCountryCode"];

    if (defaultCountryCode) {
      const country = _phonenumber.COUNTRIES.find(c => c.iso2 === defaultCountryCode.toUpperCase());

      if (country) defaultCountry = country;
    }

    this.state = {
      searchQuery: '',
      defaultCountry
    };
  }

  componentDidMount() {
    if (!this.props.value) {
      // If no value is given, we start with the default
      // country selected, but our parent component
      // doesn't know this, therefore we do this.
      this.props.onOptionChange(this.state.defaultCountry);
    }
  }

  flagImgForIso2(iso2) {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_Dropdown_option_emoji"
    }, (0, _phonenumber.getEmojiFlag)(iso2));
  }

  render() {
    let displayedCountries;

    if (this.state.searchQuery) {
      displayedCountries = _phonenumber.COUNTRIES.filter(countryMatchesSearchQuery.bind(this, this.state.searchQuery));

      if (this.state.searchQuery.length == 2 && COUNTRIES_BY_ISO2[this.state.searchQuery.toUpperCase()]) {
        // exact ISO2 country name match: make the first result the matches ISO2
        const matched = COUNTRIES_BY_ISO2[this.state.searchQuery.toUpperCase()];
        displayedCountries = displayedCountries.filter(c => {
          return c.iso2 != matched.iso2;
        });
        displayedCountries.unshift(matched);
      }
    } else {
      displayedCountries = _phonenumber.COUNTRIES;
    }

    const options = displayedCountries.map(country => {
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_CountryDropdown_option",
        key: country.iso2
      }, this.flagImgForIso2(country.iso2), (0, _languageHandler._t)(country.name), " (+", country.prefix, ")");
    }); // default value here too, otherwise we need to handle null / undefined
    // values between mounting and the initial value propgating

    const value = this.props.value || this.state.defaultCountry.iso2;
    return /*#__PURE__*/_react.default.createElement(_Dropdown.default, {
      id: "mx_CountryDropdown",
      className: this.props.className + " mx_CountryDropdown",
      onOptionChange: this.onOptionChange,
      onSearchChange: this.onSearchChange,
      menuWidth: 298,
      getShortOption: this.getShortOption,
      value: value,
      searchEnabled: true,
      disabled: this.props.disabled,
      label: (0, _languageHandler._t)("Country Dropdown")
    }, options);
  }

}) || _class);
exports.default = CountryDropdown;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,