"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var sdk = _interopRequireWildcard(require("../../../index"));

var _SdkConfig = _interopRequireDefault(require("../../../SdkConfig"));

var _AuthPage = _interopRequireDefault(require("./AuthPage"));

var _languageHandler = require("../../../languageHandler");

var _SettingsStore = _interopRequireDefault(require("../../../settings/SettingsStore"));

var _UIFeature = require("../../../settings/UIFeature");

var _CountlyAnalytics = _interopRequireDefault(require("../../../CountlyAnalytics"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _LanguageSelector = _interopRequireDefault(require("./LanguageSelector"));

var _dec, _class;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// translatable strings for Welcome pages
(0, _languageHandler._td)("Sign in with SSO");
let Welcome = (_dec = (0, _replaceableComponent.replaceableComponent)("views.auth.Welcome"), _dec(_class = class Welcome extends _react.default.PureComponent {
  constructor(props) {
    super(props);

    _CountlyAnalytics.default.instance.track("onboarding_welcome");
  }

  render() {
    // FIXME: Using an import will result in wrench-element-tests failures
    const EmbeddedPage = sdk.getComponent("structures.EmbeddedPage");

    const pagesConfig = _SdkConfig.default.get().embeddedPages;

    let pageUrl = null;

    if (pagesConfig) {
      pageUrl = pagesConfig.welcomeUrl;
    }

    if (!pageUrl) {
      pageUrl = 'welcome.html';
    }

    return /*#__PURE__*/_react.default.createElement(_AuthPage.default, null, /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)("mx_Welcome", {
        mx_WelcomePage_registrationDisabled: !_SettingsStore.default.getValue(_UIFeature.UIFeature.Registration)
      })
    }, /*#__PURE__*/_react.default.createElement(EmbeddedPage, {
      className: "mx_WelcomePage",
      url: pageUrl,
      replaceMap: {
        "$riot:ssoUrl": "#/start_sso",
        "$riot:casUrl": "#/start_cas"
      }
    }), /*#__PURE__*/_react.default.createElement(_LanguageSelector.default, null)));
  }

}) || _class);
exports.default = Welcome;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL2F1dGgvV2VsY29tZS50c3giXSwibmFtZXMiOlsiV2VsY29tZSIsIlJlYWN0IiwiUHVyZUNvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwicHJvcHMiLCJDb3VudGx5QW5hbHl0aWNzIiwiaW5zdGFuY2UiLCJ0cmFjayIsInJlbmRlciIsIkVtYmVkZGVkUGFnZSIsInNkayIsImdldENvbXBvbmVudCIsInBhZ2VzQ29uZmlnIiwiU2RrQ29uZmlnIiwiZ2V0IiwiZW1iZWRkZWRQYWdlcyIsInBhZ2VVcmwiLCJ3ZWxjb21lVXJsIiwibXhfV2VsY29tZVBhZ2VfcmVnaXN0cmF0aW9uRGlzYWJsZWQiLCJTZXR0aW5nc1N0b3JlIiwiZ2V0VmFsdWUiLCJVSUZlYXR1cmUiLCJSZWdpc3RyYXRpb24iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQWdCQTs7QUFDQTs7QUFFQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7Ozs7Ozs7QUFFQTtBQUNBLDBCQUFJLGtCQUFKO0lBT3FCQSxPLFdBRHBCLGdEQUFxQixvQkFBckIsQyxnQkFBRCxNQUNxQkEsT0FEckIsU0FDcUNDLGVBQU1DLGFBRDNDLENBQ2lFO0FBQzdEQyxFQUFBQSxXQUFXLENBQUNDLEtBQUQsRUFBZ0I7QUFDdkIsVUFBTUEsS0FBTjs7QUFFQUMsOEJBQWlCQyxRQUFqQixDQUEwQkMsS0FBMUIsQ0FBZ0Msb0JBQWhDO0FBQ0g7O0FBRU1DLEVBQUFBLE1BQU0sR0FBb0I7QUFDN0I7QUFDQSxVQUFNQyxZQUFZLEdBQUdDLEdBQUcsQ0FBQ0MsWUFBSixDQUFpQix5QkFBakIsQ0FBckI7O0FBRUEsVUFBTUMsV0FBVyxHQUFHQyxtQkFBVUMsR0FBVixHQUFnQkMsYUFBcEM7O0FBQ0EsUUFBSUMsT0FBTyxHQUFHLElBQWQ7O0FBQ0EsUUFBSUosV0FBSixFQUFpQjtBQUNiSSxNQUFBQSxPQUFPLEdBQUdKLFdBQVcsQ0FBQ0ssVUFBdEI7QUFDSDs7QUFDRCxRQUFJLENBQUNELE9BQUwsRUFBYztBQUNWQSxNQUFBQSxPQUFPLEdBQUcsY0FBVjtBQUNIOztBQUVELHdCQUNJLDZCQUFDLGlCQUFELHFCQUNJO0FBQUssTUFBQSxTQUFTLEVBQUUseUJBQVcsWUFBWCxFQUF5QjtBQUNyQ0UsUUFBQUEsbUNBQW1DLEVBQUUsQ0FBQ0MsdUJBQWNDLFFBQWQsQ0FBdUJDLHFCQUFVQyxZQUFqQztBQURELE9BQXpCO0FBQWhCLG9CQUdJLDZCQUFDLFlBQUQ7QUFDSSxNQUFBLFNBQVMsRUFBQyxnQkFEZDtBQUVJLE1BQUEsR0FBRyxFQUFFTixPQUZUO0FBR0ksTUFBQSxVQUFVLEVBQUU7QUFDUix3QkFBZ0IsYUFEUjtBQUVSLHdCQUFnQjtBQUZSO0FBSGhCLE1BSEosZUFXSSw2QkFBQyx5QkFBRCxPQVhKLENBREosQ0FESjtBQWlCSDs7QUFyQzRELEMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuQ29weXJpZ2h0IDIwMTkgTmV3IFZlY3RvciBMdGRcblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSBcImNsYXNzbmFtZXNcIjtcblxuaW1wb3J0ICogYXMgc2RrIGZyb20gXCIuLi8uLi8uLi9pbmRleFwiO1xuaW1wb3J0IFNka0NvbmZpZyBmcm9tICcuLi8uLi8uLi9TZGtDb25maWcnO1xuaW1wb3J0IEF1dGhQYWdlIGZyb20gXCIuL0F1dGhQYWdlXCI7XG5pbXBvcnQgeyBfdGQgfSBmcm9tIFwiLi4vLi4vLi4vbGFuZ3VhZ2VIYW5kbGVyXCI7XG5pbXBvcnQgU2V0dGluZ3NTdG9yZSBmcm9tIFwiLi4vLi4vLi4vc2V0dGluZ3MvU2V0dGluZ3NTdG9yZVwiO1xuaW1wb3J0IHsgVUlGZWF0dXJlIH0gZnJvbSBcIi4uLy4uLy4uL3NldHRpbmdzL1VJRmVhdHVyZVwiO1xuaW1wb3J0IENvdW50bHlBbmFseXRpY3MgZnJvbSBcIi4uLy4uLy4uL0NvdW50bHlBbmFseXRpY3NcIjtcbmltcG9ydCB7IHJlcGxhY2VhYmxlQ29tcG9uZW50IH0gZnJvbSBcIi4uLy4uLy4uL3V0aWxzL3JlcGxhY2VhYmxlQ29tcG9uZW50XCI7XG5pbXBvcnQgTGFuZ3VhZ2VTZWxlY3RvciBmcm9tIFwiLi9MYW5ndWFnZVNlbGVjdG9yXCI7XG5cbi8vIHRyYW5zbGF0YWJsZSBzdHJpbmdzIGZvciBXZWxjb21lIHBhZ2VzXG5fdGQoXCJTaWduIGluIHdpdGggU1NPXCIpO1xuXG5pbnRlcmZhY2UgSVByb3BzIHtcblxufVxuXG5AcmVwbGFjZWFibGVDb21wb25lbnQoXCJ2aWV3cy5hdXRoLldlbGNvbWVcIilcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFdlbGNvbWUgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50PElQcm9wcz4ge1xuICAgIGNvbnN0cnVjdG9yKHByb3BzOiBJUHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuXG4gICAgICAgIENvdW50bHlBbmFseXRpY3MuaW5zdGFuY2UudHJhY2soXCJvbmJvYXJkaW5nX3dlbGNvbWVcIik7XG4gICAgfVxuXG4gICAgcHVibGljIHJlbmRlcigpOiBSZWFjdC5SZWFjdE5vZGUge1xuICAgICAgICAvLyBGSVhNRTogVXNpbmcgYW4gaW1wb3J0IHdpbGwgcmVzdWx0IGluIHdyZW5jaC1lbGVtZW50LXRlc3RzIGZhaWx1cmVzXG4gICAgICAgIGNvbnN0IEVtYmVkZGVkUGFnZSA9IHNkay5nZXRDb21wb25lbnQoXCJzdHJ1Y3R1cmVzLkVtYmVkZGVkUGFnZVwiKTtcblxuICAgICAgICBjb25zdCBwYWdlc0NvbmZpZyA9IFNka0NvbmZpZy5nZXQoKS5lbWJlZGRlZFBhZ2VzO1xuICAgICAgICBsZXQgcGFnZVVybCA9IG51bGw7XG4gICAgICAgIGlmIChwYWdlc0NvbmZpZykge1xuICAgICAgICAgICAgcGFnZVVybCA9IHBhZ2VzQ29uZmlnLndlbGNvbWVVcmw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFwYWdlVXJsKSB7XG4gICAgICAgICAgICBwYWdlVXJsID0gJ3dlbGNvbWUuaHRtbCc7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPEF1dGhQYWdlPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc05hbWVzKFwibXhfV2VsY29tZVwiLCB7XG4gICAgICAgICAgICAgICAgICAgIG14X1dlbGNvbWVQYWdlX3JlZ2lzdHJhdGlvbkRpc2FibGVkOiAhU2V0dGluZ3NTdG9yZS5nZXRWYWx1ZShVSUZlYXR1cmUuUmVnaXN0cmF0aW9uKSxcbiAgICAgICAgICAgICAgICB9KX0+XG4gICAgICAgICAgICAgICAgICAgIDxFbWJlZGRlZFBhZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cIm14X1dlbGNvbWVQYWdlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybD17cGFnZVVybH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcGxhY2VNYXA9e3tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIiRyaW90OnNzb1VybFwiOiBcIiMvc3RhcnRfc3NvXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIkcmlvdDpjYXNVcmxcIjogXCIjL3N0YXJ0X2Nhc1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgPExhbmd1YWdlU2VsZWN0b3IgLz5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvQXV0aFBhZ2U+XG4gICAgICAgICk7XG4gICAgfVxufVxuIl19