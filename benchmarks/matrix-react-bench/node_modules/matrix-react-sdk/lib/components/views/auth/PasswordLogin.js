"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _languageHandler = require("../../../languageHandler");

var _SdkConfig = _interopRequireDefault(require("../../../SdkConfig"));

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

var _CountlyAnalytics = _interopRequireDefault(require("../../../CountlyAnalytics"));

var _Validation = _interopRequireDefault(require("../elements/Validation"));

var _Field = _interopRequireDefault(require("../elements/Field"));

var _CountryDropdown = _interopRequireDefault(require("./CountryDropdown"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _EmailField = _interopRequireDefault(require("./EmailField"));

var _dec, _class, _class2, _temp;

// For validating phone numbers without country codes
const PHONE_NUMBER_REGEX = /^[0-9()\-\s]*$/;
var LoginField;
/*
 * A pure UI component which displays a username/password form.
 * The email/username/phone fields are fully-controlled, the password field is not.
 */

(function (LoginField) {
  LoginField["Email"] = "login_field_email";
  LoginField["MatrixId"] = "login_field_mxid";
  LoginField["Phone"] = "login_field_phone";
  LoginField["Password"] = "login_field_phone";
})(LoginField || (LoginField = {}));

let PasswordLogin = (_dec = (0, _replaceableComponent.replaceableComponent)("views.auth.PasswordLogin"), _dec(_class = (_temp = _class2 = class PasswordLogin extends _react.default.PureComponent {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "onForgotPasswordClick", ev => {
      ev.preventDefault();
      ev.stopPropagation();
      this.props.onForgotPasswordClick();
    });
    (0, _defineProperty2.default)(this, "onSubmitForm", async ev => {
      ev.preventDefault();
      const allFieldsValid = await this.verifyFieldsBeforeSubmit();

      if (!allFieldsValid) {
        _CountlyAnalytics.default.instance.track("onboarding_registration_submit_failed");

        return;
      }

      let username = ''; // XXX: Synapse breaks if you send null here:

      let phoneCountry = null;
      let phoneNumber = null;

      switch (this.state.loginType) {
        case LoginField.Email:
        case LoginField.MatrixId:
          username = this.props.username;
          break;

        case LoginField.Phone:
          phoneCountry = this.props.phoneCountry;
          phoneNumber = this.props.phoneNumber;
          break;
      }

      this.props.onSubmit(username, phoneCountry, phoneNumber, this.state.password);
    });
    (0, _defineProperty2.default)(this, "onUsernameChanged", ev => {
      this.props.onUsernameChanged(ev.target.value);
    });
    (0, _defineProperty2.default)(this, "onUsernameFocus", () => {
      if (this.state.loginType === LoginField.MatrixId) {
        _CountlyAnalytics.default.instance.track("onboarding_login_mxid_focus");
      } else {
        _CountlyAnalytics.default.instance.track("onboarding_login_email_focus");
      }
    });
    (0, _defineProperty2.default)(this, "onUsernameBlur", ev => {
      if (this.state.loginType === LoginField.MatrixId) {
        _CountlyAnalytics.default.instance.track("onboarding_login_mxid_blur");
      } else {
        _CountlyAnalytics.default.instance.track("onboarding_login_email_blur");
      }

      this.props.onUsernameBlur(ev.target.value);
    });
    (0, _defineProperty2.default)(this, "onLoginTypeChange", ev => {
      const loginType = ev.target.value;
      this.setState({
        loginType
      });
      this.props.onUsernameChanged(""); // Reset because email and username use the same state

      _CountlyAnalytics.default.instance.track("onboarding_login_type_changed", {
        loginType
      });
    });
    (0, _defineProperty2.default)(this, "onPhoneCountryChanged", country => {
      this.props.onPhoneCountryChanged(country.iso2);
    });
    (0, _defineProperty2.default)(this, "onPhoneNumberChanged", ev => {
      this.props.onPhoneNumberChanged(ev.target.value);
    });
    (0, _defineProperty2.default)(this, "onPhoneNumberFocus", () => {
      _CountlyAnalytics.default.instance.track("onboarding_login_phone_number_focus");
    });
    (0, _defineProperty2.default)(this, "onPhoneNumberBlur", ev => {
      _CountlyAnalytics.default.instance.track("onboarding_login_phone_number_blur");
    });
    (0, _defineProperty2.default)(this, "onPasswordChanged", ev => {
      this.setState({
        password: ev.target.value
      });
    });
    (0, _defineProperty2.default)(this, "validateUsernameRules", (0, _Validation.default)({
      rules: [{
        key: "required",

        test({
          value,
          allowEmpty
        }) {
          return allowEmpty || !!value;
        },

        invalid: () => (0, _languageHandler._t)("Enter username")
      }]
    }));
    (0, _defineProperty2.default)(this, "onUsernameValidate", async fieldState => {
      const result = await this.validateUsernameRules(fieldState);
      this.markFieldValid(LoginField.MatrixId, result.valid);
      return result;
    });
    (0, _defineProperty2.default)(this, "onEmailValidate", result => {
      this.markFieldValid(LoginField.Email, result.valid);
    });
    (0, _defineProperty2.default)(this, "validatePhoneNumberRules", (0, _Validation.default)({
      rules: [{
        key: "required",

        test({
          value,
          allowEmpty
        }) {
          return allowEmpty || !!value;
        },

        invalid: () => (0, _languageHandler._t)("Enter phone number")
      }, {
        key: "number",
        test: ({
          value
        }) => !value || PHONE_NUMBER_REGEX.test(value),
        invalid: () => (0, _languageHandler._t)("That phone number doesn't look quite right, please check and try again")
      }]
    }));
    (0, _defineProperty2.default)(this, "onPhoneNumberValidate", async fieldState => {
      const result = await this.validatePhoneNumberRules(fieldState);
      this.markFieldValid(LoginField.Password, result.valid);
      return result;
    });
    (0, _defineProperty2.default)(this, "validatePasswordRules", (0, _Validation.default)({
      rules: [{
        key: "required",

        test({
          value,
          allowEmpty
        }) {
          return allowEmpty || !!value;
        },

        invalid: () => (0, _languageHandler._t)("Enter password")
      }]
    }));
    (0, _defineProperty2.default)(this, "onPasswordValidate", async fieldState => {
      const result = await this.validatePasswordRules(fieldState);
      this.markFieldValid(LoginField.Password, result.valid);
      return result;
    });
    this.state = {
      // Field error codes by field ID
      fieldValid: {},
      loginType: LoginField.MatrixId,
      password: ""
    };
  }

  async verifyFieldsBeforeSubmit() {
    // Blur the active element if any, so we first run its blur validation,
    // which is less strict than the pass we're about to do below for all fields.
    const activeElement = document.activeElement;

    if (activeElement) {
      activeElement.blur();
    }

    const fieldIDsInDisplayOrder = [this.state.loginType, LoginField.Password]; // Run all fields with stricter validation that no longer allows empty
    // values for required fields.

    for (const fieldID of fieldIDsInDisplayOrder) {
      const field = this[fieldID];

      if (!field) {
        continue;
      } // We must wait for these validations to finish before queueing
      // up the setState below so our setState goes in the queue after
      // all the setStates from these validate calls (that's how we
      // know they've finished).


      await field.validate({
        allowEmpty: false
      });
    } // Validation and state updates are async, so we need to wait for them to complete
    // first. Queue a `setState` callback and wait for it to resolve.


    await new Promise(resolve => this.setState({}, resolve));

    if (this.allFieldsValid()) {
      return true;
    }

    const invalidField = this.findFirstInvalidField(fieldIDsInDisplayOrder);

    if (!invalidField) {
      return true;
    } // Focus the first invalid field and show feedback in the stricter mode
    // that no longer allows empty values for required fields.


    invalidField.focus();
    invalidField.validate({
      allowEmpty: false,
      focused: true
    });
    return false;
  }

  allFieldsValid() {
    const keys = Object.keys(this.state.fieldValid);

    for (let i = 0; i < keys.length; ++i) {
      if (!this.state.fieldValid[keys[i]]) {
        return false;
      }
    }

    return true;
  }

  findFirstInvalidField(fieldIDs) {
    for (const fieldID of fieldIDs) {
      if (!this.state.fieldValid[fieldID] && this[fieldID]) {
        return this[fieldID];
      }
    }

    return null;
  }

  markFieldValid(fieldID, valid) {
    const {
      fieldValid
    } = this.state;
    fieldValid[fieldID] = valid;
    this.setState({
      fieldValid
    });
  }

  renderLoginField(loginType, autoFocus) {
    const classes = {
      error: false
    };

    switch (loginType) {
      case LoginField.Email:
        classes.error = this.props.loginIncorrect && !this.props.username;
        return /*#__PURE__*/_react.default.createElement(_EmailField.default, {
          className: (0, _classnames.default)(classes),
          name: "username" // make it a little easier for browser's remember-password
          ,
          autoComplete: "email",
          type: "email",
          key: "email_input",
          placeholder: "joe@example.com",
          value: this.props.username,
          onChange: this.onUsernameChanged,
          onFocus: this.onUsernameFocus,
          onBlur: this.onUsernameBlur,
          disabled: this.props.disableSubmit,
          autoFocus: autoFocus,
          onValidate: this.onEmailValidate,
          fieldRef: field => this[LoginField.Email] = field
        });

      case LoginField.MatrixId:
        classes.error = this.props.loginIncorrect && !this.props.username;
        return /*#__PURE__*/_react.default.createElement(_Field.default, {
          className: (0, _classnames.default)(classes),
          name: "username" // make it a little easier for browser's remember-password
          ,
          autoComplete: "username",
          key: "username_input",
          type: "text",
          label: (0, _languageHandler._t)("Username"),
          placeholder: (0, _languageHandler._t)("Username").toLocaleLowerCase(),
          value: this.props.username,
          onChange: this.onUsernameChanged,
          onFocus: this.onUsernameFocus,
          onBlur: this.onUsernameBlur,
          disabled: this.props.disableSubmit,
          autoFocus: autoFocus,
          onValidate: this.onUsernameValidate,
          ref: field => this[LoginField.MatrixId] = field
        });

      case LoginField.Phone:
        {
          classes.error = this.props.loginIncorrect && !this.props.phoneNumber;

          const phoneCountry = /*#__PURE__*/_react.default.createElement(_CountryDropdown.default, {
            value: this.props.phoneCountry,
            isSmall: true,
            showPrefix: true,
            onOptionChange: this.onPhoneCountryChanged
          });

          return /*#__PURE__*/_react.default.createElement(_Field.default, {
            className: (0, _classnames.default)(classes),
            name: "phoneNumber",
            autoComplete: "tel-national",
            key: "phone_input",
            type: "text",
            label: (0, _languageHandler._t)("Phone"),
            value: this.props.phoneNumber,
            prefixComponent: phoneCountry,
            onChange: this.onPhoneNumberChanged,
            onFocus: this.onPhoneNumberFocus,
            onBlur: this.onPhoneNumberBlur,
            disabled: this.props.disableSubmit,
            autoFocus: autoFocus,
            onValidate: this.onPhoneNumberValidate,
            ref: field => this[LoginField.Password] = field
          });
        }
    }
  }

  isLoginEmpty() {
    switch (this.state.loginType) {
      case LoginField.Email:
      case LoginField.MatrixId:
        return !this.props.username;

      case LoginField.Phone:
        return !this.props.phoneCountry || !this.props.phoneNumber;
    }
  }

  render() {
    let forgotPasswordJsx;

    if (this.props.onForgotPasswordClick) {
      forgotPasswordJsx = /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        className: "mx_Login_forgot",
        disabled: this.props.busy,
        kind: "link",
        onClick: this.onForgotPasswordClick
      }, (0, _languageHandler._t)("Forgot password?"));
    }

    const pwFieldClass = (0, _classnames.default)({
      error: this.props.loginIncorrect && !this.isLoginEmpty() // only error password if error isn't top field

    }); // If login is empty, autoFocus login, otherwise autoFocus password.
    // this is for when auto server discovery remounts us when the user tries to tab from username to password

    const autoFocusPassword = !this.isLoginEmpty();
    const loginField = this.renderLoginField(this.state.loginType, !autoFocusPassword);
    let loginType;

    if (!_SdkConfig.default.get().disable_3pid_login) {
      loginType = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_Login_type_container"
      }, /*#__PURE__*/_react.default.createElement("label", {
        className: "mx_Login_type_label"
      }, (0, _languageHandler._t)('Sign in with')), /*#__PURE__*/_react.default.createElement(_Field.default, {
        element: "select",
        value: this.state.loginType,
        onChange: this.onLoginTypeChange,
        disabled: this.props.disableSubmit
      }, /*#__PURE__*/_react.default.createElement("option", {
        key: LoginField.MatrixId,
        value: LoginField.MatrixId
      }, (0, _languageHandler._t)('Username')), /*#__PURE__*/_react.default.createElement("option", {
        key: LoginField.Email,
        value: LoginField.Email
      }, (0, _languageHandler._t)('Email address')), /*#__PURE__*/_react.default.createElement("option", {
        key: LoginField.Password,
        value: LoginField.Password
      }, (0, _languageHandler._t)('Phone'))));
    }

    return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("form", {
      onSubmit: this.onSubmitForm
    }, loginType, loginField, /*#__PURE__*/_react.default.createElement(_Field.default, {
      className: pwFieldClass,
      autoComplete: "password",
      type: "password",
      name: "password",
      label: (0, _languageHandler._t)('Password'),
      value: this.state.password,
      onChange: this.onPasswordChanged,
      disabled: this.props.disableSubmit,
      autoFocus: autoFocusPassword,
      onValidate: this.onPasswordValidate,
      ref: field => this[LoginField.Password] = field
    }), forgotPasswordJsx, !this.props.busy && /*#__PURE__*/_react.default.createElement("input", {
      className: "mx_Login_submit",
      type: "submit",
      value: (0, _languageHandler._t)('Sign in'),
      disabled: this.props.disableSubmit
    })));
  }

}, (0, _defineProperty2.default)(_class2, "defaultProps", {
  onUsernameChanged: function () {},
  onUsernameBlur: function () {},
  onPhoneCountryChanged: function () {},
  onPhoneNumberChanged: function () {},
  loginIncorrect: false,
  disableSubmit: false
}), _temp)) || _class);
exports.default = PasswordLogin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,