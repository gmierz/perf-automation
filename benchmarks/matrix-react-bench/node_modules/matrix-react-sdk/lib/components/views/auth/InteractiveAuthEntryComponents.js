"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TermsAuthEntry = exports.SSOAuthEntry = exports.RecaptchaAuthEntry = exports.PasswordAuthEntry = exports.MsisdnAuthEntry = exports.FallbackAuthEntry = exports.EmailIdentityAuthEntry = exports.DEFAULT_PHASE = void 0;
exports.default = getEntryComponentForLoginType;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _interactiveAuth = require("matrix-js-sdk/src/interactive-auth");

var _languageHandler = require("../../../languageHandler");

var _SettingsStore = _interopRequireDefault(require("../../../settings/SettingsStore"));

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

var _Spinner = _interopRequireDefault(require("../elements/Spinner"));

var _CountlyAnalytics = _interopRequireDefault(require("../../../CountlyAnalytics"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _Field = _interopRequireDefault(require("../elements/Field"));

var _CaptchaForm = _interopRequireDefault(require("./CaptchaForm"));

var _logger = require("matrix-js-sdk/src/logger");

var _dec, _class, _class2, _temp, _dec2, _class3, _class4, _temp2, _dec3, _class5, _class6, _temp3, _dec4, _class7, _class8, _temp4, _dec5, _class9, _class10, _temp5, _dec6, _class11, _class12, _temp6, _dec7, _class13;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/* This file contains a collection of components which are used by the
 * InteractiveAuth to prompt the user to enter the information needed
 * for an auth stage. (The intention is that they could also be used for other
 * components, such as the registration flow).
 *
 * Call getEntryComponentForLoginType() to get a component suitable for a
 * particular login type. Each component requires the same properties:
 *
 * matrixClient:           A matrix client. May be a different one to the one
 *                         currently being used generally (eg. to register with
 *                         one HS whilst being a guest on another).
 * loginType:              the login type of the auth stage being attempted
 * authSessionId:          session id from the server
 * clientSecret:           The client secret in use for identity server auth sessions
 * stageParams:            params from the server for the stage being attempted
 * errorText:              error message from a previous attempt to authenticate
 * submitAuthDict:         a function which will be called with the new auth dict
 * busy:                   a boolean indicating whether the auth logic is doing something
 *                         the user needs to wait for.
 * inputs:                 Object of inputs provided by the user, as in js-sdk
 *                         interactive-auth
 * stageState:             Stage-specific object used for communicating state information
 *                         to the UI from the state-specific auth logic.
 *                         Defined keys for stages are:
 *                             m.login.email.identity:
 *                              * emailSid: string representing the sid of the active
 *                                          verification session from the identity server,
 *                                          or null if no session is active.
 * fail:                   a function which should be called with an error object if an
 *                         error occurred during the auth stage. This will cause the auth
 *                         session to be failed and the process to go back to the start.
 * setEmailSid:            m.login.email.identity only: a function to be called with the
 *                         email sid after a token is requested.
 * onPhaseChange:          A function which is called when the stage's phase changes. If
 *                         the stage has no phases, call this with DEFAULT_PHASE. Takes
 *                         one argument, the phase, and is always defined/required.
 * continueText:           For stages which have a continue button, the text to use.
 * continueKind:           For stages which have a continue button, the style of button to
 *                         use. For example, 'danger' or 'primary'.
 * onCancel                A function with no arguments which is called by the stage if the
 *                         user knowingly cancelled/dismissed the authentication attempt.
 *
 * Each component may also provide the following functions (beyond the standard React ones):
 *    focus: set the input focus appropriately in the form.
 */
const DEFAULT_PHASE = 0;
exports.DEFAULT_PHASE = DEFAULT_PHASE;
let PasswordAuthEntry = (_dec = (0, _replaceableComponent.replaceableComponent)("views.auth.PasswordAuthEntry"), _dec(_class = (_temp = _class2 = class PasswordAuthEntry extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "onSubmit", e => {
      e.preventDefault();
      if (this.props.busy) return;
      this.props.submitAuthDict({
        type: _interactiveAuth.AuthType.Password,
        // TODO: Remove `user` once servers support proper UIA
        // See https://github.com/vector-im/element-web/issues/10312
        user: this.props.matrixClient.credentials.userId,
        identifier: {
          type: "m.id.user",
          user: this.props.matrixClient.credentials.userId
        },
        password: this.state.password
      });
    });
    (0, _defineProperty2.default)(this, "onPasswordFieldChange", ev => {
      // enable the submit button iff the password is non-empty
      this.setState({
        password: ev.target.value
      });
    });
    this.state = {
      password: ""
    };
  }

  componentDidMount() {
    this.props.onPhaseChange(DEFAULT_PHASE);
  }

  render() {
    const passwordBoxClass = (0, _classnames.default)({
      "error": this.props.errorText
    });
    let submitButtonOrSpinner;

    if (this.props.busy) {
      submitButtonOrSpinner = /*#__PURE__*/_react.default.createElement(_Spinner.default, null);
    } else {
      submitButtonOrSpinner = /*#__PURE__*/_react.default.createElement("input", {
        type: "submit",
        className: "mx_Dialog_primary",
        disabled: !this.state.password,
        value: (0, _languageHandler._t)("Continue")
      });
    }

    let errorSection;

    if (this.props.errorText) {
      errorSection = /*#__PURE__*/_react.default.createElement("div", {
        className: "error",
        role: "alert"
      }, this.props.errorText);
    }

    return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Confirm your identity by entering your account password below.")), /*#__PURE__*/_react.default.createElement("form", {
      onSubmit: this.onSubmit,
      className: "mx_InteractiveAuthEntryComponents_passwordSection"
    }, /*#__PURE__*/_react.default.createElement(_Field.default, {
      className: passwordBoxClass,
      type: "password",
      name: "passwordField",
      label: (0, _languageHandler._t)('Password'),
      autoFocus: true,
      value: this.state.password,
      onChange: this.onPasswordFieldChange
    }), errorSection, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_button_row"
    }, submitButtonOrSpinner)));
  }

}, (0, _defineProperty2.default)(_class2, "LOGIN_TYPE", _interactiveAuth.AuthType.Password), _temp)) || _class);
/* eslint-disable camelcase */

exports.PasswordAuthEntry = PasswordAuthEntry;

/* eslint-enable camelcase */
let RecaptchaAuthEntry = (_dec2 = (0, _replaceableComponent.replaceableComponent)("views.auth.RecaptchaAuthEntry"), _dec2(_class3 = (_temp2 = _class4 = class RecaptchaAuthEntry extends _react.default.Component {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "onCaptchaResponse", response => {
      _CountlyAnalytics.default.instance.track("onboarding_grecaptcha_submit");

      this.props.submitAuthDict({
        type: _interactiveAuth.AuthType.Recaptcha,
        response: response
      });
    });
  }

  componentDidMount() {
    this.props.onPhaseChange(DEFAULT_PHASE);
  }

  render() {
    if (this.props.busy) {
      return /*#__PURE__*/_react.default.createElement(_Spinner.default, null);
    }

    let errorText = this.props.errorText;
    let sitePublicKey;

    if (!this.props.stageParams || !this.props.stageParams.public_key) {
      errorText = (0, _languageHandler._t)("Missing captcha public key in homeserver configuration. Please report " + "this to your homeserver administrator.");
    } else {
      sitePublicKey = this.props.stageParams.public_key;
    }

    let errorSection;

    if (errorText) {
      errorSection = /*#__PURE__*/_react.default.createElement("div", {
        className: "error",
        role: "alert"
      }, errorText);
    }

    return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_CaptchaForm.default, {
      sitePublicKey: sitePublicKey,
      onCaptchaResponse: this.onCaptchaResponse
    }), errorSection);
  }

}, (0, _defineProperty2.default)(_class4, "LOGIN_TYPE", _interactiveAuth.AuthType.Recaptcha), _temp2)) || _class3);
exports.RecaptchaAuthEntry = RecaptchaAuthEntry;
let TermsAuthEntry = (_dec3 = (0, _replaceableComponent.replaceableComponent)("views.auth.TermsAuthEntry"), _dec3(_class5 = (_temp3 = _class6 = class TermsAuthEntry extends _react.default.Component {
  constructor(props) {
    super(props); // example stageParams:
    //
    // {
    //     "policies": {
    //         "privacy_policy": {
    //             "version": "1.0",
    //             "en": {
    //                 "name": "Privacy Policy",
    //                 "url": "https://example.org/privacy-1.0-en.html",
    //             },
    //             "fr": {
    //                 "name": "Politique de confidentialité",
    //                 "url": "https://example.org/privacy-1.0-fr.html",
    //             },
    //         },
    //         "other_policy": { ... },
    //     }
    // }

    (0, _defineProperty2.default)(this, "tryContinue", () => {
      this.trySubmit();
    });
    (0, _defineProperty2.default)(this, "trySubmit", () => {
      let allChecked = true;

      for (const policy of this.state.policies) {
        const checked = this.state.toggledPolicies[policy.id];
        allChecked = allChecked && checked;
      }

      if (allChecked) {
        this.props.submitAuthDict({
          type: _interactiveAuth.AuthType.Terms
        });

        _CountlyAnalytics.default.instance.track("onboarding_terms_complete");
      } else {
        this.setState({
          errorText: (0, _languageHandler._t)("Please review and accept all of the homeserver's policies")
        });
      }
    });
    const allPolicies = this.props.stageParams.policies || {};

    const prefLang = _SettingsStore.default.getValue("language");

    const initToggles = {};
    const pickedPolicies = [];

    for (const policyId of Object.keys(allPolicies)) {
      const policy = allPolicies[policyId]; // Pick a language based on the user's language, falling back to english,
      // and finally to the first language available. If there's still no policy
      // available then the homeserver isn't respecting the spec.

      let langPolicy = policy[prefLang];
      if (!langPolicy) langPolicy = policy["en"];

      if (!langPolicy) {
        // last resort
        const firstLang = Object.keys(policy).find(e => e !== "version");
        langPolicy = policy[firstLang];
      }

      if (!langPolicy) throw new Error("Failed to find a policy to show the user");
      initToggles[policyId] = false;
      pickedPolicies.push({
        id: policyId,
        name: langPolicy.name,
        url: langPolicy.url
      });
    }

    this.state = {
      toggledPolicies: initToggles,
      policies: pickedPolicies
    };

    _CountlyAnalytics.default.instance.track("onboarding_terms_begin");
  }

  componentDidMount() {
    this.props.onPhaseChange(DEFAULT_PHASE);
  }

  togglePolicy(policyId) {
    const newToggles = {};

    for (const policy of this.state.policies) {
      let checked = this.state.toggledPolicies[policy.id];
      if (policy.id === policyId) checked = !checked;
      newToggles[policy.id] = checked;
    }

    this.setState({
      "toggledPolicies": newToggles
    });
  }

  render() {
    if (this.props.busy) {
      return /*#__PURE__*/_react.default.createElement(_Spinner.default, null);
    }

    const checkboxes = [];
    let allChecked = true;

    for (const policy of this.state.policies) {
      const checked = this.state.toggledPolicies[policy.id];
      allChecked = allChecked && checked;
      checkboxes.push(
      /*#__PURE__*/
      // XXX: replace with StyledCheckbox
      _react.default.createElement("label", {
        key: "policy_checkbox_" + policy.id,
        className: "mx_InteractiveAuthEntryComponents_termsPolicy"
      }, /*#__PURE__*/_react.default.createElement("input", {
        type: "checkbox",
        onChange: () => this.togglePolicy(policy.id),
        checked: checked
      }), /*#__PURE__*/_react.default.createElement("a", {
        href: policy.url,
        target: "_blank",
        rel: "noreferrer noopener"
      }, policy.name)));
    }

    let errorSection;

    if (this.props.errorText || this.state.errorText) {
      errorSection = /*#__PURE__*/_react.default.createElement("div", {
        className: "error",
        role: "alert"
      }, this.props.errorText || this.state.errorText);
    }

    let submitButton;

    if (this.props.showContinue !== false) {
      // XXX: button classes
      submitButton = /*#__PURE__*/_react.default.createElement("button", {
        className: "mx_InteractiveAuthEntryComponents_termsSubmit mx_GeneralButton",
        onClick: this.trySubmit,
        disabled: !allChecked
      }, (0, _languageHandler._t)("Accept"));
    }

    return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Please review and accept the policies of this homeserver:")), checkboxes, errorSection, submitButton);
  }

}, (0, _defineProperty2.default)(_class6, "LOGIN_TYPE", _interactiveAuth.AuthType.Terms), _temp3)) || _class5);
exports.TermsAuthEntry = TermsAuthEntry;
let EmailIdentityAuthEntry = (_dec4 = (0, _replaceableComponent.replaceableComponent)("views.auth.EmailIdentityAuthEntry"), _dec4(_class7 = (_temp4 = _class8 = class EmailIdentityAuthEntry extends _react.default.Component {
  componentDidMount() {
    this.props.onPhaseChange(DEFAULT_PHASE);
  }

  render() {
    var _this$props$stageStat;

    let errorSection; // ignore the error when errcode is M_UNAUTHORIZED as we expect that error until the link is clicked.

    if (this.props.errorText && this.props.errorCode !== "M_UNAUTHORIZED") {
      errorSection = /*#__PURE__*/_react.default.createElement("div", {
        className: "error",
        role: "alert"
      }, this.props.errorText);
    } // This component is now only displayed once the token has been requested,
    // so we know the email has been sent. It can also get loaded after the user
    // has clicked the validation link if the server takes a while to propagate
    // the validation internally. If we're in the session spawned from clicking
    // the validation link, we won't know the email address, so if we don't have it,
    // assume that the link has been clicked and the server will realise when we poll.
    // We only have a session ID if the user has clicked the link in their email,
    // so show a loading state instead of "an email has been sent to..." because
    // that's confusing when you've already read that email.


    if (this.props.inputs.emailAddress === undefined || (_this$props$stageStat = this.props.stageState) !== null && _this$props$stageStat !== void 0 && _this$props$stageStat.emailSid) {
      if (errorSection) {
        return errorSection;
      }

      return /*#__PURE__*/_react.default.createElement(_Spinner.default, null);
    } else {
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_InteractiveAuthEntryComponents_emailWrapper"
      }, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("A confirmation email has been sent to %(emailAddress)s", {
        emailAddress: /*#__PURE__*/_react.default.createElement("b", null, this.props.inputs.emailAddress)
      })), /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Open the link in the email to continue registration.")), errorSection);
    }
  }

}, (0, _defineProperty2.default)(_class8, "LOGIN_TYPE", _interactiveAuth.AuthType.Email), _temp4)) || _class7);
exports.EmailIdentityAuthEntry = EmailIdentityAuthEntry;
let MsisdnAuthEntry = (_dec5 = (0, _replaceableComponent.replaceableComponent)("views.auth.MsisdnAuthEntry"), _dec5(_class9 = (_temp5 = _class10 = class MsisdnAuthEntry extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "submitUrl", void 0);
    (0, _defineProperty2.default)(this, "sid", void 0);
    (0, _defineProperty2.default)(this, "msisdn", void 0);
    (0, _defineProperty2.default)(this, "onTokenChange", e => {
      this.setState({
        token: e.target.value
      });
    });
    (0, _defineProperty2.default)(this, "onFormSubmit", async e => {
      e.preventDefault();
      if (this.state.token == '') return;
      this.setState({
        errorText: null
      });

      try {
        let result;

        if (this.submitUrl) {
          result = await this.props.matrixClient.submitMsisdnTokenOtherUrl(this.submitUrl, this.sid, this.props.clientSecret, this.state.token);
        } else {
          throw new Error("The registration with MSISDN flow is misconfigured");
        }

        if (result.success) {
          const creds = {
            sid: this.sid,
            client_secret: this.props.clientSecret
          };
          this.props.submitAuthDict({
            type: _interactiveAuth.AuthType.Msisdn,
            // TODO: Remove `threepid_creds` once servers support proper UIA
            // See https://github.com/vector-im/element-web/issues/10312
            // See https://github.com/matrix-org/matrix-doc/issues/2220
            threepid_creds: creds,
            threepidCreds: creds
          });
        } else {
          this.setState({
            errorText: (0, _languageHandler._t)("Token incorrect")
          });
        }
      } catch (e) {
        this.props.fail(e);

        _logger.logger.log("Failed to submit msisdn token");
      }
    });
    this.state = {
      token: '',
      requestingToken: false,
      errorText: ''
    };
  }

  componentDidMount() {
    this.props.onPhaseChange(DEFAULT_PHASE);
    this.setState({
      requestingToken: true
    });
    this.requestMsisdnToken().catch(e => {
      this.props.fail(e);
    }).finally(() => {
      this.setState({
        requestingToken: false
      });
    });
  }
  /*
   * Requests a verification token by SMS.
   */


  requestMsisdnToken() {
    return this.props.matrixClient.requestRegisterMsisdnToken(this.props.inputs.phoneCountry, this.props.inputs.phoneNumber, this.props.clientSecret, 1 // TODO: Multiple send attempts?
    ).then(result => {
      this.submitUrl = result.submit_url;
      this.sid = result.sid;
      this.msisdn = result.msisdn;
    });
  }

  render() {
    if (this.state.requestingToken) {
      return /*#__PURE__*/_react.default.createElement(_Spinner.default, null);
    } else {
      const enableSubmit = Boolean(this.state.token);
      const submitClasses = (0, _classnames.default)({
        mx_InteractiveAuthEntryComponents_msisdnSubmit: true,
        mx_GeneralButton: true
      });
      let errorSection;

      if (this.state.errorText) {
        errorSection = /*#__PURE__*/_react.default.createElement("div", {
          className: "error",
          role: "alert"
        }, this.state.errorText);
      }

      return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("A text message has been sent to %(msisdn)s", {
        msisdn: /*#__PURE__*/_react.default.createElement("i", null, this.msisdn)
      })), /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Please enter the code it contains:")), /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_InteractiveAuthEntryComponents_msisdnWrapper"
      }, /*#__PURE__*/_react.default.createElement("form", {
        onSubmit: this.onFormSubmit
      }, /*#__PURE__*/_react.default.createElement("input", {
        type: "text",
        className: "mx_InteractiveAuthEntryComponents_msisdnEntry",
        value: this.state.token,
        onChange: this.onTokenChange,
        "aria-label": (0, _languageHandler._t)("Code")
      }), /*#__PURE__*/_react.default.createElement("br", null), /*#__PURE__*/_react.default.createElement("input", {
        type: "submit",
        value: (0, _languageHandler._t)("Submit"),
        className: submitClasses,
        disabled: !enableSubmit
      })), errorSection));
    }
  }

}, (0, _defineProperty2.default)(_class10, "LOGIN_TYPE", _interactiveAuth.AuthType.Msisdn), _temp5)) || _class9);
exports.MsisdnAuthEntry = MsisdnAuthEntry;
let SSOAuthEntry = (_dec6 = (0, _replaceableComponent.replaceableComponent)("views.auth.SSOAuthEntry"), _dec6(_class11 = (_temp6 = _class12 = class SSOAuthEntry extends _react.default.Component {
  // button to start SSO
  // button to confirm SSO completed
  constructor(props) {
    super(props); // We actually send the user through fallback auth so we don't have to
    // deal with a redirect back to us, losing application context.

    (0, _defineProperty2.default)(this, "ssoUrl", void 0);
    (0, _defineProperty2.default)(this, "popupWindow", void 0);
    (0, _defineProperty2.default)(this, "attemptFailed", () => {
      this.setState({
        attemptFailed: true
      });
    });
    (0, _defineProperty2.default)(this, "onReceiveMessage", event => {
      if (event.data === "authDone" && event.origin === this.props.matrixClient.getHomeserverUrl()) {
        if (this.popupWindow) {
          this.popupWindow.close();
          this.popupWindow = null;
        }
      }
    });
    (0, _defineProperty2.default)(this, "onStartAuthClick", () => {
      // Note: We don't use PlatformPeg's startSsoAuth functions because we almost
      // certainly will need to open the thing in a new tab to avoid losing application
      // context.
      this.popupWindow = window.open(this.ssoUrl, "_blank");
      this.setState({
        phase: SSOAuthEntry.PHASE_POSTAUTH
      });
      this.props.onPhaseChange(SSOAuthEntry.PHASE_POSTAUTH);
    });
    (0, _defineProperty2.default)(this, "onConfirmClick", () => {
      this.props.submitAuthDict({});
    });
    this.ssoUrl = props.matrixClient.getFallbackAuthUrl(this.props.loginType, this.props.authSessionId);
    this.popupWindow = null;
    window.addEventListener("message", this.onReceiveMessage);
    this.state = {
      phase: SSOAuthEntry.PHASE_PREAUTH,
      attemptFailed: false
    };
  }

  componentDidMount() {
    this.props.onPhaseChange(SSOAuthEntry.PHASE_PREAUTH);
  }

  componentWillUnmount() {
    window.removeEventListener("message", this.onReceiveMessage);

    if (this.popupWindow) {
      this.popupWindow.close();
      this.popupWindow = null;
    }
  }

  render() {
    let continueButton = null;

    const cancelButton = /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      onClick: this.props.onCancel,
      kind: this.props.continueKind ? this.props.continueKind + '_outline' : 'primary_outline'
    }, (0, _languageHandler._t)("Cancel"));

    if (this.state.phase === SSOAuthEntry.PHASE_PREAUTH) {
      continueButton = /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        onClick: this.onStartAuthClick,
        kind: this.props.continueKind || 'primary'
      }, this.props.continueText || (0, _languageHandler._t)("Single Sign On"));
    } else {
      continueButton = /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        onClick: this.onConfirmClick,
        kind: this.props.continueKind || 'primary'
      }, this.props.continueText || (0, _languageHandler._t)("Confirm"));
    }

    let errorSection;

    if (this.props.errorText) {
      errorSection = /*#__PURE__*/_react.default.createElement("div", {
        className: "error",
        role: "alert"
      }, this.props.errorText);
    } else if (this.state.attemptFailed) {
      errorSection = /*#__PURE__*/_react.default.createElement("div", {
        className: "error",
        role: "alert"
      }, (0, _languageHandler._t)("Something went wrong in confirming your identity. Cancel and try again."));
    }

    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, errorSection, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_InteractiveAuthEntryComponents_sso_buttons"
    }, cancelButton, continueButton));
  }

}, (0, _defineProperty2.default)(_class12, "LOGIN_TYPE", _interactiveAuth.AuthType.Sso), (0, _defineProperty2.default)(_class12, "UNSTABLE_LOGIN_TYPE", _interactiveAuth.AuthType.SsoUnstable), (0, _defineProperty2.default)(_class12, "PHASE_PREAUTH", 1), (0, _defineProperty2.default)(_class12, "PHASE_POSTAUTH", 2), _temp6)) || _class11);
exports.SSOAuthEntry = SSOAuthEntry;
let FallbackAuthEntry = (_dec7 = (0, _replaceableComponent.replaceableComponent)("views.auth.FallbackAuthEntry"), _dec7(_class13 = class FallbackAuthEntry extends _react.default.Component {
  constructor(props) {
    super(props); // we have to make the user click a button, as browsers will block
    // the popup if we open it immediately.

    (0, _defineProperty2.default)(this, "popupWindow", void 0);
    (0, _defineProperty2.default)(this, "fallbackButton", /*#__PURE__*/(0, _react.createRef)());
    (0, _defineProperty2.default)(this, "focus", () => {
      if (this.fallbackButton.current) {
        this.fallbackButton.current.focus();
      }
    });
    (0, _defineProperty2.default)(this, "onShowFallbackClick", e => {
      e.preventDefault();
      e.stopPropagation();
      const url = this.props.matrixClient.getFallbackAuthUrl(this.props.loginType, this.props.authSessionId);
      this.popupWindow = window.open(url, "_blank");
    });
    (0, _defineProperty2.default)(this, "onReceiveMessage", event => {
      if (event.data === "authDone" && event.origin === this.props.matrixClient.getHomeserverUrl()) {
        this.props.submitAuthDict({});
      }
    });
    this.popupWindow = null;
    window.addEventListener("message", this.onReceiveMessage);
  }

  componentDidMount() {
    this.props.onPhaseChange(DEFAULT_PHASE);
  }

  componentWillUnmount() {
    window.removeEventListener("message", this.onReceiveMessage);

    if (this.popupWindow) {
      this.popupWindow.close();
    }
  }

  render() {
    let errorSection;

    if (this.props.errorText) {
      errorSection = /*#__PURE__*/_react.default.createElement("div", {
        className: "error",
        role: "alert"
      }, this.props.errorText);
    }

    return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("a", {
      href: "",
      ref: this.fallbackButton,
      onClick: this.onShowFallbackClick
    }, (0, _languageHandler._t)("Start authentication")), errorSection);
  }

}) || _class13);
exports.FallbackAuthEntry = FallbackAuthEntry;

function getEntryComponentForLoginType(loginType) {
  switch (loginType) {
    case _interactiveAuth.AuthType.Password:
      return PasswordAuthEntry;

    case _interactiveAuth.AuthType.Recaptcha:
      return RecaptchaAuthEntry;

    case _interactiveAuth.AuthType.Email:
      return EmailIdentityAuthEntry;

    case _interactiveAuth.AuthType.Msisdn:
      return MsisdnAuthEntry;

    case _interactiveAuth.AuthType.Terms:
      return TermsAuthEntry;

    case _interactiveAuth.AuthType.Sso:
    case _interactiveAuth.AuthType.SsoUnstable:
      return SSOAuthEntry;

    default:
      return FallbackAuthEntry;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,