"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _utils = require("matrix-js-sdk/src/utils");

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _AppsDrawer = _interopRequireDefault(require("./AppsDrawer"));

var _SettingsStore = _interopRequireDefault(require("../../../settings/SettingsStore"));

var _AutoHideScrollbar = _interopRequireDefault(require("../../structures/AutoHideScrollbar"));

var _UIFeature = require("../../../settings/UIFeature");

var _CallViewForRoom = _interopRequireDefault(require("../voip/CallViewForRoom"));

var _objects = require("../../../utils/objects");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _lodash = require("lodash");

var _dec, _class, _class2, _temp;

let AuxPanel = (_dec = (0, _replaceableComponent.replaceableComponent)("views.rooms.AuxPanel"), _dec(_class = (_temp = _class2 = class AuxPanel extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "rateLimitedUpdate", (0, _lodash.throttle)(() => {
      this.setState({
        counters: this.computeCounters()
      });
    }, 500, {
      leading: true,
      trailing: true
    }));
    this.state = {
      counters: this.computeCounters()
    };
  }

  componentDidMount() {
    const cli = _MatrixClientPeg.MatrixClientPeg.get();

    if (_SettingsStore.default.getValue("feature_state_counters")) {
      cli.on("RoomState.events", this.rateLimitedUpdate);
    }
  }

  componentWillUnmount() {
    const cli = _MatrixClientPeg.MatrixClientPeg.get();

    if (cli && _SettingsStore.default.getValue("feature_state_counters")) {
      cli.removeListener("RoomState.events", this.rateLimitedUpdate);
    }
  }

  shouldComponentUpdate(nextProps, nextState) {
    return (0, _objects.objectHasDiff)(this.props, nextProps) || (0, _objects.objectHasDiff)(this.state, nextState);
  }

  computeCounters() {
    const counters = [];

    if (this.props.room && _SettingsStore.default.getValue("feature_state_counters")) {
      const stateEvs = this.props.room.currentState.getStateEvents('re.jki.counter');
      stateEvs.sort((a, b) => (0, _utils.lexicographicCompare)(a.getStateKey(), b.getStateKey()));

      for (const ev of stateEvs) {
        const title = ev.getContent().title;
        const value = ev.getContent().value;
        const link = ev.getContent().link;
        const severity = ev.getContent().severity || "normal";
        const stateKey = ev.getStateKey(); // We want a non-empty title but can accept falsey values (e.g.
        // zero)

        if (title && value !== undefined) {
          counters.push({
            title,
            value,
            link,
            severity,
            stateKey
          });
        }
      }
    }

    return counters;
  }

  render() {
    const callView = /*#__PURE__*/_react.default.createElement(_CallViewForRoom.default, {
      roomId: this.props.room.roomId,
      resizeNotifier: this.props.resizeNotifier,
      showApps: this.props.showApps
    });

    let appsDrawer;

    if (_SettingsStore.default.getValue(_UIFeature.UIFeature.Widgets)) {
      appsDrawer = /*#__PURE__*/_react.default.createElement(_AppsDrawer.default, {
        room: this.props.room,
        userId: this.props.userId,
        showApps: this.props.showApps,
        resizeNotifier: this.props.resizeNotifier
      });
    }

    let stateViews = null;

    if (this.state.counters && _SettingsStore.default.getValue("feature_state_counters")) {
      const counters = [];
      this.state.counters.forEach((counter, idx) => {
        const title = counter.title;
        const value = counter.value;
        const link = counter.link;
        const severity = counter.severity;
        const stateKey = counter.stateKey;

        let span = /*#__PURE__*/_react.default.createElement("span", null, title, ": ", value);

        if (link) {
          span = /*#__PURE__*/_react.default.createElement("a", {
            href: link,
            target: "_blank",
            rel: "noreferrer noopener"
          }, span);
        }

        span = /*#__PURE__*/_react.default.createElement("span", {
          className: "m_RoomView_auxPanel_stateViews_span",
          "data-severity": severity,
          key: "x-" + stateKey
        }, span);
        counters.push(span);
        counters.push( /*#__PURE__*/_react.default.createElement("span", {
          className: "m_RoomView_auxPanel_stateViews_delim",
          key: "delim" + idx
        }, " \u2500 "));
      });

      if (counters.length > 0) {
        counters.pop(); // remove last deliminator

        stateViews = /*#__PURE__*/_react.default.createElement("div", {
          className: "m_RoomView_auxPanel_stateViews"
        }, counters);
      }
    }

    return /*#__PURE__*/_react.default.createElement(_AutoHideScrollbar.default, {
      className: "mx_RoomView_auxPanel"
    }, stateViews, this.props.children, appsDrawer, callView);
  }

}, (0, _defineProperty2.default)(_class2, "defaultProps", {
  showApps: true
}), _temp)) || _class);
exports.default = AuxPanel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,