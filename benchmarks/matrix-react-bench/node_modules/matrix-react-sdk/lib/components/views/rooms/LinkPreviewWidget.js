"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _htmlEntities = require("html-entities");

var _HtmlUtils = require("../../../HtmlUtils");

var _SettingsStore = _interopRequireDefault(require("../../../settings/SettingsStore"));

var _Modal = _interopRequireDefault(require("../../../Modal"));

var ImageUtils = _interopRequireWildcard(require("../../../ImageUtils"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _Media = require("../../../customisations/Media");

var _ImageView = _interopRequireDefault(require("../elements/ImageView"));

var _dec, _class;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

let LinkPreviewWidget = (_dec = (0, _replaceableComponent.replaceableComponent)("views.rooms.LinkPreviewWidget"), _dec(_class = class LinkPreviewWidget extends _react.default.Component {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "description", /*#__PURE__*/(0, _react.createRef)());
    (0, _defineProperty2.default)(this, "image", /*#__PURE__*/(0, _react.createRef)());
    (0, _defineProperty2.default)(this, "onImageClick", ev => {
      const p = this.props.preview;
      if (ev.button != 0 || ev.metaKey) return;
      ev.preventDefault();
      let src = p["og:image"];

      if (src && src.startsWith("mxc://")) {
        src = (0, _Media.mediaFromMxc)(src).srcHttp;
      }

      const params = {
        src: src,
        width: p["og:image:width"],
        height: p["og:image:height"],
        name: p["og:title"] || p["og:description"] || this.props.link,
        fileSize: p["matrix:image:size"],
        link: this.props.link
      };

      if (this.image.current) {
        const clientRect = this.image.current.getBoundingClientRect();
        params.thumbnailInfo = {
          width: clientRect.width,
          height: clientRect.height,
          positionX: clientRect.x,
          positionY: clientRect.y
        };
      }

      _Modal.default.createDialog(_ImageView.default, params, "mx_Dialog_lightbox", null, true);
    });
  }

  componentDidMount() {
    if (this.description.current) {
      (0, _HtmlUtils.linkifyElement)(this.description.current);
    }
  }

  componentDidUpdate() {
    if (this.description.current) {
      (0, _HtmlUtils.linkifyElement)(this.description.current);
    }
  }

  render() {
    const p = this.props.preview;

    if (!p || Object.keys(p).length === 0) {
      return /*#__PURE__*/_react.default.createElement("div", null);
    } // FIXME: do we want to factor out all image displaying between this and MImageBody - especially for lightboxing?


    let image = p["og:image"];

    if (!_SettingsStore.default.getValue("showImages")) {
      image = null; // Don't render a button to show the image, just hide it outright
    }

    const imageMaxWidth = 100;
    const imageMaxHeight = 100;

    if (image && image.startsWith("mxc://")) {
      // We deliberately don't want a square here, so use the source HTTP thumbnail function
      image = (0, _Media.mediaFromMxc)(image).getThumbnailOfSourceHttp(imageMaxWidth, imageMaxHeight, 'scale');
    }

    let thumbHeight = imageMaxHeight;

    if (p["og:image:width"] && p["og:image:height"]) {
      thumbHeight = ImageUtils.thumbHeight(p["og:image:width"], p["og:image:height"], imageMaxWidth, imageMaxHeight);
    }

    let img;

    if (image) {
      img = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_LinkPreviewWidget_image",
        style: {
          height: thumbHeight
        }
      }, /*#__PURE__*/_react.default.createElement("img", {
        ref: this.image,
        style: {
          maxWidth: imageMaxWidth,
          maxHeight: imageMaxHeight
        },
        src: image,
        onClick: this.onImageClick
      }));
    } // The description includes &-encoded HTML entities, we decode those as React treats the thing as an
    // opaque string. This does not allow any HTML to be injected into the DOM.


    const description = _htmlEntities.AllHtmlEntities.decode(p["og:description"] || "");

    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_LinkPreviewWidget"
    }, img, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_LinkPreviewWidget_caption"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_LinkPreviewWidget_title"
    }, /*#__PURE__*/_react.default.createElement("a", {
      href: this.props.link,
      target: "_blank",
      rel: "noreferrer noopener"
    }, p["og:title"]), p["og:site_name"] && /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_LinkPreviewWidget_siteName"
    }, " - " + p["og:site_name"])), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_LinkPreviewWidget_description",
      ref: this.description
    }, description)), this.props.children);
  }

}) || _class);
exports.default = LinkPreviewWidget;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,