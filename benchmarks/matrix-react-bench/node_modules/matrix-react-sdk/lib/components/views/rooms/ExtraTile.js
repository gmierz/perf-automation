"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _RovingTabIndex = require("../../../accessibility/RovingTabIndex");

var _NotificationBadge = _interopRequireDefault(require("./NotificationBadge"));

/*
Copyright 2020, 2021 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
class ExtraTile extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "onTileMouseEnter", () => {
      this.setState({
        hover: true
      });
    });
    (0, _defineProperty2.default)(this, "onTileMouseLeave", () => {
      this.setState({
        hover: false
      });
    });
    this.state = {
      hover: false
    };
  }

  render() {
    var _this$props$notificat;

    // XXX: We copy classes because it's easier
    const classes = (0, _classnames.default)({
      'mx_ExtraTile': true,
      'mx_RoomTile': true,
      'mx_RoomTile_selected': this.props.isSelected,
      'mx_RoomTile_minimized': this.props.isMinimized
    });
    let badge;

    if (this.props.notificationState) {
      badge = /*#__PURE__*/_react.default.createElement(_NotificationBadge.default, {
        notification: this.props.notificationState,
        forceCount: false
      });
    }

    let name = this.props.displayName;
    if (typeof name !== 'string') name = '';
    name = name.replace(":", ":\u200b"); // add a zero-width space to allow linewrapping after the colon

    const nameClasses = (0, _classnames.default)({
      "mx_RoomTile_name": true,
      "mx_RoomTile_nameHasUnreadEvents": (_this$props$notificat = this.props.notificationState) === null || _this$props$notificat === void 0 ? void 0 : _this$props$notificat.isUnread
    });

    let nameContainer = /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_RoomTile_nameContainer"
    }, /*#__PURE__*/_react.default.createElement("div", {
      title: name,
      className: nameClasses,
      tabIndex: -1,
      dir: "auto"
    }, name));

    if (this.props.isMinimized) nameContainer = null;
    let Button = _RovingTabIndex.RovingAccessibleButton;

    if (this.props.isMinimized) {
      Button = _RovingTabIndex.RovingAccessibleTooltipButton;
    }

    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(Button, {
      className: classes,
      onMouseEnter: this.onTileMouseEnter,
      onMouseLeave: this.onTileMouseLeave,
      onClick: this.props.onClick,
      role: "treeitem",
      title: this.props.isMinimized ? name : undefined
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_RoomTile_avatarContainer"
    }, this.props.avatar), nameContainer, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_RoomTile_badgeContainer"
    }, badge)));
  }

}

exports.default = ExtraTile;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,