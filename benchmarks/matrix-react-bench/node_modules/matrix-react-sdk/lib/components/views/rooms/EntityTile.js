"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.PowerStatus = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

var _languageHandler = require("../../../languageHandler");

var _classnames = _interopRequireDefault(require("classnames"));

var _E2EIcon = _interopRequireDefault(require("./E2EIcon"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _BaseAvatar = _interopRequireDefault(require("../avatars/BaseAvatar"));

var _PresenceLabel = _interopRequireDefault(require("./PresenceLabel"));

var _dec, _class, _class2, _temp;

let PowerStatus;
exports.PowerStatus = PowerStatus;

(function (PowerStatus) {
  PowerStatus["Admin"] = "admin";
  PowerStatus["Moderator"] = "moderator";
})(PowerStatus || (exports.PowerStatus = PowerStatus = {}));

const PowerLabel = {
  [PowerStatus.Admin]: (0, _languageHandler._td)("Admin"),
  [PowerStatus.Moderator]: (0, _languageHandler._td)("Mod")
};
const PRESENCE_CLASS = {
  "offline": "mx_EntityTile_offline",
  "online": "mx_EntityTile_online",
  "unavailable": "mx_EntityTile_unavailable"
};

function presenceClassForMember(presenceState, lastActiveAgo, showPresence) {
  if (showPresence === false) {
    return 'mx_EntityTile_online_beenactive';
  } // offline is split into two categories depending on whether we have
  // a last_active_ago for them.


  if (presenceState === 'offline') {
    if (lastActiveAgo) {
      return PRESENCE_CLASS['offline'] + '_beenactive';
    } else {
      return PRESENCE_CLASS['offline'] + '_neveractive';
    }
  } else if (presenceState) {
    return PRESENCE_CLASS[presenceState];
  } else {
    return PRESENCE_CLASS['offline'] + '_neveractive';
  }
}

let EntityTile = (_dec = (0, _replaceableComponent.replaceableComponent)("views.rooms.EntityTile"), _dec(_class = (_temp = _class2 = class EntityTile extends _react.default.PureComponent {
  constructor(props) {
    super(props);
    this.state = {
      hover: false
    };
  }

  render() {
    const mainClassNames = {
      "mx_EntityTile": true,
      "mx_EntityTile_noHover": this.props.suppressOnHover
    };
    if (this.props.className) mainClassNames[this.props.className] = true;
    const presenceClass = presenceClassForMember(this.props.presenceState, this.props.presenceLastActiveAgo, this.props.showPresence);
    mainClassNames[presenceClass] = true;
    let nameEl;
    const {
      name
    } = this.props;

    if (!this.props.suppressOnHover) {
      const activeAgo = this.props.presenceLastActiveAgo ? Date.now() - (this.props.presenceLastTs - this.props.presenceLastActiveAgo) : -1;
      let presenceLabel = null;

      if (this.props.showPresence) {
        presenceLabel = /*#__PURE__*/_react.default.createElement(_PresenceLabel.default, {
          activeAgo: activeAgo,
          currentlyActive: this.props.presenceCurrentlyActive,
          presenceState: this.props.presenceState
        });
      }

      if (this.props.subtextLabel) {
        presenceLabel = /*#__PURE__*/_react.default.createElement("span", {
          className: "mx_EntityTile_subtext"
        }, this.props.subtextLabel);
      }

      nameEl = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_EntityTile_details"
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_EntityTile_name",
        dir: "auto"
      }, name), presenceLabel);
    } else if (this.props.subtextLabel) {
      nameEl = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_EntityTile_details"
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_EntityTile_name",
        dir: "auto"
      }, name), /*#__PURE__*/_react.default.createElement("span", {
        className: "mx_EntityTile_subtext"
      }, this.props.subtextLabel));
    } else {
      nameEl = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_EntityTile_name",
        dir: "auto"
      }, name);
    }

    let inviteButton;

    if (this.props.showInviteButton) {
      inviteButton = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_EntityTile_invite"
      }, /*#__PURE__*/_react.default.createElement("img", {
        src: require("../../../../res/img/plus.svg"),
        width: "16",
        height: "16"
      }));
    }

    let powerLabel;
    const powerStatus = this.props.powerStatus;

    if (powerStatus) {
      const powerText = PowerLabel[powerStatus];
      powerLabel = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_EntityTile_power"
      }, powerText);
    }

    let e2eIcon;
    const {
      e2eStatus
    } = this.props;

    if (e2eStatus) {
      e2eIcon = /*#__PURE__*/_react.default.createElement(_E2EIcon.default, {
        status: e2eStatus,
        isUser: true,
        bordered: true
      });
    }

    const av = this.props.avatarJsx || /*#__PURE__*/_react.default.createElement(_BaseAvatar.default, {
      name: this.props.name,
      width: 36,
      height: 36,
      "aria-hidden": "true"
    }); // The wrapping div is required to make the magic mouse listener work, for some reason.


    return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      className: (0, _classnames.default)(mainClassNames),
      title: this.props.title,
      onClick: this.props.onClick
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_EntityTile_avatar"
    }, av, e2eIcon), nameEl, powerLabel, inviteButton));
  }

}, (0, _defineProperty2.default)(_class2, "defaultProps", {
  onClick: () => {},
  presenceState: "offline",
  presenceLastActiveAgo: 0,
  presenceLastTs: 0,
  showInviteButton: false,
  suppressOnHover: false,
  showPresence: true
}), _temp)) || _class);
exports.default = EntityTile;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,