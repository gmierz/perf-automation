"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.REGEX_EMOTICON = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classnames = _interopRequireDefault(require("classnames"));

var _react = _interopRequireWildcard(require("react"));

var _emoticon = _interopRequireDefault(require("emojibase-regex/emoticon"));

var _history = _interopRequireDefault(require("../../../editor/history"));

var _caret = require("../../../editor/caret");

var _operations = require("../../../editor/operations");

var _dom = require("../../../editor/dom");

var _Autocomplete = _interopRequireWildcard(require("../rooms/Autocomplete"));

var _parts = require("../../../editor/parts");

var _deserialize = require("../../../editor/deserialize");

var _render = require("../../../editor/render");

var _TypingStore = _interopRequireDefault(require("../../../stores/TypingStore"));

var _SettingsStore = _interopRequireDefault(require("../../../settings/SettingsStore"));

var _Keyboard = require("../../../Keyboard");

var _emoji = require("../../../emoji");

var _SlashCommands = require("../../../SlashCommands");

var _range = _interopRequireDefault(require("../../../editor/range"));

var _MessageComposerFormatBar = _interopRequireWildcard(require("./MessageComposerFormatBar"));

var _KeyBindingsManager = require("../../../KeyBindingsManager");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _logger = require("matrix-js-sdk/src/logger");

var _dec, _class;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// matches emoticons which follow the start of a line or whitespace
const REGEX_EMOTICON_WHITESPACE = new RegExp('(?:^|\\s)(' + _emoticon.default.source + ')\\s|:^$');
const REGEX_EMOTICON = new RegExp('(?:^|\\s)(' + _emoticon.default.source + ')$');
exports.REGEX_EMOTICON = REGEX_EMOTICON;
const IS_MAC = navigator.platform.indexOf("Mac") !== -1;
const SURROUND_WITH_CHARACTERS = ["\"", "_", "`", "'", "*", "~", "$"];
const SURROUND_WITH_DOUBLE_CHARACTERS = new Map([["(", ")"], ["[", "]"], ["{", "}"], ["<", ">"]]);

function ctrlShortcutLabel(key) {
  return (IS_MAC ? "âŒ˜" : "Ctrl") + "+" + key;
}

function cloneSelection(selection) {
  return {
    anchorNode: selection.anchorNode,
    anchorOffset: selection.anchorOffset,
    focusNode: selection.focusNode,
    focusOffset: selection.focusOffset,
    isCollapsed: selection.isCollapsed,
    rangeCount: selection.rangeCount,
    type: selection.type
  };
}

function selectionEquals(a, b) {
  return a.anchorNode === b.anchorNode && a.anchorOffset === b.anchorOffset && a.focusNode === b.focusNode && a.focusOffset === b.focusOffset && a.isCollapsed === b.isCollapsed && a.rangeCount === b.rangeCount && a.type === b.type;
}

let BasicMessageEditor = (_dec = (0, _replaceableComponent.replaceableComponent)("views.rooms.BasicMessageEditor"), _dec(_class = class BasicMessageEditor extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "editorRef", /*#__PURE__*/(0, _react.createRef)());
    (0, _defineProperty2.default)(this, "autocompleteRef", /*#__PURE__*/(0, _react.createRef)());
    (0, _defineProperty2.default)(this, "formatBarRef", /*#__PURE__*/(0, _react.createRef)());
    (0, _defineProperty2.default)(this, "modifiedFlag", false);
    (0, _defineProperty2.default)(this, "isIMEComposing", false);
    (0, _defineProperty2.default)(this, "hasTextSelected", false);
    (0, _defineProperty2.default)(this, "_isCaretAtEnd", void 0);
    (0, _defineProperty2.default)(this, "lastCaret", void 0);
    (0, _defineProperty2.default)(this, "lastSelection", void 0);
    (0, _defineProperty2.default)(this, "emoticonSettingHandle", void 0);
    (0, _defineProperty2.default)(this, "shouldShowPillAvatarSettingHandle", void 0);
    (0, _defineProperty2.default)(this, "surroundWithHandle", void 0);
    (0, _defineProperty2.default)(this, "historyManager", new _history.default());
    (0, _defineProperty2.default)(this, "updateEditorState", (selection, inputType, diff) => {
      (0, _render.renderModel)(this.editorRef.current, this.props.model);

      if (selection) {
        // set the caret/selection
        try {
          (0, _caret.setSelection)(this.editorRef.current, this.props.model, selection);
        } catch (err) {
          _logger.logger.error(err);
        } // if caret selection is a range, take the end position


        const position = selection instanceof _range.default ? selection.end : selection;
        this.setLastCaretFromPosition(position);
      }

      const {
        isEmpty
      } = this.props.model;

      if (this.props.placeholder) {
        if (isEmpty) {
          this.showPlaceholder();
        } else {
          this.hidePlaceholder();
        }
      }

      if (isEmpty) {
        this.formatBarRef.current.hide();
      }

      this.setState({
        autoComplete: this.props.model.autoComplete,
        // if a change is happening then clear the showVisualBell
        showVisualBell: diff ? false : this.state.showVisualBell
      });
      this.historyManager.tryPush(this.props.model, selection, inputType, diff);
      let isTyping = !this.props.model.isEmpty; // If the user is entering a command, only consider them typing if it is one which sends a message into the room

      if (isTyping && this.props.model.parts[0].type === "command") {
        const {
          cmd
        } = (0, _SlashCommands.parseCommandString)(this.props.model.parts[0].text);

        const command = _SlashCommands.CommandMap.get(cmd);

        if (!command || !command.isEnabled() || command.category !== _SlashCommands.CommandCategories.messages) {
          isTyping = false;
        }
      }

      _TypingStore.default.sharedInstance().setSelfTyping(this.props.room.roomId, this.props.threadId, isTyping);

      if (this.props.onChange) {
        this.props.onChange();
      }
    });
    (0, _defineProperty2.default)(this, "onCompositionStart", () => {
      this.isIMEComposing = true; // even if the model is empty, the composition text shouldn't be mixed with the placeholder

      this.hidePlaceholder();
    });
    (0, _defineProperty2.default)(this, "onCompositionEnd", () => {
      this.isIMEComposing = false; // some browsers (Chrome) don't fire an input event after ending a composition,
      // so trigger a model update after the composition is done by calling the input handler.
      // however, modifying the DOM (caused by the editor model update) from the compositionend handler seems
      // to confuse the IME in Chrome, likely causing https://github.com/vector-im/element-web/issues/10913 ,
      // so we do it async
      // however, doing this async seems to break things in Safari for some reason, so browser sniff.

      const ua = navigator.userAgent.toLowerCase();
      const isSafari = ua.includes('safari/') && !ua.includes('chrome/');

      if (isSafari) {
        this.onInput({
          inputType: "insertCompositionText"
        });
      } else {
        Promise.resolve().then(() => {
          this.onInput({
            inputType: "insertCompositionText"
          });
        });
      }
    });
    (0, _defineProperty2.default)(this, "onCutCopy", (event, type) => {
      const selection = document.getSelection();
      const text = selection.toString();

      if (text) {
        const {
          model
        } = this.props;
        const range = (0, _dom.getRangeForSelection)(this.editorRef.current, model, selection);
        const selectedParts = range.parts.map(p => p.serialize());
        event.clipboardData.setData("application/x-element-composer", JSON.stringify(selectedParts));
        event.clipboardData.setData("text/plain", text); // so plain copy/paste works

        if (type === "cut") {
          // Remove the text, updating the model as appropriate
          this.modifiedFlag = true;
          (0, _operations.replaceRangeAndMoveCaret)(range, []);
        }

        event.preventDefault();
      }
    });
    (0, _defineProperty2.default)(this, "onCopy", event => {
      this.onCutCopy(event, "copy");
    });
    (0, _defineProperty2.default)(this, "onCut", event => {
      this.onCutCopy(event, "cut");
    });
    (0, _defineProperty2.default)(this, "onPaste", event => {
      event.preventDefault(); // we always handle the paste ourselves

      if (this.props.onPaste && this.props.onPaste(event, this.props.model)) {
        // to prevent double handling, allow props.onPaste to skip internal onPaste
        return true;
      }

      const {
        model
      } = this.props;
      const {
        partCreator
      } = model;
      const partsText = event.clipboardData.getData("application/x-element-composer");
      let parts;

      if (partsText) {
        const serializedTextParts = JSON.parse(partsText);
        const deserializedParts = serializedTextParts.map(p => partCreator.deserializePart(p));
        parts = deserializedParts;
      } else {
        const text = event.clipboardData.getData("text/plain");
        parts = (0, _deserialize.parsePlainTextMessage)(text, partCreator);
      }

      this.modifiedFlag = true;
      const range = (0, _dom.getRangeForSelection)(this.editorRef.current, model, document.getSelection());
      (0, _operations.replaceRangeAndMoveCaret)(range, parts);
    });
    (0, _defineProperty2.default)(this, "onInput", event => {
      // ignore any input while doing IME compositions
      if (this.isIMEComposing) {
        return;
      }

      this.modifiedFlag = true;
      const sel = document.getSelection();
      const {
        caret,
        text
      } = (0, _dom.getCaretOffsetAndText)(this.editorRef.current, sel);
      this.props.model.update(text, event.inputType, caret);
    });
    (0, _defineProperty2.default)(this, "onBlur", () => {
      document.removeEventListener("selectionchange", this.onSelectionChange);
    });
    (0, _defineProperty2.default)(this, "onFocus", () => {
      document.addEventListener("selectionchange", this.onSelectionChange); // force to recalculate

      this.lastSelection = null;
      this.refreshLastCaretIfNeeded();
    });
    (0, _defineProperty2.default)(this, "onSelectionChange", () => {
      const {
        isEmpty
      } = this.props.model;
      this.refreshLastCaretIfNeeded();
      const selection = document.getSelection();

      if (this.hasTextSelected && selection.isCollapsed) {
        this.hasTextSelected = false;

        if (this.formatBarRef.current) {
          this.formatBarRef.current.hide();
        }
      } else if (!selection.isCollapsed && !isEmpty) {
        this.hasTextSelected = true;

        if (this.formatBarRef.current) {
          const selectionRect = selection.getRangeAt(0).getBoundingClientRect();
          this.formatBarRef.current.showAt(selectionRect);
        }
      }
    });
    (0, _defineProperty2.default)(this, "onKeyDown", event => {
      var _model$autoComplete;

      const model = this.props.model;
      let handled = false;

      if (this.state.surroundWith && document.getSelection().type !== "Caret") {
        // This surrounds the selected text with a character. This is
        // intentionally left out of the keybinding manager as the keybinds
        // here shouldn't be changeable
        const selectionRange = (0, _dom.getRangeForSelection)(this.editorRef.current, this.props.model, document.getSelection()); // trim the range as we want it to exclude leading/trailing spaces

        selectionRange.trim();

        if ([...SURROUND_WITH_DOUBLE_CHARACTERS.keys(), ...SURROUND_WITH_CHARACTERS].includes(event.key)) {
          this.historyManager.ensureLastChangesPushed(this.props.model);
          this.modifiedFlag = true;
          (0, _operations.toggleInlineFormat)(selectionRange, event.key, SURROUND_WITH_DOUBLE_CHARACTERS.get(event.key));
          handled = true;
        }
      }

      const autocompleteAction = (0, _KeyBindingsManager.getKeyBindingsManager)().getAutocompleteAction(event);

      if ((_model$autoComplete = model.autoComplete) !== null && _model$autoComplete !== void 0 && _model$autoComplete.hasCompletions()) {
        const autoComplete = model.autoComplete;

        switch (autocompleteAction) {
          case _KeyBindingsManager.AutocompleteAction.ForceComplete:
          case _KeyBindingsManager.AutocompleteAction.Complete:
            this.historyManager.ensureLastChangesPushed(this.props.model);
            this.modifiedFlag = true;
            autoComplete.confirmCompletion();
            handled = true;
            break;

          case _KeyBindingsManager.AutocompleteAction.PrevSelection:
            autoComplete.selectPreviousSelection();
            handled = true;
            break;

          case _KeyBindingsManager.AutocompleteAction.NextSelection:
            autoComplete.selectNextSelection();
            handled = true;
            break;

          case _KeyBindingsManager.AutocompleteAction.Cancel:
            autoComplete.onEscape(event);
            handled = true;
            break;

          default:
            return;
          // don't preventDefault on anything else
        }
      } else if (autocompleteAction === _KeyBindingsManager.AutocompleteAction.ForceComplete && !this.state.showVisualBell) {
        // there is no current autocomplete window, try to open it
        this.tabCompleteName();
        handled = true;
      } else if (event.key === _Keyboard.Key.BACKSPACE || event.key === _Keyboard.Key.DELETE) {
        this.formatBarRef.current.hide();
      }

      if (handled) {
        event.preventDefault();
        event.stopPropagation();
        return;
      }

      const action = (0, _KeyBindingsManager.getKeyBindingsManager)().getMessageComposerAction(event);

      switch (action) {
        case _KeyBindingsManager.MessageComposerAction.FormatBold:
          this.onFormatAction(_MessageComposerFormatBar.Formatting.Bold);
          handled = true;
          break;

        case _KeyBindingsManager.MessageComposerAction.FormatItalics:
          this.onFormatAction(_MessageComposerFormatBar.Formatting.Italics);
          handled = true;
          break;

        case _KeyBindingsManager.MessageComposerAction.FormatQuote:
          this.onFormatAction(_MessageComposerFormatBar.Formatting.Quote);
          handled = true;
          break;

        case _KeyBindingsManager.MessageComposerAction.EditRedo:
          if (this.historyManager.canRedo()) {
            const {
              parts,
              caret
            } = this.historyManager.redo(); // pass matching inputType so historyManager doesn't push echo
            // when invoked from rerender callback.

            model.reset(parts, caret, "historyRedo");
          }

          handled = true;
          break;

        case _KeyBindingsManager.MessageComposerAction.EditUndo:
          if (this.historyManager.canUndo()) {
            const {
              parts,
              caret
            } = this.historyManager.undo(this.props.model); // pass matching inputType so historyManager doesn't push echo
            // when invoked from rerender callback.

            model.reset(parts, caret, "historyUndo");
          }

          handled = true;
          break;

        case _KeyBindingsManager.MessageComposerAction.NewLine:
          this.insertText("\n");
          handled = true;
          break;

        case _KeyBindingsManager.MessageComposerAction.MoveCursorToStart:
          (0, _caret.setSelection)(this.editorRef.current, model, {
            index: 0,
            offset: 0
          });
          handled = true;
          break;

        case _KeyBindingsManager.MessageComposerAction.MoveCursorToEnd:
          (0, _caret.setSelection)(this.editorRef.current, model, {
            index: model.parts.length - 1,
            offset: model.parts[model.parts.length - 1].text.length
          });
          handled = true;
          break;
      }

      if (handled) {
        event.preventDefault();
        event.stopPropagation();
      }
    });
    (0, _defineProperty2.default)(this, "onAutoCompleteConfirm", completion => {
      this.modifiedFlag = true;
      this.props.model.autoComplete.onComponentConfirm(completion);
    });
    (0, _defineProperty2.default)(this, "onAutoCompleteSelectionChange", completionIndex => {
      this.modifiedFlag = true;
      this.setState({
        completionIndex
      });
    });
    (0, _defineProperty2.default)(this, "configureEmoticonAutoReplace", () => {
      this.props.model.setTransformCallback(this.transform);
    });
    (0, _defineProperty2.default)(this, "configureShouldShowPillAvatar", () => {
      const showPillAvatar = _SettingsStore.default.getValue("Pill.shouldShowPillAvatar");

      this.setState({
        showPillAvatar
      });
    });
    (0, _defineProperty2.default)(this, "surroundWithSettingChanged", () => {
      const surroundWith = _SettingsStore.default.getValue("MessageComposerInput.surroundWith");

      this.setState({
        surroundWith
      });
    });
    (0, _defineProperty2.default)(this, "transform", documentPosition => {
      const shouldReplace = _SettingsStore.default.getValue('MessageComposerInput.autoReplaceEmoji');

      if (shouldReplace) this.replaceEmoticon(documentPosition, REGEX_EMOTICON_WHITESPACE);
    });
    (0, _defineProperty2.default)(this, "onFormatAction", action => {
      const range = (0, _dom.getRangeForSelection)(this.editorRef.current, this.props.model, document.getSelection()); // trim the range as we want it to exclude leading/trailing spaces

      range.trim();

      if (range.length === 0) {
        return;
      }

      this.historyManager.ensureLastChangesPushed(this.props.model);
      this.modifiedFlag = true;

      switch (action) {
        case _MessageComposerFormatBar.Formatting.Bold:
          (0, _operations.toggleInlineFormat)(range, "**");
          break;

        case _MessageComposerFormatBar.Formatting.Italics:
          (0, _operations.toggleInlineFormat)(range, "_");
          break;

        case _MessageComposerFormatBar.Formatting.Strikethrough:
          (0, _operations.toggleInlineFormat)(range, "<del>", "</del>");
          break;

        case _MessageComposerFormatBar.Formatting.Code:
          (0, _operations.formatRangeAsCode)(range);
          break;

        case _MessageComposerFormatBar.Formatting.Quote:
          (0, _operations.formatRangeAsQuote)(range);
          break;

        case _MessageComposerFormatBar.Formatting.InsertLink:
          (0, _operations.formatRangeAsLink)(range);
          break;
      }
    });
    this.state = {
      showPillAvatar: _SettingsStore.default.getValue("Pill.shouldShowPillAvatar"),
      surroundWith: _SettingsStore.default.getValue("MessageComposerInput.surroundWith"),
      showVisualBell: false
    };
    this.emoticonSettingHandle = _SettingsStore.default.watchSetting('MessageComposerInput.autoReplaceEmoji', null, this.configureEmoticonAutoReplace);
    this.configureEmoticonAutoReplace();
    this.shouldShowPillAvatarSettingHandle = _SettingsStore.default.watchSetting("Pill.shouldShowPillAvatar", null, this.configureShouldShowPillAvatar);
    this.surroundWithHandle = _SettingsStore.default.watchSetting("MessageComposerInput.surroundWith", null, this.surroundWithSettingChanged);
  }

  componentDidUpdate(prevProps) {
    // We need to re-check the placeholder when the enabled state changes because it causes the
    // placeholder element to remount, which gets rid of the `::before` class. Re-evaluating the
    // placeholder means we get a proper `::before` with the placeholder.
    const enabledChange = this.props.disabled !== prevProps.disabled;
    const placeholderChanged = this.props.placeholder !== prevProps.placeholder;

    if (this.props.placeholder && (placeholderChanged || enabledChange)) {
      const {
        isEmpty
      } = this.props.model;

      if (isEmpty) {
        this.showPlaceholder();
      } else {
        this.hidePlaceholder();
      }
    }
  }

  replaceEmoticon(caretPosition, regex) {
    const {
      model
    } = this.props;
    const range = model.startRange(caretPosition); // expand range max 8 characters backwards from caretPosition,
    // as a space to look for an emoticon

    let n = 8;
    range.expandBackwardsWhile((index, offset) => {
      const part = model.parts[index];
      n -= 1;
      return n >= 0 && [_parts.Type.Plain, _parts.Type.PillCandidate, _parts.Type.Newline].includes(part.type);
    });
    const emoticonMatch = regex.exec(range.text);

    if (emoticonMatch) {
      const query = emoticonMatch[1].replace("-", ""); // try both exact match and lower-case, this means that xd won't match xD but :P will match :p

      const data = _emoji.EMOTICON_TO_EMOJI.get(query) || _emoji.EMOTICON_TO_EMOJI.get(query.toLowerCase());

      if (data) {
        const {
          partCreator
        } = model;
        const firstMatch = emoticonMatch[0];
        const moveStart = firstMatch[0] === " " ? 1 : 0; // we need the range to only comprise of the emoticon
        // because we'll replace the whole range with an emoji,
        // so move the start forward to the start of the emoticon.
        // Take + 1 because index is reported without the possible preceding space.

        range.moveStartForwards(emoticonMatch.index + moveStart); // If the end is a trailing space/newline move end backwards, so that we don't replace it

        if (["\n", " "].includes(firstMatch[firstMatch.length - 1])) {
          range.moveEndBackwards(1);
        } // this returns the amount of added/removed characters during the replace
        // so the caret position can be adjusted.


        return range.replace([partCreator.plain(data.unicode)]);
      }
    }
  }

  showPlaceholder() {
    // escape single quotes
    const placeholder = this.props.placeholder.replace(/'/g, '\\\'');
    this.editorRef.current.style.setProperty("--placeholder", `'${placeholder}'`);
    this.editorRef.current.classList.add("mx_BasicMessageComposer_inputEmpty");
  }

  hidePlaceholder() {
    this.editorRef.current.classList.remove("mx_BasicMessageComposer_inputEmpty");
    this.editorRef.current.style.removeProperty("--placeholder");
  }

  isComposing(event) {
    // checking the event.isComposing flag just in case any browser out there
    // emits events related to the composition after compositionend
    // has been fired
    return !!(this.isIMEComposing || event.nativeEvent && event.nativeEvent.isComposing);
  }

  insertText(textToInsert, inputType = "insertText") {
    const sel = document.getSelection();
    const {
      caret,
      text
    } = (0, _dom.getCaretOffsetAndText)(this.editorRef.current, sel);
    const newText = text.substr(0, caret.offset) + textToInsert + text.substr(caret.offset);
    caret.offset += textToInsert.length;
    this.modifiedFlag = true;
    this.props.model.update(newText, inputType, caret);
  } // this is used later to see if we need to recalculate the caret
  // on selectionchange. If it is just a consequence of typing
  // we don't need to. But if the user is navigating the caret without input
  // we need to recalculate it, to be able to know where to insert content after
  // losing focus


  setLastCaretFromPosition(position) {
    const {
      model
    } = this.props;
    this._isCaretAtEnd = position.isAtEnd(model);
    this.lastCaret = position.asOffset(model);
    this.lastSelection = cloneSelection(document.getSelection());
  }

  refreshLastCaretIfNeeded() {
    // XXX: needed when going up and down in editing messages ... not sure why yet
    // because the editors should stop doing this when when blurred ...
    // maybe it's on focus and the _editorRef isn't available yet or something.
    if (!this.editorRef.current) {
      return;
    }

    const selection = document.getSelection();

    if (!this.lastSelection || !selectionEquals(this.lastSelection, selection)) {
      this.lastSelection = cloneSelection(selection);
      const {
        caret,
        text
      } = (0, _dom.getCaretOffsetAndText)(this.editorRef.current, selection);
      this.lastCaret = caret;
      this._isCaretAtEnd = caret.offset === text.length;
    }

    return this.lastCaret;
  }

  clearUndoHistory() {
    this.historyManager.clear();
  }

  getCaret() {
    return this.lastCaret;
  }

  isSelectionCollapsed() {
    return !this.lastSelection || this.lastSelection.isCollapsed;
  }

  isCaretAtStart() {
    return this.getCaret().offset === 0;
  }

  isCaretAtEnd() {
    return this._isCaretAtEnd;
  }

  async tabCompleteName() {
    try {
      await new Promise(resolve => this.setState({
        showVisualBell: false
      }, resolve));
      const {
        model
      } = this.props;
      const caret = this.getCaret();
      const position = model.positionForOffset(caret.offset, caret.atNodeEnd);
      const range = model.startRange(position);
      range.expandBackwardsWhile((index, offset, part) => {
        return part.text[offset] !== " " && part.text[offset] !== "+" && (part.type === _parts.Type.Plain || part.type === _parts.Type.PillCandidate || part.type === _parts.Type.Command);
      });
      const {
        partCreator
      } = model; // await for auto-complete to be open

      await model.transform(() => {
        const addedLen = range.replace([partCreator.pillCandidate(range.text)]);
        return model.positionForOffset(caret.offset + addedLen, true);
      }); // Don't try to do things with the autocomplete if there is none shown

      if (model.autoComplete) {
        await model.autoComplete.startSelection();

        if (!model.autoComplete.hasSelection()) {
          this.setState({
            showVisualBell: true
          });
          model.autoComplete.close();
        }
      } else {
        this.setState({
          showVisualBell: true
        });
      }
    } catch (err) {
      _logger.logger.error(err);
    }
  }

  isModified() {
    return this.modifiedFlag;
  }

  componentWillUnmount() {
    document.removeEventListener("selectionchange", this.onSelectionChange);
    this.editorRef.current.removeEventListener("input", this.onInput, true);
    this.editorRef.current.removeEventListener("compositionstart", this.onCompositionStart, true);
    this.editorRef.current.removeEventListener("compositionend", this.onCompositionEnd, true);

    _SettingsStore.default.unwatchSetting(this.emoticonSettingHandle);

    _SettingsStore.default.unwatchSetting(this.shouldShowPillAvatarSettingHandle);

    _SettingsStore.default.unwatchSetting(this.surroundWithHandle);
  }

  componentDidMount() {
    const model = this.props.model;
    model.setUpdateCallback(this.updateEditorState);
    const partCreator = model.partCreator; // TODO: does this allow us to get rid of EditorStateTransfer?
    // not really, but we could not serialize the parts, and just change the autoCompleter

    partCreator.setAutoCompleteCreator((0, _parts.getAutoCompleteCreator)(() => this.autocompleteRef.current, query => new Promise(resolve => this.setState({
      query
    }, resolve)))); // initial render of model

    this.updateEditorState(this.getInitialCaretPosition()); // attach input listener by hand so React doesn't proxy the events,
    // as the proxied event doesn't support inputType, which we need.

    this.editorRef.current.addEventListener("input", this.onInput, true);
    this.editorRef.current.addEventListener("compositionstart", this.onCompositionStart, true);
    this.editorRef.current.addEventListener("compositionend", this.onCompositionEnd, true);
    this.editorRef.current.focus();
  }

  getInitialCaretPosition() {
    let caretPosition;

    if (this.props.initialCaret) {
      // if restoring state from a previous editor,
      // restore caret position from the state
      const caret = this.props.initialCaret;
      caretPosition = this.props.model.positionForOffset(caret.offset, caret.atNodeEnd);
    } else {
      // otherwise, set it at the end
      caretPosition = this.props.model.getPositionAtEnd();
    }

    return caretPosition;
  }

  render() {
    let autoComplete;

    if (this.state.autoComplete) {
      const query = this.state.query;
      const queryLen = query.length;
      autoComplete = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_BasicMessageComposer_AutoCompleteWrapper"
      }, /*#__PURE__*/_react.default.createElement(_Autocomplete.default, {
        ref: this.autocompleteRef,
        query: query,
        onConfirm: this.onAutoCompleteConfirm,
        onSelectionChange: this.onAutoCompleteSelectionChange,
        selection: {
          beginning: true,
          end: queryLen,
          start: queryLen
        },
        room: this.props.room
      }));
    }

    const wrapperClasses = (0, _classnames.default)("mx_BasicMessageComposer", {
      "mx_BasicMessageComposer_input_error": this.state.showVisualBell
    });
    const classes = (0, _classnames.default)("mx_BasicMessageComposer_input", {
      "mx_BasicMessageComposer_input_shouldShowPillAvatar": this.state.showPillAvatar,
      "mx_BasicMessageComposer_input_disabled": this.props.disabled
    });
    const shortcuts = {
      [_MessageComposerFormatBar.Formatting.Bold]: ctrlShortcutLabel("B"),
      [_MessageComposerFormatBar.Formatting.Italics]: ctrlShortcutLabel("I"),
      [_MessageComposerFormatBar.Formatting.Quote]: ctrlShortcutLabel(">")
    };
    const {
      completionIndex
    } = this.state;
    const hasAutocomplete = Boolean(this.state.autoComplete);
    let activeDescendant;

    if (hasAutocomplete && completionIndex >= 0) {
      activeDescendant = (0, _Autocomplete.generateCompletionDomId)(completionIndex);
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: wrapperClasses
    }, autoComplete, /*#__PURE__*/_react.default.createElement(_MessageComposerFormatBar.default, {
      ref: this.formatBarRef,
      onAction: this.onFormatAction,
      shortcuts: shortcuts
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: classes,
      contentEditable: this.props.disabled ? null : true,
      tabIndex: 0,
      onBlur: this.onBlur,
      onFocus: this.onFocus,
      onCopy: this.onCopy,
      onCut: this.onCut,
      onPaste: this.onPaste,
      onKeyDown: this.onKeyDown,
      ref: this.editorRef,
      "aria-label": this.props.label,
      role: "textbox",
      "aria-multiline": "true",
      "aria-autocomplete": "list",
      "aria-haspopup": "listbox",
      "aria-expanded": hasAutocomplete,
      "aria-owns": "mx_Autocomplete",
      "aria-activedescendant": activeDescendant,
      dir: "auto",
      "aria-disabled": this.props.disabled
    }));
  }

  focus() {
    this.editorRef.current.focus();
  }

  insertMention(userId) {
    this.modifiedFlag = true;
    const {
      model
    } = this.props;
    const {
      partCreator
    } = model;
    const member = this.props.room.getMember(userId);
    const displayName = member ? member.rawDisplayName : userId;
    const caret = this.getCaret();
    const position = model.positionForOffset(caret.offset, caret.atNodeEnd); // Insert suffix only if the caret is at the start of the composer

    const parts = partCreator.createMentionParts(caret.offset === 0, displayName, userId);
    model.transform(() => {
      const addedLen = model.insert(parts, position);
      return model.positionForOffset(caret.offset + addedLen, true);
    }); // refocus on composer, as we just clicked "Mention"

    this.focus();
  }

  insertQuotedMessage(event) {
    this.modifiedFlag = true;
    const {
      model
    } = this.props;
    const {
      partCreator
    } = model;
    const quoteParts = (0, _deserialize.parseEvent)(event, partCreator, {
      isQuotedMessage: true
    }); // add two newlines

    quoteParts.push(partCreator.newline());
    quoteParts.push(partCreator.newline());
    model.transform(() => {
      const addedLen = model.insert(quoteParts, model.positionForOffset(0));
      return model.positionForOffset(addedLen, true);
    }); // refocus on composer, as we just clicked "Quote"

    this.focus();
  }

  insertPlaintext(text) {
    this.modifiedFlag = true;
    const {
      model
    } = this.props;
    const {
      partCreator
    } = model;
    const caret = this.getCaret();
    const position = model.positionForOffset(caret.offset, caret.atNodeEnd);
    model.transform(() => {
      const addedLen = model.insert([partCreator.plain(text)], position);
      return model.positionForOffset(caret.offset + addedLen, true);
    });
  }

}) || _class);
exports.default = BasicMessageEditor;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,