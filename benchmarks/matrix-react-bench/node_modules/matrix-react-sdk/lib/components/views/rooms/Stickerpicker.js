"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _languageHandler = require("../../../languageHandler");

var _AppTile = _interopRequireDefault(require("../elements/AppTile"));

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

var _WidgetUtils = _interopRequireDefault(require("../../../utils/WidgetUtils"));

var _PersistedElement = _interopRequireDefault(require("../elements/PersistedElement"));

var _IntegrationManagers = require("../../../integrations/IntegrationManagers");

var _SettingsStore = _interopRequireDefault(require("../../../settings/SettingsStore"));

var _ContextMenu = _interopRequireWildcard(require("../../structures/ContextMenu"));

var _WidgetType = require("../../../widgets/WidgetType");

var _actions = require("../../../dispatcher/actions");

var _WidgetMessagingStore = require("../../../stores/widgets/WidgetMessagingStore");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _GenericElementContextMenu = _interopRequireDefault(require("../context_menus/GenericElementContextMenu"));

var _logger = require("matrix-js-sdk/src/logger");

var _dec, _class, _class2, _temp;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// This should be below the dialog level (4000), but above the rest of the UI (1000-2000).
// We sit in a context menu, so this should be given to the context menu.
const STICKERPICKER_Z_INDEX = 3500; // Key to store the widget's AppTile under in PersistedElement

const PERSISTED_ELEMENT_KEY = "stickerPicker";
let Stickerpicker = (_dec = (0, _replaceableComponent.replaceableComponent)("views.rooms.Stickerpicker"), _dec(_class = (_temp = _class2 = class Stickerpicker extends _react.default.PureComponent {
  // This is loaded by _acquireScalarClient on an as-needed basis.
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "dispatcherRef", void 0);
    (0, _defineProperty2.default)(this, "prevSentVisibility", void 0);
    (0, _defineProperty2.default)(this, "popoverWidth", 300);
    (0, _defineProperty2.default)(this, "popoverHeight", 300);
    (0, _defineProperty2.default)(this, "scalarClient", null);
    (0, _defineProperty2.default)(this, "removeStickerpickerWidgets", async () => {
      const scalarClient = await this.acquireScalarClient();

      _logger.logger.log('Removing Stickerpicker widgets');

      if (this.state.widgetId) {
        if (scalarClient) {
          scalarClient.disableWidgetAssets(_WidgetType.WidgetType.STICKERPICKER, this.state.widgetId).then(() => {
            _logger.logger.log('Assets disabled');
          }).catch(err => {
            _logger.logger.error('Failed to disable assets');
          });
        } else {
          _logger.logger.error("Cannot disable assets: no scalar client");
        }
      } else {
        _logger.logger.warn('No widget ID specified, not disabling assets');
      }

      this.props.setShowStickers(false);

      _WidgetUtils.default.removeStickerpickerWidgets().then(() => {
        this.forceUpdate();
      }).catch(e => {
        _logger.logger.error('Failed to remove sticker picker widget', e);
      });
    });
    (0, _defineProperty2.default)(this, "updateWidget", () => {
      const stickerpickerWidget = _WidgetUtils.default.getStickerpickerWidgets()[0];

      if (!stickerpickerWidget) {
        Stickerpicker.currentWidget = null;
        this.setState({
          stickerpickerWidget: null,
          widgetId: null
        });
        return;
      }

      const currentWidget = Stickerpicker.currentWidget;
      let currentUrl = null;

      if (currentWidget && currentWidget.content && currentWidget.content.url) {
        currentUrl = currentWidget.content.url;
      }

      let newUrl = null;

      if (stickerpickerWidget && stickerpickerWidget.content && stickerpickerWidget.content.url) {
        newUrl = stickerpickerWidget.content.url;
      }

      if (newUrl !== currentUrl) {
        // Destroy the existing frame so a new one can be created
        _PersistedElement.default.destroyElement(PERSISTED_ELEMENT_KEY);
      }

      Stickerpicker.currentWidget = stickerpickerWidget;
      this.setState({
        stickerpickerWidget,
        widgetId: stickerpickerWidget ? stickerpickerWidget.id : null
      });
    });
    (0, _defineProperty2.default)(this, "onWidgetAction", payload => {
      switch (payload.action) {
        case "user_widget_updated":
          this.forceUpdate();
          break;

        case "stickerpicker_close":
          this.props.setShowStickers(false);
          break;

        case _actions.Action.AfterRightPanelPhaseChange:
        case "show_left_panel":
        case "hide_left_panel":
          this.props.setShowStickers(false);
          break;
      }
    });
    (0, _defineProperty2.default)(this, "onShowStickersClick", e => {
      if (!_SettingsStore.default.getValue("integrationProvisioning")) {
        // Intercept this case and spawn a warning.
        return _IntegrationManagers.IntegrationManagers.sharedInstance().showDisabledDialog();
      } // XXX: Simplify by using a context menu that is positioned relative to the sticker picker button


      const buttonRect = e.currentTarget.getBoundingClientRect(); // The window X and Y offsets are to adjust position when zoomed in to page

      let x = buttonRect.right + window.pageXOffset - 41; // Amount of horizontal space between the right of menu and the right of the viewport
      //  (10 = amount needed to make chevron centrally aligned)

      const rightPad = 10; // When the sticker picker would be displayed off of the viewport, adjust x
      //  (302 = width of context menu, including borders)

      x = Math.min(x, document.body.clientWidth - (302 + rightPad)); // Offset the chevron location, which is relative to the left of the context menu
      //  (10 = offset when context menu would not be displayed off viewport)
      //  (2 = context menu borders)

      const stickerpickerChevronOffset = Math.max(10, 2 + window.pageXOffset + buttonRect.left - x);
      const y = buttonRect.top + buttonRect.height / 2 + window.pageYOffset - 19;
      this.props.setShowStickers(true);
      this.setState({
        stickerpickerX: x,
        stickerpickerY: y,
        stickerpickerChevronOffset
      });
    });
    (0, _defineProperty2.default)(this, "onResize", () => {
      if (this.props.showStickers) {
        this.props.setShowStickers(false);
      }
    });
    (0, _defineProperty2.default)(this, "onFinished", () => {
      if (this.props.showStickers) {
        this.props.setShowStickers(false);
      }
    });
    (0, _defineProperty2.default)(this, "launchManageIntegrations", () => {
      // TODO: Open the right integration manager for the widget
      if (_SettingsStore.default.getValue("feature_many_integration_managers")) {
        _IntegrationManagers.IntegrationManagers.sharedInstance().openAll(this.props.room, `type_${_WidgetType.WidgetType.STICKERPICKER.preferred}`, this.state.widgetId);
      } else {
        _IntegrationManagers.IntegrationManagers.sharedInstance().getPrimaryManager().open(this.props.room, `type_${_WidgetType.WidgetType.STICKERPICKER.preferred}`, this.state.widgetId);
      }
    });
    this.state = {
      imError: null,
      stickerpickerX: null,
      stickerpickerY: null,
      stickerpickerWidget: null,
      widgetId: null
    };
  }

  acquireScalarClient() {
    if (this.scalarClient) return Promise.resolve(this.scalarClient); // TODO: Pick the right manager for the widget

    if (_IntegrationManagers.IntegrationManagers.sharedInstance().hasManager()) {
      this.scalarClient = _IntegrationManagers.IntegrationManagers.sharedInstance().getPrimaryManager().getScalarClient();
      return this.scalarClient.connect().then(() => {
        this.forceUpdate();
        return this.scalarClient;
      }).catch(e => {
        this.imError((0, _languageHandler._td)("Failed to connect to integration manager"), e);
      });
    } else {
      _IntegrationManagers.IntegrationManagers.sharedInstance().openNoManagerDialog();
    }
  }

  componentDidMount() {
    // Close the sticker picker when the window resizes
    window.addEventListener('resize', this.onResize);
    this.dispatcherRef = _dispatcher.default.register(this.onWidgetAction); // Track updates to widget state in account data

    _MatrixClientPeg.MatrixClientPeg.get().on('accountData', this.updateWidget); // Initialise widget state from current account data


    this.updateWidget();
  }

  componentWillUnmount() {
    const client = _MatrixClientPeg.MatrixClientPeg.get();

    if (client) client.removeListener('accountData', this.updateWidget);
    window.removeEventListener('resize', this.onResize);

    if (this.dispatcherRef) {
      _dispatcher.default.unregister(this.dispatcherRef);
    }
  }

  componentDidUpdate(prevProps, prevState) {
    this.sendVisibilityToWidget(this.props.showStickers);
  }

  imError(errorMsg, e) {
    _logger.logger.error(errorMsg, e);

    this.setState({
      imError: (0, _languageHandler._t)(errorMsg)
    });
    this.props.setShowStickers(false);
  }

  defaultStickerpickerContent() {
    return /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      onClick: this.launchManageIntegrations,
      className: "mx_Stickers_contentPlaceholder"
    }, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("You don't currently have any stickerpacks enabled")), /*#__PURE__*/_react.default.createElement("p", {
      className: "mx_Stickers_addLink"
    }, (0, _languageHandler._t)("Add some now")), /*#__PURE__*/_react.default.createElement("img", {
      src: require("../../../../res/img/stickerpack-placeholder.png"),
      alt: ""
    }));
  }

  errorStickerpickerContent() {
    return /*#__PURE__*/_react.default.createElement("div", {
      style: {
        textAlign: "center"
      },
      className: "error"
    }, /*#__PURE__*/_react.default.createElement("p", null, " ", this.state.imError, " "));
  }

  sendVisibilityToWidget(visible) {
    if (!this.state.stickerpickerWidget) return;

    const messaging = _WidgetMessagingStore.WidgetMessagingStore.instance.getMessagingForId(this.state.stickerpickerWidget.id);

    if (messaging && visible !== this.prevSentVisibility) {
      messaging.updateVisibility(visible).catch(err => {
        _logger.logger.error("Error updating widget visibility: ", err);
      });
      this.prevSentVisibility = visible;
    }
  }

  getStickerpickerContent() {
    // Handle integration manager errors
    if (this.state.imError) {
      return this.errorStickerpickerContent();
    } // Stickers
    // TODO - Add support for Stickerpickers from multiple app stores.
    // Render content from multiple stickerpack sources, each within their
    // own iframe, within the stickerpicker UI element.


    const stickerpickerWidget = this.state.stickerpickerWidget;
    let stickersContent; // Use a separate ReactDOM tree to render the AppTile separately so that it persists and does
    // not unmount when we (a) close the sticker picker (b) switch rooms. It's properties are still
    // updated.
    // Load stickerpack content

    if (stickerpickerWidget && stickerpickerWidget.content && stickerpickerWidget.content.url) {
      // Set default name
      stickerpickerWidget.content.name = stickerpickerWidget.content.name || (0, _languageHandler._t)("Stickerpack"); // FIXME: could this use the same code as other apps?

      const stickerApp = {
        id: stickerpickerWidget.id,
        url: stickerpickerWidget.content.url,
        name: stickerpickerWidget.content.name,
        type: stickerpickerWidget.content.type,
        data: stickerpickerWidget.content.data,
        roomId: stickerpickerWidget.content.roomId,
        eventId: stickerpickerWidget.content.eventId,
        avatar_url: stickerpickerWidget.content.avatar_url,
        creatorUserId: stickerpickerWidget.content.creatorUserId
      };
      stickersContent = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_Stickers_content_container"
      }, /*#__PURE__*/_react.default.createElement("div", {
        id: "stickersContent",
        className: "mx_Stickers_content",
        style: {
          border: 'none',
          height: this.popoverHeight,
          width: this.popoverWidth
        }
      }, /*#__PURE__*/_react.default.createElement(_PersistedElement.default, {
        persistKey: PERSISTED_ELEMENT_KEY,
        zIndex: STICKERPICKER_Z_INDEX
      }, /*#__PURE__*/_react.default.createElement(_AppTile.default, {
        app: stickerApp,
        room: this.props.room,
        fullWidth: true,
        userId: _MatrixClientPeg.MatrixClientPeg.get().credentials.userId,
        creatorUserId: stickerpickerWidget.sender || _MatrixClientPeg.MatrixClientPeg.get().credentials.userId,
        waitForIframeLoad: true,
        showMenubar: true,
        onEditClick: this.launchManageIntegrations,
        onDeleteClick: this.removeStickerpickerWidgets,
        showTitle: false,
        showPopout: false,
        handleMinimisePointerEvents: true,
        userWidget: true
      }))));
    } else {
      // Default content to show if stickerpicker widget not added
      stickersContent = this.defaultStickerpickerContent();
    }

    return stickersContent;
  } // Dev note: this isn't jsdoc because it's angry.

  /*
   * Show the sticker picker overlay
   * If no stickerpacks have been added, show a link to the integration manager add sticker packs page.
   */


  render() {
    if (!this.props.showStickers) return null;
    return /*#__PURE__*/_react.default.createElement(_ContextMenu.default, (0, _extends2.default)({
      chevronOffset: this.state.stickerpickerChevronOffset,
      chevronFace: _ContextMenu.ChevronFace.Bottom,
      left: this.state.stickerpickerX,
      top: this.state.stickerpickerY,
      menuWidth: this.popoverWidth,
      menuHeight: this.popoverHeight,
      onFinished: this.onFinished,
      menuPaddingTop: 0,
      menuPaddingLeft: 0,
      menuPaddingRight: 0,
      zIndex: STICKERPICKER_Z_INDEX
    }, this.props.menuPosition), /*#__PURE__*/_react.default.createElement(_GenericElementContextMenu.default, {
      element: this.getStickerpickerContent(),
      onResize: this.onFinished
    }));
  }

}, (0, _defineProperty2.default)(_class2, "currentWidget", void 0), _temp)) || _class);
exports.default = Stickerpicker;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,