"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.contextMenuBelow = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _RovingTabIndex = require("../../../accessibility/RovingTabIndex");

var _AccessibleButton = _interopRequireDefault(require("../../views/elements/AccessibleButton"));

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _actions = require("../../../dispatcher/actions");

var _Keyboard = require("../../../Keyboard");

var _ActiveRoomObserver = _interopRequireDefault(require("../../../ActiveRoomObserver"));

var _languageHandler = require("../../../languageHandler");

var _ContextMenu = require("../../structures/ContextMenu");

var _models = require("../../../stores/room-list/models");

var _MessagePreviewStore = require("../../../stores/room-list/MessagePreviewStore");

var _DecoratedRoomAvatar = _interopRequireDefault(require("../avatars/DecoratedRoomAvatar"));

var _RoomNotifs = require("../../../RoomNotifs");

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _NotificationBadge = _interopRequireDefault(require("./NotificationBadge"));

var _RoomListStore = _interopRequireDefault(require("../../../stores/room-list/RoomListStore"));

var _RoomListActions = _interopRequireDefault(require("../../../actions/RoomListActions"));

var _RoomNotificationStateStore = require("../../../stores/notifications/RoomNotificationStateStore");

var _NotificationState = require("../../../stores/notifications/NotificationState");

var _AccessibleTooltipButton = _interopRequireDefault(require("../elements/AccessibleTooltipButton"));

var _EchoChamber = require("../../../stores/local-echo/EchoChamber");

var _RoomEchoChamber = require("../../../stores/local-echo/RoomEchoChamber");

var _GenericEchoChamber = require("../../../stores/local-echo/GenericEchoChamber");

var _IconizedContextMenu = _interopRequireWildcard(require("../context_menus/IconizedContextMenu"));

var _CommunityPrototypeStore = require("../../../stores/CommunityPrototypeStore");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _logger = require("matrix-js-sdk/src/logger");

var _dec, _class;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const messagePreviewId = roomId => `mx_RoomTile_messagePreview_${roomId}`;

const contextMenuBelow = elementRect => {
  // align the context menu's icons with the icon which opened the context menu
  const left = elementRect.left + window.pageXOffset - 9;
  const top = elementRect.bottom + window.pageYOffset + 17;
  const chevronFace = _ContextMenu.ChevronFace.None;
  return {
    left,
    top,
    chevronFace
  };
};

exports.contextMenuBelow = contextMenuBelow;
let RoomTile = (_dec = (0, _replaceableComponent.replaceableComponent)("views.rooms.RoomTile"), _dec(_class = class RoomTile extends _react.default.PureComponent {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "dispatcherRef", void 0);
    (0, _defineProperty2.default)(this, "roomTileRef", /*#__PURE__*/(0, _react.createRef)());
    (0, _defineProperty2.default)(this, "notificationState", void 0);
    (0, _defineProperty2.default)(this, "roomProps", void 0);
    (0, _defineProperty2.default)(this, "onRoomNameUpdate", room => {
      this.forceUpdate();
    });
    (0, _defineProperty2.default)(this, "onNotificationUpdate", () => {
      this.forceUpdate(); // notification state changed - update
    });
    (0, _defineProperty2.default)(this, "onRoomPropertyUpdate", property => {
      if (property === _RoomEchoChamber.CachedRoomKey.NotificationVolume) this.onNotificationUpdate(); // else ignore - not important for this tile
    });
    (0, _defineProperty2.default)(this, "onAction", payload => {
      if (payload.action === "view_room" && payload.room_id === this.props.room.roomId && payload.show_room_tile) {
        setImmediate(() => {
          this.scrollIntoView();
        });
      }
    });
    (0, _defineProperty2.default)(this, "onCommunityUpdate", roomId => {
      if (roomId !== this.props.room.roomId) return;
      this.forceUpdate(); // we don't have anything to actually update
    });
    (0, _defineProperty2.default)(this, "onRoomPreviewChanged", room => {
      if (this.props.room && room.roomId === this.props.room.roomId) {
        this.generatePreview();
      }
    });
    (0, _defineProperty2.default)(this, "scrollIntoView", () => {
      if (!this.roomTileRef.current) return;
      this.roomTileRef.current.scrollIntoView({
        block: "nearest",
        behavior: "auto"
      });
    });
    (0, _defineProperty2.default)(this, "onTileClick", ev => {
      ev.preventDefault();
      ev.stopPropagation();

      _dispatcher.default.dispatch({
        action: _actions.Action.ViewRoom,
        show_room_tile: true,
        // make sure the room is visible in the list
        room_id: this.props.room.roomId,
        clear_search: ev && (ev.key === _Keyboard.Key.ENTER || ev.key === _Keyboard.Key.SPACE)
      });
    });
    (0, _defineProperty2.default)(this, "onActiveRoomUpdate", isActive => {
      this.setState({
        selected: isActive
      });
    });
    (0, _defineProperty2.default)(this, "onNotificationsMenuOpenClick", ev => {
      ev.preventDefault();
      ev.stopPropagation();
      const target = ev.target;
      this.setState({
        notificationsMenuPosition: target.getBoundingClientRect()
      });
    });
    (0, _defineProperty2.default)(this, "onCloseNotificationsMenu", () => {
      this.setState({
        notificationsMenuPosition: null
      });
    });
    (0, _defineProperty2.default)(this, "onGeneralMenuOpenClick", ev => {
      ev.preventDefault();
      ev.stopPropagation();
      const target = ev.target;
      this.setState({
        generalMenuPosition: target.getBoundingClientRect()
      });
    });
    (0, _defineProperty2.default)(this, "onContextMenu", ev => {
      // If we don't have a context menu to show, ignore the action.
      if (!this.showContextMenu) return;
      ev.preventDefault();
      ev.stopPropagation();
      this.setState({
        generalMenuPosition: {
          left: ev.clientX,
          bottom: ev.clientY
        }
      });
    });
    (0, _defineProperty2.default)(this, "onCloseGeneralMenu", () => {
      this.setState({
        generalMenuPosition: null
      });
    });
    (0, _defineProperty2.default)(this, "onTagRoom", (ev, tagId) => {
      ev.preventDefault();
      ev.stopPropagation();

      if (tagId === _models.DefaultTagID.Favourite || tagId === _models.DefaultTagID.LowPriority) {
        const inverseTag = tagId === _models.DefaultTagID.Favourite ? _models.DefaultTagID.LowPriority : _models.DefaultTagID.Favourite;

        const isApplied = _RoomListStore.default.instance.getTagsForRoom(this.props.room).includes(tagId);

        const removeTag = isApplied ? tagId : inverseTag;
        const addTag = isApplied ? null : tagId;

        _dispatcher.default.dispatch(_RoomListActions.default.tagRoom(_MatrixClientPeg.MatrixClientPeg.get(), this.props.room, removeTag, addTag, undefined, 0));
      } else {
        _logger.logger.warn(`Unexpected tag ${tagId} applied to ${this.props.room.roomId}`);
      }

      if (ev.key === _Keyboard.Key.ENTER) {
        // Implements https://www.w3.org/TR/wai-aria-practices/#keyboard-interaction-12
        this.setState({
          generalMenuPosition: null
        }); // hide the menu
      }
    });
    (0, _defineProperty2.default)(this, "onLeaveRoomClick", ev => {
      ev.preventDefault();
      ev.stopPropagation();

      _dispatcher.default.dispatch({
        action: 'leave_room',
        room_id: this.props.room.roomId
      });

      this.setState({
        generalMenuPosition: null
      }); // hide the menu
    });
    (0, _defineProperty2.default)(this, "onForgetRoomClick", ev => {
      ev.preventDefault();
      ev.stopPropagation();

      _dispatcher.default.dispatch({
        action: 'forget_room',
        room_id: this.props.room.roomId
      });

      this.setState({
        generalMenuPosition: null
      }); // hide the menu
    });
    (0, _defineProperty2.default)(this, "onOpenRoomSettings", ev => {
      ev.preventDefault();
      ev.stopPropagation();

      _dispatcher.default.dispatch({
        action: 'open_room_settings',
        room_id: this.props.room.roomId
      });

      this.setState({
        generalMenuPosition: null
      }); // hide the menu
    });
    (0, _defineProperty2.default)(this, "onCopyRoomClick", ev => {
      ev.preventDefault();
      ev.stopPropagation();

      _dispatcher.default.dispatch({
        action: 'copy_room',
        room_id: this.props.room.roomId
      });

      this.setState({
        generalMenuPosition: null
      }); // hide the menu
    });
    (0, _defineProperty2.default)(this, "onInviteClick", ev => {
      ev.preventDefault();
      ev.stopPropagation();

      _dispatcher.default.dispatch({
        action: 'view_invite',
        roomId: this.props.room.roomId
      });

      this.setState({
        generalMenuPosition: null
      }); // hide the menu
    });
    (0, _defineProperty2.default)(this, "onClickAllNotifs", ev => this.saveNotifState(ev, _RoomNotifs.RoomNotifState.AllMessages));
    (0, _defineProperty2.default)(this, "onClickAlertMe", ev => this.saveNotifState(ev, _RoomNotifs.RoomNotifState.AllMessagesLoud));
    (0, _defineProperty2.default)(this, "onClickMentions", ev => this.saveNotifState(ev, _RoomNotifs.RoomNotifState.MentionsOnly));
    (0, _defineProperty2.default)(this, "onClickMute", ev => this.saveNotifState(ev, _RoomNotifs.RoomNotifState.Mute));
    this.state = {
      selected: _ActiveRoomObserver.default.activeRoomId === this.props.room.roomId,
      notificationsMenuPosition: null,
      generalMenuPosition: null,
      // generatePreview() will return nothing if the user has previews disabled
      messagePreview: ""
    };
    this.generatePreview();
    this.notificationState = _RoomNotificationStateStore.RoomNotificationStateStore.instance.getRoomState(this.props.room);
    this.roomProps = _EchoChamber.EchoChamber.forRoom(this.props.room);
  }

  get showContextMenu() {
    return this.props.tag !== _models.DefaultTagID.Invite;
  }

  get showMessagePreview() {
    return !this.props.isMinimized && this.props.showMessagePreview;
  }

  componentDidUpdate(prevProps, prevState) {
    var _prevProps$room, _this$props$room;

    const showMessageChanged = prevProps.showMessagePreview !== this.props.showMessagePreview;
    const minimizedChanged = prevProps.isMinimized !== this.props.isMinimized;

    if (showMessageChanged || minimizedChanged) {
      this.generatePreview();
    }

    if (((_prevProps$room = prevProps.room) === null || _prevProps$room === void 0 ? void 0 : _prevProps$room.roomId) !== ((_this$props$room = this.props.room) === null || _this$props$room === void 0 ? void 0 : _this$props$room.roomId)) {
      var _prevProps$room2, _this$props$room2, _prevProps$room3, _this$props$room3;

      _MessagePreviewStore.MessagePreviewStore.instance.off(_MessagePreviewStore.MessagePreviewStore.getPreviewChangedEventName(prevProps.room), this.onRoomPreviewChanged);

      _MessagePreviewStore.MessagePreviewStore.instance.on(_MessagePreviewStore.MessagePreviewStore.getPreviewChangedEventName(this.props.room), this.onRoomPreviewChanged);

      _CommunityPrototypeStore.CommunityPrototypeStore.instance.off(_CommunityPrototypeStore.CommunityPrototypeStore.getUpdateEventName((_prevProps$room2 = prevProps.room) === null || _prevProps$room2 === void 0 ? void 0 : _prevProps$room2.roomId), this.onCommunityUpdate);

      _CommunityPrototypeStore.CommunityPrototypeStore.instance.on(_CommunityPrototypeStore.CommunityPrototypeStore.getUpdateEventName((_this$props$room2 = this.props.room) === null || _this$props$room2 === void 0 ? void 0 : _this$props$room2.roomId), this.onCommunityUpdate);

      (_prevProps$room3 = prevProps.room) === null || _prevProps$room3 === void 0 ? void 0 : _prevProps$room3.off("Room.name", this.onRoomNameUpdate);
      (_this$props$room3 = this.props.room) === null || _this$props$room3 === void 0 ? void 0 : _this$props$room3.on("Room.name", this.onRoomNameUpdate);
    }
  }

  componentDidMount() {
    var _this$props$room4;

    // when we're first rendered (or our sublist is expanded) make sure we are visible if we're active
    if (this.state.selected) {
      this.scrollIntoView();
    }

    _ActiveRoomObserver.default.addListener(this.props.room.roomId, this.onActiveRoomUpdate);

    this.dispatcherRef = _dispatcher.default.register(this.onAction);

    _MessagePreviewStore.MessagePreviewStore.instance.on(_MessagePreviewStore.MessagePreviewStore.getPreviewChangedEventName(this.props.room), this.onRoomPreviewChanged);

    this.notificationState.on(_NotificationState.NOTIFICATION_STATE_UPDATE, this.onNotificationUpdate);
    this.roomProps.on(_GenericEchoChamber.PROPERTY_UPDATED, this.onRoomPropertyUpdate);
    (_this$props$room4 = this.props.room) === null || _this$props$room4 === void 0 ? void 0 : _this$props$room4.on("Room.name", this.onRoomNameUpdate);

    _CommunityPrototypeStore.CommunityPrototypeStore.instance.on(_CommunityPrototypeStore.CommunityPrototypeStore.getUpdateEventName(this.props.room.roomId), this.onCommunityUpdate);
  }

  componentWillUnmount() {
    if (this.props.room) {
      _ActiveRoomObserver.default.removeListener(this.props.room.roomId, this.onActiveRoomUpdate);

      _MessagePreviewStore.MessagePreviewStore.instance.off(_MessagePreviewStore.MessagePreviewStore.getPreviewChangedEventName(this.props.room), this.onRoomPreviewChanged);

      _CommunityPrototypeStore.CommunityPrototypeStore.instance.off(_CommunityPrototypeStore.CommunityPrototypeStore.getUpdateEventName(this.props.room.roomId), this.onCommunityUpdate);

      this.props.room.off("Room.name", this.onRoomNameUpdate);
    }

    _ActiveRoomObserver.default.removeListener(this.props.room.roomId, this.onActiveRoomUpdate);

    _dispatcher.default.unregister(this.dispatcherRef);

    this.notificationState.off(_NotificationState.NOTIFICATION_STATE_UPDATE, this.onNotificationUpdate);
    this.roomProps.off(_GenericEchoChamber.PROPERTY_UPDATED, this.onRoomPropertyUpdate);

    _CommunityPrototypeStore.CommunityPrototypeStore.instance.off(_CommunityPrototypeStore.CommunityPrototypeStore.getUpdateEventName(this.props.room.roomId), this.onCommunityUpdate);
  }

  async generatePreview() {
    if (!this.showMessagePreview) {
      return null;
    }

    const messagePreview = await _MessagePreviewStore.MessagePreviewStore.instance.getPreviewForRoom(this.props.room, this.props.tag);
    this.setState({
      messagePreview
    });
  }

  async saveNotifState(ev, newState) {
    ev.preventDefault();
    ev.stopPropagation();
    if (_MatrixClientPeg.MatrixClientPeg.get().isGuest()) return;
    this.roomProps.notificationVolume = newState;
    const key = ev.key;

    if (key === _Keyboard.Key.ENTER) {
      // Implements https://www.w3.org/TR/wai-aria-practices/#keyboard-interaction-12
      this.setState({
        notificationsMenuPosition: null
      }); // hide the menu
    }
  }

  renderNotificationsMenu(isActive) {
    if (_MatrixClientPeg.MatrixClientPeg.get().isGuest() || this.props.tag === _models.DefaultTagID.Archived || !this.showContextMenu || this.props.isMinimized) {
      // the menu makes no sense in these cases so do not show one
      return null;
    }

    const state = this.roomProps.notificationVolume;
    let contextMenu = null;

    if (this.state.notificationsMenuPosition) {
      contextMenu = /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.default, (0, _extends2.default)({}, contextMenuBelow(this.state.notificationsMenuPosition), {
        onFinished: this.onCloseNotificationsMenu,
        className: "mx_RoomTile_contextMenu",
        compact: true
      }), /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOptionList, {
        first: true
      }, /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuRadio, {
        label: (0, _languageHandler._t)("Use default"),
        active: state === _RoomNotifs.RoomNotifState.AllMessages,
        iconClassName: "mx_RoomTile_iconBell",
        onClick: this.onClickAllNotifs
      }), /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuRadio, {
        label: (0, _languageHandler._t)("All messages"),
        active: state === _RoomNotifs.RoomNotifState.AllMessagesLoud,
        iconClassName: "mx_RoomTile_iconBellDot",
        onClick: this.onClickAlertMe
      }), /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuRadio, {
        label: (0, _languageHandler._t)("Mentions & Keywords"),
        active: state === _RoomNotifs.RoomNotifState.MentionsOnly,
        iconClassName: "mx_RoomTile_iconBellMentions",
        onClick: this.onClickMentions
      }), /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuRadio, {
        label: (0, _languageHandler._t)("None"),
        active: state === _RoomNotifs.RoomNotifState.Mute,
        iconClassName: "mx_RoomTile_iconBellCrossed",
        onClick: this.onClickMute
      })));
    }

    const classes = (0, _classnames.default)("mx_RoomTile_notificationsButton", {
      // Show bell icon for the default case too.
      mx_RoomTile_iconBell: state === _RoomNotifs.RoomNotifState.AllMessages,
      mx_RoomTile_iconBellDot: state === _RoomNotifs.RoomNotifState.AllMessagesLoud,
      mx_RoomTile_iconBellMentions: state === _RoomNotifs.RoomNotifState.MentionsOnly,
      mx_RoomTile_iconBellCrossed: state === _RoomNotifs.RoomNotifState.Mute,
      // Only show the icon by default if the room is overridden to muted.
      // TODO: [FTUE Notifications] Probably need to detect global mute state
      mx_RoomTile_notificationsButton_show: state === _RoomNotifs.RoomNotifState.Mute
    });
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_ContextMenu.ContextMenuTooltipButton, {
      className: classes,
      onClick: this.onNotificationsMenuOpenClick,
      title: (0, _languageHandler._t)("Notification options"),
      isExpanded: !!this.state.notificationsMenuPosition,
      tabIndex: isActive ? 0 : -1
    }), contextMenu);
  }

  renderGeneralMenu() {
    if (!this.showContextMenu) return null; // no menu to show

    let contextMenu = null;

    if (this.state.generalMenuPosition && this.props.tag === _models.DefaultTagID.Archived) {
      contextMenu = /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.default, (0, _extends2.default)({}, contextMenuBelow(this.state.generalMenuPosition), {
        onFinished: this.onCloseGeneralMenu,
        className: "mx_RoomTile_contextMenu",
        compact: true
      }), /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOptionList, {
        red: true
      }, /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
        iconClassName: "mx_RoomTile_iconSignOut",
        label: (0, _languageHandler._t)("Forget Room"),
        onClick: this.onForgetRoomClick
      })));
    } else if (this.state.generalMenuPosition) {
      const roomTags = _RoomListStore.default.instance.getTagsForRoom(this.props.room);

      const isFavorite = roomTags.includes(_models.DefaultTagID.Favourite);
      const favouriteLabel = isFavorite ? (0, _languageHandler._t)("Favourited") : (0, _languageHandler._t)("Favourite");
      const isLowPriority = roomTags.includes(_models.DefaultTagID.LowPriority);
      const lowPriorityLabel = (0, _languageHandler._t)("Low Priority");

      const userId = _MatrixClientPeg.MatrixClientPeg.get().getUserId();

      const canInvite = this.props.room.canInvite(userId);
      contextMenu = /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.default, (0, _extends2.default)({}, contextMenuBelow(this.state.generalMenuPosition), {
        onFinished: this.onCloseGeneralMenu,
        className: "mx_RoomTile_contextMenu",
        compact: true
      }), /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOptionList, null, /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuCheckbox, {
        onClick: e => this.onTagRoom(e, _models.DefaultTagID.Favourite),
        active: isFavorite,
        label: favouriteLabel,
        iconClassName: "mx_RoomTile_iconStar"
      }), /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuCheckbox, {
        onClick: e => this.onTagRoom(e, _models.DefaultTagID.LowPriority),
        active: isLowPriority,
        label: lowPriorityLabel,
        iconClassName: "mx_RoomTile_iconArrowDown"
      }), canInvite ? /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
        onClick: this.onInviteClick,
        label: (0, _languageHandler._t)("Invite People"),
        iconClassName: "mx_RoomTile_iconInvite"
      }) : null, /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
        onClick: this.onCopyRoomClick,
        label: (0, _languageHandler._t)("Copy Room Link"),
        iconClassName: "mx_RoomTile_iconCopyLink"
      }), /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
        onClick: this.onOpenRoomSettings,
        label: (0, _languageHandler._t)("Settings"),
        iconClassName: "mx_RoomTile_iconSettings"
      })), /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOptionList, {
        red: true
      }, /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
        onClick: this.onLeaveRoomClick,
        label: (0, _languageHandler._t)("Leave Room"),
        iconClassName: "mx_RoomTile_iconSignOut"
      })));
    }

    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_ContextMenu.ContextMenuTooltipButton, {
      className: "mx_RoomTile_menuButton",
      onClick: this.onGeneralMenuOpenClick,
      title: (0, _languageHandler._t)("Room options"),
      isExpanded: !!this.state.generalMenuPosition
    }), contextMenu);
  }

  render() {
    const classes = (0, _classnames.default)({
      'mx_RoomTile': true,
      'mx_RoomTile_selected': this.state.selected,
      'mx_RoomTile_hasMenuOpen': !!(this.state.generalMenuPosition || this.state.notificationsMenuPosition),
      'mx_RoomTile_minimized': this.props.isMinimized
    });
    let roomProfile = {
      displayName: null,
      avatarMxc: null
    };

    if (this.props.tag === _models.DefaultTagID.Invite) {
      roomProfile = _CommunityPrototypeStore.CommunityPrototypeStore.instance.getInviteProfile(this.props.room.roomId);
    }

    let name = roomProfile.displayName || this.props.room.name;
    if (typeof name !== 'string') name = '';
    name = name.replace(":", ":\u200b"); // add a zero-width space to allow linewrapping after the colon

    const roomAvatar = /*#__PURE__*/_react.default.createElement(_DecoratedRoomAvatar.default, {
      room: this.props.room,
      avatarSize: 32,
      displayBadge: this.props.isMinimized,
      oobData: {
        avatarUrl: roomProfile.avatarMxc
      }
    });

    let badge;

    if (!this.props.isMinimized && this.notificationState) {
      // aria-hidden because we summarise the unread count/highlight status in a manual aria-label below
      badge = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_RoomTile_badgeContainer",
        "aria-hidden": "true"
      }, /*#__PURE__*/_react.default.createElement(_NotificationBadge.default, {
        notification: this.notificationState,
        forceCount: false,
        roomId: this.props.room.roomId
      }));
    }

    let messagePreview = null;

    if (this.showMessagePreview && this.state.messagePreview) {
      messagePreview = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_RoomTile_messagePreview",
        id: messagePreviewId(this.props.room.roomId),
        title: this.state.messagePreview
      }, this.state.messagePreview);
    }

    const nameClasses = (0, _classnames.default)({
      "mx_RoomTile_name": true,
      "mx_RoomTile_nameWithPreview": !!messagePreview,
      "mx_RoomTile_nameHasUnreadEvents": this.notificationState.isUnread
    });

    let nameContainer = /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_RoomTile_nameContainer"
    }, /*#__PURE__*/_react.default.createElement("div", {
      title: name,
      className: nameClasses,
      tabIndex: -1,
      dir: "auto"
    }, name), messagePreview);

    if (this.props.isMinimized) nameContainer = null;
    let ariaLabel = name; // The following labels are written in such a fashion to increase screen reader efficiency (speed).

    if (this.props.tag === _models.DefaultTagID.Invite) {// append nothing
    } else if (this.notificationState.hasMentions) {
      ariaLabel += " " + (0, _languageHandler._t)("%(count)s unread messages including mentions.", {
        count: this.notificationState.count
      });
    } else if (this.notificationState.hasUnreadCount) {
      ariaLabel += " " + (0, _languageHandler._t)("%(count)s unread messages.", {
        count: this.notificationState.count
      });
    } else if (this.notificationState.isUnread) {
      ariaLabel += " " + (0, _languageHandler._t)("Unread messages.");
    }

    let ariaDescribedBy;

    if (this.showMessagePreview) {
      ariaDescribedBy = messagePreviewId(this.props.room.roomId);
    }

    const props = {};
    let Button = _AccessibleButton.default;

    if (this.props.isMinimized) {
      Button = _AccessibleTooltipButton.default;
      props.title = name; // force the tooltip to hide whilst we are showing the context menu

      props.forceHide = !!this.state.generalMenuPosition;
    }

    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_RovingTabIndex.RovingTabIndexWrapper, {
      inputRef: this.roomTileRef
    }, ({
      onFocus,
      isActive,
      ref
    }) => /*#__PURE__*/_react.default.createElement(Button, (0, _extends2.default)({}, props, {
      onFocus: onFocus,
      tabIndex: isActive ? 0 : -1,
      inputRef: ref,
      className: classes,
      onClick: this.onTileClick,
      onContextMenu: this.onContextMenu,
      role: "treeitem",
      "aria-label": ariaLabel,
      "aria-selected": this.state.selected,
      "aria-describedby": ariaDescribedBy
    }), roomAvatar, nameContainer, badge, this.renderGeneralMenu(), this.renderNotificationsMenu(isActive))));
  }

}) || _class);
exports.default = RoomTile;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,