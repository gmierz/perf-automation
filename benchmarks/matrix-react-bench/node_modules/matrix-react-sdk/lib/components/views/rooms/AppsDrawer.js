"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _reResizable = require("re-resizable");

var _AppTile = _interopRequireDefault(require("../elements/AppTile"));

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var ScalarMessaging = _interopRequireWildcard(require("../../../ScalarMessaging"));

var _WidgetUtils = _interopRequireDefault(require("../../../utils/WidgetUtils"));

var _WidgetEchoStore = _interopRequireDefault(require("../../../stores/WidgetEchoStore"));

var _ResizeHandle = _interopRequireDefault(require("../elements/ResizeHandle"));

var _resizer = _interopRequireDefault(require("../../../resizer/resizer"));

var _percentage = _interopRequireDefault(require("../../../resizer/distributors/percentage"));

var _WidgetLayoutStore = require("../../../stores/widgets/WidgetLayoutStore");

var _numbers = require("../../../utils/numbers");

var _useStateCallback = require("../../../hooks/useStateCallback");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _UIStore = _interopRequireDefault(require("../../../stores/UIStore"));

var _Spinner = _interopRequireDefault(require("../elements/Spinner"));

var _dec, _class, _class2, _temp;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

let AppsDrawer = (_dec = (0, _replaceableComponent.replaceableComponent)("views.rooms.AppsDrawer"), _dec(_class = (_temp = _class2 = class AppsDrawer extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "resizeContainer", void 0);
    (0, _defineProperty2.default)(this, "resizer", void 0);
    (0, _defineProperty2.default)(this, "dispatcherRef", void 0);
    (0, _defineProperty2.default)(this, "onIsResizing", resizing => {
      // This one is the vertical, ie. change height of apps drawer
      this.setState({
        resizingVertical: resizing
      });

      if (!resizing) {
        this.relaxResizer();
      }
    });
    (0, _defineProperty2.default)(this, "collectResizer", ref => {
      if (this.resizeContainer) {
        this.resizer.detach();
      }

      if (ref) {
        this.resizer.container = ref;
        this.resizer.attach();
      }

      this.resizeContainer = ref;
      this.loadResizerPreferences();
    });
    (0, _defineProperty2.default)(this, "getAppsHash", apps => apps.map(app => app.id).join("~"));
    (0, _defineProperty2.default)(this, "relaxResizer", () => {
      const distributors = this.resizer.getDistributors(); // relax all items if they had any overconstrained flexboxes

      distributors.forEach(d => d.start());
      distributors.forEach(d => d.finish());
    });
    (0, _defineProperty2.default)(this, "loadResizerPreferences", () => {
      const distributions = _WidgetLayoutStore.WidgetLayoutStore.instance.getResizerDistributions(this.props.room, _WidgetLayoutStore.Container.Top);

      if (this.state.apps && this.topApps().length - 1 === distributions.length) {
        distributions.forEach((size, i) => {
          const distributor = this.resizer.forHandleAt(i);

          if (distributor) {
            distributor.size = size;
            distributor.finish();
          }
        });
      } else if (this.state.apps) {
        const distributors = this.resizer.getDistributors();
        distributors.forEach(d => d.item.clearSize());
        distributors.forEach(d => d.start());
        distributors.forEach(d => d.finish());
      }
    });
    (0, _defineProperty2.default)(this, "onAction", action => {
      const hideWidgetKey = this.props.room.roomId + '_hide_widget_drawer';

      switch (action.action) {
        case 'appsDrawer':
          // Note: these booleans are awkward because localstorage is fundamentally
          // string-based. We also do exact equality on the strings later on.
          if (action.show) {
            localStorage.setItem(hideWidgetKey, "false");
          } else {
            // Store hidden state of widget
            // Don't show if previously hidden
            localStorage.setItem(hideWidgetKey, "true");
          }

          break;
      }
    });
    (0, _defineProperty2.default)(this, "getApps", () => {
      // @ts-ignore
      const appsDict = {};
      appsDict[_WidgetLayoutStore.Container.Top] = _WidgetLayoutStore.WidgetLayoutStore.instance.getContainerWidgets(this.props.room, _WidgetLayoutStore.Container.Top);
      appsDict[_WidgetLayoutStore.Container.Center] = _WidgetLayoutStore.WidgetLayoutStore.instance.getContainerWidgets(this.props.room, _WidgetLayoutStore.Container.Center);
      return appsDict;
    });
    (0, _defineProperty2.default)(this, "topApps", () => this.state.apps[_WidgetLayoutStore.Container.Top]);
    (0, _defineProperty2.default)(this, "centerApps", () => this.state.apps[_WidgetLayoutStore.Container.Center]);
    (0, _defineProperty2.default)(this, "updateApps", () => {
      this.setState({
        apps: this.getApps()
      });
    });
    this.state = {
      apps: this.getApps(),
      resizingVertical: false,
      resizingHorizontal: false,
      resizing: false
    };
    this.resizer = this.createResizer();
    this.props.resizeNotifier.on("isResizing", this.onIsResizing);
  }

  componentDidMount() {
    ScalarMessaging.startListening();

    _WidgetLayoutStore.WidgetLayoutStore.instance.on(_WidgetLayoutStore.WidgetLayoutStore.emissionForRoom(this.props.room), this.updateApps);

    this.dispatcherRef = _dispatcher.default.register(this.onAction);
  }

  componentWillUnmount() {
    ScalarMessaging.stopListening();

    _WidgetLayoutStore.WidgetLayoutStore.instance.off(_WidgetLayoutStore.WidgetLayoutStore.emissionForRoom(this.props.room), this.updateApps);

    if (this.dispatcherRef) _dispatcher.default.unregister(this.dispatcherRef);

    if (this.resizeContainer) {
      this.resizer.detach();
    }

    this.props.resizeNotifier.off("isResizing", this.onIsResizing);
  }

  createResizer() {
    // This is the horizontal one, changing the distribution of the width between the app tiles
    // (ie. a vertical resize handle because, the handle itself is vertical...)
    const classNames = {
      handle: "mx_ResizeHandle",
      vertical: "mx_ResizeHandle_vertical",
      reverse: "mx_ResizeHandle_reverse"
    };
    const collapseConfig = {
      onResizeStart: () => {
        this.resizeContainer.classList.add("mx_AppsDrawer_resizing");
        this.setState({
          resizingHorizontal: true
        });
      },
      onResizeStop: () => {
        this.resizeContainer.classList.remove("mx_AppsDrawer_resizing");

        _WidgetLayoutStore.WidgetLayoutStore.instance.setResizerDistributions(this.props.room, _WidgetLayoutStore.Container.Top, this.topApps().slice(1).map((_, i) => this.resizer.forHandleAt(i).size));

        this.setState({
          resizingHorizontal: false
        });
      }
    }; // pass a truthy container for now, we won't call attach until we update it

    const resizer = new _resizer.default(null, _percentage.default, collapseConfig);
    resizer.setClassNames(classNames);
    return resizer;
  }

  componentDidUpdate(prevProps, prevState) {
    if (prevProps.userId !== this.props.userId || prevProps.room !== this.props.room) {
      // Room has changed, update apps
      this.updateApps();
    } else if (this.getAppsHash(this.topApps()) !== this.getAppsHash(prevState.apps[_WidgetLayoutStore.Container.Top])) {
      this.loadResizerPreferences();
    }
  }

  isResizing() {
    return this.state.resizingVertical || this.state.resizingHorizontal;
  }

  render() {
    if (!this.props.showApps) return /*#__PURE__*/_react.default.createElement("div", null);
    const widgetIsMaxmised = this.centerApps().length > 0;
    const appsToDisplay = widgetIsMaxmised ? this.centerApps() : this.topApps();
    const apps = appsToDisplay.map((app, index, arr) => {
      return /*#__PURE__*/_react.default.createElement(_AppTile.default, {
        key: app.id,
        app: app,
        fullWidth: arr.length < 2,
        room: this.props.room,
        userId: this.props.userId,
        creatorUserId: app.creatorUserId,
        widgetPageTitle: _WidgetUtils.default.getWidgetDataTitle(app),
        waitForIframeLoad: app.waitForIframeLoad,
        pointerEvents: this.isResizing() ? 'none' : undefined
      });
    });

    if (apps.length === 0) {
      return /*#__PURE__*/_react.default.createElement("div", null);
    }

    let spinner;

    if (apps.length === 0 && _WidgetEchoStore.default.roomHasPendingWidgets(this.props.room.roomId, _WidgetUtils.default.getRoomWidgets(this.props.room))) {
      spinner = /*#__PURE__*/_react.default.createElement(_Spinner.default, null);
    }

    const classes = (0, _classnames.default)({
      mx_AppsDrawer: true,
      mx_AppsDrawer_maximise: widgetIsMaxmised,
      mx_AppsDrawer_fullWidth: apps.length < 2,
      mx_AppsDrawer_resizing: this.state.resizing,
      mx_AppsDrawer_2apps: apps.length === 2,
      mx_AppsDrawer_3apps: apps.length === 3
    });

    const appConatiners = /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_AppsContainer",
      ref: this.collectResizer
    }, apps.map((app, i) => {
      if (i < 1) return app;
      return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, {
        key: app.key
      }, /*#__PURE__*/_react.default.createElement(_ResizeHandle.default, {
        reverse: i > apps.length / 2
      }), app);
    }));

    let drawer;

    if (widgetIsMaxmised) {
      drawer = appConatiners;
    } else {
      drawer = /*#__PURE__*/_react.default.createElement(PersistentVResizer, {
        room: this.props.room,
        minHeight: 100,
        maxHeight: this.props.maxHeight || !widgetIsMaxmised ? this.props.maxHeight - 50 : undefined,
        handleClass: "mx_AppsContainer_resizerHandle",
        handleWrapperClass: "mx_AppsContainer_resizerHandleContainer",
        className: "mx_AppsContainer_resizer",
        resizeNotifier: this.props.resizeNotifier
      }, appConatiners);
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: classes
    }, drawer, spinner);
  }

}, (0, _defineProperty2.default)(_class2, "defaultProps", {
  showApps: true
}), _temp)) || _class);
exports.default = AppsDrawer;

const PersistentVResizer = ({
  room,
  minHeight,
  maxHeight,
  className,
  handleWrapperClass,
  handleClass,
  resizeNotifier,
  children
}) => {
  let defaultHeight = _WidgetLayoutStore.WidgetLayoutStore.instance.getContainerHeight(room, _WidgetLayoutStore.Container.Top); // Arbitrary defaults to avoid NaN problems. 100 px or 3/4 of the visible window.


  if (!minHeight) minHeight = 100;
  if (!maxHeight) maxHeight = _UIStore.default.instance.windowHeight / 4 * 3; // Convert from percentage to height. Note that the default height is 280px.

  if (defaultHeight) {
    defaultHeight = (0, _numbers.clamp)(defaultHeight, 0, 100);
    defaultHeight = (0, _numbers.percentageWithin)(defaultHeight / 100, minHeight, maxHeight);
  } else {
    defaultHeight = 280;
  }

  const [height, setHeight] = (0, _useStateCallback.useStateCallback)(defaultHeight, newHeight => {
    newHeight = (0, _numbers.percentageOf)(newHeight, minHeight, maxHeight) * 100;

    _WidgetLayoutStore.WidgetLayoutStore.instance.setContainerHeight(room, _WidgetLayoutStore.Container.Top, newHeight);
  });
  return /*#__PURE__*/_react.default.createElement(_reResizable.Resizable, {
    size: {
      height: Math.min(height, maxHeight),
      width: undefined
    },
    minHeight: minHeight,
    maxHeight: maxHeight,
    onResizeStart: () => {
      resizeNotifier.startResizing();
    },
    onResize: () => {
      resizeNotifier.notifyTimelineHeightChanged();
    },
    onResizeStop: (e, dir, ref, d) => {
      setHeight(height + d.height);
      resizeNotifier.stopResizing();
    },
    handleWrapperClass: handleWrapperClass,
    handleClasses: {
      bottom: handleClass
    },
    className: className,
    enable: {
      bottom: true
    }
  }, children);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL3Jvb21zL0FwcHNEcmF3ZXIudHN4Il0sIm5hbWVzIjpbIkFwcHNEcmF3ZXIiLCJSZWFjdCIsIkNvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwicHJvcHMiLCJyZXNpemluZyIsInNldFN0YXRlIiwicmVzaXppbmdWZXJ0aWNhbCIsInJlbGF4UmVzaXplciIsInJlZiIsInJlc2l6ZUNvbnRhaW5lciIsInJlc2l6ZXIiLCJkZXRhY2giLCJjb250YWluZXIiLCJhdHRhY2giLCJsb2FkUmVzaXplclByZWZlcmVuY2VzIiwiYXBwcyIsIm1hcCIsImFwcCIsImlkIiwiam9pbiIsImRpc3RyaWJ1dG9ycyIsImdldERpc3RyaWJ1dG9ycyIsImZvckVhY2giLCJkIiwic3RhcnQiLCJmaW5pc2giLCJkaXN0cmlidXRpb25zIiwiV2lkZ2V0TGF5b3V0U3RvcmUiLCJpbnN0YW5jZSIsImdldFJlc2l6ZXJEaXN0cmlidXRpb25zIiwicm9vbSIsIkNvbnRhaW5lciIsIlRvcCIsInN0YXRlIiwidG9wQXBwcyIsImxlbmd0aCIsInNpemUiLCJpIiwiZGlzdHJpYnV0b3IiLCJmb3JIYW5kbGVBdCIsIml0ZW0iLCJjbGVhclNpemUiLCJhY3Rpb24iLCJoaWRlV2lkZ2V0S2V5Iiwicm9vbUlkIiwic2hvdyIsImxvY2FsU3RvcmFnZSIsInNldEl0ZW0iLCJhcHBzRGljdCIsImdldENvbnRhaW5lcldpZGdldHMiLCJDZW50ZXIiLCJnZXRBcHBzIiwicmVzaXppbmdIb3Jpem9udGFsIiwiY3JlYXRlUmVzaXplciIsInJlc2l6ZU5vdGlmaWVyIiwib24iLCJvbklzUmVzaXppbmciLCJjb21wb25lbnREaWRNb3VudCIsIlNjYWxhck1lc3NhZ2luZyIsInN0YXJ0TGlzdGVuaW5nIiwiZW1pc3Npb25Gb3JSb29tIiwidXBkYXRlQXBwcyIsImRpc3BhdGNoZXJSZWYiLCJkaXMiLCJyZWdpc3RlciIsIm9uQWN0aW9uIiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJzdG9wTGlzdGVuaW5nIiwib2ZmIiwidW5yZWdpc3RlciIsImNsYXNzTmFtZXMiLCJoYW5kbGUiLCJ2ZXJ0aWNhbCIsInJldmVyc2UiLCJjb2xsYXBzZUNvbmZpZyIsIm9uUmVzaXplU3RhcnQiLCJjbGFzc0xpc3QiLCJhZGQiLCJvblJlc2l6ZVN0b3AiLCJyZW1vdmUiLCJzZXRSZXNpemVyRGlzdHJpYnV0aW9ucyIsInNsaWNlIiwiXyIsIlJlc2l6ZXIiLCJQZXJjZW50YWdlRGlzdHJpYnV0b3IiLCJzZXRDbGFzc05hbWVzIiwiY29tcG9uZW50RGlkVXBkYXRlIiwicHJldlByb3BzIiwicHJldlN0YXRlIiwidXNlcklkIiwiZ2V0QXBwc0hhc2giLCJpc1Jlc2l6aW5nIiwicmVuZGVyIiwic2hvd0FwcHMiLCJ3aWRnZXRJc01heG1pc2VkIiwiY2VudGVyQXBwcyIsImFwcHNUb0Rpc3BsYXkiLCJpbmRleCIsImFyciIsImNyZWF0b3JVc2VySWQiLCJXaWRnZXRVdGlscyIsImdldFdpZGdldERhdGFUaXRsZSIsIndhaXRGb3JJZnJhbWVMb2FkIiwidW5kZWZpbmVkIiwic3Bpbm5lciIsIldpZGdldEVjaG9TdG9yZSIsInJvb21IYXNQZW5kaW5nV2lkZ2V0cyIsImdldFJvb21XaWRnZXRzIiwiY2xhc3NlcyIsIm14X0FwcHNEcmF3ZXIiLCJteF9BcHBzRHJhd2VyX21heGltaXNlIiwibXhfQXBwc0RyYXdlcl9mdWxsV2lkdGgiLCJteF9BcHBzRHJhd2VyX3Jlc2l6aW5nIiwibXhfQXBwc0RyYXdlcl8yYXBwcyIsIm14X0FwcHNEcmF3ZXJfM2FwcHMiLCJhcHBDb25hdGluZXJzIiwiY29sbGVjdFJlc2l6ZXIiLCJrZXkiLCJkcmF3ZXIiLCJtYXhIZWlnaHQiLCJQZXJzaXN0ZW50VlJlc2l6ZXIiLCJtaW5IZWlnaHQiLCJjbGFzc05hbWUiLCJoYW5kbGVXcmFwcGVyQ2xhc3MiLCJoYW5kbGVDbGFzcyIsImNoaWxkcmVuIiwiZGVmYXVsdEhlaWdodCIsImdldENvbnRhaW5lckhlaWdodCIsIlVJU3RvcmUiLCJ3aW5kb3dIZWlnaHQiLCJoZWlnaHQiLCJzZXRIZWlnaHQiLCJuZXdIZWlnaHQiLCJzZXRDb250YWluZXJIZWlnaHQiLCJNYXRoIiwibWluIiwid2lkdGgiLCJzdGFydFJlc2l6aW5nIiwibm90aWZ5VGltZWxpbmVIZWlnaHRDaGFuZ2VkIiwiZSIsImRpciIsInN0b3BSZXNpemluZyIsImJvdHRvbSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFpQkE7O0FBQ0E7O0FBQ0E7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBSUE7Ozs7Ozs7O0lBbUJxQkEsVSxXQURwQixnREFBcUIsd0JBQXJCLEMsbUNBQUQsTUFDcUJBLFVBRHJCLFNBQ3dDQyxlQUFNQyxTQUQ5QyxDQUN3RTtBQVFwRUMsRUFBQUEsV0FBVyxDQUFDQyxLQUFELEVBQWdCO0FBQ3ZCLFVBQU1BLEtBQU47QUFEdUI7QUFBQTtBQUFBO0FBQUEsd0RBK0JIQyxRQUFELElBQTZCO0FBQ2hEO0FBQ0EsV0FBS0MsUUFBTCxDQUFjO0FBQUVDLFFBQUFBLGdCQUFnQixFQUFFRjtBQUFwQixPQUFkOztBQUNBLFVBQUksQ0FBQ0EsUUFBTCxFQUFlO0FBQ1gsYUFBS0csWUFBTDtBQUNIO0FBQ0osS0FyQzBCO0FBQUEsMERBbUVEQyxHQUFELElBQStCO0FBQ3BELFVBQUksS0FBS0MsZUFBVCxFQUEwQjtBQUN0QixhQUFLQyxPQUFMLENBQWFDLE1BQWI7QUFDSDs7QUFFRCxVQUFJSCxHQUFKLEVBQVM7QUFDTCxhQUFLRSxPQUFMLENBQWFFLFNBQWIsR0FBeUJKLEdBQXpCO0FBQ0EsYUFBS0UsT0FBTCxDQUFhRyxNQUFiO0FBQ0g7O0FBQ0QsV0FBS0osZUFBTCxHQUF1QkQsR0FBdkI7QUFDQSxXQUFLTSxzQkFBTDtBQUNILEtBOUUwQjtBQUFBLHVEQWdGSkMsSUFBRCxJQUEwQkEsSUFBSSxDQUFDQyxHQUFMLENBQVNDLEdBQUcsSUFB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O0FBQVY7QUFqQkwsS0FtQkRqQixRQW5CQyxDQUFQO0FBcUJILENBbEREIiwic291cmNlc0NvbnRlbnQiOlsiLypcbkNvcHlyaWdodCAyMDE3IFZlY3RvciBDcmVhdGlvbnMgTHRkXG5Db3B5cmlnaHQgMjAxOCBOZXcgVmVjdG9yIEx0ZFxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCB7IFJlc2l6YWJsZSB9IGZyb20gXCJyZS1yZXNpemFibGVcIjtcblxuaW1wb3J0IEFwcFRpbGUgZnJvbSAnLi4vZWxlbWVudHMvQXBwVGlsZSc7XG5pbXBvcnQgZGlzIGZyb20gJy4uLy4uLy4uL2Rpc3BhdGNoZXIvZGlzcGF0Y2hlcic7XG5pbXBvcnQgKiBhcyBTY2FsYXJNZXNzYWdpbmcgZnJvbSAnLi4vLi4vLi4vU2NhbGFyTWVzc2FnaW5nJztcbmltcG9ydCBXaWRnZXRVdGlscyBmcm9tICcuLi8uLi8uLi91dGlscy9XaWRnZXRVdGlscyc7XG5pbXBvcnQgV2lkZ2V0RWNob1N0b3JlIGZyb20gXCIuLi8uLi8uLi9zdG9yZXMvV2lkZ2V0RWNob1N0b3JlXCI7XG5pbXBvcnQgUmVzaXplTm90aWZpZXIgZnJvbSBcIi4uLy4uLy4uL3V0aWxzL1Jlc2l6ZU5vdGlmaWVyXCI7XG5pbXBvcnQgUmVzaXplSGFuZGxlIGZyb20gXCIuLi9lbGVtZW50cy9SZXNpemVIYW5kbGVcIjtcbmltcG9ydCBSZXNpemVyIGZyb20gXCIuLi8uLi8uLi9yZXNpemVyL3Jlc2l6ZXJcIjtcbmltcG9ydCBQZXJjZW50YWdlRGlzdHJpYnV0b3IgZnJvbSBcIi4uLy4uLy4uL3Jlc2l6ZXIvZGlzdHJpYnV0b3JzL3BlcmNlbnRhZ2VcIjtcbmltcG9ydCB7IENvbnRhaW5lciwgV2lkZ2V0TGF5b3V0U3RvcmUgfSBmcm9tIFwiLi4vLi4vLi4vc3RvcmVzL3dpZGdldHMvV2lkZ2V0TGF5b3V0U3RvcmVcIjtcbmltcG9ydCB7IGNsYW1wLCBwZXJjZW50YWdlT2YsIHBlcmNlbnRhZ2VXaXRoaW4gfSBmcm9tIFwiLi4vLi4vLi4vdXRpbHMvbnVtYmVyc1wiO1xuaW1wb3J0IHsgdXNlU3RhdGVDYWxsYmFjayB9IGZyb20gXCIuLi8uLi8uLi9ob29rcy91c2VTdGF0ZUNhbGxiYWNrXCI7XG5pbXBvcnQgeyByZXBsYWNlYWJsZUNvbXBvbmVudCB9IGZyb20gXCIuLi8uLi8uLi91dGlscy9yZXBsYWNlYWJsZUNvbXBvbmVudFwiO1xuaW1wb3J0IFVJU3RvcmUgZnJvbSBcIi4uLy4uLy4uL3N0b3Jlcy9VSVN0b3JlXCI7XG5pbXBvcnQgeyBSb29tIH0gZnJvbSBcIm1hdHJpeC1qcy1zZGsvc3JjL21vZGVscy9yb29tXCI7XG5pbXBvcnQgeyBJQXBwIH0gZnJvbSBcIi4uLy4uLy4uL3N0b3Jlcy9XaWRnZXRTdG9yZVwiO1xuaW1wb3J0IHsgQWN0aW9uUGF5bG9hZCB9IGZyb20gXCIuLi8uLi8uLi9kaXNwYXRjaGVyL3BheWxvYWRzXCI7XG5pbXBvcnQgU3Bpbm5lciBmcm9tIFwiLi4vZWxlbWVudHMvU3Bpbm5lclwiO1xuXG5pbnRlcmZhY2UgSVByb3BzIHtcbiAgICB1c2VySWQ6IHN0cmluZztcbiAgICByb29tOiBSb29tO1xuICAgIHJlc2l6ZU5vdGlmaWVyOiBSZXNpemVOb3RpZmllcjtcbiAgICBzaG93QXBwcz86IGJvb2xlYW47IC8vIFNob3VsZCBhcHBzIGJlIHJlbmRlcmVkXG4gICAgbWF4SGVpZ2h0OiBudW1iZXI7XG59XG5cbmludGVyZmFjZSBJU3RhdGUge1xuICAgIC8vIEB0cy1pZ25vcmUgLSBUUyB3YW50cyBhIHN0cmluZyBrZXksIGJ1dCB3ZSBrbm93IGJldHRlclxuICAgIGFwcHM6IHtbaWQ6IENvbnRhaW5lcl06IElBcHBbXX07XG4gICAgcmVzaXppbmdWZXJ0aWNhbDogYm9vbGVhbjsgLy8gdHJ1ZSB3aGVuIGNoYW5naW5nIHRoZSBoZWlnaHQgb2YgdGhlIGFwcHMgZHJhd2VyXG4gICAgcmVzaXppbmdIb3Jpem9udGFsOiBib29sZWFuOyAvLyB0cnVlIHdoZW4gY2hhZ25pbmcgdGhlIGRpc3RyaWJ1dGlvbiBvZiB0aGUgd2lkdGggYmV0d2VlbiB3aWRnZXRzXG4gICAgcmVzaXppbmc6IGJvb2xlYW47XG59XG5cbkByZXBsYWNlYWJsZUNvbXBvbmVudChcInZpZXdzLnJvb21zLkFwcHNEcmF3ZXJcIilcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFwcHNEcmF3ZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8SVByb3BzLCBJU3RhdGU+IHtcbiAgICBwcml2YXRlIHJlc2l6ZUNvbnRhaW5lcjogSFRNTERpdkVsZW1lbnQ7XG4gICAgcHJpdmF0ZSByZXNpemVyOiBSZXNpemVyO1xuICAgIHByaXZhdGUgZGlzcGF0Y2hlclJlZjogc3RyaW5nO1xuICAgIHB1YmxpYyBzdGF0aWMgZGVmYXVsdFByb3BzOiBQYXJ0aWFsPElQcm9wcz4gPSB7XG4gICAgICAgIHNob3dBcHBzOiB0cnVlLFxuICAgIH07XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm9wczogSVByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcblxuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgYXBwczogdGhpcy5nZXRBcHBzKCksXG4gICAgICAgICAgICByZXNpemluZ1ZlcnRpY2FsOiBmYWxzZSxcbiAgICAgICAgICAgIHJlc2l6aW5nSG9yaXpvbnRhbDogZmFsc2UsXG4gICAgICAgICAgICByZXNpemluZzogZmFsc2UsXG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5yZXNpemVyID0gdGhpcy5jcmVhdGVSZXNpemVyKCk7XG5cbiAgICAgICAgdGhpcy5wcm9wcy5yZXNpemVOb3RpZmllci5vbihcImlzUmVzaXppbmdcIiwgdGhpcy5vbklzUmVzaXppbmcpO1xuICAgIH1cblxuICAgIHB1YmxpYyBjb21wb25lbnREaWRNb3VudCgpOiB2b2lkIHtcbiAgICAgICAgU2NhbGFyTWVzc2FnaW5nLnN0YXJ0TGlzdGVuaW5nKCk7XG4gICAgICAgIFdpZGdldExheW91dFN0b3JlLmluc3RhbmNlLm9uKFdpZGdldExheW91dFN0b3JlLmVtaXNzaW9uRm9yUm9vbSh0aGlzLnByb3BzLnJvb20pLCB0aGlzLnVwZGF0ZUFwcHMpO1xuICAgICAgICB0aGlzLmRpc3BhdGNoZXJSZWYgPSBkaXMucmVnaXN0ZXIodGhpcy5vbkFjdGlvbik7XG4gICAgfVxuXG4gICAgcHVibGljIGNvbXBvbmVudFdpbGxVbm1vdW50KCk6IHZvaWQge1xuICAgICAgICBTY2FsYXJNZXNzYWdpbmcuc3RvcExpc3RlbmluZygpO1xuICAgICAgICBXaWRnZXRMYXlvdXRTdG9yZS5pbnN0YW5jZS5vZmYoV2lkZ2V0TGF5b3V0U3RvcmUuZW1pc3Npb25Gb3JSb29tKHRoaXMucHJvcHMucm9vbSksIHRoaXMudXBkYXRlQXBwcyk7XG4gICAgICAgIGlmICh0aGlzLmRpc3BhdGNoZXJSZWYpIGRpcy51bnJlZ2lzdGVyKHRoaXMuZGlzcGF0Y2hlclJlZik7XG4gICAgICAgIGlmICh0aGlzLnJlc2l6ZUNvbnRhaW5lcikge1xuICAgICAgICAgICAgdGhpcy5yZXNpemVyLmRldGFjaCgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucHJvcHMucmVzaXplTm90aWZpZXIub2ZmKFwiaXNSZXNpemluZ1wiLCB0aGlzLm9uSXNSZXNpemluZyk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvbklzUmVzaXppbmcgPSAocmVzaXppbmc6IGJvb2xlYW4pOiB2b2lkID0+IHtcbiAgICAgICAgLy8gVGhpcyBvbmUgaXMgdGhlIHZlcnRpY2FsLCBpZS4gY2hhbmdlIGhlaWdodCBvZiBhcHBzIGRyYXdlclxuICAgICAgICB0aGlzLnNldFN0YXRlKHsgcmVzaXppbmdWZXJ0aWNhbDogcmVzaXppbmcgfSk7XG4gICAgICAgIGlmICghcmVzaXppbmcpIHtcbiAgICAgICAgICAgIHRoaXMucmVsYXhSZXNpemVyKCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcHJpdmF0ZSBjcmVhdGVSZXNpemVyKCk6IFJlc2l6ZXIge1xuICAgICAgICAvLyBUaGlzIGlzIHRoZSBob3Jpem9udGFsIG9uZSwgY2hhbmdpbmcgdGhlIGRpc3RyaWJ1dGlvbiBvZiB0aGUgd2lkdGggYmV0d2VlbiB0aGUgYXBwIHRpbGVzXG4gICAgICAgIC8vIChpZS4gYSB2ZXJ0aWNhbCByZXNpemUgaGFuZGxlIGJlY2F1c2UsIHRoZSBoYW5kbGUgaXRzZWxmIGlzIHZlcnRpY2FsLi4uKVxuICAgICAgICBjb25zdCBjbGFzc05hbWVzID0ge1xuICAgICAgICAgICAgaGFuZGxlOiBcIm14X1Jlc2l6ZUhhbmRsZVwiLFxuICAgICAgICAgICAgdmVydGljYWw6IFwibXhfUmVzaXplSGFuZGxlX3ZlcnRpY2FsXCIsXG4gICAgICAgICAgICByZXZlcnNlOiBcIm14X1Jlc2l6ZUhhbmRsZV9yZXZlcnNlXCIsXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGNvbGxhcHNlQ29uZmlnID0ge1xuICAgICAgICAgICAgb25SZXNpemVTdGFydDogKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMucmVzaXplQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoXCJteF9BcHBzRHJhd2VyX3Jlc2l6aW5nXCIpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyByZXNpemluZ0hvcml6b250YWw6IHRydWUgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb25SZXNpemVTdG9wOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZXNpemVDb250YWluZXIuY2xhc3NMaXN0LnJlbW92ZShcIm14X0FwcHNEcmF3ZXJfcmVzaXppbmdcIik7XG4gICAgICAgICAgICAgICAgV2lkZ2V0TGF5b3V0U3RvcmUuaW5zdGFuY2Uuc2V0UmVzaXplckRpc3RyaWJ1dGlvbnMoXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJvcHMucm9vbSwgQ29udGFpbmVyLlRvcCxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50b3BBcHBzKCkuc2xpY2UoMSkubWFwKChfLCBpKSA9PiB0aGlzLnJlc2l6ZXIuZm9ySGFuZGxlQXQoaSkuc2l6ZSksXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgcmVzaXppbmdIb3Jpem9udGFsOiBmYWxzZSB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgICAgIC8vIHBhc3MgYSB0cnV0aHkgY29udGFpbmVyIGZvciBub3csIHdlIHdvbid0IGNhbGwgYXR0YWNoIHVudGlsIHdlIHVwZGF0ZSBpdFxuICAgICAgICBjb25zdCByZXNpemVyID0gbmV3IFJlc2l6ZXIobnVsbCwgUGVyY2VudGFnZURpc3RyaWJ1dG9yLCBjb2xsYXBzZUNvbmZpZyk7XG4gICAgICAgIHJlc2l6ZXIuc2V0Q2xhc3NOYW1lcyhjbGFzc05hbWVzKTtcbiAgICAgICAgcmV0dXJuIHJlc2l6ZXI7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjb2xsZWN0UmVzaXplciA9IChyZWY6IEhUTUxEaXZFbGVtZW50KTogdm9pZCA9PiB7XG4gICAgICAgIGlmICh0aGlzLnJlc2l6ZUNvbnRhaW5lcikge1xuICAgICAgICAgICAgdGhpcy5yZXNpemVyLmRldGFjaCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJlZikge1xuICAgICAgICAgICAgdGhpcy5yZXNpemVyLmNvbnRhaW5lciA9IHJlZjtcbiAgICAgICAgICAgIHRoaXMucmVzaXplci5hdHRhY2goKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlc2l6ZUNvbnRhaW5lciA9IHJlZjtcbiAgICAgICAgdGhpcy5sb2FkUmVzaXplclByZWZlcmVuY2VzKCk7XG4gICAgfTtcblxuICAgIHByaXZhdGUgZ2V0QXBwc0hhc2ggPSAoYXBwczogSUFwcFtdKTogc3RyaW5nID0+IGFwcHMubWFwKGFwcCA9PiBhcHAuaWQpLmpvaW4oXCJ+XCIpO1xuXG4gICAgcHVibGljIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHM6IElQcm9wcywgcHJldlN0YXRlOiBJU3RhdGUpOiB2b2lkIHtcbiAgICAgICAgaWYgKHByZXZQcm9wcy51c2VySWQgIT09IHRoaXMucHJvcHMudXNlcklkIHx8IHByZXZQcm9wcy5yb29tICE9PSB0aGlzLnByb3BzLnJvb20pIHtcbiAgICAgICAgICAgIC8vIFJvb20gaGFzIGNoYW5nZWQsIHVwZGF0ZSBhcHBzXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUFwcHMoKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmdldEFwcHNIYXNoKHRoaXMudG9wQXBwcygpKSAhPT0gdGhpcy5nZXRBcHBzSGFzaChwcmV2U3RhdGUuYXBwc1tDb250YWluZXIuVG9wXSkpIHtcbiAgICAgICAgICAgIHRoaXMubG9hZFJlc2l6ZXJQcmVmZXJlbmNlcygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZWxheFJlc2l6ZXIgPSAoKTogdm9pZCA9PiB7XG4gICAgICAgIGNvbnN0IGRpc3RyaWJ1dG9ycyA9IHRoaXMucmVzaXplci5nZXREaXN0cmlidXRvcnMoKTtcblxuICAgICAgICAvLyByZWxheCBhbGwgaXRlbXMgaWYgdGhleSBoYWQgYW55IG92ZXJjb25zdHJhaW5lZCBmbGV4Ym94ZXNcbiAgICAgICAgZGlzdHJpYnV0b3JzLmZvckVhY2goZCA9PiBkLnN0YXJ0KCkpO1xuICAgICAgICBkaXN0cmlidXRvcnMuZm9yRWFjaChkID0+IGQuZmluaXNoKCkpO1xuICAgIH07XG5cbiAgICBwcml2YXRlIGxvYWRSZXNpemVyUHJlZmVyZW5jZXMgPSAoKTogdm9pZCA9PiB7XG4gICAgICAgIGNvbnN0IGRpc3RyaWJ1dGlvbnMgPSBXaWRnZXRMYXlvdXRTdG9yZS5pbnN0YW5jZS5nZXRSZXNpemVyRGlzdHJpYnV0aW9ucyh0aGlzLnByb3BzLnJvb20sIENvbnRhaW5lci5Ub3ApO1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS5hcHBzICYmICh0aGlzLnRvcEFwcHMoKS5sZW5ndGggLSAxKSA9PT0gZGlzdHJpYnV0aW9ucy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGRpc3RyaWJ1dGlvbnMuZm9yRWFjaCgoc2l6ZSwgaSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRpc3RyaWJ1dG9yID0gdGhpcy5yZXNpemVyLmZvckhhbmRsZUF0KGkpO1xuICAgICAgICAgICAgICAgIGlmIChkaXN0cmlidXRvcikge1xuICAgICAgICAgICAgICAgICAgICBkaXN0cmlidXRvci5zaXplID0gc2l6ZTtcbiAgICAgICAgICAgICAgICAgICAgZGlzdHJpYnV0b3IuZmluaXNoKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5zdGF0ZS5hcHBzKSB7XG4gICAgICAgICAgICBjb25zdCBkaXN0cmlidXRvcnMgPSB0aGlzLnJlc2l6ZXIuZ2V0RGlzdHJpYnV0b3JzKCk7XG4gICAgICAgICAgICBkaXN0cmlidXRvcnMuZm9yRWFjaChkID0+IGQuaXRlbS5jbGVhclNpemUoKSk7XG4gICAgICAgICAgICBkaXN0cmlidXRvcnMuZm9yRWFjaChkID0+IGQuc3RhcnQoKSk7XG4gICAgICAgICAgICBkaXN0cmlidXRvcnMuZm9yRWFjaChkID0+IGQuZmluaXNoKCkpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHByaXZhdGUgaXNSZXNpemluZygpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGUucmVzaXppbmdWZXJ0aWNhbCB8fCB0aGlzLnN0YXRlLnJlc2l6aW5nSG9yaXpvbnRhbDtcbiAgICB9XG5cbiAgICBwcml2YXRlIG9uQWN0aW9uID0gKGFjdGlvbjogQWN0aW9uUGF5bG9hZCk6IHZvaWQgPT4ge1xuICAgICAgICBjb25zdCBoaWRlV2lkZ2V0S2V5ID0gdGhpcy5wcm9wcy5yb29tLnJvb21JZCArICdfaGlkZV93aWRnZXRfZHJhd2VyJztcbiAgICAgICAgc3dpdGNoIChhY3Rpb24uYWN0aW9uKSB7XG4gICAgICAgICAgICBjYXNlICdhcHBzRHJhd2VyJzpcbiAgICAgICAgICAgICAgICAvLyBOb3RlOiB0aGVzZSBib29sZWFucyBhcmUgYXdrd2FyZCBiZWNhdXNlIGxvY2Fsc3RvcmFnZSBpcyBmdW5kYW1lbnRhbGx5XG4gICAgICAgICAgICAgICAgLy8gc3RyaW5nLWJhc2VkLiBXZSBhbHNvIGRvIGV4YWN0IGVxdWFsaXR5IG9uIHRoZSBzdHJpbmdzIGxhdGVyIG9uLlxuICAgICAgICAgICAgICAgIGlmIChhY3Rpb24uc2hvdykge1xuICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShoaWRlV2lkZ2V0S2V5LCBcImZhbHNlXCIpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFN0b3JlIGhpZGRlbiBzdGF0ZSBvZiB3aWRnZXRcbiAgICAgICAgICAgICAgICAgICAgLy8gRG9uJ3Qgc2hvdyBpZiBwcmV2aW91c2x5IGhpZGRlblxuICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShoaWRlV2lkZ2V0S2V5LCBcInRydWVcIik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8vIEB0cy1pZ25vcmUgLSBUUyB3YW50cyBhIHN0cmluZyBrZXksIGJ1dCB3ZSBrbm93IGJldHRlclxuICAgIHByaXZhdGUgZ2V0QXBwcyA9ICgpOiB7IFtpZDogQ29udGFpbmVyXTogSUFwcFtdIH0gPT4ge1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGNvbnN0IGFwcHNEaWN0OiB7IFtpZDogQ29udGFpbmVyXTogSUFwcFtdIH0gPSB7fTtcbiAgICAgICAgYXBwc0RpY3RbQ29udGFpbmVyLlRvcF0gPSBXaWRnZXRMYXlvdXRTdG9yZS5pbnN0YW5jZS5nZXRDb250YWluZXJXaWRnZXRzKHRoaXMucHJvcHMucm9vbSwgQ29udGFpbmVyLlRvcCk7XG4gICAgICAgIGFwcHNEaWN0W0NvbnRhaW5lci5DZW50ZXJdID0gV2lkZ2V0TGF5b3V0U3RvcmUuaW5zdGFuY2UuZ2V0Q29udGFpbmVyV2lkZ2V0cyh0aGlzLnByb3BzLnJvb20sIENvbnRhaW5lci5DZW50ZXIpO1xuICAgICAgICByZXR1cm4gYXBwc0RpY3Q7XG4gICAgfTtcbiAgICBwcml2YXRlIHRvcEFwcHMgPSAoKTogSUFwcFtdID0+IHRoaXMuc3RhdGUuYXBwc1tDb250YWluZXIuVG9wXTtcbiAgICBwcml2YXRlIGNlbnRlckFwcHMgPSAoKTogSUFwcFtdID0+IHRoaXMuc3RhdGUuYXBwc1tDb250YWluZXIuQ2VudGVyXTtcblxuICAgIHByaXZhdGUgdXBkYXRlQXBwcyA9ICgpOiB2b2lkID0+IHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBhcHBzOiB0aGlzLmdldEFwcHMoKSxcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIHB1YmxpYyByZW5kZXIoKTogSlNYLkVsZW1lbnQge1xuICAgICAgICBpZiAoIXRoaXMucHJvcHMuc2hvd0FwcHMpIHJldHVybiA8ZGl2IC8+O1xuICAgICAgICBjb25zdCB3aWRnZXRJc01heG1pc2VkOiBib29sZWFuID0gdGhpcy5jZW50ZXJBcHBzKCkubGVuZ3RoID4gMDtcbiAgICAgICAgY29uc3QgYXBwc1RvRGlzcGxheSA9IHdpZGdldElzTWF4bWlzZWQgPyB0aGlzLmNlbnRlckFwcHMoKSA6IHRoaXMudG9wQXBwcygpO1xuICAgICAgICBjb25zdCBhcHBzID0gYXBwc1RvRGlzcGxheS5tYXAoKGFwcCwgaW5kZXgsIGFycikgPT4ge1xuICAgICAgICAgICAgcmV0dXJuICg8QXBwVGlsZVxuICAgICAgICAgICAgICAgIGtleT17YXBwLmlkfVxuICAgICAgICAgICAgICAgIGFwcD17YXBwfVxuICAgICAgICAgICAgICAgIGZ1bGxXaWR0aD17YXJyLmxlbmd0aCA8IDJ9XG4gICAgICAgICAgICAgICAgcm9vbT17dGhpcy5wcm9wcy5yb29tfVxuICAgICAgICAgICAgICAgIHVzZXJJZD17dGhpcy5wcm9wcy51c2VySWR9XG4gICAgICAgICAgICAgICAgY3JlYXRvclVzZXJJZD17YXBwLmNyZWF0b3JVc2VySWR9XG4gICAgICAgICAgICAgICAgd2lkZ2V0UGFnZVRpdGxlPXtXaWRnZXRVdGlscy5nZXRXaWRnZXREYXRhVGl0bGUoYXBwKX1cbiAgICAgICAgICAgICAgICB3YWl0Rm9ySWZyYW1lTG9hZD17YXBwLndhaXRGb3JJZnJhbWVMb2FkfVxuICAgICAgICAgICAgICAgIHBvaW50ZXJFdmVudHM9e3RoaXMuaXNSZXNpemluZygpID8gJ25vbmUnIDogdW5kZWZpbmVkfVxuICAgICAgICAgICAgLz4pO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoYXBwcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiA8ZGl2IC8+O1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHNwaW5uZXI7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIGFwcHMubGVuZ3RoID09PSAwICYmIFdpZGdldEVjaG9TdG9yZS5yb29tSGFzUGVuZGluZ1dpZGdldHMoXG4gICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5yb29tLnJvb21JZCxcbiAgICAgICAgICAgICAgICBXaWRnZXRVdGlscy5nZXRSb29tV2lkZ2V0cyh0aGlzLnByb3BzLnJvb20pLFxuICAgICAgICAgICAgKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIHNwaW5uZXIgPSA8U3Bpbm5lciAvPjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGNsYXNzZXMgPSBjbGFzc05hbWVzKHtcbiAgICAgICAgICAgIG14X0FwcHNEcmF3ZXI6IHRydWUsXG4gICAgICAgICAgICBteF9BcHBzRHJhd2VyX21heGltaXNlOiB3aWRnZXRJc01heG1pc2VkLFxuICAgICAgICAgICAgbXhfQXBwc0RyYXdlcl9mdWxsV2lkdGg6IGFwcHMubGVuZ3RoIDwgMixcbiAgICAgICAgICAgIG14X0FwcHNEcmF3ZXJfcmVzaXppbmc6IHRoaXMuc3RhdGUucmVzaXppbmcsXG4gICAgICAgICAgICBteF9BcHBzRHJhd2VyXzJhcHBzOiBhcHBzLmxlbmd0aCA9PT0gMixcbiAgICAgICAgICAgIG14X0FwcHNEcmF3ZXJfM2FwcHM6IGFwcHMubGVuZ3RoID09PSAzLFxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgYXBwQ29uYXRpbmVycyA9XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm14X0FwcHNDb250YWluZXJcIiByZWY9e3RoaXMuY29sbGVjdFJlc2l6ZXJ9PlxuICAgICAgICAgICAgICAgIHsgYXBwcy5tYXAoKGFwcCwgaSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaSA8IDEpIHJldHVybiBhcHA7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiA8UmVhY3QuRnJhZ21lbnQga2V5PXthcHAua2V5fT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxSZXNpemVIYW5kbGUgcmV2ZXJzZT17aSA+IGFwcHMubGVuZ3RoIC8gMn0gLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIHsgYXBwIH1cbiAgICAgICAgICAgICAgICAgICAgPC9SZWFjdC5GcmFnbWVudD47XG4gICAgICAgICAgICAgICAgfSkgfVxuICAgICAgICAgICAgPC9kaXY+O1xuXG4gICAgICAgIGxldCBkcmF3ZXI7XG4gICAgICAgIGlmICh3aWRnZXRJc01heG1pc2VkKSB7XG4gICAgICAgICAgICBkcmF3ZXIgPSBhcHBDb25hdGluZXJzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZHJhd2VyID0gPFBlcnNpc3RlbnRWUmVzaXplclxuICAgICAgICAgICAgICAgIHJvb209e3RoaXMucHJvcHMucm9vbX1cbiAgICAgICAgICAgICAgICBtaW5IZWlnaHQ9ezEwMH1cbiAgICAgICAgICAgICAgICBtYXhIZWlnaHQ9eyh0aGlzLnByb3BzLm1heEhlaWdodCB8fCAhd2lkZ2V0SXNNYXhtaXNlZCkgPyB0aGlzLnByb3BzLm1heEhlaWdodCAtIDUwIDogdW5kZWZpbmVkfVxuICAgICAgICAgICAgICAgIGhhbmRsZUNsYXNzPVwibXhfQXBwc0NvbnRhaW5lcl9yZXNpemVySGFuZGxlXCJcbiAgICAgICAgICAgICAgICBoYW5kbGVXcmFwcGVyQ2xhc3M9XCJteF9BcHBzQ29udGFpbmVyX3Jlc2l6ZXJIYW5kbGVDb250YWluZXJcIlxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cIm14X0FwcHNDb250YWluZXJfcmVzaXplclwiXG4gICAgICAgICAgICAgICAgcmVzaXplTm90aWZpZXI9e3RoaXMucHJvcHMucmVzaXplTm90aWZpZXJ9PlxuICAgICAgICAgICAgICAgIHsgYXBwQ29uYXRpbmVycyB9XG4gICAgICAgICAgICA8L1BlcnNpc3RlbnRWUmVzaXplcj47XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzZXN9PlxuICAgICAgICAgICAgICAgIHsgZHJhd2VyIH1cbiAgICAgICAgICAgICAgICB7IHNwaW5uZXIgfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgfVxufVxuXG5pbnRlcmZhY2UgSVBlcnNpc3RlbnRSZXNpemVyUHJvcHMge1xuICAgIHJvb206IFJvb207XG4gICAgbWluSGVpZ2h0OiBudW1iZXI7XG4gICAgbWF4SGVpZ2h0OiBudW1iZXI7XG4gICAgY2xhc3NOYW1lOiBzdHJpbmc7XG4gICAgaGFuZGxlV3JhcHBlckNsYXNzOiBzdHJpbmc7XG4gICAgaGFuZGxlQ2xhc3M6IHN0cmluZztcbiAgICByZXNpemVOb3RpZmllcjogUmVzaXplTm90aWZpZXI7XG4gICAgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZTtcbn1cblxuY29uc3QgUGVyc2lzdGVudFZSZXNpemVyOiBSZWFjdC5GQzxJUGVyc2lzdGVudFJlc2l6ZXJQcm9wcz4gPSAoe1xuICAgIHJvb20sXG4gICAgbWluSGVpZ2h0LFxuICAgIG1heEhlaWdodCxcbiAgICBjbGFzc05hbWUsXG4gICAgaGFuZGxlV3JhcHBlckNsYXNzLFxuICAgIGhhbmRsZUNsYXNzLFxuICAgIHJlc2l6ZU5vdGlmaWVyLFxuICAgIGNoaWxkcmVuLFxufSkgPT4ge1xuICAgIGxldCBkZWZhdWx0SGVpZ2h0ID0gV2lkZ2V0TGF5b3V0U3RvcmUuaW5zdGFuY2UuZ2V0Q29udGFpbmVySGVpZ2h0KHJvb20sIENvbnRhaW5lci5Ub3ApO1xuXG4gICAgLy8gQXJiaXRyYXJ5IGRlZmF1bHRzIHRvIGF2b2lkIE5hTiBwcm9ibGVtcy4gMTAwIHB4IG9yIDMvNCBvZiB0aGUgdmlzaWJsZSB3aW5kb3cuXG4gICAgaWYgKCFtaW5IZWlnaHQpIG1pbkhlaWdodCA9IDEwMDtcbiAgICBpZiAoIW1heEhlaWdodCkgbWF4SGVpZ2h0ID0gKFVJU3RvcmUuaW5zdGFuY2Uud2luZG93SGVpZ2h0IC8gNCkgKiAzO1xuXG4gICAgLy8gQ29udmVydCBmcm9tIHBlcmNlbnRhZ2UgdG8gaGVpZ2h0LiBOb3RlIHRoYXQgdGhlIGRlZmF1bHQgaGVpZ2h0IGlzIDI4MHB4LlxuICAgIGlmIChkZWZhdWx0SGVpZ2h0KSB7XG4gICAgICAgIGRlZmF1bHRIZWlnaHQgPSBjbGFtcChkZWZhdWx0SGVpZ2h0LCAwLCAxMDApO1xuICAgICAgICBkZWZhdWx0SGVpZ2h0ID0gcGVyY2VudGFnZVdpdGhpbihkZWZhdWx0SGVpZ2h0IC8gMTAwLCBtaW5IZWlnaHQsIG1heEhlaWdodCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZGVmYXVsdEhlaWdodCA9IDI4MDtcbiAgICB9XG5cbiAgICBjb25zdCBbaGVpZ2h0LCBzZXRIZWlnaHRdID0gdXNlU3RhdGVDYWxsYmFjayhkZWZhdWx0SGVpZ2h0LCBuZXdIZWlnaHQgPT4ge1xuICAgICAgICBuZXdIZWlnaHQgPSBwZXJjZW50YWdlT2YobmV3SGVpZ2h0LCBtaW5IZWlnaHQsIG1heEhlaWdodCkgKiAxMDA7XG4gICAgICAgIFdpZGdldExheW91dFN0b3JlLmluc3RhbmNlLnNldENvbnRhaW5lckhlaWdodChyb29tLCBDb250YWluZXIuVG9wLCBuZXdIZWlnaHQpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIDxSZXNpemFibGVcbiAgICAgICAgc2l6ZT17eyBoZWlnaHQ6IE1hdGgubWluKGhlaWdodCwgbWF4SGVpZ2h0KSwgd2lkdGg6IHVuZGVmaW5lZCB9fVxuICAgICAgICBtaW5IZWlnaHQ9e21pbkhlaWdodH1cbiAgICAgICAgbWF4SGVpZ2h0PXttYXhIZWlnaHR9XG4gICAgICAgIG9uUmVzaXplU3RhcnQ9eygpID0+IHtcbiAgICAgICAgICAgIHJlc2l6ZU5vdGlmaWVyLnN0YXJ0UmVzaXppbmcoKTtcbiAgICAgICAgfX1cbiAgICAgICAgb25SZXNpemU9eygpID0+IHtcbiAgICAgICAgICAgIHJlc2l6ZU5vdGlmaWVyLm5vdGlmeVRpbWVsaW5lSGVpZ2h0Q2hhbmdlZCgpO1xuICAgICAgICB9fVxuICAgICAgICBvblJlc2l6ZVN0b3A9eyhlLCBkaXIsIHJlZiwgZCkgPT4ge1xuICAgICAgICAgICAgc2V0SGVpZ2h0KGhlaWdodCArIGQuaGVpZ2h0KTtcbiAgICAgICAgICAgIHJlc2l6ZU5vdGlmaWVyLnN0b3BSZXNpemluZygpO1xuICAgICAgICB9fVxuICAgICAgICBoYW5kbGVXcmFwcGVyQ2xhc3M9e2hhbmRsZVdyYXBwZXJDbGFzc31cbiAgICAgICAgaGFuZGxlQ2xhc3Nlcz17eyBib3R0b206IGhhbmRsZUNsYXNzIH19XG4gICAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lfVxuICAgICAgICBlbmFibGU9e3sgYm90dG9tOiB0cnVlIH19XG4gICAgPlxuICAgICAgICB7IGNoaWxkcmVuIH1cbiAgICA8L1Jlc2l6YWJsZT47XG59O1xuIl19