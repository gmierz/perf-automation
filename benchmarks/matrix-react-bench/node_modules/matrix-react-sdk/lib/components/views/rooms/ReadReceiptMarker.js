"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _languageHandler = require("../../../languageHandler");

var _DateUtils = require("../../../DateUtils");

var _NodeAnimator = _interopRequireDefault(require("../../../NodeAnimator"));

var _units = require("../../../utils/units");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _MemberAvatar = _interopRequireDefault(require("../avatars/MemberAvatar"));

var _logger = require("matrix-js-sdk/src/logger");

var _dec, _class, _class2, _temp;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

let ReadReceiptMarker = (_dec = (0, _replaceableComponent.replaceableComponent)("views.rooms.ReadReceiptMarker"), _dec(_class = (_temp = _class2 = class ReadReceiptMarker extends _react.default.PureComponent {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "avatar", /*#__PURE__*/(0, _react.createRef)());
    this.state = {
      // if we are going to animate the RR, we don't show it on first render,
      // and instead just add a placeholder to the DOM; once we've been
      // mounted, we start an animation which moves the RR from its old
      // position.
      suppressDisplay: !this.props.suppressAnimation
    };
  }

  componentWillUnmount() {
    // before we remove the rr, store its location in the map, so that if
    // it reappears, it can be animated from the right place.
    const rrInfo = this.props.readReceiptInfo;

    if (!rrInfo) {
      return;
    } // checking the DOM properties can force a re-layout, which can be
    // quite expensive; so if the parent messagepanel is being unmounted,
    // then don't bother with this.


    if (this.props.checkUnmounting && this.props.checkUnmounting()) {
      return;
    }

    const avatarNode = this.avatar.current;
    rrInfo.top = avatarNode.offsetTop;
    rrInfo.left = avatarNode.offsetLeft;
    rrInfo.parent = avatarNode.offsetParent;
  }

  componentDidMount() {
    if (!this.state.suppressDisplay) {
      // we've already done our display - nothing more to do.
      return;
    }

    this.animateMarker();
  }

  componentDidUpdate(prevProps) {
    const differentLeftOffset = prevProps.leftOffset !== this.props.leftOffset;
    const visibilityChanged = prevProps.hidden !== this.props.hidden;

    if (differentLeftOffset || visibilityChanged) {
      this.animateMarker();
    }
  }

  animateMarker() {
    // treat new RRs as though they were off the top of the screen
    let oldTop = -15;
    const oldInfo = this.props.readReceiptInfo;

    if (oldInfo && oldInfo.parent) {
      oldTop = oldInfo.top + oldInfo.parent.getBoundingClientRect().top;
    }

    const newElement = this.avatar.current;
    let startTopOffset;

    if (!newElement.offsetParent) {
      // this seems to happen sometimes for reasons I don't understand
      // the docs for `offsetParent` say it may be null if `display` is
      // `none`, but I can't see why that would happen.
      _logger.logger.warn(`ReadReceiptMarker for ${this.props.fallbackUserId} in has no offsetParent`);

      startTopOffset = 0;
    } else {
      startTopOffset = oldTop - newElement.offsetParent.getBoundingClientRect().top;
    }

    const startStyles = [];

    if (oldInfo && oldInfo.left) {
      // start at the old height and in the old h pos
      startStyles.push({
        top: startTopOffset + "px",
        left: (0, _units.toPx)(oldInfo.left)
      });
    }

    startStyles.push({
      top: startTopOffset + 'px',
      left: '0'
    });
    this.setState({
      suppressDisplay: false,
      startStyles: startStyles
    });
  }

  render() {
    if (this.state.suppressDisplay) {
      return /*#__PURE__*/_react.default.createElement("div", {
        ref: this.avatar
      });
    }

    const style = {
      left: (0, _units.toPx)(this.props.leftOffset),
      top: '0px'
    };
    let title;

    if (this.props.timestamp) {
      const dateString = (0, _DateUtils.formatDate)(new Date(this.props.timestamp), this.props.showTwelveHour);

      if (!this.props.member || this.props.fallbackUserId === this.props.member.rawDisplayName) {
        title = (0, _languageHandler._t)("Seen by %(userName)s at %(dateTime)s", {
          userName: this.props.fallbackUserId,
          dateTime: dateString
        });
      } else {
        title = (0, _languageHandler._t)("Seen by %(displayName)s (%(userName)s) at %(dateTime)s", {
          displayName: this.props.member.rawDisplayName,
          userName: this.props.fallbackUserId,
          dateTime: dateString
        });
      }
    }

    return /*#__PURE__*/_react.default.createElement(_NodeAnimator.default, {
      startStyles: this.state.startStyles
    }, /*#__PURE__*/_react.default.createElement(_MemberAvatar.default, {
      member: this.props.member,
      fallbackUserId: this.props.fallbackUserId,
      "aria-hidden": "true",
      "aria-live": "off",
      width: 14,
      height: 14,
      resizeMethod: "crop",
      style: style,
      title: title,
      onClick: this.props.onClick,
      inputRef: this.avatar
    }));
  }

}, (0, _defineProperty2.default)(_class2, "defaultProps", {
  leftOffset: 0
}), _temp)) || _class);
exports.default = ReadReceiptMarker;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,