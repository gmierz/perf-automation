import React, { ClipboardEvent } from 'react';
import { Room } from 'matrix-js-sdk/src/models/room';
import { MatrixEvent } from 'matrix-js-sdk/src/models/event';
import EditorModel from '../../../editor/model';
import DocumentOffset from "../../../editor/offset";
import AutocompleteWrapperModel from "../../../editor/autocomplete";
import DocumentPosition from "../../../editor/position";
export declare const REGEX_EMOTICON: RegExp;
interface IProps {
    model: EditorModel;
    room: Room;
    threadId: string;
    placeholder?: string;
    label?: string;
    initialCaret?: DocumentOffset;
    disabled?: boolean;
    onChange?(): any;
    onPaste?(event: ClipboardEvent<HTMLDivElement>, model: EditorModel): boolean;
}
interface IState {
    showPillAvatar: boolean;
    query?: string;
    showVisualBell?: boolean;
    autoComplete?: AutocompleteWrapperModel;
    completionIndex?: number;
    surroundWith: boolean;
}
export default class BasicMessageEditor extends React.Component<IProps, IState> {
    readonly editorRef: React.RefObject<HTMLDivElement>;
    private autocompleteRef;
    private formatBarRef;
    private modifiedFlag;
    private isIMEComposing;
    private hasTextSelected;
    private _isCaretAtEnd;
    private lastCaret;
    private lastSelection;
    private readonly emoticonSettingHandle;
    private readonly shouldShowPillAvatarSettingHandle;
    private readonly surroundWithHandle;
    private readonly historyManager;
    constructor(props: any);
    componentDidUpdate(prevProps: IProps): void;
    replaceEmoticon(caretPosition: DocumentPosition, regex: RegExp): number;
    private updateEditorState;
    private showPlaceholder;
    private hidePlaceholder;
    private onCompositionStart;
    private onCompositionEnd;
    isComposing(event: React.KeyboardEvent): boolean;
    private onCutCopy;
    private onCopy;
    private onCut;
    private onPaste;
    private onInput;
    private insertText;
    private setLastCaretFromPosition;
    private refreshLastCaretIfNeeded;
    clearUndoHistory(): void;
    getCaret(): DocumentOffset;
    isSelectionCollapsed(): boolean;
    isCaretAtStart(): boolean;
    isCaretAtEnd(): boolean;
    private onBlur;
    private onFocus;
    private onSelectionChange;
    private onKeyDown;
    private tabCompleteName;
    isModified(): boolean;
    private onAutoCompleteConfirm;
    private onAutoCompleteSelectionChange;
    private configureEmoticonAutoReplace;
    private configureShouldShowPillAvatar;
    private surroundWithSettingChanged;
    private transform;
    componentWillUnmount(): void;
    componentDidMount(): void;
    private getInitialCaretPosition;
    private onFormatAction;
    render(): JSX.Element;
    focus(): void;
    insertMention(userId: string): void;
    insertQuotedMessage(event: MatrixEvent): void;
    insertPlaintext(text: string): void;
}
export {};
