"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.SearchScope = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

var _classnames = _interopRequireDefault(require("classnames"));

var _languageHandler = require("../../../languageHandler");

var _Keyboard = require("../../../Keyboard");

var _DesktopBuildsNotice = _interopRequireWildcard(require("../elements/DesktopBuildsNotice"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _dec, _class;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

let SearchScope;
exports.SearchScope = SearchScope;

(function (SearchScope) {
  SearchScope["Room"] = "Room";
  SearchScope["All"] = "All";
})(SearchScope || (exports.SearchScope = SearchScope = {}));

let SearchBar = (_dec = (0, _replaceableComponent.replaceableComponent)("views.rooms.SearchBar"), _dec(_class = class SearchBar extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "searchTerm", /*#__PURE__*/(0, _react.createRef)());
    (0, _defineProperty2.default)(this, "onThisRoomClick", () => {
      this.setState({
        scope: SearchScope.Room
      }, () => this.searchIfQuery());
    });
    (0, _defineProperty2.default)(this, "onAllRoomsClick", () => {
      this.setState({
        scope: SearchScope.All
      }, () => this.searchIfQuery());
    });
    (0, _defineProperty2.default)(this, "onSearchChange", e => {
      switch (e.key) {
        case _Keyboard.Key.ENTER:
          this.onSearch();
          break;

        case _Keyboard.Key.ESCAPE:
          this.props.onCancelClick();
          break;
      }
    });
    (0, _defineProperty2.default)(this, "onSearch", () => {
      this.props.onSearch(this.searchTerm.current.value, this.state.scope);
    });
    this.state = {
      scope: SearchScope.Room
    };
  }

  searchIfQuery() {
    if (this.searchTerm.current.value) {
      this.onSearch();
    }
  }

  render() {
    const searchButtonClasses = (0, _classnames.default)("mx_SearchBar_searchButton", {
      mx_SearchBar_searching: this.props.searchInProgress
    });
    const thisRoomClasses = (0, _classnames.default)("mx_SearchBar_button", {
      mx_SearchBar_unselected: this.state.scope !== SearchScope.Room
    });
    const allRoomsClasses = (0, _classnames.default)("mx_SearchBar_button", {
      mx_SearchBar_unselected: this.state.scope !== SearchScope.All
    });
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SearchBar"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SearchBar_buttons",
      role: "radiogroup"
    }, /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      className: thisRoomClasses,
      onClick: this.onThisRoomClick,
      "aria-checked": this.state.scope === SearchScope.Room,
      role: "radio"
    }, (0, _languageHandler._t)("This Room")), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      className: allRoomsClasses,
      onClick: this.onAllRoomsClick,
      "aria-checked": this.state.scope === SearchScope.All,
      role: "radio"
    }, (0, _languageHandler._t)("All Rooms"))), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SearchBar_input mx_textinput"
    }, /*#__PURE__*/_react.default.createElement("input", {
      ref: this.searchTerm,
      type: "text",
      autoFocus: true,
      placeholder: (0, _languageHandler._t)("Searchâ€¦"),
      onKeyDown: this.onSearchChange
    }), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      className: searchButtonClasses,
      onClick: this.onSearch
    })), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      className: "mx_SearchBar_cancel",
      onClick: this.props.onCancelClick
    })), /*#__PURE__*/_react.default.createElement(_DesktopBuildsNotice.default, {
      isRoomEncrypted: this.props.isRoomEncrypted,
      kind: _DesktopBuildsNotice.WarningKind.Search
    }));
  }

}) || _class);
exports.default = SearchBar;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,