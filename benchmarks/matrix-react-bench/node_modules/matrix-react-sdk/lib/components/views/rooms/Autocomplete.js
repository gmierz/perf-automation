"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generateCompletionDomId = exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _lodash = require("lodash");

var _SettingsStore = _interopRequireDefault(require("../../../settings/SettingsStore"));

var _Autocompleter = _interopRequireDefault(require("../../../autocomplete/Autocompleter"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _RoomContext = _interopRequireDefault(require("../../../contexts/RoomContext"));

var _dec, _class, _class2, _temp;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const MAX_PROVIDER_MATCHES = 20;

const generateCompletionDomId = number => `mx_Autocomplete_Completion_${number}`;

exports.generateCompletionDomId = generateCompletionDomId;
let Autocomplete = (_dec = (0, _replaceableComponent.replaceableComponent)("views.rooms.Autocomplete"), _dec(_class = (_temp = _class2 = class Autocomplete extends _react.default.PureComponent {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "autocompleter", void 0);
    (0, _defineProperty2.default)(this, "queryRequested", void 0);
    (0, _defineProperty2.default)(this, "debounceCompletionsRequest", void 0);
    (0, _defineProperty2.default)(this, "containerRef", /*#__PURE__*/(0, _react.createRef)());
    (0, _defineProperty2.default)(this, "hide", () => {
      this.setState({
        hide: true,
        selectionOffset: 1,
        completions: [],
        completionList: []
      });
    });
    (0, _defineProperty2.default)(this, "onConfirmCompletion", () => {
      this.onCompletionClicked(this.state.selectionOffset);
    });
    (0, _defineProperty2.default)(this, "onCompletionClicked", selectionOffset => {
      const count = this.countCompletions();

      if (count === 0 || selectionOffset < 1 || selectionOffset > count) {
        return false;
      }

      this.props.onConfirm(this.state.completionList[selectionOffset - 1]);
      this.hide();
      return true;
    });
    this.state = {
      // list of completionResults, each containing completions
      completions: [],
      // array of completions, so we can look up current selection by offset quickly
      completionList: [],
      // how far down the completion list we are (THIS IS 1-INDEXED!)
      selectionOffset: 1,
      // whether we should show completions if they're available
      shouldShowCompletions: true,
      hide: false,
      forceComplete: false
    };
  }

  componentDidMount() {
    this.autocompleter = new _Autocompleter.default(this.props.room, this.context.timelineRenderingType);
    this.applyNewProps();
  }

  applyNewProps(oldQuery, oldRoom) {
    if (oldRoom && this.props.room.roomId !== oldRoom.roomId) {
      this.autocompleter.destroy();
      this.autocompleter = new _Autocompleter.default(this.props.room);
    } // Query hasn't changed so don't try to complete it


    if (oldQuery === this.props.query) {
      return;
    }

    this.complete(this.props.query, this.props.selection);
  }

  componentWillUnmount() {
    this.autocompleter.destroy();
  }

  complete(query, selection) {
    this.queryRequested = query;

    if (this.debounceCompletionsRequest) {
      clearTimeout(this.debounceCompletionsRequest);
    }

    if (query === "") {
      this.setState({
        // Clear displayed completions
        completions: [],
        completionList: [],
        // Reset selected completion
        selectionOffset: 1,
        // Hide the autocomplete box
        hide: true
      });
      return Promise.resolve(null);
    }

    let autocompleteDelay = _SettingsStore.default.getValue("autocompleteDelay"); // Don't debounce if we are already showing completions


    if (this.state.completions.length > 0 || this.state.forceComplete) {
      autocompleteDelay = 0;
    }

    return new Promise(resolve => {
      this.debounceCompletionsRequest = setTimeout(() => {
        resolve(this.processQuery(query, selection));
      }, autocompleteDelay);
    });
  }

  processQuery(query, selection) {
    return this.autocompleter.getCompletions(query, selection, this.state.forceComplete, MAX_PROVIDER_MATCHES).then(completions => {
      // Only ever process the completions for the most recent query being processed
      if (query !== this.queryRequested) {
        return;
      }

      this.processCompletions(completions);
    });
  }

  processCompletions(completions) {
    const completionList = (0, _lodash.flatMap)(completions, provider => provider.completions); // Reset selection when completion list becomes empty.

    let selectionOffset = 1;

    if (completionList.length > 0) {
      /* If the currently selected completion is still in the completion list,
       try to find it and jump to it. If not, select composer.
       */
      const currentSelection = this.state.selectionOffset <= 1 ? null : this.state.completionList[this.state.selectionOffset - 1].completion;
      selectionOffset = completionList.findIndex(completion => completion.completion === currentSelection);

      if (selectionOffset === -1) {
        selectionOffset = 1;
      } else {
        selectionOffset++; // selectionOffset is 1-indexed!
      }
    }

    let hide = true; // If `completion.command.command` is truthy, then a provider has matched with the query

    const anyMatches = completions.some(completion => !!completion.command.command);

    if (anyMatches) {
      hide = false;

      if (this.props.onSelectionChange) {
        this.props.onSelectionChange(selectionOffset - 1);
      }
    }

    this.setState({
      completions,
      completionList,
      selectionOffset,
      hide,
      // Force complete is turned off each time since we can't edit the query in that case
      forceComplete: false
    });
  }

  hasSelection() {
    return this.countCompletions() > 0 && this.state.selectionOffset !== 0;
  }

  countCompletions() {
    return this.state.completionList.length;
  } // called from MessageComposerInput


  moveSelection(delta) {
    const completionCount = this.countCompletions();
    if (completionCount === 0) return; // there are no items to move the selection through
    // Note: selectionOffset 0 represents the unsubstituted text, while 1 means first pill selected

    const index = (this.state.selectionOffset + delta + completionCount - 1) % completionCount;
    this.setSelection(1 + index);
  }

  onEscape(e) {
    const completionCount = this.countCompletions();

    if (completionCount === 0) {
      // autocomplete is already empty, so don't preventDefault
      return;
    }

    e.preventDefault(); // selectionOffset = 0, so we don't end up completing when autocomplete is hidden

    this.hide();
  }

  forceComplete() {
    return new Promise(resolve => {
      this.setState({
        forceComplete: true,
        hide: false
      }, () => {
        this.complete(this.props.query, this.props.selection).then(() => {
          resolve(this.countCompletions());
        });
      });
    });
  }

  setSelection(selectionOffset) {
    this.setState({
      selectionOffset,
      hide: false
    });

    if (this.props.onSelectionChange) {
      this.props.onSelectionChange(selectionOffset - 1);
    }
  }

  componentDidUpdate(prevProps) {
    this.applyNewProps(prevProps.query, prevProps.room); // this is the selected completion, so scroll it into view if needed

    const selectedCompletion = this.refs[`completion${this.state.selectionOffset}`];

    if (selectedCompletion) {
      selectedCompletion.scrollIntoView({
        behavior: "auto",
        block: "nearest"
      });
    } else if (this.containerRef.current) {
      this.containerRef.current.scrollTo({
        top: 0
      });
    }
  }

  render() {
    let position = 1;
    const renderedCompletions = this.state.completions.map((completionResult, i) => {
      const completions = completionResult.completions.map((completion, j) => {
        const selected = position === this.state.selectionOffset;
        const className = (0, _classnames.default)('mx_Autocomplete_Completion', {
          selected
        });
        const componentPosition = position;
        position++;

        const onClick = () => {
          this.onCompletionClicked(componentPosition);
        };

        return /*#__PURE__*/_react.default.cloneElement(completion.component, {
          "key": j,
          "ref": `completion${componentPosition}`,
          "id": generateCompletionDomId(componentPosition - 1),
          // 0 index the completion IDs
          className,
          onClick,
          "aria-selected": selected
        });
      });
      return completions.length > 0 ? /*#__PURE__*/_react.default.createElement("div", {
        key: i,
        className: "mx_Autocomplete_ProviderSection",
        role: "presentation"
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_Autocomplete_provider_name"
      }, completionResult.provider.getName()), completionResult.provider.renderCompletions(completions)) : null;
    }).filter(completion => !!completion);
    return !this.state.hide && renderedCompletions.length > 0 ? /*#__PURE__*/_react.default.createElement("div", {
      id: "mx_Autocomplete",
      className: "mx_Autocomplete",
      ref: this.containerRef,
      role: "listbox"
    }, renderedCompletions) : null;
  }

}, (0, _defineProperty2.default)(_class2, "contextType", _RoomContext.default), _temp)) || _class);
exports.default = Autocomplete;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,