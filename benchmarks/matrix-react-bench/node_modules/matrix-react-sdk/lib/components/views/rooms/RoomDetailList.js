"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _actions = require("../../../dispatcher/actions");

var _languageHandler = require("../../../languageHandler");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _RoomDetailRow = _interopRequireDefault(require("./RoomDetailRow"));

var _dec, _class;

let RoomDetailList = (_dec = (0, _replaceableComponent.replaceableComponent)("views.rooms.RoomDetailList"), _dec(_class = class RoomDetailList extends _react.default.Component {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "onDetailsClick", (ev, room) => {
      _dispatcher.default.dispatch({
        action: _actions.Action.ViewRoom,
        room_id: room.roomId,
        room_alias: room.getCanonicalAlias() || (room.getAltAliases() || [])[0]
      });
    });
  }

  getRows() {
    if (!this.props.rooms) return [];
    return this.props.rooms.map((room, index) => {
      return /*#__PURE__*/_react.default.createElement(_RoomDetailRow.default, {
        key: index,
        room: room,
        onClick: this.onDetailsClick
      });
    });
  }

  render() {
    const rows = this.getRows();
    let rooms;

    if (rows.length === 0) {
      rooms = /*#__PURE__*/_react.default.createElement("i", null, (0, _languageHandler._t)('No rooms to show'));
    } else {
      rooms = /*#__PURE__*/_react.default.createElement("table", {
        className: "mx_RoomDirectory_table"
      }, /*#__PURE__*/_react.default.createElement("tbody", null, this.getRows()));
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)("mx_RoomDetailList", this.props.className)
    }, rooms);
  }

}) || _class);
exports.default = RoomDetailList;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL3Jvb21zL1Jvb21EZXRhaWxMaXN0LnRzeCJdLCJuYW1lcyI6WyJSb29tRGV0YWlsTGlzdCIsIlJlYWN0IiwiQ29tcG9uZW50IiwiZXYiLCJyb29tIiwiZGlzIiwiZGlzcGF0Y2giLCJhY3Rpb24iLCJBY3Rpb24iLCJWaWV3Um9vbSIsInJvb21faWQiLCJyb29tSWQiLCJyb29tX2FsaWFzIiwiZ2V0Q2Fub25pY2FsQWxpYXMiLCJnZXRBbHRBbGlhc2VzIiwiZ2V0Um93cyIsInByb3BzIiwicm9vbXMiLCJtYXAiLCJpbmRleCIsIm9uRGV0YWlsc0NsaWNrIiwicmVuZGVyIiwicm93cyIsImxlbmd0aCIsImNsYXNzTmFtZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFnQkE7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRUE7O0FBQ0E7Ozs7SUFRcUJBLGMsV0FEcEIsZ0RBQXFCLDRCQUFyQixDLGdCQUFELE1BQ3FCQSxjQURyQixTQUM0Q0MsZUFBTUMsU0FEbEQsQ0FDb0U7QUFBQTtBQUFBO0FBQUEsMERBUXZDLENBQUNDLEVBQUQsRUFBdUJDLElBQXZCLEtBQTRDO0FBQ2pFQywwQkFBSUMsUUFBSixDQUFhO0FBQ1RDLFFBQUFBLE1BQU0sRUFBRUMsZ0JBQU9DLFFBRE47QUFFVEMsUUFBQUEsT0FBTyxFQUFFTixJQUFJLENBQUNPLE1BRkw7QUFHVEMsUUFBQUEsVUFBVSxFQUFFUixJQUFJLENBQUNTLGlCQUFMLE1BQTRCLENBQUNULElBQUksQ0FBQ1UsYUFBTCxNQUF3QixFQUF6QixFQUE2QixDQUE3QjtBQUgvQixPQUFiO0FBS0gsS0FkK0Q7QUFBQTs7QUFDeERDLEVBQUFBLE9BQU8sR0FBa0I7QUFDN0IsUUFBSSxDQUFDLEtBQUtDLEtBQUwsQ0FBV0MsS0FBaEIsRUFBdUIsT0FBTyxFQUFQO0FBQ3ZCLFdBQU8sS0FBS0QsS0FBTCxDQUFXQyxLQUFYLENBQWlCQyxHQUFqQixDQUFxQixDQUFDZCxJQUFELEVBQU9lLEtBQVAsS0FBaUI7QUFDekMsMEJBQU8sNkJBQUMsc0JBQUQ7QUFBZSxRQUFBLEdBQUcsRUFBRUEsS0FBcEI7QUFBMkIsUUFBQSxJQUFJLEVBQUVmLElBQWpDO0FBQXVDLFFBQUEsT0FBTyxFQUFFLEtBQUtnQjtBQUFyRCxRQUFQO0FBQ0gsS0FGTSxDQUFQO0FBR0g7O0FBVU1DLEVBQUFBLE1BQU0sR0FBZ0I7QUFDekIsVUFBTUMsSUFBSSxHQUFHLEtBQUtQLE9BQUwsRUFBYjtBQUNBLFFBQUlFLEtBQUo7O0FBQ0EsUUFBSUssSUFBSSxDQUFDQyxNQUFMLEtBQWdCLENBQXBCLEVBQXVCO0FBQ25CTixNQUFBQSxLQUFLLGdCQUFHLHdDQUFLLHlCQUFHLGtCQUFILENBQUwsQ0FBUjtBQUNILEtBRkQsTUFFTztBQUNIQSxNQUFBQSxLQUFLLGdCQUFHO0FBQU8sUUFBQSxTQUFTLEVBQUM7QUFBakIsc0JBQ0osNENBQ00sS0FBS0YsT0FBTCxFQUROLENBREksQ0FBUjtBQUtIOztBQUNELHdCQUFPO0FBQUssTUFBQSxTQUFTLEVBQUUseUJBQVcsbUJBQVgsRUFBZ0MsS0FBS0MsS0FBTCxDQUFXUSxTQUEzQztBQUFoQixPQUNEUCxLQURDLENBQVA7QUFHSDs7QUEvQitELEMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuQ29weXJpZ2h0IDIwMTcgTmV3IFZlY3RvciBMdGQuXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFJvb20gfSBmcm9tICdtYXRyaXgtanMtc2RrL3NyYyc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBkaXMgZnJvbSAnLi4vLi4vLi4vZGlzcGF0Y2hlci9kaXNwYXRjaGVyJztcbmltcG9ydCB7IEFjdGlvbiB9IGZyb20gJy4uLy4uLy4uL2Rpc3BhdGNoZXIvYWN0aW9ucyc7XG5pbXBvcnQgeyBfdCB9IGZyb20gJy4uLy4uLy4uL2xhbmd1YWdlSGFuZGxlcic7XG5cbmltcG9ydCB7IHJlcGxhY2VhYmxlQ29tcG9uZW50IH0gZnJvbSBcIi4uLy4uLy4uL3V0aWxzL3JlcGxhY2VhYmxlQ29tcG9uZW50XCI7XG5pbXBvcnQgUm9vbURldGFpbFJvdyBmcm9tIFwiLi9Sb29tRGV0YWlsUm93XCI7XG5cbmludGVyZmFjZSBJUHJvcHMge1xuICAgIHJvb21zPzogUm9vbVtdO1xuICAgIGNsYXNzTmFtZT86IHN0cmluZztcbn1cblxuQHJlcGxhY2VhYmxlQ29tcG9uZW50KFwidmlld3Mucm9vbXMuUm9vbURldGFpbExpc3RcIilcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJvb21EZXRhaWxMaXN0IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PElQcm9wcz4ge1xuICAgIHByaXZhdGUgZ2V0Um93cygpOiBKU1guRWxlbWVudFtdIHtcbiAgICAgICAgaWYgKCF0aGlzLnByb3BzLnJvb21zKSByZXR1cm4gW107XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLnJvb21zLm1hcCgocm9vbSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiA8Um9vbURldGFpbFJvdyBrZXk9e2luZGV4fSByb29tPXtyb29tfSBvbkNsaWNrPXt0aGlzLm9uRGV0YWlsc0NsaWNrfSAvPjtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvbkRldGFpbHNDbGljayA9IChldjogUmVhY3QuTW91c2VFdmVudCwgcm9vbTogUm9vbSk6IHZvaWQgPT4ge1xuICAgICAgICBkaXMuZGlzcGF0Y2goe1xuICAgICAgICAgICAgYWN0aW9uOiBBY3Rpb24uVmlld1Jvb20sXG4gICAgICAgICAgICByb29tX2lkOiByb29tLnJvb21JZCxcbiAgICAgICAgICAgIHJvb21fYWxpYXM6IHJvb20uZ2V0Q2Fub25pY2FsQWxpYXMoKSB8fCAocm9vbS5nZXRBbHRBbGlhc2VzKCkgfHwgW10pWzBdLFxuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgcHVibGljIHJlbmRlcigpOiBKU1guRWxlbWVudCB7XG4gICAgICAgIGNvbnN0IHJvd3MgPSB0aGlzLmdldFJvd3MoKTtcbiAgICAgICAgbGV0IHJvb21zO1xuICAgICAgICBpZiAocm93cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJvb21zID0gPGk+eyBfdCgnTm8gcm9vbXMgdG8gc2hvdycpIH08L2k+O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcm9vbXMgPSA8dGFibGUgY2xhc3NOYW1lPVwibXhfUm9vbURpcmVjdG9yeV90YWJsZVwiPlxuICAgICAgICAgICAgICAgIDx0Ym9keT5cbiAgICAgICAgICAgICAgICAgICAgeyB0aGlzLmdldFJvd3MoKSB9XG4gICAgICAgICAgICAgICAgPC90Ym9keT5cbiAgICAgICAgICAgIDwvdGFibGU+O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT17Y2xhc3NOYW1lcyhcIm14X1Jvb21EZXRhaWxMaXN0XCIsIHRoaXMucHJvcHMuY2xhc3NOYW1lKX0+XG4gICAgICAgICAgICB7IHJvb21zIH1cbiAgICAgICAgPC9kaXY+O1xuICAgIH1cbn1cbiJdfQ==