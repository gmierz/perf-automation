"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _languageHandler = require("../../../languageHandler");

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _actions = require("../../../dispatcher/actions");

var _SenderProfile = _interopRequireDefault(require("../messages/SenderProfile"));

var _MImageReplyBody = _interopRequireDefault(require("../messages/MImageReplyBody"));

var sdk = _interopRequireWildcard(require("../../../index"));

var _event = require("matrix-js-sdk/src/@types/event");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _EventUtils = require("../../../utils/EventUtils");

var _MFileBody = _interopRequireDefault(require("../messages/MFileBody"));

var _MVoiceMessageBody = _interopRequireDefault(require("../messages/MVoiceMessageBody"));

var _logger = require("matrix-js-sdk/src/logger");

var _dec, _class, _class2, _temp;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

let ReplyTile = (_dec = (0, _replaceableComponent.replaceableComponent)("views.rooms.ReplyTile"), _dec(_class = (_temp = _class2 = class ReplyTile extends _react.default.PureComponent {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "anchorElement", /*#__PURE__*/(0, _react.createRef)());
    (0, _defineProperty2.default)(this, "onDecrypted", () => {
      this.forceUpdate();

      if (this.props.onHeightChanged) {
        this.props.onHeightChanged();
      }
    });
    (0, _defineProperty2.default)(this, "onEventRequiresUpdate", () => {
      // Force update when necessary - redactions and edits
      this.forceUpdate();
    });
    (0, _defineProperty2.default)(this, "onClick", e => {
      const clickTarget = e.target; // Following a link within a reply should not dispatch the `view_room` action
      // so that the browser can direct the user to the correct location
      // The exception being the link wrapping the reply

      if (clickTarget.tagName.toLowerCase() !== "a" || clickTarget.closest("a") === null || clickTarget === this.anchorElement.current) {
        // This allows the permalink to be opened in a new tab/window or copied as
        // matrix.to, but also for it to enable routing within Riot when clicked.
        e.preventDefault(); // Expand thread on shift key

        if (this.props.toggleExpandedQuote && e.shiftKey) {
          this.props.toggleExpandedQuote();
        } else {
          _dispatcher.default.dispatch({
            action: _actions.Action.ViewRoom,
            event_id: this.props.mxEvent.getId(),
            highlighted: true,
            room_id: this.props.mxEvent.getRoomId()
          });
        }
      }
    });
  }

  componentDidMount() {
    this.props.mxEvent.on("Event.decrypted", this.onDecrypted);
    this.props.mxEvent.on("Event.beforeRedaction", this.onEventRequiresUpdate);
    this.props.mxEvent.on("Event.replaced", this.onEventRequiresUpdate);
  }

  componentWillUnmount() {
    this.props.mxEvent.removeListener("Event.decrypted", this.onDecrypted);
    this.props.mxEvent.removeListener("Event.beforeRedaction", this.onEventRequiresUpdate);
    this.props.mxEvent.removeListener("Event.replaced", this.onEventRequiresUpdate);
  }

  render() {
    const mxEvent = this.props.mxEvent;
    const msgType = mxEvent.getContent().msgtype;
    const evType = mxEvent.getType();
    const {
      tileHandler,
      isInfoMessage
    } = (0, _EventUtils.getEventDisplayInfo)(mxEvent); // This shouldn't happen: the caller should check we support this type
    // before trying to instantiate us

    if (!tileHandler) {
      const {
        mxEvent
      } = this.props;

      _logger.logger.warn(`Event type not supported: type:${mxEvent.getType()} isState:${mxEvent.isState()}`);

      return /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_ReplyTile mx_ReplyTile_info mx_MNoticeBody"
      }, (0, _languageHandler._t)('This event could not be displayed'));
    }

    const EventTileType = sdk.getComponent(tileHandler);
    const classes = (0, _classnames.default)("mx_ReplyTile", {
      mx_ReplyTile_info: isInfoMessage && !mxEvent.isRedacted(),
      mx_ReplyTile_audio: msgType === _event.MsgType.Audio,
      mx_ReplyTile_video: msgType === _event.MsgType.Video
    });
    let permalink = "#";

    if (this.props.permalinkCreator) {
      permalink = this.props.permalinkCreator.forEvent(mxEvent.getId());
    }

    let sender;
    const needsSenderProfile = !isInfoMessage && msgType !== _event.MsgType.Image && tileHandler !== _event.EventType.RoomCreate && evType !== _event.EventType.Sticker;

    if (needsSenderProfile) {
      sender = /*#__PURE__*/_react.default.createElement(_SenderProfile.default, {
        mxEvent: mxEvent,
        enableFlair: false
      });
    }

    const msgtypeOverrides = {
      [_event.MsgType.Image]: _MImageReplyBody.default,
      // Override audio and video body with file body. We also hide the download/decrypt button using CSS
      [_event.MsgType.Audio]: (0, _EventUtils.isVoiceMessage)(mxEvent) ? _MVoiceMessageBody.default : _MFileBody.default,
      [_event.MsgType.Video]: _MFileBody.default
    };
    const evOverrides = {
      // Use MImageReplyBody so that the sticker isn't taking up a lot of space
      [_event.EventType.Sticker]: _MImageReplyBody.default
    };
    return /*#__PURE__*/_react.default.createElement("div", {
      className: classes
    }, /*#__PURE__*/_react.default.createElement("a", {
      href: permalink,
      onClick: this.onClick,
      ref: this.anchorElement
    }, sender, /*#__PURE__*/_react.default.createElement(EventTileType, {
      ref: "tile",
      mxEvent: mxEvent,
      highlights: this.props.highlights,
      highlightLink: this.props.highlightLink,
      onHeightChanged: this.props.onHeightChanged,
      showUrlPreview: false,
      overrideBodyTypes: msgtypeOverrides,
      overrideEventTypes: evOverrides,
      replacingEventId: mxEvent.replacingEventId(),
      maxImageHeight: 96
    })));
  }

}, (0, _defineProperty2.default)(_class2, "defaultProps", {
  onHeightChanged: () => {}
}), _temp)) || _class);
exports.default = ReplyTile;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,