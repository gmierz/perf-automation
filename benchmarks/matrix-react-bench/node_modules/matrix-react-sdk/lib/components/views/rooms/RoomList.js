"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.TAG_ORDER = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _event = require("matrix-js-sdk/src/@types/event");

var _languageHandler = require("../../../languageHandler");

var _RovingTabIndex = require("../../../accessibility/RovingTabIndex");

var _RoomListStore = _interopRequireWildcard(require("../../../stores/room-list/RoomListStore"));

var _RoomViewStore = _interopRequireDefault(require("../../../stores/RoomViewStore"));

var _models = require("../../../stores/room-list/models");

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _RoomSublist = _interopRequireDefault(require("./RoomSublist"));

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _GroupAvatar = _interopRequireDefault(require("../avatars/GroupAvatar"));

var _ExtraTile = _interopRequireDefault(require("./ExtraTile"));

var _StaticNotificationState = require("../../../stores/notifications/StaticNotificationState");

var _actions = require("../../../dispatcher/actions");

var _RoomNotificationStateStore = require("../../../stores/notifications/RoomNotificationStateStore");

var _CustomRoomTagStore = _interopRequireDefault(require("../../../stores/CustomRoomTagStore"));

var _arrays = require("../../../utils/arrays");

var _objects = require("../../../utils/objects");

var _IconizedContextMenu = require("../context_menus/IconizedContextMenu");

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

var _CommunityPrototypeStore = require("../../../stores/CommunityPrototypeStore");

var _SpaceStore = _interopRequireDefault(require("../../../stores/spaces/SpaceStore"));

var _spaces = require("../../../stores/spaces");

var _space = require("../../../utils/space");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _RoomAvatar = _interopRequireDefault(require("../avatars/RoomAvatar"));

var _AccessibleTooltipButton = _interopRequireDefault(require("../elements/AccessibleTooltipButton"));

var _UIComponents = require("../../../customisations/helpers/UIComponents");

var _UIFeature = require("../../../settings/UIFeature");

var _partials = require("matrix-js-sdk/src/@types/partials");

var _MatrixClientContext = _interopRequireDefault(require("../../../contexts/MatrixClientContext"));

var _dec, _class, _class2, _temp;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const TAG_ORDER = [_models.DefaultTagID.Invite, _models.DefaultTagID.Favourite, _models.DefaultTagID.DM, _models.DefaultTagID.Untagged, // -- Custom Tags Placeholder --
_models.DefaultTagID.LowPriority, _models.DefaultTagID.ServerNotice, _models.DefaultTagID.Suggested, _models.DefaultTagID.Archived];
exports.TAG_ORDER = TAG_ORDER;
const CUSTOM_TAGS_BEFORE_TAG = _models.DefaultTagID.LowPriority;
const ALWAYS_VISIBLE_TAGS = [_models.DefaultTagID.DM, _models.DefaultTagID.Untagged];
const TAG_AESTHETICS = {
  [_models.DefaultTagID.Invite]: {
    sectionLabel: (0, _languageHandler._td)("Invites"),
    isInvite: true,
    defaultHidden: false
  },
  [_models.DefaultTagID.Favourite]: {
    sectionLabel: (0, _languageHandler._td)("Favourites"),
    isInvite: false,
    defaultHidden: false
  },
  [_models.DefaultTagID.DM]: {
    sectionLabel: (0, _languageHandler._td)("People"),
    isInvite: false,
    defaultHidden: false,
    addRoomLabel: (0, _languageHandler._td)("Start chat"),
    onAddRoom: dispatcher => {
      (dispatcher || _dispatcher.default).dispatch({
        action: 'view_create_chat'
      });
    }
  },
  [_models.DefaultTagID.Untagged]: {
    sectionLabel: (0, _languageHandler._td)("Rooms"),
    isInvite: false,
    defaultHidden: false,
    addRoomLabel: (0, _languageHandler._td)("Add room"),
    addRoomContextMenu: onFinished => {
      if (_SpaceStore.default.instance.activeSpaceRoom) {
        const userId = _MatrixClientPeg.MatrixClientPeg.get().getUserId();

        const space = _SpaceStore.default.instance.activeSpaceRoom;
        const canAddRooms = space.currentState.maySendStateEvent(_event.EventType.SpaceChild, userId);
        return /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOptionList, {
          first: true
        }, (0, _UIComponents.shouldShowComponent)(_UIFeature.UIComponent.CreateRooms) ? /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
          label: (0, _languageHandler._t)("Create new room"),
          iconClassName: "mx_RoomList_iconPlus",
          onClick: e => {
            e.preventDefault();
            e.stopPropagation();
            onFinished();
            (0, _space.showCreateNewRoom)(space);
          },
          disabled: !canAddRooms,
          tooltip: canAddRooms ? undefined : (0, _languageHandler._t)("You do not have permissions to create new rooms in this space")
        }), /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
          label: (0, _languageHandler._t)("Add existing room"),
          iconClassName: "mx_RoomList_iconHash",
          onClick: e => {
            e.preventDefault();
            e.stopPropagation();
            onFinished();
            (0, _space.showAddExistingRooms)(space);
          },
          disabled: !canAddRooms,
          tooltip: canAddRooms ? undefined : (0, _languageHandler._t)("You do not have permissions to add rooms to this space")
        })) : null, /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
          label: (0, _languageHandler._t)("Explore rooms"),
          iconClassName: "mx_RoomList_iconBrowse",
          onClick: e => {
            e.preventDefault();
            e.stopPropagation();
            onFinished();

            _dispatcher.default.fire(_actions.Action.ViewRoomDirectory);
          }
        }));
      }

      return /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOptionList, {
        first: true
      }, /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
        label: (0, _languageHandler._t)("Create new room"),
        iconClassName: "mx_RoomList_iconPlus",
        onClick: e => {
          e.preventDefault();
          e.stopPropagation();
          onFinished();

          _dispatcher.default.dispatch({
            action: "view_create_room"
          });
        }
      }), /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
        label: _CommunityPrototypeStore.CommunityPrototypeStore.instance.getSelectedCommunityId() ? (0, _languageHandler._t)("Explore community rooms") : (0, _languageHandler._t)("Explore public rooms"),
        iconClassName: "mx_RoomList_iconExplore",
        onClick: e => {
          e.preventDefault();
          e.stopPropagation();
          onFinished();

          _dispatcher.default.fire(_actions.Action.ViewRoomDirectory);
        }
      }));
    }
  },
  [_models.DefaultTagID.LowPriority]: {
    sectionLabel: (0, _languageHandler._td)("Low priority"),
    isInvite: false,
    defaultHidden: false
  },
  [_models.DefaultTagID.ServerNotice]: {
    sectionLabel: (0, _languageHandler._td)("System Alerts"),
    isInvite: false,
    defaultHidden: false
  },
  // TODO: Replace with archived view: https://github.com/vector-im/element-web/issues/14038
  [_models.DefaultTagID.Archived]: {
    sectionLabel: (0, _languageHandler._td)("Historical"),
    isInvite: false,
    defaultHidden: true
  },
  [_models.DefaultTagID.Suggested]: {
    sectionLabel: (0, _languageHandler._td)("Suggested Rooms"),
    isInvite: false,
    defaultHidden: false
  }
};

function customTagAesthetics(tagId) {
  if (tagId.startsWith("u.")) {
    tagId = tagId.substring(2);
  }

  return {
    sectionLabel: (0, _languageHandler._td)("Custom Tag"),
    sectionLabelRaw: tagId,
    isInvite: false,
    defaultHidden: false
  };
}

let RoomList = (_dec = (0, _replaceableComponent.replaceableComponent)("views.rooms.RoomList"), _dec(_class = (_temp = _class2 = class RoomList extends _react.default.PureComponent {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "dispatcherRef", void 0);
    (0, _defineProperty2.default)(this, "customTagStoreRef", void 0);
    (0, _defineProperty2.default)(this, "roomStoreToken", void 0);
    (0, _defineProperty2.default)(this, "treeRef", /*#__PURE__*/(0, _react.createRef)());
    (0, _defineProperty2.default)(this, "context", void 0);
    (0, _defineProperty2.default)(this, "onRoomViewStoreUpdate", () => {
      this.setState({
        currentRoomId: _RoomViewStore.default.getRoomId()
      });
    });
    (0, _defineProperty2.default)(this, "onAction", payload => {
      if (payload.action === _actions.Action.ViewRoomDelta) {
        const viewRoomDeltaPayload = payload;

        const currentRoomId = _RoomViewStore.default.getRoomId();

        const room = this.getRoomDelta(currentRoomId, viewRoomDeltaPayload.delta, viewRoomDeltaPayload.unread);

        if (room) {
          _dispatcher.default.dispatch({
            action: _actions.Action.ViewRoom,
            room_id: room.roomId,
            show_room_tile: true // to make sure the room gets scrolled into view

          });
        }
      } else if (payload.action === _actions.Action.PstnSupportUpdated) {
        this.updateLists();
      }
    });
    (0, _defineProperty2.default)(this, "getRoomDelta", (roomId, delta, unread = false) => {
      const lists = _RoomListStore.default.instance.orderedLists;
      const rooms = [];
      TAG_ORDER.forEach(t => {
        let listRooms = lists[t];

        if (unread) {
          // filter to only notification rooms (and our current active room so we can index properly)
          listRooms = listRooms.filter(r => {
            const state = _RoomNotificationStateStore.RoomNotificationStateStore.instance.getRoomState(r);

            return state.room.roomId === roomId || state.isUnread;
          });
        }

        rooms.push(...listRooms);
      });
      const currentIndex = rooms.findIndex(r => r.roomId === roomId); // use slice to account for looping around the start

      const [room] = rooms.slice((currentIndex + delta) % rooms.length);
      return room;
    });
    (0, _defineProperty2.default)(this, "updateSuggestedRooms", suggestedRooms => {
      this.setState({
        suggestedRooms
      });
    });
    (0, _defineProperty2.default)(this, "updateLists", () => {
      const newLists = _RoomListStore.default.instance.orderedLists;
      const previousListIds = Object.keys(this.state.sublists);
      const newListIds = Object.keys(newLists).filter(t => {
        if (!(0, _models.isCustomTag)(t)) return true; // always include non-custom tags
        // if the tag is custom though, only include it if it is enabled

        return _CustomRoomTagStore.default.getTags()[t];
      });
      const isNameFiltering = !!_RoomListStore.default.instance.getFirstNameFilterCondition();
      let doUpdate = this.state.isNameFiltering !== isNameFiltering || (0, _arrays.arrayHasDiff)(previousListIds, newListIds);

      if (!doUpdate) {
        // so we didn't have the visible sublists change, but did the contents of those
        // sublists change significantly enough to break the sticky headers? Probably, so
        // let's check the length of each.
        for (const tagId of newListIds) {
          const oldRooms = this.state.sublists[tagId];
          const newRooms = newLists[tagId];

          if (oldRooms.length !== newRooms.length) {
            doUpdate = true;
            break;
          }
        }
      }

      if (doUpdate) {
        // We have to break our reference to the room list store if we want to be able to
        // diff the object for changes, so do that.
        // @ts-ignore - ITagMap is ts-ignored so this will have to be too
        const newSublists = (0, _objects.objectWithOnly)(newLists, newListIds);
        const sublists = (0, _objects.objectShallowClone)(newSublists, (k, v) => (0, _arrays.arrayFastClone)(v));
        this.setState({
          sublists,
          isNameFiltering
        }, () => {
          this.props.onResize();
        });
      }
    });
    (0, _defineProperty2.default)(this, "onStartChat", () => {
      var _RoomListStore$instan;

      const initialText = (_RoomListStore$instan = _RoomListStore.default.instance.getFirstNameFilterCondition()) === null || _RoomListStore$instan === void 0 ? void 0 : _RoomListStore$instan.search;

      _dispatcher.default.dispatch({
        action: "view_create_chat",
        initialText
      });
    });
    (0, _defineProperty2.default)(this, "onExplore", () => {
      var _RoomListStore$instan2;

      const initialText = (_RoomListStore$instan2 = _RoomListStore.default.instance.getFirstNameFilterCondition()) === null || _RoomListStore$instan2 === void 0 ? void 0 : _RoomListStore$instan2.search;

      _dispatcher.default.dispatch({
        action: _actions.Action.ViewRoomDirectory,
        initialText
      });
    });
    (0, _defineProperty2.default)(this, "onSpaceInviteClick", () => {
      var _RoomListStore$instan3;

      const initialText = (_RoomListStore$instan3 = _RoomListStore.default.instance.getFirstNameFilterCondition()) === null || _RoomListStore$instan3 === void 0 ? void 0 : _RoomListStore$instan3.search;
      (0, _space.showSpaceInvite)(this.context.getRoom(this.props.activeSpace), initialText);
    });
    this.state = {
      sublists: {},
      isNameFiltering: !!_RoomListStore.default.instance.getFirstNameFilterCondition(),
      suggestedRooms: _SpaceStore.default.instance.suggestedRooms
    };
  }

  componentDidMount() {
    this.dispatcherRef = _dispatcher.default.register(this.onAction);
    this.roomStoreToken = _RoomViewStore.default.addListener(this.onRoomViewStoreUpdate);

    _SpaceStore.default.instance.on(_spaces.UPDATE_SUGGESTED_ROOMS, this.updateSuggestedRooms);

    _RoomListStore.default.instance.on(_RoomListStore.LISTS_UPDATE_EVENT, this.updateLists);

    this.customTagStoreRef = _CustomRoomTagStore.default.addListener(this.updateLists);
    this.updateLists(); // trigger the first update
  }

  componentWillUnmount() {
    _SpaceStore.default.instance.off(_spaces.UPDATE_SUGGESTED_ROOMS, this.updateSuggestedRooms);

    _RoomListStore.default.instance.off(_RoomListStore.LISTS_UPDATE_EVENT, this.updateLists);

    _dispatcher.default.unregister(this.dispatcherRef);

    if (this.customTagStoreRef) this.customTagStoreRef.remove();
    if (this.roomStoreToken) this.roomStoreToken.remove();
  }

  renderSuggestedRooms() {
    return this.state.suggestedRooms.map(room => {
      var _room$aliases;

      const name = room.name || room.canonical_alias || ((_room$aliases = room.aliases) === null || _room$aliases === void 0 ? void 0 : _room$aliases[0]) || (0, _languageHandler._t)("Empty room");

      const avatar = /*#__PURE__*/_react.default.createElement(_RoomAvatar.default, {
        oobData: {
          name,
          avatarUrl: room.avatar_url
        },
        width: 32,
        height: 32,
        resizeMethod: "crop"
      });

      const viewRoom = () => {
        var _room$aliases2;

        _dispatcher.default.dispatch({
          action: "view_room",
          room_alias: room.canonical_alias || ((_room$aliases2 = room.aliases) === null || _room$aliases2 === void 0 ? void 0 : _room$aliases2[0]),
          room_id: room.room_id,
          via_servers: room.viaServers,
          oobData: {
            avatarUrl: room.avatar_url,
            name
          }
        });
      };

      return /*#__PURE__*/_react.default.createElement(_ExtraTile.default, {
        isMinimized: this.props.isMinimized,
        isSelected: this.state.currentRoomId === room.room_id,
        displayName: name,
        avatar: avatar,
        onClick: viewRoom,
        key: `suggestedRoomTile_${room.room_id}`
      });
    });
  }

  renderCommunityInvites() {
    if (_SpaceStore.default.spacesEnabled) return []; // TODO: Put community invites in a more sensible place (not in the room list)
    // See https://github.com/vector-im/element-web/issues/14456

    return _MatrixClientPeg.MatrixClientPeg.get().getGroups().filter(g => {
      return g.myMembership === 'invite';
    }).map(g => {
      const avatar = /*#__PURE__*/_react.default.createElement(_GroupAvatar.default, {
        groupId: g.groupId,
        groupName: g.name,
        groupAvatarUrl: g.avatarUrl,
        width: 32,
        height: 32,
        resizeMethod: "crop"
      });

      const openGroup = () => {
        _dispatcher.default.dispatch({
          action: 'view_group',
          group_id: g.groupId
        });
      };

      return /*#__PURE__*/_react.default.createElement(_ExtraTile.default, {
        isMinimized: this.props.isMinimized,
        isSelected: false,
        displayName: g.name,
        avatar: avatar,
        notificationState: _StaticNotificationState.StaticNotificationState.RED_EXCLAMATION,
        onClick: openGroup,
        key: `temporaryGroupTile_${g.groupId}`
      });
    });
  }

  renderSublists() {
    var _this$state$suggested;

    // show a skeleton UI if the user is in no rooms and they are not filtering and have no suggested rooms
    const showSkeleton = !this.state.isNameFiltering && !((_this$state$suggested = this.state.suggestedRooms) !== null && _this$state$suggested !== void 0 && _this$state$suggested.length) && Object.values(_RoomListStore.default.instance.unfilteredLists).every(list => !(list !== null && list !== void 0 && list.length));
    return TAG_ORDER.reduce((tags, tagId) => {
      if (tagId === CUSTOM_TAGS_BEFORE_TAG) {
        const customTags = Object.keys(this.state.sublists).filter(tagId => (0, _models.isCustomTag)(tagId));
        tags.push(...customTags);
      }

      tags.push(tagId);
      return tags;
    }, []).map(orderedTagId => {
      let extraTiles = null;

      if (orderedTagId === _models.DefaultTagID.Invite) {
        extraTiles = this.renderCommunityInvites();
      } else if (orderedTagId === _models.DefaultTagID.Suggested) {
        extraTiles = this.renderSuggestedRooms();
      }

      const aesthetics = (0, _models.isCustomTag)(orderedTagId) ? customTagAesthetics(orderedTagId) : TAG_AESTHETICS[orderedTagId];
      if (!aesthetics) throw new Error(`Tag ${orderedTagId} does not have aesthetics`);
      let alwaysVisible = ALWAYS_VISIBLE_TAGS.includes(orderedTagId);

      if (this.props.activeSpace === _spaces.MetaSpace.Favourites && orderedTagId !== _models.DefaultTagID.Favourite || this.props.activeSpace === _spaces.MetaSpace.People && orderedTagId !== _models.DefaultTagID.DM || this.props.activeSpace === _spaces.MetaSpace.Orphans && orderedTagId === _models.DefaultTagID.DM) {
        alwaysVisible = false;
      } // The cost of mounting/unmounting this component offsets the cost
      // of keeping it in the DOM and hiding it when it is not required


      return /*#__PURE__*/_react.default.createElement(_RoomSublist.default, {
        key: `sublist-${orderedTagId}`,
        tagId: orderedTagId,
        forRooms: true,
        startAsHidden: aesthetics.defaultHidden,
        label: aesthetics.sectionLabelRaw ? aesthetics.sectionLabelRaw : (0, _languageHandler._t)(aesthetics.sectionLabel),
        onAddRoom: aesthetics.onAddRoom,
        addRoomLabel: aesthetics.addRoomLabel ? (0, _languageHandler._t)(aesthetics.addRoomLabel) : aesthetics.addRoomLabel,
        addRoomContextMenu: aesthetics.addRoomContextMenu,
        isMinimized: this.props.isMinimized,
        showSkeleton: showSkeleton,
        extraTiles: extraTiles,
        resizeNotifier: this.props.resizeNotifier,
        alwaysVisible: alwaysVisible,
        onListCollapse: this.props.onListCollapse
      });
    });
  }

  focus() {
    var _find, _this$treeRef$current;

    // focus the first focusable element in this aria treeview widget
    (_find = [...((_this$treeRef$current = this.treeRef.current) === null || _this$treeRef$current === void 0 ? void 0 : _this$treeRef$current.querySelectorAll('[role="treeitem"]'))].find(e => e.offsetParent !== null)) === null || _find === void 0 ? void 0 : _find.focus();
  }

  render() {
    const cli = _MatrixClientPeg.MatrixClientPeg.get();

    const userId = cli.getUserId();
    const activeSpace = this.props.activeSpace[0] === "!" ? cli.getRoom(this.props.activeSpace) : null;
    let explorePrompt;

    if (!this.props.isMinimized) {
      if (this.state.isNameFiltering) {
        explorePrompt = /*#__PURE__*/_react.default.createElement("div", {
          className: "mx_RoomList_explorePrompt"
        }, /*#__PURE__*/_react.default.createElement("div", null, (0, _languageHandler._t)("Can't see what you're looking for?")), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
          className: "mx_RoomList_explorePrompt_startChat",
          kind: "link",
          onClick: this.onStartChat
        }, (0, _languageHandler._t)("Start a new chat")), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
          className: "mx_RoomList_explorePrompt_explore",
          kind: "link",
          onClick: this.onExplore
        }, activeSpace ? (0, _languageHandler._t)("Explore rooms") : (0, _languageHandler._t)("Explore all public rooms")));
      } else if (activeSpace !== null && activeSpace !== void 0 && activeSpace.canInvite(userId) || (activeSpace === null || activeSpace === void 0 ? void 0 : activeSpace.getMyMembership()) === "join" || (activeSpace === null || activeSpace === void 0 ? void 0 : activeSpace.getJoinRule()) === _partials.JoinRule.Public) {
        const spaceName = activeSpace.name;
        const canInvite = (activeSpace === null || activeSpace === void 0 ? void 0 : activeSpace.canInvite(userId)) || (activeSpace === null || activeSpace === void 0 ? void 0 : activeSpace.getJoinRule()) === _partials.JoinRule.Public;
        explorePrompt = /*#__PURE__*/_react.default.createElement("div", {
          className: "mx_RoomList_explorePrompt"
        }, /*#__PURE__*/_react.default.createElement("div", null, (0, _languageHandler._t)("Quick actions")), canInvite && /*#__PURE__*/_react.default.createElement(_AccessibleTooltipButton.default, {
          className: "mx_RoomList_explorePrompt_spaceInvite",
          onClick: this.onSpaceInviteClick,
          title: (0, _languageHandler._t)("Invite to %(spaceName)s", {
            spaceName
          })
        }, (0, _languageHandler._t)("Invite people")), (activeSpace === null || activeSpace === void 0 ? void 0 : activeSpace.getMyMembership()) === "join" && /*#__PURE__*/_react.default.createElement(_AccessibleTooltipButton.default, {
          className: "mx_RoomList_explorePrompt_spaceExplore",
          onClick: this.onExplore,
          title: (0, _languageHandler._t)("Explore %(spaceName)s", {
            spaceName
          })
        }, (0, _languageHandler._t)("Explore rooms")));
      } else if (Object.values(this.state.sublists).some(list => list.length > 0)) {
        const unfilteredLists = _RoomListStore.default.instance.unfilteredLists;
        const unfilteredRooms = unfilteredLists[_models.DefaultTagID.Untagged] || [];
        const unfilteredHistorical = unfilteredLists[_models.DefaultTagID.Archived] || [];
        const unfilteredFavourite = unfilteredLists[_models.DefaultTagID.Favourite] || []; // show a prompt to join/create rooms if the user is in 0 rooms and no historical

        if (unfilteredRooms.length < 1 && unfilteredHistorical.length < 1 && unfilteredFavourite.length < 1) {
          explorePrompt = /*#__PURE__*/_react.default.createElement("div", {
            className: "mx_RoomList_explorePrompt"
          }, /*#__PURE__*/_react.default.createElement("div", null, (0, _languageHandler._t)("Use the + to make a new room or explore existing ones below")), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
            className: "mx_RoomList_explorePrompt_startChat",
            kind: "link",
            onClick: this.onStartChat
          }, (0, _languageHandler._t)("Start a new chat")), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
            className: "mx_RoomList_explorePrompt_explore",
            kind: "link",
            onClick: this.onExplore
          }, (0, _languageHandler._t)("Explore all public rooms")));
        }
      }
    }

    const sublists = this.renderSublists();
    return /*#__PURE__*/_react.default.createElement(_RovingTabIndex.RovingTabIndexProvider, {
      handleHomeEnd: true,
      handleUpDown: true,
      onKeyDown: this.props.onKeyDown
    }, ({
      onKeyDownHandler
    }) => /*#__PURE__*/_react.default.createElement("div", {
      onFocus: this.props.onFocus,
      onBlur: this.props.onBlur,
      onKeyDown: onKeyDownHandler,
      className: "mx_RoomList",
      role: "tree",
      "aria-label": (0, _languageHandler._t)("Rooms"),
      ref: this.treeRef
    }, sublists, explorePrompt));
  }

}, (0, _defineProperty2.default)(_class2, "contextType", _MatrixClientContext.default), _temp)) || _class);
exports.default = RoomList;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,