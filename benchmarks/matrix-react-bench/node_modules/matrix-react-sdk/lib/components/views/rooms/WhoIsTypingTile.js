"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var WhoIsTyping = _interopRequireWildcard(require("../../../WhoIsTyping"));

var _Timer = _interopRequireDefault(require("../../../utils/Timer"));

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _MemberAvatar = _interopRequireDefault(require("../avatars/MemberAvatar"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _strings = require("../../../utils/strings");

var _dec, _class, _class2, _temp;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

let WhoIsTypingTile = (_dec = (0, _replaceableComponent.replaceableComponent)("views.rooms.WhoIsTypingTile"), _dec(_class = (_temp = _class2 = class WhoIsTypingTile extends _react.default.Component {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "state", {
      usersTyping: WhoIsTyping.usersTypingApartFromMe(this.props.room),
      delayedStopTypingTimers: {}
    });
    (0, _defineProperty2.default)(this, "isVisible", () => {
      return WhoIsTypingTile.isVisible(this.state);
    });
    (0, _defineProperty2.default)(this, "onRoomTimeline", (event, room) => {
      var _this$props$room;

      if ((room === null || room === void 0 ? void 0 : room.roomId) === ((_this$props$room = this.props.room) === null || _this$props$room === void 0 ? void 0 : _this$props$room.roomId)) {
        const userId = event.getSender(); // remove user from usersTyping

        const usersTyping = this.state.usersTyping.filter(m => m.userId !== userId);

        if (usersTyping.length !== this.state.usersTyping.length) {
          this.setState({
            usersTyping
          });
        } // abort timer if any


        this.abortUserTimer(userId);
      }
    });
    (0, _defineProperty2.default)(this, "onRoomMemberTyping", () => {
      const usersTyping = WhoIsTyping.usersTypingApartFromMeAndIgnored(this.props.room);
      this.setState({
        delayedStopTypingTimers: this.updateDelayedStopTypingTimers(usersTyping),
        usersTyping
      });
    });
  }

  componentDidMount() {
    _MatrixClientPeg.MatrixClientPeg.get().on("RoomMember.typing", this.onRoomMemberTyping);

    _MatrixClientPeg.MatrixClientPeg.get().on("Room.timeline", this.onRoomTimeline);
  }

  componentDidUpdate(_, prevState) {
    const wasVisible = WhoIsTypingTile.isVisible(prevState);
    const isVisible = WhoIsTypingTile.isVisible(this.state);

    if (this.props.onShown && !wasVisible && isVisible) {
      this.props.onShown();
    } else if (this.props.onHidden && wasVisible && !isVisible) {
      this.props.onHidden();
    }
  }

  componentWillUnmount() {
    // we may have entirely lost our client as we're logging out before clicking login on the guest bar...
    const client = _MatrixClientPeg.MatrixClientPeg.get();

    if (client) {
      client.removeListener("RoomMember.typing", this.onRoomMemberTyping);
      client.removeListener("Room.timeline", this.onRoomTimeline);
    }

    Object.values(this.state.delayedStopTypingTimers).forEach(t => t.abort());
  }

  static isVisible(state) {
    return state.usersTyping.length !== 0 || Object.keys(state.delayedStopTypingTimers).length !== 0;
  }

  updateDelayedStopTypingTimers(usersTyping) {
    const usersThatStoppedTyping = this.state.usersTyping.filter(a => {
      return !usersTyping.some(b => a.userId === b.userId);
    });
    const usersThatStartedTyping = usersTyping.filter(a => {
      return !this.state.usersTyping.some(b => a.userId === b.userId);
    }); // abort all the timers for the users that started typing again

    usersThatStartedTyping.forEach(m => {
      const timer = this.state.delayedStopTypingTimers[m.userId];

      if (timer) {
        timer.abort();
      }
    }); // prepare new delayedStopTypingTimers object to update state with

    let delayedStopTypingTimers = Object.assign({}, this.state.delayedStopTypingTimers); // remove members that started typing again

    delayedStopTypingTimers = usersThatStartedTyping.reduce((delayedStopTypingTimers, m) => {
      delete delayedStopTypingTimers[m.userId];
      return delayedStopTypingTimers;
    }, delayedStopTypingTimers); // start timer for members that stopped typing

    delayedStopTypingTimers = usersThatStoppedTyping.reduce((delayedStopTypingTimers, m) => {
      if (!delayedStopTypingTimers[m.userId]) {
        const timer = new _Timer.default(5000);
        delayedStopTypingTimers[m.userId] = timer;
        timer.start();
        timer.finished().then(() => this.removeUserTimer(m.userId), // on elapsed
        () => {
          /* aborted */
        });
      }

      return delayedStopTypingTimers;
    }, delayedStopTypingTimers);
    return delayedStopTypingTimers;
  }

  abortUserTimer(userId) {
    const timer = this.state.delayedStopTypingTimers[userId];

    if (timer) {
      timer.abort();
      this.removeUserTimer(userId);
    }
  }

  removeUserTimer(userId) {
    const timer = this.state.delayedStopTypingTimers[userId];

    if (timer) {
      const delayedStopTypingTimers = Object.assign({}, this.state.delayedStopTypingTimers);
      delete delayedStopTypingTimers[userId];
      this.setState({
        delayedStopTypingTimers
      });
    }
  }

  renderTypingIndicatorAvatars(users, limit) {
    let othersCount = 0;

    if (users.length > limit) {
      othersCount = users.length - limit + 1;
      users = users.slice(0, limit - 1);
    }

    const avatars = users.map(u => {
      return /*#__PURE__*/_react.default.createElement(_MemberAvatar.default, {
        key: u.userId,
        member: u,
        width: 24,
        height: 24,
        resizeMethod: "crop",
        viewUserOnClick: true,
        "aria-live": "off"
      });
    });

    if (othersCount > 0) {
      avatars.push( /*#__PURE__*/_react.default.createElement("span", {
        className: "mx_WhoIsTypingTile_remainingAvatarPlaceholder",
        key: "others"
      }, "+", othersCount));
    }

    return avatars;
  }

  render() {
    let usersTyping = this.state.usersTyping;
    const stoppedUsersOnTimer = Object.keys(this.state.delayedStopTypingTimers).map(userId => this.props.room.getMember(userId)); // append the users that have been reported not typing anymore
    // but have a timeout timer running so they can disappear
    // when a message comes in

    usersTyping = usersTyping.concat(stoppedUsersOnTimer); // sort them so the typing members don't change order when
    // moved to delayedStopTypingTimers

    usersTyping.sort((a, b) => (0, _strings.compare)(a.name, b.name));
    const typingString = WhoIsTyping.whoIsTypingString(usersTyping, this.props.whoIsTypingLimit);

    if (!typingString) {
      return null;
    }

    return /*#__PURE__*/_react.default.createElement("li", {
      className: "mx_WhoIsTypingTile",
      "aria-atomic": "true"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_WhoIsTypingTile_avatars"
    }, this.renderTypingIndicatorAvatars(usersTyping, this.props.whoIsTypingLimit)), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_WhoIsTypingTile_label"
    }, typingString));
  }

}, (0, _defineProperty2.default)(_class2, "defaultProps", {
  whoIsTypingLimit: 3
}), _temp)) || _class);
exports.default = WhoIsTypingTile;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL3Jvb21zL1dob0lzVHlwaW5nVGlsZS50c3giXSwibmFtZXMiOlsiV2hvSXNUeXBpbmdUaWxlIiwiUmVhY3QiLCJDb21wb25lbnQiLCJ1c2Vyc1R5cGluZyIsIldob0lzVHlwaW5nIiwidXNlcnNUeXBpbmdBcGFydEZyb21NZSIsInByb3BzIiwicm9vbSIsImRlbGF5ZWRTdG9wVHlwaW5nVGltZXJzIiwiaXNWaXNpYmxlIiwic3RhdGUiLCJldmVudCIsInJvb21JZCIsInVzZXJJZCIsImdldFNlbmRlciIsImZpbHRlciIsIm0iLCJsZW5ndGgiLCJzZXRTdGF0ZSIsImFib3J0VXNlclRpbWVyIiwidXNlcnNUeXBpbmdBcGFydEZyb21NZUFuZElnbm9yZWQiLCJ1cGRhdGVEZWxheWVkU3RvcFR5cGluZ1RpbWVycyIsImNvbXBvbmVudERpZE1vdW50IiwiTWF0cml4Q2xpZW50UGVnIiwiZ2V0Iiwib24iLCJvblJvb21NZW1iZXJUeXBpbmciLCJvblJvb21UaW1lbGluZSIsImNvbXBvbmVudERpZFVwZGF0ZSIsIl8iLCJwcmV2U3RhdGUiLCJ3YXNWaXNpYmxlIiwib25TaG93biIsIm9uSGlkZGVuIiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJjbGllbnQiLCJyZW1vdmVMaXN0ZW5lciIsIk9iamVjdCIsInZhbHVlcyIsImZvckVhY2giLCJ0IiwiYWJvcnQiLCJrZXlzIiwidXNlcnNUaGF0U3RvcHBlZFR5cGluZyIsImEiLCJzb21lIiwiYiIsInVzZXJzVGhhdFN0YXJ0ZWRUeXBpbmciLCJ0aW1lciIsImFzc2lnbiIsInJlZHVjZSIsIlRpbWVyIiwic3RhcnQiLCJmaW5pc2hlZCIsInRoZW4iLCJyZW1vdmVVc2VyVGltZXIiLCJyZW5kZXJUeXBpbmdJbmRpY2F0b3JBdmF0YXJzIiwidXNlcnMiLCJsaW1pdCIsIm90aGVyc0NvdW50Iiwic2xpY2UiLCJhdmF0YXJzIiwibWFwIiwidSIsInB1c2giLCJyZW5kZXIiLCJzdG9wcGVkVXNlcnNPblRpbWVyIiwiZ2V0TWVtYmVyIiwiY29uY2F0Iiwic29ydCIsIm5hbWUiLCJ0eXBpbmdTdHJpbmciLCJ3aG9Jc1R5cGluZ1N0cmluZyIsIndob0lzVHlwaW5nTGltaXQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBaUJBOztBQUtBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOzs7Ozs7OztJQXVCcUJBLGUsV0FEcEIsZ0RBQXFCLDZCQUFyQixDLG1DQUFELE1BQ3FCQSxlQURyQixTQUM2Q0MsZUFBTUMsU0FEbkQsQ0FDNkU7QUFBQTtBQUFBO0FBQUEsaURBS2pFO0FBQ0pDLE1BQUFBLFdBQVcsRUFBRUMsV0FBVyxDQUFDQyxzQkFBWixDQUFtQyxLQUFLQyxLQUFMLENBQVdDLElBQTlDLENBRFQ7QUFFSkMsTUFBQUEsdUJBQXVCLEVBQUU7QUFGckIsS0FMaUU7QUFBQSxxREF1Q3RELE1BQWU7QUFDOUIsYUFBT1IsZUFBZSxDQUFDUyxTQUFoQixDQUEwQixLQUFLQyxLQUEvQixDQUFQO0FBQ0gsS0F6Q3dFO0FBQUEsMERBMkNoRCxDQUFDQyxLQUFELEVBQXFCSixJQUFyQixLQUEwQztBQUFBOztBQUMvRCxVQUFJLENBQUFBLElBQUksU0FBSixJQUFBQSxJQUFJLFdBQUosWUFBQUEsSUFBSSxDQUFFSyxNQUFOLDJCQUFpQixLQUFLTixLQUFMLENBQVdDLElBQTVCLHFEQUFpQixpQkFBaUJLLE1BQWxDLENBQUosRUFBOEM7QUFDMUMsY0FBTUMsTUFBTSxHQUFHRixLQUFLLENBQUNHLFNBQU4sRUFBZixDQUQwQyxDQUUxQzs7QUFDQSxjQUFNWCxXQUFXLEdBQUcsS0FBS08sS0FBTCxDQUFXUCxXQUFYLENBQXVCWSxNQUF2QixDQUErQkMsQ0FBRCxJQUFPQSxDQUFDLENBQUNILE1BQUYsS0FBYUEsTUFBbEQsQ0FBcEI7O0FBQ0EsWUFBSVYsV0FBVyxDQUFDYyxNQUFaLEtBQXVCLEtBQUtQLEtBQUwsQ0FBV1AsV0FBWCxDQUF1QmMsTUFBbEQsRUFBMEQ7QUFDdEQs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LENBQ2pCckUsV0FEaUIsRUFFakIsS0FBS0csS0FBTCxDQUFXbUUsZ0JBRk0sQ0FBckI7O0FBSUEsUUFBSSxDQUFDRixZQUFMLEVBQW1CO0FBQ2YsYUFBTyxJQUFQO0FBQ0g7O0FBRUQsd0JBQ0k7QUFBSSxNQUFBLFNBQVMsRUFBQyxvQkFBZDtBQUFtQyxxQkFBWTtBQUEvQyxvQkFDSTtBQUFLLE1BQUEsU0FBUyxFQUFDO0FBQWYsT0FDTSxLQUFLZiw0QkFBTCxDQUFrQ3JELFdBQWxDLEVBQStDLEtBQUtHLEtBQUwsQ0FBV21FLGdCQUExRCxDQUROLENBREosZUFJSTtBQUFLLE1BQUEsU0FBUyxFQUFDO0FBQWYsT0FDTUYsWUFETixDQUpKLENBREo7QUFVSDs7QUFyTHdFLEMseURBQ25EO0FBQ2xCRSxFQUFBQSxnQkFBZ0IsRUFBRTtBQURBLEMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuQ29weXJpZ2h0IDIwMTUsIDIwMTYgT3Blbk1hcmtldCBMdGRcbkNvcHlyaWdodCAyMDE3LCAyMDE4IE5ldyBWZWN0b3IgTHRkXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFJvb20gfSBmcm9tIFwibWF0cml4LWpzLXNkay9zcmMvbW9kZWxzL3Jvb21cIjtcbmltcG9ydCB7IFJvb21NZW1iZXIgfSBmcm9tIFwibWF0cml4LWpzLXNkay9zcmMvbW9kZWxzL3Jvb20tbWVtYmVyXCI7XG5pbXBvcnQgeyBNYXRyaXhFdmVudCB9IGZyb20gXCJtYXRyaXgtanMtc2RrL3NyYy9tb2RlbHMvZXZlbnRcIjtcblxuaW1wb3J0ICogYXMgV2hvSXNUeXBpbmcgZnJvbSAnLi4vLi4vLi4vV2hvSXNUeXBpbmcnO1xuaW1wb3J0IFRpbWVyIGZyb20gJy4uLy4uLy4uL3V0aWxzL1RpbWVyJztcbmltcG9ydCB7IE1hdHJpeENsaWVudFBlZyB9IGZyb20gJy4uLy4uLy4uL01hdHJpeENsaWVudFBlZyc7XG5pbXBvcnQgTWVtYmVyQXZhdGFyIGZyb20gJy4uL2F2YXRhcnMvTWVtYmVyQXZhdGFyJztcbmltcG9ydCB7IHJlcGxhY2VhYmxlQ29tcG9uZW50IH0gZnJvbSBcIi4uLy4uLy4uL3V0aWxzL3JlcGxhY2VhYmxlQ29tcG9uZW50XCI7XG5pbXBvcnQgeyBjb21wYXJlIH0gZnJvbSBcIi4uLy4uLy4uL3V0aWxzL3N0cmluZ3NcIjtcblxuaW50ZXJmYWNlIElQcm9wcyB7XG4gICAgLy8gdGhlIHJvb20gdGhpcyBzdGF0dXNiYXIgaXMgcmVwcmVzZW50aW5nLlxuICAgIHJvb206IFJvb207XG4gICAgb25TaG93bj86ICgpID0+IHZvaWQ7XG4gICAgb25IaWRkZW4/OiAoKSA9PiB2b2lkO1xuICAgIC8vIE51bWJlciBvZiBuYW1lcyB0byBkaXNwbGF5IGluIHR5cGluZyBpbmRpY2F0aW9uLiBFLmcuIHNldCB0byAzLCB3aWxsXG4gICAgLy8gcmVzdWx0IGluIFwiWCwgWSwgWiBhbmQgMTAwIG90aGVycyBhcmUgdHlwaW5nLlwiXG4gICAgd2hvSXNUeXBpbmdMaW1pdDogbnVtYmVyO1xufVxuXG5pbnRlcmZhY2UgSVN0YXRlIHtcbiAgICB1c2Vyc1R5cGluZzogUm9vbU1lbWJlcltdO1xuICAgIC8vIGEgbWFwIHdpdGggdXNlcmlkID0+IFRpbWVyIHRvIGRlbGF5XG4gICAgLy8gaGlkaW5nIHRoZSBcInggaXMgdHlwaW5nXCIgbWVzc2FnZSBmb3IgYVxuICAgIC8vIHVzZXIgc28gaGlkaW5nIGl0IGNhbiBjb2luY2lkZVxuICAgIC8vIHdpdGggdGhlIHNlbnQgbWVzc2FnZSBieSB0aGUgb3RoZXIgc2lkZVxuICAgIC8vIHJlc3VsdGluZyBpbiBsZXNzIHRpbWVsaW5lIGp1bXBpbmVzc1xuICAgIGRlbGF5ZWRTdG9wVHlwaW5nVGltZXJzOiBSZWNvcmQ8c3RyaW5nLCBUaW1lcj47XG59XG5cbkByZXBsYWNlYWJsZUNvbXBvbmVudChcInZpZXdzLnJvb21zLldob0lzVHlwaW5nVGlsZVwiKVxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgV2hvSXNUeXBpbmdUaWxlIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PElQcm9wcywgSVN0YXRlPiB7XG4gICAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICAgICAgd2hvSXNUeXBpbmdMaW1pdDogMyxcbiAgICB9O1xuXG4gICAgc3RhdGUgPSB7XG4gICAgICAgIHVzZXJzVHlwaW5nOiBXaG9Jc1R5cGluZy51c2Vyc1R5cGluZ0FwYXJ0RnJvbU1lKHRoaXMucHJvcHMucm9vbSksXG4gICAgICAgIGRlbGF5ZWRTdG9wVHlwaW5nVGltZXJzOiB7fSxcbiAgICB9O1xuXG4gICAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICAgIE1hdHJpeENsaWVudFBlZy5nZXQoKS5vbihcIlJvb21NZW1iZXIudHlwaW5nXCIsIHRoaXMub25Sb29tTWVtYmVyVHlwaW5nKTtcbiAgICAgICAgTWF0cml4Q2xpZW50UGVnLmdldCgpLm9uKFwiUm9vbS50aW1lbGluZVwiLCB0aGlzLm9uUm9vbVRpbWVsaW5lKTtcbiAgICB9XG5cbiAgICBjb21wb25lbnREaWRVcGRhdGUoXywgcHJldlN0YXRlKSB7XG4gICAgICAgIGNvbnN0IHdhc1Zpc2libGUgPSBXaG9Jc1R5cGluZ1RpbGUuaXNWaXNpYmxlKHByZXZTdGF0ZSk7XG4gICAgICAgIGNvbnN0IGlzVmlzaWJsZSA9IFdob0lzVHlwaW5nVGlsZS5pc1Zpc2libGUodGhpcy5zdGF0ZSk7XG4gICAgICAgIGlmICh0aGlzLnByb3BzLm9uU2hvd24gJiYgIXdhc1Zpc2libGUgJiYgaXNWaXNpYmxlKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLm9uU2hvd24oKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByb3BzLm9uSGlkZGVuICYmIHdhc1Zpc2libGUgJiYgIWlzVmlzaWJsZSkge1xuICAgICAgICAgICAgdGhpcy5wcm9wcy5vbkhpZGRlbigpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICAgIC8vIHdlIG1heSBoYXZlIGVudGlyZWx5IGxvc3Qgb3VyIGNsaWVudCBhcyB3ZSdyZSBsb2dnaW5nIG91dCBiZWZvcmUgY2xpY2tpbmcgbG9naW4gb24gdGhlIGd1ZXN0IGJhci4uLlxuICAgICAgICBjb25zdCBjbGllbnQgPSBNYXRyaXhDbGllbnRQZWcuZ2V0KCk7XG4gICAgICAgIGlmIChjbGllbnQpIHtcbiAgICAgICAgICAgIGNsaWVudC5yZW1vdmVMaXN0ZW5lcihcIlJvb21NZW1iZXIudHlwaW5nXCIsIHRoaXMub25Sb29tTWVtYmVyVHlwaW5nKTtcbiAgICAgICAgICAgIGNsaWVudC5yZW1vdmVMaXN0ZW5lcihcIlJvb20udGltZWxpbmVcIiwgdGhpcy5vblJvb21UaW1lbGluZSk7XG4gICAgICAgIH1cbiAgICAgICAgT2JqZWN0LnZhbHVlcyh0aGlzLnN0YXRlLmRlbGF5ZWRTdG9wVHlwaW5nVGltZXJzKS5mb3JFYWNoKCh0KSA9PiAodCBhcyBUaW1lcikuYWJvcnQoKSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdGF0aWMgaXNWaXNpYmxlKHN0YXRlOiBJU3RhdGUpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHN0YXRlLnVzZXJzVHlwaW5nLmxlbmd0aCAhPT0gMCB8fCBPYmplY3Qua2V5cyhzdGF0ZS5kZWxheWVkU3RvcFR5cGluZ1RpbWVycykubGVuZ3RoICE9PSAwO1xuICAgIH1cblxuICAgIHB1YmxpYyBpc1Zpc2libGUgPSAoKTogYm9vbGVhbiA9PiB7XG4gICAgICAgIHJldHVybiBXaG9Jc1R5cGluZ1RpbGUuaXNWaXNpYmxlKHRoaXMuc3RhdGUpO1xuICAgIH07XG5cbiAgICBwcml2YXRlIG9uUm9vbVRpbWVsaW5lID0gKGV2ZW50OiBNYXRyaXhFdmVudCwgcm9vbTogUm9vbSk6IHZvaWQgPT4ge1xuICAgICAgICBpZiAocm9vbT8ucm9vbUlkID09PSB0aGlzLnByb3BzLnJvb20/LnJvb21JZCkge1xuICAgICAgICAgICAgY29uc3QgdXNlcklkID0gZXZlbnQuZ2V0U2VuZGVyKCk7XG4gICAgICAgICAgICAvLyByZW1vdmUgdXNlciBmcm9tIHVzZXJzVHlwaW5nXG4gICAgICAgICAgICBjb25zdCB1c2Vyc1R5cGluZyA9IHRoaXMuc3RhdGUudXNlcnNUeXBpbmcuZmlsdGVyKChtKSA9PiBtLnVzZXJJZCAhPT0gdXNlcklkKTtcbiAgICAgICAgICAgIGlmICh1c2Vyc1R5cGluZy5sZW5ndGggIT09IHRoaXMuc3RhdGUudXNlcnNUeXBpbmcubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHVzZXJzVHlwaW5nIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gYWJvcnQgdGltZXIgaWYgYW55XG4gICAgICAgICAgICB0aGlzLmFib3J0VXNlclRpbWVyKHVzZXJJZCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcHJpdmF0ZSBvblJvb21NZW1iZXJUeXBpbmcgPSAoKTogdm9pZCA9PiB7XG4gICAgICAgIGNvbnN0IHVzZXJzVHlwaW5nID0gV2hvSXNUeXBpbmcudXNlcnNUeXBpbmdBcGFydEZyb21NZUFuZElnbm9yZWQodGhpcy5wcm9wcy5yb29tKTtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBkZWxheWVkU3RvcFR5cGluZ1RpbWVyczogdGhpcy51cGRhdGVEZWxheWVkU3RvcFR5cGluZ1RpbWVycyh1c2Vyc1R5cGluZyksXG4gICAgICAgICAgICB1c2Vyc1R5cGluZyxcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIHByaXZhdGUgdXBkYXRlRGVsYXllZFN0b3BUeXBpbmdUaW1lcnModXNlcnNUeXBpbmc6IFJvb21NZW1iZXJbXSk6IFJlY29yZDxzdHJpbmcsIFRpbWVyPiB7XG4gICAgICAgIGNvbnN0IHVzZXJzVGhhdFN0b3BwZWRUeXBpbmcgPSB0aGlzLnN0YXRlLnVzZXJzVHlwaW5nLmZpbHRlcigoYSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuICF1c2Vyc1R5cGluZy5zb21lKChiKSA9PiBhLnVzZXJJZCA9PT0gYi51c2VySWQpO1xuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgdXNlcnNUaGF0U3RhcnRlZFR5cGluZyA9IHVzZXJzVHlwaW5nLmZpbHRlcigoYSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuICF0aGlzLnN0YXRlLnVzZXJzVHlwaW5nLnNvbWUoKGIpID0+IGEudXNlcklkID09PSBiLnVzZXJJZCk7XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBhYm9ydCBhbGwgdGhlIHRpbWVycyBmb3IgdGhlIHVzZXJzIHRoYXQgc3RhcnRlZCB0eXBpbmcgYWdhaW5cbiAgICAgICAgdXNlcnNUaGF0U3RhcnRlZFR5cGluZy5mb3JFYWNoKChtKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB0aW1lciA9IHRoaXMuc3RhdGUuZGVsYXllZFN0b3BUeXBpbmdUaW1lcnNbbS51c2VySWRdO1xuICAgICAgICAgICAgaWYgKHRpbWVyKSB7XG4gICAgICAgICAgICAgICAgdGltZXIuYWJvcnQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIC8vIHByZXBhcmUgbmV3IGRlbGF5ZWRTdG9wVHlwaW5nVGltZXJzIG9iamVjdCB0byB1cGRhdGUgc3RhdGUgd2l0aFxuICAgICAgICBsZXQgZGVsYXllZFN0b3BUeXBpbmdUaW1lcnMgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLnN0YXRlLmRlbGF5ZWRTdG9wVHlwaW5nVGltZXJzKTtcbiAgICAgICAgLy8gcmVtb3ZlIG1lbWJlcnMgdGhhdCBzdGFydGVkIHR5cGluZyBhZ2FpblxuICAgICAgICBkZWxheWVkU3RvcFR5cGluZ1RpbWVycyA9IHVzZXJzVGhhdFN0YXJ0ZWRUeXBpbmcucmVkdWNlKChkZWxheWVkU3RvcFR5cGluZ1RpbWVycywgbSkgPT4ge1xuICAgICAgICAgICAgZGVsZXRlIGRlbGF5ZWRTdG9wVHlwaW5nVGltZXJzW20udXNlcklkXTtcbiAgICAgICAgICAgIHJldHVybiBkZWxheWVkU3RvcFR5cGluZ1RpbWVycztcbiAgICAgICAgfSwgZGVsYXllZFN0b3BUeXBpbmdUaW1lcnMpO1xuICAgICAgICAvLyBzdGFydCB0aW1lciBmb3IgbWVtYmVycyB0aGF0IHN0b3BwZWQgdHlwaW5nXG4gICAgICAgIGRlbGF5ZWRTdG9wVHlwaW5nVGltZXJzID0gdXNlcnNUaGF0U3RvcHBlZFR5cGluZy5yZWR1Y2UoKGRlbGF5ZWRTdG9wVHlwaW5nVGltZXJzLCBtKSA9PiB7XG4gICAgICAgICAgICBpZiAoIWRlbGF5ZWRTdG9wVHlwaW5nVGltZXJzW20udXNlcklkXSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRpbWVyID0gbmV3IFRpbWVyKDUwMDApO1xuICAgICAgICAgICAgICAgIGRlbGF5ZWRTdG9wVHlwaW5nVGltZXJzW20udXNlcklkXSA9IHRpbWVyO1xuICAgICAgICAgICAgICAgIHRpbWVyLnN0YXJ0KCk7XG4gICAgICAgICAgICAgICAgdGltZXIuZmluaXNoZWQoKS50aGVuKFxuICAgICAgICAgICAgICAgICAgICAoKSA9PiB0aGlzLnJlbW92ZVVzZXJUaW1lcihtLnVzZXJJZCksIC8vIG9uIGVsYXBzZWRcbiAgICAgICAgICAgICAgICAgICAgKCkgPT4gey8qIGFib3J0ZWQgKi99LFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZGVsYXllZFN0b3BUeXBpbmdUaW1lcnM7XG4gICAgICAgIH0sIGRlbGF5ZWRTdG9wVHlwaW5nVGltZXJzKTtcblxuICAgICAgICByZXR1cm4gZGVsYXllZFN0b3BUeXBpbmdUaW1lcnM7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhYm9ydFVzZXJUaW1lcih1c2VySWQ6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICBjb25zdCB0aW1lciA9IHRoaXMuc3RhdGUuZGVsYXllZFN0b3BUeXBpbmdUaW1lcnNbdXNlcklkXTtcbiAgICAgICAgaWYgKHRpbWVyKSB7XG4gICAgICAgICAgICB0aW1lci5hYm9ydCgpO1xuICAgICAgICAgICAgdGhpcy5yZW1vdmVVc2VyVGltZXIodXNlcklkKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgcmVtb3ZlVXNlclRpbWVyKHVzZXJJZDogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHRpbWVyID0gdGhpcy5zdGF0ZS5kZWxheWVkU3RvcFR5cGluZ1RpbWVyc1t1c2VySWRdO1xuICAgICAgICBpZiAodGltZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IGRlbGF5ZWRTdG9wVHlwaW5nVGltZXJzID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5zdGF0ZS5kZWxheWVkU3RvcFR5cGluZ1RpbWVycyk7XG4gICAgICAgICAgICBkZWxldGUgZGVsYXllZFN0b3BUeXBpbmdUaW1lcnNbdXNlcklkXTtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBkZWxheWVkU3RvcFR5cGluZ1RpbWVycyB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgcmVuZGVyVHlwaW5nSW5kaWNhdG9yQXZhdGFycyh1c2VyczogUm9vbU1lbWJlcltdLCBsaW1pdDogbnVtYmVyKTogSlNYLkVsZW1lbnRbXSB7XG4gICAgICAgIGxldCBvdGhlcnNDb3VudCA9IDA7XG4gICAgICAgIGlmICh1c2Vycy5sZW5ndGggPiBsaW1pdCkge1xuICAgICAgICAgICAgb3RoZXJzQ291bnQgPSB1c2Vycy5sZW5ndGggLSBsaW1pdCArIDE7XG4gICAgICAgICAgICB1c2VycyA9IHVzZXJzLnNsaWNlKDAsIGxpbWl0IC0gMSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBhdmF0YXJzID0gdXNlcnMubWFwKCh1KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIDxNZW1iZXJBdmF0YXJcbiAgICAgICAgICAgICAgICAgICAga2V5PXt1LnVzZXJJZH1cbiAgICAgICAgICAgICAgICAgICAgbWVtYmVyPXt1fVxuICAgICAgICAgICAgICAgICAgICB3aWR0aD17MjR9XG4gICAgICAgICAgICAgICAgICAgIGhlaWdodD17MjR9XG4gICAgICAgICAgICAgICAgICAgIHJlc2l6ZU1ldGhvZD1cImNyb3BcIlxuICAgICAgICAgICAgICAgICAgICB2aWV3VXNlck9uQ2xpY2s9e3RydWV9XG4gICAgICAgICAgICAgICAgICAgIGFyaWEtbGl2ZT1cIm9mZlwiXG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChvdGhlcnNDb3VudCA+IDApIHtcbiAgICAgICAgICAgIGF2YXRhcnMucHVzaChcbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJteF9XaG9Jc1R5cGluZ1RpbGVfcmVtYWluaW5nQXZhdGFyUGxhY2Vob2xkZXJcIiBrZXk9XCJvdGhlcnNcIj5cbiAgICAgICAgICAgICAgICAgICAgK3sgb3RoZXJzQ291bnQgfVxuICAgICAgICAgICAgICAgIDwvc3Bhbj4sXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGF2YXRhcnM7XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICBsZXQgdXNlcnNUeXBpbmcgPSB0aGlzLnN0YXRlLnVzZXJzVHlwaW5nO1xuICAgICAgICBjb25zdCBzdG9wcGVkVXNlcnNPblRpbWVyID0gT2JqZWN0LmtleXModGhpcy5zdGF0ZS5kZWxheWVkU3RvcFR5cGluZ1RpbWVycylcbiAgICAgICAgICAgIC5tYXAoKHVzZXJJZCkgPT4gdGhpcy5wcm9wcy5yb29tLmdldE1lbWJlcih1c2VySWQpKTtcbiAgICAgICAgLy8gYXBwZW5kIHRoZSB1c2VycyB0aGF0IGhhdmUgYmVlbiByZXBvcnRlZCBub3QgdHlwaW5nIGFueW1vcmVcbiAgICAgICAgLy8gYnV0IGhhdmUgYSB0aW1lb3V0IHRpbWVyIHJ1bm5pbmcgc28gdGhleSBjYW4gZGlzYXBwZWFyXG4gICAgICAgIC8vIHdoZW4gYSBtZXNzYWdlIGNvbWVzIGluXG4gICAgICAgIHVzZXJzVHlwaW5nID0gdXNlcnNUeXBpbmcuY29uY2F0KHN0b3BwZWRVc2Vyc09uVGltZXIpO1xuICAgICAgICAvLyBzb3J0IHRoZW0gc28gdGhlIHR5cGluZyBtZW1iZXJzIGRvbid0IGNoYW5nZSBvcmRlciB3aGVuXG4gICAgICAgIC8vIG1vdmVkIHRvIGRlbGF5ZWRTdG9wVHlwaW5nVGltZXJzXG4gICAgICAgIHVzZXJzVHlwaW5nLnNvcnQoKGEsIGIpID0+IGNvbXBhcmUoYS5uYW1lLCBiLm5hbWUpKTtcblxuICAgICAgICBjb25zdCB0eXBpbmdTdHJpbmcgPSBXaG9Jc1R5cGluZy53aG9Jc1R5cGluZ1N0cmluZyhcbiAgICAgICAgICAgIHVzZXJzVHlwaW5nLFxuICAgICAgICAgICAgdGhpcy5wcm9wcy53aG9Jc1R5cGluZ0xpbWl0LFxuICAgICAgICApO1xuICAgICAgICBpZiAoIXR5cGluZ1N0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGxpIGNsYXNzTmFtZT1cIm14X1dob0lzVHlwaW5nVGlsZVwiIGFyaWEtYXRvbWljPVwidHJ1ZVwiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibXhfV2hvSXNUeXBpbmdUaWxlX2F2YXRhcnNcIj5cbiAgICAgICAgICAgICAgICAgICAgeyB0aGlzLnJlbmRlclR5cGluZ0luZGljYXRvckF2YXRhcnModXNlcnNUeXBpbmcsIHRoaXMucHJvcHMud2hvSXNUeXBpbmdMaW1pdCkgfVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibXhfV2hvSXNUeXBpbmdUaWxlX2xhYmVsXCI+XG4gICAgICAgICAgICAgICAgICAgIHsgdHlwaW5nU3RyaW5nIH1cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICk7XG4gICAgfVxufVxuIl19