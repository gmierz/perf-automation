"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _actions = require("../../../dispatcher/actions");

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

var _MessageEvent = _interopRequireDefault(require("../messages/MessageEvent"));

var _MemberAvatar = _interopRequireDefault(require("../avatars/MemberAvatar"));

var _languageHandler = require("../../../languageHandler");

var _DateUtils = require("../../../DateUtils");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _MatrixClientContext = _interopRequireDefault(require("../../../contexts/MatrixClientContext"));

var _FormattingUtils = require("../../../utils/FormattingUtils");

var _AccessibleTooltipButton = _interopRequireDefault(require("../elements/AccessibleTooltipButton"));

var _EventTile = require("./EventTile");

var _dec, _class, _class2, _temp;

const AVATAR_SIZE = 24;
let PinnedEventTile = (_dec = (0, _replaceableComponent.replaceableComponent)("views.rooms.PinnedEventTile"), _dec(_class = (_temp = _class2 = class PinnedEventTile extends _react.default.Component {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "onTileClicked", () => {
      _dispatcher.default.dispatch({
        action: _actions.Action.ViewRoom,
        event_id: this.props.event.getId(),
        highlighted: true,
        room_id: this.props.event.getRoomId()
      });
    });
  }

  render() {
    const sender = this.props.event.getSender();
    const senderProfile = this.props.room.getMember(sender);
    let unpinButton = null;

    if (this.props.onUnpinClicked) {
      unpinButton = /*#__PURE__*/_react.default.createElement(_AccessibleTooltipButton.default, {
        onClick: this.props.onUnpinClicked,
        className: "mx_PinnedEventTile_unpinButton",
        title: (0, _languageHandler._t)("Unpin")
      });
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_PinnedEventTile"
    }, /*#__PURE__*/_react.default.createElement(_MemberAvatar.default, {
      className: "mx_PinnedEventTile_senderAvatar",
      member: senderProfile,
      width: AVATAR_SIZE,
      height: AVATAR_SIZE,
      fallbackUserId: sender
    }), /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_PinnedEventTile_sender " + (0, _FormattingUtils.getUserNameColorClass)(sender)
    }, (senderProfile === null || senderProfile === void 0 ? void 0 : senderProfile.name) || sender), unpinButton, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_PinnedEventTile_message"
    }, /*#__PURE__*/_react.default.createElement(_MessageEvent.default, {
      mxEvent: this.props.event // @ts-ignore - complaining that className is invalid when it's not
      ,
      className: "mx_PinnedEventTile_body",
      maxImageHeight: 150,
      onHeightChanged: () => {} // we need to give this, apparently
      ,
      tileShape: _EventTile.TileShape.Pinned
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_PinnedEventTile_footer"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_PinnedEventTile_timestamp"
    }, (0, _DateUtils.formatDate)(new Date(this.props.event.getTs()))), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      onClick: this.onTileClicked,
      kind: "link"
    }, (0, _languageHandler._t)("View message"))));
  }

}, (0, _defineProperty2.default)(_class2, "contextType", _MatrixClientContext.default), _temp)) || _class);
exports.default = PinnedEventTile;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,