"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _event = require("matrix-js-sdk/src/models/event");

var _languageHandler = require("../../../languageHandler");

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _model = _interopRequireDefault(require("../../../editor/model"));

var _dom = require("../../../editor/dom");

var _serialize = require("../../../editor/serialize");

var _EventUtils = require("../../../utils/EventUtils");

var _deserialize = require("../../../editor/deserialize");

var _parts = require("../../../editor/parts");

var _BasicMessageComposer = _interopRequireWildcard(require("./BasicMessageComposer"));

var _SlashCommands = require("../../../SlashCommands");

var _actions = require("../../../dispatcher/actions");

var _CountlyAnalytics = _interopRequireDefault(require("../../../CountlyAnalytics"));

var _KeyBindingsManager = require("../../../KeyBindingsManager");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _SendHistoryManager = _interopRequireDefault(require("../../../SendHistoryManager"));

var _Modal = _interopRequireDefault(require("../../../Modal"));

var _event2 = require("matrix-js-sdk/src/@types/event");

var _ErrorDialog = _interopRequireDefault(require("../dialogs/ErrorDialog"));

var _QuestionDialog = _interopRequireDefault(require("../dialogs/QuestionDialog"));

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

var _ConfirmRedactDialog = require("../dialogs/ConfirmRedactDialog");

var _SettingsStore = _interopRequireDefault(require("../../../settings/SettingsStore"));

var _logger = require("matrix-js-sdk/src/logger");

var _MatrixClientContext = require("../../../contexts/MatrixClientContext");

var _RoomContext = _interopRequireDefault(require("../../../contexts/RoomContext"));

var _ComposerInsertPayload = require("../../../dispatcher/payloads/ComposerInsertPayload");

var _dec, _class, _class2, _temp;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function getHtmlReplyFallback(mxEvent) {
  const html = mxEvent.getContent().formatted_body;

  if (!html) {
    return "";
  }

  const rootNode = new DOMParser().parseFromString(html, "text/html").body;
  const mxReply = rootNode.querySelector("mx-reply");
  return mxReply && mxReply.outerHTML || "";
}

function getTextReplyFallback(mxEvent) {
  const body = mxEvent.getContent().body;
  const lines = body.split("\n").map(l => l.trim());

  if (lines.length > 2 && lines[0].startsWith("> ") && lines[1].length === 0) {
    return `${lines[0]}\n\n`;
  }

  return "";
}

function createEditContent(model, editedEvent) {
  const isEmote = (0, _serialize.containsEmote)(model);

  if (isEmote) {
    model = (0, _serialize.stripEmoteCommand)(model);
  }

  const isReply = !!editedEvent.replyEventId;
  let plainPrefix = "";
  let htmlPrefix = "";

  if (isReply) {
    plainPrefix = getTextReplyFallback(editedEvent);
    htmlPrefix = getHtmlReplyFallback(editedEvent);
  }

  const body = (0, _serialize.textSerialize)(model);
  const newContent = {
    "msgtype": isEmote ? _event2.MsgType.Emote : _event2.MsgType.Text,
    "body": body
  };
  const contentBody = {
    msgtype: newContent.msgtype,
    body: `${plainPrefix} * ${body}`
  };
  const formattedBody = (0, _serialize.htmlSerializeIfNeeded)(model, {
    forceHTML: isReply
  });

  if (formattedBody) {
    newContent.format = "org.matrix.custom.html";
    newContent.formatted_body = formattedBody;
    contentBody.format = newContent.format;
    contentBody.formatted_body = `${htmlPrefix} * ${formattedBody}`;
  }

  const relation = {
    "m.new_content": newContent,
    "m.relates_to": {
      "rel_type": "m.replace",
      "event_id": editedEvent.getId()
    }
  };
  return Object.assign(relation, contentBody);
}

let EditMessageComposer = (_dec = (0, _replaceableComponent.replaceableComponent)("views.rooms.EditMessageComposer"), _dec(_class = (_temp = _class2 = class EditMessageComposer extends _react.default.Component {
  constructor(props, context) {
    super(props);
    (0, _defineProperty2.default)(this, "context", void 0);
    (0, _defineProperty2.default)(this, "editorRef", /*#__PURE__*/(0, _react.createRef)());
    (0, _defineProperty2.default)(this, "dispatcherRef", void 0);
    (0, _defineProperty2.default)(this, "model", null);
    (0, _defineProperty2.default)(this, "onKeyDown", event => {
      var _this$editorRef$curre;

      // ignore any keypress while doing IME compositions
      if ((_this$editorRef$curre = this.editorRef.current) !== null && _this$editorRef$curre !== void 0 && _this$editorRef$curre.isComposing(event)) {
        return;
      }

      const action = (0, _KeyBindingsManager.getKeyBindingsManager)().getMessageComposerAction(event);

      switch (action) {
        case _KeyBindingsManager.MessageComposerAction.Send:
          this.sendEdit();
          event.preventDefault();
          break;

        case _KeyBindingsManager.MessageComposerAction.CancelEditing:
          this.cancelEdit();
          break;

        case _KeyBindingsManager.MessageComposerAction.EditPrevMessage:
          {
            var _this$editorRef$curre2, _this$editorRef$curre3;

            if ((_this$editorRef$curre2 = this.editorRef.current) !== null && _this$editorRef$curre2 !== void 0 && _this$editorRef$curre2.isModified() || !((_this$editorRef$curre3 = this.editorRef.current) !== null && _this$editorRef$curre3 !== void 0 && _this$editorRef$curre3.isCaretAtStart())) {
              return;
            }

            const previousEvent = (0, _EventUtils.findEditableEvent)({
              events: this.events,
              isForward: false,
              fromEventId: this.props.editState.getEvent().getId()
            });

            if (previousEvent) {
              _dispatcher.default.dispatch({
                action: _actions.Action.EditEvent,
                event: previousEvent,
                timelineRenderingType: this.context.timelineRenderingType
              });

              event.preventDefault();
            }

            break;
          }

        case _KeyBindingsManager.MessageComposerAction.EditNextMessage:
          {
            var _this$editorRef$curre4, _this$editorRef$curre5;

            if ((_this$editorRef$curre4 = this.editorRef.current) !== null && _this$editorRef$curre4 !== void 0 && _this$editorRef$curre4.isModified() || !((_this$editorRef$curre5 = this.editorRef.current) !== null && _this$editorRef$curre5 !== void 0 && _this$editorRef$curre5.isCaretAtEnd())) {
              return;
            }

            const nextEvent = (0, _EventUtils.findEditableEvent)({
              events: this.events,
              isForward: true,
              fromEventId: this.props.editState.getEvent().getId()
            });

            if (nextEvent) {
              _dispatcher.default.dispatch({
                action: _actions.Action.EditEvent,
                event: nextEvent,
                timelineRenderingType: this.context.timelineRenderingType
              });
            } else {
              this.clearStoredEditorState();

              _dispatcher.default.dispatch({
                action: _actions.Action.EditEvent,
                event: null,
                timelineRenderingType: this.context.timelineRenderingType
              });

              _dispatcher.default.dispatch({
                action: _actions.Action.FocusSendMessageComposer,
                context: this.context.timelineRenderingType
              });
            }

            event.preventDefault();
            break;
          }
      }
    });
    (0, _defineProperty2.default)(this, "cancelEdit", () => {
      this.clearStoredEditorState();

      _dispatcher.default.dispatch({
        action: _actions.Action.EditEvent,
        event: null,
        timelineRenderingType: this.context.timelineRenderingType
      });

      _dispatcher.default.dispatch({
        action: _actions.Action.FocusSendMessageComposer,
        context: this.context.timelineRenderingType
      });
    });
    (0, _defineProperty2.default)(this, "saveStoredEditorState", () => {
      const item = _SendHistoryManager.default.createItem(this.model);

      this.clearPreviousEdit();
      localStorage.setItem(this.editorRoomKey, this.props.editState.getEvent().getId());
      localStorage.setItem(this.editorStateKey, JSON.stringify(item));
    });
    (0, _defineProperty2.default)(this, "sendEdit", async () => {
      const startTime = _CountlyAnalytics.default.getTimestamp();

      const editedEvent = this.props.editState.getEvent(); // Replace emoticon at the end of the message

      if (_SettingsStore.default.getValue('MessageComposerInput.autoReplaceEmoji')) {
        var _this$editorRef$curre6, _this$editorRef$curre7;

        const caret = (_this$editorRef$curre6 = this.editorRef.current) === null || _this$editorRef$curre6 === void 0 ? void 0 : _this$editorRef$curre6.getCaret();
        const position = this.model.positionForOffset(caret.offset, caret.atNodeEnd);
        (_this$editorRef$curre7 = this.editorRef.current) === null || _this$editorRef$curre7 === void 0 ? void 0 : _this$editorRef$curre7.replaceEmoticon(position, _BasicMessageComposer.REGEX_EMOTICON);
      }

      const editContent = createEditContent(this.model, editedEvent);
      const newContent = editContent["m.new_content"];
      let shouldSend = true;

      if ((newContent === null || newContent === void 0 ? void 0 : newContent.body) === '') {
        this.cancelPreviousPendingEdit();
        (0, _ConfirmRedactDialog.createRedactEventDialog)({
          mxEvent: editedEvent
        });
        return;
      } // If content is modified then send an updated event into the room


      if (this.isContentModified(newContent)) {
        const roomId = editedEvent.getRoomId();

        if (!(0, _serialize.containsEmote)(this.model) && this.isSlashCommand()) {
          const [cmd, args, commandText] = this.getSlashCommand();

          if (cmd) {
            if (cmd.category === _SlashCommands.CommandCategories.messages) {
              editContent["m.new_content"] = await this.runSlashCommand(cmd, args, roomId);
            } else {
              this.runSlashCommand(cmd, args, roomId);
              shouldSend = false;
            }
          } else {
            // ask the user if their unknown command should be sent as a message
            const {
              finished
            } = _Modal.default.createTrackedDialog("Unknown command", "", _QuestionDialog.default, {
              title: (0, _languageHandler._t)("Unknown Command"),
              description: /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Unrecognised command: %(commandText)s", {
                commandText
              })), /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("You can use <code>/help</code> to list available commands. " + "Did you mean to send this as a message?", {}, {
                code: t => /*#__PURE__*/_react.default.createElement("code", null, t)
              })), /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Hint: Begin your message with <code>//</code> to start it with a slash.", {}, {
                code: t => /*#__PURE__*/_react.default.createElement("code", null, t)
              }))),
              button: (0, _languageHandler._t)('Send as message')
            });

            const [sendAnyway] = await finished; // if !sendAnyway bail to let the user edit the composer and try again

            if (!sendAnyway) return;
          }
        }

        if (shouldSend) {
          this.cancelPreviousPendingEdit();
          const event = this.props.editState.getEvent();
          const threadId = event.threadRootId || null;
          const prom = this.props.mxClient.sendMessage(roomId, threadId, editContent);
          this.clearStoredEditorState();

          _dispatcher.default.dispatch({
            action: "message_sent"
          });

          _CountlyAnalytics.default.instance.trackSendMessage(startTime, prom, roomId, true, false, editContent);
        }
      } // close the event editing and focus composer


      _dispatcher.default.dispatch({
        action: _actions.Action.EditEvent,
        event: null,
        timelineRenderingType: this.context.timelineRenderingType
      });

      _dispatcher.default.dispatch({
        action: _actions.Action.FocusSendMessageComposer,
        context: this.context.timelineRenderingType
      });
    });
    (0, _defineProperty2.default)(this, "onChange", () => {
      var _this$editorRef$curre8;

      if (!this.state.saveDisabled || !((_this$editorRef$curre8 = this.editorRef.current) !== null && _this$editorRef$curre8 !== void 0 && _this$editorRef$curre8.isModified())) {
        return;
      }

      this.setState({
        saveDisabled: false
      });
    });
    (0, _defineProperty2.default)(this, "onAction", payload => {
      if (!this.editorRef.current) return;

      if (payload.action === _actions.Action.ComposerInsert) {
        if (payload.timelineRenderingType !== this.context.timelineRenderingType) return;
        if (payload.composerType !== _ComposerInsertPayload.ComposerType.Edit) return;

        if (payload.userId) {
          var _this$editorRef$curre9;

          (_this$editorRef$curre9 = this.editorRef.current) === null || _this$editorRef$curre9 === void 0 ? void 0 : _this$editorRef$curre9.insertMention(payload.userId);
        } else if (payload.event) {
          var _this$editorRef$curre10;

          (_this$editorRef$curre10 = this.editorRef.current) === null || _this$editorRef$curre10 === void 0 ? void 0 : _this$editorRef$curre10.insertQuotedMessage(payload.event);
        } else if (payload.text) {
          var _this$editorRef$curre11;

          (_this$editorRef$curre11 = this.editorRef.current) === null || _this$editorRef$curre11 === void 0 ? void 0 : _this$editorRef$curre11.insertPlaintext(payload.text);
        }
      } else if (payload.action === _actions.Action.FocusEditMessageComposer) {
        this.editorRef.current.focus();
      }
    });
    this.context = context; // otherwise React will only set it prior to render due to type def above

    const isRestored = this.createEditorModel();
    const ev = this.props.editState.getEvent();

    const _editContent = createEditContent(this.model, ev);

    this.state = {
      saveDisabled: !isRestored || !this.isContentModified(_editContent["m.new_content"])
    };
    window.addEventListener("beforeunload", this.saveStoredEditorState);
    this.dispatcherRef = _dispatcher.default.register(this.onAction);
  }

  getRoom() {
    return this.props.mxClient.getRoom(this.props.editState.getEvent().getRoomId());
  }

  get editorRoomKey() {
    return `mx_edit_room_${this.getRoom().roomId}_${this.context.timelineRenderingType}`;
  }

  get editorStateKey() {
    return `mx_edit_state_${this.props.editState.getEvent().getId()}`;
  }

  get events() {
    const liveTimelineEvents = this.context.liveTimeline.getEvents();
    const pendingEvents = this.getRoom().getPendingEvents();
    const isInThread = Boolean(this.props.editState.getEvent().getThread());
    return liveTimelineEvents.concat(isInThread ? [] : pendingEvents);
  }

  get shouldSaveStoredEditorState() {
    return localStorage.getItem(this.editorRoomKey) !== null;
  }

  restoreStoredEditorState(partCreator) {
    const json = localStorage.getItem(this.editorStateKey);

    if (json) {
      try {
        const {
          parts: serializedParts
        } = JSON.parse(json);
        const parts = serializedParts.map(p => partCreator.deserializePart(p));
        return parts;
      } catch (e) {
        _logger.logger.error("Error parsing editing state: ", e);
      }
    }
  }

  clearStoredEditorState() {
    localStorage.removeItem(this.editorRoomKey);
    localStorage.removeItem(this.editorStateKey);
  }

  clearPreviousEdit() {
    if (localStorage.getItem(this.editorRoomKey)) {
      localStorage.removeItem(`mx_edit_state_${localStorage.getItem(this.editorRoomKey)}`);
    }
  }

  isSlashCommand() {
    const parts = this.model.parts;
    const firstPart = parts[0];

    if (firstPart) {
      if (firstPart.type === _parts.Type.Command && firstPart.text.startsWith("/") && !firstPart.text.startsWith("//")) {
        return true;
      }

      if (firstPart.text.startsWith("/") && !firstPart.text.startsWith("//") && (firstPart.type === _parts.Type.Plain || firstPart.type === _parts.Type.PillCandidate)) {
        return true;
      }
    }

    return false;
  }

  isContentModified(newContent) {
    // if nothing has changed then bail
    const oldContent = this.props.editState.getEvent().getContent();

    if (oldContent["msgtype"] === newContent["msgtype"] && oldContent["body"] === newContent["body"] && oldContent["format"] === newContent["format"] && oldContent["formatted_body"] === newContent["formatted_body"]) {
      return false;
    }

    return true;
  }

  getSlashCommand() {
    const commandText = this.model.parts.reduce((text, part) => {
      // use mxid to textify user pills in a command
      if (part.type === _parts.Type.UserPill) {
        return text + part.resourceId;
      }

      return text + part.text;
    }, "");
    const {
      cmd,
      args
    } = (0, _SlashCommands.getCommand)(commandText);
    return [cmd, args, commandText];
  }

  async runSlashCommand(cmd, args, roomId) {
    var _this$props$editState, _this$props$editState2, _this$props$editState3;

    const threadId = ((_this$props$editState = this.props.editState) === null || _this$props$editState === void 0 ? void 0 : (_this$props$editState2 = _this$props$editState.getEvent()) === null || _this$props$editState2 === void 0 ? void 0 : (_this$props$editState3 = _this$props$editState2.getThread()) === null || _this$props$editState3 === void 0 ? void 0 : _this$props$editState3.id) || null;
    const result = cmd.run(roomId, threadId, args);
    let messageContent;
    let error = result.error;

    if (result.promise) {
      try {
        if (cmd.category === _SlashCommands.CommandCategories.messages) {
          messageContent = await result.promise;
        } else {
          await result.promise;
        }
      } catch (err) {
        error = err;
      }
    }

    if (error) {
      _logger.logger.error("Command failure: %s", error); // assume the error is a server error when the command is async


      const isServerError = !!result.promise;
      const title = isServerError ? (0, _languageHandler._td)("Server error") : (0, _languageHandler._td)("Command error");
      let errText;

      if (typeof error === 'string') {
        errText = error;
      } else if (error.message) {
        errText = error.message;
      } else {
        errText = (0, _languageHandler._t)("Server unavailable, overloaded, or something else went wrong.");
      }

      _Modal.default.createTrackedDialog(title, '', _ErrorDialog.default, {
        title: (0, _languageHandler._t)(title),
        description: errText
      });
    } else {
      _logger.logger.log("Command success.");

      if (messageContent) return messageContent;
    }
  }

  cancelPreviousPendingEdit() {
    const originalEvent = this.props.editState.getEvent();
    const previousEdit = originalEvent.replacingEvent();

    if (previousEdit && (previousEdit.status === _event.EventStatus.QUEUED || previousEdit.status === _event.EventStatus.NOT_SENT)) {
      this.props.mxClient.cancelPendingEvent(previousEdit);
    }
  }

  componentWillUnmount() {
    // store caret and serialized parts in the
    // editorstate so it can be restored when the remote echo event tile gets rendered
    // in case we're currently editing a pending event
    const sel = document.getSelection();
    let caret;

    if (sel.focusNode) {
      var _this$editorRef$curre12;

      caret = (0, _dom.getCaretOffsetAndText)((_this$editorRef$curre12 = this.editorRef.current) === null || _this$editorRef$curre12 === void 0 ? void 0 : _this$editorRef$curre12.editorRef.current, sel).caret;
    }

    const parts = this.model.serializeParts(); // if caret is undefined because for some reason there isn't a valid selection,
    // then when mounting the editor again with the same editor state,
    // it will set the cursor at the end.

    this.props.editState.setEditorState(caret, parts);
    window.removeEventListener("beforeunload", this.saveStoredEditorState);

    if (this.shouldSaveStoredEditorState) {
      this.saveStoredEditorState();
    }

    _dispatcher.default.unregister(this.dispatcherRef);
  }

  createEditorModel() {
    const {
      editState
    } = this.props;
    const room = this.getRoom();
    const partCreator = new _parts.CommandPartCreator(room, this.props.mxClient);
    let parts;
    let isRestored = false;

    if (editState.hasEditorState()) {
      // if restoring state from a previous editor,
      // restore serialized parts from the state
      parts = editState.getSerializedParts().map(p => partCreator.deserializePart(p));
    } else {
      // otherwise, either restore serialized parts from localStorage or parse the body of the event
      const restoredParts = this.restoreStoredEditorState(partCreator);
      parts = restoredParts || (0, _deserialize.parseEvent)(editState.getEvent(), partCreator);
      isRestored = !!restoredParts;
    }

    this.model = new _model.default(parts, partCreator);
    this.saveStoredEditorState();
    return isRestored;
  }

  render() {
    var _this$props$editState4, _this$props$editState5, _this$props$editState6;

    return /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)("mx_EditMessageComposer", this.props.className),
      onKeyDown: this.onKeyDown
    }, /*#__PURE__*/_react.default.createElement(_BasicMessageComposer.default, {
      ref: this.editorRef,
      model: this.model,
      room: this.getRoom(),
      threadId: (_this$props$editState4 = this.props.editState) === null || _this$props$editState4 === void 0 ? void 0 : (_this$props$editState5 = _this$props$editState4.getEvent()) === null || _this$props$editState5 === void 0 ? void 0 : (_this$props$editState6 = _this$props$editState5.getThread()) === null || _this$props$editState6 === void 0 ? void 0 : _this$props$editState6.id,
      initialCaret: this.props.editState.getCaret(),
      label: (0, _languageHandler._t)("Edit message"),
      onChange: this.onChange
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_EditMessageComposer_buttons"
    }, /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      kind: "secondary",
      onClick: this.cancelEdit
    }, (0, _languageHandler._t)("Cancel")), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      kind: "primary",
      onClick: this.sendEdit,
      disabled: this.state.saveDisabled
    }, (0, _languageHandler._t)("Save"))));
  }

}, (0, _defineProperty2.default)(_class2, "contextType", _RoomContext.default), _temp)) || _class);
const EditMessageComposerWithMatrixClient = (0, _MatrixClientContext.withMatrixClientHOC)(EditMessageComposer);
var _default = EditMessageComposerWithMatrixClient;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL3Jvb21zL0VkaXRNZXNzYWdlQ29tcG9zZXIudHN4Il0sIm5hbWVzIjpbImdldEh0bWxSZXBseUZhbGxiYWNrIiwibXhFdmVudCIsImh0bWwiLCJnZXRDb250ZW50IiwiZm9ybWF0dGVkX2JvZHkiLCJyb290Tm9kZSIsIkRPTVBhcnNlciIsInBhcnNlRnJvbVN0cmluZyIsImJvZHkiLCJteFJlcGx5IiwicXVlcnlTZWxlY3RvciIsIm91dGVySFRNTCIsImdldFRleHRSZXBseUZhbGxiYWNrIiwibGluZXMiLCJzcGxpdCIsIm1hcCIsImwiLCJ0cmltIiwibGVuZ3RoIiwic3RhcnRzV2l0aCIsImNyZWF0ZUVkaXRDb250ZW50IiwibW9kZWwiLCJlZGl0ZWRFdmVudCIsImlzRW1vdGUiLCJpc1JlcGx5IiwicmVwbHlFdmVudElkIiwicGxhaW5QcmVmaXgiLCJodG1sUHJlZml4IiwibmV3Q29udGVudCIsIk1zZ1R5cGUiLCJFbW90ZSIsIlRleHQiLCJjb250ZW50Qm9keSIsIm1zZ3R5cGUiLCJmb3JtYXR0ZWRCb2R5IiwiZm9yY2VIVE1MIiwiZm9ybWF0IiwicmVsYXRpb24iLCJnZXRJZCIsIk9iamVjdCIsImFzc2lnbiIsIkVkaXRNZXNzYWdlQ29tcG9zZXIiLCJSZWFjdCIsIkNvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwicHJvcHMiLCJjb250ZXh0IiwiZXZlbnQiLCJlZGl0b3JSZWYiLCJjdXJyZW50IiwiaXNDb21wb3NpbmciLCJhY3Rpb24iLCJnZXRNZXNzYWdlQ29tcG9zZXJBY3Rpb24iLCJNZXNzYWdlQ29tcG9zZXJBY3Rpb24iLCJTZW5kIiwic2VuZEVkaXQiLCJwcmV2ZW50RGVmYXVsdCIsIkNhbmNlbEVkaXRpbmciLCJjYW5jZWxFZGl0IiwiRWRpdFByZXZNZXNzYWdlIiwiaXNNb2RpZmllZCIsImlzQ2FyZXRBdFN0YXJ0IiwicHJldmlvdXNFdmVudCIsImV2ZW50cyIsImlzRm9yd2FyZCIsImZyb21FdmVudElkIiwiZWRpdFN0YXRlIiwiZ2V0RXZlbnQiLCJkaXMiLCJkaXNwYXRjaCIsIkFjdGlvbiIsIkVkaXRFdmVudCIsInRpbWVsaW5lUmVuZGVyaW5nVHlwZSIsIkVkaXROZXh0TWVzc2FnZSIsImlzQ2FyZXRBdEVuZCIsIm5leHRFdmVudCIsImNsZWFyU3RvcmVkRWRpdG9yU3RhdGUiLCJGb2N1c1NlbmRNZXNzYWdlQ29tcG9zZXIiLCJpdGVtIiwiU2VuZEhpc3RvcnlNYW5hZ2VyIiwiY3JlYXRlSXRlbSIsImNsZWFyUHJldmlvdXNFZGl0IiwibG9jYWxTdG9yYWdlIiwic2V0SXRlbSIsImVkaXRvclJvb21LZXkiLCJlZGl0b3JTdGF0ZUtleSIsIkpTT04iLCJzdHJpbmdpZnkiLCJzdGFydFRpbWUiLCJDb3VudGx5QW5hbHl0aWNzIiwiZ2V0VGltZXN0YW1wIiwiU2V0dGluZ3NTdG9yZSIsImdldFZhbHVlIiwiY2FyZXQiLCJnZXRDYXJldCIsInBvc2l0aW9uIiwicG9zaXRpb25Gb3JPZmZzZXQiLCJvZmZzZXQiLCJhdE5vZGVFbmQiLCJyZXBsYWNlRW1vdGljb24iLCJSRUdFWF9FTU9USUNPTiIsImVkaXRDb250ZW50Iiwic2hvdWxkU2VuZCIsImNhbmNlbFByZXZpb3VzUGVuZGluZ0VkaXQiLCJpc0NvbnRlbnRNb2RpZmllZCIsInJvb21JZCIsImdldFJvb21JZCIsImlzU2xhc2hDb21tYW5kIiwiY21kIiwiYXJncyIsImNvbW1hbmRUZXh0IiwiZ2V0U2xhc2hDb21tYW5kIiwiY2F0ZWdvcnkiLCJDb21tYW5kQ2F0ZWdvcmllcyIsIm1lc3NhZ2VzIiwicnVuU2xhc2hDb21tYW5kIiwiZmluaXNoZWQiLCJNb2RhbCIsImNyZWF0ZVRyYWNrZWREaWFsb2ciLCJRdWVzdGlvbkRpYWxvZyIsInRpdGxlIiwiZGVzY3JpcHRpb24iLCJjb2RlIiwidCIsImJ1dHRvbiIsInNlbmRBbnl3YXkiLCJ0aHJlYWRJZCIsInRocmVhZFJvb3RJZCIsInByb20iLCJteENsaWVudCIsInNlbmRNZXNzYWdlIiwiaW5zdGFuY2UiLCJ0cmFja1NlbmRNZXNzYWdlIiwic3RhdGUiLCJzYXZlRGlzYWJsZWQiLCJzZXRTdGF0ZSIsInBheWxvYWQiLCJDb21wb3Nlckluc2VydCIsImNvbXBvc2VyVHlwZSIsIkNvbXBvc2VyVHlwZSIsIkVkaXQiLCJ1c2VySWQiLCJpbnNlcnRNZW50aW9uIiwiaW5zZXJ0UXVvdGVkTWVzc2FnZSIsInRleHQiLCJpbnNlcnRQbGFpbnRleHQiLCJGb2N1c0VkaXRNZXNzYWdlQ29tcG9zZXIiLCJmb2N1cyIsImlzUmVzdG9yZWQiLCJjcmVhdGVFZGl0b3JNb2RlbCIsImV2Iiwid2luZG93IiwiYWRkRXZlbnRMaXN0ZW5lciIsInNhdmVTdG9yZWRFZGl0b3JTdGF0ZSIsImRpc3BhdGNoZXJSZWYiLCJyZWdpc3RlciIsIm9uQWN0aW9uIiwiZ2V0Um9vbSIsImxpdmVUaW1lbGluZUV2ZW50cyIsImxpdmVUaW1lbGluZSIsImdldEV2ZW50cyIsInBlbmRpbmdFdmVudHMiLCJnZXRQZW5kaW5nRXZlbnRzIiwiaXNJblRocmVhZCIsIkJvb2xlYW4iLCJnZXRUaHJlYWQiLCJjb25jYXQiLCJzaG91bGRTYXZlU3RvcmVkRWRpdG9yU3RhdGUiLCJnZXRJdGVtIiwicmVzdG9yZVN0b3JlZEVkaXRvclN0YXRlIiwicGFydENyZWF0b3IiLCJqc29uIiwicGFydHMiLCJzZXJpYWxpemVkUGFydHMiLCJwYXJzZSIsInAiLCJkZXNlcmlhbGl6ZVBhcnQiLCJlIiwibG9nZ2VyIiwiZXJyb3IiLCJyZW1vdmVJdGVtIiwiZmlyc3RQYXJ0IiwidHlwZSIsIlR5cGUiLCJDb21tYW5kIiwiUGxhaW4iLCJQaWxsQ2FuZGlkYXRlIiwib2xkQ29udGVudCIsInJlZHVjZSIsInBhcnQiLCJVc2VyUGlsbCIsInJlc291cmNlSWQiLCJpZCIsInJlc3VsdCIsInJ1biIsIm1lc3NhZ2VDb250ZW50IiwicHJvbWlzZSIsImVyciIsImlzU2VydmVyRXJyb3IiLCJlcnJUZXh0IiwibWVzc2FnZSIsIkVycm9yRGlhbG9nIiwibG9nIiwib3JpZ2luYWxFdmVudCIsInByZXZpb3VzRWRpdCIsInJlcGxhY2luZ0V2ZW50Iiwic3RhdHVzIiwiRXZlbnRTdGF0dXMiLCJRVUVVRUQiLCJOT1RfU0VOVCIsImNhbmNlbFBlbmRpbmdFdmVudCIsImNvbXBvbmVudFdpbGxVbm1vdW50Iiwic2VsIiwiZG9jdW1lbnQiLCJnZXRTZWxlY3Rpb24iLCJmb2N1c05vZGUiLCJzZXJpYWxpemVQYXJ0cyIsInNldEVkaXRvclN0YXRlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInVucmVnaXN0ZXIiLCJyb29tIiwiQ29tbWFuZFBhcnRDcmVhdG9yIiwiaGFzRWRpdG9yU3RhdGUiLCJnZXRTZXJpYWxpemVkUGFydHMiLCJyZXN0b3JlZFBhcnRzIiwiRWRpdG9yTW9kZWwiLCJyZW5kZXIiLCJjbGFzc05hbWUiLCJvbktleURvd24iLCJvbkNoYW5nZSIsIlJvb21Db250ZXh0IiwiRWRpdE1lc3NhZ2VDb21wb3NlcldpdGhNYXRyaXhDbGllbnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBZ0JBOztBQUNBOztBQUNBOztBQUVBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUVBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUVBOztBQUNBOztBQUVBOztBQUNBOztBQUNBOztBQUVBOztBQUNBOztBQUNBOztBQUNBOzs7Ozs7OztBQUVBLFNBQVNBLG9CQUFULENBQThCQyxPQUE5QixFQUE0RDtBQUN4RCxRQUFNQyxJQUFJLEdBQUdELE9BQU8sQ0FBQ0UsVUFBUixHQUFxQkMsY0FBbEM7O0FBQ0EsTUFBSSxDQUFDRixJQUFMLEVBQVc7QUFDUCxXQUFPLEVBQVA7QUFDSDs7QUFDRCxRQUFNRyxRQUFRLEdBQUcsSUFBSUMsU0FBSixHQUFnQkMsZUFBaEIsQ0FBZ0NMLElBQWhDLEVBQXNDLFdBQXRDLEVBQW1ETSxJQUFwRTtBQUNBLFFBQU1DLE9BQU8sR0FBR0osUUFBUSxDQUFDSyxh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QUUsS0FBS25KLEtBQUwsQ0FBV3FCLFNBQVgsQ0FBcUI0QixRQUFyQixFQUxsQjtBQU1JLE1BQUEsS0FBSyxFQUFFLHlCQUFHLGNBQUgsQ0FOWDtBQU9JLE1BQUEsUUFBUSxFQUFFLEtBQUt1STtBQVBuQixNQURJLGVBVUo7QUFBSyxNQUFBLFNBQVMsRUFBQztBQUFmLG9CQUNJLDZCQUFDLHlCQUFEO0FBQWtCLE1BQUEsSUFBSSxFQUFDLFdBQXZCO0FBQW1DLE1BQUEsT0FBTyxFQUFFLEtBQUszSztBQUFqRCxPQUNNLHlCQUFHLFFBQUgsQ0FETixDQURKLGVBSUksNkJBQUMseUJBQUQ7QUFBa0IsTUFBQSxJQUFJLEVBQUMsU0FBdkI7QUFBaUMsTUFBQSxPQUFPLEVBQUUsS0FBS0gsUUFBL0M7QUFBeUQsTUFBQSxRQUFRLEVBQUUsS0FBSzhFLEtBQUwsQ0FBV0M7QUFBOUUsT0FDTSx5QkFBRyxNQUFILENBRE4sQ0FKSixDQVZJLENBQVI7QUFtQkg7O0FBN2FnRixDLHdEQUM1RGdHLG9CO0FBK2F6QixNQUFNQyxtQ0FBbUMsR0FBRyw4Q0FBb0I5TCxtQkFBcEIsQ0FBNUM7ZUFDZThMLG1DIiwic291cmNlc0NvbnRlbnQiOlsiLypcbkNvcHlyaWdodCAyMDE5IC0gMjAyMSBUaGUgTWF0cml4Lm9yZyBGb3VuZGF0aW9uIEMuSS5DLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbmltcG9ydCBSZWFjdCwgeyBjcmVhdGVSZWYsIEtleWJvYXJkRXZlbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCB7IEV2ZW50U3RhdHVzLCBJQ29udGVudCwgTWF0cml4RXZlbnQgfSBmcm9tICdtYXRyaXgtanMtc2RrL3NyYy9tb2RlbHMvZXZlbnQnO1xuXG5pbXBvcnQgeyBfdCwgX3RkIH0gZnJvbSAnLi4vLi4vLi4vbGFuZ3VhZ2VIYW5kbGVyJztcbmltcG9ydCBkaXMgZnJvbSAnLi4vLi4vLi4vZGlzcGF0Y2hlci9kaXNwYXRjaGVyJztcbmltcG9ydCBFZGl0b3JNb2RlbCBmcm9tICcuLi8uLi8uLi9lZGl0b3IvbW9kZWwnO1xuaW1wb3J0IHsgZ2V0Q2FyZXRPZmZzZXRBbmRUZXh0IH0gZnJvbSAnLi4vLi4vLi4vZWRpdG9yL2RvbSc7XG5pbXBvcnQgeyBodG1sU2VyaWFsaXplSWZOZWVkZWQsIHRleHRTZXJpYWxpemUsIGNvbnRhaW5zRW1vdGUsIHN0cmlwRW1vdGVDb21tYW5kIH0gZnJvbSAnLi4vLi4vLi4vZWRpdG9yL3NlcmlhbGl6ZSc7XG5pbXBvcnQgeyBmaW5kRWRpdGFibGVFdmVudCB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL0V2ZW50VXRpbHMnO1xuaW1wb3J0IHsgcGFyc2VFdmVudCB9IGZyb20gJy4uLy4uLy4uL2VkaXRvci9kZXNlcmlhbGl6ZSc7XG5pbXBvcnQgeyBDb21tYW5kUGFydENyZWF0b3IsIFBhcnQsIFBhcnRDcmVhdG9yLCBUeXBlIH0gZnJvbSAnLi4vLi4vLi4vZWRpdG9yL3BhcnRzJztcbmltcG9ydCBFZGl0b3JTdGF0ZVRyYW5zZmVyIGZyb20gJy4uLy4uLy4uL3V0aWxzL0VkaXRvclN0YXRlVHJhbnNmZXInO1xuaW1wb3J0IEJhc2ljTWVzc2FnZUNvbXBvc2VyLCB7IFJFR0VYX0VNT1RJQ09OIH0gZnJvbSBcIi4vQmFzaWNNZXNzYWdlQ29tcG9zZXJcIjtcbmltcG9ydCB7IENvbW1hbmQsIENvbW1hbmRDYXRlZ29yaWVzLCBnZXRDb21tYW5kIH0gZnJvbSAnLi4vLi4vLi4vU2xhc2hDb21tYW5kcyc7XG5pbXBvcnQgeyBBY3Rpb24gfSBmcm9tIFwiLi4vLi4vLi4vZGlzcGF0Y2hlci9hY3Rpb25zXCI7XG5pbXBvcnQgQ291bnRseUFuYWx5dGljcyBmcm9tIFwiLi4vLi4vLi4vQ291bnRseUFuYWx5dGljc1wiO1xuaW1wb3J0IHsgZ2V0S2V5QmluZGluZ3NNYW5hZ2VyLCBNZXNzYWdlQ29tcG9zZXJBY3Rpb24gfSBmcm9tICcuLi8uLi8uLi9LZXlCaW5kaW5nc01hbmFnZXInO1xuaW1wb3J0IHsgcmVwbGFjZWFibGVDb21wb25lbnQgfSBmcm9tIFwiLi4vLi4vLi4vdXRpbHMvcmVwbGFjZWFibGVDb21wb25lbnRcIjtcbmltcG9ydCBTZW5kSGlzdG9yeU1hbmFnZXIgZnJvbSAnLi4vLi4vLi4vU2VuZEhpc3RvcnlNYW5hZ2VyJztcbmltcG9ydCBNb2RhbCBmcm9tICcuLi8uLi8uLi9Nb2RhbCc7XG5pbXBvcnQgeyBNc2dUeXBlIH0gZnJvbSAnbWF0cml4LWpzLXNkay9zcmMvQHR5cGVzL2V2ZW50JztcbmltcG9ydCB7IFJvb20gfSBmcm9tICdtYXRyaXgtanMtc2RrL3NyYy9tb2RlbHMvcm9vbSc7XG5pbXBvcnQgRXJyb3JEaWFsb2cgZnJvbSBcIi4uL2RpYWxvZ3MvRXJyb3JEaWFsb2dcIjtcbmltcG9ydCBRdWVzdGlvbkRpYWxvZyBmcm9tIFwiLi4vZGlhbG9ncy9RdWVzdGlvbkRpYWxvZ1wiO1xuaW1wb3J0IHsgQWN0aW9uUGF5bG9hZCB9IGZyb20gXCIuLi8uLi8uLi9kaXNwYXRjaGVyL3BheWxvYWRzXCI7XG5pbXBvcnQgQWNjZXNzaWJsZUJ1dHRvbiBmcm9tICcuLi9lbGVtZW50cy9BY2Nlc3NpYmxlQnV0dG9uJztcbmltcG9ydCB7IGNyZWF0ZVJlZGFjdEV2ZW50RGlhbG9nIH0gZnJvbSAnLi4vZGlhbG9ncy9Db25maXJtUmVkYWN0RGlhbG9nJztcbmltcG9ydCBTZXR0aW5nc1N0b3JlIGZyb20gXCIuLi8uLi8uLi9zZXR0aW5ncy9TZXR0aW5nc1N0b3JlXCI7XG5cbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gXCJtYXRyaXgtanMtc2RrL3NyYy9sb2dnZXJcIjtcbmltcG9ydCB7IHdpdGhNYXRyaXhDbGllbnRIT0MsIE1hdHJpeENsaWVudFByb3BzIH0gZnJvbSAnLi4vLi4vLi4vY29udGV4dHMvTWF0cml4Q2xpZW50Q29udGV4dCc7XG5pbXBvcnQgUm9vbUNvbnRleHQgZnJvbSAnLi4vLi4vLi4vY29udGV4dHMvUm9vbUNvbnRleHQnO1xuaW1wb3J0IHsgQ29tcG9zZXJUeXBlIH0gZnJvbSBcIi4uLy4uLy4uL2Rpc3BhdGNoZXIvcGF5bG9hZHMvQ29tcG9zZXJJbnNlcnRQYXlsb2FkXCI7XG5cbmZ1bmN0aW9uIGdldEh0bWxSZXBseUZhbGxiYWNrKG14RXZlbnQ6IE1hdHJpeEV2ZW50KTogc3RyaW5nIHtcbiAgICBjb25zdCBodG1sID0gbXhFdmVudC5nZXRDb250ZW50KCkuZm9ybWF0dGVkX2JvZHk7XG4gICAgaWYgKCFodG1sKSB7XG4gICAgICAgIHJldHVybiBcIlwiO1xuICAgIH1cbiAgICBjb25zdCByb290Tm9kZSA9IG5ldyBET01QYXJzZXIoKS5wYXJzZUZyb21TdHJpbmcoaHRtbCwgXCJ0ZXh0L2h0bWxcIikuYm9keTtcbiAgICBjb25zdCBteFJlcGx5ID0gcm9vdE5vZGUucXVlcnlTZWxlY3RvcihcIm14LXJlcGx5XCIpO1xuICAgIHJldHVybiAobXhSZXBseSAmJiBteFJlcGx5Lm91dGVySFRNTCkgfHwgXCJcIjtcbn1cblxuZnVuY3Rpb24gZ2V0VGV4dFJlcGx5RmFsbGJhY2sobXhFdmVudDogTWF0cml4RXZlbnQpOiBzdHJpbmcge1xuICAgIGNvbnN0IGJvZHkgPSBteEV2ZW50LmdldENvbnRlbnQoKS5ib2R5O1xuICAgIGNvbnN0IGxpbmVzID0gYm9keS5zcGxpdChcIlxcblwiKS5tYXAobCA9PiBsLnRyaW0oKSk7XG4gICAgaWYgKGxpbmVzLmxlbmd0aCA+IDIgJiYgbGluZXNbMF0uc3RhcnRzV2l0aChcIj4gXCIpICYmIGxpbmVzWzFdLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gYCR7bGluZXNbMF19XFxuXFxuYDtcbiAgICB9XG4gICAgcmV0dXJuIFwiXCI7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUVkaXRDb250ZW50KFxuICAgIG1vZGVsOiBFZGl0b3JNb2RlbCxcbiAgICBlZGl0ZWRFdmVudDogTWF0cml4RXZlbnQsXG4pOiBJQ29udGVudCB7XG4gICAgY29uc3QgaXNFbW90ZSA9IGNvbnRhaW5zRW1vdGUobW9kZWwpO1xuICAgIGlmIChpc0Vtb3RlKSB7XG4gICAgICAgIG1vZGVsID0gc3RyaXBFbW90ZUNvbW1hbmQobW9kZWwpO1xuICAgIH1cbiAgICBjb25zdCBpc1JlcGx5ID0gISFlZGl0ZWRFdmVudC5yZXBseUV2ZW50SWQ7XG4gICAgbGV0IHBsYWluUHJlZml4ID0gXCJcIjtcbiAgICBsZXQgaHRtbFByZWZpeCA9IFwiXCI7XG5cbiAgICBpZiAoaXNSZXBseSkge1xuICAgICAgICBwbGFpblByZWZpeCA9IGdldFRleHRSZXBseUZhbGxiYWNrKGVkaXRlZEV2ZW50KTtcbiAgICAgICAgaHRtbFByZWZpeCA9IGdldEh0bWxSZXBseUZhbGxiYWNrKGVkaXRlZEV2ZW50KTtcbiAgICB9XG5cbiAgICBjb25zdCBib2R5ID0gdGV4dFNlcmlhbGl6ZShtb2RlbCk7XG5cbiAgICBjb25zdCBuZXdDb250ZW50OiBJQ29udGVudCA9IHtcbiAgICAgICAgXCJtc2d0eXBlXCI6IGlzRW1vdGUgPyBNc2dUeXBlLkVtb3RlIDogTXNnVHlwZS5UZXh0LFxuICAgICAgICBcImJvZHlcIjogYm9keSxcbiAgICB9O1xuICAgIGNvbnN0IGNvbnRlbnRCb2R5OiBJQ29udGVudCA9IHtcbiAgICAgICAgbXNndHlwZTogbmV3Q29udGVudC5tc2d0eXBlLFxuICAgICAgICBib2R5OiBgJHtwbGFpblByZWZpeH0gKiAke2JvZHl9YCxcbiAgICB9O1xuXG4gICAgY29uc3QgZm9ybWF0dGVkQm9keSA9IGh0bWxTZXJpYWxpemVJZk5lZWRlZChtb2RlbCwgeyBmb3JjZUhUTUw6IGlzUmVwbHkgfSk7XG4gICAgaWYgKGZvcm1hdHRlZEJvZHkpIHtcbiAgICAgICAgbmV3Q29udGVudC5mb3JtYXQgPSBcIm9yZy5tYXRyaXguY3VzdG9tLmh0bWxcIjtcbiAgICAgICAgbmV3Q29udGVudC5mb3JtYXR0ZWRfYm9keSA9IGZvcm1hdHRlZEJvZHk7XG4gICAgICAgIGNvbnRlbnRCb2R5LmZvcm1hdCA9IG5ld0NvbnRlbnQuZm9ybWF0O1xuICAgICAgICBjb250ZW50Qm9keS5mb3JtYXR0ZWRfYm9keSA9IGAke2h0bWxQcmVmaXh9ICogJHtmb3JtYXR0ZWRCb2R5fWA7XG4gICAgfVxuXG4gICAgY29uc3QgcmVsYXRpb24gPSB7XG4gICAgICAgIFwibS5uZXdfY29udGVudFwiOiBuZXdDb250ZW50LFxuICAgICAgICBcIm0ucmVsYXRlc190b1wiOiB7XG4gICAgICAgICAgICBcInJlbF90eXBlXCI6IFwibS5yZXBsYWNlXCIsXG4gICAgICAgICAgICBcImV2ZW50X2lkXCI6IGVkaXRlZEV2ZW50LmdldElkKCksXG4gICAgICAgIH0sXG4gICAgfTtcblxuICAgIHJldHVybiBPYmplY3QuYXNzaWduKHJlbGF0aW9uLCBjb250ZW50Qm9keSk7XG59XG5cbmludGVyZmFjZSBJRWRpdE1lc3NhZ2VDb21wb3NlclByb3BzIGV4dGVuZHMgTWF0cml4Q2xpZW50UHJvcHMge1xuICAgIGVkaXRTdGF0ZTogRWRpdG9yU3RhdGVUcmFuc2ZlcjtcbiAgICBjbGFzc05hbWU/OiBzdHJpbmc7XG59XG5pbnRlcmZhY2UgSVN0YXRlIHtcbiAgICBzYXZlRGlzYWJsZWQ6IGJvb2xlYW47XG59XG5cbkByZXBsYWNlYWJsZUNvbXBvbmVudChcInZpZXdzLnJvb21zLkVkaXRNZXNzYWdlQ29tcG9zZXJcIilcbmNsYXNzIEVkaXRNZXNzYWdlQ29tcG9zZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8SUVkaXRNZXNzYWdlQ29tcG9zZXJQcm9wcywgSVN0YXRlPiB7XG4gICAgc3RhdGljIGNvbnRleHRUeXBlID0gUm9vbUNvbnRleHQ7XG4gICAgY29udGV4dCE6IFJlYWN0LkNvbnRleHRUeXBlPHR5cGVvZiBSb29tQ29udGV4dD47XG5cbiAgICBwcml2YXRlIHJlYWRvbmx5IGVkaXRvclJlZiA9IGNyZWF0ZVJlZjxCYXNpY01lc3NhZ2VDb21wb3Nlcj4oKTtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGRpc3BhdGNoZXJSZWY6IHN0cmluZztcbiAgICBwcml2YXRlIG1vZGVsOiBFZGl0b3JNb2RlbCA9IG51bGw7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm9wczogSUVkaXRNZXNzYWdlQ29tcG9zZXJQcm9wcywgY29udGV4dDogUmVhY3QuQ29udGV4dFR5cGU8dHlwZW9mIFJvb21Db250ZXh0Pikge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7IC8vIG90aGVyd2lzZSBSZWFjdCB3aWxsIG9ubHkgc2V0IGl0IHByaW9yIHRvIHJlbmRlciBkdWUgdG8gdHlwZSBkZWYgYWJvdmVcblxuICAgICAgICBjb25zdCBpc1Jlc3RvcmVkID0gdGhpcy5jcmVhdGVFZGl0b3JNb2RlbCgpO1xuICAgICAgICBjb25zdCBldiA9IHRoaXMucHJvcHMuZWRpdFN0YXRlLmdldEV2ZW50KCk7XG5cbiAgICAgICAgY29uc3QgZWRpdENvbnRlbnQgPSBjcmVhdGVFZGl0Q29udGVudCh0aGlzLm1vZGVsLCBldik7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBzYXZlRGlzYWJsZWQ6ICFpc1Jlc3RvcmVkIHx8ICF0aGlzLmlzQ29udGVudE1vZGlmaWVkKGVkaXRDb250ZW50W1wibS5uZXdfY29udGVudFwiXSksXG4gICAgICAgIH07XG5cbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJiZWZvcmV1bmxvYWRcIiwgdGhpcy5zYXZlU3RvcmVkRWRpdG9yU3RhdGUpO1xuICAgICAgICB0aGlzLmRpc3BhdGNoZXJSZWYgPSBkaXMucmVnaXN0ZXIodGhpcy5vbkFjdGlvbik7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRSb29tKCk6IFJvb20ge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5teENsaWVudC5nZXRSb29tKHRoaXMucHJvcHMuZWRpdFN0YXRlLmdldEV2ZW50KCkuZ2V0Um9vbUlkKCkpO1xuICAgIH1cblxuICAgIHByaXZhdGUgb25LZXlEb3duID0gKGV2ZW50OiBLZXlib2FyZEV2ZW50KTogdm9pZCA9PiB7XG4gICAgICAgIC8vIGlnbm9yZSBhbnkga2V5cHJlc3Mgd2hpbGUgZG9pbmcgSU1FIGNvbXBvc2l0aW9uc1xuICAgICAgICBpZiAodGhpcy5lZGl0b3JSZWYuY3VycmVudD8uaXNDb21wb3NpbmcoZXZlbnQpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYWN0aW9uID0gZ2V0S2V5QmluZGluZ3NNYW5hZ2VyKCkuZ2V0TWVzc2FnZUNvbXBvc2VyQWN0aW9uKGV2ZW50KTtcbiAgICAgICAgc3dpdGNoIChhY3Rpb24pIHtcbiAgICAgICAgICAgIGNhc2UgTWVzc2FnZUNvbXBvc2VyQWN0aW9uLlNlbmQ6XG4gICAgICAgICAgICAgICAgdGhpcy5zZW5kRWRpdCgpO1xuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIE1lc3NhZ2VDb21wb3NlckFjdGlvbi5DYW5jZWxFZGl0aW5nOlxuICAgICAgICAgICAgICAgIHRoaXMuY2FuY2VsRWRpdCgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBNZXNzYWdlQ29tcG9zZXJBY3Rpb24uRWRpdFByZXZNZXNzYWdlOiB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZWRpdG9yUmVmLmN1cnJlbnQ/LmlzTW9kaWZpZWQoKSB8fCAhdGhpcy5lZGl0b3JSZWYuY3VycmVudD8uaXNDYXJldEF0U3RhcnQoKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IHByZXZpb3VzRXZlbnQgPSBmaW5kRWRpdGFibGVFdmVudCh7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50czogdGhpcy5ldmVudHMsXG4gICAgICAgICAgICAgICAgICAgIGlzRm9yd2FyZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGZyb21FdmVudElkOiB0aGlzLnByb3BzLmVkaXRTdGF0ZS5nZXRFdmVudCgpLmdldElkKCksXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaWYgKHByZXZpb3VzRXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgZGlzLmRpc3BhdGNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbjogQWN0aW9uLkVkaXRFdmVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50OiBwcmV2aW91c0V2ZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgdGltZWxpbmVSZW5kZXJpbmdUeXBlOiB0aGlzLmNvbnRleHQudGltZWxpbmVSZW5kZXJpbmdUeXBlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIE1lc3NhZ2VDb21wb3NlckFjdGlvbi5FZGl0TmV4dE1lc3NhZ2U6IHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5lZGl0b3JSZWYuY3VycmVudD8uaXNNb2RpZmllZCgpIHx8ICF0aGlzLmVkaXRvclJlZi5jdXJyZW50Py5pc0NhcmV0QXRFbmQoKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IG5leHRFdmVudCA9IGZpbmRFZGl0YWJsZUV2ZW50KHtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnRzOiB0aGlzLmV2ZW50cyxcbiAgICAgICAgICAgICAgICAgICAgaXNGb3J3YXJkOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBmcm9tRXZlbnRJZDogdGhpcy5wcm9wcy5lZGl0U3RhdGUuZ2V0RXZlbnQoKS5nZXRJZCgpLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmIChuZXh0RXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgZGlzLmRpc3BhdGNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbjogQWN0aW9uLkVkaXRFdmVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50OiBuZXh0RXZlbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aW1lbGluZVJlbmRlcmluZ1R5cGU6IHRoaXMuY29udGV4dC50aW1lbGluZVJlbmRlcmluZ1R5cGUsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2xlYXJTdG9yZWRFZGl0b3JTdGF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICBkaXMuZGlzcGF0Y2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiBBY3Rpb24uRWRpdEV2ZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQ6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aW1lbGluZVJlbmRlcmluZ1R5cGU6IHRoaXMuY29udGV4dC50aW1lbGluZVJlbmRlcmluZ1R5cGUsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBkaXMuZGlzcGF0Y2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiBBY3Rpb24uRm9jdXNTZW5kTWVzc2FnZUNvbXBvc2VyLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dDogdGhpcy5jb250ZXh0LnRpbWVsaW5lUmVuZGVyaW5nVHlwZSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcHJpdmF0ZSBnZXQgZWRpdG9yUm9vbUtleSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gYG14X2VkaXRfcm9vbV8ke3RoaXMuZ2V0Um9vbSgpLnJvb21JZH1fJHt0aGlzLmNvbnRleHQudGltZWxpbmVSZW5kZXJpbmdUeXBlfWA7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXQgZWRpdG9yU3RhdGVLZXkoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIGBteF9lZGl0X3N0YXRlXyR7dGhpcy5wcm9wcy5lZGl0U3RhdGUuZ2V0RXZlbnQoKS5nZXRJZCgpfWA7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXQgZXZlbnRzKCk6IE1hdHJpeEV2ZW50W10ge1xuICAgICAgICBjb25zdCBsaXZlVGltZWxpbmVFdmVudHMgPSB0aGlzLmNvbnRleHQubGl2ZVRpbWVsaW5lLmdldEV2ZW50cygpO1xuICAgICAgICBjb25zdCBwZW5kaW5nRXZlbnRzID0gdGhpcy5nZXRSb29tKCkuZ2V0UGVuZGluZ0V2ZW50cygpO1xuICAgICAgICBjb25zdCBpc0luVGhyZWFkID0gQm9vbGVhbih0aGlzLnByb3BzLmVkaXRTdGF0ZS5nZXRFdmVudCgpLmdldFRocmVhZCgpKTtcbiAgICAgICAgcmV0dXJuIGxpdmVUaW1lbGluZUV2ZW50cy5jb25jYXQoaXNJblRocmVhZCA/IFtdIDogcGVuZGluZ0V2ZW50cyk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjYW5jZWxFZGl0ID0gKCk6IHZvaWQgPT4ge1xuICAgICAgICB0aGlzLmNsZWFyU3RvcmVkRWRpdG9yU3RhdGUoKTtcbiAgICAgICAgZGlzLmRpc3BhdGNoKHtcbiAgICAgICAgICAgIGFjdGlvbjogQWN0aW9uLkVkaXRFdmVudCxcbiAgICAgICAgICAgIGV2ZW50OiBudWxsLFxuICAgICAgICAgICAgdGltZWxpbmVSZW5kZXJpbmdUeXBlOiB0aGlzLmNvbnRleHQudGltZWxpbmVSZW5kZXJpbmdUeXBlLFxuICAgICAgICB9KTtcbiAgICAgICAgZGlzLmRpc3BhdGNoKHtcbiAgICAgICAgICAgIGFjdGlvbjogQWN0aW9uLkZvY3VzU2VuZE1lc3NhZ2VDb21wb3NlcixcbiAgICAgICAgICAgIGNvbnRleHQ6IHRoaXMuY29udGV4dC50aW1lbGluZVJlbmRlcmluZ1R5cGUsXG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBwcml2YXRlIGdldCBzaG91bGRTYXZlU3RvcmVkRWRpdG9yU3RhdGUoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSh0aGlzLmVkaXRvclJvb21LZXkpICE9PSBudWxsO1xuICAgIH1cblxuICAgIHByaXZhdGUgcmVzdG9yZVN0b3JlZEVkaXRvclN0YXRlKHBhcnRDcmVhdG9yOiBQYXJ0Q3JlYXRvcik6IFBhcnRbXSB7XG4gICAgICAgIGNvbnN0IGpzb24gPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSh0aGlzLmVkaXRvclN0YXRlS2V5KTtcbiAgICAgICAgaWYgKGpzb24pIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBwYXJ0czogc2VyaWFsaXplZFBhcnRzIH0gPSBKU09OLnBhcnNlKGpzb24pO1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhcnRzOiBQYXJ0W10gPSBzZXJpYWxpemVkUGFydHMubWFwKHAgPT4gcGFydENyZWF0b3IuZGVzZXJpYWxpemVQYXJ0KHApKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFydHM7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKFwiRXJyb3IgcGFyc2luZyBlZGl0aW5nIHN0YXRlOiBcIiwgZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGNsZWFyU3RvcmVkRWRpdG9yU3RhdGUoKTogdm9pZCB7XG4gICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKHRoaXMuZWRpdG9yUm9vbUtleSk7XG4gICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKHRoaXMuZWRpdG9yU3RhdGVLZXkpO1xuICAgIH1cblxuICAgIHByaXZhdGUgY2xlYXJQcmV2aW91c0VkaXQoKTogdm9pZCB7XG4gICAgICAgIGlmIChsb2NhbFN0b3JhZ2UuZ2V0SXRlbSh0aGlzLmVkaXRvclJvb21LZXkpKSB7XG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShgbXhfZWRpdF9zdGF0ZV8ke2xvY2FsU3RvcmFnZS5nZXRJdGVtKHRoaXMuZWRpdG9yUm9vbUtleSl9YCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHNhdmVTdG9yZWRFZGl0b3JTdGF0ZSA9ICgpOiB2b2lkID0+IHtcbiAgICAgICAgY29uc3QgaXRlbSA9IFNlbmRIaXN0b3J5TWFuYWdlci5jcmVhdGVJdGVtKHRoaXMubW9kZWwpO1xuICAgICAgICB0aGlzLmNsZWFyUHJldmlvdXNFZGl0KCk7XG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKHRoaXMuZWRpdG9yUm9vbUtleSwgdGhpcy5wcm9wcy5lZGl0U3RhdGUuZ2V0RXZlbnQoKS5nZXRJZCgpKTtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0odGhpcy5lZGl0b3JTdGF0ZUtleSwgSlNPTi5zdHJpbmdpZnkoaXRlbSkpO1xuICAgIH07XG5cbiAgICBwcml2YXRlIGlzU2xhc2hDb21tYW5kKCk6IGJvb2xlYW4ge1xuICAgICAgICBjb25zdCBwYXJ0cyA9IHRoaXMubW9kZWwucGFydHM7XG4gICAgICAgIGNvbnN0IGZpcnN0UGFydCA9IHBhcnRzWzBdO1xuICAgICAgICBpZiAoZmlyc3RQYXJ0KSB7XG4gICAgICAgICAgICBpZiAoZmlyc3RQYXJ0LnR5cGUgPT09IFR5cGUuQ29tbWFuZCAmJiBmaXJzdFBhcnQudGV4dC5zdGFydHNXaXRoKFwiL1wiKSAmJiAhZmlyc3RQYXJ0LnRleHQuc3RhcnRzV2l0aChcIi8vXCIpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChmaXJzdFBhcnQudGV4dC5zdGFydHNXaXRoKFwiL1wiKSAmJiAhZmlyc3RQYXJ0LnRleHQuc3RhcnRzV2l0aChcIi8vXCIpXG4gICAgICAgICAgICAgICAgJiYgKGZpcnN0UGFydC50eXBlID09PSBUeXBlLlBsYWluIHx8IGZpcnN0UGFydC50eXBlID09PSBUeXBlLlBpbGxDYW5kaWRhdGUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHByaXZhdGUgaXNDb250ZW50TW9kaWZpZWQobmV3Q29udGVudDogSUNvbnRlbnQpOiBib29sZWFuIHtcbiAgICAgICAgLy8gaWYgbm90aGluZyBoYXMgY2hhbmdlZCB0aGVuIGJhaWxcbiAgICAgICAgY29uc3Qgb2xkQ29udGVudCA9IHRoaXMucHJvcHMuZWRpdFN0YXRlLmdldEV2ZW50KCkuZ2V0Q29udGVudCgpO1xuICAgICAgICBpZiAob2xkQ29udGVudFtcIm1zZ3R5cGVcIl0gPT09IG5ld0NvbnRlbnRbXCJtc2d0eXBlXCJdICYmIG9sZENvbnRlbnRbXCJib2R5XCJdID09PSBuZXdDb250ZW50W1wiYm9keVwiXSAmJlxuICAgICAgICAgICAgb2xkQ29udGVudFtcImZvcm1hdFwiXSA9PT0gbmV3Q29udGVudFtcImZvcm1hdFwiXSAmJlxuICAgICAgICAgICAgb2xkQ29udGVudFtcImZvcm1hdHRlZF9ib2R5XCJdID09PSBuZXdDb250ZW50W1wiZm9ybWF0dGVkX2JvZHlcIl0pIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldFNsYXNoQ29tbWFuZCgpOiBbQ29tbWFuZCwgc3RyaW5nLCBzdHJpbmddIHtcbiAgICAgICAgY29uc3QgY29tbWFuZFRleHQgPSB0aGlzLm1vZGVsLnBhcnRzLnJlZHVjZSgodGV4dCwgcGFydCkgPT4ge1xuICAgICAgICAgICAgLy8gdXNlIG14aWQgdG8gdGV4dGlmeSB1c2VyIHBpbGxzIGluIGEgY29tbWFuZFxuICAgICAgICAgICAgaWYgKHBhcnQudHlwZSA9PT0gVHlwZS5Vc2VyUGlsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0ZXh0ICsgcGFydC5yZXNvdXJjZUlkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRleHQgKyBwYXJ0LnRleHQ7XG4gICAgICAgIH0sIFwiXCIpO1xuICAgICAgICBjb25zdCB7IGNtZCwgYXJncyB9ID0gZ2V0Q29tbWFuZChjb21tYW5kVGV4dCk7XG4gICAgICAgIHJldHVybiBbY21kLCBhcmdzLCBjb21tYW5kVGV4dF07XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyBydW5TbGFzaENvbW1hbmQoY21kOiBDb21tYW5kLCBhcmdzOiBzdHJpbmcsIHJvb21JZDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IHRocmVhZElkID0gdGhpcy5wcm9wcy5lZGl0U3RhdGU/LmdldEV2ZW50KCk/LmdldFRocmVhZCgpPy5pZCB8fCBudWxsO1xuXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGNtZC5ydW4ocm9vbUlkLCB0aHJlYWRJZCwgYXJncyk7XG4gICAgICAgIGxldCBtZXNzYWdlQ29udGVudDtcbiAgICAgICAgbGV0IGVycm9yID0gcmVzdWx0LmVycm9yO1xuICAgICAgICBpZiAocmVzdWx0LnByb21pc2UpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKGNtZC5jYXRlZ29yeSA9PT0gQ29tbWFuZENhdGVnb3JpZXMubWVzc2FnZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZUNvbnRlbnQgPSBhd2FpdCByZXN1bHQucHJvbWlzZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCByZXN1bHQucHJvbWlzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBlcnJvciA9IGVycjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgIGxvZ2dlci5lcnJvcihcIkNvbW1hbmQgZmFpbHVyZTogJXNcIiwgZXJyb3IpO1xuICAgICAgICAgICAgLy8gYXNzdW1lIHRoZSBlcnJvciBpcyBhIHNlcnZlciBlcnJvciB3aGVuIHRoZSBjb21tYW5kIGlzIGFzeW5jXG4gICAgICAgICAgICBjb25zdCBpc1NlcnZlckVycm9yID0gISFyZXN1bHQucHJvbWlzZTtcbiAgICAgICAgICAgIGNvbnN0IHRpdGxlID0gaXNTZXJ2ZXJFcnJvciA/IF90ZChcIlNlcnZlciBlcnJvclwiKSA6IF90ZChcIkNvbW1hbmQgZXJyb3JcIik7XG5cbiAgICAgICAgICAgIGxldCBlcnJUZXh0O1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBlcnJvciA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBlcnJUZXh0ID0gZXJyb3I7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGVycm9yLm1lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgICBlcnJUZXh0ID0gZXJyb3IubWVzc2FnZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZXJyVGV4dCA9IF90KFwiU2VydmVyIHVuYXZhaWxhYmxlLCBvdmVybG9hZGVkLCBvciBzb21ldGhpbmcgZWxzZSB3ZW50IHdyb25nLlwiKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgTW9kYWwuY3JlYXRlVHJhY2tlZERpYWxvZyh0aXRsZSwgJycsIEVycm9yRGlhbG9nLCB7XG4gICAgICAgICAgICAgICAgdGl0bGU6IF90KHRpdGxlKSxcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogZXJyVGV4dCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbG9nZ2VyLmxvZyhcIkNvbW1hbmQgc3VjY2Vzcy5cIik7XG4gICAgICAgICAgICBpZiAobWVzc2FnZUNvbnRlbnQpIHJldHVybiBtZXNzYWdlQ29udGVudDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgc2VuZEVkaXQgPSBhc3luYyAoKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gICAgICAgIGNvbnN0IHN0YXJ0VGltZSA9IENvdW50bHlBbmFseXRpY3MuZ2V0VGltZXN0YW1wKCk7XG4gICAgICAgIGNvbnN0IGVkaXRlZEV2ZW50ID0gdGhpcy5wcm9wcy5lZGl0U3RhdGUuZ2V0RXZlbnQoKTtcblxuICAgICAgICAvLyBSZXBsYWNlIGVtb3RpY29uIGF0IHRoZSBlbmQgb2YgdGhlIG1lc3NhZ2VcbiAgICAgICAgaWYgKFNldHRpbmdzU3RvcmUuZ2V0VmFsdWUoJ01lc3NhZ2VDb21wb3NlcklucHV0LmF1dG9SZXBsYWNlRW1vamknKSkge1xuICAgICAgICAgICAgY29uc3QgY2FyZXQgPSB0aGlzLmVkaXRvclJlZi5jdXJyZW50Py5nZXRDYXJldCgpO1xuICAgICAgICAgICAgY29uc3QgcG9zaXRpb24gPSB0aGlzLm1vZGVsLnBvc2l0aW9uRm9yT2Zmc2V0KGNhcmV0Lm9mZnNldCwgY2FyZXQuYXROb2RlRW5kKTtcbiAgICAgICAgICAgIHRoaXMuZWRpdG9yUmVmLmN1cnJlbnQ/LnJlcGxhY2VFbW90aWNvbihwb3NpdGlvbiwgUkVHRVhfRU1PVElDT04pO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGVkaXRDb250ZW50ID0gY3JlYXRlRWRpdENvbnRlbnQodGhpcy5tb2RlbCwgZWRpdGVkRXZlbnQpO1xuICAgICAgICBjb25zdCBuZXdDb250ZW50ID0gZWRpdENvbnRlbnRbXCJtLm5ld19jb250ZW50XCJdO1xuXG4gICAgICAgIGxldCBzaG91bGRTZW5kID0gdHJ1ZTtcblxuICAgICAgICBpZiAobmV3Q29udGVudD8uYm9keSA9PT0gJycpIHtcbiAgICAgICAgICAgIHRoaXMuY2FuY2VsUHJldmlvdXNQZW5kaW5nRWRpdCgpO1xuICAgICAgICAgICAgY3JlYXRlUmVkYWN0RXZlbnREaWFsb2coe1xuICAgICAgICAgICAgICAgIG14RXZlbnQ6IGVkaXRlZEV2ZW50LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiBjb250ZW50IGlzIG1vZGlmaWVkIHRoZW4gc2VuZCBhbiB1cGRhdGVkIGV2ZW50IGludG8gdGhlIHJvb21cbiAgICAgICAgaWYgKHRoaXMuaXNDb250ZW50TW9kaWZpZWQobmV3Q29udGVudCkpIHtcbiAgICAgICAgICAgIGNvbnN0IHJvb21JZCA9IGVkaXRlZEV2ZW50LmdldFJvb21JZCgpO1xuICAgICAgICAgICAgaWYgKCFjb250YWluc0Vtb3RlKHRoaXMubW9kZWwpICYmIHRoaXMuaXNTbGFzaENvbW1hbmQoKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IFtjbWQsIGFyZ3MsIGNvbW1hbmRUZXh0XSA9IHRoaXMuZ2V0U2xhc2hDb21tYW5kKCk7XG4gICAgICAgICAgICAgICAgaWYgKGNtZCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY21kLmNhdGVnb3J5ID09PSBDb21tYW5kQ2F0ZWdvcmllcy5tZXNzYWdlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWRpdENvbnRlbnRbXCJtLm5ld19jb250ZW50XCJdID0gYXdhaXQgdGhpcy5ydW5TbGFzaENvbW1hbmQoY21kLCBhcmdzLCByb29tSWQpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ydW5TbGFzaENvbW1hbmQoY21kLCBhcmdzLCByb29tSWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2hvdWxkU2VuZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gYXNrIHRoZSB1c2VyIGlmIHRoZWlyIHVua25vd24gY29tbWFuZCBzaG91bGQgYmUgc2VudCBhcyBhIG1lc3NhZ2VcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBmaW5pc2hlZCB9ID0gTW9kYWwuY3JlYXRlVHJhY2tlZERpYWxvZyhcIlVua25vd24gY29tbWFuZFwiLCBcIlwiLCBRdWVzdGlvbkRpYWxvZywge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IF90KFwiVW5rbm93biBDb21tYW5kXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IDxkaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgX3QoXCJVbnJlY29nbmlzZWQgY29tbWFuZDogJShjb21tYW5kVGV4dClzXCIsIHsgY29tbWFuZFRleHQgfSkgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBfdChcIllvdSBjYW4gdXNlIDxjb2RlPi9oZWxwPC9jb2RlPiB0byBsaXN0IGF2YWlsYWJsZSBjb21tYW5kcy4gXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJEaWQgeW91IG1lYW4gdG8gc2VuZCB0aGlzIGFzIGEgbWVzc2FnZT9cIiwge30sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IHQgPT4gPGNvZGU+eyB0IH08L2NvZGU+LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IF90KFwiSGludDogQmVnaW4geW91ciBtZXNzYWdlIHdpdGggPGNvZGU+Ly88L2NvZGU+IHRvIHN0YXJ0IGl0IHdpdGggYSBzbGFzaC5cIiwge30sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IHQgPT4gPGNvZGU+eyB0IH08L2NvZGU+LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+LFxuICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uOiBfdCgnU2VuZCBhcyBtZXNzYWdlJyksXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBbc2VuZEFueXdheV0gPSBhd2FpdCBmaW5pc2hlZDtcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgIXNlbmRBbnl3YXkgYmFpbCB0byBsZXQgdGhlIHVzZXIgZWRpdCB0aGUgY29tcG9zZXIgYW5kIHRyeSBhZ2FpblxuICAgICAgICAgICAgICAgICAgICBpZiAoIXNlbmRBbnl3YXkpIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc2hvdWxkU2VuZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2FuY2VsUHJldmlvdXNQZW5kaW5nRWRpdCgpO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgZXZlbnQgPSB0aGlzLnByb3BzLmVkaXRTdGF0ZS5nZXRFdmVudCgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRocmVhZElkID0gZXZlbnQudGhyZWFkUm9vdElkIHx8IG51bGw7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBwcm9tID0gdGhpcy5wcm9wcy5teENsaWVudC5zZW5kTWVzc2FnZShyb29tSWQsIHRocmVhZElkLCBlZGl0Q29udGVudCk7XG4gICAgICAgICAgICAgICAgdGhpcy5jbGVhclN0b3JlZEVkaXRvclN0YXRlKCk7XG4gICAgICAgICAgICAgICAgZGlzLmRpc3BhdGNoKHsgYWN0aW9uOiBcIm1lc3NhZ2Vfc2VudFwiIH0pO1xuICAgICAgICAgICAgICAgIENvdW50bHlBbmFseXRpY3MuaW5zdGFuY2UudHJhY2tTZW5kTWVzc2FnZShzdGFydFRpbWUsIHByb20sIHJvb21JZCwgdHJ1ZSwgZmFsc2UsIGVkaXRDb250ZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGNsb3NlIHRoZSBldmVudCBlZGl0aW5nIGFuZCBmb2N1cyBjb21wb3NlclxuICAgICAgICBkaXMuZGlzcGF0Y2goe1xuICAgICAgICAgICAgYWN0aW9uOiBBY3Rpb24uRWRpdEV2ZW50LFxuICAgICAgICAgICAgZXZlbnQ6IG51bGwsXG4gICAgICAgICAgICB0aW1lbGluZVJlbmRlcmluZ1R5cGU6IHRoaXMuY29udGV4dC50aW1lbGluZVJlbmRlcmluZ1R5cGUsXG4gICAgICAgIH0pO1xuICAgICAgICBkaXMuZGlzcGF0Y2goe1xuICAgICAgICAgICAgYWN0aW9uOiBBY3Rpb24uRm9jdXNTZW5kTWVzc2FnZUNvbXBvc2VyLFxuICAgICAgICAgICAgY29udGV4dDogdGhpcy5jb250ZXh0LnRpbWVsaW5lUmVuZGVyaW5nVHlwZSxcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIHByaXZhdGUgY2FuY2VsUHJldmlvdXNQZW5kaW5nRWRpdCgpOiB2b2lkIHtcbiAgICAgICAgY29uc3Qgb3JpZ2luYWxFdmVudCA9IHRoaXMucHJvcHMuZWRpdFN0YXRlLmdldEV2ZW50KCk7XG4gICAgICAgIGNvbnN0IHByZXZpb3VzRWRpdCA9IG9yaWdpbmFsRXZlbnQucmVwbGFjaW5nRXZlbnQoKTtcbiAgICAgICAgaWYgKHByZXZpb3VzRWRpdCAmJiAoXG4gICAgICAgICAgICBwcmV2aW91c0VkaXQuc3RhdHVzID09PSBFdmVudFN0YXR1cy5RVUVVRUQgfHxcbiAgICAgICAgICAgIHByZXZpb3VzRWRpdC5zdGF0dXMgPT09IEV2ZW50U3RhdHVzLk5PVF9TRU5UXG4gICAgICAgICkpIHtcbiAgICAgICAgICAgIHRoaXMucHJvcHMubXhDbGllbnQuY2FuY2VsUGVuZGluZ0V2ZW50KHByZXZpb3VzRWRpdCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgICAgLy8gc3RvcmUgY2FyZXQgYW5kIHNlcmlhbGl6ZWQgcGFydHMgaW4gdGhlXG4gICAgICAgIC8vIGVkaXRvcnN0YXRlIHNvIGl0IGNhbiBiZSByZXN0b3JlZCB3aGVuIHRoZSByZW1vdGUgZWNobyBldmVudCB0aWxlIGdldHMgcmVuZGVyZWRcbiAgICAgICAgLy8gaW4gY2FzZSB3ZSdyZSBjdXJyZW50bHkgZWRpdGluZyBhIHBlbmRpbmcgZXZlbnRcbiAgICAgICAgY29uc3Qgc2VsID0gZG9jdW1lbnQuZ2V0U2VsZWN0aW9uKCk7XG4gICAgICAgIGxldCBjYXJldDtcbiAgICAgICAgaWYgKHNlbC5mb2N1c05vZGUpIHtcbiAgICAgICAgICAgIGNhcmV0ID0gZ2V0Q2FyZXRPZmZzZXRBbmRUZXh0KHRoaXMuZWRpdG9yUmVmLmN1cnJlbnQ/LmVkaXRvclJlZi5jdXJyZW50LCBzZWwpLmNhcmV0O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBhcnRzID0gdGhpcy5tb2RlbC5zZXJpYWxpemVQYXJ0cygpO1xuICAgICAgICAvLyBpZiBjYXJldCBpcyB1bmRlZmluZWQgYmVjYXVzZSBmb3Igc29tZSByZWFzb24gdGhlcmUgaXNuJ3QgYSB2YWxpZCBzZWxlY3Rpb24sXG4gICAgICAgIC8vIHRoZW4gd2hlbiBtb3VudGluZyB0aGUgZWRpdG9yIGFnYWluIHdpdGggdGhlIHNhbWUgZWRpdG9yIHN0YXRlLFxuICAgICAgICAvLyBpdCB3aWxsIHNldCB0aGUgY3Vyc29yIGF0IHRoZSBlbmQuXG4gICAgICAgIHRoaXMucHJvcHMuZWRpdFN0YXRlLnNldEVkaXRvclN0YXRlKGNhcmV0LCBwYXJ0cyk7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwiYmVmb3JldW5sb2FkXCIsIHRoaXMuc2F2ZVN0b3JlZEVkaXRvclN0YXRlKTtcbiAgICAgICAgaWYgKHRoaXMuc2hvdWxkU2F2ZVN0b3JlZEVkaXRvclN0YXRlKSB7XG4gICAgICAgICAgICB0aGlzLnNhdmVTdG9yZWRFZGl0b3JTdGF0ZSgpO1xuICAgICAgICB9XG4gICAgICAgIGRpcy51bnJlZ2lzdGVyKHRoaXMuZGlzcGF0Y2hlclJlZik7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjcmVhdGVFZGl0b3JNb2RlbCgpOiBib29sZWFuIHtcbiAgICAgICAgY29uc3QgeyBlZGl0U3RhdGUgfSA9IHRoaXMucHJvcHM7XG4gICAgICAgIGNvbnN0IHJvb20gPSB0aGlzLmdldFJvb20oKTtcbiAgICAgICAgY29uc3QgcGFydENyZWF0b3IgPSBuZXcgQ29tbWFuZFBhcnRDcmVhdG9yKHJvb20sIHRoaXMucHJvcHMubXhDbGllbnQpO1xuXG4gICAgICAgIGxldCBwYXJ0cztcbiAgICAgICAgbGV0IGlzUmVzdG9yZWQgPSBmYWxzZTtcbiAgICAgICAgaWYgKGVkaXRTdGF0ZS5oYXNFZGl0b3JTdGF0ZSgpKSB7XG4gICAgICAgICAgICAvLyBpZiByZXN0b3Jpbmcgc3RhdGUgZnJvbSBhIHByZXZpb3VzIGVkaXRvcixcbiAgICAgICAgICAgIC8vIHJlc3RvcmUgc2VyaWFsaXplZCBwYXJ0cyBmcm9tIHRoZSBzdGF0ZVxuICAgICAgICAgICAgcGFydHMgPSBlZGl0U3RhdGUuZ2V0U2VyaWFsaXplZFBhcnRzKCkubWFwKHAgPT4gcGFydENyZWF0b3IuZGVzZXJpYWxpemVQYXJ0KHApKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIG90aGVyd2lzZSwgZWl0aGVyIHJlc3RvcmUgc2VyaWFsaXplZCBwYXJ0cyBmcm9tIGxvY2FsU3RvcmFnZSBvciBwYXJzZSB0aGUgYm9keSBvZiB0aGUgZXZlbnRcbiAgICAgICAgICAgIGNvbnN0IHJlc3RvcmVkUGFydHMgPSB0aGlzLnJlc3RvcmVTdG9yZWRFZGl0b3JTdGF0ZShwYXJ0Q3JlYXRvcik7XG4gICAgICAgICAgICBwYXJ0cyA9IHJlc3RvcmVkUGFydHMgfHwgcGFyc2VFdmVudChlZGl0U3RhdGUuZ2V0RXZlbnQoKSwgcGFydENyZWF0b3IpO1xuICAgICAgICAgICAgaXNSZXN0b3JlZCA9ICEhcmVzdG9yZWRQYXJ0cztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm1vZGVsID0gbmV3IEVkaXRvck1vZGVsKHBhcnRzLCBwYXJ0Q3JlYXRvcik7XG4gICAgICAgIHRoaXMuc2F2ZVN0b3JlZEVkaXRvclN0YXRlKCk7XG5cbiAgICAgICAgcmV0dXJuIGlzUmVzdG9yZWQ7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvbkNoYW5nZSA9ICgpOiB2b2lkID0+IHtcbiAgICAgICAgaWYgKCF0aGlzLnN0YXRlLnNhdmVEaXNhYmxlZCB8fCAhdGhpcy5lZGl0b3JSZWYuY3VycmVudD8uaXNNb2RpZmllZCgpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIHNhdmVEaXNhYmxlZDogZmFsc2UsXG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBwcml2YXRlIG9uQWN0aW9uID0gKHBheWxvYWQ6IEFjdGlvblBheWxvYWQpID0+IHtcbiAgICAgICAgaWYgKCF0aGlzLmVkaXRvclJlZi5jdXJyZW50KSByZXR1cm47XG5cbiAgICAgICAgaWYgKHBheWxvYWQuYWN0aW9uID09PSBBY3Rpb24uQ29tcG9zZXJJbnNlcnQpIHtcbiAgICAgICAgICAgIGlmIChwYXlsb2FkLnRpbWVsaW5lUmVuZGVyaW5nVHlwZSAhPT0gdGhpcy5jb250ZXh0LnRpbWVsaW5lUmVuZGVyaW5nVHlwZSkgcmV0dXJuO1xuICAgICAgICAgICAgaWYgKHBheWxvYWQuY29tcG9zZXJUeXBlICE9PSBDb21wb3NlclR5cGUuRWRpdCkgcmV0dXJuO1xuXG4gICAgICAgICAgICBpZiAocGF5bG9hZC51c2VySWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVkaXRvclJlZi5jdXJyZW50Py5pbnNlcnRNZW50aW9uKHBheWxvYWQudXNlcklkKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocGF5bG9hZC5ldmVudCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZWRpdG9yUmVmLmN1cnJlbnQ/Lmluc2VydFF1b3RlZE1lc3NhZ2UocGF5bG9hZC5ldmVudCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHBheWxvYWQudGV4dCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZWRpdG9yUmVmLmN1cnJlbnQ/Lmluc2VydFBsYWludGV4dChwYXlsb2FkLnRleHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHBheWxvYWQuYWN0aW9uID09PSBBY3Rpb24uRm9jdXNFZGl0TWVzc2FnZUNvbXBvc2VyKSB7XG4gICAgICAgICAgICB0aGlzLmVkaXRvclJlZi5jdXJyZW50LmZvY3VzKCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gKDxkaXYgY2xhc3NOYW1lPXtjbGFzc05hbWVzKFwibXhfRWRpdE1lc3NhZ2VDb21wb3NlclwiLCB0aGlzLnByb3BzLmNsYXNzTmFtZSl9IG9uS2V5RG93bj17dGhpcy5vbktleURvd259PlxuICAgICAgICAgICAgPEJhc2ljTWVzc2FnZUNvbXBvc2VyXG4gICAgICAgICAgICAgICAgcmVmPXt0aGlzLmVkaXRvclJlZn1cbiAgICAgICAgICAgICAgICBtb2RlbD17dGhpcy5tb2RlbH1cbiAgICAgICAgICAgICAgICByb29tPXt0aGlzLmdldFJvb20oKX1cbiAgICAgICAgICAgICAgICB0aHJlYWRJZD17dGhpcy5wcm9wcy5lZGl0U3RhdGU/LmdldEV2ZW50KCk/LmdldFRocmVhZCgpPy5pZH1cbiAgICAgICAgICAgICAgICBpbml0aWFsQ2FyZXQ9e3RoaXMucHJvcHMuZWRpdFN0YXRlLmdldENhcmV0KCl9XG4gICAgICAgICAgICAgICAgbGFiZWw9e190KFwiRWRpdCBtZXNzYWdlXCIpfVxuICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLm9uQ2hhbmdlfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibXhfRWRpdE1lc3NhZ2VDb21wb3Nlcl9idXR0b25zXCI+XG4gICAgICAgICAgICAgICAgPEFjY2Vzc2libGVCdXR0b24ga2luZD1cInNlY29uZGFyeVwiIG9uQ2xpY2s9e3RoaXMuY2FuY2VsRWRpdH0+XG4gICAgICAgICAgICAgICAgICAgIHsgX3QoXCJDYW5jZWxcIikgfVxuICAgICAgICAgICAgICAgIDwvQWNjZXNzaWJsZUJ1dHRvbj5cbiAgICAgICAgICAgICAgICA8QWNjZXNzaWJsZUJ1dHRvbiBraW5kPVwicHJpbWFyeVwiIG9uQ2xpY2s9e3RoaXMuc2VuZEVkaXR9IGRpc2FibGVkPXt0aGlzLnN0YXRlLnNhdmVEaXNhYmxlZH0+XG4gICAgICAgICAgICAgICAgICAgIHsgX3QoXCJTYXZlXCIpIH1cbiAgICAgICAgICAgICAgICA8L0FjY2Vzc2libGVCdXR0b24+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+KTtcbiAgICB9XG59XG5cbmNvbnN0IEVkaXRNZXNzYWdlQ29tcG9zZXJXaXRoTWF0cml4Q2xpZW50ID0gd2l0aE1hdHJpeENsaWVudEhPQyhFZGl0TWVzc2FnZUNvbXBvc2VyKTtcbmV4cG9ydCBkZWZhdWx0IEVkaXRNZXNzYWdlQ29tcG9zZXJXaXRoTWF0cml4Q2xpZW50O1xuIl19