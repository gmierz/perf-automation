"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _BreadcrumbsStore = require("../../../stores/BreadcrumbsStore");

var _DecoratedRoomAvatar = _interopRequireDefault(require("../avatars/DecoratedRoomAvatar"));

var _languageHandler = require("../../../languageHandler");

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _Analytics = _interopRequireDefault(require("../../../Analytics"));

var _AsyncStore = require("../../../stores/AsyncStore");

var _reactTransitionGroup = require("react-transition-group");

var _RovingTabIndex = require("../../../accessibility/RovingTabIndex");

var _Toolbar = _interopRequireDefault(require("../../../accessibility/Toolbar"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _dec, _class;

let RoomBreadcrumbs = (_dec = (0, _replaceableComponent.replaceableComponent)("views.rooms.RoomBreadcrumbs"), _dec(_class = class RoomBreadcrumbs extends _react.default.PureComponent {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "isMounted", true);
    (0, _defineProperty2.default)(this, "onBreadcrumbsUpdate", () => {
      if (!this.isMounted) return; // We need to trick the CSSTransition component into updating, which means we need to
      // tell it to not animate, then to animate a moment later. This causes two updates
      // which means two renders. The skipFirst change is so that our don't-animate state
      // doesn't show the breadcrumb we're about to reveal as it causes a visual jump/jerk.
      // The second update, on the next available tick, causes the "enter" animation to start
      // again and this time we want to show the newest breadcrumb because it'll be hidden
      // off screen for the animation.

      this.setState({
        doAnimation: false,
        skipFirst: true
      });
      setTimeout(() => this.setState({
        doAnimation: true,
        skipFirst: false
      }), 0);
    });
    (0, _defineProperty2.default)(this, "viewRoom", (room, index) => {
      _Analytics.default.trackEvent("Breadcrumbs", "click_node", String(index));

      _dispatcher.default.dispatch({
        action: "view_room",
        room_id: room.roomId
      });
    });
    this.state = {
      doAnimation: true,
      // technically we want animation on mount, but it won't be perfect
      skipFirst: false // render the thing, as boring as it is

    };

    _BreadcrumbsStore.BreadcrumbsStore.instance.on(_AsyncStore.UPDATE_EVENT, this.onBreadcrumbsUpdate);
  }

  componentWillUnmount() {
    this.isMounted = false;

    _BreadcrumbsStore.BreadcrumbsStore.instance.off(_AsyncStore.UPDATE_EVENT, this.onBreadcrumbsUpdate);
  }

  render() {
    const tiles = _BreadcrumbsStore.BreadcrumbsStore.instance.rooms.map((r, i) => {
      return /*#__PURE__*/_react.default.createElement(_RovingTabIndex.RovingAccessibleTooltipButton, {
        className: "mx_RoomBreadcrumbs_crumb",
        key: r.roomId,
        onClick: () => this.viewRoom(r, i),
        "aria-label": (0, _languageHandler._t)("Room %(name)s", {
          name: r.name
        }),
        title: r.name,
        tooltipClassName: "mx_RoomBreadcrumbs_Tooltip"
      }, /*#__PURE__*/_react.default.createElement(_DecoratedRoomAvatar.default, {
        room: r,
        avatarSize: 32,
        displayBadge: true,
        forceCount: true
      }));
    });

    if (tiles.length > 0) {
      // NOTE: The CSSTransition timeout MUST match the timeout in our CSS!
      return /*#__PURE__*/_react.default.createElement(_reactTransitionGroup.CSSTransition, {
        appear: true,
        in: this.state.doAnimation,
        timeout: 640,
        classNames: "mx_RoomBreadcrumbs"
      }, /*#__PURE__*/_react.default.createElement(_Toolbar.default, {
        className: "mx_RoomBreadcrumbs",
        "aria-label": (0, _languageHandler._t)("Recently visited rooms")
      }, tiles.slice(this.state.skipFirst ? 1 : 0)));
    } else {
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_RoomBreadcrumbs"
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_RoomBreadcrumbs_placeholder"
      }, (0, _languageHandler._t)("No recently visited rooms")));
    }
  }

}) || _class);
exports.default = RoomBreadcrumbs;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,