"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _AccessibleTooltipButton = _interopRequireDefault(require("../elements/AccessibleTooltipButton"));

var _languageHandler = require("../../../languageHandler");

var _react = _interopRequireDefault(require("react"));

var _VoiceRecording = require("../../../audio/VoiceRecording");

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _LiveRecordingWaveform = _interopRequireDefault(require("../audio_messages/LiveRecordingWaveform"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _LiveRecordingClock = _interopRequireDefault(require("../audio_messages/LiveRecordingClock"));

var _VoiceRecordingStore = require("../../../stores/VoiceRecordingStore");

var _AsyncStore = require("../../../stores/AsyncStore");

var _RecordingPlayback = _interopRequireDefault(require("../audio_messages/RecordingPlayback"));

var _event = require("matrix-js-sdk/src/@types/event");

var _Modal = _interopRequireDefault(require("../../../Modal"));

var _ErrorDialog = _interopRequireDefault(require("../dialogs/ErrorDialog"));

var _MediaDeviceHandler = _interopRequireWildcard(require("../../../MediaDeviceHandler"));

var _NotificationBadge = _interopRequireDefault(require("./NotificationBadge"));

var _StaticNotificationState = require("../../../stores/notifications/StaticNotificationState");

var _NotificationColor = require("../../../stores/notifications/NotificationColor");

var _InlineSpinner = _interopRequireDefault(require("../elements/InlineSpinner"));

var _PlaybackManager = require("../../../audio/PlaybackManager");

var _logger = require("matrix-js-sdk/src/logger");

var _dec, _class;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

let VoiceRecordComposerTile = (
/**
 * Container tile for rendering the voice message recorder in the composer.
 */
_dec = (0, _replaceableComponent.replaceableComponent)("views.rooms.VoiceRecordComposerTile"), _dec(_class = class VoiceRecordComposerTile extends _react.default.PureComponent {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "onCancel", async () => {
      await this.disposeRecording();
    });
    (0, _defineProperty2.default)(this, "onRecordStartEndClick", async () => {
      if (this.state.recorder) {
        await this.state.recorder.stop();
        return;
      } // The "microphone access error" dialogs are used a lot, so let's functionify them


      const accessError = () => {
        _Modal.default.createTrackedDialog('Microphone Access Error', '', _ErrorDialog.default, {
          title: (0, _languageHandler._t)("Unable to access your microphone"),
          description: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("We were unable to access your microphone. Please check your browser settings and try again.")))
        });
      }; // Do a sanity test to ensure we're about to grab a valid microphone reference. Things might
      // change between this and recording, but at least we will have tried.


      try {
        var _devices$MediaDeviceK;

        const devices = await _MediaDeviceHandler.default.getDevices();

        if (!(devices !== null && devices !== void 0 && (_devices$MediaDeviceK = devices[_MediaDeviceHandler.MediaDeviceKindEnum.AudioInput]) !== null && _devices$MediaDeviceK !== void 0 && _devices$MediaDeviceK.length)) {
          _Modal.default.createTrackedDialog('No Microphone Error', '', _ErrorDialog.default, {
            title: (0, _languageHandler._t)("No microphone found"),
            description: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("We didn't find a microphone on your device. Please check your settings and try again.")))
          });

          return;
        } // else we probably have a device that is good enough

      } catch (e) {
        _logger.logger.error("Error getting devices: ", e);

        accessError();
        return;
      }

      try {
        // stop any noises which might be happening
        await _PlaybackManager.PlaybackManager.instance.pauseAllExcept(null);

        const recorder = _VoiceRecordingStore.VoiceRecordingStore.instance.startRecording();

        await recorder.start(); // We don't need to remove the listener: the recorder will clean that up for us.

        recorder.on(_AsyncStore.UPDATE_EVENT, ev => {
          if (ev === _VoiceRecording.RecordingState.EndingSoon) return; // ignore this state: it has no UI purpose here

          this.setState({
            recordingPhase: ev
          });
        });
        this.setState({
          recorder,
          recordingPhase: _VoiceRecording.RecordingState.Started
        });
      } catch (e) {
        _logger.logger.error("Error starting recording: ", e);

        accessError(); // noinspection ES6MissingAwait - if this goes wrong we don't want it to affect the call stack

        _VoiceRecordingStore.VoiceRecordingStore.instance.disposeRecording();
      }
    });
    this.state = {
      recorder: null // no recording started by default

    };
  }

  async componentWillUnmount() {
    await _VoiceRecordingStore.VoiceRecordingStore.instance.disposeRecording();
  } // called by composer


  async send() {
    if (!this.state.recorder) {
      throw new Error("No recording started - cannot send anything");
    }

    await this.state.recorder.stop();
    let upload;

    try {
      upload = await this.state.recorder.upload(this.props.room.roomId);
    } catch (e) {
      _logger.logger.error("Error uploading voice message:", e); // Flag error and move on. The recording phase will be reset by the upload function.


      this.setState({
        didUploadFail: true
      });
      return; // don't dispose the recording: the user has a chance to re-upload
    }

    try {
      // noinspection ES6MissingAwait - we don't care if it fails, it'll get queued.
      _MatrixClientPeg.MatrixClientPeg.get().sendMessage(this.props.room.roomId, {
        "body": "Voice message",
        //"msgtype": "org.matrix.msc2516.voice",
        "msgtype": _event.MsgType.Audio,
        "url": upload.mxc,
        "file": upload.encrypted,
        "info": {
          duration: Math.round(this.state.recorder.durationSeconds * 1000),
          mimetype: this.state.recorder.contentType,
          size: this.state.recorder.contentLength
        },
        // MSC1767 + Ideals of MSC2516 as MSC3245
        // https://github.com/matrix-org/matrix-doc/pull/3245
        "org.matrix.msc1767.text": "Voice message",
        "org.matrix.msc1767.file": {
          url: upload.mxc,
          file: upload.encrypted,
          name: "Voice message.ogg",
          mimetype: this.state.recorder.contentType,
          size: this.state.recorder.contentLength
        },
        "org.matrix.msc1767.audio": {
          duration: Math.round(this.state.recorder.durationSeconds * 1000),
          // https://github.com/matrix-org/matrix-doc/pull/3246
          waveform: this.state.recorder.getPlayback().thumbnailWaveform.map(v => Math.round(v * 1024))
        },
        "org.matrix.msc3245.voice": {} // No content, this is a rendering hint

      });
    } catch (e) {
      _logger.logger.error("Error sending voice message:", e); // Voice message should be in the timeline at this point, so let other things take care
      // of error handling. We also shouldn't need the recording anymore, so fall through to
      // disposal.

    }

    await this.disposeRecording();
  }

  async disposeRecording() {
    await _VoiceRecordingStore.VoiceRecordingStore.instance.disposeRecording(); // Reset back to no recording, which means no phase (ie: restart component entirely)

    this.setState({
      recorder: null,
      recordingPhase: null,
      didUploadFail: false
    });
  }

  renderWaveformArea() {
    if (!this.state.recorder) return null; // no recorder means we're not recording: no waveform

    if (this.state.recordingPhase !== _VoiceRecording.RecordingState.Started) {
      return /*#__PURE__*/_react.default.createElement(_RecordingPlayback.default, {
        playback: this.state.recorder.getPlayback()
      });
    } // only other UI is the recording-in-progress UI


    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_MediaBody mx_VoiceMessagePrimaryContainer mx_VoiceRecordComposerTile_recording"
    }, /*#__PURE__*/_react.default.createElement(_LiveRecordingClock.default, {
      recorder: this.state.recorder
    }), /*#__PURE__*/_react.default.createElement(_LiveRecordingWaveform.default, {
      recorder: this.state.recorder
    }));
  }

  render() {
    if (!this.state.recordingPhase) return null;
    let stopBtn;
    let deleteButton;

    if (this.state.recordingPhase === _VoiceRecording.RecordingState.Started) {
      var _this$state$recorder;

      let tooltip = (0, _languageHandler._t)("Send voice message");

      if (!!this.state.recorder) {
        tooltip = (0, _languageHandler._t)("Stop recording");
      }

      stopBtn = /*#__PURE__*/_react.default.createElement(_AccessibleTooltipButton.default, {
        className: "mx_VoiceRecordComposerTile_stop",
        onClick: this.onRecordStartEndClick,
        title: tooltip
      });

      if (this.state.recorder && !((_this$state$recorder = this.state.recorder) !== null && _this$state$recorder !== void 0 && _this$state$recorder.isRecording)) {
        stopBtn = null;
      }
    }

    if (this.state.recorder && this.state.recordingPhase !== _VoiceRecording.RecordingState.Uploading) {
      deleteButton = /*#__PURE__*/_react.default.createElement(_AccessibleTooltipButton.default, {
        className: "mx_VoiceRecordComposerTile_delete",
        title: (0, _languageHandler._t)("Delete"),
        onClick: this.onCancel
      });
    }

    let uploadIndicator;

    if (this.state.recordingPhase === _VoiceRecording.RecordingState.Uploading) {
      uploadIndicator = /*#__PURE__*/_react.default.createElement("span", {
        className: "mx_VoiceRecordComposerTile_uploadingState"
      }, /*#__PURE__*/_react.default.createElement(_InlineSpinner.default, {
        w: 16,
        h: 16
      }));
    } else if (this.state.didUploadFail && this.state.recordingPhase === _VoiceRecording.RecordingState.Ended) {
      uploadIndicator = /*#__PURE__*/_react.default.createElement("span", {
        className: "mx_VoiceRecordComposerTile_failedState"
      }, /*#__PURE__*/_react.default.createElement("span", {
        className: "mx_VoiceRecordComposerTile_uploadState_badge"
      }, /*#__PURE__*/_react.default.createElement(_NotificationBadge.default, {
        notification: _StaticNotificationState.StaticNotificationState.forSymbol("!", _NotificationColor.NotificationColor.Red)
      })), /*#__PURE__*/_react.default.createElement("span", {
        className: "text-warning"
      }, (0, _languageHandler._t)("Failed to send")));
    }

    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, uploadIndicator, deleteButton, stopBtn, this.renderWaveformArea());
  }

}) || _class);
exports.default = VoiceRecordComposerTile;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,