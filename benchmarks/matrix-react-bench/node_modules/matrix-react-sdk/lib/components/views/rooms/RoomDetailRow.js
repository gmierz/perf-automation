"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.getDisplayAliasForRoom = getDisplayAliasForRoom;
exports.roomShape = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var sdk = _interopRequireWildcard(require("../../../index"));

var _react = _interopRequireWildcard(require("react"));

var _languageHandler = require("../../../languageHandler");

var _HtmlUtils = require("../../../HtmlUtils");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _Media = require("../../../customisations/Media");

var _Rooms = require("../../../Rooms");

var _dec, _class, _class2, _temp;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function getDisplayAliasForRoom(room) {
  return (0, _Rooms.getDisplayAliasForAliasSet)(room.canonicalAlias, room.aliases);
}

const roomShape = _propTypes.default.shape({
  name: _propTypes.default.string,
  topic: _propTypes.default.string,
  roomId: _propTypes.default.string,
  avatarUrl: _propTypes.default.string,
  numJoinedMembers: _propTypes.default.number,
  canonicalAlias: _propTypes.default.string,
  aliases: _propTypes.default.arrayOf(_propTypes.default.string),
  worldReadable: _propTypes.default.bool,
  guestCanJoin: _propTypes.default.bool
});

exports.roomShape = roomShape;
let RoomDetailRow = (_dec = (0, _replaceableComponent.replaceableComponent)("views.rooms.RoomDetailRow"), _dec(_class = (_temp = _class2 = class RoomDetailRow extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "onClick", ev => {
      ev.preventDefault();

      if (this.props.onClick) {
        this.props.onClick(ev, this.props.room);
      }
    });
    (0, _defineProperty2.default)(this, "onTopicClick", ev => {
      // When clicking a link in the topic, prevent the event being propagated
      // to `onClick`.
      ev.stopPropagation();
    });
    this._topic = /*#__PURE__*/(0, _react.createRef)();
  }

  componentDidMount() {
    this._linkifyTopic();
  }

  componentDidUpdate() {
    this._linkifyTopic();
  }

  _linkifyTopic() {
    if (this._topic.current) {
      (0, _HtmlUtils.linkifyElement)(this._topic.current);
    }
  }

  render() {
    const BaseAvatar = sdk.getComponent('avatars.BaseAvatar');
    const room = this.props.room;
    const name = room.name || getDisplayAliasForRoom(room) || (0, _languageHandler._t)('Unnamed room');
    const guestRead = room.worldReadable ? /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_RoomDirectory_perm"
    }, (0, _languageHandler._t)('World readable')) : /*#__PURE__*/_react.default.createElement("div", null);
    const guestJoin = room.guestCanJoin ? /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_RoomDirectory_perm"
    }, (0, _languageHandler._t)('Guests can join')) : /*#__PURE__*/_react.default.createElement("div", null);
    const perms = guestRead || guestJoin ? /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_RoomDirectory_perms"
    }, guestRead, "\xA0", guestJoin) : /*#__PURE__*/_react.default.createElement("div", null);
    let avatarUrl = null;
    if (room.avatarUrl) avatarUrl = (0, _Media.mediaFromMxc)(room.avatarUrl).getSquareThumbnailHttp(24);
    return /*#__PURE__*/_react.default.createElement("tr", {
      key: room.roomId,
      onClick: this.onClick,
      onMouseDown: this.props.onMouseDown
    }, /*#__PURE__*/_react.default.createElement("td", {
      className: "mx_RoomDirectory_roomAvatar"
    }, /*#__PURE__*/_react.default.createElement(BaseAvatar, {
      width: 24,
      height: 24,
      resizeMethod: "crop",
      name: name,
      idName: name,
      url: avatarUrl
    })), /*#__PURE__*/_react.default.createElement("td", {
      className: "mx_RoomDirectory_roomDescription"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_RoomDirectory_name"
    }, name), "\xA0", perms, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_RoomDirectory_topic",
      ref: this._topic,
      onClick: this.onTopicClick
    }, room.topic), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_RoomDirectory_alias"
    }, getDisplayAliasForRoom(room))), /*#__PURE__*/_react.default.createElement("td", {
      className: "mx_RoomDirectory_roomMemberCount"
    }, room.numJoinedMembers));
  }

}, (0, _defineProperty2.default)(_class2, "propTypes", {
  room: roomShape,
  // passes ev, room as args
  onClick: _propTypes.default.func,
  onMouseDown: _propTypes.default.func
}), _temp)) || _class);
exports.default = RoomDetailRow;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,