"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Formatting = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _languageHandler = require("../../../languageHandler");

var _AccessibleTooltipButton = _interopRequireDefault(require("../elements/AccessibleTooltipButton"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _dec, _class;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

let Formatting;
exports.Formatting = Formatting;

(function (Formatting) {
  Formatting["Bold"] = "bold";
  Formatting["Italics"] = "italics";
  Formatting["Strikethrough"] = "strikethrough";
  Formatting["Code"] = "code";
  Formatting["Quote"] = "quote";
  Formatting["InsertLink"] = "insert_link";
})(Formatting || (exports.Formatting = Formatting = {}));

let MessageComposerFormatBar = (_dec = (0, _replaceableComponent.replaceableComponent)("views.rooms.MessageComposerFormatBar"), _dec(_class = class MessageComposerFormatBar extends _react.default.PureComponent {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "formatBarRef", /*#__PURE__*/(0, _react.createRef)());
    this.state = {
      visible: false
    };
  }

  render() {
    const classes = (0, _classnames.default)("mx_MessageComposerFormatBar", {
      "mx_MessageComposerFormatBar_shown": this.state.visible
    });
    return /*#__PURE__*/_react.default.createElement("div", {
      className: classes,
      ref: this.formatBarRef
    }, /*#__PURE__*/_react.default.createElement(FormatButton, {
      label: (0, _languageHandler._t)("Bold"),
      onClick: () => this.props.onAction(Formatting.Bold),
      icon: "Bold",
      shortcut: this.props.shortcuts.bold,
      visible: this.state.visible
    }), /*#__PURE__*/_react.default.createElement(FormatButton, {
      label: (0, _languageHandler._t)("Italics"),
      onClick: () => this.props.onAction(Formatting.Italics),
      icon: "Italic",
      shortcut: this.props.shortcuts.italics,
      visible: this.state.visible
    }), /*#__PURE__*/_react.default.createElement(FormatButton, {
      label: (0, _languageHandler._t)("Strikethrough"),
      onClick: () => this.props.onAction(Formatting.Strikethrough),
      icon: "Strikethrough",
      visible: this.state.visible
    }), /*#__PURE__*/_react.default.createElement(FormatButton, {
      label: (0, _languageHandler._t)("Code block"),
      onClick: () => this.props.onAction(Formatting.Code),
      icon: "Code",
      visible: this.state.visible
    }), /*#__PURE__*/_react.default.createElement(FormatButton, {
      label: (0, _languageHandler._t)("Quote"),
      onClick: () => this.props.onAction(Formatting.Quote),
      icon: "Quote",
      shortcut: this.props.shortcuts.quote,
      visible: this.state.visible
    }), /*#__PURE__*/_react.default.createElement(FormatButton, {
      label: (0, _languageHandler._t)("Insert link"),
      onClick: () => this.props.onAction(Formatting.InsertLink),
      icon: "InsertLink",
      visible: this.state.visible
    }));
  }

  showAt(selectionRect) {
    if (!this.formatBarRef.current) return;
    this.setState({
      visible: true
    });
    const parentRect = this.formatBarRef.current.parentElement.getBoundingClientRect();
    this.formatBarRef.current.style.left = `${selectionRect.left - parentRect.left}px`; // 16 is half the height of the bar (e.g. to center it) and 18 is an offset that felt ok.

    this.formatBarRef.current.style.top = `${selectionRect.top - parentRect.top - 16 - 18}px`;
  }

  hide() {
    this.setState({
      visible: false
    });
  }

}) || _class);
exports.default = MessageComposerFormatBar;

class FormatButton extends _react.default.PureComponent {
  render() {
    const className = `mx_MessageComposerFormatBar_button mx_MessageComposerFormatBar_buttonIcon${this.props.icon}`;
    let shortcut;

    if (this.props.shortcut) {
      shortcut = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_MessageComposerFormatBar_tooltipShortcut"
      }, this.props.shortcut);
    }

    const tooltip = /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_Tooltip_title"
    }, this.props.label), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_Tooltip_sub"
    }, shortcut));

    return /*#__PURE__*/_react.default.createElement(_AccessibleTooltipButton.default, {
      onClick: this.props.onClick,
      title: this.props.label,
      tooltip: tooltip,
      className: className
    });
  }

}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,