"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _languageHandler = require("../../../languageHandler");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _ReplyTile = _interopRequireDefault(require("./ReplyTile"));

var _RoomContext = _interopRequireDefault(require("../../../contexts/RoomContext"));

var _dec, _class, _class2, _temp;

function cancelQuoting(context) {
  _dispatcher.default.dispatch({
    action: 'reply_to_event',
    event: null,
    context
  });
}

let ReplyPreview = (_dec = (0, _replaceableComponent.replaceableComponent)("views.rooms.ReplyPreview"), _dec(_class = (_temp = _class2 = class ReplyPreview extends _react.default.Component {
  render() {
    if (!this.props.replyToEvent) return null;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_ReplyPreview"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_ReplyPreview_section"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_ReplyPreview_header mx_ReplyPreview_title"
    }, (0, _languageHandler._t)('Replying')), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_ReplyPreview_header mx_ReplyPreview_cancel"
    }, /*#__PURE__*/_react.default.createElement("img", {
      className: "mx_filterFlipColor",
      src: require("../../../../res/img/cancel.svg"),
      width: "18",
      height: "18",
      onClick: () => cancelQuoting(this.context.timelineRenderingType)
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_ReplyPreview_clear"
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_ReplyPreview_tile"
    }, /*#__PURE__*/_react.default.createElement(_ReplyTile.default, {
      mxEvent: this.props.replyToEvent,
      permalinkCreator: this.props.permalinkCreator
    }))));
  }

}, (0, _defineProperty2.default)(_class2, "contextType", _RoomContext.default), _temp)) || _class);
exports.default = ReplyPreview;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL3Jvb21zL1JlcGx5UHJldmlldy50c3giXSwibmFtZXMiOlsiY2FuY2VsUXVvdGluZyIsImNvbnRleHQiLCJkaXMiLCJkaXNwYXRjaCIsImFjdGlvbiIsImV2ZW50IiwiUmVwbHlQcmV2aWV3IiwiUmVhY3QiLCJDb21wb25lbnQiLCJyZW5kZXIiLCJwcm9wcyIsInJlcGx5VG9FdmVudCIsInJlcXVpcmUiLCJ0aW1lbGluZVJlbmRlcmluZ1R5cGUiLCJwZXJtYWxpbmtDcmVhdG9yIiwiUm9vbUNvbnRleHQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBZ0JBOztBQUNBOztBQUNBOztBQUVBOztBQUNBOztBQUVBOzs7O0FBRUEsU0FBU0EsYUFBVCxDQUF1QkMsT0FBdkIsRUFBdUQ7QUFDbkRDLHNCQUFJQyxRQUFKLENBQWE7QUFDVEMsSUFBQUEsTUFBTSxFQUFFLGdCQURDO0FBRVRDLElBQUFBLEtBQUssRUFBRSxJQUZFO0FBR1RKLElBQUFBO0FBSFMsR0FBYjtBQUtIOztJQVFvQkssWSxXQURwQixnREFBcUIsMEJBQXJCLEMsbUNBQUQsTUFDcUJBLFlBRHJCLFNBQzBDQyxlQUFNQyxTQURoRCxDQUNrRTtBQUd2REMsRUFBQUEsTUFBTSxHQUFnQjtBQUN6QixRQUFJLENBQUMsS0FBS0MsS0FBTCxDQUFXQyxZQUFoQixFQUE4QixPQUFPLElBQVA7QUFFOUIsd0JBQU87QUFBSyxNQUFBLFNBQVMsRUFBQztBQUFmLG9CQUNIO0FBQUssTUFBQSxTQUFTLEVBQUM7QUFBZixvQkFDSTtBQUFLLE1BQUEsU0FBUyxFQUFDO0FBQWYsT0FDTSx5QkFBRyxVQUFILENBRE4sQ0FESixlQUlJO0FBQUssTUFBQSxTQUFTLEVBQUM7QUFBZixvQkFDSTtBQUNJLE1BQUEsU0FBUyxFQUFDLG9CQURkO0FBRUksTUFBQSxHQUFHLEVBQUVDLE9BQU8sQ0FBQyxnQ0FBRCxDQUZoQjtBQUdJLE1BQUEsS0FBSyxFQUFDLElBSFY7QUFJSSxNQUFBLE1BQU0sRUFBQyxJQUpYO0FBS0ksTUFBQSxPQUFPLEVBQUUsTUFBTVosYUFBYSxDQUFDLEtBQUtDLE9BQUwsQ0FBYVkscUJBQWQ7QUFMaEMsTUFESixDQUpKLGVBYUk7QUFBSyxNQUFBLFNBQVMsRUFBQztBQUFmLE1BYkosZUFjSTtBQUFLLE1BQUEsU0FBUyxFQUFDO0FBQWYsb0JBQ0ksNkJBQUMsa0JBQUQ7QUFDSSxNQUFBLE9BQU8sRUFBRSxLQUFLSCxLQUFMLENBQVdDLFlBRHhCO0FBRUksTUFBQSxnQkFBZ0IsRUFBRSxLQUFLRCxLQUFMLENBQVdJO0FBRmpDLE1BREosQ0FkSixDQURHLENBQVA7QUF1Qkg7O0FBN0I2RCxDLHdEQUNsQ0Msb0IiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuQ29weXJpZ2h0IDIwMTcgLSAyMDIxIFRoZSBNYXRyaXgub3JnIEZvdW5kYXRpb24gQy5JLkMuXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBkaXMgZnJvbSAnLi4vLi4vLi4vZGlzcGF0Y2hlci9kaXNwYXRjaGVyJztcbmltcG9ydCB7IF90IH0gZnJvbSAnLi4vLi4vLi4vbGFuZ3VhZ2VIYW5kbGVyJztcbmltcG9ydCB7IFJvb21QZXJtYWxpbmtDcmVhdG9yIH0gZnJvbSBcIi4uLy4uLy4uL3V0aWxzL3Blcm1hbGlua3MvUGVybWFsaW5rc1wiO1xuaW1wb3J0IHsgcmVwbGFjZWFibGVDb21wb25lbnQgfSBmcm9tIFwiLi4vLi4vLi4vdXRpbHMvcmVwbGFjZWFibGVDb21wb25lbnRcIjtcbmltcG9ydCBSZXBseVRpbGUgZnJvbSAnLi9SZXBseVRpbGUnO1xuaW1wb3J0IHsgTWF0cml4RXZlbnQgfSBmcm9tICdtYXRyaXgtanMtc2RrL3NyYy9tb2RlbHMvZXZlbnQnO1xuaW1wb3J0IFJvb21Db250ZXh0LCB7IFRpbWVsaW5lUmVuZGVyaW5nVHlwZSB9IGZyb20gJy4uLy4uLy4uL2NvbnRleHRzL1Jvb21Db250ZXh0JztcblxuZnVuY3Rpb24gY2FuY2VsUXVvdGluZyhjb250ZXh0OiBUaW1lbGluZVJlbmRlcmluZ1R5cGUpIHtcbiAgICBkaXMuZGlzcGF0Y2goe1xuICAgICAgICBhY3Rpb246ICdyZXBseV90b19ldmVudCcsXG4gICAgICAgIGV2ZW50OiBudWxsLFxuICAgICAgICBjb250ZXh0LFxuICAgIH0pO1xufVxuXG5pbnRlcmZhY2UgSVByb3BzIHtcbiAgICBwZXJtYWxpbmtDcmVhdG9yOiBSb29tUGVybWFsaW5rQ3JlYXRvcjtcbiAgICByZXBseVRvRXZlbnQ6IE1hdHJpeEV2ZW50O1xufVxuXG5AcmVwbGFjZWFibGVDb21wb25lbnQoXCJ2aWV3cy5yb29tcy5SZXBseVByZXZpZXdcIilcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlcGx5UHJldmlldyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxJUHJvcHM+IHtcbiAgICBwdWJsaWMgc3RhdGljIGNvbnRleHRUeXBlID0gUm9vbUNvbnRleHQ7XG5cbiAgICBwdWJsaWMgcmVuZGVyKCk6IEpTWC5FbGVtZW50IHtcbiAgICAgICAgaWYgKCF0aGlzLnByb3BzLnJlcGx5VG9FdmVudCkgcmV0dXJuIG51bGw7XG5cbiAgICAgICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPVwibXhfUmVwbHlQcmV2aWV3XCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm14X1JlcGx5UHJldmlld19zZWN0aW9uXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJteF9SZXBseVByZXZpZXdfaGVhZGVyIG14X1JlcGx5UHJldmlld190aXRsZVwiPlxuICAgICAgICAgICAgICAgICAgICB7IF90KCdSZXBseWluZycpIH1cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm14X1JlcGx5UHJldmlld19oZWFkZXIgbXhfUmVwbHlQcmV2aWV3X2NhbmNlbFwiPlxuICAgICAgICAgICAgICAgICAgICA8aW1nXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJteF9maWx0ZXJGbGlwQ29sb3JcIlxuICAgICAgICAgICAgICAgICAgICAgICAgc3JjPXtyZXF1aXJlKFwiLi4vLi4vLi4vLi4vcmVzL2ltZy9jYW5jZWwuc3ZnXCIpfVxuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg9XCIxOFwiXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ9XCIxOFwiXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBjYW5jZWxRdW90aW5nKHRoaXMuY29udGV4dC50aW1lbGluZVJlbmRlcmluZ1R5cGUpfVxuICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibXhfUmVwbHlQcmV2aWV3X2NsZWFyXCIgLz5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm14X1JlcGx5UHJldmlld190aWxlXCI+XG4gICAgICAgICAgICAgICAgICAgIDxSZXBseVRpbGVcbiAgICAgICAgICAgICAgICAgICAgICAgIG14RXZlbnQ9e3RoaXMucHJvcHMucmVwbHlUb0V2ZW50fVxuICAgICAgICAgICAgICAgICAgICAgICAgcGVybWFsaW5rQ3JlYXRvcj17dGhpcy5wcm9wcy5wZXJtYWxpbmtDcmVhdG9yfVxuICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PjtcbiAgICB9XG59XG4iXX0=