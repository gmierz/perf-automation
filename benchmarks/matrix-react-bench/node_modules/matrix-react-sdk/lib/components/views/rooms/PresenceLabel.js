"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _languageHandler = require("../../../languageHandler");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _dec, _class, _class2, _temp;

let PresenceLabel = (_dec = (0, _replaceableComponent.replaceableComponent)("views.rooms.PresenceLabel"), _dec(_class = (_temp = _class2 = class PresenceLabel extends _react.default.Component {
  // Return duration as a string using appropriate time units
  // XXX: This would be better handled using a culture-aware library, but we don't use one yet.
  getDuration(time) {
    if (!time) return;
    const t = Math.round(time / 1000);
    const s = t % 60;
    const m = Math.round(t / 60) % 60;
    const h = Math.round(t / (60 * 60)) % 24;
    const d = Math.round(t / (60 * 60 * 24));

    if (t < 60) {
      if (t < 0) {
        return (0, _languageHandler._t)("%(duration)ss", {
          duration: 0
        });
      }

      return (0, _languageHandler._t)("%(duration)ss", {
        duration: s
      });
    }

    if (t < 60 * 60) {
      return (0, _languageHandler._t)("%(duration)sm", {
        duration: m
      });
    }

    if (t < 24 * 60 * 60) {
      return (0, _languageHandler._t)("%(duration)sh", {
        duration: h
      });
    }

    return (0, _languageHandler._t)("%(duration)sd", {
      duration: d
    });
  }

  getPrettyPresence(presence, activeAgo, currentlyActive) {
    if (!currentlyActive && activeAgo !== undefined && activeAgo > 0) {
      const duration = this.getDuration(activeAgo);
      if (presence === "online") return (0, _languageHandler._t)("Online for %(duration)s", {
        duration: duration
      });
      if (presence === "unavailable") return (0, _languageHandler._t)("Idle for %(duration)s", {
        duration: duration
      }); // XXX: is this actually right?

      if (presence === "offline") return (0, _languageHandler._t)("Offline for %(duration)s", {
        duration: duration
      });
      return (0, _languageHandler._t)("Unknown for %(duration)s", {
        duration: duration
      });
    } else {
      if (presence === "online") return (0, _languageHandler._t)("Online");
      if (presence === "unavailable") return (0, _languageHandler._t)("Idle"); // XXX: is this actually right?

      if (presence === "offline") return (0, _languageHandler._t)("Offline");
      return (0, _languageHandler._t)("Unknown");
    }
  }

  render() {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_PresenceLabel"
    }, this.getPrettyPresence(this.props.presenceState, this.props.activeAgo, this.props.currentlyActive));
  }

}, (0, _defineProperty2.default)(_class2, "defaultProps", {
  activeAgo: -1,
  presenceState: null
}), _temp)) || _class);
exports.default = PresenceLabel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL3Jvb21zL1ByZXNlbmNlTGFiZWwudHN4Il0sIm5hbWVzIjpbIlByZXNlbmNlTGFiZWwiLCJSZWFjdCIsIkNvbXBvbmVudCIsImdldER1cmF0aW9uIiwidGltZSIsInQiLCJNYXRoIiwicm91bmQiLCJzIiwibSIsImgiLCJkIiwiZHVyYXRpb24iLCJnZXRQcmV0dHlQcmVzZW5jZSIsInByZXNlbmNlIiwiYWN0aXZlQWdvIiwiY3VycmVudGx5QWN0aXZlIiwidW5kZWZpbmVkIiwicmVuZGVyIiwicHJvcHMiLCJwcmVzZW5jZVN0YXRlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQWdCQTs7QUFFQTs7QUFDQTs7OztJQWNxQkEsYSxXQURwQixnREFBcUIsMkJBQXJCLEMsbUNBQUQsTUFDcUJBLGFBRHJCLFNBQzJDQyxlQUFNQyxTQURqRCxDQUNtRTtBQU0vRDtBQUNBO0FBQ1FDLEVBQUFBLFdBQVcsQ0FBQ0MsSUFBRCxFQUF1QjtBQUN0QyxRQUFJLENBQUNBLElBQUwsRUFBVztBQUNYLFVBQU1DLENBQUMsR0FBR0MsSUFBSSxDQUFDQyxLQUFMLENBQVdILElBQUksR0FBRyxJQUFsQixDQUFWO0FBQ0EsVUFBTUksQ0FBQyxHQUFHSCxDQUFDLEdBQUcsRUFBZDtBQUNBLFVBQU1JLENBQUMsR0FBR0gsSUFBSSxDQUFDQyxLQUFMLENBQVdGLENBQUMsR0FBRyxFQUFmLElBQXFCLEVBQS9CO0FBQ0EsVUFBTUssQ0FBQyxHQUFHSixJQUFJLENBQUNDLEtBQUwsQ0FBV0YsQ0FBQyxJQUFJLEtBQUssRUFBVCxDQUFaLElBQTRCLEVBQXRDO0FBQ0EsVUFBTU0sQ0FBQyxHQUFHTCxJQUFJLENBQUNDLEtBQUwsQ0FBV0YsQ0FBQyxJQUFJLEtBQUssRUFBTCxHQUFVLEVBQWQsQ0FBWixDQUFWOztBQUNBLFFBQUlBLENBQUMsR0FBRyxFQUFSLEVBQVk7QUFDUixVQUFJQSxDQUFDLEdBQUcsQ0FBUixFQUFXO0FBQ1AsZUFBTyx5QkFBRyxlQUFILEVBQW9CO0FBQUVPLFVBQUFBLFFBQVEsRUFBRTtBQUFaLFNBQXBCLENBQVA7QUFDSDs7QUFDRCxhQUFPLHlCQUFHLGVBQUgsRUFBb0I7QUFBRUEsUUFBQUEsUUFBUSxFQUFFSjtBQUFaLE9BQXBCLENBQVA7QUFDSDs7QUFDRCxRQUFJSCxDQUFDLEdBQUcsS0FBSyxFQUFiLEVBQWlCO0FBQ2IsYUFBTyx5QkFBRyxlQUFILEVBQW9CO0FBQUVPLFFBQUFBLFFBQVEsRUFBRUg7QUFBWixPQUFwQixDQUFQO0FBQ0g7O0FBQ0QsUUFBSUosQ0FBQyxHQUFHLEtBQUssRUFBTCxHQUFVLEVBQWxCLEVBQXNCO0FBQ2xCLGFBQU8seUJBQUcsZUFBSCxFQUFvQjtBQUFFTyxRQUFBQSxRQUFRLEVBQUVGO0FBQVosT0FBcEIsQ0FBUDtBQUNIOztBQUNELFdBQU8seUJBQUcsZUFBSCxFQUFvQjtBQUFFRSxNQUFBQSxRQUFRLEVBQUVEO0FBQVosS0FBcEIsQ0FBUDtBQUNIOztBQUVPRSxFQUFBQSxpQkFBaUIsQ0FBQ0MsUUFBRCxFQUFtQkMsU0FBbkIsRUFBc0NDLGVBQXRDLEVBQXdFO0FBQzdGLFFBQUksQ0FBQ0EsZUFBRCxJQUFvQkQsU0FBUyxLQUFLRSxTQUFsQyxJQUErQ0YsU0FBUyxHQUFHLENBQS9ELEVBQWtFO0FBQzlELFlBQU1ILFFBQVEsR0FBRyxLQUFLVCxXQUFMLENBQWlCWSxTQUFqQixDQUFqQjtBQUNBLFVBQUlELFFBQVEsS0FBSyxRQUFqQixFQUEyQixPQUFPLHlCQUFHLHlCQUFILEVBQThCO0FBQUVGLFFBQUFBLFFBQVEsRUFBRUE7QUFBWixPQUE5QixDQUFQO0FBQzNCLFVBQUlFLFFBQVEsS0FBSyxhQUFqQixFQUFnQyxPQUFPLHlCQUFHLHVCQUFILEVBQTRCO0FBQUVGLFFBQUFBLFFBQVEsRUFBRUE7QUFBWixPQUE1QixDQUFQLENBSDhCLENBRzhCOztBQUM1RixVQUFJRSxRQUFRLEtBQUssU0FBakIsRUFBNEIsT0FBTyx5QkFBRywwQkFBSCxFQUErQjtBQUFFRixRQUFBQSxRQUFRLEVBQUVBO0FBQVosT0FBL0IsQ0FBUDtBQUM1QixhQUFPLHlCQUFHLDBCQUFILEVBQStCO0FBQUVBLFFBQUFBLFFBQVEsRUFBRUE7QUFBWixPQUEvQixDQUFQO0FBQ0gsS0FORCxNQU1PO0FBQ0gsVUFBSUUsUUFBUSxLQUFLLFFBQWpCLEVBQTJCLE9BQU8seUJBQUcsUUFBSCxDQUFQO0FBQzNCLFVBQUlBLFFBQVEsS0FBSyxhQUFqQixFQUFnQyxPQUFPLHlCQUFHLE1BQUgsQ0FBUCxDQUY3QixDQUVnRDs7QUFDbkQsVUFBSUEsUUFBUSxLQUFLLFNBQWpCLEVBQTRCLE9BQU8seUJBQUcsU0FBSCxDQUFQO0FBQzVCLGFBQU8seUJBQUcsU0FBSCxDQUFQO0FBQ0g7QUFDSjs7QUFFREksRUFBQUEsTUFBTSxHQUFHO0FBQ0wsd0JBQ0k7QUFBSyxNQUFBLFNBQVMsRUFBQztBQUFmLE9BQ00sS0FBS0wsaUJBQUwsQ0FBdUIsS0FBS00sS0FBTCxDQUFXQyxhQUFsQyxFQUFpRCxLQUFLRCxLQUFMLENBQVdKLFNBQTVELEVBQXVFLEtBQUtJLEtBQUwsQ0FBV0gsZUFBbEYsQ0FETixDQURKO0FBS0g7O0FBbkQ4RCxDLHlEQUN6QztBQUNsQkQsRUFBQUEsU0FBUyxFQUFFLENBQUMsQ0FETTtBQUVsQkssRUFBQUEsYUFBYSxFQUFFO0FBRkcsQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5Db3B5cmlnaHQgMjAxNSwgMjAxNiBPcGVuTWFya2V0IEx0ZFxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IF90IH0gZnJvbSAnLi4vLi4vLi4vbGFuZ3VhZ2VIYW5kbGVyJztcbmltcG9ydCB7IHJlcGxhY2VhYmxlQ29tcG9uZW50IH0gZnJvbSBcIi4uLy4uLy4uL3V0aWxzL3JlcGxhY2VhYmxlQ29tcG9uZW50XCI7XG5cbmludGVyZmFjZSBJUHJvcHMge1xuICAgIC8vIG51bWJlciBvZiBtaWxsaXNlY29uZHMgYWdvIHRoaXMgdXNlciB3YXMgbGFzdCBhY3RpdmUuXG4gICAgLy8gemVybyA9IHVua25vd25cbiAgICBhY3RpdmVBZ28/OiBudW1iZXI7XG4gICAgLy8gaWYgdHJ1ZSwgYWN0aXZlQWdvIGlzIGFuIGFwcHJveGltYXRpb24gYW5kIFwiTm93XCIgc2hvdWxkXG4gICAgLy8gYmUgc2hvd24gaW5zdGVhZFxuICAgIGN1cnJlbnRseUFjdGl2ZT86IGJvb2xlYW47XG4gICAgLy8gb2ZmbGluZSwgb25saW5lLCBldGNcbiAgICBwcmVzZW5jZVN0YXRlPzogc3RyaW5nO1xufVxuXG5AcmVwbGFjZWFibGVDb21wb25lbnQoXCJ2aWV3cy5yb29tcy5QcmVzZW5jZUxhYmVsXCIpXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQcmVzZW5jZUxhYmVsIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PElQcm9wcz4ge1xuICAgIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgICAgIGFjdGl2ZUFnbzogLTEsXG4gICAgICAgIHByZXNlbmNlU3RhdGU6IG51bGwsXG4gICAgfTtcblxuICAgIC8vIFJldHVybiBkdXJhdGlvbiBhcyBhIHN0cmluZyB1c2luZyBhcHByb3ByaWF0ZSB0aW1lIHVuaXRzXG4gICAgLy8gWFhYOiBUaGlzIHdvdWxkIGJlIGJldHRlciBoYW5kbGVkIHVzaW5nIGEgY3VsdHVyZS1hd2FyZSBsaWJyYXJ5LCBidXQgd2UgZG9uJ3QgdXNlIG9uZSB5ZXQuXG4gICAgcHJpdmF0ZSBnZXREdXJhdGlvbih0aW1lOiBudW1iZXIpOiBzdHJpbmcge1xuICAgICAgICBpZiAoIXRpbWUpIHJldHVybjtcbiAgICAgICAgY29uc3QgdCA9IE1hdGgucm91bmQodGltZSAvIDEwMDApO1xuICAgICAgICBjb25zdCBzID0gdCAlIDYwO1xuICAgICAgICBjb25zdCBtID0gTWF0aC5yb3VuZCh0IC8gNjApICUgNjA7XG4gICAgICAgIGNvbnN0IGggPSBNYXRoLnJvdW5kKHQgLyAoNjAgKiA2MCkpICUgMjQ7XG4gICAgICAgIGNvbnN0IGQgPSBNYXRoLnJvdW5kKHQgLyAoNjAgKiA2MCAqIDI0KSk7XG4gICAgICAgIGlmICh0IDwgNjApIHtcbiAgICAgICAgICAgIGlmICh0IDwgMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBfdChcIiUoZHVyYXRpb24pc3NcIiwgeyBkdXJhdGlvbjogMCB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBfdChcIiUoZHVyYXRpb24pc3NcIiwgeyBkdXJhdGlvbjogcyB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodCA8IDYwICogNjApIHtcbiAgICAgICAgICAgIHJldHVybiBfdChcIiUoZHVyYXRpb24pc21cIiwgeyBkdXJhdGlvbjogbSB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodCA8IDI0ICogNjAgKiA2MCkge1xuICAgICAgICAgICAgcmV0dXJuIF90KFwiJShkdXJhdGlvbilzaFwiLCB7IGR1cmF0aW9uOiBoIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfdChcIiUoZHVyYXRpb24pc2RcIiwgeyBkdXJhdGlvbjogZCB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldFByZXR0eVByZXNlbmNlKHByZXNlbmNlOiBzdHJpbmcsIGFjdGl2ZUFnbzogbnVtYmVyLCBjdXJyZW50bHlBY3RpdmU6IGJvb2xlYW4pOiBzdHJpbmcge1xuICAgICAgICBpZiAoIWN1cnJlbnRseUFjdGl2ZSAmJiBhY3RpdmVBZ28gIT09IHVuZGVmaW5lZCAmJiBhY3RpdmVBZ28gPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBkdXJhdGlvbiA9IHRoaXMuZ2V0RHVyYXRpb24oYWN0aXZlQWdvKTtcbiAgICAgICAgICAgIGlmIChwcmVzZW5jZSA9PT0gXCJvbmxpbmVcIikgcmV0dXJuIF90KFwiT25saW5lIGZvciAlKGR1cmF0aW9uKXNcIiwgeyBkdXJhdGlvbjogZHVyYXRpb24gfSk7XG4gICAgICAgICAgICBpZiAocHJlc2VuY2UgPT09IFwidW5hdmFpbGFibGVcIikgcmV0dXJuIF90KFwiSWRsZSBmb3IgJShkdXJhdGlvbilzXCIsIHsgZHVyYXRpb246IGR1cmF0aW9uIH0pOyAvLyBYWFg6IGlzIHRoaXMgYWN0dWFsbHkgcmlnaHQ/XG4gICAgICAgICAgICBpZiAocHJlc2VuY2UgPT09IFwib2ZmbGluZVwiKSByZXR1cm4gX3QoXCJPZmZsaW5lIGZvciAlKGR1cmF0aW9uKXNcIiwgeyBkdXJhdGlvbjogZHVyYXRpb24gfSk7XG4gICAgICAgICAgICByZXR1cm4gX3QoXCJVbmtub3duIGZvciAlKGR1cmF0aW9uKXNcIiwgeyBkdXJhdGlvbjogZHVyYXRpb24gfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAocHJlc2VuY2UgPT09IFwib25saW5lXCIpIHJldHVybiBfdChcIk9ubGluZVwiKTtcbiAgICAgICAgICAgIGlmIChwcmVzZW5jZSA9PT0gXCJ1bmF2YWlsYWJsZVwiKSByZXR1cm4gX3QoXCJJZGxlXCIpOyAvLyBYWFg6IGlzIHRoaXMgYWN0dWFsbHkgcmlnaHQ/XG4gICAgICAgICAgICBpZiAocHJlc2VuY2UgPT09IFwib2ZmbGluZVwiKSByZXR1cm4gX3QoXCJPZmZsaW5lXCIpO1xuICAgICAgICAgICAgcmV0dXJuIF90KFwiVW5rbm93blwiKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibXhfUHJlc2VuY2VMYWJlbFwiPlxuICAgICAgICAgICAgICAgIHsgdGhpcy5nZXRQcmV0dHlQcmVzZW5jZSh0aGlzLnByb3BzLnByZXNlbmNlU3RhdGUsIHRoaXMucHJvcHMuYWN0aXZlQWdvLCB0aGlzLnByb3BzLmN1cnJlbnRseUFjdGl2ZSkgfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgfVxufVxuIl19