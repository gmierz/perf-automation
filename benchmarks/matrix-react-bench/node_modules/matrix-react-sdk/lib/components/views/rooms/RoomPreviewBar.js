"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _event = require("matrix-js-sdk/src/@types/event");

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _classnames = _interopRequireDefault(require("classnames"));

var _languageHandler = require("../../../languageHandler");

var _SdkConfig = _interopRequireDefault(require("../../../SdkConfig"));

var _IdentityAuthClient = _interopRequireDefault(require("../../../IdentityAuthClient"));

var _CommunityPrototypeStore = require("../../../stores/CommunityPrototypeStore");

var _AsyncStore = require("../../../stores/AsyncStore");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _InviteReason = _interopRequireDefault(require("../elements/InviteReason"));

var _Spinner = _interopRequireDefault(require("../elements/Spinner"));

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

var _UIFeature = require("../../../settings/UIFeature");

var _SettingsStore = _interopRequireDefault(require("../../../settings/SettingsStore"));

var _RoomAvatar = _interopRequireDefault(require("../avatars/RoomAvatar"));

var _dec, _class, _class2, _temp;

const MemberEventHtmlReasonField = "io.element.html_reason";
var MessageCase;

(function (MessageCase) {
  MessageCase["NotLoggedIn"] = "NotLoggedIn";
  MessageCase["Joining"] = "Joining";
  MessageCase["Loading"] = "Loading";
  MessageCase["Rejecting"] = "Rejecting";
  MessageCase["Kicked"] = "Kicked";
  MessageCase["Banned"] = "Banned";
  MessageCase["OtherThreePIDError"] = "OtherThreePIDError";
  MessageCase["InvitedEmailNotFoundInAccount"] = "InvitedEmailNotFoundInAccount";
  MessageCase["InvitedEmailNoIdentityServer"] = "InvitedEmailNoIdentityServer";
  MessageCase["InvitedEmailMismatch"] = "InvitedEmailMismatch";
  MessageCase["Invite"] = "Invite";
  MessageCase["ViewingRoom"] = "ViewingRoom";
  MessageCase["RoomNotFound"] = "RoomNotFound";
  MessageCase["OtherError"] = "OtherError";
})(MessageCase || (MessageCase = {}));

let RoomPreviewBar = (_dec = (0, _replaceableComponent.replaceableComponent)("views.rooms.RoomPreviewBar"), _dec(_class = (_temp = _class2 = class RoomPreviewBar extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "onCommunityUpdate", roomId => {
      if (this.props.room && this.props.room.roomId !== roomId) {
        return;
      }

      this.forceUpdate(); // we have nothing to update
    });
    (0, _defineProperty2.default)(this, "onLoginClick", () => {
      _dispatcher.default.dispatch({
        action: 'start_login',
        screenAfterLogin: this.makeScreenAfterLogin()
      });
    });
    (0, _defineProperty2.default)(this, "onRegisterClick", () => {
      _dispatcher.default.dispatch({
        action: 'start_registration',
        screenAfterLogin: this.makeScreenAfterLogin()
      });
    });
    this.state = {
      busy: false
    };
  }

  componentDidMount() {
    this.checkInvitedEmail();

    _CommunityPrototypeStore.CommunityPrototypeStore.instance.on(_AsyncStore.UPDATE_EVENT, this.onCommunityUpdate);
  }

  componentDidUpdate(prevProps, prevState) {
    if (this.props.invitedEmail !== prevProps.invitedEmail || this.props.inviterName !== prevProps.inviterName) {
      this.checkInvitedEmail();
    }
  }

  componentWillUnmount() {
    _CommunityPrototypeStore.CommunityPrototypeStore.instance.off(_AsyncStore.UPDATE_EVENT, this.onCommunityUpdate);
  }

  async checkInvitedEmail() {
    // If this is an invite and we've been told what email address was
    // invited, fetch the user's account emails and discovery bindings so we
    // can check them against the email that was invited.
    if (this.props.inviterName && this.props.invitedEmail) {
      this.setState({
        busy: true
      });

      try {
        // Gather the account 3PIDs
        const account3pids = await _MatrixClientPeg.MatrixClientPeg.get().getThreePids();
        this.setState({
          accountEmails: account3pids.threepids.filter(b => b.medium === 'email').map(b => b.address)
        }); // If we have an IS connected, use that to lookup the email and
        // check the bound MXID.

        if (!_MatrixClientPeg.MatrixClientPeg.get().getIdentityServerUrl()) {
          this.setState({
            busy: false
          });
          return;
        }

        const authClient = new _IdentityAuthClient.default();
        const identityAccessToken = await authClient.getAccessToken();
        const result = await _MatrixClientPeg.MatrixClientPeg.get().lookupThreePid('email', this.props.invitedEmail, undefined
        /* callback */
        , identityAccessToken);
        this.setState({
          invitedEmailMxid: result.mxid
        });
      } catch (err) {
        this.setState({
          threePidFetchError: err
        });
      }

      this.setState({
        busy: false
      });
    }
  }

  getMessageCase() {
    const isGuest = _MatrixClientPeg.MatrixClientPeg.get().isGuest();

    if (isGuest) {
      return MessageCase.NotLoggedIn;
    }

    const myMember = this.getMyMember();

    if (myMember) {
      if (myMember.isKicked()) {
        return MessageCase.Kicked;
      } else if (myMember.membership === "ban") {
        return MessageCase.Banned;
      }
    }

    if (this.props.joining) {
      return MessageCase.Joining;
    } else if (this.props.rejecting) {
      return MessageCase.Rejecting;
    } else if (this.props.loading || this.state.busy) {
      return MessageCase.Loading;
    }

    if (this.props.inviterName) {
      if (this.props.invitedEmail) {
        if (this.state.threePidFetchError) {
          return MessageCase.OtherThreePIDError;
        } else if (this.state.accountEmails && !this.state.accountEmails.includes(this.props.invitedEmail)) {
          return MessageCase.InvitedEmailNotFoundInAccount;
        } else if (!_MatrixClientPeg.MatrixClientPeg.get().getIdentityServerUrl()) {
          return MessageCase.InvitedEmailNoIdentityServer;
        } else if (this.state.invitedEmailMxid != _MatrixClientPeg.MatrixClientPeg.get().getUserId()) {
          return MessageCase.InvitedEmailMismatch;
        }
      }

      return MessageCase.Invite;
    } else if (this.props.error) {
      if (this.props.error.errcode == 'M_NOT_FOUND') {
        return MessageCase.RoomNotFound;
      } else {
        return MessageCase.OtherError;
      }
    } else {
      return MessageCase.ViewingRoom;
    }
  }

  getKickOrBanInfo() {
    const myMember = this.getMyMember();

    if (!myMember) {
      return {};
    }

    const kickerMember = this.props.room.currentState.getMember(myMember.events.member.getSender());
    const memberName = kickerMember ? kickerMember.name : myMember.events.member.getSender();
    const reason = myMember.events.member.getContent().reason;
    return {
      memberName,
      reason
    };
  }

  joinRule() {
    var _this$props$room, _this$props$room$curr;

    return (_this$props$room = this.props.room) === null || _this$props$room === void 0 ? void 0 : (_this$props$room$curr = _this$props$room.currentState.getStateEvents(_event.EventType.RoomJoinRules, "")) === null || _this$props$room$curr === void 0 ? void 0 : _this$props$room$curr.getContent().join_rule;
  }

  communityProfile() {
    if (this.props.room) return _CommunityPrototypeStore.CommunityPrototypeStore.instance.getInviteProfile(this.props.room.roomId);
    return {
      displayName: null,
      avatarMxc: null
    };
  }

  roomName(atStart = false) {
    let name = this.props.room ? this.props.room.name : this.props.roomAlias;
    const profile = this.communityProfile();
    if (profile.displayName) name = profile.displayName;

    if (name) {
      return name;
    } else if (atStart) {
      return (0, _languageHandler._t)("This room");
    } else {
      return (0, _languageHandler._t)("this room");
    }
  }

  getMyMember() {
    var _this$props$room2;

    return (_this$props$room2 = this.props.room) === null || _this$props$room2 === void 0 ? void 0 : _this$props$room2.getMember(_MatrixClientPeg.MatrixClientPeg.get().getUserId());
  }

  getInviteMember() {
    const {
      room
    } = this.props;

    if (!room) {
      return;
    }

    const myUserId = _MatrixClientPeg.MatrixClientPeg.get().getUserId();

    const inviteEvent = room.currentState.getMember(myUserId);

    if (!inviteEvent) {
      return;
    }

    const inviterUserId = inviteEvent.events.member.getSender();
    return room.currentState.getMember(inviterUserId);
  }

  isDMInvite() {
    const myMember = this.getMyMember();

    if (!myMember) {
      return false;
    }

    const memberEvent = myMember.events.member;
    const memberContent = memberEvent.getContent();
    return memberContent.membership === "invite" && memberContent.is_direct;
  }

  makeScreenAfterLogin() {
    return {
      screen: 'room',
      params: {
        email: this.props.invitedEmail,
        signurl: this.props.signUrl,
        room_name: this.props.oobData ? this.props.oobData.room_name : null,
        room_avatar_url: this.props.oobData ? this.props.oobData.avatarUrl : null,
        inviter_name: this.props.oobData ? this.props.oobData.inviterName : null
      }
    };
  }

  render() {
    const brand = _SdkConfig.default.get().brand;

    let showSpinner = false;
    let title;
    let subTitle;
    let reasonElement;
    let primaryActionHandler;
    let primaryActionLabel;
    let secondaryActionHandler;
    let secondaryActionLabel;
    let footer;
    const extraComponents = [];
    const messageCase = this.getMessageCase();

    switch (messageCase) {
      case MessageCase.Joining:
        {
          var _this$props$oobData;

          title = ((_this$props$oobData = this.props.oobData) === null || _this$props$oobData === void 0 ? void 0 : _this$props$oobData.roomType) === _event.RoomType.Space ? (0, _languageHandler._t)("Joining space …") : (0, _languageHandler._t)("Joining room …");
          showSpinner = true;
          break;
        }

      case MessageCase.Loading:
        {
          title = (0, _languageHandler._t)("Loading …");
          showSpinner = true;
          break;
        }

      case MessageCase.Rejecting:
        {
          title = (0, _languageHandler._t)("Rejecting invite …");
          showSpinner = true;
          break;
        }

      case MessageCase.NotLoggedIn:
        {
          title = (0, _languageHandler._t)("Join the conversation with an account");

          if (_SettingsStore.default.getValue(_UIFeature.UIFeature.Registration)) {
            primaryActionLabel = (0, _languageHandler._t)("Sign Up");
            primaryActionHandler = this.onRegisterClick;
          }

          secondaryActionLabel = (0, _languageHandler._t)("Sign In");
          secondaryActionHandler = this.onLoginClick;

          if (this.props.previewLoading) {
            footer = /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_Spinner.default, {
              w: 20,
              h: 20
            }), (0, _languageHandler._t)("Loading room preview"));
          }

          break;
        }

      case MessageCase.Kicked:
        {
          const {
            memberName,
            reason
          } = this.getKickOrBanInfo();
          title = (0, _languageHandler._t)("You were kicked from %(roomName)s by %(memberName)s", {
            memberName,
            roomName: this.roomName()
          });
          subTitle = reason ? (0, _languageHandler._t)("Reason: %(reason)s", {
            reason
          }) : null;

          if (this.joinRule() === "invite") {
            primaryActionLabel = (0, _languageHandler._t)("Forget this room");
            primaryActionHandler = this.props.onForgetClick;
          } else {
            primaryActionLabel = (0, _languageHandler._t)("Re-join");
            primaryActionHandler = this.props.onJoinClick;
            secondaryActionLabel = (0, _languageHandler._t)("Forget this room");
            secondaryActionHandler = this.props.onForgetClick;
          }

          break;
        }

      case MessageCase.Banned:
        {
          const {
            memberName,
            reason
          } = this.getKickOrBanInfo();
          title = (0, _languageHandler._t)("You were banned from %(roomName)s by %(memberName)s", {
            memberName,
            roomName: this.roomName()
          });
          subTitle = reason ? (0, _languageHandler._t)("Reason: %(reason)s", {
            reason
          }) : null;
          primaryActionLabel = (0, _languageHandler._t)("Forget this room");
          primaryActionHandler = this.props.onForgetClick;
          break;
        }

      case MessageCase.OtherThreePIDError:
        {
          title = (0, _languageHandler._t)("Something went wrong with your invite to %(roomName)s", {
            roomName: this.roomName()
          });
          const joinRule = this.joinRule();
          const errCodeMessage = (0, _languageHandler._t)("An error (%(errcode)s) was returned while trying to validate your " + "invite. You could try to pass this information on to a room admin.", {
            errcode: this.state.threePidFetchError.errcode || (0, _languageHandler._t)("unknown error code")
          });

          switch (joinRule) {
            case "invite":
              subTitle = [(0, _languageHandler._t)("You can only join it with a working invite."), errCodeMessage];
              primaryActionLabel = (0, _languageHandler._t)("Try to join anyway");
              primaryActionHandler = this.props.onJoinClick;
              break;

            case "public":
              subTitle = (0, _languageHandler._t)("You can still join it because this is a public room.");
              primaryActionLabel = (0, _languageHandler._t)("Join the discussion");
              primaryActionHandler = this.props.onJoinClick;
              break;

            default:
              subTitle = errCodeMessage;
              primaryActionLabel = (0, _languageHandler._t)("Try to join anyway");
              primaryActionHandler = this.props.onJoinClick;
              break;
          }

          break;
        }

      case MessageCase.InvitedEmailNotFoundInAccount:
        {
          title = (0, _languageHandler._t)("This invite to %(roomName)s was sent to %(email)s which is not " + "associated with your account", {
            roomName: this.roomName(),
            email: this.props.invitedEmail
          });
          subTitle = (0, _languageHandler._t)("Link this email with your account in Settings to receive invites " + "directly in %(brand)s.", {
            brand
          });
          primaryActionLabel = (0, _languageHandler._t)("Join the discussion");
          primaryActionHandler = this.props.onJoinClick;
          break;
        }

      case MessageCase.InvitedEmailNoIdentityServer:
        {
          title = (0, _languageHandler._t)("This invite to %(roomName)s was sent to %(email)s", {
            roomName: this.roomName(),
            email: this.props.invitedEmail
          });
          subTitle = (0, _languageHandler._t)("Use an identity server in Settings to receive invites directly in %(brand)s.", {
            brand
          });
          primaryActionLabel = (0, _languageHandler._t)("Join the discussion");
          primaryActionHandler = this.props.onJoinClick;
          break;
        }

      case MessageCase.InvitedEmailMismatch:
        {
          title = (0, _languageHandler._t)("This invite to %(roomName)s was sent to %(email)s", {
            roomName: this.roomName(),
            email: this.props.invitedEmail
          });
          subTitle = (0, _languageHandler._t)("Share this email in Settings to receive invites directly in %(brand)s.", {
            brand
          });
          primaryActionLabel = (0, _languageHandler._t)("Join the discussion");
          primaryActionHandler = this.props.onJoinClick;
          break;
        }

      case MessageCase.Invite:
        {
          const oobData = Object.assign({}, this.props.oobData, {
            avatarUrl: this.communityProfile().avatarMxc
          });

          const avatar = /*#__PURE__*/_react.default.createElement(_RoomAvatar.default, {
            room: this.props.room,
            oobData: oobData
          });

          const inviteMember = this.getInviteMember();
          let inviterElement;

          if (inviteMember) {
            inviterElement = /*#__PURE__*/_react.default.createElement("span", null, /*#__PURE__*/_react.default.createElement("span", {
              className: "mx_RoomPreviewBar_inviter"
            }, inviteMember.rawDisplayName), " (", inviteMember.userId, ")");
          } else {
            inviterElement = /*#__PURE__*/_react.default.createElement("span", {
              className: "mx_RoomPreviewBar_inviter"
            }, this.props.inviterName);
          }

          const isDM = this.isDMInvite();

          if (isDM) {
            title = (0, _languageHandler._t)("Do you want to chat with %(user)s?", {
              user: inviteMember.name
            });
            subTitle = [avatar, (0, _languageHandler._t)("<userName/> wants to chat", {}, {
              userName: () => inviterElement
            })];
            primaryActionLabel = (0, _languageHandler._t)("Start chatting");
          } else {
            title = (0, _languageHandler._t)("Do you want to join %(roomName)s?", {
              roomName: this.roomName()
            });
            subTitle = [avatar, (0, _languageHandler._t)("<userName/> invited you", {}, {
              userName: () => inviterElement
            })];
            primaryActionLabel = (0, _languageHandler._t)("Accept");
          }

          const myUserId = _MatrixClientPeg.MatrixClientPeg.get().getUserId();

          const memberEventContent = this.props.room.currentState.getMember(myUserId).events.member.getContent();

          if (memberEventContent.reason) {
            reasonElement = /*#__PURE__*/_react.default.createElement(_InviteReason.default, {
              reason: memberEventContent.reason,
              htmlReason: memberEventContent[MemberEventHtmlReasonField]
            });
          }

          primaryActionHandler = this.props.onJoinClick;
          secondaryActionLabel = (0, _languageHandler._t)("Reject");
          secondaryActionHandler = this.props.onRejectClick;

          if (this.props.onRejectAndIgnoreClick) {
            extraComponents.push( /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
              kind: "secondary",
              onClick: this.props.onRejectAndIgnoreClick,
              key: "ignore"
            }, (0, _languageHandler._t)("Reject & Ignore user")));
          }

          break;
        }

      case MessageCase.ViewingRoom:
        {
          if (this.props.canPreview) {
            title = (0, _languageHandler._t)("You're previewing %(roomName)s. Want to join it?", {
              roomName: this.roomName()
            });
          } else {
            title = (0, _languageHandler._t)("%(roomName)s can't be previewed. Do you want to join it?", {
              roomName: this.roomName(true)
            });
          }

          primaryActionLabel = (0, _languageHandler._t)("Join the discussion");
          primaryActionHandler = this.props.onJoinClick;
          break;
        }

      case MessageCase.RoomNotFound:
        {
          title = (0, _languageHandler._t)("%(roomName)s does not exist.", {
            roomName: this.roomName(true)
          });
          subTitle = (0, _languageHandler._t)("This room doesn't exist. Are you sure you're at the right place?");
          break;
        }

      case MessageCase.OtherError:
        {
          title = (0, _languageHandler._t)("%(roomName)s is not accessible at this time.", {
            roomName: this.roomName(true)
          });
          subTitle = [(0, _languageHandler._t)("Try again later, or ask a room admin to check if you have access."), (0, _languageHandler._t)("%(errcode)s was returned while trying to access the room. " + "If you think you're seeing this message in error, please " + "<issueLink>submit a bug report</issueLink>.", {
            errcode: this.props.error.errcode
          }, {
            issueLink: label => /*#__PURE__*/_react.default.createElement("a", {
              href: "https://github.com/vector-im/element-web/issues/new/choose",
              target: "_blank",
              rel: "noreferrer noopener"
            }, label)
          })];
          break;
        }
    }

    let subTitleElements;

    if (subTitle) {
      if (!Array.isArray(subTitle)) {
        subTitle = [subTitle];
      }

      subTitleElements = subTitle.map((t, i) => /*#__PURE__*/_react.default.createElement("p", {
        key: `subTitle${i}`
      }, t));
    }

    let titleElement;

    if (showSpinner) {
      titleElement = /*#__PURE__*/_react.default.createElement("h3", {
        className: "mx_RoomPreviewBar_spinnerTitle"
      }, /*#__PURE__*/_react.default.createElement(_Spinner.default, null), title);
    } else {
      titleElement = /*#__PURE__*/_react.default.createElement("h3", null, title);
    }

    let primaryButton;

    if (primaryActionHandler) {
      primaryButton = /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        kind: "primary",
        onClick: primaryActionHandler
      }, primaryActionLabel);
    }

    let secondaryButton;

    if (secondaryActionHandler) {
      secondaryButton = /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        kind: "secondary",
        onClick: secondaryActionHandler
      }, secondaryActionLabel);
    }

    const classes = (0, _classnames.default)("mx_RoomPreviewBar", "dark-panel", `mx_RoomPreviewBar_${messageCase}`, {
      "mx_RoomPreviewBar_panel": this.props.canPreview,
      "mx_RoomPreviewBar_dialog": !this.props.canPreview
    });
    return /*#__PURE__*/_react.default.createElement("div", {
      className: classes
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_RoomPreviewBar_message"
    }, titleElement, subTitleElements), reasonElement, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_RoomPreviewBar_actions"
    }, secondaryButton, extraComponents, primaryButton), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_RoomPreviewBar_footer"
    }, footer));
  }

}, (0, _defineProperty2.default)(_class2, "defaultProps", {
  onJoinClick() {}

}), _temp)) || _class);
exports.default = RoomPreviewBar;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,