"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _Modal = _interopRequireDefault(require("../../../Modal"));

var _languageHandler = require("../../../languageHandler");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _RoomUpgradeDialog = _interopRequireDefault(require("../dialogs/RoomUpgradeDialog"));

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

var _MatrixClientContext = _interopRequireDefault(require("../../../contexts/MatrixClientContext"));

var _dec, _class, _class2, _temp;

let RoomUpgradeWarningBar = (_dec = (0, _replaceableComponent.replaceableComponent)("views.rooms.RoomUpgradeWarningBar"), _dec(_class = (_temp = _class2 = class RoomUpgradeWarningBar extends _react.default.PureComponent {
  constructor(props, context) {
    super(props, context);
    (0, _defineProperty2.default)(this, "context", void 0);
    (0, _defineProperty2.default)(this, "onStateEvents", (event, state) => {
      if (!this.props.room || event.getRoomId() !== this.props.room.roomId) {
        return;
      }

      if (event.getType() !== "m.room.tombstone") return;
      const tombstone = this.props.room.currentState.getStateEvents("m.room.tombstone", "");
      this.setState({
        upgraded: tombstone && tombstone.getContent().replacement_room
      });
    });
    (0, _defineProperty2.default)(this, "onUpgradeClick", () => {
      _Modal.default.createTrackedDialog('Upgrade Room Version', '', _RoomUpgradeDialog.default, {
        room: this.props.room
      });
    });

    const _tombstone = this.props.room.currentState.getStateEvents("m.room.tombstone", "");

    this.state = {
      upgraded: _tombstone === null || _tombstone === void 0 ? void 0 : _tombstone.getContent().replacement_room
    };
  }

  componentDidMount() {
    this.context.on("RoomState.events", this.onStateEvents);
  }

  componentWillUnmount() {
    this.context.removeListener("RoomState.events", this.onStateEvents);
  }

  render() {
    let doUpgradeWarnings = /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_RoomUpgradeWarningBar_body"
    }, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Upgrading this room will shut down the current instance of the room and create " + "an upgraded room with the same name.")), /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("<b>Warning</b>: Upgrading a room will <i>not automatically migrate room members " + "to the new version of the room.</i> We'll post a link to the new room in the old " + "version of the room - room members will have to click this link to join the new room.", {}, {
      "b": sub => /*#__PURE__*/_react.default.createElement("b", null, sub),
      "i": sub => /*#__PURE__*/_react.default.createElement("i", null, sub)
    }))), /*#__PURE__*/_react.default.createElement("p", {
      className: "mx_RoomUpgradeWarningBar_upgradelink"
    }, /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      onClick: this.onUpgradeClick
    }, (0, _languageHandler._t)("Upgrade this room to the recommended room version"))));

    if (this.state.upgraded) {
      doUpgradeWarnings = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_RoomUpgradeWarningBar_body"
      }, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("This room has already been upgraded.")));
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_RoomUpgradeWarningBar"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_RoomUpgradeWarningBar_wrapped"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_RoomUpgradeWarningBar_header"
    }, (0, _languageHandler._t)("This room is running room version <roomVersion />, which this homeserver has " + "marked as <i>unstable</i>.", {}, {
      "roomVersion": () => /*#__PURE__*/_react.default.createElement("code", null, this.props.room.getVersion()),
      "i": sub => /*#__PURE__*/_react.default.createElement("i", null, sub)
    })), doUpgradeWarnings, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_RoomUpgradeWarningBar_small"
    }, (0, _languageHandler._t)("Only room administrators will see this warning"))));
  }

}, (0, _defineProperty2.default)(_class2, "contextType", _MatrixClientContext.default), _temp)) || _class);
exports.default = RoomUpgradeWarningBar;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,