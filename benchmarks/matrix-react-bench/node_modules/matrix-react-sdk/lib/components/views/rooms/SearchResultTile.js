"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _RoomContext = _interopRequireDefault(require("../../../contexts/RoomContext"));

var _SettingsStore = _interopRequireDefault(require("../../../settings/SettingsStore"));

var _UIFeature = require("../../../settings/UIFeature");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _DateSeparator = _interopRequireDefault(require("../messages/DateSeparator"));

var _EventTile = _interopRequireWildcard(require("./EventTile"));

var _dec, _class, _class2, _temp;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

let SearchResultTile = (_dec = (0, _replaceableComponent.replaceableComponent)("views.rooms.SearchResultTile"), _dec(_class = (_temp = _class2 = class SearchResultTile extends _react.default.Component {
  render() {
    const result = this.props.searchResult;
    const mxEv = result.context.getEvent();
    const eventId = mxEv.getId();
    const ts1 = mxEv.getTs();
    const ret = [/*#__PURE__*/_react.default.createElement(_DateSeparator.default, {
      key: ts1 + "-search",
      ts: ts1
    })];

    const layout = _SettingsStore.default.getValue("layout");

    const isTwelveHour = _SettingsStore.default.getValue("showTwelveHourTimestamps");

    const alwaysShowTimestamps = _SettingsStore.default.getValue("alwaysShowTimestamps");

    const enableFlair = _SettingsStore.default.getValue(_UIFeature.UIFeature.Flair);

    const timeline = result.context.getTimeline();

    for (let j = 0; j < timeline.length; j++) {
      var _this$context;

      const ev = timeline[j];
      let highlights;
      const contextual = j != result.context.getOurEventIndex();

      if (!contextual) {
        highlights = this.props.searchHighlights;
      }

      if ((0, _EventTile.haveTileForEvent)(ev, (_this$context = this.context) === null || _this$context === void 0 ? void 0 : _this$context.showHiddenEventsInTimeline)) {
        ret.push( /*#__PURE__*/_react.default.createElement(_EventTile.default, {
          key: `${eventId}+${j}`,
          mxEvent: ev,
          layout: layout,
          contextual: contextual,
          highlights: highlights,
          permalinkCreator: this.props.permalinkCreator,
          highlightLink: this.props.resultLink,
          onHeightChanged: this.props.onHeightChanged,
          isTwelveHour: isTwelveHour,
          alwaysShowTimestamps: alwaysShowTimestamps,
          enableFlair: enableFlair
        }));
      }
    }

    return /*#__PURE__*/_react.default.createElement("li", {
      "data-scroll-tokens": eventId
    }, ret);
  }

}, (0, _defineProperty2.default)(_class2, "contextType", _RoomContext.default), _temp)) || _class);
exports.default = SearchResultTile;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL3Jvb21zL1NlYXJjaFJlc3VsdFRpbGUudHN4Il0sIm5hbWVzIjpbIlNlYXJjaFJlc3VsdFRpbGUiLCJSZWFjdCIsIkNvbXBvbmVudCIsInJlbmRlciIsInJlc3VsdCIsInByb3BzIiwic2VhcmNoUmVzdWx0IiwibXhFdiIsImNvbnRleHQiLCJnZXRFdmVudCIsImV2ZW50SWQiLCJnZXRJZCIsInRzMSIsImdldFRzIiwicmV0IiwibGF5b3V0IiwiU2V0dGluZ3NTdG9yZSIsImdldFZhbHVlIiwiaXNUd2VsdmVIb3VyIiwiYWx3YXlzU2hvd1RpbWVzdGFtcHMiLCJlbmFibGVGbGFpciIsIlVJRmVhdHVyZSIsIkZsYWlyIiwidGltZWxpbmUiLCJnZXRUaW1lbGluZSIsImoiLCJsZW5ndGgiLCJldiIsImhpZ2hsaWdodHMiLCJjb250ZXh0dWFsIiwiZ2V0T3VyRXZlbnRJbmRleCIsInNlYXJjaEhpZ2hsaWdodHMiLCJzaG93SGlkZGVuRXZlbnRzSW5UaW1lbGluZSIsInB1c2giLCJwZXJtYWxpbmtDcmVhdG9yIiwicmVzdWx0TGluayIsIm9uSGVpZ2h0Q2hhbmdlZCIsIlJvb21Db250ZXh0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQWlCQTs7QUFFQTs7QUFDQTs7QUFDQTs7QUFFQTs7QUFDQTs7QUFDQTs7Ozs7Ozs7SUFjcUJBLGdCLFdBRHBCLGdEQUFxQiw4QkFBckIsQyxtQ0FBRCxNQUNxQkEsZ0JBRHJCLFNBQzhDQyxlQUFNQyxTQURwRCxDQUNzRTtBQUczREMsRUFBQUEsTUFBTSxHQUFHO0FBQ1osVUFBTUMsTUFBTSxHQUFHLEtBQUtDLEtBQUwsQ0FBV0MsWUFBMUI7QUFDQSxVQUFNQyxJQUFJLEdBQUdILE1BQU0sQ0FBQ0ksT0FBUCxDQUFlQyxRQUFmLEVBQWI7QUFDQSxVQUFNQyxPQUFPLEdBQUdILElBQUksQ0FBQ0ksS0FBTCxFQUFoQjtBQUVBLFVBQU1DLEdBQUcsR0FBR0wsSUFBSSxDQUFDTSxLQUFMLEVBQVo7QUFDQSxVQUFNQyxHQUFHLEdBQUcsY0FBQyw2QkFBQyxzQkFBRDtBQUFlLE1BQUEsR0FBRyxFQUFFRixHQUFHLEdBQUcsU0FBMUI7QUFBcUMsTUFBQSxFQUFFLEVBQUVBO0FBQXpDLE1BQUQsQ0FBWjs7QUFDQSxVQUFNRyxNQUFNLEdBQUdDLHVCQUFjQyxRQUFkLENBQXVCLFFBQXZCLENBQWY7O0FBQ0EsVUFBTUMsWUFBWSxHQUFHRix1QkFBY0MsUUFBZCxDQUF1QiwwQkFBdkIsQ0FBckI7O0FBQ0EsVUFBTUUsb0JBQW9CLEdBQUdILHVCQUFjQyxRQUFkLENBQXVCLHNCQUF2QixDQUE3Qjs7QUFDQSxVQUFNRyxXQUFXLEdBQUdKLHVCQUFjQyxRQUFkLENBQXVCSSxxQkFBVUMsS0FBakMsQ0FBcEI7O0FBRUEsVUFBTUMsUUFBUSxHQUFHbkIsTUFBTSxDQUFDSSxPQUFQLENBQWVnQixXQUFmLEVBQWpCOztBQUNBLFNBQUssSUFBSUMsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR0YsUUFBUSxDQUFDRyxNQUE3QixFQUFxQ0QsQ0FBQyxFQUF0QyxFQUEwQztBQUFBOztBQUN0QyxZQUFNRSxFQUFFLEdBQUdKLFFBQVEsQ0FBQ0UsQ0FBRCxDQUFuQjtBQUNBLFVBQUlHLFVBQUo7QUFDQSxZQUFNQyxVQUFVLEdBQUlKLENBQUMsSUFBSXJCLE1BQU0sQ0FBQ0ksT0FBUCxDQUFlc0IsZ0JBQWYsRUFBekI7O0FBQ0EsVUFBSSxDQUFDRCxVQUFMLEVBQWlCO0FBQ2JELFFBQUFBLFVBQVUsR0FBRyxLQUFLdkIsS0FBTCxDQUFXMEIsZ0JBQXhCO0FBQ0g7O0FBQ0QsVUFBSSxpQ0FBaUJKLEVBQWpCLG1CQUFxQixLQUFLbkIsT0FBMUIsa0RBQXFCLGNBQWN3QiwwQkFBbkMsQ0FBSixFQUFvRTtBQUNoRWxCLFFBQUFBLEdBQUcsQ0FBQ21CLElBQUosZUFDSSw2QkFBQyxrQkFBRDtBQUNJLFVBQUEsR0FBRyxFQUFHLEdBQUV2QixPQUFRLElBQUdlLENBQUUsRUFEekI7QUFFSSxVQUFBLE9BQU8sRUFBRUUsRUFGYjtBQUdJLFVBQUEsTUFBTSxFQUFFWixNQUhaO0FBSUksVUFBQSxVQUFVLEVBQUVjLFVBSmhCO0FBS0ksVUFBQSxVQUFVLEVBQUVELFVBTGhCO0FBTUksVUFBQSxnQkFBZ0IsRUFBRSxLQUFLdkIsS0FBTCxDQUFXNkIsZ0JBTmpDO0FBT0ksVUFBQSxhQUFhLEVBQUUsS0FBSzdCLEtBQUwsQ0FBVzhCLFVBUDlCO0FBUUksVUFBQSxlQUFlLEVBQUUsS0FBSzlCLEtBQUwsQ0FBVytCLGVBUmhDO0FBU0ksVUFBQSxZQUFZLEVBQUVsQixZQVRsQjtBQVVJLFVBQUEsb0JBQW9CLEVBQUVDLG9CQVYxQjtBQVdJLFVBQUEsV0FBVyxFQUFFQztBQVhqQixVQURKO0FBZUg7QUFDSjs7QUFFRCx3QkFBTztBQUFJLDRCQUFvQlY7QUFBeEIsT0FBbUNJLEdBQW5DLENBQVA7QUFDSDs7QUEzQ2lFLEMsd0RBQzdDdUIsb0IiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuQ29weXJpZ2h0IDIwMTUgT3Blbk1hcmtldCBMdGRcbkNvcHlyaWdodCAyMDE5IFRoZSBNYXRyaXgub3JnIEZvdW5kYXRpb24gQy5JLkMuXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgU2VhcmNoUmVzdWx0IH0gZnJvbSBcIm1hdHJpeC1qcy1zZGsvc3JjL21vZGVscy9zZWFyY2gtcmVzdWx0XCI7XG5pbXBvcnQgUm9vbUNvbnRleHQgZnJvbSBcIi4uLy4uLy4uL2NvbnRleHRzL1Jvb21Db250ZXh0XCI7XG5pbXBvcnQgU2V0dGluZ3NTdG9yZSBmcm9tIFwiLi4vLi4vLi4vc2V0dGluZ3MvU2V0dGluZ3NTdG9yZVwiO1xuaW1wb3J0IHsgVUlGZWF0dXJlIH0gZnJvbSBcIi4uLy4uLy4uL3NldHRpbmdzL1VJRmVhdHVyZVwiO1xuaW1wb3J0IHsgUm9vbVBlcm1hbGlua0NyZWF0b3IgfSBmcm9tICcuLi8uLi8uLi91dGlscy9wZXJtYWxpbmtzL1Blcm1hbGlua3MnO1xuaW1wb3J0IHsgcmVwbGFjZWFibGVDb21wb25lbnQgfSBmcm9tIFwiLi4vLi4vLi4vdXRpbHMvcmVwbGFjZWFibGVDb21wb25lbnRcIjtcbmltcG9ydCBEYXRlU2VwYXJhdG9yIGZyb20gXCIuLi9tZXNzYWdlcy9EYXRlU2VwYXJhdG9yXCI7XG5pbXBvcnQgRXZlbnRUaWxlLCB7IGhhdmVUaWxlRm9yRXZlbnQgfSBmcm9tIFwiLi9FdmVudFRpbGVcIjtcblxuaW50ZXJmYWNlIElQcm9wcyB7XG4gICAgLy8gYSBtYXRyaXgtanMtc2RrIFNlYXJjaFJlc3VsdCBjb250YWluaW5nIHRoZSBkZXRhaWxzIG9mIHRoaXMgcmVzdWx0XG4gICAgc2VhcmNoUmVzdWx0OiBTZWFyY2hSZXN1bHQ7XG4gICAgLy8gYSBsaXN0IG9mIHN0cmluZ3MgdG8gYmUgaGlnaGxpZ2h0ZWQgaW4gdGhlIHJlc3VsdHNcbiAgICBzZWFyY2hIaWdobGlnaHRzPzogc3RyaW5nW107XG4gICAgLy8gaHJlZiBmb3IgdGhlIGhpZ2hsaWdodHMgaW4gdGhpcyByZXN1bHRcbiAgICByZXN1bHRMaW5rPzogc3RyaW5nO1xuICAgIG9uSGVpZ2h0Q2hhbmdlZD86ICgpID0+IHZvaWQ7XG4gICAgcGVybWFsaW5rQ3JlYXRvcj86IFJvb21QZXJtYWxpbmtDcmVhdG9yO1xufVxuXG5AcmVwbGFjZWFibGVDb21wb25lbnQoXCJ2aWV3cy5yb29tcy5TZWFyY2hSZXN1bHRUaWxlXCIpXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZWFyY2hSZXN1bHRUaWxlIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PElQcm9wcz4ge1xuICAgIHN0YXRpYyBjb250ZXh0VHlwZSA9IFJvb21Db250ZXh0O1xuXG4gICAgcHVibGljIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5wcm9wcy5zZWFyY2hSZXN1bHQ7XG4gICAgICAgIGNvbnN0IG14RXYgPSByZXN1bHQuY29udGV4dC5nZXRFdmVudCgpO1xuICAgICAgICBjb25zdCBldmVudElkID0gbXhFdi5nZXRJZCgpO1xuXG4gICAgICAgIGNvbnN0IHRzMSA9IG14RXYuZ2V0VHMoKTtcbiAgICAgICAgY29uc3QgcmV0ID0gWzxEYXRlU2VwYXJhdG9yIGtleT17dHMxICsgXCItc2VhcmNoXCJ9IHRzPXt0czF9IC8+XTtcbiAgICAgICAgY29uc3QgbGF5b3V0ID0gU2V0dGluZ3NTdG9yZS5nZXRWYWx1ZShcImxheW91dFwiKTtcbiAgICAgICAgY29uc3QgaXNUd2VsdmVIb3VyID0gU2V0dGluZ3NTdG9yZS5nZXRWYWx1ZShcInNob3dUd2VsdmVIb3VyVGltZXN0YW1wc1wiKTtcbiAgICAgICAgY29uc3QgYWx3YXlzU2hvd1RpbWVzdGFtcHMgPSBTZXR0aW5nc1N0b3JlLmdldFZhbHVlKFwiYWx3YXlzU2hvd1RpbWVzdGFtcHNcIik7XG4gICAgICAgIGNvbnN0IGVuYWJsZUZsYWlyID0gU2V0dGluZ3NTdG9yZS5nZXRWYWx1ZShVSUZlYXR1cmUuRmxhaXIpO1xuXG4gICAgICAgIGNvbnN0IHRpbWVsaW5lID0gcmVzdWx0LmNvbnRleHQuZ2V0VGltZWxpbmUoKTtcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aW1lbGluZS5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgY29uc3QgZXYgPSB0aW1lbGluZVtqXTtcbiAgICAgICAgICAgIGxldCBoaWdobGlnaHRzO1xuICAgICAgICAgICAgY29uc3QgY29udGV4dHVhbCA9IChqICE9IHJlc3VsdC5jb250ZXh0LmdldE91ckV2ZW50SW5kZXgoKSk7XG4gICAgICAgICAgICBpZiAoIWNvbnRleHR1YWwpIHtcbiAgICAgICAgICAgICAgICBoaWdobGlnaHRzID0gdGhpcy5wcm9wcy5zZWFyY2hIaWdobGlnaHRzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGhhdmVUaWxlRm9yRXZlbnQoZXYsIHRoaXMuY29udGV4dD8uc2hvd0hpZGRlbkV2ZW50c0luVGltZWxpbmUpKSB7XG4gICAgICAgICAgICAgICAgcmV0LnB1c2goXG4gICAgICAgICAgICAgICAgICAgIDxFdmVudFRpbGVcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleT17YCR7ZXZlbnRJZH0rJHtqfWB9XG4gICAgICAgICAgICAgICAgICAgICAgICBteEV2ZW50PXtldn1cbiAgICAgICAgICAgICAgICAgICAgICAgIGxheW91dD17bGF5b3V0fVxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dHVhbD17Y29udGV4dHVhbH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGhpZ2hsaWdodHM9e2hpZ2hsaWdodHN9XG4gICAgICAgICAgICAgICAgICAgICAgICBwZXJtYWxpbmtDcmVhdG9yPXt0aGlzLnByb3BzLnBlcm1hbGlua0NyZWF0b3J9XG4gICAgICAgICAgICAgICAgICAgICAgICBoaWdobGlnaHRMaW5rPXt0aGlzLnByb3BzLnJlc3VsdExpbmt9XG4gICAgICAgICAgICAgICAgICAgICAgICBvbkhlaWdodENoYW5nZWQ9e3RoaXMucHJvcHMub25IZWlnaHRDaGFuZ2VkfVxuICAgICAgICAgICAgICAgICAgICAgICAgaXNUd2VsdmVIb3VyPXtpc1R3ZWx2ZUhvdXJ9XG4gICAgICAgICAgICAgICAgICAgICAgICBhbHdheXNTaG93VGltZXN0YW1wcz17YWx3YXlzU2hvd1RpbWVzdGFtcHN9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbmFibGVGbGFpcj17ZW5hYmxlRmxhaXJ9XG4gICAgICAgICAgICAgICAgICAgIC8+LFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gPGxpIGRhdGEtc2Nyb2xsLXRva2Vucz17ZXZlbnRJZH0+eyByZXQgfTwvbGk+O1xuICAgIH1cbn1cbiJdfQ==