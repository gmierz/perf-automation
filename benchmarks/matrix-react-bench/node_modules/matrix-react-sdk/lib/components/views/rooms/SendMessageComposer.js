"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SendMessageComposer = void 0;
exports.attachRelation = attachRelation;
exports.createMessageContent = createMessageContent;
exports.default = void 0;
exports.isQuickReaction = isQuickReaction;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _emojibaseRegex = _interopRequireDefault(require("emojibase-regex"));

var _lodash = require("lodash");

var _event = require("matrix-js-sdk/src/@types/event");

var _logger = require("matrix-js-sdk/src/logger");

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _model = _interopRequireDefault(require("../../../editor/model"));

var _serialize = require("../../../editor/serialize");

var _BasicMessageComposer = _interopRequireWildcard(require("./BasicMessageComposer"));

var _parts = require("../../../editor/parts");

var _ReplyChain = _interopRequireDefault(require("../elements/ReplyChain"));

var _EventUtils = require("../../../utils/EventUtils");

var _SendHistoryManager = _interopRequireDefault(require("../../../SendHistoryManager"));

var _SlashCommands = require("../../../SlashCommands");

var _Modal = _interopRequireDefault(require("../../../Modal"));

var _languageHandler = require("../../../languageHandler");

var _ContentMessages = _interopRequireDefault(require("../../../ContentMessages"));

var _MatrixClientContext = require("../../../contexts/MatrixClientContext");

var _actions = require("../../../dispatcher/actions");

var _utils = require("../../../effects/utils");

var _effects = require("../../../effects");

var _CountlyAnalytics = _interopRequireDefault(require("../../../CountlyAnalytics"));

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _KeyBindingsManager = require("../../../KeyBindingsManager");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _SettingsStore = _interopRequireDefault(require("../../../settings/SettingsStore"));

var _ErrorDialog = _interopRequireDefault(require("../dialogs/ErrorDialog"));

var _QuestionDialog = _interopRequireDefault(require("../dialogs/QuestionDialog"));

var _sendTimePerformanceMetrics = require("../../../sendTimePerformanceMetrics");

var _RoomContext = _interopRequireWildcard(require("../../../contexts/RoomContext"));

var _position = _interopRequireDefault(require("../../../editor/position"));

var _ComposerInsertPayload = require("../../../dispatcher/payloads/ComposerInsertPayload");

var _dec, _class, _class2, _temp;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function addReplyToMessageContent(content, replyToEvent, permalinkCreator) {
  const replyContent = _ReplyChain.default.makeReplyMixIn(replyToEvent);

  Object.assign(content, replyContent); // Part of Replies fallback support - prepend the text we're sending
  // with the text we're replying to

  const nestedReply = _ReplyChain.default.getNestedReplyText(replyToEvent, permalinkCreator);

  if (nestedReply) {
    if (content.formatted_body) {
      content.formatted_body = nestedReply.html + content.formatted_body;
    }

    content.body = nestedReply.body + content.body;
  }
}

function attachRelation(content, relation) {
  if (relation) {
    content['m.relates_to'] = _objectSpread(_objectSpread({}, relation), content['m.relates_to']);
  }
} // exported for tests


function createMessageContent(model, replyToEvent, relation, permalinkCreator) {
  const isEmote = (0, _serialize.containsEmote)(model);

  if (isEmote) {
    model = (0, _serialize.stripEmoteCommand)(model);
  }

  if ((0, _serialize.startsWith)(model, "//")) {
    model = (0, _serialize.stripPrefix)(model, "/");
  }

  model = (0, _serialize.unescapeMessage)(model);
  const body = (0, _serialize.textSerialize)(model);
  const content = {
    msgtype: isEmote ? "m.emote" : "m.text",
    body: body
  };
  const formattedBody = (0, _serialize.htmlSerializeIfNeeded)(model, {
    forceHTML: !!replyToEvent
  });

  if (formattedBody) {
    content.format = "org.matrix.custom.html";
    content.formatted_body = formattedBody;
  }

  if (replyToEvent) {
    addReplyToMessageContent(content, replyToEvent, permalinkCreator);
  }

  if (relation) {
    content['m.relates_to'] = _objectSpread(_objectSpread({}, relation), content['m.relates_to']);
  }

  return content;
} // exported for tests


function isQuickReaction(model) {
  const parts = model.parts;
  if (parts.length == 0) return false;
  const text = (0, _serialize.textSerialize)(model); // shortcut takes the form "+:emoji:" or "+ :emoji:""
  // can be in 1 or 2 parts

  if (parts.length <= 2) {
    const hasShortcut = text.startsWith("+") || text.startsWith("+ ");
    const emojiMatch = text.match(_emojibaseRegex.default);

    if (hasShortcut && emojiMatch && emojiMatch.length == 1) {
      return emojiMatch[0] === text.substring(1) || emojiMatch[0] === text.substring(2);
    }
  }

  return false;
}

let SendMessageComposer = (_dec = (0, _replaceableComponent.replaceableComponent)("views.rooms.SendMessageComposer"), _dec(_class = (_temp = _class2 = class SendMessageComposer extends _react.default.Component {
  constructor(props, context) {
    super(props);
    (0, _defineProperty2.default)(this, "context", void 0);
    (0, _defineProperty2.default)(this, "prepareToEncrypt", void 0);
    (0, _defineProperty2.default)(this, "editorRef", /*#__PURE__*/(0, _react.createRef)());
    (0, _defineProperty2.default)(this, "model", null);
    (0, _defineProperty2.default)(this, "currentlyComposedEditorState", null);
    (0, _defineProperty2.default)(this, "dispatcherRef", void 0);
    (0, _defineProperty2.default)(this, "sendHistoryManager", void 0);
    (0, _defineProperty2.default)(this, "onKeyDown", event => {
      var _this$editorRef$curre, _this$props$relation, _this$editorRef$curre2, _this$editorRef$curre3;

      // ignore any keypress while doing IME compositions
      if ((_this$editorRef$curre = this.editorRef.current) !== null && _this$editorRef$curre !== void 0 && _this$editorRef$curre.isComposing(event)) {
        return;
      }

      const replyingToThread = ((_this$props$relation = this.props.relation) === null || _this$props$relation === void 0 ? void 0 : _this$props$relation.key) === _event.RelationType.Thread;
      const action = (0, _KeyBindingsManager.getKeyBindingsManager)().getMessageComposerAction(event);

      switch (action) {
        case _KeyBindingsManager.MessageComposerAction.Send:
          this.sendMessage();
          event.preventDefault();
          break;

        case _KeyBindingsManager.MessageComposerAction.SelectPrevSendHistory:
        case _KeyBindingsManager.MessageComposerAction.SelectNextSendHistory:
          {
            // Try select composer history
            const selected = this.selectSendHistory(action === _KeyBindingsManager.MessageComposerAction.SelectPrevSendHistory);

            if (selected) {
              // We're selecting history, so prevent the key event from doing anything else
              event.preventDefault();
            }

            break;
          }

        case _KeyBindingsManager.MessageComposerAction.EditPrevMessage:
          // selection must be collapsed and caret at start
          if ((_this$editorRef$curre2 = this.editorRef.current) !== null && _this$editorRef$curre2 !== void 0 && _this$editorRef$curre2.isSelectionCollapsed() && (_this$editorRef$curre3 = this.editorRef.current) !== null && _this$editorRef$curre3 !== void 0 && _this$editorRef$curre3.isCaretAtStart()) {
            const events = this.context.liveTimeline.getEvents().concat(replyingToThread ? [] : this.props.room.getPendingEvents());
            const editEvent = (0, _EventUtils.findEditableEvent)({
              events,
              isForward: false
            });

            if (editEvent) {
              // We're selecting history, so prevent the key event from doing anything else
              event.preventDefault();

              _dispatcher.default.dispatch({
                action: _actions.Action.EditEvent,
                event: editEvent,
                timelineRenderingType: this.context.timelineRenderingType
              });
            }
          }

          break;

        case _KeyBindingsManager.MessageComposerAction.CancelEditing:
          _dispatcher.default.dispatch({
            action: 'reply_to_event',
            event: null,
            context: this.context.timelineRenderingType
          });

          break;

        default:
          if (this.prepareToEncrypt) {
            // This needs to be last!
            this.prepareToEncrypt();
          }

      }
    });
    (0, _defineProperty2.default)(this, "shouldSaveStoredEditorState", () => {
      return !this.model.isEmpty || !!this.props.replyToEvent;
    });
    (0, _defineProperty2.default)(this, "saveStoredEditorState", () => {
      if (this.shouldSaveStoredEditorState()) {
        const item = _SendHistoryManager.default.createItem(this.model, this.props.replyToEvent);

        localStorage.setItem(this.editorStateKey, JSON.stringify(item));
      } else {
        this.clearStoredEditorState();
      }
    });
    (0, _defineProperty2.default)(this, "onAction", payload => {
      // don't let the user into the composer if it is disabled - all of these branches lead
      // to the cursor being in the composer
      if (this.props.disabled) return;

      switch (payload.action) {
        case 'reply_to_event':
        case _actions.Action.FocusSendMessageComposer:
          if ((payload.context ?? _RoomContext.TimelineRenderingType.Room) === this.context.timelineRenderingType) {
            var _this$editorRef$curre4;

            (_this$editorRef$curre4 = this.editorRef.current) === null || _this$editorRef$curre4 === void 0 ? void 0 : _this$editorRef$curre4.focus();
          }

          break;

        case _actions.Action.ComposerInsert:
          if (payload.timelineRenderingType !== this.context.timelineRenderingType) break;
          if (payload.composerType !== _ComposerInsertPayload.ComposerType.Send) break;

          if (payload.userId) {
            var _this$editorRef$curre5;

            (_this$editorRef$curre5 = this.editorRef.current) === null || _this$editorRef$curre5 === void 0 ? void 0 : _this$editorRef$curre5.insertMention(payload.userId);
          } else if (payload.event) {
            var _this$editorRef$curre6;

            (_this$editorRef$curre6 = this.editorRef.current) === null || _this$editorRef$curre6 === void 0 ? void 0 : _this$editorRef$curre6.insertQuotedMessage(payload.event);
          } else if (payload.text) {
            var _this$editorRef$curre7;

            (_this$editorRef$curre7 = this.editorRef.current) === null || _this$editorRef$curre7 === void 0 ? void 0 : _this$editorRef$curre7.insertPlaintext(payload.text);
          }

          break;
      }
    });
    (0, _defineProperty2.default)(this, "onPaste", event => {
      const {
        clipboardData
      } = event; // Prioritize text on the clipboard over files if RTF is present as Office on macOS puts a bitmap
      // in the clipboard as well as the content being copied. Modern versions of Office seem to not do this anymore.
      // We check text/rtf instead of text/plain as when copy+pasting a file from Finder or Gnome Image Viewer
      // it puts the filename in as text/plain which we want to ignore.

      if (clipboardData.files.length && !clipboardData.types.includes("text/rtf")) {
        _ContentMessages.default.sharedInstance().sendContentListToRoom(Array.from(clipboardData.files), this.props.room.roomId, this.props.relation, this.props.mxClient);

        return true; // to skip internal onPaste handler
      }
    });
    (0, _defineProperty2.default)(this, "onChange", () => {
      if (this.props.onChange) this.props.onChange(this.model);
    });
    (0, _defineProperty2.default)(this, "focusComposer", () => {
      var _this$editorRef$curre8;

      (_this$editorRef$curre8 = this.editorRef.current) === null || _this$editorRef$curre8 === void 0 ? void 0 : _this$editorRef$curre8.focus();
    });

    if (this.props.mxClient.isCryptoEnabled() && this.props.mxClient.isRoomEncrypted(this.props.room.roomId)) {
      this.prepareToEncrypt = (0, _lodash.throttle)(() => {
        this.props.mxClient.prepareToEncrypt(this.props.room);
      }, 60000, {
        leading: true,
        trailing: false
      });
    }

    window.addEventListener("beforeunload", this.saveStoredEditorState);
  }

  componentDidUpdate(prevProps) {
    var _this$props$relation2, _this$props$relation3, _prevProps$relation;

    const replyingToThread = ((_this$props$relation2 = this.props.relation) === null || _this$props$relation2 === void 0 ? void 0 : _this$props$relation2.key) === _event.RelationType.Thread;
    const differentEventTarget = ((_this$props$relation3 = this.props.relation) === null || _this$props$relation3 === void 0 ? void 0 : _this$props$relation3.event_id) !== ((_prevProps$relation = prevProps.relation) === null || _prevProps$relation === void 0 ? void 0 : _prevProps$relation.event_id);
    const threadChanged = replyingToThread && differentEventTarget;

    if (threadChanged) {
      var _this$editorRef$curre9;

      const partCreator = new _parts.CommandPartCreator(this.props.room, this.props.mxClient);
      const parts = this.restoreStoredEditorState(partCreator) || [];
      this.model.reset(parts);
      (_this$editorRef$curre9 = this.editorRef.current) === null || _this$editorRef$curre9 === void 0 ? void 0 : _this$editorRef$curre9.focus();
    }
  }

  // we keep sent messages/commands in a separate history (separate from undo history)
  // so you can alt+up/down in them
  selectSendHistory(up) {
    const delta = up ? -1 : 1; // True if we are not currently selecting history, but composing a message

    if (this.sendHistoryManager.currentIndex === this.sendHistoryManager.history.length) {
      // We can't go any further - there isn't any more history, so nop.
      if (!up) {
        return false;
      }

      this.currentlyComposedEditorState = this.model.serializeParts();
    } else if (this.sendHistoryManager.currentIndex + delta === this.sendHistoryManager.history.length) {
      // True when we return to the message being composed currently
      this.model.reset(this.currentlyComposedEditorState);
      this.sendHistoryManager.currentIndex = this.sendHistoryManager.history.length;
      return true;
    }

    const {
      parts,
      replyEventId
    } = this.sendHistoryManager.getItem(delta);

    _dispatcher.default.dispatch({
      action: 'reply_to_event',
      event: replyEventId ? this.props.room.findEventById(replyEventId) : null,
      context: this.context.timelineRenderingType
    });

    if (parts) {
      var _this$editorRef$curre10;

      this.model.reset(parts);
      (_this$editorRef$curre10 = this.editorRef.current) === null || _this$editorRef$curre10 === void 0 ? void 0 : _this$editorRef$curre10.focus();
    }

    return true;
  }

  isSlashCommand() {
    const parts = this.model.parts;
    const firstPart = parts[0];

    if (firstPart) {
      if (firstPart.type === _parts.Type.Command && firstPart.text.startsWith("/") && !firstPart.text.startsWith("//")) {
        return true;
      } // be extra resilient when somehow the AutocompleteWrapperModel or
      // CommandPartCreator fails to insert a command part, so we don't send
      // a command as a message


      if (firstPart.text.startsWith("/") && !firstPart.text.startsWith("//") && (firstPart.type === _parts.Type.Plain || firstPart.type === _parts.Type.PillCandidate)) {
        return true;
      }
    }

    return false;
  }

  sendQuickReaction() {
    const timeline = this.context.liveTimeline;
    const events = timeline.getEvents();
    const reaction = this.model.parts[1].text;

    for (let i = events.length - 1; i >= 0; i--) {
      if (events[i].getType() === _event.EventType.RoomMessage) {
        let shouldReact = true;
        const lastMessage = events[i];

        const userId = _MatrixClientPeg.MatrixClientPeg.get().getUserId();

        const messageReactions = this.props.room.getUnfilteredTimelineSet().getRelationsForEvent(lastMessage.getId(), _event.RelationType.Annotation, _event.EventType.Reaction); // if we have already sent this reaction, don't redact but don't re-send

        if (messageReactions) {
          const myReactionEvents = messageReactions.getAnnotationsBySender()[userId] || [];
          const myReactionKeys = [...myReactionEvents].filter(event => !event.isRedacted()).map(event => event.getRelation().key);
          shouldReact = !myReactionKeys.includes(reaction);
        }

        if (shouldReact) {
          _MatrixClientPeg.MatrixClientPeg.get().sendEvent(lastMessage.getRoomId(), _event.EventType.Reaction, {
            "m.relates_to": {
              "rel_type": _event.RelationType.Annotation,
              "event_id": lastMessage.getId(),
              "key": reaction
            }
          });

          _dispatcher.default.dispatch({
            action: "message_sent"
          });
        }

        break;
      }
    }
  }

  getSlashCommand() {
    const commandText = this.model.parts.reduce((text, part) => {
      // use mxid to textify user pills in a command
      if (part.type === "user-pill") {
        return text + part.resourceId;
      }

      return text + part.text;
    }, "");
    const {
      cmd,
      args
    } = (0, _SlashCommands.getCommand)(commandText);
    return [cmd, args, commandText];
  }

  async runSlashCommand(cmd, args) {
    var _this$props$relation4, _this$props$relation5;

    const threadId = ((_this$props$relation4 = this.props.relation) === null || _this$props$relation4 === void 0 ? void 0 : _this$props$relation4.rel_type) === _event.RelationType.Thread ? (_this$props$relation5 = this.props.relation) === null || _this$props$relation5 === void 0 ? void 0 : _this$props$relation5.event_id : null;
    const result = cmd.run(this.props.room.roomId, threadId, args);
    let messageContent;
    let error = result.error;

    if (result.promise) {
      try {
        if (cmd.category === _SlashCommands.CommandCategories.messages) {
          // The command returns a modified message that we need to pass on
          messageContent = await result.promise;
        } else {
          await result.promise;
        }
      } catch (err) {
        error = err;
      }
    }

    if (error) {
      _logger.logger.error("Command failure: %s", error); // assume the error is a server error when the command is async


      const isServerError = !!result.promise;
      const title = isServerError ? (0, _languageHandler._td)("Server error") : (0, _languageHandler._td)("Command error");
      let errText;

      if (typeof error === 'string') {
        errText = error;
      } else if (error.message) {
        errText = error.message;
      } else {
        errText = (0, _languageHandler._t)("Server unavailable, overloaded, or something else went wrong.");
      }

      _Modal.default.createTrackedDialog(title, '', _ErrorDialog.default, {
        title: (0, _languageHandler._t)(title),
        description: errText
      });
    } else {
      _logger.logger.log("Command success.");

      if (messageContent) return messageContent;
    }
  }

  async sendMessage() {
    var _this$editorRef$curre12, _this$editorRef$curre13;

    const model = this.model;

    if (model.isEmpty) {
      return;
    } // Replace emoticon at the end of the message


    if (_SettingsStore.default.getValue('MessageComposerInput.autoReplaceEmoji')) {
      var _this$editorRef$curre11;

      const indexOfLastPart = model.parts.length - 1;
      const positionInLastPart = model.parts[indexOfLastPart].text.length;
      (_this$editorRef$curre11 = this.editorRef.current) === null || _this$editorRef$curre11 === void 0 ? void 0 : _this$editorRef$curre11.replaceEmoticon(new _position.default(indexOfLastPart, positionInLastPart), _BasicMessageComposer.REGEX_EMOTICON);
    }

    const replyToEvent = this.props.replyToEvent;
    let shouldSend = true;
    let content;

    if (!(0, _serialize.containsEmote)(model) && this.isSlashCommand()) {
      const [cmd, args, commandText] = this.getSlashCommand();

      if (cmd) {
        if (cmd.category === _SlashCommands.CommandCategories.messages) {
          content = await this.runSlashCommand(cmd, args);

          if (replyToEvent) {
            addReplyToMessageContent(content, replyToEvent, this.props.permalinkCreator);
          }

          attachRelation(content, this.props.relation);
        } else {
          this.runSlashCommand(cmd, args);
          shouldSend = false;
        }
      } else {
        // ask the user if their unknown command should be sent as a message
        const {
          finished
        } = _Modal.default.createTrackedDialog("Unknown command", "", _QuestionDialog.default, {
          title: (0, _languageHandler._t)("Unknown Command"),
          description: /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Unrecognised command: %(commandText)s", {
            commandText
          })), /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("You can use <code>/help</code> to list available commands. " + "Did you mean to send this as a message?", {}, {
            code: t => /*#__PURE__*/_react.default.createElement("code", null, t)
          })), /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Hint: Begin your message with <code>//</code> to start it with a slash.", {}, {
            code: t => /*#__PURE__*/_react.default.createElement("code", null, t)
          }))),
          button: (0, _languageHandler._t)('Send as message')
        });

        const [sendAnyway] = await finished; // if !sendAnyway bail to let the user edit the composer and try again

        if (!sendAnyway) return;
      }
    }

    if (isQuickReaction(model)) {
      shouldSend = false;
      this.sendQuickReaction();
    }

    if (shouldSend) {
      var _this$props$relation6;

      const startTime = _CountlyAnalytics.default.getTimestamp();

      const {
        roomId
      } = this.props.room;

      if (!content) {
        content = createMessageContent(model, replyToEvent, this.props.relation, this.props.permalinkCreator);
      } // don't bother sending an empty message


      if (!content.body.trim()) return;

      if (_SettingsStore.default.getValue("Performance.addSendMessageTimingMetadata")) {
        (0, _sendTimePerformanceMetrics.decorateStartSendingTime)(content);
      }

      const threadId = ((_this$props$relation6 = this.props.relation) === null || _this$props$relation6 === void 0 ? void 0 : _this$props$relation6.rel_type) === _event.RelationType.Thread ? this.props.relation.event_id : null;
      const prom = this.props.mxClient.sendMessage(roomId, threadId, content);

      if (replyToEvent) {
        // Clear reply_to_event as we put the message into the queue
        // if the send fails, retry will handle resending.
        _dispatcher.default.dispatch({
          action: 'reply_to_event',
          event: null,
          context: this.context.timelineRenderingType
        });
      }

      _dispatcher.default.dispatch({
        action: "message_sent"
      });

      _effects.CHAT_EFFECTS.forEach(effect => {
        if ((0, _utils.containsEmoji)(content, effect.emojis)) {
          var _this$props$relation7;

          // For initial threads launch, chat effects are disabled
          // see #19731
          const isNotThread = ((_this$props$relation7 = this.props.relation) === null || _this$props$relation7 === void 0 ? void 0 : _this$props$relation7.rel_type) !== _event.RelationType.Thread;

          if (!_SettingsStore.default.getValue("feature_thread") || isNotThread) {
            _dispatcher.default.dispatch({
              action: `effects.${effect.command}`
            });
          }
        }
      });

      if (_SettingsStore.default.getValue("Performance.addSendMessageTimingMetadata")) {
        prom.then(resp => {
          (0, _sendTimePerformanceMetrics.sendRoundTripMetric)(this.props.mxClient, roomId, resp.event_id);
        });
      }

      _CountlyAnalytics.default.instance.trackSendMessage(startTime, prom, roomId, false, !!replyToEvent, content);
    }

    this.sendHistoryManager.save(model, replyToEvent); // clear composer

    model.reset([]);
    (_this$editorRef$curre12 = this.editorRef.current) === null || _this$editorRef$curre12 === void 0 ? void 0 : _this$editorRef$curre12.clearUndoHistory();
    (_this$editorRef$curre13 = this.editorRef.current) === null || _this$editorRef$curre13 === void 0 ? void 0 : _this$editorRef$curre13.focus();
    this.clearStoredEditorState();

    if (_SettingsStore.default.getValue("scrollToBottomOnMessageSent")) {
      _dispatcher.default.dispatch({
        action: "scroll_to_bottom",
        timelineRenderingType: this.context.timelineRenderingType
      });
    }
  }

  componentWillUnmount() {
    _dispatcher.default.unregister(this.dispatcherRef);

    window.removeEventListener("beforeunload", this.saveStoredEditorState);
    this.saveStoredEditorState();
  } // TODO: [REACT-WARNING] Move this to constructor


  UNSAFE_componentWillMount() {
    // eslint-disable-line
    const partCreator = new _parts.CommandPartCreator(this.props.room, this.props.mxClient);
    const parts = this.restoreStoredEditorState(partCreator) || [];
    this.model = new _model.default(parts, partCreator);
    this.dispatcherRef = _dispatcher.default.register(this.onAction);
    this.sendHistoryManager = new _SendHistoryManager.default(this.props.room.roomId, 'mx_cider_history_');
  }

  get editorStateKey() {
    var _this$props$replyToEv;

    let key = `mx_cider_state_${this.props.room.roomId}`;
    const thread = (_this$props$replyToEv = this.props.replyToEvent) === null || _this$props$replyToEv === void 0 ? void 0 : _this$props$replyToEv.getThread();

    if (thread) {
      key += `_${thread.id}`;
    }

    return key;
  }

  clearStoredEditorState() {
    localStorage.removeItem(this.editorStateKey);
  }

  restoreStoredEditorState(partCreator) {
    var _this$props$relation8;

    const replyingToThread = ((_this$props$relation8 = this.props.relation) === null || _this$props$relation8 === void 0 ? void 0 : _this$props$relation8.key) === _event.RelationType.Thread;

    if (replyingToThread) {
      return null;
    }

    const json = localStorage.getItem(this.editorStateKey);

    if (json) {
      try {
        const {
          parts: serializedParts,
          replyEventId
        } = JSON.parse(json);
        const parts = serializedParts.map(p => partCreator.deserializePart(p));

        if (replyEventId) {
          _dispatcher.default.dispatch({
            action: 'reply_to_event',
            event: this.props.room.findEventById(replyEventId),
            context: this.context.timelineRenderingType
          });
        }

        return parts;
      } catch (e) {
        _logger.logger.error(e);
      }
    }
  } // should save state when editor has contents or reply is open


  render() {
    var _this$props$relation9;

    const threadId = ((_this$props$relation9 = this.props.relation) === null || _this$props$relation9 === void 0 ? void 0 : _this$props$relation9.rel_type) === _event.RelationType.Thread ? this.props.relation.event_id : null;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SendMessageComposer",
      onClick: this.focusComposer,
      onKeyDown: this.onKeyDown
    }, /*#__PURE__*/_react.default.createElement(_BasicMessageComposer.default, {
      onChange: this.onChange,
      ref: this.editorRef,
      model: this.model,
      room: this.props.room,
      threadId: threadId,
      label: this.props.placeholder,
      placeholder: this.props.placeholder,
      onPaste: this.onPaste,
      disabled: this.props.disabled
    }));
  }

}, (0, _defineProperty2.default)(_class2, "contextType", _RoomContext.default), _temp)) || _class);
exports.SendMessageComposer = SendMessageComposer;
const SendMessageComposerWithMatrixClient = (0, _MatrixClientContext.withMatrixClientHOC)(SendMessageComposer);
var _default = SendMessageComposerWithMatrixClient;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,