"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _SettingsStore = _interopRequireDefault(require("../../../settings/SettingsStore"));

var _react = _interopRequireDefault(require("react"));

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _languageHandler = require("../../../languageHandler");

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _actions = require("../../../dispatcher/actions");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _event = require("matrix-js-sdk/src/@types/event");

var _EntityTile = _interopRequireWildcard(require("./EntityTile"));

var _MemberAvatar = _interopRequireDefault(require("./../avatars/MemberAvatar"));

var _dec, _class, _class2, _temp;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

let MemberTile = (_dec = (0, _replaceableComponent.replaceableComponent)("views.rooms.MemberTile"), _dec(_class = (_temp = _class2 = class MemberTile extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "userLastModifiedTime", void 0);
    (0, _defineProperty2.default)(this, "memberLastModifiedTime", void 0);
    (0, _defineProperty2.default)(this, "onRoomStateEvents", ev => {
      if (ev.getType() !== _event.EventType.RoomEncryption) return;
      const {
        roomId
      } = this.props.member;
      if (ev.getRoomId() !== roomId) return; // The room is encrypted now.

      const cli = _MatrixClientPeg.MatrixClientPeg.get();

      cli.removeListener("RoomState.events", this.onRoomStateEvents);
      this.setState({
        isRoomEncrypted: true
      });
      this.updateE2EStatus();
    });
    (0, _defineProperty2.default)(this, "onUserTrustStatusChanged", (userId, trustStatus) => {
      if (userId !== this.props.member.userId) return;
      this.updateE2EStatus();
    });
    (0, _defineProperty2.default)(this, "onDeviceVerificationChanged", (userId, deviceId, deviceInfo) => {
      if (userId !== this.props.member.userId) return;
      this.updateE2EStatus();
    });
    (0, _defineProperty2.default)(this, "onStatusMessageCommitted", () => {
      // The `User` object has observed a status message change.
      this.setState({
        statusMessage: this.getStatusMessage()
      });
    });
    (0, _defineProperty2.default)(this, "onClick", () => {
      _dispatcher.default.dispatch({
        action: _actions.Action.ViewUser,
        member: this.props.member
      });
    });
    this.state = {
      statusMessage: this.getStatusMessage(),
      isRoomEncrypted: false,
      e2eStatus: null
    };
  }

  componentDidMount() {
    const cli = _MatrixClientPeg.MatrixClientPeg.get();

    if (_SettingsStore.default.getValue("feature_custom_status")) {
      const {
        user
      } = this.props.member;

      if (user) {
        user.on("User._unstable_statusMessage", this.onStatusMessageCommitted);
      }
    }

    const {
      roomId
    } = this.props.member;

    if (roomId) {
      const isRoomEncrypted = cli.isRoomEncrypted(roomId);
      this.setState({
        isRoomEncrypted
      });

      if (isRoomEncrypted) {
        cli.on("userTrustStatusChanged", this.onUserTrustStatusChanged);
        cli.on("deviceVerificationChanged", this.onDeviceVerificationChanged);
        this.updateE2EStatus();
      } else {
        // Listen for room to become encrypted
        cli.on("RoomState.events", this.onRoomStateEvents);
      }
    }
  }

  componentWillUnmount() {
    const cli = _MatrixClientPeg.MatrixClientPeg.get();

    const {
      user
    } = this.props.member;

    if (user) {
      user.removeListener("User._unstable_statusMessage", this.onStatusMessageCommitted);
    }

    if (cli) {
      cli.removeListener("RoomState.events", this.onRoomStateEvents);
      cli.removeListener("userTrustStatusChanged", this.onUserTrustStatusChanged);
      cli.removeListener("deviceVerificationChanged", this.onDeviceVerificationChanged);
    }
  }

  async updateE2EStatus() {
    const cli = _MatrixClientPeg.MatrixClientPeg.get();

    const {
      userId
    } = this.props.member;
    const isMe = userId === cli.getUserId();
    const userTrust = cli.checkUserTrust(userId);

    if (!userTrust.isCrossSigningVerified()) {
      this.setState({
        e2eStatus: userTrust.wasCrossSigningVerified() ? "warning" : "normal"
      });
      return;
    }

    const devices = cli.getStoredDevicesForUser(userId);
    const anyDeviceUnverified = devices.some(device => {
      const {
        deviceId
      } = device; // For your own devices, we use the stricter check of cross-signing
      // verification to encourage everyone to trust their own devices via
      // cross-signing so that other users can then safely trust you.
      // For other people's devices, the more general verified check that
      // includes locally verified devices can be used.

      const deviceTrust = cli.checkDeviceTrust(userId, deviceId);
      return isMe ? !deviceTrust.isCrossSigningVerified() : !deviceTrust.isVerified();
    });
    this.setState({
      e2eStatus: anyDeviceUnverified ? "warning" : "verified"
    });
  }

  getStatusMessage() {
    const {
      user
    } = this.props.member;

    if (!user) {
      return "";
    }

    return user.unstable_statusMessage;
  }

  shouldComponentUpdate(nextProps, nextState) {
    if (this.memberLastModifiedTime === undefined || this.memberLastModifiedTime < nextProps.member.getLastModifiedTime()) {
      return true;
    }

    if (nextProps.member.user && (this.userLastModifiedTime === undefined || this.userLastModifiedTime < nextProps.member.user.getLastModifiedTime())) {
      return true;
    }

    if (nextState.isRoomEncrypted !== this.state.isRoomEncrypted || nextState.e2eStatus !== this.state.e2eStatus) {
      return true;
    }

    return false;
  }

  getDisplayName() {
    return this.props.member.name;
  }

  getPowerLabel() {
    return (0, _languageHandler._t)("%(userName)s (power %(powerLevelNumber)s)", {
      userName: this.props.member.userId,
      powerLevelNumber: this.props.member.powerLevel
    });
  }

  render() {
    const member = this.props.member;
    const name = this.getDisplayName();
    const presenceState = member.user ? member.user.presence : null;
    let statusMessage = null;

    if (member.user && _SettingsStore.default.getValue("feature_custom_status")) {
      statusMessage = this.state.statusMessage;
    }

    const av = /*#__PURE__*/_react.default.createElement(_MemberAvatar.default, {
      member: member,
      width: 36,
      height: 36,
      "aria-hidden": "true"
    });

    if (member.user) {
      this.userLastModifiedTime = member.user.getLastModifiedTime();
    }

    this.memberLastModifiedTime = member.getLastModifiedTime();
    const powerStatusMap = new Map([[100, _EntityTile.PowerStatus.Admin], [50, _EntityTile.PowerStatus.Moderator]]); // Find the nearest power level with a badge

    let powerLevel = this.props.member.powerLevel;

    for (const [pl] of powerStatusMap) {
      if (this.props.member.powerLevel >= pl) {
        powerLevel = pl;
        break;
      }
    }

    const powerStatus = powerStatusMap.get(powerLevel);
    let e2eStatus;

    if (this.state.isRoomEncrypted) {
      e2eStatus = this.state.e2eStatus;
    }

    return /*#__PURE__*/_react.default.createElement(_EntityTile.default, (0, _extends2.default)({}, this.props, {
      presenceState: presenceState,
      presenceLastActiveAgo: member.user ? member.user.lastActiveAgo : 0,
      presenceLastTs: member.user ? member.user.lastPresenceTs : 0,
      presenceCurrentlyActive: member.user ? member.user.currentlyActive : false,
      avatarJsx: av,
      title: this.getPowerLabel(),
      name: name,
      powerStatus: powerStatus,
      showPresence: this.props.showPresence,
      subtextLabel: statusMessage,
      e2eStatus: e2eStatus,
      onClick: this.onClick
    }));
  }

}, (0, _defineProperty2.default)(_class2, "defaultProps", {
  showPresence: true
}), _temp)) || _class);
exports.default = MemberTile;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,