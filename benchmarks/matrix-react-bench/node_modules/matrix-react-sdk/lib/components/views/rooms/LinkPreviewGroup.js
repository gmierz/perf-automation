"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _useStateToggle = require("../../../hooks/useStateToggle");

var _LinkPreviewWidget = _interopRequireDefault(require("./LinkPreviewWidget"));

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

var _languageHandler = require("../../../languageHandler");

var _MatrixClientContext = _interopRequireDefault(require("../../../contexts/MatrixClientContext"));

var _useAsyncMemo = require("../../../hooks/useAsyncMemo");

var _logger = require("matrix-js-sdk/src/logger");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
Copyright 2021 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const INITIAL_NUM_PREVIEWS = 2;

const LinkPreviewGroup = ({
  links,
  mxEvent,
  onCancelClick,
  onHeightChanged
}) => {
  const cli = (0, _react.useContext)(_MatrixClientContext.default);
  const [expanded, toggleExpanded] = (0, _useStateToggle.useStateToggle)();
  const ts = mxEvent.getTs();
  const previews = (0, _useAsyncMemo.useAsyncMemo)(async () => {
    return fetchPreviews(cli, links, ts);
  }, [links, ts], []);
  (0, _react.useEffect)(() => {
    onHeightChanged();
  }, [onHeightChanged, expanded, previews]);
  const showPreviews = expanded ? previews : previews.slice(0, INITIAL_NUM_PREVIEWS);
  let toggleButton;

  if (previews.length > INITIAL_NUM_PREVIEWS) {
    toggleButton = /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      onClick: toggleExpanded
    }, expanded ? (0, _languageHandler._t)("Collapse") : (0, _languageHandler._t)("Show %(count)s other previews", {
      count: previews.length - showPreviews.length
    }));
  }

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_LinkPreviewGroup"
  }, showPreviews.map(([link, preview], i) => /*#__PURE__*/_react.default.createElement(_LinkPreviewWidget.default, {
    key: link,
    link: link,
    preview: preview,
    mxEvent: mxEvent
  }, i === 0 ? /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
    className: "mx_LinkPreviewGroup_hide",
    onClick: onCancelClick,
    "aria-label": (0, _languageHandler._t)("Close preview")
  }, /*#__PURE__*/_react.default.createElement("img", {
    className: "mx_filterFlipColor",
    alt: "",
    role: "presentation",
    src: require("../../../../res/img/cancel.svg"),
    width: "18",
    height: "18"
  })) : undefined)), toggleButton);
};

const fetchPreviews = (cli, links, ts) => {
  return Promise.all(links.map(async link => {
    try {
      const preview = await cli.getUrlPreview(link, ts);

      if (preview && Object.keys(preview).length > 0) {
        return [link, preview];
      }
    } catch (error) {
      _logger.logger.error("Failed to get URL preview: " + error);
    }
  })).then(a => a.filter(Boolean));
};

var _default = LinkPreviewGroup;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL3Jvb21zL0xpbmtQcmV2aWV3R3JvdXAudHN4Il0sIm5hbWVzIjpbIklOSVRJQUxfTlVNX1BSRVZJRVdTIiwiTGlua1ByZXZpZXdHcm91cCIsImxpbmtzIiwibXhFdmVudCIsIm9uQ2FuY2VsQ2xpY2siLCJvbkhlaWdodENoYW5nZWQiLCJjbGkiLCJNYXRyaXhDbGllbnRDb250ZXh0IiwiZXhwYW5kZWQiLCJ0b2dnbGVFeHBhbmRlZCIsInRzIiwiZ2V0VHMiLCJwcmV2aWV3cyIsImZldGNoUHJldmlld3MiLCJzaG93UHJldmlld3MiLCJzbGljZSIsInRvZ2dsZUJ1dHRvbiIsImxlbmd0aCIsImNvdW50IiwibWFwIiwibGluayIsInByZXZpZXciLCJpIiwicmVxdWlyZSIsInVuZGVmaW5lZCIsIlByb21pc2UiLCJhbGwiLCJnZXRVcmxQcmV2aWV3IiwiT2JqZWN0Iiwia2V5cyIsImVycm9yIiwibG9nZ2VyIiwidGhlbiIsImEiLCJmaWx0ZXIiLCJCb29sZWFuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFnQkE7O0FBSUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRUE7Ozs7OztBQTNCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFlQSxNQUFNQSxvQkFBb0IsR0FBRyxDQUE3Qjs7QUFTQSxNQUFNQyxnQkFBa0MsR0FBRyxDQUFDO0FBQUVDLEVBQUFBLEtBQUY7QUFBU0MsRUFBQUEsT0FBVDtBQUFrQkMsRUFBQUEsYUFBbEI7QUFBaUNDLEVBQUFBO0FBQWpDLENBQUQsS0FBd0Q7QUFDL0YsUUFBTUMsR0FBRyxHQUFHLHVCQUFXQyw0QkFBWCxDQUFaO0FBQ0EsUUFBTSxDQUFDQyxRQUFELEVBQVdDLGNBQVgsSUFBNkIscUNBQW5DO0FBRUEsUUFBTUMsRUFBRSxHQUFHUCxPQUFPLENBQUNRLEtBQVIs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Qy5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG5pbXBvcnQgUmVhY3QsIHsgdXNlQ29udGV4dCwgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBNYXRyaXhFdmVudCB9IGZyb20gXCJtYXRyaXgtanMtc2RrL3NyYy9tb2RlbHMvZXZlbnRcIjtcbmltcG9ydCB7IElQcmV2aWV3VXJsUmVzcG9uc2UsIE1hdHJpeENsaWVudCB9IGZyb20gXCJtYXRyaXgtanMtc2RrL3NyYy9jbGllbnRcIjtcblxuaW1wb3J0IHsgdXNlU3RhdGVUb2dnbGUgfSBmcm9tIFwiLi4vLi4vLi4vaG9va3MvdXNlU3RhdGVUb2dnbGVcIjtcbmltcG9ydCBMaW5rUHJldmlld1dpZGdldCBmcm9tIFwiLi9MaW5rUHJldmlld1dpZGdldFwiO1xuaW1wb3J0IEFjY2Vzc2libGVCdXR0b24gZnJvbSBcIi4uL2VsZW1lbnRzL0FjY2Vzc2libGVCdXR0b25cIjtcbmltcG9ydCB7IF90IH0gZnJvbSBcIi4uLy4uLy4uL2xhbmd1YWdlSGFuZGxlclwiO1xuaW1wb3J0IE1hdHJpeENsaWVudENvbnRleHQgZnJvbSBcIi4uLy4uLy4uL2NvbnRleHRzL01hdHJpeENsaWVudENvbnRleHRcIjtcbmltcG9ydCB7IHVzZUFzeW5jTWVtbyB9IGZyb20gXCIuLi8uLi8uLi9ob29rcy91c2VBc3luY01lbW9cIjtcblxuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSBcIm1hdHJpeC1qcy1zZGsvc3JjL2xvZ2dlclwiO1xuXG5jb25zdCBJTklUSUFMX05VTV9QUkVWSUVXUyA9IDI7XG5cbmludGVyZmFjZSBJUHJvcHMge1xuICAgIGxpbmtzOiBzdHJpbmdbXTsgLy8gdGhlIFVSTHMgdG8gYmUgcHJldmlld2VkXG4gICAgbXhFdmVudDogTWF0cml4RXZlbnQ7IC8vIHRoZSBFdmVudCBhc3NvY2lhdGVkIHdpdGggdGhlIHByZXZpZXdcbiAgICBvbkNhbmNlbENsaWNrKCk6IHZvaWQ7IC8vIGNhbGxlZCB3aGVuIHRoZSBwcmV2aWV3J3MgY2FuY2VsICgnaGlkZScpIGJ1dHRvbiBpcyBjbGlja2VkXG4gICAgb25IZWlnaHRDaGFuZ2VkKCk6IHZvaWQ7IC8vIGNhbGxlZCB3aGVuIHRoZSBwcmV2aWV3J3MgY29udGVudHMgaGFzIGxvYWRlZFxufVxuXG5jb25zdCBMaW5rUHJldmlld0dyb3VwOiBSZWFjdC5GQzxJUHJvcHM+ID0gKHsgbGlua3MsIG14RXZlbnQsIG9uQ2FuY2VsQ2xpY2ssIG9uSGVpZ2h0Q2hhbmdlZCB9KSA9PiB7XG4gICAgY29uc3QgY2xpID0gdXNlQ29udGV4dChNYXRyaXhDbGllbnRDb250ZXh0KTtcbiAgICBjb25zdCBbZXhwYW5kZWQsIHRvZ2dsZUV4cGFuZGVkXSA9IHVzZVN0YXRlVG9nZ2xlKCk7XG5cbiAgICBjb25zdCB0cyA9IG14RXZlbnQuZ2V0VHMoKTtcbiAgICBjb25zdCBwcmV2aWV3cyA9IHVzZUFzeW5jTWVtbzxbc3RyaW5nLCBJUHJldmlld1VybFJlc3BvbnNlXVtdPihhc3luYyAoKSA9PiB7XG4gICAgICAgIHJldHVybiBmZXRjaFByZXZpZXdzKGNsaSwgbGlua3MsIHRzKTtcbiAgICB9LCBbbGlua3MsIHRzXSwgW10pO1xuXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgb25IZWlnaHRDaGFuZ2VkKCk7XG4gICAgfSwgW29uSGVpZ2h0Q2hhbmdlZCwgZXhwYW5kZWQsIHByZXZpZXdzXSk7XG5cbiAgICBjb25zdCBzaG93UHJldmlld3MgPSBleHBhbmRlZCA/IHByZXZpZXdzIDogcHJldmlld3Muc2xpY2UoMCwgSU5JVElBTF9OVU1fUFJFVklFV1MpO1xuXG4gICAgbGV0IHRvZ2dsZUJ1dHRvbjogSlNYLkVsZW1lbnQ7XG4gICAgaWYgKHByZXZpZXdzLmxlbmd0aCA+IElOSVRJQUxfTlVNX1BSRVZJRVdTKSB7XG4gICAgICAgIHRvZ2dsZUJ1dHRvbiA9IDxBY2Nlc3NpYmxlQnV0dG9uIG9uQ2xpY2s9e3RvZ2dsZUV4cGFuZGVkfT5cbiAgICAgICAgICAgIHsgZXhwYW5kZWRcbiAgICAgICAgICAgICAgICA/IF90KFwiQ29sbGFwc2VcIilcbiAgICAgICAgICAgICAgICA6IF90KFwiU2hvdyAlKGNvdW50KXMgb3RoZXIgcHJldmlld3NcIiwgeyBjb3VudDogcHJldmlld3MubGVuZ3RoIC0gc2hvd1ByZXZpZXdzLmxlbmd0aCB9KSB9XG4gICAgICAgIDwvQWNjZXNzaWJsZUJ1dHRvbj47XG4gICAgfVxuXG4gICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPVwibXhfTGlua1ByZXZpZXdHcm91cFwiPlxuICAgICAgICB7IHNob3dQcmV2aWV3cy5tYXAoKFtsaW5rLCBwcmV2aWV3XSwgaSkgPT4gKFxuICAgICAgICAgICAgPExpbmtQcmV2aWV3V2lkZ2V0IGtleT17bGlua30gbGluaz17bGlua30gcHJldmlldz17cHJldmlld30gbXhFdmVudD17bXhFdmVudH0+XG4gICAgICAgICAgICAgICAgeyBpID09PSAwID8gKFxuICAgICAgICAgICAgICAgICAgICA8QWNjZXNzaWJsZUJ1dHRvblxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwibXhfTGlua1ByZXZpZXdHcm91cF9oaWRlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e29uQ2FuY2VsQ2xpY2t9XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWxhYmVsPXtfdChcIkNsb3NlIHByZXZpZXdcIil9XG4gICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJteF9maWx0ZXJGbGlwQ29sb3JcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdD1cIlwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9sZT1cInByZXNlbnRhdGlvblwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjPXtyZXF1aXJlKFwiLi4vLi4vLi4vLi4vcmVzL2ltZy9jYW5jZWwuc3ZnXCIpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoPVwiMThcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodD1cIjE4XCJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgIDwvQWNjZXNzaWJsZUJ1dHRvbj5cbiAgICAgICAgICAgICAgICApOiB1bmRlZmluZWQgfVxuICAgICAgICAgICAgPC9MaW5rUHJldmlld1dpZGdldD5cbiAgICAgICAgKSkgfVxuICAgICAgICB7IHRvZ2dsZUJ1dHRvbiB9XG4gICAgPC9kaXY+O1xufTtcblxuY29uc3QgZmV0Y2hQcmV2aWV3cyA9IChjbGk6IE1hdHJpeENsaWVudCwgbGlua3M6IHN0cmluZ1tdLCB0czogbnVtYmVyKTpcbiAgICAgICAgUHJvbWlzZTxbc3RyaW5nLCBJUHJldmlld1VybFJlc3BvbnNlXVtdPiA9PiB7XG4gICAgcmV0dXJuIFByb21pc2UuYWxsPFtzdHJpbmcsIElQcmV2aWV3VXJsUmVzcG9uc2VdIHwgdm9pZD4obGlua3MubWFwKGFzeW5jIGxpbmsgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcHJldmlldyA9IGF3YWl0IGNsaS5nZXRVcmxQcmV2aWV3KGxpbmssIHRzKTtcbiAgICAgICAgICAgIGlmIChwcmV2aWV3ICYmIE9iamVjdC5rZXlzKHByZXZpZXcpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW2xpbmssIHByZXZpZXddO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgbG9nZ2VyLmVycm9yKFwiRmFpbGVkIHRvIGdldCBVUkwgcHJldmlldzogXCIgKyBlcnJvcik7XG4gICAgICAgIH1cbiAgICB9KSkudGhlbihhID0+IGEuZmlsdGVyKEJvb2xlYW4pKSBhcyBQcm9taXNlPFtzdHJpbmcsIElQcmV2aWV3VXJsUmVzcG9uc2VdW10+O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgTGlua1ByZXZpZXdHcm91cDtcbiJdfQ==