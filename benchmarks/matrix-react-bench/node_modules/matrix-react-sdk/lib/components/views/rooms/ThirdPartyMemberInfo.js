"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _languageHandler = require("../../../languageHandler");

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _Modal = _interopRequireDefault(require("../../../Modal"));

var _RoomInvite = require("../../../RoomInvite");

var _RoomAvatar = _interopRequireDefault(require("../avatars/RoomAvatar"));

var _RoomName = _interopRequireDefault(require("../elements/RoomName"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _ErrorDialog = _interopRequireDefault(require("../dialogs/ErrorDialog"));

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

var _SpaceStore = _interopRequireDefault(require("../../../stores/spaces/SpaceStore"));

var _logger = require("matrix-js-sdk/src/logger");

var _dec, _class;

let ThirdPartyMemberInfo = (_dec = (0, _replaceableComponent.replaceableComponent)("views.rooms.ThirdPartyMemberInfo"), _dec(_class = class ThirdPartyMemberInfo extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "room", void 0);
    (0, _defineProperty2.default)(this, "onRoomStateEvents", ev => {
      if (ev.getType() === "m.room.third_party_invite" && ev.getStateKey() === this.state.stateKey) {
        const newDisplayName = ev.getContent().display_name;
        const isInvited = (0, _RoomInvite.isValid3pidInvite)(ev);
        const newState = {
          invited: isInvited
        };
        if (newDisplayName) newState['displayName'] = newDisplayName;
        this.setState(newState);
      }
    });
    (0, _defineProperty2.default)(this, "onCancel", () => {
      _dispatcher.default.dispatch({
        action: "view_3pid_invite",
        event: null
      });
    });
    (0, _defineProperty2.default)(this, "onKickClick", () => {
      _MatrixClientPeg.MatrixClientPeg.get().sendStateEvent(this.state.roomId, "m.room.third_party_invite", {}, this.state.stateKey).catch(err => {
        _logger.logger.error(err); // Revert echo because of error


        this.setState({
          invited: true
        });

        _Modal.default.createTrackedDialog('Revoke 3pid invite failed', '', _ErrorDialog.default, {
          title: (0, _languageHandler._t)("Failed to revoke invite"),
          description: (0, _languageHandler._t)("Could not revoke the invite. The server may be experiencing a temporary problem or " + "you do not have sufficient permissions to revoke the invite.")
        });
      }); // Local echo


      this.setState({
        invited: false
      });
    });
    this.room = _MatrixClientPeg.MatrixClientPeg.get().getRoom(this.props.event.getRoomId());
    const me = this.room.getMember(_MatrixClientPeg.MatrixClientPeg.get().getUserId());
    const powerLevels = this.room.currentState.getStateEvents("m.room.power_levels", "");
    let kickLevel = powerLevels ? powerLevels.getContent().kick : 50;
    if (typeof kickLevel !== 'number') kickLevel = 50;
    const sender = this.room.getMember(this.props.event.getSender());
    this.state = {
      stateKey: this.props.event.getStateKey(),
      roomId: this.props.event.getRoomId(),
      displayName: this.props.event.getContent().display_name,
      invited: true,
      canKick: me ? me.powerLevel > kickLevel : false,
      senderName: sender ? sender.name : this.props.event.getSender()
    };
  }

  componentDidMount() {
    _MatrixClientPeg.MatrixClientPeg.get().on("RoomState.events", this.onRoomStateEvents);
  }

  componentWillUnmount() {
    const client = _MatrixClientPeg.MatrixClientPeg.get();

    if (client) {
      client.removeListener("RoomState.events", this.onRoomStateEvents);
    }
  }

  render() {
    let adminTools = null;

    if (this.state.canKick && this.state.invited) {
      adminTools = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_MemberInfo_container"
      }, /*#__PURE__*/_react.default.createElement("h3", null, (0, _languageHandler._t)("Admin Tools")), /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_MemberInfo_buttons"
      }, /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        className: "mx_MemberInfo_field",
        onClick: this.onKickClick
      }, (0, _languageHandler._t)("Revoke invite"))));
    }

    let scopeHeader;

    if (_SpaceStore.default.spacesEnabled && this.room.isSpaceRoom()) {
      scopeHeader = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_RightPanel_scopeHeader"
      }, /*#__PURE__*/_react.default.createElement(_RoomAvatar.default, {
        room: this.room,
        height: 32,
        width: 32
      }), /*#__PURE__*/_react.default.createElement(_RoomName.default, {
        room: this.room
      }));
    } // We shamelessly rip off the MemberInfo styles here.


    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_MemberInfo",
      role: "tabpanel"
    }, scopeHeader, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_MemberInfo_name"
    }, /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      className: "mx_MemberInfo_cancel",
      onClick: this.onCancel,
      title: (0, _languageHandler._t)('Close')
    }), /*#__PURE__*/_react.default.createElement("h2", null, this.state.displayName)), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_MemberInfo_container"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_MemberInfo_profile"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_MemberInfo_profileField"
    }, (0, _languageHandler._t)("Invited by %(sender)s", {
      sender: this.state.senderName
    })))), adminTools);
  }

}) || _class);
exports.default = ThirdPartyMemberInfo;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,