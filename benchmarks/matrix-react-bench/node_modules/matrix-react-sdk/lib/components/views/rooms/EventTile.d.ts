import React from 'react';
import { MatrixEvent } from "matrix-js-sdk/src/models/event";
import { Relations } from "matrix-js-sdk/src/models/relations";
import { RoomMember } from "matrix-js-sdk/src/models/room-member";
import { Thread } from 'matrix-js-sdk/src/models/thread';
import ReplyChain from "../elements/ReplyChain";
import { Layout } from "../../../settings/enums/Layout";
import EditorStateTransfer from "../../../utils/EditorStateTransfer";
import { RoomPermalinkCreator } from '../../../utils/permalinks/Permalinks';
import CallEventGrouper from "../../structures/CallEventGrouper";
import { TimelineRenderingType } from "../../../contexts/RoomContext";
export declare function getHandlerTile(ev: any): any;
export interface IReadReceiptProps {
    userId: string;
    roomMember: RoomMember;
    ts: number;
}
export declare enum TileShape {
    Notif = "notif",
    FileGrid = "file_grid",
    Pinned = "pinned",
    Thread = "thread",
    ThreadPanel = "thread_list"
}
interface IProps {
    mxEvent: MatrixEvent;
    isRedacted?: boolean;
    continuation?: boolean;
    last?: boolean;
    lastInSection?: boolean;
    lastSuccessful?: boolean;
    contextual?: boolean;
    highlights?: string[];
    highlightLink?: string;
    showUrlPreview?: boolean;
    isSelectedEvent?: boolean;
    onHeightChanged?: () => void;
    readReceipts?: IReadReceiptProps[];
    readReceiptMap?: any;
    checkUnmounting?: () => boolean;
    eventSendStatus?: string;
    tileShape?: TileShape;
    forExport?: boolean;
    isTwelveHour?: boolean;
    getRelationsForEvent?: (eventId: string, relationType: string, eventType: string) => Relations;
    showReactions?: boolean;
    layout?: Layout;
    enableFlair?: boolean;
    showReadReceipts?: boolean;
    editState?: EditorStateTransfer;
    replacingEventId?: string;
    permalinkCreator?: RoomPermalinkCreator;
    callEventGrouper?: CallEventGrouper;
    as?: string;
    alwaysShowTimestamps?: boolean;
    hideSender?: boolean;
    showThreadInfo?: boolean;
    timelineRenderingType?: TimelineRenderingType;
}
interface IState {
    actionBarFocused: boolean;
    allReadAvatars: boolean;
    verified: string;
    previouslyRequestedKeys: boolean;
    reactions: Relations;
    hover: boolean;
    isQuoteExpanded?: boolean;
    thread?: Thread;
}
export default class EventTile extends React.Component<IProps, IState> {
    private suppressReadReceiptAnimation;
    private isListeningForReceipts;
    private tile;
    private replyChain;
    readonly ref: React.RefObject<HTMLElement>;
    static defaultProps: {
        onHeightChanged: () => void;
        forExport: boolean;
        layout: Layout;
    };
    static contextType: React.Context<import("matrix-js-sdk").MatrixClient>;
    constructor(props: any, context: any);
    /**
     * When true, the tile qualifies for some sort of special read receipt. This could be a 'sending'
     * or 'sent' receipt, for example.
     * @returns {boolean}
     */
    private get isEligibleForSpecialReceipt();
    private get shouldShowSentReceipt();
    private get shouldShowSendingReceipt();
    UNSAFE_componentWillMount(): void;
    componentDidMount(): void;
    private updateThread;
    UNSAFE_componentWillReceiveProps(nextProps: any): void;
    shouldComponentUpdate(nextProps: any, nextState: any, nextContext: any): boolean;
    componentWillUnmount(): void;
    componentDidUpdate(prevProps: any, prevState: any, snapshot: any): void;
    private onNewThread;
    private get thread();
    private renderThreadPanelSummary;
    private renderThreadLastMessagePreview;
    private renderThreadInfo;
    private onRoomReceipt;
    /** called when the event is decrypted after we show it.
     */
    private onDecrypted;
    private onDeviceVerificationChanged;
    private onUserVerificationChanged;
    private verifyEvent;
    private propsEqual;
    shouldHighlight(): any;
    toggleAllReadAvatars: () => void;
    getReadAvatars(): JSX.Element;
    onSenderProfileClick: () => void;
    onRequestKeysClick: () => void;
    onPermalinkClicked: (e: any) => void;
    private renderE2EPadlock;
    onActionBarFocusChange: (focused: any) => void;
    getTile: () => any | null;
    getReplyChain: () => ReplyChain;
    getReactions: () => Relations;
    private onReactionsCreated;
    private setQuoteExpanded;
    render(): JSX.Element;
}
export declare function haveTileForEvent(e: MatrixEvent, showHiddenEvents?: boolean): boolean;
export {};
