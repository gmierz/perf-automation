"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _languageHandler = require("../../../languageHandler");

var _SdkConfig = _interopRequireDefault(require("../../../SdkConfig"));

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _RoomInvite = require("../../../RoomInvite");

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _CommunityPrototypeStore = require("../../../stores/CommunityPrototypeStore");

var _BaseCard = _interopRequireDefault(require("../right_panel/BaseCard"));

var _RightPanelStorePhases = require("../../../stores/RightPanelStorePhases");

var _RoomAvatar = _interopRequireDefault(require("../avatars/RoomAvatar"));

var _RoomName = _interopRequireDefault(require("../elements/RoomName"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _SettingsStore = _interopRequireDefault(require("../../../settings/SettingsStore"));

var _roomMember = require("matrix-js-sdk/src/models/room-member");

var _TruncatedList = _interopRequireDefault(require("../elements/TruncatedList"));

var _Spinner = _interopRequireDefault(require("../elements/Spinner"));

var _SearchBox = _interopRequireDefault(require("../../structures/SearchBox"));

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

var _EntityTile = _interopRequireDefault(require("./EntityTile"));

var _MemberTile = _interopRequireDefault(require("./MemberTile"));

var _BaseAvatar = _interopRequireDefault(require("../avatars/BaseAvatar"));

var _lodash = require("lodash");

var _SpaceStore = _interopRequireDefault(require("../../../stores/spaces/SpaceStore"));

var _UIComponents = require("../../../customisations/helpers/UIComponents");

var _UIFeature = require("../../../settings/UIFeature");

var _partials = require("matrix-js-sdk/src/@types/partials");

var _dec, _class;

const INITIAL_LOAD_NUM_MEMBERS = 30;
const INITIAL_LOAD_NUM_INVITED = 5;
const SHOW_MORE_INCREMENT = 100; // Regex applied to filter our punctuation in member names before applying sort, to fuzzy it a little
// matches all ASCII punctuation: !"#$%&'()*+,-./:;<=>?@[\]^_`{|}~

const SORT_REGEX = /[\x21-\x2F\x3A-\x40\x5B-\x60\x7B-\x7E]+/g;
let MemberList = (_dec = (0, _replaceableComponent.replaceableComponent)("views.rooms.MemberList"), _dec(_class = class MemberList extends _react.default.Component {
  // RoomMember -> sortName
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "showPresence", true);
    (0, _defineProperty2.default)(this, "mounted", false);
    (0, _defineProperty2.default)(this, "collator", void 0);
    (0, _defineProperty2.default)(this, "sortNames", new Map());
    (0, _defineProperty2.default)(this, "onUserPresenceChange", (event, user) => {
      // Attach a SINGLE listener for global presence changes then locate the
      // member tile and re-render it. This is more efficient than every tile
      // ever attaching their own listener.
      const tile = this.refs[user.userId]; // console.log(`Got presence update for ${user.userId}. hasTile=${!!tile}`);

      if (tile) {
        this.updateList(); // reorder the membership list
      }
    });
    (0, _defineProperty2.default)(this, "onRoom", room => {
      if (room.roomId !== this.props.roomId) {
        return;
      } // We listen for room events because when we accept an invite
      // we need to wait till the room is fully populated with state
      // before refreshing the member list else we get a stale list.


      this.showMembersAccordingToMembershipWithLL();
    });
    (0, _defineProperty2.default)(this, "onMyMembership", (room, membership, oldMembership) => {
      if (room.roomId === this.props.roomId && membership === "join") {
        this.showMembersAccordingToMembershipWithLL();
      }
    });
    (0, _defineProperty2.default)(this, "onRoomStateMember", (ev, state, member) => {
      if (member.roomId !== this.props.roomId) {
        return;
      }

      this.updateList();
    });
    (0, _defineProperty2.default)(this, "onRoomMemberName", (ev, member) => {
      if (member.roomId !== this.props.roomId) {
        return;
      }

      this.updateList();
    });
    (0, _defineProperty2.default)(this, "onRoomStateEvent", (event, state) => {
      if (event.getRoomId() === this.props.roomId && event.getType() === "m.room.third_party_invite") {
        this.updateList();
      }

      if (this.canInvite !== this.state.canInvite) this.setState({
        canInvite: this.canInvite
      });
    });
    (0, _defineProperty2.default)(this, "updateList", (0, _lodash.throttle)(() => {
      this.updateListNow();
    }, 500, {
      leading: true,
      trailing: true
    }));
    (0, _defineProperty2.default)(this, "createOverflowTileJoined", (overflowCount, totalCount) => {
      return this.createOverflowTile(overflowCount, totalCount, this.showMoreJoinedMemberList);
    });
    (0, _defineProperty2.default)(this, "createOverflowTileInvited", (overflowCount, totalCount) => {
      return this.createOverflowTile(overflowCount, totalCount, this.showMoreInvitedMemberList);
    });
    (0, _defineProperty2.default)(this, "createOverflowTile", (overflowCount, totalCount, onClick) => {
      // For now we'll pretend this is any entity. It should probably be a separate tile.
      const text = (0, _languageHandler._t)("and %(count)s others...", {
        count: overflowCount
      });
      return /*#__PURE__*/_react.default.createElement(_EntityTile.default, {
        className: "mx_EntityTile_ellipsis",
        avatarJsx: /*#__PURE__*/_react.default.createElement(_BaseAvatar.default, {
          url: require("../../../../res/img/ellipsis.svg"),
          name: "...",
          width: 36,
          height: 36
        }),
        name: text,
        presenceState: "online",
        suppressOnHover: true,
        onClick: onClick
      });
    });
    (0, _defineProperty2.default)(this, "showMoreJoinedMemberList", () => {
      this.setState({
        truncateAtJoined: this.state.truncateAtJoined + SHOW_MORE_INCREMENT
      });
    });
    (0, _defineProperty2.default)(this, "showMoreInvitedMemberList", () => {
      this.setState({
        truncateAtInvited: this.state.truncateAtInvited + SHOW_MORE_INCREMENT
      });
    });
    (0, _defineProperty2.default)(this, "memberSort", (memberA, memberB) => {
      // order by presence, with "active now" first.
      // ...and then by power level
      // ...and then by last active
      // ...and then alphabetically.
      // We could tiebreak instead by "last recently spoken in this room" if we wanted to.
      // console.log(`Comparing userA=${this.memberString(memberA)} userB=${this.memberString(memberB)}`);
      const userA = memberA.user;
      const userB = memberB.user; // if (!userA) console.log("!! MISSING USER FOR A-SIDE: " + memberA.name + " !!");
      // if (!userB) console.log("!! MISSING USER FOR B-SIDE: " + memberB.name + " !!");

      if (!userA && !userB) return 0;
      if (userA && !userB) return -1;
      if (!userA && userB) return 1; // First by presence

      if (this.showPresence) {
        const convertPresence = p => p === 'unavailable' ? 'online' : p;

        const presenceIndex = p => {
          const order = ['active', 'online', 'offline'];
          const idx = order.indexOf(convertPresence(p));
          return idx === -1 ? order.length : idx; // unknown states at the end
        };

        const idxA = presenceIndex(userA.currentlyActive ? 'active' : userA.presence);
        const idxB = presenceIndex(userB.currentlyActive ? 'active' : userB.presence); // console.log(`userA_presenceGroup=${idxA} userB_presenceGroup=${idxB}`);

        if (idxA !== idxB) {
          // console.log("Comparing on presence group - returning");
          return idxA - idxB;
        }
      } // Second by power level


      if (memberA.powerLevel !== memberB.powerLevel) {
        // console.log("Comparing on power level - returning");
        return memberB.powerLevel - memberA.powerLevel;
      } // Third by last active


      if (this.showPresence && userA.getLastActiveTs() !== userB.getLastActiveTs()) {
        // console.log("Comparing on last active timestamp - returning");
        return userB.getLastActiveTs() - userA.getLastActiveTs();
      } // Fourth by name (alphabetical)


      return this.collator.compare(this.sortNames.get(memberA), this.sortNames.get(memberB));
    });
    (0, _defineProperty2.default)(this, "onSearchQueryChanged", searchQuery => {
      this.props.onSearchQueryChanged(searchQuery);
      this.setState({
        filteredJoinedMembers: this.filterMembers(this.state.members, 'join', searchQuery),
        filteredInvitedMembers: this.filterMembers(this.state.members, 'invite', searchQuery)
      });
    });
    (0, _defineProperty2.default)(this, "onPending3pidInviteClick", inviteEvent => {
      _dispatcher.default.dispatch({
        action: 'view_3pid_invite',
        event: inviteEvent
      });
    });
    (0, _defineProperty2.default)(this, "getChildrenJoined", (start, end) => {
      return this.makeMemberTiles(this.state.filteredJoinedMembers.slice(start, end));
    });
    (0, _defineProperty2.default)(this, "getChildCountJoined", () => this.state.filteredJoinedMembers.length);
    (0, _defineProperty2.default)(this, "getChildrenInvited", (start, end) => {
      let targets = this.state.filteredInvitedMembers;

      if (end > this.state.filteredInvitedMembers.length) {
        targets = targets.concat(this.getPending3PidInvites());
      }

      return this.makeMemberTiles(targets.slice(start, end));
    });
    (0, _defineProperty2.default)(this, "getChildCountInvited", () => {
      return this.state.filteredInvitedMembers.length + (this.getPending3PidInvites() || []).length;
    });
    (0, _defineProperty2.default)(this, "onInviteButtonClick", () => {
      if (_MatrixClientPeg.MatrixClientPeg.get().isGuest()) {
        _dispatcher.default.dispatch({
          action: 'require_registration'
        });

        return;
      } // call AddressPickerDialog


      _dispatcher.default.dispatch({
        action: 'view_invite',
        roomId: this.props.roomId
      });
    });

    const cli = _MatrixClientPeg.MatrixClientPeg.get();

    if (cli.hasLazyLoadMembersEnabled()) {
      // show an empty list
      this.state = this.getMembersState([]);
    } else {
      this.state = this.getMembersState(this.roomMembers());
    }

    cli.on("Room", this.onRoom); // invites & joining after peek

    const enablePresenceByHsUrl = _SdkConfig.default.get()["enable_presence_by_hs_url"];

    const hsUrl = _MatrixClientPeg.MatrixClientPeg.get().baseUrl;

    this.showPresence = (enablePresenceByHsUrl === null || enablePresenceByHsUrl === void 0 ? void 0 : enablePresenceByHsUrl[hsUrl]) ?? true;
  } // eslint-disable-next-line


  UNSAFE_componentWillMount() {
    const cli = _MatrixClientPeg.MatrixClientPeg.get();

    this.mounted = true;

    if (cli.hasLazyLoadMembersEnabled()) {
      this.showMembersAccordingToMembershipWithLL();
      cli.on("Room.myMembership", this.onMyMembership);
    } else {
      this.listenForMembersChanges();
    }
  }

  listenForMembersChanges() {
    const cli = _MatrixClientPeg.MatrixClientPeg.get();

    cli.on("RoomState.members", this.onRoomStateMember);
    cli.on("RoomMember.name", this.onRoomMemberName);
    cli.on("RoomState.events", this.onRoomStateEvent); // We listen for changes to the lastPresenceTs which is essentially
    // listening for all presence events (we display most of not all of
    // the information contained in presence events).

    cli.on("User.lastPresenceTs", this.onUserPresenceChange);
    cli.on("User.presence", this.onUserPresenceChange);
    cli.on("User.currentlyActive", this.onUserPresenceChange); // cli.on("Room.timeline", this.onRoomTimeline);
  }

  componentWillUnmount() {
    this.mounted = false;

    const cli = _MatrixClientPeg.MatrixClientPeg.get();

    if (cli) {
      cli.removeListener("RoomState.members", this.onRoomStateMember);
      cli.removeListener("RoomMember.name", this.onRoomMemberName);
      cli.removeListener("Room.myMembership", this.onMyMembership);
      cli.removeListener("RoomState.events", this.onRoomStateEvent);
      cli.removeListener("Room", this.onRoom);
      cli.removeListener("User.lastPresenceTs", this.onUserPresenceChange);
      cli.removeListener("User.presence", this.onUserPresenceChange);
      cli.removeListener("User.currentlyActive", this.onUserPresenceChange);
    } // cancel any pending calls to the rate_limited_funcs


    this.updateList.cancel();
  }
  /**
   * If lazy loading is enabled, either:
   * show a spinner and load the members if the user is joined,
   * or show the members available so far if the user is invited
   */


  async showMembersAccordingToMembershipWithLL() {
    const cli = _MatrixClientPeg.MatrixClientPeg.get();

    if (cli.hasLazyLoadMembersEnabled()) {
      const cli = _MatrixClientPeg.MatrixClientPeg.get();

      const room = cli.getRoom(this.props.roomId);
      const membership = room && room.getMyMembership();

      if (membership === "join") {
        this.setState({
          loading: true
        });

        try {
          await room.loadMembersIfNeeded();
        } catch (ex) {
          /* already logged in RoomView */
        }

        if (this.mounted) {
          this.setState(this.getMembersState(this.roomMembers()));
          this.listenForMembersChanges();
        }
      } else {
        // show the members we already have loaded
        this.setState(this.getMembersState(this.roomMembers()));
      }
    }
  }

  get canInvite() {
    const cli = _MatrixClientPeg.MatrixClientPeg.get();

    const room = cli.getRoom(this.props.roomId);
    return (room === null || room === void 0 ? void 0 : room.canInvite(cli.getUserId())) || (room === null || room === void 0 ? void 0 : room.isSpaceRoom()) && room.getJoinRule() === _partials.JoinRule.Public;
  }

  getMembersState(members) {
    // set the state after determining showPresence to make sure it's
    // taken into account while rendering
    return {
      loading: false,
      members: members,
      filteredJoinedMembers: this.filterMembers(members, 'join', this.props.searchQuery),
      filteredInvitedMembers: this.filterMembers(members, 'invite', this.props.searchQuery),
      canInvite: this.canInvite,
      // ideally we'd size this to the page height, but
      // in practice I find that a little constraining
      truncateAtJoined: INITIAL_LOAD_NUM_MEMBERS,
      truncateAtInvited: INITIAL_LOAD_NUM_INVITED
    };
  }

  updateListNow() {
    const members = this.roomMembers();
    this.setState({
      loading: false,
      members: members,
      filteredJoinedMembers: this.filterMembers(members, 'join', this.props.searchQuery),
      filteredInvitedMembers: this.filterMembers(members, 'invite', this.props.searchQuery)
    });
  }

  getMembersWithUser() {
    if (!this.props.roomId) return [];

    const cli = _MatrixClientPeg.MatrixClientPeg.get();

    const room = cli.getRoom(this.props.roomId);
    if (!room) return [];
    const allMembers = Object.values(room.currentState.members);
    allMembers.forEach(member => {
      // work around a race where you might have a room member object
      // before the user object exists. This may or may not cause
      // https://github.com/vector-im/vector-web/issues/186
      if (!member.user) {
        member.user = cli.getUser(member.userId);
      }

      this.sortNames.set(member, (member.name[0] === '@' ? member.name.substr(1) : member.name).replace(SORT_REGEX, "")); // XXX: this user may have no lastPresenceTs value!
      // the right solution here is to fix the race rather than leave it as 0
    });
    return allMembers;
  }

  roomMembers() {
    const allMembers = this.getMembersWithUser();
    const filteredAndSortedMembers = allMembers.filter(m => {
      return m.membership === 'join' || m.membership === 'invite';
    });

    const language = _SettingsStore.default.getValue("language");

    this.collator = new Intl.Collator(language, {
      sensitivity: 'base',
      ignorePunctuation: false
    });
    filteredAndSortedMembers.sort(this.memberSort);
    return filteredAndSortedMembers;
  }

  /**
   * SHOULD ONLY BE USED BY TESTS
   */
  memberString(member) {
    if (!member) {
      return "(null)";
    } else {
      const u = member.user;
      return "(" + member.name + ", " + member.powerLevel + ", " + (u ? u.lastActiveAgo : "<null>") + ", " + (u ? u.getLastActiveTs() : "<null>") + ", " + (u ? u.currentlyActive : "<null>") + ", " + (u ? u.presence : "<null>") + ")";
    }
  } // returns negative if a comes before b,
  // returns 0 if a and b are equivalent in ordering
  // returns positive if a comes after b.


  filterMembers(members, membership, query) {
    return members.filter(m => {
      if (query) {
        query = query.toLowerCase();
        const matchesName = m.name.toLowerCase().indexOf(query) !== -1;
        const matchesId = m.userId.toLowerCase().indexOf(query) !== -1;

        if (!matchesName && !matchesId) {
          return false;
        }
      }

      return m.membership === membership;
    });
  }

  getPending3PidInvites() {
    // include 3pid invites (m.room.third_party_invite) state events.
    // The HS may have already converted these into m.room.member invites so
    // we shouldn't add them if the 3pid invite state key (token) is in the
    // member invite (content.third_party_invite.signed.token)
    const room = _MatrixClientPeg.MatrixClientPeg.get().getRoom(this.props.roomId);

    if (room) {
      return room.currentState.getStateEvents("m.room.third_party_invite").filter(function (e) {
        if (!(0, _RoomInvite.isValid3pidInvite)(e)) return false; // discard all invites which have a m.room.member event since we've
        // already added them.

        const memberEvent = room.currentState.getInviteForThreePidToken(e.getStateKey());
        if (memberEvent) return false;
        return true;
      });
    }
  }

  makeMemberTiles(members) {
    return members.map(m => {
      if (m instanceof _roomMember.RoomMember) {
        // Is a Matrix invite
        return /*#__PURE__*/_react.default.createElement(_MemberTile.default, {
          key: m.userId,
          member: m,
          ref: m.userId,
          showPresence: this.showPresence
        });
      } else {
        // Is a 3pid invite
        return /*#__PURE__*/_react.default.createElement(_EntityTile.default, {
          key: m.getStateKey(),
          name: m.getContent().display_name,
          suppressOnHover: true,
          onClick: () => this.onPending3pidInviteClick(m)
        });
      }
    });
  }

  render() {
    if (this.state.loading) {
      return /*#__PURE__*/_react.default.createElement(_BaseCard.default, {
        className: "mx_MemberList",
        onClose: this.props.onClose,
        previousPhase: _RightPanelStorePhases.RightPanelPhases.RoomSummary
      }, /*#__PURE__*/_react.default.createElement(_Spinner.default, null));
    }

    const cli = _MatrixClientPeg.MatrixClientPeg.get();

    const room = cli.getRoom(this.props.roomId);
    let inviteButton;

    if ((room === null || room === void 0 ? void 0 : room.getMyMembership()) === 'join' && (0, _UIComponents.shouldShowComponent)(_UIFeature.UIComponent.InviteUsers)) {
      let inviteButtonText = (0, _languageHandler._t)("Invite to this room");

      const chat = _CommunityPrototypeStore.CommunityPrototypeStore.instance.getSelectedCommunityGeneralChat();

      if (chat && chat.roomId === this.props.roomId) {
        inviteButtonText = (0, _languageHandler._t)("Invite to this community");
      } else if (_SpaceStore.default.spacesEnabled && room.isSpaceRoom()) {
        inviteButtonText = (0, _languageHandler._t)("Invite to this space");
      }

      inviteButton = /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        className: "mx_MemberList_invite",
        onClick: this.onInviteButtonClick,
        disabled: !this.state.canInvite
      }, /*#__PURE__*/_react.default.createElement("span", null, inviteButtonText));
    }

    let invitedHeader;
    let invitedSection;

    if (this.getChildCountInvited() > 0) {
      invitedHeader = /*#__PURE__*/_react.default.createElement("h2", null, (0, _languageHandler._t)("Invited"));
      invitedSection = /*#__PURE__*/_react.default.createElement(_TruncatedList.default, {
        className: "mx_MemberList_section mx_MemberList_invited",
        truncateAt: this.state.truncateAtInvited,
        createOverflowElement: this.createOverflowTileInvited,
        getChildren: this.getChildrenInvited,
        getChildCount: this.getChildCountInvited
      });
    }

    const footer = /*#__PURE__*/_react.default.createElement(_SearchBox.default, {
      className: "mx_MemberList_query mx_textinput_icon mx_textinput_search",
      placeholder: (0, _languageHandler._t)('Filter room members'),
      onSearch: this.onSearchQueryChanged,
      initialValue: this.props.searchQuery
    });

    let previousPhase = _RightPanelStorePhases.RightPanelPhases.RoomSummary; // We have no previousPhase for when viewing a MemberList from a Space

    let scopeHeader;

    if (_SpaceStore.default.spacesEnabled && room !== null && room !== void 0 && room.isSpaceRoom()) {
      previousPhase = undefined;
      scopeHeader = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_RightPanel_scopeHeader"
      }, /*#__PURE__*/_react.default.createElement(_RoomAvatar.default, {
        room: room,
        height: 32,
        width: 32
      }), /*#__PURE__*/_react.default.createElement(_RoomName.default, {
        room: room
      }));
    }

    return /*#__PURE__*/_react.default.createElement(_BaseCard.default, {
      className: "mx_MemberList",
      header: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, scopeHeader, inviteButton),
      footer: footer,
      onClose: this.props.onClose,
      previousPhase: previousPhase
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_MemberList_wrapper"
    }, /*#__PURE__*/_react.default.createElement(_TruncatedList.default, {
      className: "mx_MemberList_section mx_MemberList_joined",
      truncateAt: this.state.truncateAtJoined,
      createOverflowElement: this.createOverflowTileJoined,
      getChildren: this.getChildrenJoined,
      getChildCount: this.getChildCountJoined
    }), invitedHeader, invitedSection));
  }

}) || _class);
exports.default = MemberList;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,