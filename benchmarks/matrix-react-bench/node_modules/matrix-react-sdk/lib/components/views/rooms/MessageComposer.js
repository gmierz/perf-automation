"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _languageHandler = require("../../../languageHandler");

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _Stickerpicker = _interopRequireDefault(require("./Stickerpicker"));

var _Permalinks = require("../../../utils/permalinks/Permalinks");

var _ContentMessages = _interopRequireDefault(require("../../../ContentMessages"));

var _E2EIcon = _interopRequireDefault(require("./E2EIcon"));

var _SettingsStore = _interopRequireDefault(require("../../../settings/SettingsStore"));

var _ContextMenu = _interopRequireWildcard(require("../../structures/ContextMenu"));

var _AccessibleTooltipButton = _interopRequireDefault(require("../elements/AccessibleTooltipButton"));

var _ReplyPreview = _interopRequireDefault(require("./ReplyPreview"));

var _UIFeature = require("../../../settings/UIFeature");

var _AsyncStore = require("../../../stores/AsyncStore");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _VoiceRecordComposerTile = _interopRequireDefault(require("./VoiceRecordComposerTile"));

var _VoiceRecordingStore = require("../../../stores/VoiceRecordingStore");

var _VoiceRecording = require("../../../audio/VoiceRecording");

var _Tooltip = _interopRequireWildcard(require("../elements/Tooltip"));

var _SendMessageComposer = _interopRequireDefault(require("./SendMessageComposer"));

var _actions = require("../../../dispatcher/actions");

var _EmojiPicker = _interopRequireDefault(require("../emojipicker/EmojiPicker"));

var _MemberStatusMessageAvatar = _interopRequireDefault(require("../avatars/MemberStatusMessageAvatar"));

var _UIStore = _interopRequireWildcard(require("../../../stores/UIStore"));

var _Modal = _interopRequireDefault(require("../../../Modal"));

var _event = require("matrix-js-sdk/src/@types/event");

var _RoomContext = _interopRequireDefault(require("../../../contexts/RoomContext"));

var _consts = require("../../../polls/consts");

var _ErrorDialog = _interopRequireDefault(require("../dialogs/ErrorDialog"));

var _PollCreateDialog = _interopRequireDefault(require("../elements/PollCreateDialog"));

var _dec, _class, _class2, _temp;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

let instanceCount = 0;
const NARROW_MODE_BREAKPOINT = 500;

function ComposerAvatar(props) {
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_MessageComposer_avatar"
  }, /*#__PURE__*/_react.default.createElement(_MemberStatusMessageAvatar.default, {
    member: props.me,
    width: 24,
    height: 24
  }));
}

function SendButton(props) {
  return /*#__PURE__*/_react.default.createElement(_AccessibleTooltipButton.default, {
    className: "mx_MessageComposer_sendMessage",
    onClick: props.onClick,
    title: props.title ?? (0, _languageHandler._t)('Send message')
  });
}

const EmojiButton = ({
  addEmoji,
  menuPosition,
  narrowMode
}) => {
  const [menuDisplayed, button, openMenu, closeMenu] = (0, _ContextMenu.useContextMenu)();
  let contextMenu;

  if (menuDisplayed) {
    const position = menuPosition ?? (0, _ContextMenu.aboveLeftOf)(button.current.getBoundingClientRect());
    contextMenu = /*#__PURE__*/_react.default.createElement(_ContextMenu.default, (0, _extends2.default)({}, position, {
      onFinished: closeMenu,
      managed: false
    }), /*#__PURE__*/_react.default.createElement(_EmojiPicker.default, {
      onChoose: addEmoji,
      showQuickReactions: true
    }));
  }

  const className = (0, _classnames.default)("mx_MessageComposer_button", "mx_MessageComposer_emoji", {
    "mx_MessageComposer_button_highlight": menuDisplayed
  }); // TODO: replace ContextMenuTooltipButton with a unified representation of
  // the header buttons and the right panel buttons

  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_AccessibleTooltipButton.default, {
    className: className,
    onClick: openMenu,
    title: !narrowMode && (0, _languageHandler._t)('Emoji picker'),
    label: narrowMode ? (0, _languageHandler._t)("Add emoji") : null
  }), contextMenu);
};

class UploadButton extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "uploadInput", /*#__PURE__*/_react.default.createRef());
    (0, _defineProperty2.default)(this, "dispatcherRef", void 0);
    (0, _defineProperty2.default)(this, "onAction", payload => {
      if (payload.action === "upload_file") {
        this.onUploadClick();
      }
    });
    (0, _defineProperty2.default)(this, "onUploadClick", () => {
      if (_MatrixClientPeg.MatrixClientPeg.get().isGuest()) {
        _dispatcher.default.dispatch({
          action: 'require_registration'
        });

        return;
      }

      this.uploadInput.current.click();
    });
    (0, _defineProperty2.default)(this, "onUploadFileInputChange", ev => {
      if (ev.target.files.length === 0) return; // take a copy so we can safely reset the value of the form control
      // (Note it is a FileList: we can't use slice or sensible iteration).

      const tfiles = [];

      for (let i = 0; i < ev.target.files.length; ++i) {
        tfiles.push(ev.target.files[i]);
      }

      _ContentMessages.default.sharedInstance().sendContentListToRoom(tfiles, this.props.roomId, this.props.relation, _MatrixClientPeg.MatrixClientPeg.get()); // This is the onChange handler for a file form control, but we're
      // not keeping any state, so reset the value of the form control
      // to empty.
      // NB. we need to set 'value': the 'files' property is immutable.


      ev.target.value = '';
    });
    this.dispatcherRef = _dispatcher.default.register(this.onAction);
  }

  componentWillUnmount() {
    _dispatcher.default.unregister(this.dispatcherRef);
  }

  render() {
    const uploadInputStyle = {
      display: 'none'
    };
    return /*#__PURE__*/_react.default.createElement(_AccessibleTooltipButton.default, {
      className: "mx_MessageComposer_button mx_MessageComposer_upload",
      onClick: this.onUploadClick,
      title: (0, _languageHandler._t)('Upload file')
    }, /*#__PURE__*/_react.default.createElement("input", {
      ref: this.uploadInput,
      type: "file",
      style: uploadInputStyle,
      multiple: true,
      onChange: this.onUploadFileInputChange
    }));
  }

}

class PollButton extends _react.default.PureComponent {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "onCreateClick", () => {
      const canSend = this.props.room.currentState.maySendEvent(_consts.POLL_START_EVENT_TYPE.name, _MatrixClientPeg.MatrixClientPeg.get().getUserId());

      if (!canSend) {
        _Modal.default.createTrackedDialog('Polls', 'permissions error: cannot start', _ErrorDialog.default, {
          title: (0, _languageHandler._t)("Permission Required"),
          description: (0, _languageHandler._t)("You do not have permission to start polls in this room.")
        });
      } else {
        _Modal.default.createTrackedDialog('Polls', 'create', _PollCreateDialog.default, {
          room: this.props.room
        }, 'mx_CompoundDialog', false, // isPriorityModal
        true // isStaticModal
        );
      }
    });
  }

  render() {
    return /*#__PURE__*/_react.default.createElement(_AccessibleTooltipButton.default, {
      className: "mx_MessageComposer_button mx_MessageComposer_poll",
      onClick: this.onCreateClick,
      title: (0, _languageHandler._t)('Create poll')
    });
  }

}

let MessageComposer = (_dec = (0, _replaceableComponent.replaceableComponent)("views.rooms.MessageComposer"), _dec(_class = (_temp = _class2 = class MessageComposer extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "dispatcherRef", void 0);
    (0, _defineProperty2.default)(this, "messageComposerInput", /*#__PURE__*/(0, _react.createRef)());
    (0, _defineProperty2.default)(this, "voiceRecordingButton", /*#__PURE__*/(0, _react.createRef)());
    (0, _defineProperty2.default)(this, "ref", /*#__PURE__*/(0, _react.createRef)());
    (0, _defineProperty2.default)(this, "instanceId", void 0);
    (0, _defineProperty2.default)(this, "context", void 0);
    (0, _defineProperty2.default)(this, "onResize", (type, entry) => {
      if (type === _UIStore.UI_EVENTS.Resize) {
        const narrowMode = entry.contentRect.width <= NARROW_MODE_BREAKPOINT;
        this.setState({
          narrowMode,
          isMenuOpen: !narrowMode ? false : this.state.isMenuOpen,
          showStickers: false
        });
      }
    });
    (0, _defineProperty2.default)(this, "onAction", payload => {
      if (payload.action === 'reply_to_event' && payload.context === this.context.timelineRenderingType) {
        // add a timeout for the reply preview to be rendered, so
        // that the ScrollPanel listening to the resizeNotifier can
        // correctly measure it's new height and scroll down to keep
        // at the bottom if it already is
        setTimeout(() => {
          this.props.resizeNotifier.notifyTimelineHeightChanged();
        }, 100);
      }
    });
    (0, _defineProperty2.default)(this, "onRoomStateEvents", (ev, state) => {
      if (ev.getRoomId() !== this.props.room.roomId) return;

      if (ev.getType() === 'm.room.tombstone') {
        this.setState({
          tombstone: this.getRoomTombstone()
        });
      }

      if (ev.getType() === 'm.room.power_levels') {
        this.setState({
          canSendMessages: this.props.room.maySendMessage()
        });
      }
    });
    (0, _defineProperty2.default)(this, "onTombstoneClick", ev => {
      ev.preventDefault();
      const replacementRoomId = this.state.tombstone.getContent()['replacement_room'];

      const replacementRoom = _MatrixClientPeg.MatrixClientPeg.get().getRoom(replacementRoomId);

      let createEventId = null;

      if (replacementRoom) {
        const createEvent = replacementRoom.currentState.getStateEvents('m.room.create', '');
        if (createEvent && createEvent.getId()) createEventId = createEvent.getId();
      }

      const viaServers = [this.state.tombstone.getSender().split(':').slice(1).join(':')];

      _dispatcher.default.dispatch({
        action: _actions.Action.ViewRoom,
        highlighted: true,
        event_id: createEventId,
        room_id: replacementRoomId,
        auto_join: true,
        _type: "tombstone",
        // instrumentation
        // Try to join via the server that sent the event. This converts @something:example.org
        // into a server domain by splitting on colons and ignoring the first entry ("@something").
        via_servers: viaServers,
        opts: {
          // These are passed down to the js-sdk's /join call
          viaServers: viaServers
        }
      });
    });
    (0, _defineProperty2.default)(this, "renderPlaceholderText", () => {
      if (this.props.replyToEvent) {
        var _this$props$relation;

        const replyingToThread = ((_this$props$relation = this.props.relation) === null || _this$props$relation === void 0 ? void 0 : _this$props$relation.rel_type) === _event.RelationType.Thread;

        if (replyingToThread && this.props.e2eStatus) {
          return (0, _languageHandler._t)('Reply to encrypted thread…');
        } else if (replyingToThread) {
          return (0, _languageHandler._t)('Reply to thread…');
        } else if (this.props.e2eStatus) {
          return (0, _languageHandler._t)('Send an encrypted reply…');
        } else {
          return (0, _languageHandler._t)('Send a reply…');
        }
      } else {
        if (this.props.e2eStatus) {
          return (0, _languageHandler._t)('Send an encrypted message…');
        } else {
          return (0, _languageHandler._t)('Send a message…');
        }
      }
    });
    (0, _defineProperty2.default)(this, "addEmoji", emoji => {
      _dispatcher.default.dispatch({
        action: _actions.Action.ComposerInsert,
        text: emoji,
        timelineRenderingType: this.context.timelineRenderingType
      });

      return true;
    });
    (0, _defineProperty2.default)(this, "sendMessage", async () => {
      var _this$messageComposer;

      if (this.state.haveRecording && this.voiceRecordingButton.current) {
        var _this$voiceRecordingB;

        // There shouldn't be any text message to send when a voice recording is active, so
        // just send out the voice recording.
        await ((_this$voiceRecordingB = this.voiceRecordingButton.current) === null || _this$voiceRecordingB === void 0 ? void 0 : _this$voiceRecordingB.send());
        return;
      }

      (_this$messageComposer = this.messageComposerInput.current) === null || _this$messageComposer === void 0 ? void 0 : _this$messageComposer.sendMessage();
    });
    (0, _defineProperty2.default)(this, "onChange", model => {
      this.setState({
        isComposerEmpty: model.isEmpty
      });
    });
    (0, _defineProperty2.default)(this, "onVoiceStoreUpdate", () => {
      const recording = _VoiceRecordingStore.VoiceRecordingStore.instance.activeRecording;

      if (recording) {
        // Delay saying we have a recording until it is started, as we might not yet have A/V permissions
        recording.on(_VoiceRecording.RecordingState.Started, () => {
          this.setState({
            haveRecording: !!_VoiceRecordingStore.VoiceRecordingStore.instance.activeRecording
          });
        }); // We show a little heads up that the recording is about to automatically end soon. The 3s
        // display time is completely arbitrary. Note that we don't need to deregister the listener
        // because the recording instance will clean that up for us.

        recording.on(_VoiceRecording.RecordingState.EndingSoon, ({
          secondsLeft
        }) => {
          this.setState({
            recordingTimeLeftSeconds: secondsLeft
          });
          setTimeout(() => this.setState({
            recordingTimeLeftSeconds: null
          }), 3000);
        });
      } else {
        this.setState({
          haveRecording: false
        });
      }
    });
    (0, _defineProperty2.default)(this, "shouldShowStickerPicker", () => {
      return _SettingsStore.default.getValue(_UIFeature.UIFeature.Widgets) && _SettingsStore.default.getValue("MessageComposerInput.showStickersButton") && !this.state.haveRecording;
    });
    (0, _defineProperty2.default)(this, "showStickers", showStickers => {
      this.setState({
        showStickers
      });
    });
    (0, _defineProperty2.default)(this, "toggleButtonMenu", () => {
      this.setState({
        isMenuOpen: !this.state.isMenuOpen
      });
    });

    _VoiceRecordingStore.VoiceRecordingStore.instance.on(_AsyncStore.UPDATE_EVENT, this.onVoiceStoreUpdate);

    this.state = {
      tombstone: this.getRoomTombstone(),
      canSendMessages: this.props.room.maySendMessage(),
      isComposerEmpty: true,
      haveRecording: false,
      recordingTimeLeftSeconds: null,
      // when set to a number, shows a toast
      isMenuOpen: false,
      showStickers: false
    };
    this.instanceId = instanceCount++;
  }

  componentDidMount() {
    this.dispatcherRef = _dispatcher.default.register(this.onAction);

    _MatrixClientPeg.MatrixClientPeg.get().on("RoomState.events", this.onRoomStateEvents);

    this.waitForOwnMember();

    _UIStore.default.instance.trackElementDimensions(`MessageComposer${this.instanceId}`, this.ref.current);

    _UIStore.default.instance.on(`MessageComposer${this.instanceId}`, this.onResize);
  }

  waitForOwnMember() {
    // if we have the member already, do that
    const me = this.props.room.getMember(_MatrixClientPeg.MatrixClientPeg.get().getUserId());

    if (me) {
      this.setState({
        me
      });
      return;
    } // Otherwise, wait for member loading to finish and then update the member for the avatar.
    // The members should already be loading, and loadMembersIfNeeded
    // will return the promise for the existing operation


    this.props.room.loadMembersIfNeeded().then(() => {
      const me = this.props.room.getMember(_MatrixClientPeg.MatrixClientPeg.get().getUserId());
      this.setState({
        me
      });
    });
  }

  componentWillUnmount() {
    if (_MatrixClientPeg.MatrixClientPeg.get()) {
      _MatrixClientPeg.MatrixClientPeg.get().removeListener("RoomState.events", this.onRoomStateEvents);
    }

    _VoiceRecordingStore.VoiceRecordingStore.instance.off(_AsyncStore.UPDATE_EVENT, this.onVoiceStoreUpdate);

    _dispatcher.default.unregister(this.dispatcherRef);

    _UIStore.default.instance.stopTrackingElementDimensions(`MessageComposer${this.instanceId}`);

    _UIStore.default.instance.removeListener(`MessageComposer${this.instanceId}`, this.onResize);
  }

  getRoomTombstone() {
    return this.props.room.currentState.getStateEvents('m.room.tombstone', '');
  }

  renderButtons(menuPosition) {
    let uploadButtonIndex = 0;
    const buttons = [];

    if (!this.state.haveRecording) {
      if (_SettingsStore.default.getValue("feature_polls")) {
        buttons.push( /*#__PURE__*/_react.default.createElement(PollButton, {
          key: "polls",
          room: this.props.room
        }));
      }

      uploadButtonIndex = buttons.length;
      buttons.push( /*#__PURE__*/_react.default.createElement(UploadButton, {
        key: "controls_upload",
        roomId: this.props.room.roomId,
        relation: this.props.relation
      }));
      buttons.push( /*#__PURE__*/_react.default.createElement(EmojiButton, {
        key: "emoji_button",
        addEmoji: this.addEmoji,
        menuPosition: menuPosition,
        narrowMode: this.state.narrowMode
      }));
    }

    if (this.shouldShowStickerPicker()) {
      let title;

      if (!this.state.narrowMode) {
        title = this.state.showStickers ? (0, _languageHandler._t)("Hide Stickers") : (0, _languageHandler._t)("Show Stickers");
      }

      buttons.push( /*#__PURE__*/_react.default.createElement(_AccessibleTooltipButton.default, {
        id: "stickersButton",
        key: "controls_stickers",
        className: "mx_MessageComposer_button mx_MessageComposer_stickers",
        onClick: () => this.showStickers(!this.state.showStickers),
        title: title,
        label: this.state.narrowMode ? (0, _languageHandler._t)("Send a sticker") : null
      }));
    }

    if (!this.state.haveRecording && !this.state.narrowMode) {
      buttons.push( /*#__PURE__*/_react.default.createElement(_AccessibleTooltipButton.default, {
        key: "voice_message_send",
        className: "mx_MessageComposer_button mx_MessageComposer_voiceMessage",
        onClick: () => {
          var _this$voiceRecordingB2;

          return (_this$voiceRecordingB2 = this.voiceRecordingButton.current) === null || _this$voiceRecordingB2 === void 0 ? void 0 : _this$voiceRecordingB2.onRecordStartEndClick();
        },
        title: (0, _languageHandler._t)("Send voice message")
      }));
    }

    if (!this.state.narrowMode) {
      return buttons;
    } else {
      const classnames = (0, _classnames.default)({
        mx_MessageComposer_button: true,
        mx_MessageComposer_buttonMenu: true,
        mx_MessageComposer_closeButtonMenu: this.state.isMenuOpen
      });
      return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, buttons[uploadButtonIndex], /*#__PURE__*/_react.default.createElement(_AccessibleTooltipButton.default, {
        className: classnames,
        onClick: this.toggleButtonMenu,
        title: (0, _languageHandler._t)("More options"),
        tooltip: false
      }), this.state.isMenuOpen && /*#__PURE__*/_react.default.createElement(_ContextMenu.default, (0, _extends2.default)({
        onFinished: this.toggleButtonMenu
      }, menuPosition, {
        menuPaddingRight: 10,
        menuPaddingTop: 5,
        menuPaddingBottom: 5,
        menuWidth: 150,
        wrapperClassName: "mx_MessageComposer_Menu"
      }), buttons.slice(1).map((button, index) => /*#__PURE__*/_react.default.createElement(_ContextMenu.MenuItem, {
        className: "mx_CallContextMenu_item",
        key: index,
        onClick: this.toggleButtonMenu
      }, button))));
    }
  }

  render() {
    const controls = [this.state.me && !this.props.compact ? /*#__PURE__*/_react.default.createElement(ComposerAvatar, {
      key: "controls_avatar",
      me: this.state.me
    }) : null, this.props.e2eStatus ? /*#__PURE__*/_react.default.createElement(_E2EIcon.default, {
      key: "e2eIcon",
      status: this.props.e2eStatus,
      className: "mx_MessageComposer_e2eIcon"
    }) : null];
    let menuPosition;

    if (this.ref.current) {
      const contentRect = this.ref.current.getBoundingClientRect();
      menuPosition = (0, _ContextMenu.aboveLeftOf)(contentRect);
    }

    if (!this.state.tombstone && this.state.canSendMessages) {
      controls.push( /*#__PURE__*/_react.default.createElement(_SendMessageComposer.default, {
        ref: this.messageComposerInput,
        key: "controls_input",
        room: this.props.room,
        placeholder: this.renderPlaceholderText(),
        permalinkCreator: this.props.permalinkCreator,
        relation: this.props.relation,
        replyToEvent: this.props.replyToEvent,
        onChange: this.onChange,
        disabled: this.state.haveRecording
      }));
      controls.push( /*#__PURE__*/_react.default.createElement(_VoiceRecordComposerTile.default, {
        key: "controls_voice_record",
        ref: this.voiceRecordingButton,
        room: this.props.room
      }));
    } else if (this.state.tombstone) {
      const replacementRoomId = this.state.tombstone.getContent()['replacement_room'];
      const continuesLink = replacementRoomId ? /*#__PURE__*/_react.default.createElement("a", {
        href: (0, _Permalinks.makeRoomPermalink)(replacementRoomId),
        className: "mx_MessageComposer_roomReplaced_link",
        onClick: this.onTombstoneClick
      }, (0, _languageHandler._t)("The conversation continues here.")) : '';
      controls.push( /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_MessageComposer_replaced_wrapper",
        key: "room_replaced"
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_MessageComposer_replaced_valign"
      }, /*#__PURE__*/_react.default.createElement("img", {
        className: "mx_MessageComposer_roomReplaced_icon",
        src: require("../../../../res/img/room_replaced.svg")
      }), /*#__PURE__*/_react.default.createElement("span", {
        className: "mx_MessageComposer_roomReplaced_header"
      }, (0, _languageHandler._t)("This room has been replaced and is no longer active.")), /*#__PURE__*/_react.default.createElement("br", null), continuesLink)));
    } else {
      controls.push( /*#__PURE__*/_react.default.createElement("div", {
        key: "controls_error",
        className: "mx_MessageComposer_noperm_error"
      }, (0, _languageHandler._t)('You do not have permission to post to this room')));
    }

    let recordingTooltip;
    const secondsLeft = Math.round(this.state.recordingTimeLeftSeconds);

    if (secondsLeft) {
      recordingTooltip = /*#__PURE__*/_react.default.createElement(_Tooltip.default, {
        label: (0, _languageHandler._t)("%(seconds)ss left", {
          seconds: secondsLeft
        }),
        alignment: _Tooltip.Alignment.Top,
        yOffset: -50
      });
    }

    controls.push( /*#__PURE__*/_react.default.createElement(_Stickerpicker.default, {
      room: this.props.room,
      showStickers: this.state.showStickers,
      setShowStickers: this.showStickers,
      menuPosition: menuPosition,
      key: "stickers"
    }));
    const showSendButton = !this.state.isComposerEmpty || this.state.haveRecording;
    const classes = (0, _classnames.default)({
      "mx_MessageComposer": true,
      "mx_GroupLayout": true,
      "mx_MessageComposer--compact": this.props.compact,
      "mx_MessageComposer_e2eStatus": this.props.e2eStatus != undefined
    });
    return /*#__PURE__*/_react.default.createElement("div", {
      className: classes,
      ref: this.ref
    }, recordingTooltip, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_MessageComposer_wrapper"
    }, /*#__PURE__*/_react.default.createElement(_ReplyPreview.default, {
      replyToEvent: this.props.replyToEvent,
      permalinkCreator: this.props.permalinkCreator
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_MessageComposer_row"
    }, controls, this.renderButtons(menuPosition), showSendButton && /*#__PURE__*/_react.default.createElement(SendButton, {
      key: "controls_send",
      onClick: this.sendMessage,
      title: this.state.haveRecording ? (0, _languageHandler._t)("Send voice message") : undefined
    }))));
  }

}, (0, _defineProperty2.default)(_class2, "contextType", _RoomContext.default), (0, _defineProperty2.default)(_class2, "defaultProps", {
  compact: false
}), _temp)) || _class);
exports.default = MessageComposer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,