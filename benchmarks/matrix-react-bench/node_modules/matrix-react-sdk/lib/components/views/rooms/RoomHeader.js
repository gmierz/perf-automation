"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _languageHandler = require("../../../languageHandler");

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _SettingsStore = _interopRequireDefault(require("../../../settings/SettingsStore"));

var _RoomHeaderButtons = _interopRequireDefault(require("../right_panel/RoomHeaderButtons"));

var _E2EIcon = _interopRequireDefault(require("./E2EIcon"));

var _DecoratedRoomAvatar = _interopRequireDefault(require("../avatars/DecoratedRoomAvatar"));

var _AccessibleTooltipButton = _interopRequireDefault(require("../elements/AccessibleTooltipButton"));

var _RoomTopic = _interopRequireDefault(require("../elements/RoomTopic"));

var _RoomName = _interopRequireDefault(require("../elements/RoomName"));

var _CallHandler = require("../../../CallHandler");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _Modal = _interopRequireDefault(require("../../../Modal"));

var _InfoDialog = _interopRequireDefault(require("../dialogs/InfoDialog"));

var _lodash = require("lodash");

var _ContextMenu = require("../../structures/ContextMenu");

var _RoomContextMenu = _interopRequireDefault(require("../context_menus/RoomContextMenu"));

var _RoomTile = require("./RoomTile");

var _RoomNotificationStateStore = require("../../../stores/notifications/RoomNotificationStateStore");

var _NotificationState = require("../../../stores/notifications/NotificationState");

var _dec, _class, _class2, _temp;

let RoomHeader = (_dec = (0, _replaceableComponent.replaceableComponent)("views.rooms.RoomHeader"), _dec(_class = (_temp = _class2 = class RoomHeader extends _react.default.Component {
  constructor(props, context) {
    super(props, context);
    (0, _defineProperty2.default)(this, "onRoomStateEvents", (event, state) => {
      if (!this.props.room || event.getRoomId() !== this.props.room.roomId) {
        return;
      } // redisplay the room name, topic, etc.


      this.rateLimitedUpdate();
    });
    (0, _defineProperty2.default)(this, "onNotificationUpdate", () => {
      this.forceUpdate();
    });
    (0, _defineProperty2.default)(this, "rateLimitedUpdate", (0, _lodash.throttle)(() => {
      this.forceUpdate();
    }, 500, {
      leading: true,
      trailing: true
    }));
    (0, _defineProperty2.default)(this, "onContextMenuOpenClick", ev => {
      ev.preventDefault();
      ev.stopPropagation();
      const target = ev.target;
      this.setState({
        contextMenuPosition: target.getBoundingClientRect()
      });
    });
    (0, _defineProperty2.default)(this, "onContextMenuCloseClick", () => {
      this.setState({
        contextMenuPosition: null
      });
    });

    const notiStore = _RoomNotificationStateStore.RoomNotificationStateStore.instance.getRoomState(props.room);

    notiStore.on(_NotificationState.NOTIFICATION_STATE_UPDATE, this.onNotificationUpdate);
    this.state = {};
  }

  componentDidMount() {
    const cli = _MatrixClientPeg.MatrixClientPeg.get();

    cli.on("RoomState.events", this.onRoomStateEvents);
  }

  componentWillUnmount() {
    const cli = _MatrixClientPeg.MatrixClientPeg.get();

    if (cli) {
      cli.removeListener("RoomState.events", this.onRoomStateEvents);
    }

    const notiStore = _RoomNotificationStateStore.RoomNotificationStateStore.instance.getRoomState(this.props.room);

    notiStore.removeListener(_NotificationState.NOTIFICATION_STATE_UPDATE, this.onNotificationUpdate);
  }

  displayInfoDialogAboutScreensharing() {
    _Modal.default.createDialog(_InfoDialog.default, {
      title: (0, _languageHandler._t)("Screen sharing is here!"),
      description: (0, _languageHandler._t)("You can now share your screen by pressing the \"screen share\" " + "button during a call. You can even do this in audio calls if both sides support it!")
    });
  }

  render() {
    let searchStatus = null; // don't display the search count until the search completes and
    // gives us a valid (possibly zero) searchCount.

    if (this.props.searchInfo && this.props.searchInfo.searchCount !== undefined && this.props.searchInfo.searchCount !== null) {
      searchStatus = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_RoomHeader_searchStatus"
      }, "\xA0", (0, _languageHandler._t)("(~%(count)s results)", {
        count: this.props.searchInfo.searchCount
      }));
    } // XXX: this is a bit inefficient - we could just compare room.name for 'Empty room'...


    let settingsHint = false;
    const members = this.props.room ? this.props.room.getJoinedMembers() : undefined;

    if (members) {
      if (members.length === 1 && members[0].userId === _MatrixClientPeg.MatrixClientPeg.get().credentials.userId) {
        const nameEvent = this.props.room.currentState.getStateEvents('m.room.name', '');

        if (!nameEvent || !nameEvent.getContent().name) {
          settingsHint = true;
        }
      }
    }

    let oobName = (0, _languageHandler._t)("Join Room");

    if (this.props.oobData && this.props.oobData.name) {
      oobName = this.props.oobData.name;
    }

    let contextMenu;

    if (this.state.contextMenuPosition && this.props.room) {
      contextMenu = /*#__PURE__*/_react.default.createElement(_RoomContextMenu.default, (0, _extends2.default)({}, (0, _RoomTile.contextMenuBelow)(this.state.contextMenuPosition), {
        room: this.props.room,
        onFinished: this.onContextMenuCloseClick
      }));
    }

    const textClasses = (0, _classnames.default)('mx_RoomHeader_nametext', {
      mx_RoomHeader_settingsHint: settingsHint
    });

    const name = /*#__PURE__*/_react.default.createElement(_ContextMenu.ContextMenuTooltipButton, {
      className: "mx_RoomHeader_name",
      onClick: this.onContextMenuOpenClick,
      isExpanded: !!this.state.contextMenuPosition,
      title: (0, _languageHandler._t)("Room options")
    }, /*#__PURE__*/_react.default.createElement(_RoomName.default, {
      room: this.props.room
    }, name => {
      const roomName = name || oobName;
      return /*#__PURE__*/_react.default.createElement("div", {
        dir: "auto",
        className: textClasses,
        title: roomName
      }, roomName);
    }), this.props.room && /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_RoomHeader_chevron"
    }), contextMenu);

    const topicElement = /*#__PURE__*/_react.default.createElement(_RoomTopic.default, {
      room: this.props.room
    }, (topic, ref) => /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_RoomHeader_topic",
      ref: ref,
      title: topic,
      dir: "auto"
    }, topic));

    let roomAvatar;

    if (this.props.room) {
      roomAvatar = /*#__PURE__*/_react.default.createElement(_DecoratedRoomAvatar.default, {
        room: this.props.room,
        avatarSize: 24,
        oobData: this.props.oobData,
        viewAvatarOnClick: true
      });
    }

    const buttons = [];

    if (this.props.inRoom && _SettingsStore.default.getValue("showCallButtonsInComposer")) {
      const voiceCallButton = /*#__PURE__*/_react.default.createElement(_AccessibleTooltipButton.default, {
        className: "mx_RoomHeader_button mx_RoomHeader_voiceCallButton",
        onClick: () => this.props.onCallPlaced(_CallHandler.PlaceCallType.Voice),
        title: (0, _languageHandler._t)("Voice call"),
        key: "voice"
      });

      const videoCallButton = /*#__PURE__*/_react.default.createElement(_AccessibleTooltipButton.default, {
        className: "mx_RoomHeader_button mx_RoomHeader_videoCallButton",
        onClick: ev => ev.shiftKey ? this.displayInfoDialogAboutScreensharing() : this.props.onCallPlaced(_CallHandler.PlaceCallType.Video),
        title: (0, _languageHandler._t)("Video call"),
        key: "video"
      });

      buttons.push(voiceCallButton, videoCallButton);
    }

    if (this.props.onForgetClick) {
      const forgetButton = /*#__PURE__*/_react.default.createElement(_AccessibleTooltipButton.default, {
        className: "mx_RoomHeader_button mx_RoomHeader_forgetButton",
        onClick: this.props.onForgetClick,
        title: (0, _languageHandler._t)("Forget room"),
        key: "forget"
      });

      buttons.push(forgetButton);
    }

    if (this.props.onAppsClick) {
      const appsButton = /*#__PURE__*/_react.default.createElement(_AccessibleTooltipButton.default, {
        className: (0, _classnames.default)("mx_RoomHeader_button mx_RoomHeader_appsButton", {
          mx_RoomHeader_appsButton_highlight: this.props.appsShown
        }),
        onClick: this.props.onAppsClick,
        title: this.props.appsShown ? (0, _languageHandler._t)("Hide Widgets") : (0, _languageHandler._t)("Show Widgets"),
        key: "apps"
      });

      buttons.push(appsButton);
    }

    if (this.props.onSearchClick && this.props.inRoom) {
      const searchButton = /*#__PURE__*/_react.default.createElement(_AccessibleTooltipButton.default, {
        className: "mx_RoomHeader_button mx_RoomHeader_searchButton",
        onClick: this.props.onSearchClick,
        title: (0, _languageHandler._t)("Search"),
        key: "search"
      });

      buttons.push(searchButton);
    }

    const rightRow = /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_RoomHeader_buttons"
    }, buttons);

    const e2eIcon = this.props.e2eStatus ? /*#__PURE__*/_react.default.createElement(_E2EIcon.default, {
      status: this.props.e2eStatus
    }) : undefined;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_RoomHeader light-panel"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_RoomHeader_wrapper",
      "aria-owns": "mx_RightPanel"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_RoomHeader_avatar"
    }, roomAvatar), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_RoomHeader_e2eIcon"
    }, e2eIcon), name, searchStatus, topicElement, rightRow, /*#__PURE__*/_react.default.createElement(_RoomHeaderButtons.default, {
      room: this.props.room,
      excludedRightPanelPhaseButtons: this.props.excludedRightPanelPhaseButtons
    })));
  }

}, (0, _defineProperty2.default)(_class2, "defaultProps", {
  editing: false,
  inRoom: false,
  excludedRightPanelPhaseButtons: []
}), _temp)) || _class);
exports.default = RoomHeader;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,