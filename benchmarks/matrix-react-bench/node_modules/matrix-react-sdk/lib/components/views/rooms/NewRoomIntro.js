"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _event = require("matrix-js-sdk/src/@types/event");

var _MatrixClientContext = _interopRequireDefault(require("../../../contexts/MatrixClientContext"));

var _RoomContext = _interopRequireDefault(require("../../../contexts/RoomContext"));

var _DMRoomMap = _interopRequireDefault(require("../../../utils/DMRoomMap"));

var _languageHandler = require("../../../languageHandler");

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

var _MiniAvatarUploader = _interopRequireWildcard(require("../elements/MiniAvatarUploader"));

var _RoomAvatar = _interopRequireDefault(require("../avatars/RoomAvatar"));

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _actions = require("../../../dispatcher/actions");

var _SpaceStore = _interopRequireDefault(require("../../../stores/spaces/SpaceStore"));

var _space = require("../../../utils/space");

var _createRoom = require("../../../createRoom");

var _EventTileBubble = _interopRequireDefault(require("../messages/EventTileBubble"));

var _RoomSettingsDialog = require("../dialogs/RoomSettingsDialog");

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _UIComponents = require("../../../customisations/helpers/UIComponents");

var _UIFeature = require("../../../settings/UIFeature");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
Copyright 2020, 2021 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
function hasExpectedEncryptionSettings(matrixClient, room) {
  const isEncrypted = matrixClient.isRoomEncrypted(room.roomId);
  const isPublic = room.getJoinRule() === "public";
  return isPublic || !(0, _createRoom.privateShouldBeEncrypted)() || isEncrypted;
}

const NewRoomIntro = () => {
  const cli = (0, _react.useContext)(_MatrixClientContext.default);
  const {
    room,
    roomId
  } = (0, _react.useContext)(_RoomContext.default);

  const dmPartner = _DMRoomMap.default.shared().getUserIdForRoomId(roomId);

  let body;

  if (dmPartner) {
    let caption;

    if (room.getJoinedMemberCount() + room.getInvitedMemberCount() === 2) {
      caption = (0, _languageHandler._t)("Only the two of you are in this conversation, unless either of you invites anyone to join.");
    }

    const member = room === null || room === void 0 ? void 0 : room.getMember(dmPartner);
    const displayName = (member === null || member === void 0 ? void 0 : member.rawDisplayName) || dmPartner;
    body = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_RoomAvatar.default, {
      room: room,
      width: _MiniAvatarUploader.AVATAR_SIZE,
      height: _MiniAvatarUploader.AVATAR_SIZE,
      onClick: () => {
        _dispatcher.default.dispatch({
          action: _actions.Action.ViewUser,
          // XXX: We should be using a real member object and not assuming what the receiver wants.
          member: member || {
            userId: dmPartner
          }
        });
      }
    }), /*#__PURE__*/_react.default.createElement("h2", null, room.name), /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("This is the beginning of your direct message history with <displayName/>.", {}, {
      displayName: () => /*#__PURE__*/_react.default.createElement("b", null, displayName)
    })), caption && /*#__PURE__*/_react.default.createElement("p", null, caption));
  } else {
    var _room$currentState$ge, _room$currentState$ge2, _room$currentState$ge3, _room$getMember, _SpaceStore$instance$, _room$currentState$ge4, _room$currentState$ge5;

    const inRoom = room && room.getMyMembership() === "join";
    const topic = (_room$currentState$ge = room.currentState.getStateEvents(_event.EventType.RoomTopic, "")) === null || _room$currentState$ge === void 0 ? void 0 : (_room$currentState$ge2 = _room$currentState$ge.getContent()) === null || _room$currentState$ge2 === void 0 ? void 0 : _room$currentState$ge2.topic;
    const canAddTopic = inRoom && room.currentState.maySendStateEvent(_event.EventType.RoomTopic, cli.getUserId());

    const onTopicClick = () => {
      _dispatcher.default.dispatch({
        action: "open_room_settings",
        room_id: roomId
      }, true); // focus the topic field to help the user find it as it'll gain an outline


      setImmediate(() => {
        window.document.getElementById("profileTopic").focus();
      });
    };

    let topicText;

    if (canAddTopic && topic) {
      topicText = (0, _languageHandler._t)("Topic: %(topic)s (<a>edit</a>)", {
        topic
      }, {
        a: sub => /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
          kind: "link",
          onClick: onTopicClick
        }, sub)
      });
    } else if (topic) {
      topicText = (0, _languageHandler._t)("Topic: %(topic)s ", {
        topic
      });
    } else if (canAddTopic) {
      topicText = (0, _languageHandler._t)("<a>Add a topic</a> to help people know what it is about.", {}, {
        a: sub => /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
          kind: "link",
          element: "span",
          onClick: onTopicClick
        }, sub)
      });
    }

    const creator = (_room$currentState$ge3 = room.currentState.getStateEvents(_event.EventType.RoomCreate, "")) === null || _room$currentState$ge3 === void 0 ? void 0 : _room$currentState$ge3.getSender();
    const creatorName = (room === null || room === void 0 ? void 0 : (_room$getMember = room.getMember(creator)) === null || _room$getMember === void 0 ? void 0 : _room$getMember.rawDisplayName) || creator;
    let createdText;

    if (creator === cli.getUserId()) {
      createdText = (0, _languageHandler._t)("You created this room.");
    } else {
      createdText = (0, _languageHandler._t)("%(displayName)s created this room.", {
        displayName: creatorName
      });
    }

    let parentSpace;

    if ((_SpaceStore$instance$ = _SpaceStore.default.instance.activeSpaceRoom) !== null && _SpaceStore$instance$ !== void 0 && _SpaceStore$instance$.canInvite(cli.getUserId()) && _SpaceStore.default.instance.getSpaceFilteredRoomIds(_SpaceStore.default.instance.activeSpace).has(room.roomId)) {
      parentSpace = _SpaceStore.default.instance.activeSpaceRoom;
    }

    let buttons;

    if (parentSpace) {
      buttons = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_NewRoomIntro_buttons"
      }, /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        className: "mx_NewRoomIntro_inviteButton",
        kind: "primary",
        onClick: () => {
          (0, _space.showSpaceInvite)(parentSpace);
        }
      }, (0, _languageHandler._t)("Invite to %(spaceName)s", {
        spaceName: parentSpace.name
      })), room.canInvite(cli.getUserId()) && /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        className: "mx_NewRoomIntro_inviteButton",
        kind: "primary_outline",
        onClick: () => {
          _dispatcher.default.dispatch({
            action: "view_invite",
            roomId
          });
        }
      }, (0, _languageHandler._t)("Invite to just this room")));
    } else if (room.canInvite(cli.getUserId()) && (0, _UIComponents.shouldShowComponent)(_UIFeature.UIComponent.InviteUsers)) {
      buttons = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_NewRoomIntro_buttons"
      }, /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        className: "mx_NewRoomIntro_inviteButton",
        kind: "primary",
        onClick: () => {
          _dispatcher.default.dispatch({
            action: "view_invite",
            roomId
          });
        }
      }, (0, _languageHandler._t)("Invite to this room")));
    }

    const avatarUrl = (_room$currentState$ge4 = room.currentState.getStateEvents(_event.EventType.RoomAvatar, "")) === null || _room$currentState$ge4 === void 0 ? void 0 : (_room$currentState$ge5 = _room$currentState$ge4.getContent()) === null || _room$currentState$ge5 === void 0 ? void 0 : _room$currentState$ge5.url;
    body = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_MiniAvatarUploader.default, {
      hasAvatar: !!avatarUrl,
      noAvatarLabel: (0, _languageHandler._t)("Add a photo, so people can easily spot your room."),
      setAvatarUrl: url => cli.sendStateEvent(roomId, _event.EventType.RoomAvatar, {
        url
      }, '')
    }, /*#__PURE__*/_react.default.createElement(_RoomAvatar.default, {
      room: room,
      width: _MiniAvatarUploader.AVATAR_SIZE,
      height: _MiniAvatarUploader.AVATAR_SIZE
    })), /*#__PURE__*/_react.default.createElement("h2", null, room.name), /*#__PURE__*/_react.default.createElement("p", null, createdText, " ", (0, _languageHandler._t)("This is the start of <roomName/>.", {}, {
      roomName: () => /*#__PURE__*/_react.default.createElement("b", null, room.name)
    })), /*#__PURE__*/_react.default.createElement("p", null, topicText), buttons);
  }

  function openRoomSettings(event) {
    event.preventDefault();

    _dispatcher.default.dispatch({
      action: "open_room_settings",
      initial_tab_id: _RoomSettingsDialog.ROOM_SECURITY_TAB
    });
  }

  const subText = (0, _languageHandler._t)("Your private messages are normally encrypted, but this room isn't. " + "Usually this is due to an unsupported device or method being used, " + "like email invites.");
  let subButton;

  if (room.currentState.mayClientSendStateEvent(_event.EventType.RoomEncryption, _MatrixClientPeg.MatrixClientPeg.get())) {
    subButton = /*#__PURE__*/_react.default.createElement("a", {
      onClick: openRoomSettings,
      href: "#"
    }, " ", (0, _languageHandler._t)("Enable encryption in settings."));
  }

  const subtitle = /*#__PURE__*/_react.default.createElement("span", null, " ", subText, " ", subButton, " ");

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_NewRoomIntro"
  }, !hasExpectedEncryptionSettings(cli, room) && /*#__PURE__*/_react.default.createElement(_EventTileBubble.default, {
    className: "mx_cryptoEvent mx_cryptoEvent_icon_warning",
    title: (0, _languageHandler._t)("End-to-end encryption isn't enabled"),
    subtitle: subtitle
  }), body);
};

var _default = NewRoomIntro;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,