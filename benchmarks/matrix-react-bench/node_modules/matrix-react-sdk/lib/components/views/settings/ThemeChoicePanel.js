"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _languageHandler = require("../../../languageHandler");

var _SettingsStore = _interopRequireDefault(require("../../../settings/SettingsStore"));

var _theme = require("../../../theme");

var _ThemeWatcher = _interopRequireDefault(require("../../../settings/watchers/ThemeWatcher"));

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _actions = require("../../../dispatcher/actions");

var _StyledCheckbox = _interopRequireDefault(require("../elements/StyledCheckbox"));

var _Field = _interopRequireDefault(require("../elements/Field"));

var _StyledRadioGroup = _interopRequireDefault(require("../elements/StyledRadioGroup"));

var _SettingLevel = require("../../../settings/SettingLevel");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _logger = require("matrix-js-sdk/src/logger");

var _dec, _class;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

let ThemeChoicePanel = (_dec = (0, _replaceableComponent.replaceableComponent)("views.settings.tabs.user.ThemeChoicePanel"), _dec(_class = class ThemeChoicePanel extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "themeTimer", void 0);
    (0, _defineProperty2.default)(this, "onThemeChange", newTheme => {
      if (this.state.theme === newTheme) return; // doing getValue in the .catch will still return the value we failed to set,
      // so remember what the value was before we tried to set it so we can revert

      const oldTheme = _SettingsStore.default.getValue('theme');

      _SettingsStore.default.setValue("theme", null, _SettingLevel.SettingLevel.DEVICE, newTheme).catch(() => {
        _dispatcher.default.dispatch({
          action: _actions.Action.RecheckTheme
        });

        this.setState({
          theme: oldTheme
        });
      });

      this.setState({
        theme: newTheme
      }); // The settings watcher doesn't fire until the echo comes back from the
      // server, so to make the theme change immediately we need to manually
      // do the dispatch now
      // XXX: The local echoed value appears to be unreliable, in particular
      // when settings custom themes(!) so adding forceTheme to override
      // the value from settings.

      _dispatcher.default.dispatch({
        action: _actions.Action.RecheckTheme,
        forceTheme: newTheme
      });
    });
    (0, _defineProperty2.default)(this, "onUseSystemThemeChanged", checked => {
      this.setState({
        useSystemTheme: checked
      });

      _SettingsStore.default.setValue("use_system_theme", null, _SettingLevel.SettingLevel.DEVICE, checked);

      _dispatcher.default.dispatch({
        action: _actions.Action.RecheckTheme
      });
    });
    (0, _defineProperty2.default)(this, "onAddCustomTheme", async () => {
      let currentThemes = _SettingsStore.default.getValue("custom_themes");

      if (!currentThemes) currentThemes = [];
      currentThemes = currentThemes.map(c => c); // cheap clone

      if (this.themeTimer) {
        clearTimeout(this.themeTimer);
      }

      try {
        const r = await fetch(this.state.customThemeUrl); // XXX: need some schema for this

        const themeInfo = await r.json();

        if (!themeInfo || typeof themeInfo['name'] !== 'string' || typeof themeInfo['colors'] !== 'object') {
          this.setState({
            customThemeMessage: {
              text: (0, _languageHandler._t)("Invalid theme schema."),
              isError: true
            }
          });
          return;
        }

        currentThemes.push(themeInfo);
      } catch (e) {
        _logger.logger.error(e);

        this.setState({
          customThemeMessage: {
            text: (0, _languageHandler._t)("Error downloading theme information."),
            isError: true
          }
        });
        return; // Don't continue on error
      }

      await _SettingsStore.default.setValue("custom_themes", null, _SettingLevel.SettingLevel.ACCOUNT, currentThemes);
      this.setState({
        customThemeUrl: "",
        customThemeMessage: {
          text: (0, _languageHandler._t)("Theme added!"),
          isError: false
        }
      });
      this.themeTimer = setTimeout(() => {
        this.setState({
          customThemeMessage: {
            text: "",
            isError: false
          }
        });
      }, 3000);
    });
    (0, _defineProperty2.default)(this, "onCustomThemeChange", e => {
      this.setState({
        customThemeUrl: e.target.value
      });
    });
    this.state = _objectSpread(_objectSpread({}, ThemeChoicePanel.calculateThemeState()), {}, {
      customThemeUrl: "",
      customThemeMessage: {
        isError: false,
        text: ""
      }
    });
  }

  static calculateThemeState() {
    // We have to mirror the logic from ThemeWatcher.getEffectiveTheme so we
    // show the right values for things.
    const themeChoice = _SettingsStore.default.getValue("theme");

    const systemThemeExplicit = _SettingsStore.default.getValueAt(_SettingLevel.SettingLevel.DEVICE, "use_system_theme", null, false, true);

    const themeExplicit = _SettingsStore.default.getValueAt(_SettingLevel.SettingLevel.DEVICE, "theme", null, false, true); // If the user has enabled system theme matching, use that.


    if (systemThemeExplicit) {
      return {
        theme: themeChoice,
        useSystemTheme: true
      };
    } // If the user has set a theme explicitly, use that (no system theme matching)


    if (themeExplicit) {
      return {
        theme: themeChoice,
        useSystemTheme: false
      };
    } // Otherwise assume the defaults for the settings


    return {
      theme: themeChoice,
      useSystemTheme: _SettingsStore.default.getValueAt(_SettingLevel.SettingLevel.DEVICE, "use_system_theme")
    };
  }

  renderHighContrastCheckbox() {
    if (!this.state.useSystemTheme && ((0, _theme.findHighContrastTheme)(this.state.theme) || (0, _theme.isHighContrastTheme)(this.state.theme))) {
      return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_StyledCheckbox.default, {
        checked: (0, _theme.isHighContrastTheme)(this.state.theme),
        onChange: e => this.highContrastThemeChanged(e.target.checked)
      }, (0, _languageHandler._t)("Use high contrast")));
    }
  }

  highContrastThemeChanged(checked) {
    let newTheme;

    if (checked) {
      newTheme = (0, _theme.findHighContrastTheme)(this.state.theme);
    } else {
      newTheme = (0, _theme.findNonHighContrastTheme)(this.state.theme);
    }

    if (newTheme) {
      this.onThemeChange(newTheme);
    }
  }

  render() {
    const themeWatcher = new _ThemeWatcher.default();
    let systemThemeSection;

    if (themeWatcher.isSystemThemeSupported()) {
      systemThemeSection = /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_StyledCheckbox.default, {
        checked: this.state.useSystemTheme,
        onChange: e => this.onUseSystemThemeChanged(e.target.checked)
      }, _SettingsStore.default.getDisplayName("use_system_theme")));
    }

    let customThemeForm;

    if (_SettingsStore.default.getValue("feature_custom_themes")) {
      let messageElement = null;

      if (this.state.customThemeMessage.text) {
        if (this.state.customThemeMessage.isError) {
          messageElement = /*#__PURE__*/_react.default.createElement("div", {
            className: "text-error"
          }, this.state.customThemeMessage.text);
        } else {
          messageElement = /*#__PURE__*/_react.default.createElement("div", {
            className: "text-success"
          }, this.state.customThemeMessage.text);
        }
      }

      customThemeForm = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_SettingsTab_section"
      }, /*#__PURE__*/_react.default.createElement("form", {
        onSubmit: this.onAddCustomTheme
      }, /*#__PURE__*/_react.default.createElement(_Field.default, {
        label: (0, _languageHandler._t)("Custom theme URL"),
        type: "text",
        id: "mx_GeneralUserSettingsTab_customThemeInput",
        autoComplete: "off",
        onChange: this.onCustomThemeChange,
        value: this.state.customThemeUrl
      }), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        onClick: this.onAddCustomTheme,
        type: "submit",
        kind: "primary_sm",
        disabled: !this.state.customThemeUrl.trim()
      }, (0, _languageHandler._t)("Add theme")), messageElement));
    }

    const orderedThemes = (0, _theme.getOrderedThemes)();
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_section mx_ThemeChoicePanel"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_SettingsTab_subheading"
    }, (0, _languageHandler._t)("Theme")), systemThemeSection, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_ThemeSelectors"
    }, /*#__PURE__*/_react.default.createElement(_StyledRadioGroup.default, {
      name: "theme",
      definitions: orderedThemes.map(t => ({
        value: t.id,
        label: t.name,
        disabled: this.state.useSystemTheme,
        className: "mx_ThemeSelector_" + t.id
      })),
      onChange: this.onThemeChange,
      value: this.apparentSelectedThemeId(),
      outlined: true
    })), this.renderHighContrastCheckbox(), customThemeForm);
  }

  apparentSelectedThemeId() {
    if (this.state.useSystemTheme) {
      return undefined;
    }

    const nonHighContrast = (0, _theme.findNonHighContrastTheme)(this.state.theme);
    return nonHighContrast ? nonHighContrast : this.state.theme;
  }

}) || _class);
exports.default = ThemeChoicePanel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,