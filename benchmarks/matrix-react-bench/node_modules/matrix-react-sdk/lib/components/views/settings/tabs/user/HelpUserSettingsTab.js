"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _AccessibleButton = _interopRequireDefault(require("../../../elements/AccessibleButton"));

var _languageHandler = require("../../../../../languageHandler");

var _MatrixClientPeg = require("../../../../../MatrixClientPeg");

var _AccessibleTooltipButton = _interopRequireDefault(require("../../../elements/AccessibleTooltipButton"));

var _SdkConfig = _interopRequireDefault(require("../../../../../SdkConfig"));

var _createRoom = _interopRequireDefault(require("../../../../../createRoom"));

var _Modal = _interopRequireDefault(require("../../../../../Modal"));

var _PlatformPeg = _interopRequireDefault(require("../../../../../PlatformPeg"));

var KeyboardShortcuts = _interopRequireWildcard(require("../../../../../accessibility/KeyboardShortcuts"));

var _UpdateCheckButton = _interopRequireDefault(require("../../UpdateCheckButton"));

var _replaceableComponent = require("../../../../../utils/replaceableComponent");

var _strings = require("../../../../../utils/strings");

var ContextMenu = _interopRequireWildcard(require("../../../../structures/ContextMenu"));

var _BugReportDialog = _interopRequireDefault(require("../../../dialogs/BugReportDialog"));

var _GenericTextContextMenu = _interopRequireDefault(require("../../../context_menus/GenericTextContextMenu"));

var _logger = require("matrix-js-sdk/src/logger");

var _dec, _class;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

let HelpUserSettingsTab = (_dec = (0, _replaceableComponent.replaceableComponent)("views.settings.tabs.user.HelpUserSettingsTab"), _dec(_class = class HelpUserSettingsTab extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "closeCopiedTooltip", void 0);
    (0, _defineProperty2.default)(this, "onClearCacheAndReload", e => {
      if (!_PlatformPeg.default.get()) return; // Dev note: please keep this log line, it's useful when troubleshooting a MatrixClient suddenly
      // stopping in the middle of the logs.

      _logger.logger.log("Clear cache & reload clicked");

      _MatrixClientPeg.MatrixClientPeg.get().stopClient();

      _MatrixClientPeg.MatrixClientPeg.get().store.deleteAllData().then(() => {
        _PlatformPeg.default.get().reload();
      });
    });
    (0, _defineProperty2.default)(this, "onBugReport", e => {
      _Modal.default.createTrackedDialog('Bug Report Dialog', '', _BugReportDialog.default, {});
    });
    (0, _defineProperty2.default)(this, "onStartBotChat", e => {
      this.props.closeSettingsFn();
      (0, _createRoom.default)({
        dmUserId: _SdkConfig.default.get().welcomeUserId,
        andView: true
      });
    });
    (0, _defineProperty2.default)(this, "showSpoiler", event => {
      const target = event.target;
      target.innerHTML = target.getAttribute('data-spoiler');
      const range = document.createRange();
      range.selectNodeContents(target);
      const selection = window.getSelection();
      selection.removeAllRanges();
      selection.addRange(range);
    });
    (0, _defineProperty2.default)(this, "onAccessTokenCopyClick", e => {
      this.copy(_MatrixClientPeg.MatrixClientPeg.get().getAccessToken(), e);
    });
    (0, _defineProperty2.default)(this, "onCopyVersionClicked", e => {
      const {
        appVersion,
        olmVersion
      } = this.getVersionInfo();
      this.copy(`${appVersion}\n${olmVersion}`, e);
    });
    this.state = {
      appVersion: null,
      canUpdate: false
    };
  }

  componentDidMount() {
    _PlatformPeg.default.get().getAppVersion().then(ver => this.setState({
      appVersion: ver
    })).catch(e => {
      _logger.logger.error("Error getting vector version: ", e);
    });

    _PlatformPeg.default.get().canSelfUpdate().then(v => this.setState({
      canUpdate: v
    })).catch(e => {
      _logger.logger.error("Error getting self updatability: ", e);
    });
  }

  componentWillUnmount() {
    // if the Copied tooltip is open then get rid of it, there are ways to close the modal which wouldn't close
    // the tooltip otherwise, such as pressing Escape
    if (this.closeCopiedTooltip) this.closeCopiedTooltip();
  }

  getVersionInfo() {
    const brand = _SdkConfig.default.get().brand;

    const appVersion = this.state.appVersion || 'unknown';

    const olmVersionTuple = _MatrixClientPeg.MatrixClientPeg.get().olmVersion;

    const olmVersion = olmVersionTuple ? `${olmVersionTuple[0]}.${olmVersionTuple[1]}.${olmVersionTuple[2]}` : '<not-enabled>';
    return {
      appVersion: `${(0, _languageHandler._t)("%(brand)s version:", {
        brand
      })} ${appVersion}`,
      olmVersion: `${(0, _languageHandler._t)("Olm version:")} ${olmVersion}`
    };
  }

  renderLegal() {
    const tocLinks = _SdkConfig.default.get().terms_and_conditions_links;

    if (!tocLinks) return null;
    const legalLinks = [];

    for (const tocEntry of _SdkConfig.default.get().terms_and_conditions_links) {
      legalLinks.push( /*#__PURE__*/_react.default.createElement("div", {
        key: tocEntry.url
      }, /*#__PURE__*/_react.default.createElement("a", {
        href: tocEntry.url,
        rel: "noreferrer noopener",
        target: "_blank"
      }, tocEntry.text)));
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_section mx_HelpUserSettingsTab_versions"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_SettingsTab_subheading"
    }, (0, _languageHandler._t)("Legal")), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_subsectionText"
    }, legalLinks));
  }

  renderCredits() {
    // Note: This is not translated because it is legal text.
    // Also, &nbsp; is ugly but necessary.
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_section"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_SettingsTab_subheading"
    }, (0, _languageHandler._t)("Credits")), /*#__PURE__*/_react.default.createElement("ul", null, /*#__PURE__*/_react.default.createElement("li", null, "The ", /*#__PURE__*/_react.default.createElement("a", {
      href: "themes/element/img/backgrounds/lake.jpg",
      rel: "noreferrer noopener",
      target: "_blank"
    }, "default cover photo"), " is \xA9\xA0", /*#__PURE__*/_react.default.createElement("a", {
      href: "https://www.flickr.com/golan",
      rel: "noreferrer noopener",
      target: "_blank"
    }, "Jes\xFAs Roncero"), " used under the terms of\xA0", /*#__PURE__*/_react.default.createElement("a", {
      href: "https://creativecommons.org/licenses/by-sa/4.0/",
      rel: "noreferrer noopener",
      target: "_blank"
    }, "CC-BY-SA 4.0"), "."), /*#__PURE__*/_react.default.createElement("li", null, "The ", /*#__PURE__*/_react.default.createElement("a", {
      href: "https://github.com/matrix-org/twemoji-colr",
      rel: "noreferrer noopener",
      target: "_blank"
    }, "twemoji-colr"), " font is \xA9\xA0", /*#__PURE__*/_react.default.createElement("a", {
      href: "https://mozilla.org",
      rel: "noreferrer noopener",
      target: "_blank"
    }, "Mozilla Foundation"), " used under the terms of\xA0", /*#__PURE__*/_react.default.createElement("a", {
      href: "http://www.apache.org/licenses/LICENSE-2.0",
      rel: "noreferrer noopener",
      target: "_blank"
    }, "Apache 2.0"), "."), /*#__PURE__*/_react.default.createElement("li", null, "The ", /*#__PURE__*/_react.default.createElement("a", {
      href: "https://twemoji.twitter.com/",
      rel: "noreferrer noopener",
      target: "_blank"
    }, "Twemoji"), " emoji art is \xA9\xA0", /*#__PURE__*/_react.default.createElement("a", {
      href: "https://twemoji.twitter.com/",
      rel: "noreferrer noopener",
      target: "_blank"
    }, "Twitter, Inc and other contributors"), " used under the terms of\xA0", /*#__PURE__*/_react.default.createElement("a", {
      href: "https://creativecommons.org/licenses/by/4.0/",
      rel: "noreferrer noopener",
      target: "_blank"
    }, "CC-BY 4.0"), ".")));
  }

  async copy(text, e) {
    e.preventDefault();
    const target = e.target; // copy target before we go async and React throws it away

    const successful = await (0, _strings.copyPlaintext)(text);
    const buttonRect = target.getBoundingClientRect();
    const {
      close
    } = ContextMenu.createMenu(_GenericTextContextMenu.default, _objectSpread(_objectSpread({}, (0, ContextMenu.toRightOf)(buttonRect, 2)), {}, {
      message: successful ? (0, _languageHandler._t)('Copied!') : (0, _languageHandler._t)('Failed to copy')
    }));
    this.closeCopiedTooltip = target.onmouseleave = close;
  }

  render() {
    const brand = _SdkConfig.default.get().brand;

    let faqText = (0, _languageHandler._t)('For help with using %(brand)s, click <a>here</a>.', {
      brand
    }, {
      'a': sub => /*#__PURE__*/_react.default.createElement("a", {
        href: "https://element.io/help",
        rel: "noreferrer noopener",
        target: "_blank"
      }, sub)
    });

    if (_SdkConfig.default.get().welcomeUserId && (0, _languageHandler.getCurrentLanguage)().startsWith('en')) {
      faqText = /*#__PURE__*/_react.default.createElement("div", null, (0, _languageHandler._t)('For help with using %(brand)s, click <a>here</a> or start a chat with our ' + 'bot using the button below.', {
        brand
      }, {
        'a': sub => /*#__PURE__*/_react.default.createElement("a", {
          href: "https://element.io/help",
          rel: "noreferrer noopener",
          target: "_blank"
        }, sub)
      }), /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        onClick: this.onStartBotChat,
        kind: "primary"
      }, (0, _languageHandler._t)("Chat with %(brand)s Bot", {
        brand
      }))));
    }

    let updateButton = null;

    if (this.state.canUpdate) {
      updateButton = /*#__PURE__*/_react.default.createElement(_UpdateCheckButton.default, null);
    }

    let bugReportingSection;

    if (_SdkConfig.default.get().bug_report_endpoint_url) {
      bugReportingSection = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_SettingsTab_section"
      }, /*#__PURE__*/_react.default.createElement("span", {
        className: "mx_SettingsTab_subheading"
      }, (0, _languageHandler._t)('Bug reporting')), /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_SettingsTab_subsectionText"
      }, (0, _languageHandler._t)("If you've submitted a bug via GitHub, debug logs can help " + "us track down the problem. Debug logs contain application " + "usage data including your username, the IDs or aliases of " + "the rooms or groups you have visited, which UI elements you " + "last interacted with, and the usernames of " + "other users. They do not contain messages."), /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_HelpUserSettingsTab_debugButton"
      }, /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        onClick: this.onBugReport,
        kind: "primary"
      }, (0, _languageHandler._t)("Submit debug logs"))), (0, _languageHandler._t)("To report a Matrix-related security issue, please read the Matrix.org " + "<a>Security Disclosure Policy</a>.", {}, {
        a: sub => /*#__PURE__*/_react.default.createElement("a", {
          href: "https://matrix.org/security-disclosure-policy/",
          rel: "noreferrer noopener",
          target: "_blank"
        }, sub)
      })));
    }

    const {
      appVersion,
      olmVersion
    } = this.getVersionInfo();
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab mx_HelpUserSettingsTab"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_heading"
    }, (0, _languageHandler._t)("Help & About")), bugReportingSection, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_section"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_SettingsTab_subheading"
    }, (0, _languageHandler._t)("FAQ")), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_subsectionText"
    }, faqText), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      kind: "primary",
      onClick: KeyboardShortcuts.toggleDialog
    }, (0, _languageHandler._t)("Keyboard Shortcuts"))), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_section mx_HelpUserSettingsTab_versions"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_SettingsTab_subheading"
    }, (0, _languageHandler._t)("Versions")), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_subsectionText"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_HelpUserSettingsTab_copy"
    }, appVersion, /*#__PURE__*/_react.default.createElement("br", null), olmVersion, /*#__PURE__*/_react.default.createElement("br", null), /*#__PURE__*/_react.default.createElement(_AccessibleTooltipButton.default, {
      title: (0, _languageHandler._t)("Copy"),
      onClick: this.onCopyVersionClicked,
      className: "mx_HelpUserSettingsTab_copyButton"
    })), updateButton)), this.renderLegal(), this.renderCredits(), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_section mx_HelpUserSettingsTab_versions"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_SettingsTab_subheading"
    }, (0, _languageHandler._t)("Advanced")), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_subsectionText"
    }, (0, _languageHandler._t)("Homeserver is"), " ", /*#__PURE__*/_react.default.createElement("code", null, _MatrixClientPeg.MatrixClientPeg.get().getHomeserverUrl()), /*#__PURE__*/_react.default.createElement("br", null), (0, _languageHandler._t)("Identity server is"), " ", /*#__PURE__*/_react.default.createElement("code", null, _MatrixClientPeg.MatrixClientPeg.get().getIdentityServerUrl()), /*#__PURE__*/_react.default.createElement("br", null), /*#__PURE__*/_react.default.createElement("br", null), /*#__PURE__*/_react.default.createElement("details", null, /*#__PURE__*/_react.default.createElement("summary", null, (0, _languageHandler._t)("Access Token")), /*#__PURE__*/_react.default.createElement("br", null), /*#__PURE__*/_react.default.createElement("b", null, (0, _languageHandler._t)("Your access token gives full access to your account." + " Do not share it with anyone.")), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_HelpUserSettingsTab_copy"
    }, /*#__PURE__*/_react.default.createElement("code", null, _MatrixClientPeg.MatrixClientPeg.get().getAccessToken()), /*#__PURE__*/_react.default.createElement(_AccessibleTooltipButton.default, {
      title: (0, _languageHandler._t)("Copy"),
      onClick: this.onAccessTokenCopyClick,
      className: "mx_HelpUserSettingsTab_copyButton"
    }))), /*#__PURE__*/_react.default.createElement("br", null), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_HelpUserSettingsTab_debugButton"
    }, /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      onClick: this.onClearCacheAndReload,
      kind: "danger"
    }, (0, _languageHandler._t)("Clear cache and reload"))))));
  }

}) || _class);
exports.default = HelpUserSettingsTab;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL3NldHRpbmdzL3RhYnMvdXNlci9IZWxwVXNlclNldHRpbmdzVGFiLnRzeCJdLCJuYW1lcyI6WyJIZWxwVXNlclNldHRpbmdzVGFiIiwiUmVhY3QiLCJDb21wb25lbnQiLCJjb25zdHJ1Y3RvciIsInByb3BzIiwiZSIsIlBsYXRmb3JtUGVnIiwiZ2V0IiwibG9nZ2VyIiwibG9nIiwiTWF0cml4Q2xpZW50UGVnIiwic3RvcENsaWVudCIsInN0b3JlIiwiZGVsZXRlQWxsRGF0YSIsInRoZW4iLCJyZWxvYWQiLCJNb2RhbCIsImNyZWF0ZVRyYWNrZWREaWFsb2ciLCJCdWdSZXBvcnREaWFsb2ciLCJjbG9zZVNldHRpbmdzRm4iLCJkbVVzZXJJZCIsIlNka0NvbmZpZyIsIndlbGNvbWVVc2VySWQiLCJhbmRWaWV3IiwiZXZlbnQiLCJ0YXJnZXQiLCJpbm5lckhUTUwiLCJnZXRBdHRyaWJ1dGUiLCJyYW5nZSIsImRvY3VtZW50IiwiY3JlYXRlUmFuZ2UiLCJzZWxlY3ROb2RlQ29udGVudHMiLCJzZWxlY3Rpb24iLCJ3aW5kb3ciLCJnZXRTZWxlY3Rpb24iLCJyZW1vdmVBbGxSYW5nZXMiLCJhZGRSYW5nZSIsImNvcHkiLCJnZXRBY2Nlc3NUb2tlbiIsImFwcFZlcnNpb24iLCJvbG1WZXJzaW9uIiwiZ2V0VmVyc2lvbkluZm8iLCJzdGF0ZSIsImNhblVwZGF0ZSIsImNvbXBvbmVudERpZE1vdW50IiwiZ2V0QXBwVmVyc2lvbiIsInZlciIsInNldFN0YXRlIiwiY2F0Y2giLCJlcnJvciIsImNhblNlbGZVcGRhdGUiLCJ2IiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJjbG9zZUNvcGllZFRvb2x0aXAiLCJicmFuZCIsIm9sbVZlcnNpb25UdXBsZSIsInJlbmRlckxlZ2FsIiwidG9jTGlua3MiLCJ0ZXJtc19hbmRfY29uZGl0aW9uc19saW5rcyIsImxlZ2FsTGlua3MiLCJ0b2NFbnRyeSIsInB1c2giLCJ1cmwiLCJ0ZXh0IiwicmVuZGVyQ3JlZGl0cyIsInByZXZlbnREZWZhdWx0Iiwic3VjY2Vzc2Z1bCIsImJ1dHRvblJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJjbG9zZSIsIkNvbnRleHRNZW51IiwiY3JlYXRlTWVudSIsIkdlbmVyaWNUZXh0Q29udGV4dE1lbnUiLCJtZXNzYWdlIiwib25tb3VzZWxlYXZlIiwicmVuZGVyIiwiZmFxVGV4dCIsInN1YiIsInN0YXJ0c1dpdGgiLCJvblN0YXJ0Qm90Q2hhdCIsInVwZGF0ZUJ1dHRvbiIsImJ1Z1JlcG9ydGluZ1NlY3Rpb24iLCJidWdfcmVwb3J0X2VuZHBvaW50X3VybCIsIm9uQnVnUmVwb3J0IiwiYSIsIktleWJvYXJkU2hvcnRjdXRzIiwidG9nZ2xlRGlhbG9nIiwib25Db3B5VmVyc2lvbkNsaWNrZWQiLCJnZXRIb21lc2VydmVyVXJsIiwiZ2V0SWRlbnRpdHlTZXJ2ZXJVcmwiLCJvbkFjY2Vzc1Rva2VuQ29weUNsaWNrIiwib25DbGVhckNhY2hlQW5kUmVsb2FkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQWdCQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQTs7QUFDQTs7QUFFQTs7Ozs7Ozs7Ozs7O0lBWXFCQSxtQixXQURwQixnREFBcUIsOENBQXJCLEMsZ0JBQUQsTUFDcUJBLG1CQURyQixTQUNpREMsZUFBTUMsU0FEdkQsQ0FDaUY7QUFHN0VDLEVBQUFBLFdBQVcsQ0FBQ0MsS0FBRCxFQUFRO0FBQ2YsVUFBTUEsS0FBTjtBQURlO0FBQUEsaUVBc0NjQyxDQUFELElBQU87QUFDbkMsVUFBSSxDQUFDQyxxQkFBWUMsR0FBWixFQUFMLEVBQXdCLE9BRFcsQ0FHbkM7QUFDQTs7QUFDQUMscUJBQU9DLEdBQVAsQ0FBVyw4QkFBWDs7QUFDQUMsdUNBQWdCSCxHQUFoQixHQUFzQkksVUFBdEI7O0FBQ0FELHVDQUFnQkgsR0FBaEIsR0FBc0JLLEtBQXRCLENBQTRCQyxhQUE1QixHQUE0Q0MsSUFBNUMsQ0FBaUQsTUFBTTtBQUNuRFIsNkJBQVlDLEdBQVosR0FBa0JRLE1BQWxCO0FBQ0gsT0FGRDtBQUdILEtBaERrQjtBQUFBLHVEQWtESVYsQ0FBRCxJQUFPO0FBQ3pCVyxxQkFBTUMsbUJBQU4sQ0FBMEIsbUJBQTFCLEVBQStDLEVBQS9DLEVBQW1EQyx3QkFBbkQsRUFBb0UsRUFBcEU7QUFDSCxLQXBEa0I7QUFBQSwwREFzRE9iLENBQUQsSUFBTztBQUM1QixXQUFLRCxLQUFMLENBQVdlLGVBQVg7QUFDQSwrQkFBVztBQUNQQyxRQUFBQSxRQUFRLEVBQUVDLG1CQUFVZCxHQUFWLEdBQWdCZSxhQURuQjtBQUVQQyxRQUFBQSxPQUFPLEVBQUU7QUFGRixPQUFYO0FBSUgsS0E1RGtCO0FBQUEsdURBOERJQyxLQUFELElBQVc7QUFDN0IsWUFBTUMsTUFBTSxHQUFHRCxLQUFLLENBQUNDLE1BQXJCO0FBQ0FBLE1BQUFBLE1BQU0sQ0FBQ0MsU0FBUCxHQUFtQkQsTUFBTSxDQUFDRSxZQUFQLENBQW9CLGNBQXBCLENBQW5CO0FBRUEsWUFBTUMsS0FBSyxHQUFHQyxRQUFRLENBQUNDLFdBQVQsRUFBZDtBQUNBRixNQUFBQSxLQUFLLENBQUNHLGtCQUFOLENBQXlCTixNQUF6QjtBQUVBLFlBQU1PLFNBQVMsR0FBR0MsTUFBTSxDQUFDQyxZQUFQLEVBQWxCO0FBQ0FGLE1BQUFBLFNBQVMsQ0FBQ0csZUFBVjtBQUNBSCxNQUFBQSxTQUFTLENBQUNJLFFBQVYsQ0FBbUJSLEtBQW5CO0FBQ0gsS0F4RWtCO0FBQUEsa0VBMkpldkIsQ0FBRCxJQUFvQjtBQUNqRCxXQUFLZ0MsSUFBTCxDQUFVM0IsaUNBQWdCSCxHQUFoQixHQUFzQitCLGNBQXRCLEVBQVYsRUFBa0RqQyxDQUFsRDtBQUNILEtBN0prQjtBQUFBLGdFQStKYUEsQ0FBRCxJQUFvQjtBQUMvQyxZQUFNO0FBQUVrQyxRQUFBQSxVQUFGO0FBQWNDLFFBQUFBO0FBQWQsVUFBNkIsS0FBS0MsY0FBTCxFQUFuQztBQUNBLFdBQUtKLElBQUwsQ0FBVyxHQUFFRSxVQUFXLEtBQUlDLFVBQVcsRUFBdkMsRUFBMENuQyxDQUExQztBQUNILEtBbEtrQjtBQUdmLFNBQUtxQyxLQUFMLEdBQWE7QUFDVEgsTUFBQUEsVUFBVSxFQUFFLElBREg7QUFFVEksTUFBQUEsU0FBUyxFQUFFO0FBRkYsS0FBYjtBQUlIOztBQUVEQyxFQUFBQSxpQkFBaUIsR0FBUztBQUN0QnRDLHlCQUFZQyxHQUFaLEdBQWtCc0MsYUFBbEIsR0FBa0MvQixJQUFsQyxDQUF3Q2dDLEdBQUQsSUFBUyxLQUFLQyxRQUFMLENBQWM7QUFBRVIsTUFBQUEsVUFBVSxFQUFFTztBQUFkLEtBQWQsQ0FBaEQsRUFBb0ZFLEtBQXBGLENBQTJGM0MsQ0FBRCxJQUFPO0FBQzdGRyxxQkFBT3lDLEtBQVAsQ0FBYSxnQ0FBYixFQUErQzVDLENBQS9DO0FBQ0gsS0FGRDs7QUFHQUMseUJBQVlDLEdBQVosR0FBa0IyQyxhQUFsQixHQUFrQ3BDLElBQWxDLENBQXdDcUMsQ0FBRCxJQUFPLEtBQUtKLFFBQUwsQ0FBYztBQUFFSixNQUFBQSxTQUFTLEVBQUVRO0FBQWIsS0FBZCxDQUE5QyxFQUErRUgsS0FBL0UsQ0FBc0YzQyxDQUFELElBQU87QUFDeEZHLHFCQUFPeUMsS0FBUCxDQUFhLG1DQUFiLEVBQWtENUMsQ0FBbEQ7QUFDSCxLQUZEO0FBR0g7O0FBRUQrQyxFQUFBQSxvQkFBb0IsR0FBRztBQUNuQjtBQUNBO0FBQ0EsUUFBSSxLQUFLQyxrQkFBVCxFQUE2QixLQUFLQSxrQkFBTDtBQUNoQzs7QUFFT1osRUFBQUEsY0FBYyxHQUErQztBQUNqRSxVQUFNYSxLQUFLLEdBQUdqQyxtQkFBVWQsR0FBVixHQUFnQitDLEtBQTlCOztBQUNBLFVBQU1mLFVBQVUsR0FBRyxLQUFLRyxLQUFMLENBQVdILFVBQVgsSUFBeUIsU0FBNUM7O0FBQ0EsVUFBTWdCLGVBQWUsR0FBRzdDLGlDQUFnQkgsR0FBaEIsR0FBc0JpQyxVQUE5Qzs7QUFDQSxVQUFNQSxVQUFVLEdBQUdlLGVBQWUsR0FDM0IsR0FBRUEsZUFBZSxDQUFDLENBQUQsQ0FBSSxJQUFHQSxlQUFlLENBQUMsQ0FBRCxDQUFJLElBQUdBLGVBQWUsQ0FBQyxDQUFELENBQUksRUFEdEMsR0FFNUIsZUFGTjtBQUlBLFdBQU87QUFDSGhCLE1BQUFBLFVBQVUsRUFBRyxHQUFFLHlCQUFHLG9CQUFILEVBQXlCO0FBQUVlLFFBQUFBO0FBQUYsT0FBekIsQ0FBb0MsSUFBR2YsVUFBVyxFQUQ5RDtBQUVIQyxNQUFBQSxVQUFVLEVBQUcsR0FBRSx5QkFBRyxjQUFILENBQW1CLElBQUdBLFVBQVc7QUFGN0MsS0FBUDtBQUlIOztBQXNDT2dCLEVBQUFBLFdBQVcsR0FBRztBQUNsQixVQUFNQyxRQUFRLEdBQUdwQyxtQkFBVWQsR0FBVixHQUFnQm1ELDBCQUFqQzs7QUFDQSxRQUFJLENBQUNELFFBQUwsRUFBZSxPQUFPLElBQVA7QUFFZixVQUFNRSxVQUFVLEdBQUcsRUFBbkI7O0FBQ0EsU0FBSyxNQUFNQyxRQUFYLElBQXVCdkMsbUJBQVVkLEdBQVYsR0FBZ0JtRCwwQkFBdkMsRUFBbUU7QUFDL0RDLE1BQUFBLFVBQVUsQ0FBQ0UsSUFBWCxlQUFnQjtBQUFLLFFBQUEsR0FBRyxFQUFFRCxRQUFRLENBQUNFO0FBQW5CLHNCQUNaO0FBQUcsUUFBQSxJQUFJLEVBQUVGLFFBQVEsQ0FBQ0UsR0FBbEI7QUFBdUIsUUFBQSxHQUFHLEVBQUMscUJBQTNCO0FBQWlELFFBQUEsTUFBTSxFQUFDO0FBQXhELFNBQW1FRixRQUFRLENBQUNHLElBQTVFLENBRFksQ0FBaEI7QUFHSDs7QUFFRCx3QkFDSTtBQUFLLE1BQUEsU0FBUyxFQUFDO0FBQWYsb0JBQ0k7QUFBTSxNQUFBLFNBQVMsRUFBQztBQUFoQixPQUE4Qyx5QkFBRyxPQUFILENBQTlDLENBREosZUFFSTtBQUFLLE1BQUEsU0FBUyxFQUFDO0FBQWYsT0FDTUosVUFETixDQUZKLENBREo7QUFRSDs7QUFFT0ssRUFBQUEsYUFBYSxHQUFHO0FBQ3BCO0FBQ0E7QUFDQSx3QkFDSTtBQUFLLE1BQUEsU0FBUyxFQUFDO0FBQWYsb0JBQ0k7QUFBTSxNQUFBLFNBQVMsRUFBQztBQUFoQixPQUE4Qyx5QkFBRyxTQUFILENBQTlDLENBREosZUFFSSxzREFDSSw4REFDUTtBQUFHLE1BQUEsSUFBSSxFQUFDLHlDQUFSO0FBQWtELE1BQUEsR0FBRyxFQUFDLHFCQUF0RDtBQUE0RSxNQUFBLE1BQU0sRUFBQztBQUFuRiw2QkFEUiwrQkFJSTtBQUFHLE1BQUEsSUFBSSxFQUFDLDhCQUFSO0FBQXVDLE1BQUEsR0FBRyxFQUFDLHFCQUEzQztBQUFpRSxNQUFBLE1BQU0sRUFBQztBQUF4RSwwQkFKSiwrQ0FPSTtBQUFHLE1BQUEsSUFBSSxFQUFDLGlEQUFSO0FBQTBELE1BQUEsR0FBRyxFQUFDLHFCQUE5RDtBQUFvRixNQUFBLE1BQU0sRUFBQztBQUEzRixzQkFQSixNQURKLGVBWUksOERBQ1E7QUFDQSxNQUFBLElBQUksRUFBQyw0Q0FETDtBQUVBLE1BQUEsR0FBRyxFQUFDLHFCQUZKO0FBR0EsTUFBQSxNQUFNLEVBQUM7QUFIUCxzQkFEUixvQ0FRSTtBQUFHLE1BQUEsSUFBSSxFQUFDLHFCQUFSO0FBQThCLE1BQUEsR0FBRyxFQUFDLHFCQUFsQztBQUF3RCxNQUFBLE1BQU0sRUFBQztBQUEvRCw0QkFSSiwrQ0FXSTtBQUFHLE1BQUEsSUFBSSxFQUFDLDRDQUFSO0FBQXFELE1BQUEsR0FBRyxFQUFDLHFCQUF6RDtBQUErRSxNQUFBLE1BQU0sRUFBQztBQUF0RixvQkFYSixNQVpKLGVBeUJJLDhEQUNRO0FBQUcsTUFBQSxJQUFJLEVBQUMsOEJBQVI7QUFBdUMsTUFBQSxHQUFHLEVBQUMscUJBQTNDO0FBQWlFLE1BQUEsTUFBTSxFQUFDO0FBQXhFLGlCQURSLHlDQUlJO0FBQUcsTUFBQSxJQUFJLEVBQUMsOEJBQVI7QUFBdUMsTUFBQSxHQUFHLEVBQUMscUJBQTNDO0FBQWlFLE1BQUEsTUFBTSxFQUFDO0FBQXhFLDZDQUpKLCtDQU9JO0FBQUcsTUFBQSxJQUFJLEVBQUMsOENBQVI7QUFBdUQsTUFBQSxHQUFHLEVBQUMscUJBQTNEO0FBQWlGLE1BQUEsTUFBTSxFQUFDO0FBQXhGLG1CQVBKLE1BekJKLENBRkosQ0FESjtBQTBDSDs7QUFFaUIsUUFBSjNCLElBQUksQ0FBQzBCLElBQUQsRUFBZTFELENBQWYsRUFBK0I7QUFDN0NBLElBQUFBLENBQUMsQ0FBQzRELGNBQUY7QUFDQSxVQUFNeEMsTUFBTSxHQUFHcEIsQ0FBQyxDQUFDb0IsTUFBakIsQ0FGNkMsQ0FFRjs7QUFFM0MsVUFBTXlDLFVBQVUsR0FBRyxNQUFNLDRCQUFjSCxJQUFkLENBQXpCO0FBQ0EsVUFBTUksVUFBVSxHQUFHMUMsTUFBTSxDQUFDMkMscUJBQVAsRUFBbkI7QUFDQSxVQUFNO0FBQUVDLE1BQUFBO0FBQUYsUUFBWUMsV0FBVyxDQUFDQyxVQUFaLENBQXVCQywrQkFBdkIsa0NBQ1gsMkJBQVVMLFVBQVYsRUFBc0IsQ0FBdEIsQ0FEVztBQUVkTSxNQUFBQSxPQUFPLEVBQUVQLFVBQVUsR0FBRyx5QkFBRyxTQUFILENBQUgsR0FBbUIseUJBQUcsZ0JBQUg7QUFGeEIsT0FBbEI7QUFJQSxTQUFLYixrQkFBTCxHQUEwQjVCLE1BQU0sQ0FBQ2lELFlBQVAsR0FBc0JMLEtBQWhEO0FBQ0g7O0FBV0RNLEVBQUFBLE1BQU0sR0FBRztBQUNMLFVBQU1yQixLQUFLLEdBQUdqQyxtQkFBVWQsR0FBVixHQUFnQitDLEtBQTlCOztBQUVBLFFBQUlzQixPQUFPLEdBQUcseUJBQ1YsbURBRFUsRUFFVjtBQUNJdEIsTUFBQUE7QUFESixLQUZVLEVBS1Y7QUFDSSxXQUFNdUIsR0FBRCxpQkFBUztBQUNWLFFBQUEsSUFBSSxFQUFDLHlCQURLO0FBRVYsUUFBQSxHQUFHLEVBQUMscUJBRk07QUFHVixRQUFBLE1BQU0sRUFBQztBQUhHLFNBS1JBLEdBTFE7QUFEbEIsS0FMVSxDQUFkOztBQWVBLFFBQUl4RCxtQkFBVWQsR0FBVixHQUFnQmUsYUFBaEIsSUFBaUMsMkNBQXFCd0QsVUFBckIsQ0FBZ0MsSUFBaEMsQ0FBckMsRUFBNEU7QUFDeEVGLE1BQUFBLE9BQU8sZ0JBQ0gsMENBQ00seUJBQ0UsK0VBQ0EsNkJBRkYsRUFHRTtBQUNJdEIsUUFBQUE7QUFESixPQUhGLEVBTUU7QUFDSSxhQUFNdUIsR0FBRCxpQkFBUztBQUNWLFVBQUEsSUFBSSxFQUFDLHlCQURLO0FBRVYsVUFBQSxHQUFHLEVBQUMscUJBRk07QUFHVixVQUFBLE1BQU0sRUFBQztBQUhHLFdBS1JBLEdBTFE7QUFEbEIsT0FORixDQUROLGVBaUJJLHVEQUNJLDZCQUFDLHlCQUFEO0FBQWtCLFFBQUEsT0FBTyxFQUFFLEtBQUtFLGNBQWhDO0FBQWdELFFBQUEsSUFBSSxFQUFDO0FBQXJELFNBQ00seUJBQUcseUJBQUgsRUFBOEI7QUFBRXpCLFFBQUFBO0FBQUYsT0FBOUIsQ0FETixDQURKLENBakJKLENBREo7QUF5Qkg7O0FBRUQsUUFBSTBCLFlBQVksR0FBRyxJQUFuQjs7QUFDQSxRQUFJLEtBQUt0QyxLQUFMLENBQVdDLFNBQWYsRUFBMEI7QUFDdEJxQyxNQUFBQSxZQUFZLGdCQUFHLDZCQUFDLDBCQUFELE9BQWY7QUFDSDs7QUFFRCxRQUFJQyxtQkFBSjs7QUFDQSxRQUFJNUQsbUJBQVVkLEdBQVYsR0FBZ0IyRSx1QkFBcEIsRUFBNkM7QUFDekNELE1BQUFBLG1CQUFtQixnQkFDZjtBQUFLLFFBQUEsU0FBUyxFQUFDO0FBQWYsc0JBQ0k7QUFBTSxRQUFBLFNBQVMsRUFBQztBQUFoQixTQUE4Qyx5QkFBRyxlQUFILENBQTlDLENBREosZUFFSTtBQUFLLFFBQUEsU0FBUyxFQUFDO0FBQWYsU0FDTSx5QkFDRSwrREFDQSw0REFEQSxHQUVBLDREQUZBLEdBR0EsOERBSEEsR0FJQSw2Q0FKQSxHQUtBLDRDQU5GLENBRE4sZUFTSTtBQUFLLFFBQUEsU0FBUyxFQUFDO0FBQWYsc0JBQ0ksNkJBQUMseUJBQUQ7QUFBa0IsUUFBQSxPQUFPLEVBQUUsS0FBS0UsV0FBaEM7QUFBNkMsUUFBQSxJQUFJLEVBQUM7QUFBbEQsU0FDTSx5QkFBRyxtQkFBSCxDQUROLENBREosQ0FUSixFQWNNLHlCQUNFLDJFQUNBLG9DQUZGLEVBRXdDLEVBRnhDLEVBR0U7QUFDSUMsUUFBQUEsQ0FBQyxFQUFFUCxHQUFHLGlCQUFJO0FBQUcsVUFBQSxJQUFJLEVBQUMsZ0RBQVI7QUFDTixVQUFBLEdBQUcsRUFBQyxxQkFERTtBQUVOLFVBQUEsTUFBTSxFQUFDO0FBRkQsV0FHUEEsR0FITztBQURkLE9BSEYsQ0FkTixDQUZKLENBREo7QUE4Qkg7O0FBRUQsVUFBTTtBQUFFdEMsTUFBQUEsVUFBRjtBQUFjQyxNQUFBQTtBQUFkLFFBQTZCLEtBQUtDLGNBQUwsRUFBbkM7QUFFQSx3QkFDSTtBQUFLLE1BQUEsU0FBUyxFQUFDO0FBQWYsb0JBQ0k7QUFBSyxNQUFBLFNBQVMsRUFBQztBQUFmLE9BQTBDLHlCQUFHLGNBQUgsQ0FBMUMsQ0FESixFQUVNd0MsbUJBRk4sZUFHSTtBQUFLLE1BQUEsU0FBUyxFQUFDO0FBQWYsb0JBQ0k7QUFBTSxNQUFBLFNBQVMsRUFBQztBQUFoQixPQUE4Qyx5QkFBRyxLQUFILENBQTlDLENBREosZUFFSTtBQUFLLE1BQUEsU0FBUyxFQUFDO0FBQWYsT0FDTUwsT0FETixDQUZKLGVBS0ksNkJBQUMseUJBQUQ7QUFBa0IsTUFBQSxJQUFJLEVBQUMsU0FBdkI7QUFBaUMsTUFBQSxPQUFPLEVBQUVTLGlCQUFpQixDQUFDQztBQUE1RCxPQUNNLHlCQUFHLG9CQUFILENBRE4sQ0FMSixDQUhKLGVBWUk7QUFBSyxNQUFBLFNBQVMsRUFBQztBQUFmLG9CQUNJO0FBQU0sTUFBQSxTQUFTLEVBQUM7QUFBaEIsT0FBOEMseUJBQUcsVUFBSCxDQUE5QyxDQURKLGVBRUk7QUFBSyxNQUFBLFNBQVMsRUFBQztBQUFmLG9CQUNJO0FBQUssTUFBQSxTQUFTLEVBQUM7QUFBZixPQUNNL0MsVUFETixlQUNrQix3Q0FEbEIsRUFFTUMsVUFGTixlQUVrQix3Q0FGbEIsZUFHSSw2QkFBQyxnQ0FBRDtBQUNJLE1BQUEsS0FBSyxFQUFFLHlCQUFHLE1BQUgsQ0FEWDtBQUVJLE1BQUEsT0FBTyxFQUFFLEtBQUsrQyxvQkFGbEI7QUFHSSxNQUFBLFNBQVMsRUFBQztBQUhkLE1BSEosQ0FESixFQVVNUCxZQVZOLENBRkosQ0FaSixFQTJCTSxLQUFLeEIsV0FBTCxFQTNCTixFQTRCTSxLQUFLUSxhQUFMLEVBNUJOLGVBNkJJO0FBQUssTUFBQSxTQUFTLEVBQUM7QUFBZixvQkFDSTtBQUFNLE1BQUEsU0FBUyxFQUFDO0FBQWhCLE9BQThDLHlCQUFHLFVBQUgsQ0FBOUMsQ0FESixlQUVJO0FBQUssTUFBQSxTQUFTLEVBQUM7QUFBZixPQUNNLHlCQUFHLGVBQUgsQ0FETixvQkFDNEIsMkNBQVF0RCxpQ0FBZ0JILEdBQWhCLEdBQXNCaUYsZ0JBQXRCLEVBQVIsQ0FENUIsZUFDcUYsd0NBRHJGLEVBRU0seUJBQUcsb0JBQUgsQ0FGTixvQkFFaUMsMkNBQVE5RSxpQ0FBZ0JILEdBQWhCLEdBQXNCa0Ysb0JBQXRCLEVBQVIsQ0FGakMsZUFFOEYsd0NBRjlGLGVBR0ksd0NBSEosZUFJSSwyREFDSSw4Q0FBVyx5QkFBRyxjQUFILENBQVgsQ0FESixlQUM2Qyx3Q0FEN0MsZUFFSSx3Q0FBSyx5QkFBRyx5REFDSCwrQkFEQSxDQUFMLENBRkosZUFJSTtBQUFLLE1BQUEsU0FBUyxFQUFDO0FBQWYsb0JBQ0ksMkNBQVEvRSxpQ0FBZ0JILEdBQWhCLEdBQXNCK0IsY0FBdEIsRUFBUixDQURKLGVBRUksNkJBQUMsZ0NBQUQ7QUFDSSxNQUFBLEtBQUssRUFBRSx5QkFBRyxNQUFILENBRFg7QUFFSSxNQUFBLE9BQU8sRUFBRSxLQUFLb0Qsc0JBRmxCO0FBR0ksTUFBQSxTQUFTLEVBQUM7QUFIZCxNQUZKLENBSkosQ0FKSixlQWdCYyx3Q0FoQmQsZUFpQkk7QUFBSyxNQUFBLFNBQVMsRUFBQztBQUFmLG9CQUNJLDZCQUFDLHlCQUFEO0FBQWtCLE1BQUEsT0FBTyxFQUFFLEtBQUtDLHFCQUFoQztBQUF1RCxNQUFBLElBQUksRUFBQztBQUE1RCxPQUNNLHlCQUFHLHdCQUFILENBRE4sQ0FESixDQWpCSixDQUZKLENBN0JKLENBREo7QUEwREg7O0FBeFQ0RSxDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbkNvcHlyaWdodCAyMDE5LTIwMjEgVGhlIE1hdHJpeC5vcmcgRm91bmRhdGlvbiBDLkkuQy5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IEFjY2Vzc2libGVCdXR0b24sIHsgQnV0dG9uRXZlbnQgfSBmcm9tIFwiLi4vLi4vLi4vZWxlbWVudHMvQWNjZXNzaWJsZUJ1dHRvblwiO1xuaW1wb3J0IHsgX3QsIGdldEN1cnJlbnRMYW5ndWFnZSB9IGZyb20gXCIuLi8uLi8uLi8uLi8uLi9sYW5ndWFnZUhhbmRsZXJcIjtcbmltcG9ydCB7IE1hdHJpeENsaWVudFBlZyB9IGZyb20gXCIuLi8uLi8uLi8uLi8uLi9NYXRyaXhDbGllbnRQZWdcIjtcbmltcG9ydCBBY2Nlc3NpYmxlVG9vbHRpcEJ1dHRvbiBmcm9tICcuLi8uLi8uLi9lbGVtZW50cy9BY2Nlc3NpYmxlVG9vbHRpcEJ1dHRvbic7XG5pbXBvcnQgU2RrQ29uZmlnIGZyb20gXCIuLi8uLi8uLi8uLi8uLi9TZGtDb25maWdcIjtcbmltcG9ydCBjcmVhdGVSb29tIGZyb20gXCIuLi8uLi8uLi8uLi8uLi9jcmVhdGVSb29tXCI7XG5pbXBvcnQgTW9kYWwgZnJvbSBcIi4uLy4uLy4uLy4uLy4uL01vZGFsXCI7XG5pbXBvcnQgUGxhdGZvcm1QZWcgZnJvbSBcIi4uLy4uLy4uLy4uLy4uL1BsYXRmb3JtUGVnXCI7XG5pbXBvcnQgKiBhcyBLZXlib2FyZFNob3J0Y3V0cyBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vYWNjZXNzaWJpbGl0eS9LZXlib2FyZFNob3J0Y3V0c1wiO1xuaW1wb3J0IFVwZGF0ZUNoZWNrQnV0dG9uIGZyb20gXCIuLi8uLi9VcGRhdGVDaGVja0J1dHRvblwiO1xuaW1wb3J0IHsgcmVwbGFjZWFibGVDb21wb25lbnQgfSBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vdXRpbHMvcmVwbGFjZWFibGVDb21wb25lbnRcIjtcbmltcG9ydCB7IGNvcHlQbGFpbnRleHQgfSBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vdXRpbHMvc3RyaW5nc1wiO1xuaW1wb3J0ICogYXMgQ29udGV4dE1lbnUgZnJvbSBcIi4uLy4uLy4uLy4uL3N0cnVjdHVyZXMvQ29udGV4dE1lbnVcIjtcbmltcG9ydCB7IHRvUmlnaHRPZiB9IGZyb20gXCIuLi8uLi8uLi8uLi9zdHJ1Y3R1cmVzL0NvbnRleHRNZW51XCI7XG5pbXBvcnQgQnVnUmVwb3J0RGlhbG9nIGZyb20gJy4uLy4uLy4uL2RpYWxvZ3MvQnVnUmVwb3J0RGlhbG9nJztcbmltcG9ydCBHZW5lcmljVGV4dENvbnRleHRNZW51IGZyb20gXCIuLi8uLi8uLi9jb250ZXh0X21lbnVzL0dlbmVyaWNUZXh0Q29udGV4dE1lbnVcIjtcblxuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSBcIm1hdHJpeC1qcy1zZGsvc3JjL2xvZ2dlclwiO1xuXG5pbnRlcmZhY2UgSVByb3BzIHtcbiAgICBjbG9zZVNldHRpbmdzRm46ICgpID0+IHZvaWQ7XG59XG5cbmludGVyZmFjZSBJU3RhdGUge1xuICAgIGFwcFZlcnNpb246IHN0cmluZztcbiAgICBjYW5VcGRhdGU6IGJvb2xlYW47XG59XG5cbkByZXBsYWNlYWJsZUNvbXBvbmVudChcInZpZXdzLnNldHRpbmdzLnRhYnMudXNlci5IZWxwVXNlclNldHRpbmdzVGFiXCIpXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBIZWxwVXNlclNldHRpbmdzVGFiIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PElQcm9wcywgSVN0YXRlPiB7XG4gICAgcHJvdGVjdGVkIGNsb3NlQ29waWVkVG9vbHRpcDogKCkgPT4gdm9pZDtcblxuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcblxuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgYXBwVmVyc2lvbjogbnVsbCxcbiAgICAgICAgICAgIGNhblVwZGF0ZTogZmFsc2UsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgY29tcG9uZW50RGlkTW91bnQoKTogdm9pZCB7XG4gICAgICAgIFBsYXRmb3JtUGVnLmdldCgpLmdldEFwcFZlcnNpb24oKS50aGVuKCh2ZXIpID0+IHRoaXMuc2V0U3RhdGUoeyBhcHBWZXJzaW9uOiB2ZXIgfSkpLmNhdGNoKChlKSA9PiB7XG4gICAgICAgICAgICBsb2dnZXIuZXJyb3IoXCJFcnJvciBnZXR0aW5nIHZlY3RvciB2ZXJzaW9uOiBcIiwgZSk7XG4gICAgICAgIH0pO1xuICAgICAgICBQbGF0Zm9ybVBlZy5nZXQoKS5jYW5TZWxmVXBkYXRlKCkudGhlbigodikgPT4gdGhpcy5zZXRTdGF0ZSh7IGNhblVwZGF0ZTogdiB9KSkuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgICAgIGxvZ2dlci5lcnJvcihcIkVycm9yIGdldHRpbmcgc2VsZiB1cGRhdGFiaWxpdHk6IFwiLCBlKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICAgIC8vIGlmIHRoZSBDb3BpZWQgdG9vbHRpcCBpcyBvcGVuIHRoZW4gZ2V0IHJpZCBvZiBpdCwgdGhlcmUgYXJlIHdheXMgdG8gY2xvc2UgdGhlIG1vZGFsIHdoaWNoIHdvdWxkbid0IGNsb3NlXG4gICAgICAgIC8vIHRoZSB0b29sdGlwIG90aGVyd2lzZSwgc3VjaCBhcyBwcmVzc2luZyBFc2NhcGVcbiAgICAgICAgaWYgKHRoaXMuY2xvc2VDb3BpZWRUb29sdGlwKSB0aGlzLmNsb3NlQ29waWVkVG9vbHRpcCgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0VmVyc2lvbkluZm8oKTogeyBhcHBWZXJzaW9uOiBzdHJpbmcsIG9sbVZlcnNpb246IHN0cmluZyB9IHtcbiAgICAgICAgY29uc3QgYnJhbmQgPSBTZGtDb25maWcuZ2V0KCkuYnJhbmQ7XG4gICAgICAgIGNvbnN0IGFwcFZlcnNpb24gPSB0aGlzLnN0YXRlLmFwcFZlcnNpb24gfHwgJ3Vua25vd24nO1xuICAgICAgICBjb25zdCBvbG1WZXJzaW9uVHVwbGUgPSBNYXRyaXhDbGllbnRQZWcuZ2V0KCkub2xtVmVyc2lvbjtcbiAgICAgICAgY29uc3Qgb2xtVmVyc2lvbiA9IG9sbVZlcnNpb25UdXBsZVxuICAgICAgICAgICAgPyBgJHtvbG1WZXJzaW9uVHVwbGVbMF19LiR7b2xtVmVyc2lvblR1cGxlWzFdfS4ke29sbVZlcnNpb25UdXBsZVsyXX1gXG4gICAgICAgICAgICA6ICc8bm90LWVuYWJsZWQ+JztcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYXBwVmVyc2lvbjogYCR7X3QoXCIlKGJyYW5kKXMgdmVyc2lvbjpcIiwgeyBicmFuZCB9KX0gJHthcHBWZXJzaW9ufWAsXG4gICAgICAgICAgICBvbG1WZXJzaW9uOiBgJHtfdChcIk9sbSB2ZXJzaW9uOlwiKX0gJHtvbG1WZXJzaW9ufWAsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvbkNsZWFyQ2FjaGVBbmRSZWxvYWQgPSAoZSkgPT4ge1xuICAgICAgICBpZiAoIVBsYXRmb3JtUGVnLmdldCgpKSByZXR1cm47XG5cbiAgICAgICAgLy8gRGV2IG5vdGU6IHBsZWFzZSBrZWVwIHRoaXMgbG9nIGxpbmUsIGl0J3MgdXNlZnVsIHdoZW4gdHJvdWJsZXNob290aW5nIGEgTWF0cml4Q2xpZW50IHN1ZGRlbmx5XG4gICAgICAgIC8vIHN0b3BwaW5nIGluIHRoZSBtaWRkbGUgb2YgdGhlIGxvZ3MuXG4gICAgICAgIGxvZ2dlci5sb2coXCJDbGVhciBjYWNoZSAmIHJlbG9hZCBjbGlja2VkXCIpO1xuICAgICAgICBNYXRyaXhDbGllbnRQZWcuZ2V0KCkuc3RvcENsaWVudCgpO1xuICAgICAgICBNYXRyaXhDbGllbnRQZWcuZ2V0KCkuc3RvcmUuZGVsZXRlQWxsRGF0YSgpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgUGxhdGZvcm1QZWcuZ2V0KCkucmVsb2FkKCk7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBwcml2YXRlIG9uQnVnUmVwb3J0ID0gKGUpID0+IHtcbiAgICAgICAgTW9kYWwuY3JlYXRlVHJhY2tlZERpYWxvZygnQnVnIFJlcG9ydCBEaWFsb2cnLCAnJywgQnVnUmVwb3J0RGlhbG9nLCB7fSk7XG4gICAgfTtcblxuICAgIHByaXZhdGUgb25TdGFydEJvdENoYXQgPSAoZSkgPT4ge1xuICAgICAgICB0aGlzLnByb3BzLmNsb3NlU2V0dGluZ3NGbigpO1xuICAgICAgICBjcmVhdGVSb29tKHtcbiAgICAgICAgICAgIGRtVXNlcklkOiBTZGtDb25maWcuZ2V0KCkud2VsY29tZVVzZXJJZCxcbiAgICAgICAgICAgIGFuZFZpZXc6IHRydWUsXG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBwcml2YXRlIHNob3dTcG9pbGVyID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhcmdldCA9IGV2ZW50LnRhcmdldDtcbiAgICAgICAgdGFyZ2V0LmlubmVySFRNTCA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3BvaWxlcicpO1xuXG4gICAgICAgIGNvbnN0IHJhbmdlID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtcbiAgICAgICAgcmFuZ2Uuc2VsZWN0Tm9kZUNvbnRlbnRzKHRhcmdldCk7XG5cbiAgICAgICAgY29uc3Qgc2VsZWN0aW9uID0gd2luZG93LmdldFNlbGVjdGlvbigpO1xuICAgICAgICBzZWxlY3Rpb24ucmVtb3ZlQWxsUmFuZ2VzKCk7XG4gICAgICAgIHNlbGVjdGlvbi5hZGRSYW5nZShyYW5nZSk7XG4gICAgfTtcblxuICAgIHByaXZhdGUgcmVuZGVyTGVnYWwoKSB7XG4gICAgICAgIGNvbnN0IHRvY0xpbmtzID0gU2RrQ29uZmlnLmdldCgpLnRlcm1zX2FuZF9jb25kaXRpb25zX2xpbmtzO1xuICAgICAgICBpZiAoIXRvY0xpbmtzKSByZXR1cm4gbnVsbDtcblxuICAgICAgICBjb25zdCBsZWdhbExpbmtzID0gW107XG4gICAgICAgIGZvciAoY29uc3QgdG9jRW50cnkgb2YgU2RrQ29uZmlnLmdldCgpLnRlcm1zX2FuZF9jb25kaXRpb25zX2xpbmtzKSB7XG4gICAgICAgICAgICBsZWdhbExpbmtzLnB1c2goPGRpdiBrZXk9e3RvY0VudHJ5LnVybH0+XG4gICAgICAgICAgICAgICAgPGEgaHJlZj17dG9jRW50cnkudXJsfSByZWw9XCJub3JlZmVycmVyIG5vb3BlbmVyXCIgdGFyZ2V0PVwiX2JsYW5rXCI+eyB0b2NFbnRyeS50ZXh0IH08L2E+XG4gICAgICAgICAgICA8L2Rpdj4pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdteF9TZXR0aW5nc1RhYl9zZWN0aW9uIG14X0hlbHBVc2VyU2V0dGluZ3NUYWJfdmVyc2lvbnMnPlxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT0nbXhfU2V0dGluZ3NUYWJfc3ViaGVhZGluZyc+eyBfdChcIkxlZ2FsXCIpIH08L3NwYW4+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J214X1NldHRpbmdzVGFiX3N1YnNlY3Rpb25UZXh0Jz5cbiAgICAgICAgICAgICAgICAgICAgeyBsZWdhbExpbmtzIH1cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICApO1xuICAgIH1cblxuICAgIHByaXZhdGUgcmVuZGVyQ3JlZGl0cygpIHtcbiAgICAgICAgLy8gTm90ZTogVGhpcyBpcyBub3QgdHJhbnNsYXRlZCBiZWNhdXNlIGl0IGlzIGxlZ2FsIHRleHQuXG4gICAgICAgIC8vIEFsc28sICZuYnNwOyBpcyB1Z2x5IGJ1dCBuZWNlc3NhcnkuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nbXhfU2V0dGluZ3NUYWJfc2VjdGlvbic+XG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPSdteF9TZXR0aW5nc1RhYl9zdWJoZWFkaW5nJz57IF90KFwiQ3JlZGl0c1wiKSB9PC9zcGFuPlxuICAgICAgICAgICAgICAgIDx1bD5cbiAgICAgICAgICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICAgICAgICAgICAgVGhlIDxhIGhyZWY9XCJ0aGVtZXMvZWxlbWVudC9pbWcvYmFja2dyb3VuZHMvbGFrZS5qcGdcIiByZWw9XCJub3JlZmVycmVyIG5vb3BlbmVyXCIgdGFyZ2V0PVwiX2JsYW5rXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdCBjb3ZlciBwaG90b1xuICAgICAgICAgICAgICAgICAgICAgICAgPC9hPiBpcyDCqSZuYnNwO1xuICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cImh0dHBzOi8vd3d3LmZsaWNrci5jb20vZ29sYW5cIiByZWw9XCJub3JlZmVycmVyIG5vb3BlbmVyXCIgdGFyZ2V0PVwiX2JsYW5rXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgSmVzw7pzIFJvbmNlcm9cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4gdXNlZCB1bmRlciB0aGUgdGVybXMgb2YmbmJzcDtcbiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCJodHRwczovL2NyZWF0aXZlY29tbW9ucy5vcmcvbGljZW5zZXMvYnktc2EvNC4wL1wiIHJlbD1cIm5vcmVmZXJyZXIgbm9vcGVuZXJcIiB0YXJnZXQ9XCJfYmxhbmtcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDQy1CWS1TQSA0LjBcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4uXG4gICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgICAgICAgICAgICAgIFRoZSA8YVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9XCJodHRwczovL2dpdGh1Yi5jb20vbWF0cml4LW9yZy90d2Vtb2ppLWNvbHJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbD1cIm5vcmVmZXJyZXIgbm9vcGVuZXJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldD1cIl9ibGFua1wiXG4gICAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHdlbW9qaS1jb2xyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2E+IGZvbnQgaXMgwqkmbmJzcDtcbiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCJodHRwczovL21vemlsbGEub3JnXCIgcmVsPVwibm9yZWZlcnJlciBub29wZW5lclwiIHRhcmdldD1cIl9ibGFua1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1vemlsbGEgRm91bmRhdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgPC9hPiB1c2VkIHVuZGVyIHRoZSB0ZXJtcyBvZiZuYnNwO1xuICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cImh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFwiIHJlbD1cIm5vcmVmZXJyZXIgbm9vcGVuZXJcIiB0YXJnZXQ9XCJfYmxhbmtcIj5BcGFjaGUgMi4wPC9hPi5cbiAgICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICAgICAgICAgICAgVGhlIDxhIGhyZWY9XCJodHRwczovL3R3ZW1vamkudHdpdHRlci5jb20vXCIgcmVsPVwibm9yZWZlcnJlciBub29wZW5lclwiIHRhcmdldD1cIl9ibGFua1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFR3ZW1vamlcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4gZW1vamkgYXJ0IGlzIMKpJm5ic3A7XG4gICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiaHR0cHM6Ly90d2Vtb2ppLnR3aXR0ZXIuY29tL1wiIHJlbD1cIm5vcmVmZXJyZXIgbm9vcGVuZXJcIiB0YXJnZXQ9XCJfYmxhbmtcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBUd2l0dGVyLCBJbmMgYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICAgICAgICAgICAgICAgICAgICAgICAgPC9hPiB1c2VkIHVuZGVyIHRoZSB0ZXJtcyBvZiZuYnNwO1xuICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cImh0dHBzOi8vY3JlYXRpdmVjb21tb25zLm9yZy9saWNlbnNlcy9ieS80LjAvXCIgcmVsPVwibm9yZWZlcnJlciBub29wZW5lclwiIHRhcmdldD1cIl9ibGFua1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIENDLUJZIDQuMFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9hPi5cbiAgICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICA8L3VsPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyBjb3B5KHRleHQ6IHN0cmluZywgZTogQnV0dG9uRXZlbnQpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBjb25zdCB0YXJnZXQgPSBlLnRhcmdldCBhcyBIVE1MRGl2RWxlbWVudDsgLy8gY29weSB0YXJnZXQgYmVmb3JlIHdlIGdvIGFzeW5jIGFuZCBSZWFjdCB0aHJvd3MgaXQgYXdheVxuXG4gICAgICAgIGNvbnN0IHN1Y2Nlc3NmdWwgPSBhd2FpdCBjb3B5UGxhaW50ZXh0KHRleHQpO1xuICAgICAgICBjb25zdCBidXR0b25SZWN0ID0gdGFyZ2V0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICBjb25zdCB7IGNsb3NlIH0gPSBDb250ZXh0TWVudS5jcmVhdGVNZW51KEdlbmVyaWNUZXh0Q29udGV4dE1lbnUsIHtcbiAgICAgICAgICAgIC4uLnRvUmlnaHRPZihidXR0b25SZWN0LCAyKSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IHN1Y2Nlc3NmdWwgPyBfdCgnQ29waWVkIScpIDogX3QoJ0ZhaWxlZCB0byBjb3B5JyksXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmNsb3NlQ29waWVkVG9vbHRpcCA9IHRhcmdldC5vbm1vdXNlbGVhdmUgPSBjbG9zZTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG9uQWNjZXNzVG9rZW5Db3B5Q2xpY2sgPSAoZTogQnV0dG9uRXZlbnQpID0+IHtcbiAgICAgICAgdGhpcy5jb3B5KE1hdHJpeENsaWVudFBlZy5nZXQoKS5nZXRBY2Nlc3NUb2tlbigpLCBlKTtcbiAgICB9O1xuXG4gICAgcHJpdmF0ZSBvbkNvcHlWZXJzaW9uQ2xpY2tlZCA9IChlOiBCdXR0b25FdmVudCkgPT4ge1xuICAgICAgICBjb25zdCB7IGFwcFZlcnNpb24sIG9sbVZlcnNpb24gfSA9IHRoaXMuZ2V0VmVyc2lvbkluZm8oKTtcbiAgICAgICAgdGhpcy5jb3B5KGAke2FwcFZlcnNpb259XFxuJHtvbG1WZXJzaW9ufWAsIGUpO1xuICAgIH07XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGNvbnN0IGJyYW5kID0gU2RrQ29uZmlnLmdldCgpLmJyYW5kO1xuXG4gICAgICAgIGxldCBmYXFUZXh0ID0gX3QoXG4gICAgICAgICAgICAnRm9yIGhlbHAgd2l0aCB1c2luZyAlKGJyYW5kKXMsIGNsaWNrIDxhPmhlcmU8L2E+LicsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgYnJhbmQsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICdhJzogKHN1YikgPT4gPGFcbiAgICAgICAgICAgICAgICAgICAgaHJlZj1cImh0dHBzOi8vZWxlbWVudC5pby9oZWxwXCJcbiAgICAgICAgICAgICAgICAgICAgcmVsPVwibm9yZWZlcnJlciBub29wZW5lclwiXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldD1cIl9ibGFua1wiXG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICB7IHN1YiB9XG4gICAgICAgICAgICAgICAgPC9hPixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICk7XG4gICAgICAgIGlmIChTZGtDb25maWcuZ2V0KCkud2VsY29tZVVzZXJJZCAmJiBnZXRDdXJyZW50TGFuZ3VhZ2UoKS5zdGFydHNXaXRoKCdlbicpKSB7XG4gICAgICAgICAgICBmYXFUZXh0ID0gKFxuICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgIHsgX3QoXG4gICAgICAgICAgICAgICAgICAgICAgICAnRm9yIGhlbHAgd2l0aCB1c2luZyAlKGJyYW5kKXMsIGNsaWNrIDxhPmhlcmU8L2E+IG9yIHN0YXJ0IGEgY2hhdCB3aXRoIG91ciAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICdib3QgdXNpbmcgdGhlIGJ1dHRvbiBiZWxvdy4nLFxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyYW5kLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYSc6IChzdWIpID0+IDxhXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9XCJodHRwczovL2VsZW1lbnQuaW8vaGVscFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbD0nbm9yZWZlcnJlciBub29wZW5lcidcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0PSdfYmxhbmsnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IHN1YiB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPixcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICkgfVxuICAgICAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPEFjY2Vzc2libGVCdXR0b24gb25DbGljaz17dGhpcy5vblN0YXJ0Qm90Q2hhdH0ga2luZD0ncHJpbWFyeSc+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBfdChcIkNoYXQgd2l0aCAlKGJyYW5kKXMgQm90XCIsIHsgYnJhbmQgfSkgfVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9BY2Nlc3NpYmxlQnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgdXBkYXRlQnV0dG9uID0gbnVsbDtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuY2FuVXBkYXRlKSB7XG4gICAgICAgICAgICB1cGRhdGVCdXR0b24gPSA8VXBkYXRlQ2hlY2tCdXR0b24gLz47XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgYnVnUmVwb3J0aW5nU2VjdGlvbjtcbiAgICAgICAgaWYgKFNka0NvbmZpZy5nZXQoKS5idWdfcmVwb3J0X2VuZHBvaW50X3VybCkge1xuICAgICAgICAgICAgYnVnUmVwb3J0aW5nU2VjdGlvbiA9IChcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm14X1NldHRpbmdzVGFiX3NlY3Rpb25cIj5cbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPSdteF9TZXR0aW5nc1RhYl9zdWJoZWFkaW5nJz57IF90KCdCdWcgcmVwb3J0aW5nJykgfTwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J214X1NldHRpbmdzVGFiX3N1YnNlY3Rpb25UZXh0Jz5cbiAgICAgICAgICAgICAgICAgICAgICAgIHsgX3QoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJJZiB5b3UndmUgc3VibWl0dGVkIGEgYnVnIHZpYSBHaXRIdWIsIGRlYnVnIGxvZ3MgY2FuIGhlbHAgXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwidXMgdHJhY2sgZG93biB0aGUgcHJvYmxlbS4gRGVidWcgbG9ncyBjb250YWluIGFwcGxpY2F0aW9uIFwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInVzYWdlIGRhdGEgaW5jbHVkaW5nIHlvdXIgdXNlcm5hbWUsIHRoZSBJRHMgb3IgYWxpYXNlcyBvZiBcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ0aGUgcm9vbXMgb3IgZ3JvdXBzIHlvdSBoYXZlIHZpc2l0ZWQsIHdoaWNoIFVJIGVsZW1lbnRzIHlvdSBcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJsYXN0IGludGVyYWN0ZWQgd2l0aCwgYW5kIHRoZSB1c2VybmFtZXMgb2YgXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwib3RoZXIgdXNlcnMuIFRoZXkgZG8gbm90IGNvbnRhaW4gbWVzc2FnZXMuXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICApIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdteF9IZWxwVXNlclNldHRpbmdzVGFiX2RlYnVnQnV0dG9uJz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8QWNjZXNzaWJsZUJ1dHRvbiBvbkNsaWNrPXt0aGlzLm9uQnVnUmVwb3J0fSBraW5kPSdwcmltYXJ5Jz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBfdChcIlN1Ym1pdCBkZWJ1ZyBsb2dzXCIpIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0FjY2Vzc2libGVCdXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIHsgX3QoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJUbyByZXBvcnQgYSBNYXRyaXgtcmVsYXRlZCBzZWN1cml0eSBpc3N1ZSwgcGxlYXNlIHJlYWQgdGhlIE1hdHJpeC5vcmcgXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiPGE+U2VjdXJpdHkgRGlzY2xvc3VyZSBQb2xpY3k8L2E+LlwiLCB7fSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGE6IHN1YiA9PiA8YSBocmVmPVwiaHR0cHM6Ly9tYXRyaXgub3JnL3NlY3VyaXR5LWRpc2Nsb3N1cmUtcG9saWN5L1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWw9XCJub3JlZmVycmVyIG5vb3BlbmVyXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldD1cIl9ibGFua1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID57IHN1YiB9PC9hPixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgKSB9XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHsgYXBwVmVyc2lvbiwgb2xtVmVyc2lvbiB9ID0gdGhpcy5nZXRWZXJzaW9uSW5mbygpO1xuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm14X1NldHRpbmdzVGFiIG14X0hlbHBVc2VyU2V0dGluZ3NUYWJcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm14X1NldHRpbmdzVGFiX2hlYWRpbmdcIj57IF90KFwiSGVscCAmIEFib3V0XCIpIH08L2Rpdj5cbiAgICAgICAgICAgICAgICB7IGJ1Z1JlcG9ydGluZ1NlY3Rpb24gfVxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdteF9TZXR0aW5nc1RhYl9zZWN0aW9uJz5cbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPSdteF9TZXR0aW5nc1RhYl9zdWJoZWFkaW5nJz57IF90KFwiRkFRXCIpIH08L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdteF9TZXR0aW5nc1RhYl9zdWJzZWN0aW9uVGV4dCc+XG4gICAgICAgICAgICAgICAgICAgICAgICB7IGZhcVRleHQgfVxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPEFjY2Vzc2libGVCdXR0b24ga2luZD1cInByaW1hcnlcIiBvbkNsaWNrPXtLZXlib2FyZFNob3J0Y3V0cy50b2dnbGVEaWFsb2d9PlxuICAgICAgICAgICAgICAgICAgICAgICAgeyBfdChcIktleWJvYXJkIFNob3J0Y3V0c1wiKSB9XG4gICAgICAgICAgICAgICAgICAgIDwvQWNjZXNzaWJsZUJ1dHRvbj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nbXhfU2V0dGluZ3NUYWJfc2VjdGlvbiBteF9IZWxwVXNlclNldHRpbmdzVGFiX3ZlcnNpb25zJz5cbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPSdteF9TZXR0aW5nc1RhYl9zdWJoZWFkaW5nJz57IF90KFwiVmVyc2lvbnNcIikgfTwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J214X1NldHRpbmdzVGFiX3N1YnNlY3Rpb25UZXh0Jz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibXhfSGVscFVzZXJTZXR0aW5nc1RhYl9jb3B5XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBhcHBWZXJzaW9uIH08YnIgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IG9sbVZlcnNpb24gfTxiciAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxBY2Nlc3NpYmxlVG9vbHRpcEJ1dHRvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT17X3QoXCJDb3B5XCIpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLm9uQ29weVZlcnNpb25DbGlja2VkfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJteF9IZWxwVXNlclNldHRpbmdzVGFiX2NvcHlCdXR0b25cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIHsgdXBkYXRlQnV0dG9uIH1cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgeyB0aGlzLnJlbmRlckxlZ2FsKCkgfVxuICAgICAgICAgICAgICAgIHsgdGhpcy5yZW5kZXJDcmVkaXRzKCkgfVxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdteF9TZXR0aW5nc1RhYl9zZWN0aW9uIG14X0hlbHBVc2VyU2V0dGluZ3NUYWJfdmVyc2lvbnMnPlxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9J214X1NldHRpbmdzVGFiX3N1YmhlYWRpbmcnPnsgX3QoXCJBZHZhbmNlZFwiKSB9PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nbXhfU2V0dGluZ3NUYWJfc3Vic2VjdGlvblRleHQnPlxuICAgICAgICAgICAgICAgICAgICAgICAgeyBfdChcIkhvbWVzZXJ2ZXIgaXNcIikgfSA8Y29kZT57IE1hdHJpeENsaWVudFBlZy5nZXQoKS5nZXRIb21lc2VydmVyVXJsKCkgfTwvY29kZT48YnIgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIHsgX3QoXCJJZGVudGl0eSBzZXJ2ZXIgaXNcIikgfSA8Y29kZT57IE1hdHJpeENsaWVudFBlZy5nZXQoKS5nZXRJZGVudGl0eVNlcnZlclVybCgpIH08L2NvZGU+PGJyIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkZXRhaWxzPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdW1tYXJ5PnsgX3QoXCJBY2Nlc3MgVG9rZW5cIikgfTwvc3VtbWFyeT48YnIgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Yj57IF90KFwiWW91ciBhY2Nlc3MgdG9rZW4gZ2l2ZXMgZnVsbCBhY2Nlc3MgdG8geW91ciBhY2NvdW50LlwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBcIiBEbyBub3Qgc2hhcmUgaXQgd2l0aCBhbnlvbmUuXCIgKSB9PC9iPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibXhfSGVscFVzZXJTZXR0aW5nc1RhYl9jb3B5XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb2RlPnsgTWF0cml4Q2xpZW50UGVnLmdldCgpLmdldEFjY2Vzc1Rva2VuKCkgfTwvY29kZT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPEFjY2Vzc2libGVUb29sdGlwQnV0dG9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT17X3QoXCJDb3B5XCIpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5vbkFjY2Vzc1Rva2VuQ29weUNsaWNrfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwibXhfSGVscFVzZXJTZXR0aW5nc1RhYl9jb3B5QnV0dG9uXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGV0YWlscz48YnIgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdteF9IZWxwVXNlclNldHRpbmdzVGFiX2RlYnVnQnV0dG9uJz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8QWNjZXNzaWJsZUJ1dHRvbiBvbkNsaWNrPXt0aGlzLm9uQ2xlYXJDYWNoZUFuZFJlbG9hZH0ga2luZD0nZGFuZ2VyJz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBfdChcIkNsZWFyIGNhY2hlIGFuZCByZWxvYWRcIikgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvQWNjZXNzaWJsZUJ1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICApO1xuICAgIH1cbn1cbiJdfQ==