"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ExistingEmailAddress = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _languageHandler = require("../../../../languageHandler");

var _MatrixClientPeg = require("../../../../MatrixClientPeg");

var _Field = _interopRequireDefault(require("../../elements/Field"));

var _AccessibleButton = _interopRequireDefault(require("../../elements/AccessibleButton"));

var Email = _interopRequireWildcard(require("../../../../email"));

var _AddThreepid = _interopRequireDefault(require("../../../../AddThreepid"));

var _Modal = _interopRequireDefault(require("../../../../Modal"));

var _replaceableComponent = require("../../../../utils/replaceableComponent");

var _ErrorDialog = _interopRequireDefault(require("../../dialogs/ErrorDialog"));

var _threepids = require("matrix-js-sdk/src/@types/threepids");

var _logger = require("matrix-js-sdk/src/logger");

var _dec, _class;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class ExistingEmailAddress extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "onRemove", e => {
      e.stopPropagation();
      e.preventDefault();
      this.setState({
        verifyRemove: true
      });
    });
    (0, _defineProperty2.default)(this, "onDontRemove", e => {
      e.stopPropagation();
      e.preventDefault();
      this.setState({
        verifyRemove: false
      });
    });
    (0, _defineProperty2.default)(this, "onActuallyRemove", e => {
      e.stopPropagation();
      e.preventDefault();

      _MatrixClientPeg.MatrixClientPeg.get().deleteThreePid(this.props.email.medium, this.props.email.address).then(() => {
        return this.props.onRemoved(this.props.email);
      }).catch(err => {
        _logger.logger.error("Unable to remove contact information: " + err);

        _Modal.default.createTrackedDialog('Remove 3pid failed', '', _ErrorDialog.default, {
          title: (0, _languageHandler._t)("Unable to remove contact information"),
          description: err && err.message ? err.message : (0, _languageHandler._t)("Operation failed")
        });
      });
    });
    this.state = {
      verifyRemove: false
    };
  }

  render() {
    if (this.state.verifyRemove) {
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_ExistingEmailAddress"
      }, /*#__PURE__*/_react.default.createElement("span", {
        className: "mx_ExistingEmailAddress_promptText"
      }, (0, _languageHandler._t)("Remove %(email)s?", {
        email: this.props.email.address
      })), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        onClick: this.onActuallyRemove,
        kind: "danger_sm",
        className: "mx_ExistingEmailAddress_confirmBtn"
      }, (0, _languageHandler._t)("Remove")), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        onClick: this.onDontRemove,
        kind: "link_sm",
        className: "mx_ExistingEmailAddress_confirmBtn"
      }, (0, _languageHandler._t)("Cancel")));
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_ExistingEmailAddress"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_ExistingEmailAddress_email"
    }, this.props.email.address), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      onClick: this.onRemove,
      kind: "danger_sm"
    }, (0, _languageHandler._t)("Remove")));
  }

}

exports.ExistingEmailAddress = ExistingEmailAddress;
let EmailAddresses = (_dec = (0, _replaceableComponent.replaceableComponent)("views.settings.account.EmailAddresses"), _dec(_class = class EmailAddresses extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "onRemoved", address => {
      const emails = this.props.emails.filter(e => e !== address);
      this.props.onEmailsChange(emails);
    });
    (0, _defineProperty2.default)(this, "onChangeNewEmailAddress", e => {
      this.setState({
        newEmailAddress: e.target.value
      });
    });
    (0, _defineProperty2.default)(this, "onAddClick", e => {
      e.stopPropagation();
      e.preventDefault();
      if (!this.state.newEmailAddress) return;
      const email = this.state.newEmailAddress; // TODO: Inline field validation

      if (!Email.looksValid(email)) {
        _Modal.default.createTrackedDialog('Invalid email address', '', _ErrorDialog.default, {
          title: (0, _languageHandler._t)("Invalid Email Address"),
          description: (0, _languageHandler._t)("This doesn't appear to be a valid email address")
        });

        return;
      }

      const task = new _AddThreepid.default();
      this.setState({
        verifying: true,
        continueDisabled: true,
        addTask: task
      });
      task.addEmailAddress(email).then(() => {
        this.setState({
          continueDisabled: false
        });
      }).catch(err => {
        _logger.logger.error("Unable to add email address " + email + " " + err);

        this.setState({
          verifying: false,
          continueDisabled: false,
          addTask: null
        });

        _Modal.default.createTrackedDialog('Unable to add email address', '', _ErrorDialog.default, {
          title: (0, _languageHandler._t)("Unable to add email address"),
          description: err && err.message ? err.message : (0, _languageHandler._t)("Operation failed")
        });
      });
    });
    (0, _defineProperty2.default)(this, "onContinueClick", e => {
      e.stopPropagation();
      e.preventDefault();
      this.setState({
        continueDisabled: true
      });
      this.state.addTask.checkEmailLinkClicked().then(([finished]) => {
        let newEmailAddress = this.state.newEmailAddress;

        if (finished) {
          const email = this.state.newEmailAddress;
          const emails = [...this.props.emails, {
            address: email,
            medium: _threepids.ThreepidMedium.Email
          }];
          this.props.onEmailsChange(emails);
          newEmailAddress = "";
        }

        this.setState({
          addTask: null,
          continueDisabled: false,
          verifying: false,
          newEmailAddress
        });
      }).catch(err => {
        this.setState({
          continueDisabled: false
        });

        if (err.errcode === 'M_THREEPID_AUTH_FAILED') {
          _Modal.default.createTrackedDialog("Email hasn't been verified yet", "", _ErrorDialog.default, {
            title: (0, _languageHandler._t)("Your email address hasn't been verified yet"),
            description: (0, _languageHandler._t)("Click the link in the email you received to verify " + "and then click continue again.")
          });
        } else {
          _logger.logger.error("Unable to verify email address: ", err);

          _Modal.default.createTrackedDialog('Unable to verify email address', '', _ErrorDialog.default, {
            title: (0, _languageHandler._t)("Unable to verify email address."),
            description: err && err.message ? err.message : (0, _languageHandler._t)("Operation failed")
          });
        }
      });
    });
    this.state = {
      verifying: false,
      addTask: null,
      continueDisabled: false,
      newEmailAddress: ""
    };
  }

  render() {
    const existingEmailElements = this.props.emails.map(e => {
      return /*#__PURE__*/_react.default.createElement(ExistingEmailAddress, {
        email: e,
        onRemoved: this.onRemoved,
        key: e.address
      });
    });

    let addButton = /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      onClick: this.onAddClick,
      kind: "primary"
    }, (0, _languageHandler._t)("Add"));

    if (this.state.verifying) {
      addButton = /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("div", null, (0, _languageHandler._t)("We've sent you an email to verify your address. Please follow the instructions there and then click the button below.")), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        onClick: this.onContinueClick,
        kind: "primary",
        disabled: this.state.continueDisabled
      }, (0, _languageHandler._t)("Continue")));
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_EmailAddresses"
    }, existingEmailElements, /*#__PURE__*/_react.default.createElement("form", {
      onSubmit: this.onAddClick,
      autoComplete: "off",
      noValidate: true,
      className: "mx_EmailAddresses_new"
    }, /*#__PURE__*/_react.default.createElement(_Field.default, {
      type: "text",
      label: (0, _languageHandler._t)("Email Address"),
      autoComplete: "off",
      disabled: this.state.verifying,
      value: this.state.newEmailAddress,
      onChange: this.onChangeNewEmailAddress
    }), addButton));
  }

}) || _class);
exports.default = EmailAddresses;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,