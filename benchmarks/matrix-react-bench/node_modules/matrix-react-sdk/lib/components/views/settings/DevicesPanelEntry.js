"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _languageHandler = require("../../../languageHandler");

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _DateUtils = require("../../../DateUtils");

var _StyledCheckbox = _interopRequireWildcard(require("../elements/StyledCheckbox"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

var _Field = _interopRequireDefault(require("../elements/Field"));

var _TextWithTooltip = _interopRequireDefault(require("../elements/TextWithTooltip"));

var _Modal = _interopRequireDefault(require("../../../Modal"));

var _SetupEncryptionDialog = _interopRequireDefault(require("../dialogs/security/SetupEncryptionDialog"));

var _VerificationRequestDialog = _interopRequireDefault(require("../../views/dialogs/VerificationRequestDialog"));

var _LogoutDialog = _interopRequireDefault(require("../dialogs/LogoutDialog"));

var _logger = require("matrix-js-sdk/src/logger");

var _dec, _class;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

let DevicesPanelEntry = (_dec = (0, _replaceableComponent.replaceableComponent)("views.settings.DevicesPanelEntry"), _dec(_class = class DevicesPanelEntry extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "onDeviceToggled", () => {
      this.props.onDeviceToggled(this.props.device);
    });
    (0, _defineProperty2.default)(this, "onRename", () => {
      this.setState({
        renaming: true
      });
    });
    (0, _defineProperty2.default)(this, "onChangeDisplayName", ev => {
      this.setState({
        displayName: ev.target.value
      });
    });
    (0, _defineProperty2.default)(this, "onRenameSubmit", async () => {
      this.setState({
        renaming: false
      });
      await _MatrixClientPeg.MatrixClientPeg.get().setDeviceDetails(this.props.device.device_id, {
        display_name: this.state.displayName
      }).catch(e => {
        _logger.logger.error("Error setting session display name", e);

        throw new Error((0, _languageHandler._t)("Failed to set display name"));
      });
      this.props.onDeviceChange();
    });
    (0, _defineProperty2.default)(this, "onRenameCancel", () => {
      this.setState({
        renaming: false
      });
    });
    (0, _defineProperty2.default)(this, "onOwnDeviceSignOut", () => {
      _Modal.default.createTrackedDialog('Logout from device list', '', _LogoutDialog.default,
      /* props= */
      {},
      /* className= */
      null,
      /* isPriority= */
      false,
      /* isStatic= */
      true);
    });
    (0, _defineProperty2.default)(this, "verify", async () => {
      if (this.props.isOwnDevice) {
        _Modal.default.createTrackedDialog("Verify session", "Verify session", _SetupEncryptionDialog.default, {
          onFinished: this.props.onDeviceChange
        });
      } else {
        const cli = _MatrixClientPeg.MatrixClientPeg.get();

        const userId = cli.getUserId();
        const verificationRequestPromise = cli.requestVerification(userId, [this.props.device.device_id]);

        _Modal.default.createTrackedDialog('New Session Verification', 'Starting dialog', _VerificationRequestDialog.default, {
          verificationRequestPromise,
          member: cli.getUser(userId),
          onFinished: async () => {
            const request = await verificationRequestPromise;
            request.cancel();
            this.props.onDeviceChange();
          }
        });
      }
    });
    this.state = {
      renaming: false,
      displayName: props.device.display_name
    };
  }

  render() {
    const device = this.props.device;
    let lastSeen = "";

    if (device.last_seen_ts) {
      const lastSeenDate = new Date(device.last_seen_ts);
      lastSeen = (0, _languageHandler._t)("Last seen %(date)s at %(ip)s", {
        date: (0, _DateUtils.formatDate)(lastSeenDate),
        ip: device.last_seen_ip
      });
    }

    const myDeviceClass = this.props.isOwnDevice ? " mx_DevicesPanel_myDevice" : '';
    let iconClass = '';
    let verifyButton;

    if (this.props.verified !== null) {
      iconClass = this.props.verified ? "mx_E2EIcon_verified" : "mx_E2EIcon_warning";

      if (!this.props.verified && this.props.canBeVerified) {
        verifyButton = /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
          kind: "primary",
          onClick: this.verify
        }, (0, _languageHandler._t)("Verify"));
      }
    }

    let signOutButton;

    if (this.props.isOwnDevice) {
      signOutButton = /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        kind: "danger_outline",
        onClick: this.onOwnDeviceSignOut
      }, (0, _languageHandler._t)("Sign Out"));
    }

    const left = this.props.isOwnDevice ? /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_DevicesPanel_deviceTrust"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_DevicesPanel_icon mx_E2EIcon " + iconClass
    })) : /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_DevicesPanel_checkbox"
    }, /*#__PURE__*/_react.default.createElement(_StyledCheckbox.default, {
      kind: _StyledCheckbox.CheckboxStyle.Outline,
      onChange: this.onDeviceToggled,
      checked: this.props.selected
    }));
    const deviceName = device.display_name ? /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_TextWithTooltip.default, {
      tooltip: device.display_name + " (" + device.device_id + ")"
    }, device.display_name)) : /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, device.device_id);
    const buttons = this.state.renaming ? /*#__PURE__*/_react.default.createElement("form", {
      className: "mx_DevicesPanel_renameForm",
      onSubmit: this.onRenameSubmit
    }, /*#__PURE__*/_react.default.createElement(_Field.default, {
      label: (0, _languageHandler._t)("Display Name"),
      type: "text",
      value: this.state.displayName,
      autoComplete: "off",
      onChange: this.onChangeDisplayName
    }), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      onClick: this.onRenameSubmit,
      kind: "confirm_sm"
    }), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      onClick: this.onRenameCancel,
      kind: "cancel_sm"
    })) : /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, signOutButton, verifyButton, /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      kind: "primary_outline",
      onClick: this.onRename
    }, (0, _languageHandler._t)("Rename")));
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_DevicesPanel_device" + myDeviceClass
    }, left, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_DevicesPanel_deviceInfo"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_DevicesPanel_deviceName"
    }, deviceName), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_DevicesPanel_lastSeen"
    }, lastSeen)), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_DevicesPanel_deviceButtons"
    }, buttons));
  }

}) || _class);
exports.default = DevicesPanelEntry;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,