"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.LabsSettingToggle = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _lodash = require("lodash");

var _languageHandler = require("../../../../../languageHandler");

var _SettingsStore = _interopRequireDefault(require("../../../../../settings/SettingsStore"));

var _LabelledToggleSwitch = _interopRequireDefault(require("../../../elements/LabelledToggleSwitch"));

var _SettingLevel = require("../../../../../settings/SettingLevel");

var _replaceableComponent = require("../../../../../utils/replaceableComponent");

var _SdkConfig = _interopRequireDefault(require("../../../../../SdkConfig"));

var _BetaCard = _interopRequireDefault(require("../../../beta/BetaCard"));

var _SettingsFlag = _interopRequireDefault(require("../../../elements/SettingsFlag"));

var _MatrixClientPeg = require("../../../../../MatrixClientPeg");

var _Settings = require("../../../../../settings/Settings");

var _maps = require("../../../../../utils/maps");

var _dec, _class;

class LabsSettingToggle extends _react.default.Component {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "onChange", async checked => {
      await _SettingsStore.default.setValue(this.props.featureId, null, _SettingLevel.SettingLevel.DEVICE, checked);
      this.forceUpdate();
    });
  }

  render() {
    const label = _SettingsStore.default.getDisplayName(this.props.featureId);

    const value = _SettingsStore.default.getValue(this.props.featureId);

    const canChange = _SettingsStore.default.canSetValue(this.props.featureId, null, _SettingLevel.SettingLevel.DEVICE);

    return /*#__PURE__*/_react.default.createElement(_LabelledToggleSwitch.default, {
      value: value,
      label: label,
      onChange: this.onChange,
      disabled: !canChange
    });
  }

}

exports.LabsSettingToggle = LabsSettingToggle;
let LabsUserSettingsTab = (_dec = (0, _replaceableComponent.replaceableComponent)("views.settings.tabs.user.LabsUserSettingsTab"), _dec(_class = class LabsUserSettingsTab extends _react.default.Component {
  constructor(props) {
    super(props);

    _MatrixClientPeg.MatrixClientPeg.get().doesServerSupportUnstableFeature("org.matrix.msc2285").then(showHiddenReadReceipts => {
      this.setState({
        showHiddenReadReceipts
      });
    });

    this.state = {
      showHiddenReadReceipts: false
    };
  }

  render() {
    const features = _SettingsStore.default.getFeatureSettingNames();

    const [labs, betas] = features.reduce((arr, f) => {
      arr[_SettingsStore.default.getBetaInfo(f) ? 1 : 0].push(f);
      return arr;
    }, [[], []]);
    let betaSection;

    if (betas.length) {
      betaSection = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_SettingsTab_section"
      }, betas.map(f => /*#__PURE__*/_react.default.createElement(_BetaCard.default, {
        key: f,
        featureId: f
      })));
    }

    let labsSection;

    if (_SdkConfig.default.get()['showLabsSettings']) {
      const groups = new _maps.EnhancedMap();
      labs.forEach(f => {
        groups.getOrCreate(_SettingsStore.default.getLabGroup(f), []).push( /*#__PURE__*/_react.default.createElement(LabsSettingToggle, {
          featureId: f,
          key: f
        }));
      });
      groups.get(_Settings.LabGroup.Widgets).push( /*#__PURE__*/_react.default.createElement(_SettingsFlag.default, {
        name: "enableWidgetScreenshots",
        level: _SettingLevel.SettingLevel.ACCOUNT
      }));
      groups.get(_Settings.LabGroup.Experimental).push( /*#__PURE__*/_react.default.createElement(_SettingsFlag.default, {
        name: "lowBandwidth",
        level: _SettingLevel.SettingLevel.DEVICE
      }));
      groups.getOrCreate(_Settings.LabGroup.Developer, []).push( /*#__PURE__*/_react.default.createElement(_SettingsFlag.default, {
        name: "developerMode",
        level: _SettingLevel.SettingLevel.ACCOUNT
      }), /*#__PURE__*/_react.default.createElement(_SettingsFlag.default, {
        name: "showHiddenEventsInTimeline",
        level: _SettingLevel.SettingLevel.DEVICE
      }));
      groups.get(_Settings.LabGroup.Analytics).push( /*#__PURE__*/_react.default.createElement(_SettingsFlag.default, {
        name: "automaticErrorReporting",
        level: _SettingLevel.SettingLevel.DEVICE
      }));

      if (this.state.showHiddenReadReceipts) {
        groups.get(_Settings.LabGroup.Messaging).push( /*#__PURE__*/_react.default.createElement(_SettingsFlag.default, {
          name: "feature_hidden_read_receipts",
          level: _SettingLevel.SettingLevel.DEVICE
        }));
      }

      labsSection = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_SettingsTab_section"
      }, (0, _lodash.sortBy)(Array.from(groups.entries()), "0").map(([group, flags]) => /*#__PURE__*/_react.default.createElement("div", {
        key: group
      }, /*#__PURE__*/_react.default.createElement("span", {
        className: "mx_SettingsTab_subheading"
      }, (0, _languageHandler._t)(_Settings.labGroupNames[group])), flags)));
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab mx_LabsUserSettingsTab"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_heading"
    }, (0, _languageHandler._t)("Labs")), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_subsectionText"
    }, (0, _languageHandler._t)('Feeling experimental? Labs are the best way to get things early, ' + 'test out new features and help shape them before they actually launch. ' + '<a>Learn more</a>.', {}, {
      'a': sub => {
        return /*#__PURE__*/_react.default.createElement("a", {
          href: "https://github.com/vector-im/element-web/blob/develop/docs/labs.md",
          rel: "noreferrer noopener",
          target: "_blank"
        }, sub);
      }
    })), betaSection, labsSection);
  }

}) || _class);
exports.default = LabsUserSettingsTab;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,