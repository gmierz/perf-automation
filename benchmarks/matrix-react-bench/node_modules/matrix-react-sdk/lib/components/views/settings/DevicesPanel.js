"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _languageHandler = require("../../../languageHandler");

var _Modal = _interopRequireDefault(require("../../../Modal"));

var _InteractiveAuthEntryComponents = require("../auth/InteractiveAuthEntryComponents");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _InteractiveAuthDialog = _interopRequireDefault(require("../dialogs/InteractiveAuthDialog"));

var _DevicesPanelEntry = _interopRequireDefault(require("./DevicesPanelEntry"));

var _Spinner = _interopRequireDefault(require("../elements/Spinner"));

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

var _logger = require("matrix-js-sdk/src/logger");

var _dec, _class;

let DevicesPanel = (_dec = (0, _replaceableComponent.replaceableComponent)("views.settings.DevicesPanel"), _dec(_class = class DevicesPanel extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "unmounted", false);
    (0, _defineProperty2.default)(this, "onDeviceSelectionToggled", device => {
      if (this.unmounted) {
        return;
      }

      const deviceId = device.device_id;
      this.setState((state, props) => {
        // Make a copy of the selected devices, then add or remove the device
        const selectedDevices = state.selectedDevices.slice();
        const i = selectedDevices.indexOf(deviceId);

        if (i === -1) {
          selectedDevices.push(deviceId);
        } else {
          selectedDevices.splice(i, 1);
        }

        return {
          selectedDevices
        };
      });
    });
    (0, _defineProperty2.default)(this, "selectAll", devices => {
      this.setState((state, props) => {
        const selectedDevices = state.selectedDevices.slice();

        for (const device of devices) {
          const deviceId = device.device_id;

          if (!selectedDevices.includes(deviceId)) {
            selectedDevices.push(deviceId);
          }
        }

        return {
          selectedDevices
        };
      });
    });
    (0, _defineProperty2.default)(this, "deselectAll", devices => {
      this.setState((state, props) => {
        const selectedDevices = state.selectedDevices.slice();

        for (const device of devices) {
          const deviceId = device.device_id;
          const i = selectedDevices.indexOf(deviceId);

          if (i !== -1) {
            selectedDevices.splice(i, 1);
          }
        }

        return {
          selectedDevices
        };
      });
    });
    (0, _defineProperty2.default)(this, "onDeleteClick", () => {
      if (this.state.selectedDevices.length === 0) {
        return;
      }

      this.setState({
        deleting: true
      });
      this.makeDeleteRequest(null).catch(error => {
        if (this.unmounted) {
          return;
        }

        if (error.httpStatus !== 401 || !error.data || !error.data.flows) {
          // doesn't look like an interactive-auth failure
          throw error;
        } // pop up an interactive auth dialog


        const numDevices = this.state.selectedDevices.length;
        const dialogAesthetics = {
          [_InteractiveAuthEntryComponents.SSOAuthEntry.PHASE_PREAUTH]: {
            title: (0, _languageHandler._t)("Use Single Sign On to continue"),
            body: (0, _languageHandler._t)("Confirm logging out these devices by using Single Sign On to prove your identity.", {
              count: numDevices
            }),
            continueText: (0, _languageHandler._t)("Single Sign On"),
            continueKind: "primary"
          },
          [_InteractiveAuthEntryComponents.SSOAuthEntry.PHASE_POSTAUTH]: {
            title: (0, _languageHandler._t)("Confirm signing out these devices"),
            body: (0, _languageHandler._t)("Click the button below to confirm signing out these devices.", {
              count: numDevices
            }),
            continueText: (0, _languageHandler._t)("Sign out devices", {
              count: numDevices
            }),
            continueKind: "danger"
          }
        };

        _Modal.default.createTrackedDialog('Delete Device Dialog', '', _InteractiveAuthDialog.default, {
          title: (0, _languageHandler._t)("Authentication"),
          matrixClient: _MatrixClientPeg.MatrixClientPeg.get(),
          authData: error.data,
          makeRequest: this.makeDeleteRequest.bind(this),
          aestheticsForStagePhases: {
            [_InteractiveAuthEntryComponents.SSOAuthEntry.LOGIN_TYPE]: dialogAesthetics,
            [_InteractiveAuthEntryComponents.SSOAuthEntry.UNSTABLE_LOGIN_TYPE]: dialogAesthetics
          }
        });
      }).catch(e => {
        _logger.logger.error("Error deleting sessions", e);

        if (this.unmounted) {
          return;
        }
      }).finally(() => {
        this.setState({
          deleting: false
        });
      });
    });
    (0, _defineProperty2.default)(this, "renderDevice", device => {
      const myDeviceId = _MatrixClientPeg.MatrixClientPeg.get().getDeviceId();

      const myDevice = this.state.devices.find(device => device.device_id === myDeviceId);
      const isOwnDevice = device.device_id === myDeviceId; // If our own device is unverified, it can't verify other
      // devices, it can only request verification for itself

      const canBeVerified = myDevice && this.isDeviceVerified(myDevice) || isOwnDevice;
      return /*#__PURE__*/_react.default.createElement(_DevicesPanelEntry.default, {
        key: device.device_id,
        device: device,
        selected: this.state.selectedDevices.includes(device.device_id),
        isOwnDevice: isOwnDevice,
        verified: this.isDeviceVerified(device),
        canBeVerified: canBeVerified,
        onDeviceChange: this.loadDevices,
        onDeviceToggled: this.onDeviceSelectionToggled
      });
    });
    this.state = {
      devices: [],
      selectedDevices: []
    };
    this.loadDevices = this.loadDevices.bind(this);
  }

  componentDidMount() {
    this.loadDevices();
  }

  componentWillUnmount() {
    this.unmounted = true;
  }

  loadDevices() {
    const cli = _MatrixClientPeg.MatrixClientPeg.get();

    cli.getDevices().then(resp => {
      if (this.unmounted) {
        return;
      }

      const crossSigningInfo = cli.getStoredCrossSigningForUser(cli.getUserId());
      this.setState((state, props) => {
        const deviceIds = resp.devices.map(device => device.device_id);
        const selectedDevices = state.selectedDevices.filter(deviceId => deviceIds.includes(deviceId));
        return {
          devices: resp.devices || [],
          selectedDevices,
          crossSigningInfo: crossSigningInfo
        };
      });
      console.log(this.state);
    }, error => {
      if (this.unmounted) {
        return;
      }

      let errtxt;

      if (error.httpStatus == 404) {
        // 404 probably means the HS doesn't yet support the API.
        errtxt = (0, _languageHandler._t)("Your homeserver does not support device management.");
      } else {
        _logger.logger.error("Error loading sessions:", error);

        errtxt = (0, _languageHandler._t)("Unable to load device list");
      }

      this.setState({
        deviceLoadError: errtxt
      });
    });
  }
  /*
   * compare two devices, sorting from most-recently-seen to least-recently-seen
   * (and then, for stability, by device id)
   */


  deviceCompare(a, b) {
    // return < 0 if a comes before b, > 0 if a comes after b.
    const lastSeenDelta = (b.last_seen_ts || 0) - (a.last_seen_ts || 0);

    if (lastSeenDelta !== 0) {
      return lastSeenDelta;
    }

    const idA = a.device_id;
    const idB = b.device_id;
    return idA < idB ? -1 : idA > idB ? 1 : 0;
  }

  isDeviceVerified(device) {
    try {
      const cli = _MatrixClientPeg.MatrixClientPeg.get();

      const deviceInfo = cli.getStoredDevice(cli.getUserId(), device.device_id);
      return this.state.crossSigningInfo.checkDeviceTrust(this.state.crossSigningInfo, deviceInfo, false, true).isCrossSigningVerified();
    } catch (e) {
      console.error("Error getting device cross-signing info", e);
      return null;
    }
  }

  // TODO: proper typing for auth
  makeDeleteRequest(auth) {
    return _MatrixClientPeg.MatrixClientPeg.get().deleteMultipleDevices(this.state.selectedDevices, auth).then(() => {
      // Reset selection to [], update device list
      this.setState({
        selectedDevices: []
      });
      this.loadDevices();
    });
  }

  render() {
    const loadError = /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)(this.props.className, "error")
    }, this.state.deviceLoadError);

    if (this.state.deviceLoadError !== undefined) {
      return loadError;
    }

    const devices = this.state.devices;

    if (devices === undefined) {
      // still loading
      return /*#__PURE__*/_react.default.createElement(_Spinner.default, null);
    }

    const myDeviceId = _MatrixClientPeg.MatrixClientPeg.get().getDeviceId();

    const myDevice = devices.find(device => device.device_id === myDeviceId);

    if (!myDevice) {
      return loadError;
    }

    const otherDevices = devices.filter(device => device.device_id !== myDeviceId);
    otherDevices.sort(this.deviceCompare);
    const verifiedDevices = [];
    const unverifiedDevices = [];
    const nonCryptoDevices = [];

    for (const device of otherDevices) {
      const verified = this.isDeviceVerified(device);

      if (verified === true) {
        verifiedDevices.push(device);
      } else if (verified === false) {
        unverifiedDevices.push(device);
      } else {
        nonCryptoDevices.push(device);
      }
    }

    const section = (trustIcon, title, deviceList) => {
      if (deviceList.length === 0) {
        return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null);
      }

      let selectButton;

      if (deviceList.length > 1) {
        const anySelected = deviceList.some(device => this.state.selectedDevices.includes(device.device_id));
        const buttonAction = anySelected ? () => {
          this.deselectAll(deviceList);
        } : () => {
          this.selectAll(deviceList);
        };
        const buttonText = anySelected ? (0, _languageHandler._t)("Deselect all") : (0, _languageHandler._t)("Select all");
        selectButton = /*#__PURE__*/_react.default.createElement("div", {
          className: "mx_DevicesPanel_header_button"
        }, /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
          className: "mx_DevicesPanel_selectButton",
          kind: "secondary",
          onClick: buttonAction
        }, buttonText));
      }

      return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("hr", null), /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_DevicesPanel_header"
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_DevicesPanel_header_trust"
      }, trustIcon), /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_DevicesPanel_header_title"
      }, title), selectButton), deviceList.map(this.renderDevice));
    };

    const verifiedDevicesSection = section( /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_DevicesPanel_header_icon mx_E2EIcon mx_E2EIcon_verified"
    }), (0, _languageHandler._t)("Verified devices"), verifiedDevices);
    const unverifiedDevicesSection = section( /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_DevicesPanel_header_icon mx_E2EIcon mx_E2EIcon_warning"
    }), (0, _languageHandler._t)("Unverified devices"), unverifiedDevices);
    const nonCryptoDevicesSection = section( /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null), (0, _languageHandler._t)("Devices without encryption support"), nonCryptoDevices);
    const deleteButton = this.state.deleting ? /*#__PURE__*/_react.default.createElement(_Spinner.default, {
      w: 22,
      h: 22
    }) : /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      className: "mx_DevicesPanel_deleteButton",
      onClick: this.onDeleteClick,
      kind: "danger_outline",
      disabled: this.state.selectedDevices.length === 0
    }, (0, _languageHandler._t)("Sign out %(count)s selected devices", {
      count: this.state.selectedDevices.length
    }));
    const otherDevicesSection = otherDevices.length > 0 ? /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, verifiedDevicesSection, unverifiedDevicesSection, nonCryptoDevicesSection, deleteButton) : /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("hr", null), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_DevicesPanel_noOtherDevices"
    }, (0, _languageHandler._t)("You aren't signed into any other devices.")));
    const classes = (0, _classnames.default)(this.props.className, "mx_DevicesPanel");
    return /*#__PURE__*/_react.default.createElement("div", {
      className: classes
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_DevicesPanel_header"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_DevicesPanel_header_title"
    }, (0, _languageHandler._t)("This device"))), this.renderDevice(myDevice), otherDevicesSection);
  }

}) || _class);
exports.default = DevicesPanel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,