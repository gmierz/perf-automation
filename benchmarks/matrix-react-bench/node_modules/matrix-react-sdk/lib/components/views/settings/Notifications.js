"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _Spinner = _interopRequireDefault(require("../elements/Spinner"));

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _PushRules = require("matrix-js-sdk/src/@types/PushRules");

var _notifications = require("../../../notifications");

var _languageHandler = require("../../../languageHandler");

var _threepids = require("matrix-js-sdk/src/@types/threepids");

var _LabelledToggleSwitch = _interopRequireDefault(require("../elements/LabelledToggleSwitch"));

var _SettingsStore = _interopRequireDefault(require("../../../settings/SettingsStore"));

var _StyledRadioButton = _interopRequireDefault(require("../elements/StyledRadioButton"));

var _SettingLevel = require("../../../settings/SettingLevel");

var _Modal = _interopRequireDefault(require("../../../Modal"));

var _ErrorDialog = _interopRequireDefault(require("../dialogs/ErrorDialog"));

var _SdkConfig = _interopRequireDefault(require("../../../SdkConfig"));

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

var _TagComposer = _interopRequireDefault(require("../elements/TagComposer"));

var _objects = require("../../../utils/objects");

var _arrays = require("../../../utils/arrays");

var _logger = require("matrix-js-sdk/src/logger");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

// TODO: this "view" component still has far too much application logic in it,
// which should be factored out to other files.
var Phase;

(function (Phase) {
  Phase["Loading"] = "loading";
  Phase["Ready"] = "ready";
  Phase["Persisting"] = "persisting";
  Phase["Error"] = "error";
})(Phase || (Phase = {}));

var RuleClass;

(function (RuleClass) {
  RuleClass["Master"] = "master";
  RuleClass["VectorGlobal"] = "vector_global";
  RuleClass["VectorMentions"] = "vector_mentions";
  RuleClass["VectorOther"] = "vector_other";
  RuleClass["Other"] = "other";
})(RuleClass || (RuleClass = {}));

const KEYWORD_RULE_ID = "_keywords"; // used as a placeholder "Rule ID" throughout this component

const KEYWORD_RULE_CATEGORY = RuleClass.VectorMentions; // This array doesn't care about categories: it's just used for a simple sort

const RULE_DISPLAY_ORDER = [// Global
_PushRules.RuleId.DM, _PushRules.RuleId.EncryptedDM, _PushRules.RuleId.Message, _PushRules.RuleId.EncryptedMessage, // Mentions
_PushRules.RuleId.ContainsDisplayName, _PushRules.RuleId.ContainsUserName, _PushRules.RuleId.AtRoomNotification, // Other
_PushRules.RuleId.InviteToSelf, _PushRules.RuleId.IncomingCall, _PushRules.RuleId.SuppressNotices, _PushRules.RuleId.Tombstone];

class Notifications extends _react.default.PureComponent {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "onMasterRuleChanged", async checked => {
      this.setState({
        phase: Phase.Persisting
      });

      try {
        const masterRule = this.state.masterPushRule;
        await _MatrixClientPeg.MatrixClientPeg.get().setPushRuleEnabled('global', masterRule.kind, masterRule.rule_id, !checked);
        await this.refreshFromServer();
      } catch (e) {
        this.setState({
          phase: Phase.Error
        });

        _logger.logger.error("Error updating master push rule:", e);

        this.showSaveError();
      }
    });
    (0, _defineProperty2.default)(this, "onEmailNotificationsChanged", async (email, checked) => {
      this.setState({
        phase: Phase.Persisting
      });

      try {
        if (checked) {
          await _MatrixClientPeg.MatrixClientPeg.get().setPusher({
            kind: "email",
            app_id: "m.email",
            pushkey: email,
            app_display_name: "Email Notifications",
            device_display_name: email,
            lang: navigator.language,
            data: {
              brand: _SdkConfig.default.get().brand
            },
            // We always append for email pushers since we don't want to stop other
            // accounts notifying to the same email address
            append: true
          });
        } else {
          const pusher = this.state.pushers.find(p => p.kind === "email" && p.pushkey === email);
          pusher.kind = null; // flag for delete

          await _MatrixClientPeg.MatrixClientPeg.get().setPusher(pusher);
        }

        await this.refreshFromServer();
      } catch (e) {
        this.setState({
          phase: Phase.Error
        });

        _logger.logger.error("Error updating email pusher:", e);

        this.showSaveError();
      }
    });
    (0, _defineProperty2.default)(this, "onDesktopNotificationsChanged", async checked => {
      await _SettingsStore.default.setValue("notificationsEnabled", null, _SettingLevel.SettingLevel.DEVICE, checked);
      this.forceUpdate(); // the toggle is controlled by SettingsStore#getValue()
    });
    (0, _defineProperty2.default)(this, "onDesktopShowBodyChanged", async checked => {
      await _SettingsStore.default.setValue("notificationBodyEnabled", null, _SettingLevel.SettingLevel.DEVICE, checked);
      this.forceUpdate(); // the toggle is controlled by SettingsStore#getValue()
    });
    (0, _defineProperty2.default)(this, "onAudioNotificationsChanged", async checked => {
      await _SettingsStore.default.setValue("audioNotificationsEnabled", null, _SettingLevel.SettingLevel.DEVICE, checked);
      this.forceUpdate(); // the toggle is controlled by SettingsStore#getValue()
    });
    (0, _defineProperty2.default)(this, "onRadioChecked", async (rule, checkedState) => {
      this.setState({
        phase: Phase.Persisting
      });

      try {
        const cli = _MatrixClientPeg.MatrixClientPeg.get();

        if (rule.ruleId === KEYWORD_RULE_ID) {
          // Update all the keywords
          for (const rule of this.state.vectorKeywordRuleInfo.rules) {
            let enabled;
            let actions;

            if (checkedState === _notifications.VectorState.On) {
              if (rule.actions.length !== 1) {
                // XXX: Magic number
                actions = _notifications.PushRuleVectorState.actionsFor(checkedState);
              }

              if (this.state.vectorKeywordRuleInfo.vectorState === _notifications.VectorState.Off) {
                enabled = true;
              }
            } else if (checkedState === _notifications.VectorState.Loud) {
              if (rule.actions.length !== 3) {
                // XXX: Magic number
                actions = _notifications.PushRuleVectorState.actionsFor(checkedState);
              }

              if (this.state.vectorKeywordRuleInfo.vectorState === _notifications.VectorState.Off) {
                enabled = true;
              }
            } else {
              enabled = false;
            }

            if (actions) {
              await cli.setPushRuleActions('global', rule.kind, rule.rule_id, actions);
            }

            if (enabled !== undefined) {
              await cli.setPushRuleEnabled('global', rule.kind, rule.rule_id, enabled);
            }
          }
        } else {
          const definition = _notifications.VectorPushRulesDefinitions[rule.ruleId];
          const actions = definition.vectorStateToActions[checkedState];

          if (!actions) {
            await cli.setPushRuleEnabled('global', rule.rule.kind, rule.rule.rule_id, false);
          } else {
            await cli.setPushRuleActions('global', rule.rule.kind, rule.rule.rule_id, actions);
            await cli.setPushRuleEnabled('global', rule.rule.kind, rule.rule.rule_id, true);
          }
        }

        await this.refreshFromServer();
      } catch (e) {
        this.setState({
          phase: Phase.Error
        });

        _logger.logger.error("Error updating push rule:", e);

        this.showSaveError();
      }
    });
    (0, _defineProperty2.default)(this, "onClearNotificationsClicked", () => {
      _MatrixClientPeg.MatrixClientPeg.get().getRooms().forEach(r => {
        if (r.getUnreadNotificationCount() > 0) {
          const events = r.getLiveTimeline().getEvents();

          if (events.length) {
            // noinspection JSIgnoredPromiseFromCall
            _MatrixClientPeg.MatrixClientPeg.get().sendReadReceipt(events[events.length - 1]);
          }
        }
      });
    });
    (0, _defineProperty2.default)(this, "onKeywordAdd", keyword => {
      const originalRules = (0, _objects.objectClone)(this.state.vectorKeywordRuleInfo.rules); // We add the keyword immediately as a sort of local echo effect

      this.setState({
        phase: Phase.Persisting,
        vectorKeywordRuleInfo: _objectSpread(_objectSpread({}, this.state.vectorKeywordRuleInfo), {}, {
          rules: [...this.state.vectorKeywordRuleInfo.rules, // XXX: Horrible assumption that we don't need the remaining fields
          {
            pattern: keyword
          }]
        })
      }, async () => {
        await this.setKeywords(this.state.vectorKeywordRuleInfo.rules.map(r => r.pattern), originalRules);
      });
    });
    (0, _defineProperty2.default)(this, "onKeywordRemove", keyword => {
      const originalRules = (0, _objects.objectClone)(this.state.vectorKeywordRuleInfo.rules); // We remove the keyword immediately as a sort of local echo effect

      this.setState({
        phase: Phase.Persisting,
        vectorKeywordRuleInfo: _objectSpread(_objectSpread({}, this.state.vectorKeywordRuleInfo), {}, {
          rules: this.state.vectorKeywordRuleInfo.rules.filter(r => r.pattern !== keyword)
        })
      }, async () => {
        await this.setKeywords(this.state.vectorKeywordRuleInfo.rules.map(r => r.pattern), originalRules);
      });
    });
    this.state = {
      phase: Phase.Loading
    };
  }

  get isInhibited() {
    var _this$state$masterPus;

    // Caution: The master rule's enabled state is inverted from expectation. When
    // the master rule is *enabled* it means all other rules are *disabled* (or
    // inhibited). Conversely, when the master rule is *disabled* then all other rules
    // are *enabled* (or operate fine).
    return (_this$state$masterPus = this.state.masterPushRule) === null || _this$state$masterPus === void 0 ? void 0 : _this$state$masterPus.enabled;
  }

  componentDidMount() {
    // noinspection JSIgnoredPromiseFromCall
    this.refreshFromServer();
  }

  async refreshFromServer() {
    try {
      const newState = (await Promise.all([this.refreshRules(), this.refreshPushers(), this.refreshThreepids()])).reduce((p, c) => Object.assign(c, p), {});
      this.setState(_objectSpread(_objectSpread({}, newState), {}, {
        phase: Phase.Ready
      }));
    } catch (e) {
      _logger.logger.error("Error setting up notifications for settings: ", e);

      this.setState({
        phase: Phase.Error
      });
    }
  }

  async refreshRules() {
    const ruleSets = await _MatrixClientPeg.MatrixClientPeg.get().getPushRules();
    const categories = {
      [_PushRules.RuleId.Master]: RuleClass.Master,
      [_PushRules.RuleId.DM]: RuleClass.VectorGlobal,
      [_PushRules.RuleId.EncryptedDM]: RuleClass.VectorGlobal,
      [_PushRules.RuleId.Message]: RuleClass.VectorGlobal,
      [_PushRules.RuleId.EncryptedMessage]: RuleClass.VectorGlobal,
      [_PushRules.RuleId.ContainsDisplayName]: RuleClass.VectorMentions,
      [_PushRules.RuleId.ContainsUserName]: RuleClass.VectorMentions,
      [_PushRules.RuleId.AtRoomNotification]: RuleClass.VectorMentions,
      [_PushRules.RuleId.InviteToSelf]: RuleClass.VectorOther,
      [_PushRules.RuleId.IncomingCall]: RuleClass.VectorOther,
      [_PushRules.RuleId.SuppressNotices]: RuleClass.VectorOther,
      [_PushRules.RuleId.Tombstone]: RuleClass.VectorOther // Everything maps to a generic "other" (unknown rule)

    };
    const defaultRules = {
      [RuleClass.Master]: [],
      [RuleClass.VectorGlobal]: [],
      [RuleClass.VectorMentions]: [],
      [RuleClass.VectorOther]: [],
      [RuleClass.Other]: []
    };

    for (const k in ruleSets.global) {
      // noinspection JSUnfilteredForInLoop
      const kind = k;

      for (const r of ruleSets.global[kind]) {
        const rule = Object.assign(r, {
          kind
        });
        const category = categories[rule.rule_id] ?? RuleClass.Other;

        if (rule.rule_id[0] === '.') {
          defaultRules[category].push(rule);
        }
      }
    }

    const preparedNewState = {};

    if (defaultRules.master.length > 0) {
      preparedNewState.masterPushRule = defaultRules.master[0];
    } else {
      // XXX: Can this even happen? How do we safely recover?
      throw new Error("Failed to locate a master push rule");
    } // Parse keyword rules


    preparedNewState.vectorKeywordRuleInfo = _notifications.ContentRules.parseContentRules(ruleSets); // Prepare rendering for all of our known rules

    preparedNewState.vectorPushRules = {};
    const vectorCategories = [RuleClass.VectorGlobal, RuleClass.VectorMentions, RuleClass.VectorOther];

    for (const category of vectorCategories) {
      preparedNewState.vectorPushRules[category] = [];

      for (const rule of defaultRules[category]) {
        const definition = _notifications.VectorPushRulesDefinitions[rule.rule_id];
        const vectorState = definition.ruleToVectorState(rule);
        preparedNewState.vectorPushRules[category].push({
          ruleId: rule.rule_id,
          rule,
          vectorState,
          description: (0, _languageHandler._t)(definition.description)
        });
      } // Quickly sort the rules for display purposes


      preparedNewState.vectorPushRules[category].sort((a, b) => {
        let idxA = RULE_DISPLAY_ORDER.indexOf(a.ruleId);
        let idxB = RULE_DISPLAY_ORDER.indexOf(b.ruleId); // Assume unknown things go at the end

        if (idxA < 0) idxA = RULE_DISPLAY_ORDER.length;
        if (idxB < 0) idxB = RULE_DISPLAY_ORDER.length;
        return idxA - idxB;
      });

      if (category === KEYWORD_RULE_CATEGORY) {
        preparedNewState.vectorPushRules[category].push({
          ruleId: KEYWORD_RULE_ID,
          description: (0, _languageHandler._t)("Messages containing keywords"),
          vectorState: preparedNewState.vectorKeywordRuleInfo.vectorState
        });
      }
    }

    return preparedNewState;
  }

  refreshPushers() {
    return _MatrixClientPeg.MatrixClientPeg.get().getPushers();
  }

  refreshThreepids() {
    return _MatrixClientPeg.MatrixClientPeg.get().getThreePids();
  }

  showSaveError() {
    _Modal.default.createTrackedDialog('Error saving notification preferences', '', _ErrorDialog.default, {
      title: (0, _languageHandler._t)('Error saving notification preferences'),
      description: (0, _languageHandler._t)('An error occurred whilst saving your notification preferences.')
    });
  }

  async setKeywords(keywords, originalRules) {
    try {
      // De-duplicate and remove empties
      keywords = Array.from(new Set(keywords)).filter(k => !!k);
      const oldKeywords = Array.from(new Set(originalRules.map(r => r.pattern))).filter(k => !!k); // Note: Technically because of the UI interaction (at the time of writing), the diff
      // will only ever be +/-1 so we don't really have to worry about efficiently handling
      // tons of keyword changes.

      const diff = (0, _arrays.arrayDiff)(oldKeywords, keywords);

      for (const word of diff.removed) {
        for (const rule of originalRules.filter(r => r.pattern === word)) {
          await _MatrixClientPeg.MatrixClientPeg.get().deletePushRule('global', rule.kind, rule.rule_id);
        }
      }

      let ruleVectorState = this.state.vectorKeywordRuleInfo.vectorState;

      if (ruleVectorState === _notifications.VectorState.Off) {
        // When the current global keywords rule is OFF, we need to look at
        // the flavor of existing rules to apply the same actions
        // when creating the new rule.
        if (originalRules.length) {
          ruleVectorState = _notifications.PushRuleVectorState.contentRuleVectorStateKind(originalRules[0]);
        } else {
          ruleVectorState = _notifications.VectorState.On; // default
        }
      }

      const kind = _PushRules.PushRuleKind.ContentSpecific;

      for (const word of diff.added) {
        await _MatrixClientPeg.MatrixClientPeg.get().addPushRule('global', kind, word, {
          actions: _notifications.PushRuleVectorState.actionsFor(ruleVectorState),
          pattern: word
        });

        if (ruleVectorState === _notifications.VectorState.Off) {
          await _MatrixClientPeg.MatrixClientPeg.get().setPushRuleEnabled('global', kind, word, false);
        }
      }

      await this.refreshFromServer();
    } catch (e) {
      this.setState({
        phase: Phase.Error
      });

      _logger.logger.error("Error updating keyword push rules:", e);

      this.showSaveError();
    }
  }

  renderTopSection() {
    const masterSwitch = /*#__PURE__*/_react.default.createElement(_LabelledToggleSwitch.default, {
      value: !this.isInhibited,
      label: (0, _languageHandler._t)("Enable for this account"),
      onChange: this.onMasterRuleChanged,
      disabled: this.state.phase === Phase.Persisting
    }); // If all the rules are inhibited, don't show anything.


    if (this.isInhibited) {
      return masterSwitch;
    }

    const emailSwitches = (this.state.threepids || []).filter(t => t.medium === _threepids.ThreepidMedium.Email).map(e => /*#__PURE__*/_react.default.createElement(_LabelledToggleSwitch.default, {
      key: e.address,
      value: this.state.pushers.some(p => p.kind === "email" && p.pushkey === e.address),
      label: (0, _languageHandler._t)("Enable email notifications for %(email)s", {
        email: e.address
      }),
      onChange: this.onEmailNotificationsChanged.bind(this, e.address),
      disabled: this.state.phase === Phase.Persisting
    }));
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, masterSwitch, /*#__PURE__*/_react.default.createElement(_LabelledToggleSwitch.default, {
      value: _SettingsStore.default.getValue("notificationsEnabled"),
      onChange: this.onDesktopNotificationsChanged,
      label: (0, _languageHandler._t)('Enable desktop notifications for this session'),
      disabled: this.state.phase === Phase.Persisting
    }), /*#__PURE__*/_react.default.createElement(_LabelledToggleSwitch.default, {
      value: _SettingsStore.default.getValue("notificationBodyEnabled"),
      onChange: this.onDesktopShowBodyChanged,
      label: (0, _languageHandler._t)('Show message in desktop notification'),
      disabled: this.state.phase === Phase.Persisting
    }), /*#__PURE__*/_react.default.createElement(_LabelledToggleSwitch.default, {
      value: _SettingsStore.default.getValue("audioNotificationsEnabled"),
      onChange: this.onAudioNotificationsChanged,
      label: (0, _languageHandler._t)('Enable audible notifications for this session'),
      disabled: this.state.phase === Phase.Persisting
    }), emailSwitches);
  }

  renderCategory(category) {
    if (category !== RuleClass.VectorOther && this.isInhibited) {
      return null; // nothing to show for the section
    }

    let clearNotifsButton;

    if (category === RuleClass.VectorOther && _MatrixClientPeg.MatrixClientPeg.get().getRooms().some(r => r.getUnreadNotificationCount() > 0)) {
      clearNotifsButton = /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        onClick: this.onClearNotificationsClicked,
        kind: "danger",
        className: "mx_UserNotifSettings_clearNotifsButton"
      }, (0, _languageHandler._t)("Clear notifications"));
    }

    if (category === RuleClass.VectorOther && this.isInhibited) {
      // only render the utility buttons (if needed)
      if (clearNotifsButton) {
        return /*#__PURE__*/_react.default.createElement("div", {
          className: "mx_UserNotifSettings_floatingSection"
        }, /*#__PURE__*/_react.default.createElement("div", null, (0, _languageHandler._t)("Other")), clearNotifsButton);
      }

      return null;
    }

    let keywordComposer;

    if (category === RuleClass.VectorMentions) {
      var _this$state$vectorKey;

      keywordComposer = /*#__PURE__*/_react.default.createElement(_TagComposer.default, {
        tags: (_this$state$vectorKey = this.state.vectorKeywordRuleInfo) === null || _this$state$vectorKey === void 0 ? void 0 : _this$state$vectorKey.rules.map(r => r.pattern),
        onAdd: this.onKeywordAdd,
        onRemove: this.onKeywordRemove,
        disabled: this.state.phase === Phase.Persisting,
        label: (0, _languageHandler._t)("Keyword"),
        placeholder: (0, _languageHandler._t)("New keyword")
      });
    }

    const makeRadio = (r, s) => /*#__PURE__*/_react.default.createElement(_StyledRadioButton.default, {
      key: r.ruleId,
      name: r.ruleId,
      checked: r.vectorState === s,
      onChange: this.onRadioChecked.bind(this, r, s),
      disabled: this.state.phase === Phase.Persisting
    });

    const rows = this.state.vectorPushRules[category].map(r => /*#__PURE__*/_react.default.createElement("tr", {
      key: category + r.ruleId
    }, /*#__PURE__*/_react.default.createElement("td", null, r.description), /*#__PURE__*/_react.default.createElement("td", null, makeRadio(r, _notifications.VectorState.Off)), /*#__PURE__*/_react.default.createElement("td", null, makeRadio(r, _notifications.VectorState.On)), /*#__PURE__*/_react.default.createElement("td", null, makeRadio(r, _notifications.VectorState.Loud))));
    let sectionName;

    switch (category) {
      case RuleClass.VectorGlobal:
        sectionName = (0, _languageHandler._t)("Global");
        break;

      case RuleClass.VectorMentions:
        sectionName = (0, _languageHandler._t)("Mentions & keywords");
        break;

      case RuleClass.VectorOther:
        sectionName = (0, _languageHandler._t)("Other");
        break;

      default:
        throw new Error("Developer error: Unnamed notifications section: " + category);
    }

    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("table", {
      className: "mx_UserNotifSettings_pushRulesTable"
    }, /*#__PURE__*/_react.default.createElement("thead", null, /*#__PURE__*/_react.default.createElement("tr", null, /*#__PURE__*/_react.default.createElement("th", null, sectionName), /*#__PURE__*/_react.default.createElement("th", null, (0, _languageHandler._t)("Off")), /*#__PURE__*/_react.default.createElement("th", null, (0, _languageHandler._t)("On")), /*#__PURE__*/_react.default.createElement("th", null, (0, _languageHandler._t)("Noisy")))), /*#__PURE__*/_react.default.createElement("tbody", null, rows)), clearNotifsButton, keywordComposer);
  }

  renderTargets() {
    if (this.isInhibited) return null; // no targets if there's no notifications

    const rows = this.state.pushers.map(p => /*#__PURE__*/_react.default.createElement("tr", {
      key: p.kind + p.pushkey
    }, /*#__PURE__*/_react.default.createElement("td", null, p.app_display_name), /*#__PURE__*/_react.default.createElement("td", null, p.device_display_name)));
    if (!rows.length) return null; // no targets to show

    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_UserNotifSettings_floatingSection"
    }, /*#__PURE__*/_react.default.createElement("div", null, (0, _languageHandler._t)("Notification targets")), /*#__PURE__*/_react.default.createElement("table", null, /*#__PURE__*/_react.default.createElement("tbody", null, rows)));
  }

  render() {
    if (this.state.phase === Phase.Loading) {
      // Ends up default centered
      return /*#__PURE__*/_react.default.createElement(_Spinner.default, null);
    } else if (this.state.phase === Phase.Error) {
      return /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("There was an error loading your notification settings."));
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_UserNotifSettings"
    }, this.renderTopSection(), this.renderCategory(RuleClass.VectorGlobal), this.renderCategory(RuleClass.VectorMentions), this.renderCategory(RuleClass.VectorOther), this.renderTargets());
  }

}

exports.default = Notifications;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,