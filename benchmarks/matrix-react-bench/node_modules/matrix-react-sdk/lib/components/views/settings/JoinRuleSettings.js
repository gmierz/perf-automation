"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _partials = require("matrix-js-sdk/src/@types/partials");

var _event = require("matrix-js-sdk/src/@types/event");

var _StyledRadioGroup = _interopRequireDefault(require("../elements/StyledRadioGroup"));

var _languageHandler = require("../../../languageHandler");

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

var _RoomAvatar = _interopRequireDefault(require("../avatars/RoomAvatar"));

var _SpaceStore = _interopRequireDefault(require("../../../stores/spaces/SpaceStore"));

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _Modal = _interopRequireDefault(require("../../../Modal"));

var _ManageRestrictedJoinRuleDialog = _interopRequireDefault(require("../dialogs/ManageRestrictedJoinRuleDialog"));

var _RoomUpgradeWarningDialog = _interopRequireDefault(require("../dialogs/RoomUpgradeWarningDialog"));

var _RoomUpgrade = require("../../../utils/RoomUpgrade");

var _arrays = require("../../../utils/arrays");

var _useLocalEcho = require("../../../hooks/useLocalEcho");

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _RoomSettingsDialog = require("../dialogs/RoomSettingsDialog");

/*
Copyright 2021 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const JoinRuleSettings = ({
  room,
  promptUpgrade,
  onError,
  beforeChange,
  closeSettingsFn
}) => {
  const cli = room.client;
  const restrictedRoomCapabilities = _SpaceStore.default.instance.restrictedJoinRuleSupport;
  const roomSupportsRestricted = Array.isArray(restrictedRoomCapabilities === null || restrictedRoomCapabilities === void 0 ? void 0 : restrictedRoomCapabilities.support) && restrictedRoomCapabilities.support.includes(room.getVersion());
  const preferredRestrictionVersion = !roomSupportsRestricted && promptUpgrade ? restrictedRoomCapabilities === null || restrictedRoomCapabilities === void 0 ? void 0 : restrictedRoomCapabilities.preferred : undefined;
  const disabled = !room.currentState.mayClientSendStateEvent(_event.EventType.RoomJoinRules, cli);
  const [content, setContent] = (0, _useLocalEcho.useLocalEcho)(() => {
    var _room$currentState$ge;

    return (_room$currentState$ge = room.currentState.getStateEvents(_event.EventType.RoomJoinRules, "")) === null || _room$currentState$ge === void 0 ? void 0 : _room$currentState$ge.getContent();
  }, content => cli.sendStateEvent(room.roomId, _event.EventType.RoomJoinRules, content, ""), onError);
  const {
    join_rule: joinRule
  } = content;
  const restrictedAllowRoomIds = joinRule === _partials.JoinRule.Restricted ? content.allow.filter(o => o.type === _partials.RestrictedAllowType.RoomMembership).map(o => o.room_id) : undefined;

  const editRestrictedRoomIds = async () => {
    var _selected;

    let selected = restrictedAllowRoomIds;

    if (!((_selected = selected) !== null && _selected !== void 0 && _selected.length) && _SpaceStore.default.instance.activeSpaceRoom) {
      selected = [_SpaceStore.default.instance.activeSpaceRoom.roomId];
    }

    const matrixClient = _MatrixClientPeg.MatrixClientPeg.get();

    const {
      finished
    } = _Modal.default.createTrackedDialog('Edit restricted', '', _ManageRestrictedJoinRuleDialog.default, {
      matrixClient,
      room,
      selected
    }, "mx_ManageRestrictedJoinRuleDialog_wrapper");

    const [roomIds] = await finished;
    return roomIds;
  };

  const definitions = [{
    value: _partials.JoinRule.Invite,
    label: (0, _languageHandler._t)("Private (invite only)"),
    description: (0, _languageHandler._t)("Only invited people can join."),
    checked: joinRule === _partials.JoinRule.Invite || joinRule === _partials.JoinRule.Restricted && !(restrictedAllowRoomIds !== null && restrictedAllowRoomIds !== void 0 && restrictedAllowRoomIds.length)
  }, {
    value: _partials.JoinRule.Public,
    label: (0, _languageHandler._t)("Public"),
    description: (0, _languageHandler._t)("Anyone can find and join.")
  }];

  if (roomSupportsRestricted || preferredRestrictionVersion || joinRule === _partials.JoinRule.Restricted) {
    let upgradeRequiredPill;

    if (preferredRestrictionVersion) {
      upgradeRequiredPill = /*#__PURE__*/_react.default.createElement("span", {
        className: "mx_JoinRuleSettings_upgradeRequired"
      }, (0, _languageHandler._t)("Upgrade required"));
    }

    let description;

    if (joinRule === _partials.JoinRule.Restricted && restrictedAllowRoomIds !== null && restrictedAllowRoomIds !== void 0 && restrictedAllowRoomIds.length) {
      // only show the first 4 spaces we know about, so that the UI doesn't grow out of proportion there are lots.
      const shownSpaces = restrictedAllowRoomIds.map(roomId => cli.getRoom(roomId)).filter(room => room === null || room === void 0 ? void 0 : room.isSpaceRoom()).slice(0, 4);
      let moreText;

      if (shownSpaces.length < restrictedAllowRoomIds.length) {
        if (shownSpaces.length > 0) {
          moreText = (0, _languageHandler._t)("& %(count)s more", {
            count: restrictedAllowRoomIds.length - shownSpaces.length
          });
        } else {
          moreText = (0, _languageHandler._t)("Currently, %(count)s spaces have access", {
            count: restrictedAllowRoomIds.length
          });
        }
      }

      const onRestrictedRoomIdsChange = newAllowRoomIds => {
        if (!(0, _arrays.arrayHasDiff)(restrictedAllowRoomIds || [], newAllowRoomIds)) return;

        if (!newAllowRoomIds.length) {
          setContent({
            join_rule: _partials.JoinRule.Invite
          });
          return;
        }

        setContent({
          join_rule: _partials.JoinRule.Restricted,
          allow: newAllowRoomIds.map(roomId => ({
            "type": _partials.RestrictedAllowType.RoomMembership,
            "room_id": roomId
          }))
        });
      };

      const onEditRestrictedClick = async () => {
        const restrictedAllowRoomIds = await editRestrictedRoomIds();
        if (!Array.isArray(restrictedAllowRoomIds)) return;

        if (restrictedAllowRoomIds.length > 0) {
          onRestrictedRoomIdsChange(restrictedAllowRoomIds);
        } else {
          onChange(_partials.JoinRule.Invite);
        }
      };

      description = /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("span", null, (0, _languageHandler._t)("Anyone in a space can find and join. <a>Edit which spaces can access here.</a>", {}, {
        a: sub => /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
          disabled: disabled,
          onClick: onEditRestrictedClick,
          kind: "link",
          className: "mx_JoinRuleSettings_linkButton"
        }, sub)
      })), /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_JoinRuleSettings_spacesWithAccess"
      }, /*#__PURE__*/_react.default.createElement("h4", null, (0, _languageHandler._t)("Spaces with access")), shownSpaces.map(room => {
        return /*#__PURE__*/_react.default.createElement("span", {
          key: room.roomId
        }, /*#__PURE__*/_react.default.createElement(_RoomAvatar.default, {
          room: room,
          height: 32,
          width: 32
        }), room.name);
      }), moreText && /*#__PURE__*/_react.default.createElement("span", null, moreText)));
    } else if (_SpaceStore.default.instance.activeSpaceRoom) {
      description = (0, _languageHandler._t)("Anyone in <spaceName/> can find and join. You can select other spaces too.", {}, {
        spaceName: () => /*#__PURE__*/_react.default.createElement("b", null, _SpaceStore.default.instance.activeSpaceRoom.name)
      });
    } else {
      description = (0, _languageHandler._t)("Anyone in a space can find and join. You can select multiple spaces.");
    }

    definitions.splice(1, 0, {
      value: _partials.JoinRule.Restricted,
      label: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, (0, _languageHandler._t)("Space members"), upgradeRequiredPill),
      description,
      // if there are 0 allowed spaces then render it as invite only instead
      checked: joinRule === _partials.JoinRule.Restricted && !!(restrictedAllowRoomIds !== null && restrictedAllowRoomIds !== void 0 && restrictedAllowRoomIds.length)
    });
  }

  const onChange = async joinRule => {
    const beforeJoinRule = content.join_rule;
    let restrictedAllowRoomIds;

    if (joinRule === _partials.JoinRule.Restricted) {
      if (beforeJoinRule === _partials.JoinRule.Restricted || roomSupportsRestricted) {
        // Have the user pick which spaces to allow joins from
        restrictedAllowRoomIds = await editRestrictedRoomIds();
        if (!Array.isArray(restrictedAllowRoomIds)) return;
      } else if (preferredRestrictionVersion) {
        // Block this action on a room upgrade otherwise it'd make their room unjoinable
        const targetVersion = preferredRestrictionVersion;
        let warning;
        const userId = cli.getUserId();
        const unableToUpdateSomeParents = Array.from(_SpaceStore.default.instance.getKnownParents(room.roomId)).some(roomId => {
          var _cli$getRoom;

          return !((_cli$getRoom = cli.getRoom(roomId)) !== null && _cli$getRoom !== void 0 && _cli$getRoom.currentState.maySendStateEvent(_event.EventType.SpaceChild, userId));
        });

        if (unableToUpdateSomeParents) {
          warning = /*#__PURE__*/_react.default.createElement("b", null, (0, _languageHandler._t)("This room is in some spaces you're not an admin of. " + "In those spaces, the old room will still be shown, " + "but people will be prompted to join the new one."));
        }

        _Modal.default.createTrackedDialog('Restricted join rule upgrade', '', _RoomUpgradeWarningDialog.default, {
          roomId: room.roomId,
          targetVersion,
          description: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, (0, _languageHandler._t)("This upgrade will allow members of selected spaces " + "access to this room without an invite."), warning),
          doUpgrade: async (opts, fn) => {
            const roomId = await (0, _RoomUpgrade.upgradeRoom)(room, targetVersion, opts.invite, true, true, true, progress => {
              const total = 2 + progress.updateSpacesTotal + progress.inviteUsersTotal;

              if (!progress.roomUpgraded) {
                fn((0, _languageHandler._t)("Upgrading room"), 0, total);
              } else if (!progress.roomSynced) {
                fn((0, _languageHandler._t)("Loading new room"), 1, total);
              } else if (progress.inviteUsersProgress < progress.inviteUsersTotal) {
                fn((0, _languageHandler._t)("Sending invites... (%(progress)s out of %(count)s)", {
                  progress: progress.inviteUsersProgress,
                  count: progress.inviteUsersTotal
                }), 2 + progress.inviteUsersProgress, total);
              } else if (progress.updateSpacesProgress < progress.updateSpacesTotal) {
                fn((0, _languageHandler._t)("Updating spaces... (%(progress)s out of %(count)s)", {
                  progress: progress.updateSpacesProgress,
                  count: progress.updateSpacesTotal
                }), 2 + progress.inviteUsersProgress + progress.updateSpacesProgress, total);
              }
            });
            closeSettingsFn(); // switch to the new room in the background

            _dispatcher.default.dispatch({
              action: "view_room",
              room_id: roomId
            }); // open new settings on this tab


            _dispatcher.default.dispatch({
              action: "open_room_settings",
              initial_tab_id: _RoomSettingsDialog.ROOM_SECURITY_TAB
            });
          }
        });

        return;
      } // when setting to 0 allowed rooms/spaces set to invite only instead as per the note


      if (!restrictedAllowRoomIds.length) {
        joinRule = _partials.JoinRule.Invite;
      }
    }

    if (beforeJoinRule === joinRule && !restrictedAllowRoomIds) return;
    if (beforeChange && !(await beforeChange(joinRule))) return;
    const newContent = {
      join_rule: joinRule
    }; // pre-set the accepted spaces with the currently viewed one as per the microcopy

    if (joinRule === _partials.JoinRule.Restricted) {
      newContent.allow = restrictedAllowRoomIds.map(roomId => ({
        "type": _partials.RestrictedAllowType.RoomMembership,
        "room_id": roomId
      }));
    }

    setContent(newContent);
  };

  return /*#__PURE__*/_react.default.createElement(_StyledRadioGroup.default, {
    name: "joinRule",
    value: joinRule,
    onChange: onChange,
    definitions: definitions,
    disabled: disabled,
    className: "mx_JoinRuleSettings_radioButton"
  });
};

var _default = JoinRuleSettings;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,