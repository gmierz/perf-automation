"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _languageHandler = require("../../../languageHandler");

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _Field = _interopRequireDefault(require("../elements/Field"));

var _HostingLink = require("../../../utils/HostingLink");

var _OwnProfileStore = require("../../../stores/OwnProfileStore");

var _Modal = _interopRequireDefault(require("../../../Modal"));

var _ErrorDialog = _interopRequireDefault(require("../dialogs/ErrorDialog"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _Media = require("../../../customisations/Media");

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

var _AvatarSetting = _interopRequireDefault(require("./AvatarSetting"));

var _logger = require("matrix-js-sdk/src/logger");

var _dec, _class;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

let ProfileSettings = (_dec = (0, _replaceableComponent.replaceableComponent)("views.settings.ProfileSettings"), _dec(_class = class ProfileSettings extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "avatarUpload", /*#__PURE__*/(0, _react.createRef)());
    (0, _defineProperty2.default)(this, "uploadAvatar", () => {
      this.avatarUpload.current.click();
    });
    (0, _defineProperty2.default)(this, "removeAvatar", () => {
      // clear file upload field so same file can be selected
      this.avatarUpload.current.value = "";
      this.setState({
        avatarUrl: null,
        avatarFile: null,
        enableProfileSave: true
      });
    });
    (0, _defineProperty2.default)(this, "cancelProfileChanges", async e => {
      e.stopPropagation();
      e.preventDefault();
      if (!this.state.enableProfileSave) return;
      this.setState({
        enableProfileSave: false,
        displayName: this.state.originalDisplayName,
        avatarUrl: this.state.originalAvatarUrl,
        avatarFile: null
      });
    });
    (0, _defineProperty2.default)(this, "saveProfile", async e => {
      e.stopPropagation();
      e.preventDefault();
      if (!this.state.enableProfileSave) return;
      this.setState({
        enableProfileSave: false
      });

      const client = _MatrixClientPeg.MatrixClientPeg.get();

      const newState = {};
      const displayName = this.state.displayName.trim();

      try {
        if (this.state.originalDisplayName !== this.state.displayName) {
          await client.setDisplayName(displayName);
          newState.originalDisplayName = displayName;
          newState.displayName = displayName;
        }

        if (this.state.avatarFile) {
          _logger.logger.log(`Uploading new avatar, ${this.state.avatarFile.name} of type ${this.state.avatarFile.type},` + ` (${this.state.avatarFile.size}) bytes`);

          const uri = await client.uploadContent(this.state.avatarFile);
          await client.setAvatarUrl(uri);
          newState.avatarUrl = (0, _Media.mediaFromMxc)(uri).getSquareThumbnailHttp(96);
          newState.originalAvatarUrl = newState.avatarUrl;
          newState.avatarFile = null;
        } else if (this.state.originalAvatarUrl !== this.state.avatarUrl) {
          await client.setAvatarUrl(""); // use empty string as Synapse 500s on undefined
        }
      } catch (err) {
        _logger.logger.log("Failed to save profile", err);

        _Modal.default.createTrackedDialog('Failed to save profile', '', _ErrorDialog.default, {
          title: (0, _languageHandler._t)("Failed to save your profile"),
          description: err && err.message ? err.message : (0, _languageHandler._t)("The operation could not be completed")
        });
      }

      this.setState(newState);
    });
    (0, _defineProperty2.default)(this, "onDisplayNameChanged", e => {
      this.setState({
        displayName: e.target.value,
        enableProfileSave: true
      });
    });
    (0, _defineProperty2.default)(this, "onAvatarChanged", e => {
      if (!e.target.files || !e.target.files.length) {
        this.setState({
          avatarUrl: this.state.originalAvatarUrl,
          avatarFile: null,
          enableProfileSave: false
        });
        return;
      }

      const file = e.target.files[0];
      const reader = new FileReader();

      reader.onload = ev => {
        this.setState({
          avatarUrl: ev.target.result,
          avatarFile: file,
          enableProfileSave: true
        });
      };

      reader.readAsDataURL(file);
    });

    const _client = _MatrixClientPeg.MatrixClientPeg.get();

    let avatarUrl = _OwnProfileStore.OwnProfileStore.instance.avatarMxc;
    if (avatarUrl) avatarUrl = (0, _Media.mediaFromMxc)(avatarUrl).getSquareThumbnailHttp(96);
    this.state = {
      userId: _client.getUserId(),
      originalDisplayName: _OwnProfileStore.OwnProfileStore.instance.displayName,
      displayName: _OwnProfileStore.OwnProfileStore.instance.displayName,
      originalAvatarUrl: avatarUrl,
      avatarUrl: avatarUrl,
      avatarFile: null,
      enableProfileSave: false
    };
  }

  render() {
    var _this$state$avatarUrl;

    const hostingSignupLink = (0, _HostingLink.getHostingLink)('user-settings');
    let hostingSignup = null;

    if (hostingSignupLink) {
      hostingSignup = /*#__PURE__*/_react.default.createElement("span", {
        className: "mx_ProfileSettings_hostingSignup"
      }, (0, _languageHandler._t)("<a>Upgrade</a> to your own domain", {}, {
        a: sub => /*#__PURE__*/_react.default.createElement("a", {
          href: hostingSignupLink,
          target: "_blank",
          rel: "noreferrer noopener"
        }, sub)
      }), /*#__PURE__*/_react.default.createElement("a", {
        href: hostingSignupLink,
        target: "_blank",
        rel: "noreferrer noopener"
      }, /*#__PURE__*/_react.default.createElement("img", {
        src: require("../../../../res/img/external-link.svg"),
        width: "11",
        height: "10",
        alt: ""
      })));
    }

    return /*#__PURE__*/_react.default.createElement("form", {
      onSubmit: this.saveProfile,
      autoComplete: "off",
      noValidate: true,
      className: "mx_ProfileSettings_profileForm"
    }, /*#__PURE__*/_react.default.createElement("input", {
      type: "file",
      ref: this.avatarUpload,
      className: "mx_ProfileSettings_avatarUpload",
      onChange: this.onAvatarChanged,
      accept: "image/*"
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_ProfileSettings_profile"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_ProfileSettings_controls"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_SettingsTab_subheading"
    }, (0, _languageHandler._t)("Profile")), /*#__PURE__*/_react.default.createElement(_Field.default, {
      label: (0, _languageHandler._t)("Display Name"),
      type: "text",
      value: this.state.displayName,
      autoComplete: "off",
      onChange: this.onDisplayNameChanged
    }), /*#__PURE__*/_react.default.createElement("p", null, this.state.userId, hostingSignup)), /*#__PURE__*/_react.default.createElement(_AvatarSetting.default, {
      avatarUrl: (_this$state$avatarUrl = this.state.avatarUrl) === null || _this$state$avatarUrl === void 0 ? void 0 : _this$state$avatarUrl.toString(),
      avatarName: this.state.displayName || this.state.userId,
      avatarAltText: (0, _languageHandler._t)("Profile picture"),
      uploadAvatar: this.uploadAvatar,
      removeAvatar: this.removeAvatar
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_ProfileSettings_buttons"
    }, /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      onClick: this.cancelProfileChanges,
      kind: "link",
      disabled: !this.state.enableProfileSave
    }, (0, _languageHandler._t)("Cancel")), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      onClick: this.saveProfile,
      kind: "primary",
      disabled: !this.state.enableProfileSave
    }, (0, _languageHandler._t)("Save"))));
  }

}) || _class);
exports.default = ProfileSettings;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,