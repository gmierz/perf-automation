"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _languageHandler = require("../../../languageHandler");

var _Spinner = _interopRequireDefault(require("../elements/Spinner"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _Media = require("../../../customisations/Media");

var _RoomAvatar = _interopRequireDefault(require("../avatars/RoomAvatar"));

var _BaseAvatar = _interopRequireDefault(require("../avatars/BaseAvatar"));

var _dec, _class, _class2, _temp;

var Phases;

(function (Phases) {
  Phases["Display"] = "display";
  Phases["Uploading"] = "uploading";
  Phases["Error"] = "error";
})(Phases || (Phases = {}));

let ChangeAvatar = (_dec = (0, _replaceableComponent.replaceableComponent)("views.settings.ChangeAvatar"), _dec(_class = (_temp = _class2 = class ChangeAvatar extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "avatarSet", false);
    (0, _defineProperty2.default)(this, "onRoomStateEvents", ev => {
      if (!this.props.room) {
        return;
      }

      if (ev.getRoomId() !== this.props.room.roomId || ev.getType() !== 'm.room.avatar' || ev.getSender() !== _MatrixClientPeg.MatrixClientPeg.get().getUserId()) {
        return;
      }

      if (!ev.getContent().url) {
        this.avatarSet = false;
        this.setState({}); // force update
      }
    });
    (0, _defineProperty2.default)(this, "onFileSelected", ev => {
      this.avatarSet = true;
      return this.setAvatarFromFile(ev.target.files[0]);
    });
    (0, _defineProperty2.default)(this, "onError", () => {
      this.setState({
        errorText: (0, _languageHandler._t)("Failed to upload profile picture!")
      });
    });
    this.state = {
      avatarUrl: this.props.initialAvatarUrl,
      phase: Phases.Display
    };
  }

  componentDidMount() {
    _MatrixClientPeg.MatrixClientPeg.get().on("RoomState.events", this.onRoomStateEvents);
  } // TODO: [REACT-WARNING] Replace with appropriate lifecycle event
  // eslint-disable-next-line


  UNSAFE_componentWillReceiveProps(newProps) {
    if (this.avatarSet) {
      // don't clobber what the user has just set
      return;
    }

    this.setState({
      avatarUrl: newProps.initialAvatarUrl
    });
  }

  componentWillUnmount() {
    if (_MatrixClientPeg.MatrixClientPeg.get()) {
      _MatrixClientPeg.MatrixClientPeg.get().removeListener("RoomState.events", this.onRoomStateEvents);
    }
  }

  setAvatarFromFile(file) {
    let newUrl = null;
    this.setState({
      phase: Phases.Uploading
    });

    const httpPromise = _MatrixClientPeg.MatrixClientPeg.get().uploadContent(file).then(url => {
      newUrl = url;

      if (this.props.room) {
        return _MatrixClientPeg.MatrixClientPeg.get().sendStateEvent(this.props.room.roomId, 'm.room.avatar', {
          url: url
        }, '');
      } else {
        return _MatrixClientPeg.MatrixClientPeg.get().setAvatarUrl(url);
      }
    });

    httpPromise.then(() => {
      this.setState({
        phase: Phases.Display,
        avatarUrl: (0, _Media.mediaFromMxc)(newUrl).srcHttp
      });
    }, () => {
      this.setState({
        phase: Phases.Error
      });
      this.onError();
    });
    return httpPromise;
  }

  render() {
    let avatarImg; // Having just set an avatar we just display that since it will take a little
    // time to propagate through to the RoomAvatar.

    if (this.props.room && !this.avatarSet) {
      avatarImg = /*#__PURE__*/_react.default.createElement(_RoomAvatar.default, {
        room: this.props.room,
        width: this.props.width,
        height: this.props.height,
        resizeMethod: "crop"
      });
    } else {
      // XXX: FIXME: once we track in the JS what our own displayname is(!) then use it here rather than ?
      avatarImg = /*#__PURE__*/_react.default.createElement(_BaseAvatar.default, {
        width: this.props.width,
        height: this.props.height,
        resizeMethod: "crop",
        name: "?",
        idName: _MatrixClientPeg.MatrixClientPeg.get().getUserIdLocalpart(),
        url: this.state.avatarUrl
      });
    }

    let uploadSection;

    if (this.props.showUploadSection) {
      uploadSection = /*#__PURE__*/_react.default.createElement("div", {
        className: this.props.className
      }, (0, _languageHandler._t)("Upload new:"), /*#__PURE__*/_react.default.createElement("input", {
        type: "file",
        accept: "image/*",
        onChange: this.onFileSelected
      }), this.state.errorText);
    }

    switch (this.state.phase) {
      case Phases.Display:
      case Phases.Error:
        return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("div", {
          className: this.props.className
        }, avatarImg), uploadSection);

      case Phases.Uploading:
        return /*#__PURE__*/_react.default.createElement(_Spinner.default, null);
    }
  }

}, (0, _defineProperty2.default)(_class2, "defaultProps", {
  showUploadSection: true,
  className: "",
  width: 80,
  height: 80
}), _temp)) || _class);
exports.default = ChangeAvatar;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,