"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _event = require("matrix-js-sdk/src/@types/event");

var _languageHandler = require("../../../../../languageHandler");

var _LabelledToggleSwitch = _interopRequireDefault(require("../../../elements/LabelledToggleSwitch"));

var _SettingsStore = _interopRequireDefault(require("../../../../../settings/SettingsStore"));

var _Field = _interopRequireDefault(require("../../../elements/Field"));

var _PlatformPeg = _interopRequireDefault(require("../../../../../PlatformPeg"));

var _SettingLevel = require("../../../../../settings/SettingLevel");

var _replaceableComponent = require("../../../../../utils/replaceableComponent");

var _SettingsFlag = _interopRequireDefault(require("../../../elements/SettingsFlag"));

var KeyboardShortcuts = _interopRequireWildcard(require("../../../../../accessibility/KeyboardShortcuts"));

var _AccessibleButton = _interopRequireDefault(require("../../../elements/AccessibleButton"));

var _GroupAvatar = _interopRequireDefault(require("../../../avatars/GroupAvatar"));

var _dispatcher = _interopRequireDefault(require("../../../../../dispatcher/dispatcher"));

var _GroupActions = _interopRequireDefault(require("../../../../../actions/GroupActions"));

var _MatrixClientContext = _interopRequireDefault(require("../../../../../contexts/MatrixClientContext"));

var _useDispatcher = require("../../../../../hooks/useDispatcher");

var _CreateSpaceFromCommunityDialog = require("../../../dialogs/CreateSpaceFromCommunityDialog");

var _space = require("../../../../../utils/space");

var _Spinner = _interopRequireDefault(require("../../../elements/Spinner"));

var _dec, _class, _class2, _temp;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const CommunityMigrator = ({
  onFinished
}) => {
  const cli = (0, _react.useContext)(_MatrixClientContext.default);
  const [communities, setCommunities] = (0, _react.useState)(null);
  (0, _react.useEffect)(() => {
    _dispatcher.default.dispatch(_GroupActions.default.fetchJoinedGroups(cli));
  }, [cli]);
  (0, _useDispatcher.useDispatcher)(_dispatcher.default, async payload => {
    if (payload.action === "GroupActions.fetchJoinedGroups.success") {
      const communities = [];
      const migratedSpaceMap = new Map(cli.getRooms().map(room => {
        var _room$currentState$ge;

        const createContent = (_room$currentState$ge = room.currentState.getStateEvents(_event.EventType.RoomCreate, "")) === null || _room$currentState$ge === void 0 ? void 0 : _room$currentState$ge.getContent();

        if (createContent !== null && createContent !== void 0 && createContent[_CreateSpaceFromCommunityDialog.CreateEventField]) {
          return [createContent[_CreateSpaceFromCommunityDialog.CreateEventField], room.roomId];
        }
      }).filter(Boolean));

      for (const groupId of payload.result.groups) {
        const summary = await cli.getGroupSummary(groupId);

        if (summary.user.is_privileged) {
          communities.push(_objectSpread(_objectSpread({}, summary), {}, {
            groupId,
            spaceId: migratedSpaceMap.get(groupId)
          }));
        }
      }

      setCommunities(communities);
    }
  });

  if (!communities) {
    return /*#__PURE__*/_react.default.createElement(_Spinner.default, null);
  }

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_PreferencesUserSettingsTab_CommunityMigrator"
  }, communities.map(community => /*#__PURE__*/_react.default.createElement("div", {
    key: community.groupId
  }, /*#__PURE__*/_react.default.createElement(_GroupAvatar.default, {
    groupId: community.groupId,
    groupAvatarUrl: community.profile.avatar_url,
    groupName: community.profile.name,
    width: 32,
    height: 32
  }), community.profile.name, /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
    kind: "primary_outline",
    onClick: () => {
      if (community.spaceId) {
        _dispatcher.default.dispatch({
          action: "view_room",
          room_id: community.spaceId
        });

        onFinished();
      } else {
        (0, _space.createSpaceFromCommunity)(cli, community.groupId).then(([spaceId]) => {
          if (spaceId) {
            community.spaceId = spaceId;
            setCommunities([...communities]); // force component re-render
          }
        });
      }
    }
  }, community.spaceId ? (0, _languageHandler._t)("Open Space") : (0, _languageHandler._t)("Create Space")))));
};

let PreferencesUserSettingsTab = (_dec = (0, _replaceableComponent.replaceableComponent)("views.settings.tabs.user.PreferencesUserSettingsTab"), _dec(_class = (_temp = _class2 = class PreferencesUserSettingsTab extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "onAutoLaunchChange", checked => {
      _PlatformPeg.default.get().setAutoLaunchEnabled(checked).then(() => this.setState({
        autoLaunch: checked
      }));
    });
    (0, _defineProperty2.default)(this, "onWarnBeforeExitChange", checked => {
      _PlatformPeg.default.get().setWarnBeforeExit(checked).then(() => this.setState({
        warnBeforeExit: checked
      }));
    });
    (0, _defineProperty2.default)(this, "onAlwaysShowMenuBarChange", checked => {
      _PlatformPeg.default.get().setAutoHideMenuBarEnabled(!checked).then(() => this.setState({
        alwaysShowMenuBar: checked
      }));
    });
    (0, _defineProperty2.default)(this, "onMinimizeToTrayChange", checked => {
      _PlatformPeg.default.get().setMinimizeToTrayEnabled(checked).then(() => this.setState({
        minimizeToTray: checked
      }));
    });
    (0, _defineProperty2.default)(this, "onAutocompleteDelayChange", e => {
      this.setState({
        autocompleteDelay: e.target.value
      });

      _SettingsStore.default.setValue("autocompleteDelay", null, _SettingLevel.SettingLevel.DEVICE, e.target.value);
    });
    (0, _defineProperty2.default)(this, "onReadMarkerInViewThresholdMs", e => {
      this.setState({
        readMarkerInViewThresholdMs: e.target.value
      });

      _SettingsStore.default.setValue("readMarkerInViewThresholdMs", null, _SettingLevel.SettingLevel.DEVICE, e.target.value);
    });
    (0, _defineProperty2.default)(this, "onReadMarkerOutOfViewThresholdMs", e => {
      this.setState({
        readMarkerOutOfViewThresholdMs: e.target.value
      });

      _SettingsStore.default.setValue("readMarkerOutOfViewThresholdMs", null, _SettingLevel.SettingLevel.DEVICE, e.target.value);
    });
    this.state = {
      autoLaunch: false,
      autoLaunchSupported: false,
      warnBeforeExit: true,
      warnBeforeExitSupported: false,
      alwaysShowMenuBar: true,
      alwaysShowMenuBarSupported: false,
      minimizeToTray: true,
      minimizeToTraySupported: false,
      autocompleteDelay: _SettingsStore.default.getValueAt(_SettingLevel.SettingLevel.DEVICE, 'autocompleteDelay').toString(10),
      readMarkerInViewThresholdMs: _SettingsStore.default.getValueAt(_SettingLevel.SettingLevel.DEVICE, 'readMarkerInViewThresholdMs').toString(10),
      readMarkerOutOfViewThresholdMs: _SettingsStore.default.getValueAt(_SettingLevel.SettingLevel.DEVICE, 'readMarkerOutOfViewThresholdMs').toString(10)
    };
  }

  async componentDidMount() {
    const platform = _PlatformPeg.default.get();

    const autoLaunchSupported = await platform.supportsAutoLaunch();
    let autoLaunch = false;

    if (autoLaunchSupported) {
      autoLaunch = await platform.getAutoLaunchEnabled();
    }

    const warnBeforeExitSupported = await platform.supportsWarnBeforeExit();
    let warnBeforeExit = false;

    if (warnBeforeExitSupported) {
      warnBeforeExit = await platform.shouldWarnBeforeExit();
    }

    const alwaysShowMenuBarSupported = await platform.supportsAutoHideMenuBar();
    let alwaysShowMenuBar = true;

    if (alwaysShowMenuBarSupported) {
      alwaysShowMenuBar = !(await platform.getAutoHideMenuBarEnabled());
    }

    const minimizeToTraySupported = await platform.supportsMinimizeToTray();
    let minimizeToTray = true;

    if (minimizeToTraySupported) {
      minimizeToTray = await platform.getMinimizeToTrayEnabled();
    }

    this.setState({
      autoLaunch,
      autoLaunchSupported,
      warnBeforeExit,
      warnBeforeExitSupported,
      alwaysShowMenuBarSupported,
      alwaysShowMenuBar,
      minimizeToTraySupported,
      minimizeToTray
    });
  }

  renderGroup(settingIds, level = _SettingLevel.SettingLevel.ACCOUNT) {
    return settingIds.map(i => {
      const disabled = !_SettingsStore.default.isEnabled(i);
      return /*#__PURE__*/_react.default.createElement(_SettingsFlag.default, {
        key: i,
        name: i,
        level: level,
        disabled: disabled
      });
    });
  }

  render() {
    let autoLaunchOption = null;

    if (this.state.autoLaunchSupported) {
      autoLaunchOption = /*#__PURE__*/_react.default.createElement(_LabelledToggleSwitch.default, {
        value: this.state.autoLaunch,
        onChange: this.onAutoLaunchChange,
        label: (0, _languageHandler._t)('Start automatically after system login')
      });
    }

    let warnBeforeExitOption = null;

    if (this.state.warnBeforeExitSupported) {
      warnBeforeExitOption = /*#__PURE__*/_react.default.createElement(_LabelledToggleSwitch.default, {
        value: this.state.warnBeforeExit,
        onChange: this.onWarnBeforeExitChange,
        label: (0, _languageHandler._t)('Warn before quitting')
      });
    }

    let autoHideMenuOption = null;

    if (this.state.alwaysShowMenuBarSupported) {
      autoHideMenuOption = /*#__PURE__*/_react.default.createElement(_LabelledToggleSwitch.default, {
        value: this.state.alwaysShowMenuBar,
        onChange: this.onAlwaysShowMenuBarChange,
        label: (0, _languageHandler._t)('Always show the window menu bar')
      });
    }

    let minimizeToTrayOption = null;

    if (this.state.minimizeToTraySupported) {
      minimizeToTrayOption = /*#__PURE__*/_react.default.createElement(_LabelledToggleSwitch.default, {
        value: this.state.minimizeToTray,
        onChange: this.onMinimizeToTrayChange,
        label: (0, _languageHandler._t)('Show tray icon and minimise window to it on close')
      });
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab mx_PreferencesUserSettingsTab"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_heading"
    }, (0, _languageHandler._t)("Preferences")), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_section"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_SettingsTab_subheading"
    }, (0, _languageHandler._t)("Room list")), this.renderGroup(PreferencesUserSettingsTab.ROOM_LIST_SETTINGS)), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_section"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_SettingsTab_subheading"
    }, (0, _languageHandler._t)("Spaces")), this.renderGroup(PreferencesUserSettingsTab.SPACES_SETTINGS, _SettingLevel.SettingLevel.ACCOUNT)), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_section"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_SettingsTab_subheading"
    }, (0, _languageHandler._t)("Communities")), /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Communities have been archived to make way for Spaces but you can convert your " + "communities into Spaces below. Converting will ensure your conversations get the latest " + "features.")), /*#__PURE__*/_react.default.createElement("details", null, /*#__PURE__*/_react.default.createElement("summary", null, (0, _languageHandler._t)("Show my Communities")), /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("If a community isn't shown you may not have permission to convert it.")), /*#__PURE__*/_react.default.createElement(CommunityMigrator, {
      onFinished: this.props.closeSettingsFn
    })), this.renderGroup(PreferencesUserSettingsTab.COMMUNITIES_SETTINGS, _SettingLevel.SettingLevel.DEVICE)), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_section"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_SettingsTab_subheading"
    }, (0, _languageHandler._t)("Keyboard shortcuts")), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      className: "mx_SettingsFlag",
      onClick: KeyboardShortcuts.toggleDialog
    }, (0, _languageHandler._t)("To view all keyboard shortcuts, click here.")), this.renderGroup(PreferencesUserSettingsTab.KEYBINDINGS_SETTINGS)), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_section"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_SettingsTab_subheading"
    }, (0, _languageHandler._t)("Displaying time")), this.renderGroup(PreferencesUserSettingsTab.TIME_SETTINGS)), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_section"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_SettingsTab_subheading"
    }, (0, _languageHandler._t)("Composer")), this.renderGroup(PreferencesUserSettingsTab.COMPOSER_SETTINGS)), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_section"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_SettingsTab_subheading"
    }, (0, _languageHandler._t)("Code blocks")), this.renderGroup(PreferencesUserSettingsTab.CODE_BLOCKS_SETTINGS)), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_section"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_SettingsTab_subheading"
    }, (0, _languageHandler._t)("Images, GIFs and videos")), this.renderGroup(PreferencesUserSettingsTab.IMAGES_AND_VIDEOS_SETTINGS)), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_section"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_SettingsTab_subheading"
    }, (0, _languageHandler._t)("Timeline")), this.renderGroup(PreferencesUserSettingsTab.TIMELINE_SETTINGS)), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_section"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_SettingsTab_subheading"
    }, (0, _languageHandler._t)("General")), this.renderGroup(PreferencesUserSettingsTab.GENERAL_SETTINGS), minimizeToTrayOption, autoHideMenuOption, autoLaunchOption, warnBeforeExitOption, /*#__PURE__*/_react.default.createElement(_Field.default, {
      label: (0, _languageHandler._t)('Autocomplete delay (ms)'),
      type: "number",
      value: this.state.autocompleteDelay,
      onChange: this.onAutocompleteDelayChange
    }), /*#__PURE__*/_react.default.createElement(_Field.default, {
      label: (0, _languageHandler._t)('Read Marker lifetime (ms)'),
      type: "number",
      value: this.state.readMarkerInViewThresholdMs,
      onChange: this.onReadMarkerInViewThresholdMs
    }), /*#__PURE__*/_react.default.createElement(_Field.default, {
      label: (0, _languageHandler._t)('Read Marker off-screen lifetime (ms)'),
      type: "number",
      value: this.state.readMarkerOutOfViewThresholdMs,
      onChange: this.onReadMarkerOutOfViewThresholdMs
    })));
  }

}, (0, _defineProperty2.default)(_class2, "ROOM_LIST_SETTINGS", ['breadcrumbs']), (0, _defineProperty2.default)(_class2, "SPACES_SETTINGS", ["Spaces.allRoomsInHome"]), (0, _defineProperty2.default)(_class2, "COMMUNITIES_SETTINGS", ["showCommunitiesInsteadOfSpaces"]), (0, _defineProperty2.default)(_class2, "KEYBINDINGS_SETTINGS", ['ctrlFForSearch']), (0, _defineProperty2.default)(_class2, "COMPOSER_SETTINGS", ['MessageComposerInput.autoReplaceEmoji', 'MessageComposerInput.suggestEmoji', 'sendTypingNotifications', 'MessageComposerInput.ctrlEnterToSend', 'MessageComposerInput.surroundWith', 'MessageComposerInput.showStickersButton']), (0, _defineProperty2.default)(_class2, "TIME_SETTINGS", ['showTwelveHourTimestamps', 'alwaysShowTimestamps']), (0, _defineProperty2.default)(_class2, "CODE_BLOCKS_SETTINGS", ['enableSyntaxHighlightLanguageDetection', 'expandCodeByDefault', 'showCodeLineNumbers']), (0, _defineProperty2.default)(_class2, "IMAGES_AND_VIDEOS_SETTINGS", ['urlPreviewsEnabled', 'autoplayGifs', 'autoplayVideo', 'showImages']), (0, _defineProperty2.default)(_class2, "TIMELINE_SETTINGS", ['showTypingNotifications', 'showRedactions', 'showReadReceipts', 'showJoinLeaves', 'showDisplaynameChanges', 'showChatEffects', 'showAvatarChanges', 'Pill.shouldShowPillAvatar', 'TextualBody.enableBigEmoji', 'scrollToBottomOnMessageSent']), (0, _defineProperty2.default)(_class2, "GENERAL_SETTINGS", ['TagPanel.enableTagPanel', 'promptBeforeInviteUnknownUsers' // Start automatically after startup (electron-only)
// Autocomplete delay (niche text box)
]), _temp)) || _class);
exports.default = PreferencesUserSettingsTab;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,