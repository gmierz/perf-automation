"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _languageHandler = require("../../../languageHandler");

var _IntegrationManagers = require("../../../integrations/IntegrationManagers");

var _SettingsStore = _interopRequireDefault(require("../../../settings/SettingsStore"));

var _SettingLevel = require("../../../settings/SettingLevel");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _ToggleSwitch = _interopRequireDefault(require("../elements/ToggleSwitch"));

var _logger = require("matrix-js-sdk/src/logger");

var _dec, _class;

let SetIntegrationManager = (_dec = (0, _replaceableComponent.replaceableComponent)("views.settings.SetIntegrationManager"), _dec(_class = class SetIntegrationManager extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "onProvisioningToggled", () => {
      const current = this.state.provisioningEnabled;

      _SettingsStore.default.setValue("integrationProvisioning", null, _SettingLevel.SettingLevel.ACCOUNT, !current).catch(err => {
        _logger.logger.error("Error changing integration manager provisioning");

        _logger.logger.error(err);

        this.setState({
          provisioningEnabled: current
        });
      });

      this.setState({
        provisioningEnabled: !current
      });
    });

    const currentManager = _IntegrationManagers.IntegrationManagers.sharedInstance().getPrimaryManager();

    this.state = {
      currentManager,
      provisioningEnabled: _SettingsStore.default.getValue("integrationProvisioning")
    };
  }

  render() {
    const currentManager = this.state.currentManager;
    let managerName;
    let bodyText;

    if (currentManager) {
      managerName = `(${currentManager.name})`;
      bodyText = (0, _languageHandler._t)("Use an integration manager <b>(%(serverName)s)</b> to manage bots, widgets, " + "and sticker packs.", {
        serverName: currentManager.name
      }, {
        b: sub => /*#__PURE__*/_react.default.createElement("b", null, sub)
      });
    } else {
      bodyText = (0, _languageHandler._t)("Use an integration manager to manage bots, widgets, and sticker packs.");
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SetIntegrationManager"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_heading"
    }, /*#__PURE__*/_react.default.createElement("span", null, (0, _languageHandler._t)("Manage integrations")), /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_SettingsTab_subheading"
    }, managerName), /*#__PURE__*/_react.default.createElement(_ToggleSwitch.default, {
      checked: this.state.provisioningEnabled,
      disabled: false,
      onChange: this.onProvisioningToggled
    })), /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_SettingsTab_subsectionText"
    }, bodyText, /*#__PURE__*/_react.default.createElement("br", null), /*#__PURE__*/_react.default.createElement("br", null), (0, _languageHandler._t)("Integration managers receive configuration data, and can modify widgets, " + "send room invites, and set power levels on your behalf.")));
  }

}) || _class);
exports.default = SetIntegrationManager;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL3NldHRpbmdzL1NldEludGVncmF0aW9uTWFuYWdlci50c3giXSwibmFtZXMiOlsiU2V0SW50ZWdyYXRpb25NYW5hZ2VyIiwiUmVhY3QiLCJDb21wb25lbnQiLCJjb25zdHJ1Y3RvciIsInByb3BzIiwiY3VycmVudCIsInN0YXRlIiwicHJvdmlzaW9uaW5nRW5hYmxlZCIsIlNldHRpbmdzU3RvcmUiLCJzZXRWYWx1ZSIsIlNldHRpbmdMZXZlbCIsIkFDQ09VTlQiLCJjYXRjaCIsImVyciIsImxvZ2dlciIsImVycm9yIiwic2V0U3RhdGUiLCJjdXJyZW50TWFuYWdlciIsIkludGVncmF0aW9uTWFuYWdlcnMiLCJzaGFyZWRJbnN0YW5jZSIsImdldFByaW1hcnlNYW5hZ2VyIiwiZ2V0VmFsdWUiLCJyZW5kZXIiLCJtYW5hZ2VyTmFtZSIsImJvZHlUZXh0IiwibmFtZSIsInNlcnZlck5hbWUiLCJiIiwic3ViIiwib25Qcm92aXNpb25pbmdUb2dnbGVkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQWdCQTs7QUFDQTs7QUFDQTs7QUFFQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQTs7OztJQVlxQkEscUIsV0FEcEIsZ0RBQXFCLHNDQUFyQixDLGdCQUFELE1BQ3FCQSxxQkFEckIsU0FDbURDLGVBQU1DLFNBRHpELENBQ21GO0FBQy9FQyxFQUFBQSxXQUFXLENBQUNDLEtBQUQsRUFBZ0I7QUFDdkIsVUFBTUEsS0FBTjtBQUR1QixpRUFXSyxNQUFZO0FBQ3hDLFlBQU1DLE9BQU8sR0FBRyxLQUFLQyxLQUFMLENBQVdDLG1CQUEzQjs7QUFDQUMsNkJBQWNDLFFBQWQsQ0FBdUIseUJBQXZCLEVBQWtELElBQWxELEVBQXdEQywyQkFBYUMsT0FBckUsRUFBOEUsQ0FBQ04sT0FBL0UsRUFBd0ZPLEtBQXhGLENBQThGQyxHQUFHLElBQUk7QUFDakdDLHVCQUFPQyxLQUFQLENBQWEsaURBQWI7O0FBQ0FELHVCQUFPQyxLQUFQLENBQWFGLEdBQWI7O0FBRUEsYUFBS0csUUFBTCxDQUFjO0FBQUVULFVBQUFBLG1CQUFtQixFQUFFRjtBQUF2QixTQUFkO0FBQ0gsT0FMRDs7QUFNQSxXQUFLVyxRQUFMLENBQWM7QUFBRVQsUUFBQUEsbUJBQW1CLEVBQUUsQ0FBQ0Y7QUFBeEIsT0FBZDtBQUNILEtBcEIwQjs7QUFHdkIsVUFBTVksY0FBYyxHQUFHQyx5Q0FBb0JDLGNBQXBCLEdBQXFDQyxpQkFBckMsRUFBdkI7O0FBRUEsU0FBS2QsS0FBTCxHQUFhO0FBQ1RXLE1BQUFBLGNBRFM7QUFFVFYsTUFBQUEsbUJBQW1CLEVBQUVDLHVCQUFjYSxRQUFkLENBQXVCLHlCQUF2QjtBQUZaLEtBQWI7QUFJSDs7QUFhTUMsRUFBQUEsTUFBTSxHQUFvQjtBQUM3QixVQUFNTCxjQUFjLEdBQUcsS0FBS1gsS0FBTCxDQUFXVyxjQUFsQztBQUNBLFFBQUlNLFdBQUo7QUFDQSxRQUFJQyxRQUFKOztBQUNBLFFBQUlQLGNBQUosRUFBb0I7QUFDaEJNLE1BQUFBLFdBQVcsR0FBSSxJQUFHTixjQUFjLENBQUNRLElBQUssR0FBdEM7QUFDQUQsTUFBQUEsUUFBUSxHQUFHLHlCQUNQLGlGQUNBLG9CQUZPLEVBR1A7QUFBRUUsUUFBQUEsVUFBVSxFQUFFVCxjQUFjLENBQUNRO0FBQTdCLE9BSE8sRUFJUDtBQUFFRSxRQUFBQSxDQUFDLEVBQUVDLEdBQUcsaUJBQUksd0NBQUtBLEdBQUw7QUFBWixPQUpPLENBQVg7QUFNSCxLQVJELE1BUU87QUFDSEosTUFBQUEsUUFBUSxHQUFHLHlCQUFHLHdFQUFILENBQVg7QUFDSDs7QUFFRCx3QkFDSTtBQUFLLE1BQUEsU0FBUyxFQUFDO0FBQWYsb0JBQ0k7QUFBSyxNQUFBLFNBQVMsRUFBQztBQUFmLG9CQUNJLDJDQUFRLHlCQUFHLHFCQUFILENBQVIsQ0FESixlQUVJO0FBQU0sTUFBQSxTQUFTLEVBQUM7QUFBaEIsT0FBOENELFdBQTlDLENBRkosZUFHSSw2QkFBQyxxQkFBRDtBQUNJLE1BQUEsT0FBTyxFQUFFLEtBQUtqQixLQUFMLENBQVdDLG1CQUR4QjtBQUVJLE1BQUEsUUFBUSxFQUFFLEtBRmQ7QUFHSSxNQUFBLFFBQVEsRUFBRSxLQUFLc0I7QUFIbkIsTUFISixDQURKLGVBVUk7QUFBTSxNQUFBLFNBQVMsRUFBQztBQUFoQixPQUNNTCxRQUROLGVBRUksd0NBRkosZUFHSSx3Q0FISixFQUlNLHlCQUNFLDhFQUNBLHlEQUZGLENBSk4sQ0FWSixDQURKO0FBc0JIOztBQTdEOEUsQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5Db3B5cmlnaHQgMjAxOSBUaGUgTWF0cml4Lm9yZyBGb3VuZGF0aW9uIEMuSS5DLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBfdCB9IGZyb20gXCIuLi8uLi8uLi9sYW5ndWFnZUhhbmRsZXJcIjtcbmltcG9ydCB7IEludGVncmF0aW9uTWFuYWdlcnMgfSBmcm9tIFwiLi4vLi4vLi4vaW50ZWdyYXRpb25zL0ludGVncmF0aW9uTWFuYWdlcnNcIjtcbmltcG9ydCB7IEludGVncmF0aW9uTWFuYWdlckluc3RhbmNlIH0gZnJvbSBcIi4uLy4uLy4uL2ludGVncmF0aW9ucy9JbnRlZ3JhdGlvbk1hbmFnZXJJbnN0YW5jZVwiO1xuaW1wb3J0IFNldHRpbmdzU3RvcmUgZnJvbSBcIi4uLy4uLy4uL3NldHRpbmdzL1NldHRpbmdzU3RvcmVcIjtcbmltcG9ydCB7IFNldHRpbmdMZXZlbCB9IGZyb20gXCIuLi8uLi8uLi9zZXR0aW5ncy9TZXR0aW5nTGV2ZWxcIjtcbmltcG9ydCB7IHJlcGxhY2VhYmxlQ29tcG9uZW50IH0gZnJvbSBcIi4uLy4uLy4uL3V0aWxzL3JlcGxhY2VhYmxlQ29tcG9uZW50XCI7XG5pbXBvcnQgVG9nZ2xlU3dpdGNoIGZyb20gXCIuLi9lbGVtZW50cy9Ub2dnbGVTd2l0Y2hcIjtcblxuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSBcIm1hdHJpeC1qcy1zZGsvc3JjL2xvZ2dlclwiO1xuXG5pbnRlcmZhY2UgSVByb3BzIHtcblxufVxuXG5pbnRlcmZhY2UgSVN0YXRlIHtcbiAgICBjdXJyZW50TWFuYWdlcjogSW50ZWdyYXRpb25NYW5hZ2VySW5zdGFuY2U7XG4gICAgcHJvdmlzaW9uaW5nRW5hYmxlZDogYm9vbGVhbjtcbn1cblxuQHJlcGxhY2VhYmxlQ29tcG9uZW50KFwidmlld3Muc2V0dGluZ3MuU2V0SW50ZWdyYXRpb25NYW5hZ2VyXCIpXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZXRJbnRlZ3JhdGlvbk1hbmFnZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8SVByb3BzLCBJU3RhdGU+IHtcbiAgICBjb25zdHJ1Y3Rvcihwcm9wczogSVByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcblxuICAgICAgICBjb25zdCBjdXJyZW50TWFuYWdlciA9IEludGVncmF0aW9uTWFuYWdlcnMuc2hhcmVkSW5zdGFuY2UoKS5nZXRQcmltYXJ5TWFuYWdlcigpO1xuXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBjdXJyZW50TWFuYWdlcixcbiAgICAgICAgICAgIHByb3Zpc2lvbmluZ0VuYWJsZWQ6IFNldHRpbmdzU3RvcmUuZ2V0VmFsdWUoXCJpbnRlZ3JhdGlvblByb3Zpc2lvbmluZ1wiKSxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG9uUHJvdmlzaW9uaW5nVG9nZ2xlZCA9ICgpOiB2b2lkID0+IHtcbiAgICAgICAgY29uc3QgY3VycmVudCA9IHRoaXMuc3RhdGUucHJvdmlzaW9uaW5nRW5hYmxlZDtcbiAgICAgICAgU2V0dGluZ3NTdG9yZS5zZXRWYWx1ZShcImludGVncmF0aW9uUHJvdmlzaW9uaW5nXCIsIG51bGwsIFNldHRpbmdMZXZlbC5BQ0NPVU5ULCAhY3VycmVudCkuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICAgIGxvZ2dlci5lcnJvcihcIkVycm9yIGNoYW5naW5nIGludGVncmF0aW9uIG1hbmFnZXIgcHJvdmlzaW9uaW5nXCIpO1xuICAgICAgICAgICAgbG9nZ2VyLmVycm9yKGVycik7XG5cbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBwcm92aXNpb25pbmdFbmFibGVkOiBjdXJyZW50IH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHByb3Zpc2lvbmluZ0VuYWJsZWQ6ICFjdXJyZW50IH0pO1xuICAgIH07XG5cbiAgICBwdWJsaWMgcmVuZGVyKCk6IFJlYWN0LlJlYWN0Tm9kZSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRNYW5hZ2VyID0gdGhpcy5zdGF0ZS5jdXJyZW50TWFuYWdlcjtcbiAgICAgICAgbGV0IG1hbmFnZXJOYW1lO1xuICAgICAgICBsZXQgYm9keVRleHQ7XG4gICAgICAgIGlmIChjdXJyZW50TWFuYWdlcikge1xuICAgICAgICAgICAgbWFuYWdlck5hbWUgPSBgKCR7Y3VycmVudE1hbmFnZXIubmFtZX0pYDtcbiAgICAgICAgICAgIGJvZHlUZXh0ID0gX3QoXG4gICAgICAgICAgICAgICAgXCJVc2UgYW4gaW50ZWdyYXRpb24gbWFuYWdlciA8Yj4oJShzZXJ2ZXJOYW1lKXMpPC9iPiB0byBtYW5hZ2UgYm90cywgd2lkZ2V0cywgXCIgK1xuICAgICAgICAgICAgICAgIFwiYW5kIHN0aWNrZXIgcGFja3MuXCIsXG4gICAgICAgICAgICAgICAgeyBzZXJ2ZXJOYW1lOiBjdXJyZW50TWFuYWdlci5uYW1lIH0sXG4gICAgICAgICAgICAgICAgeyBiOiBzdWIgPT4gPGI+eyBzdWIgfTwvYj4gfSxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBib2R5VGV4dCA9IF90KFwiVXNlIGFuIGludGVncmF0aW9uIG1hbmFnZXIgdG8gbWFuYWdlIGJvdHMsIHdpZGdldHMsIGFuZCBzdGlja2VyIHBhY2tzLlwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nbXhfU2V0SW50ZWdyYXRpb25NYW5hZ2VyJz5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm14X1NldHRpbmdzVGFiX2hlYWRpbmdcIj5cbiAgICAgICAgICAgICAgICAgICAgPHNwYW4+eyBfdChcIk1hbmFnZSBpbnRlZ3JhdGlvbnNcIikgfTwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwibXhfU2V0dGluZ3NUYWJfc3ViaGVhZGluZ1wiPnsgbWFuYWdlck5hbWUgfTwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgPFRvZ2dsZVN3aXRjaFxuICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tlZD17dGhpcy5zdGF0ZS5wcm92aXNpb25pbmdFbmFibGVkfVxuICAgICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ9e2ZhbHNlfVxuICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMub25Qcm92aXNpb25pbmdUb2dnbGVkfVxuICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cIm14X1NldHRpbmdzVGFiX3N1YnNlY3Rpb25UZXh0XCI+XG4gICAgICAgICAgICAgICAgICAgIHsgYm9keVRleHQgfVxuICAgICAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgICAgIHsgX3QoXG4gICAgICAgICAgICAgICAgICAgICAgICBcIkludGVncmF0aW9uIG1hbmFnZXJzIHJlY2VpdmUgY29uZmlndXJhdGlvbiBkYXRhLCBhbmQgY2FuIG1vZGlmeSB3aWRnZXRzLCBcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICBcInNlbmQgcm9vbSBpbnZpdGVzLCBhbmQgc2V0IHBvd2VyIGxldmVscyBvbiB5b3VyIGJlaGFsZi5cIixcbiAgICAgICAgICAgICAgICAgICAgKSB9XG4gICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgfVxufVxuIl19