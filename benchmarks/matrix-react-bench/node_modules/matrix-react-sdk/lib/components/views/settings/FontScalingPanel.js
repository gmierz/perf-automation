"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _EventTilePreview = _interopRequireDefault(require("../elements/EventTilePreview"));

var _Field = _interopRequireDefault(require("../elements/Field"));

var _react = _interopRequireDefault(require("react"));

var _SettingsFlag = _interopRequireDefault(require("../elements/SettingsFlag"));

var _SettingsStore = _interopRequireDefault(require("../../../settings/SettingsStore"));

var _Slider = _interopRequireDefault(require("../elements/Slider"));

var _FontWatcher = require("../../../settings/watchers/FontWatcher");

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _SettingLevel = require("../../../settings/SettingLevel");

var _languageHandler = require("../../../languageHandler");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _dec, _class;

let FontScalingPanel = (_dec = (0, _replaceableComponent.replaceableComponent)("views.settings.tabs.user.FontScalingPanel"), _dec(_class = class FontScalingPanel extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "MESSAGE_PREVIEW_TEXT", (0, _languageHandler._t)("Hey you. You're the best!"));
    (0, _defineProperty2.default)(this, "unmounted", false);
    (0, _defineProperty2.default)(this, "onFontSizeChanged", size => {
      this.setState({
        fontSize: size.toString()
      });

      _SettingsStore.default.setValue("baseFontSize", null, _SettingLevel.SettingLevel.DEVICE, size - _FontWatcher.FontWatcher.SIZE_DIFF);
    });
    (0, _defineProperty2.default)(this, "onValidateFontSize", async ({
      value
    }) => {
      const parsedSize = parseFloat(value);
      const min = _FontWatcher.FontWatcher.MIN_SIZE + _FontWatcher.FontWatcher.SIZE_DIFF;
      const max = _FontWatcher.FontWatcher.MAX_SIZE + _FontWatcher.FontWatcher.SIZE_DIFF;

      if (isNaN(parsedSize)) {
        return {
          valid: false,
          feedback: (0, _languageHandler._t)("Size must be a number")
        };
      }

      if (!(min <= parsedSize && parsedSize <= max)) {
        return {
          valid: false,
          feedback: (0, _languageHandler._t)('Custom font size can only be between %(min)s pt and %(max)s pt', {
            min,
            max
          })
        };
      }

      _SettingsStore.default.setValue("baseFontSize", null, _SettingLevel.SettingLevel.DEVICE, parseInt(value, 10) - _FontWatcher.FontWatcher.SIZE_DIFF);

      return {
        valid: true,
        feedback: (0, _languageHandler._t)('Use between %(min)s pt and %(max)s pt', {
          min,
          max
        })
      };
    });
    this.state = {
      fontSize: (_SettingsStore.default.getValue("baseFontSize", null) + _FontWatcher.FontWatcher.SIZE_DIFF).toString(),
      useCustomFontSize: _SettingsStore.default.getValue("useCustomFontSize"),
      layout: _SettingsStore.default.getValue("layout"),
      userId: null,
      displayName: null,
      avatarUrl: null
    };
  }

  async componentDidMount() {
    // Fetch the current user profile for the message preview
    const client = _MatrixClientPeg.MatrixClientPeg.get();

    const userId = client.getUserId();
    const profileInfo = await client.getProfileInfo(userId);
    if (this.unmounted) return;
    this.setState({
      userId,
      displayName: profileInfo.displayname,
      avatarUrl: profileInfo.avatar_url
    });
  }

  componentWillUnmount() {
    this.unmounted = true;
  }

  render() {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_section mx_FontScalingPanel"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_SettingsTab_subheading"
    }, (0, _languageHandler._t)("Font size")), /*#__PURE__*/_react.default.createElement(_EventTilePreview.default, {
      className: "mx_FontScalingPanel_fontSlider_preview",
      message: this.MESSAGE_PREVIEW_TEXT,
      layout: this.state.layout,
      userId: this.state.userId,
      displayName: this.state.displayName,
      avatarUrl: this.state.avatarUrl
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_FontScalingPanel_fontSlider"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_FontScalingPanel_fontSlider_smallText"
    }, "Aa"), /*#__PURE__*/_react.default.createElement(_Slider.default, {
      values: [13, 14, 15, 16, 18],
      value: parseInt(this.state.fontSize, 10),
      onSelectionChange: this.onFontSizeChanged,
      displayFunc: _ => "",
      disabled: this.state.useCustomFontSize
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_FontScalingPanel_fontSlider_largeText"
    }, "Aa")), /*#__PURE__*/_react.default.createElement(_SettingsFlag.default, {
      name: "useCustomFontSize",
      level: _SettingLevel.SettingLevel.ACCOUNT,
      onChange: checked => this.setState({
        useCustomFontSize: checked
      }),
      useCheckbox: true
    }), /*#__PURE__*/_react.default.createElement(_Field.default, {
      type: "number",
      label: (0, _languageHandler._t)("Font size"),
      autoComplete: "off",
      placeholder: this.state.fontSize.toString(),
      value: this.state.fontSize.toString(),
      id: "font_size_field",
      onValidate: this.onValidateFontSize,
      onChange: value => this.setState({
        fontSize: value.target.value
      }),
      disabled: !this.state.useCustomFontSize,
      className: "mx_FontScalingPanel_customFontSizeField"
    }));
  }

}) || _class);
exports.default = FontScalingPanel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,