"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _languageHandler = require("../../../../../languageHandler");

var _SdkConfig = _interopRequireDefault(require("../../../../../SdkConfig"));

var _MediaDeviceHandler = _interopRequireWildcard(require("../../../../../MediaDeviceHandler"));

var _Field = _interopRequireDefault(require("../../../elements/Field"));

var _AccessibleButton = _interopRequireDefault(require("../../../elements/AccessibleButton"));

var _MatrixClientPeg = require("../../../../../MatrixClientPeg");

var _Modal = _interopRequireDefault(require("../../../../../Modal"));

var _SettingLevel = require("../../../../../settings/SettingLevel");

var _replaceableComponent = require("../../../../../utils/replaceableComponent");

var _SettingsFlag = _interopRequireDefault(require("../../../elements/SettingsFlag"));

var _ErrorDialog = _interopRequireDefault(require("../../../dialogs/ErrorDialog"));

var _logger = require("matrix-js-sdk/src/logger");

var _dec, _class;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const getDefaultDevice = devices => {
  // Note we're looking for a device with deviceId 'default' but adding a device
  // with deviceId == the empty string: this is because Chrome gives us a device
  // with deviceId 'default', so we're looking for this, not the one we are adding.
  if (!devices.some(i => i.deviceId === 'default')) {
    devices.unshift({
      deviceId: '',
      label: (0, _languageHandler._t)('Default Device')
    });
    return '';
  } else {
    return 'default';
  }
};

let VoiceUserSettingsTab = (_dec = (0, _replaceableComponent.replaceableComponent)("views.settings.tabs.user.VoiceUserSettingsTab"), _dec(_class = class VoiceUserSettingsTab extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "refreshMediaDevices", async stream => {
      this.setState({
        mediaDevices: await _MediaDeviceHandler.default.getDevices(),
        [_MediaDeviceHandler.MediaDeviceKindEnum.AudioOutput]: _MediaDeviceHandler.default.getAudioOutput(),
        [_MediaDeviceHandler.MediaDeviceKindEnum.AudioInput]: _MediaDeviceHandler.default.getAudioInput(),
        [_MediaDeviceHandler.MediaDeviceKindEnum.VideoInput]: _MediaDeviceHandler.default.getVideoInput()
      });

      if (stream) {
        // kill stream (after we've enumerated the devices, otherwise we'd get empty labels again)
        // so that we don't leave it lingering around with webcam enabled etc
        // as here we called gUM to ask user for permission to their device names only
        stream.getTracks().forEach(track => track.stop());
      }
    });
    (0, _defineProperty2.default)(this, "requestMediaPermissions", async () => {
      let constraints;
      let stream;
      let error;

      try {
        constraints = {
          video: true,
          audio: true
        };
        stream = await navigator.mediaDevices.getUserMedia(constraints);
      } catch (err) {
        // user likely doesn't have a webcam,
        // we should still allow to select a microphone
        if (err.name === "NotFoundError") {
          constraints = {
            audio: true
          };

          try {
            stream = await navigator.mediaDevices.getUserMedia(constraints);
          } catch (err) {
            error = err;
          }
        } else {
          error = err;
        }
      }

      if (error) {
        _logger.logger.log("Failed to list userMedia devices", error);

        const brand = _SdkConfig.default.get().brand;

        _Modal.default.createTrackedDialog('No media permissions', '', _ErrorDialog.default, {
          title: (0, _languageHandler._t)('No media permissions'),
          description: (0, _languageHandler._t)('You may need to manually permit %(brand)s to access your microphone/webcam', {
            brand
          })
        });
      } else {
        this.refreshMediaDevices(stream);
      }
    });
    (0, _defineProperty2.default)(this, "setDevice", (deviceId, kind) => {
      _MediaDeviceHandler.default.instance.setDevice(deviceId, kind);

      this.setState({
        [kind]: deviceId
      });
    });
    (0, _defineProperty2.default)(this, "changeWebRtcMethod", p2p => {
      _MatrixClientPeg.MatrixClientPeg.get().setForceTURN(!p2p);
    });
    (0, _defineProperty2.default)(this, "changeFallbackICEServerAllowed", allow => {
      _MatrixClientPeg.MatrixClientPeg.get().setFallbackICEServerAllowed(allow);
    });
    this.state = {
      mediaDevices: null,
      [_MediaDeviceHandler.MediaDeviceKindEnum.AudioOutput]: null,
      [_MediaDeviceHandler.MediaDeviceKindEnum.AudioInput]: null,
      [_MediaDeviceHandler.MediaDeviceKindEnum.VideoInput]: null
    };
  }

  async componentDidMount() {
    const canSeeDeviceLabels = await _MediaDeviceHandler.default.hasAnyLabeledDevices();

    if (canSeeDeviceLabels) {
      this.refreshMediaDevices();
    }
  }

  renderDeviceOptions(devices, category) {
    return devices.map(d => {
      return /*#__PURE__*/_react.default.createElement("option", {
        key: `${category}-${d.deviceId}`,
        value: d.deviceId
      }, d.label);
    });
  }

  renderDropdown(kind, label) {
    const devices = this.state.mediaDevices[kind].slice(0);
    if (devices.length === 0) return null;
    const defaultDevice = getDefaultDevice(devices);
    return /*#__PURE__*/_react.default.createElement(_Field.default, {
      element: "select",
      label: label,
      value: this.state[kind] || defaultDevice,
      onChange: e => this.setDevice(e.target.value, kind)
    }, this.renderDeviceOptions(devices, kind));
  }

  render() {
    let requestButton = null;
    let speakerDropdown = null;
    let microphoneDropdown = null;
    let webcamDropdown = null;

    if (!this.state.mediaDevices) {
      requestButton = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_VoiceUserSettingsTab_missingMediaPermissions"
      }, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Missing media permissions, click the button below to request.")), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        onClick: this.requestMediaPermissions,
        kind: "primary"
      }, (0, _languageHandler._t)("Request media permissions")));
    } else if (this.state.mediaDevices) {
      speakerDropdown = this.renderDropdown(_MediaDeviceHandler.MediaDeviceKindEnum.AudioOutput, (0, _languageHandler._t)("Audio Output")) || /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)('No Audio Outputs detected'));
      microphoneDropdown = this.renderDropdown(_MediaDeviceHandler.MediaDeviceKindEnum.AudioInput, (0, _languageHandler._t)("Microphone")) || /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)('No Microphones detected'));
      webcamDropdown = this.renderDropdown(_MediaDeviceHandler.MediaDeviceKindEnum.VideoInput, (0, _languageHandler._t)("Camera")) || /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)('No Webcams detected'));
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab mx_VoiceUserSettingsTab"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_heading"
    }, (0, _languageHandler._t)("Voice & Video")), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_section"
    }, requestButton, speakerDropdown, microphoneDropdown, webcamDropdown, /*#__PURE__*/_react.default.createElement(_SettingsFlag.default, {
      name: "VideoView.flipVideoHorizontally",
      level: _SettingLevel.SettingLevel.ACCOUNT
    }), /*#__PURE__*/_react.default.createElement(_SettingsFlag.default, {
      name: "webRtcAllowPeerToPeer",
      level: _SettingLevel.SettingLevel.DEVICE,
      onChange: this.changeWebRtcMethod
    }), /*#__PURE__*/_react.default.createElement(_SettingsFlag.default, {
      name: "fallbackICEServerAllowed",
      level: _SettingLevel.SettingLevel.DEVICE,
      onChange: this.changeFallbackICEServerAllowed
    })));
  }

}) || _class);
exports.default = VoiceUserSettingsTab;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,