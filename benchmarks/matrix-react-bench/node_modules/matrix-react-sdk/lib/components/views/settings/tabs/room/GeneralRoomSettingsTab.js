"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _languageHandler = require("../../../../../languageHandler");

var _RoomProfileSettings = _interopRequireDefault(require("../../../room_settings/RoomProfileSettings"));

var _AccessibleButton = _interopRequireDefault(require("../../../elements/AccessibleButton"));

var _dispatcher = _interopRequireDefault(require("../../../../../dispatcher/dispatcher"));

var _MatrixClientContext = _interopRequireDefault(require("../../../../../contexts/MatrixClientContext"));

var _SettingsStore = _interopRequireDefault(require("../../../../../settings/SettingsStore"));

var _UIFeature = require("../../../../../settings/UIFeature");

var _replaceableComponent = require("../../../../../utils/replaceableComponent");

var _UrlPreviewSettings = _interopRequireDefault(require("../../../room_settings/UrlPreviewSettings"));

var _RelatedGroupSettings = _interopRequireDefault(require("../../../room_settings/RelatedGroupSettings"));

var _AliasSettings = _interopRequireDefault(require("../../../room_settings/AliasSettings"));

var _dec, _class, _class2, _temp;

let GeneralRoomSettingsTab = (_dec = (0, _replaceableComponent.replaceableComponent)("views.settings.tabs.room.GeneralRoomSettingsTab"), _dec(_class = (_temp = _class2 = class GeneralRoomSettingsTab extends _react.default.Component {
  constructor(props, context) {
    super(props, context);
    (0, _defineProperty2.default)(this, "context", void 0);
    (0, _defineProperty2.default)(this, "onLeaveClick", () => {
      _dispatcher.default.dispatch({
        action: 'leave_room',
        room_id: this.props.roomId
      });
    });
    this.state = {
      isRoomPublished: false // loaded async

    };
  }

  render() {
    const client = this.context;
    const room = client.getRoom(this.props.roomId);
    const canSetAliases = true; // Previously, we arbitrarily only allowed admins to do this

    const canSetCanonical = room.currentState.mayClientSendStateEvent("m.room.canonical_alias", client);
    const canonicalAliasEv = room.currentState.getStateEvents("m.room.canonical_alias", '');
    const canChangeGroups = room.currentState.mayClientSendStateEvent("m.room.related_groups", client);
    const groupsEvent = room.currentState.getStateEvents("m.room.related_groups", "");

    let urlPreviewSettings = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_SettingsTab_subheading"
    }, (0, _languageHandler._t)("URL Previews")), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_section"
    }, /*#__PURE__*/_react.default.createElement(_UrlPreviewSettings.default, {
      room: room
    })));

    if (!_SettingsStore.default.getValue(_UIFeature.UIFeature.URLPreviews)) {
      urlPreviewSettings = null;
    }

    let flairSection;

    if (_SettingsStore.default.getValue(_UIFeature.UIFeature.Flair)) {
      flairSection = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("span", {
        className: "mx_SettingsTab_subheading"
      }, (0, _languageHandler._t)("Flair")), /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_SettingsTab_section mx_SettingsTab_subsectionText"
      }, /*#__PURE__*/_react.default.createElement(_RelatedGroupSettings.default, {
        roomId: room.roomId,
        canSetRelatedGroups: canChangeGroups,
        relatedGroupsEvent: groupsEvent
      })));
    }

    let leaveSection;

    if (room.getMyMembership() === "join") {
      leaveSection = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("span", {
        className: "mx_SettingsTab_subheading"
      }, (0, _languageHandler._t)("Leave room")), /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_SettingsTab_section"
      }, /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        kind: "danger",
        onClick: this.onLeaveClick
      }, (0, _languageHandler._t)('Leave room'))));
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab mx_GeneralRoomSettingsTab"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_heading"
    }, (0, _languageHandler._t)("General")), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_section mx_GeneralRoomSettingsTab_profileSection"
    }, /*#__PURE__*/_react.default.createElement(_RoomProfileSettings.default, {
      roomId: this.props.roomId
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_heading"
    }, (0, _languageHandler._t)("Room Addresses")), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_section mx_SettingsTab_subsectionText"
    }, /*#__PURE__*/_react.default.createElement(_AliasSettings.default, {
      roomId: this.props.roomId,
      canSetCanonicalAlias: canSetCanonical,
      canSetAliases: canSetAliases,
      canonicalAliasEvent: canonicalAliasEv
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_heading"
    }, (0, _languageHandler._t)("Other")), flairSection, urlPreviewSettings, leaveSection);
  }

}, (0, _defineProperty2.default)(_class2, "contextType", _MatrixClientContext.default), _temp)) || _class);
exports.default = GeneralRoomSettingsTab;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,