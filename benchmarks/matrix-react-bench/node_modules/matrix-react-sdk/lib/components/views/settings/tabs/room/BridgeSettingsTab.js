"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _languageHandler = require("../../../../../languageHandler");

var _MatrixClientPeg = require("../../../../../MatrixClientPeg");

var _BridgeTile = _interopRequireDefault(require("../../BridgeTile"));

var _replaceableComponent = require("../../../../../utils/replaceableComponent");

var _dec, _class;

const BRIDGE_EVENT_TYPES = ["uk.half-shot.bridge" // m.bridge
];
const BRIDGES_LINK = "https://matrix.org/bridges/";
let BridgeSettingsTab = (_dec = (0, _replaceableComponent.replaceableComponent)("views.settings.tabs.room.BridgeSettingsTab"), _dec(_class = class BridgeSettingsTab extends _react.default.Component {
  renderBridgeCard(event, room) {
    const content = event.getContent();

    if (!content || !content.channel || !content.protocol) {
      return null;
    }

    return /*#__PURE__*/_react.default.createElement(_BridgeTile.default, {
      key: event.getId(),
      room: room,
      ev: event
    });
  }

  static getBridgeStateEvents(roomId) {
    const client = _MatrixClientPeg.MatrixClientPeg.get();

    const roomState = client.getRoom(roomId).currentState;
    return BRIDGE_EVENT_TYPES.map(typeName => roomState.getStateEvents(typeName)).flat(1);
  }

  render() {
    // This settings tab will only be invoked if the following function returns more
    // than 0 events, so no validation is needed at this stage.
    const bridgeEvents = BridgeSettingsTab.getBridgeStateEvents(this.props.roomId);

    const client = _MatrixClientPeg.MatrixClientPeg.get();

    const room = client.getRoom(this.props.roomId);
    let content;

    if (bridgeEvents.length > 0) {
      content = /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("This room is bridging messages to the following platforms. " + "<a>Learn more.</a>", {}, {
        // TODO: We don't have this link yet: this will prevent the translators
        // having to re-translate the string when we do.
        a: sub => /*#__PURE__*/_react.default.createElement("a", {
          href: BRIDGES_LINK,
          target: "_blank",
          rel: "noreferrer noopener"
        }, sub)
      })), /*#__PURE__*/_react.default.createElement("ul", {
        className: "mx_RoomSettingsDialog_BridgeList"
      }, bridgeEvents.map(event => this.renderBridgeCard(event, room))));
    } else {
      content = /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("This room isn't bridging messages to any platforms. " + "<a>Learn more.</a>", {}, {
        // TODO: We don't have this link yet: this will prevent the translators
        // having to re-translate the string when we do.
        a: sub => /*#__PURE__*/_react.default.createElement("a", {
          href: BRIDGES_LINK,
          target: "_blank",
          rel: "noreferrer noopener"
        }, sub)
      }));
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_heading"
    }, (0, _languageHandler._t)("Bridges")), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_section mx_SettingsTab_subsectionText"
    }, content));
  }

}) || _class);
exports.default = BridgeSettingsTab;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,