"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _languageHandler = require("../../../languageHandler");

var _Pill = _interopRequireDefault(require("../elements/Pill"));

var _Permalinks = require("../../../utils/permalinks/Permalinks");

var _BaseAvatar = _interopRequireDefault(require("../avatars/BaseAvatar"));

var _SettingsStore = _interopRequireDefault(require("../../../settings/SettingsStore"));

var _HtmlUtils = require("../../../HtmlUtils");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _Media = require("../../../customisations/Media");

var _logger = require("matrix-js-sdk/src/logger");

var _dec, _class, _class2, _temp;

let BridgeTile = (_dec = (0, _replaceableComponent.replaceableComponent)("views.settings.BridgeTile"), _dec(_class = (_temp = _class2 = class BridgeTile extends _react.default.PureComponent {
  render() {
    var _content$channel, _content$protocol;

    const content = this.props.ev.getContent(); // Validate

    if (!((_content$channel = content.channel) !== null && _content$channel !== void 0 && _content$channel.id) || !((_content$protocol = content.protocol) !== null && _content$protocol !== void 0 && _content$protocol.id)) {
      _logger.logger.warn(`Bridge info event ${this.props.ev.getId()} has missing content. Tile will not render`);

      return null;
    }

    if (!content.bridgebot) {
      // Bridgebot was not required previously, so in order to not break rooms we are allowing
      // the sender to be used in place. When the proposal is merged, this should be removed.
      _logger.logger.warn(`Bridge info event ${this.props.ev.getId()} does not provide a 'bridgebot' key which` + "is deprecated behaviour. Using sender for now.");

      content.bridgebot = this.props.ev.getSender();
    }

    const {
      channel,
      network,
      protocol
    } = content;
    const protocolName = protocol.displayname || protocol.id;
    const channelName = channel.displayname || channel.id;
    let creator = null;

    if (content.creator) {
      creator = /*#__PURE__*/_react.default.createElement("li", null, (0, _languageHandler._t)("This bridge was provisioned by <user />.", {}, {
        user: () => /*#__PURE__*/_react.default.createElement(_Pill.default, {
          type: _Pill.default.TYPE_USER_MENTION,
          room: this.props.room,
          url: (0, _Permalinks.makeUserPermalink)(content.creator),
          shouldShowPillAvatar: _SettingsStore.default.getValue("Pill.shouldShowPillAvatar")
        })
      }));
    }

    const bot = /*#__PURE__*/_react.default.createElement("li", null, (0, _languageHandler._t)("This bridge is managed by <user />.", {}, {
      user: () => /*#__PURE__*/_react.default.createElement(_Pill.default, {
        type: _Pill.default.TYPE_USER_MENTION,
        room: this.props.room,
        url: (0, _Permalinks.makeUserPermalink)(content.bridgebot),
        shouldShowPillAvatar: _SettingsStore.default.getValue("Pill.shouldShowPillAvatar")
      })
    }));

    let networkIcon;

    if (protocol.avatar_url) {
      const avatarUrl = (0, _Media.mediaFromMxc)(protocol.avatar_url).getSquareThumbnailHttp(64);
      networkIcon = /*#__PURE__*/_react.default.createElement(_BaseAvatar.default, {
        className: "protocol-icon",
        width: 48,
        height: 48,
        resizeMethod: "crop",
        name: protocolName,
        idName: protocolName,
        url: avatarUrl
      });
    } else {
      networkIcon = /*#__PURE__*/_react.default.createElement("div", {
        className: "noProtocolIcon"
      });
    }

    let networkItem = null;

    if (network) {
      const networkName = network.displayname || network.id;

      let networkLink = /*#__PURE__*/_react.default.createElement("span", null, networkName);

      if (typeof network.external_url === "string" && (0, _HtmlUtils.isUrlPermitted)(network.external_url)) {
        networkLink = /*#__PURE__*/_react.default.createElement("a", {
          href: network.external_url,
          target: "_blank",
          rel: "noreferrer noopener"
        }, networkName);
      }

      networkItem = (0, _languageHandler._t)("Workspace: <networkLink/>", {}, {
        networkLink: () => networkLink
      });
    }

    let channelLink = /*#__PURE__*/_react.default.createElement("span", null, channelName);

    if (typeof channel.external_url === "string" && (0, _HtmlUtils.isUrlPermitted)(channel.external_url)) {
      channelLink = /*#__PURE__*/_react.default.createElement("a", {
        href: channel.external_url,
        target: "_blank",
        rel: "noreferrer noopener"
      }, channelName);
    }

    const id = this.props.ev.getId();
    return /*#__PURE__*/_react.default.createElement("li", {
      key: id
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "column-icon"
    }, networkIcon), /*#__PURE__*/_react.default.createElement("div", {
      className: "column-data"
    }, /*#__PURE__*/_react.default.createElement("h3", null, protocolName), /*#__PURE__*/_react.default.createElement("p", {
      className: "workspace-channel-details"
    }, networkItem, /*#__PURE__*/_react.default.createElement("span", {
      className: "channel"
    }, (0, _languageHandler._t)("Channel: <channelLink/>", {}, {
      channelLink: () => channelLink
    }))), /*#__PURE__*/_react.default.createElement("ul", {
      className: "metadata"
    }, creator, " ", bot)));
  }

}, (0, _defineProperty2.default)(_class2, "propTypes", {
  ev: _propTypes.default.object.isRequired,
  room: _propTypes.default.object.isRequired
}), _temp)) || _class);
exports.default = BridgeTile;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,