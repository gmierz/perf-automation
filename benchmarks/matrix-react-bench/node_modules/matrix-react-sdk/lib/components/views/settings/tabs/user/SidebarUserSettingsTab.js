"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.onMetaSpaceChangeFactory = exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _languageHandler = require("../../../../../languageHandler");

var _SettingsStore = _interopRequireDefault(require("../../../../../settings/SettingsStore"));

var _SettingLevel = require("../../../../../settings/SettingLevel");

var _StyledCheckbox = _interopRequireDefault(require("../../../elements/StyledCheckbox"));

var _useSettings = require("../../../../../hooks/useSettings");

var _spaces = require("../../../../../stores/spaces");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const onMetaSpaceChangeFactory = metaSpace => e => {
  const currentValue = _SettingsStore.default.getValue("Spaces.enabledMetaSpaces");

  _SettingsStore.default.setValue("Spaces.enabledMetaSpaces", null, _SettingLevel.SettingLevel.ACCOUNT, _objectSpread(_objectSpread({}, currentValue), {}, {
    [metaSpace]: e.target.checked
  }));
};

exports.onMetaSpaceChangeFactory = onMetaSpaceChangeFactory;

const SidebarUserSettingsTab = () => {
  const {
    [_spaces.MetaSpace.Home]: homeEnabled,
    [_spaces.MetaSpace.Favourites]: favouritesEnabled,
    [_spaces.MetaSpace.People]: peopleEnabled,
    [_spaces.MetaSpace.Orphans]: orphansEnabled
  } = (0, _useSettings.useSettingValue)("Spaces.enabledMetaSpaces");
  const allRoomsInHome = (0, _useSettings.useSettingValue)("Spaces.allRoomsInHome");
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_SettingsTab mx_SidebarUserSettingsTab"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_SettingsTab_heading"
  }, (0, _languageHandler._t)("Sidebar")), /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_SettingsTab_section"
  }, /*#__PURE__*/_react.default.createElement("span", {
    className: "mx_SettingsTab_subheading"
  }, (0, _languageHandler._t)("Spaces")), /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_SettingsTab_subsectionText"
  }, (0, _languageHandler._t)("Spaces are ways to group rooms and people.")), /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_SidebarUserSettingsTab_subheading"
  }, (0, _languageHandler._t)("Spaces to show")), /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_SettingsTab_subsectionText"
  }, (0, _languageHandler._t)("Along with the spaces you're in, you can use some pre-built ones too.")), /*#__PURE__*/_react.default.createElement(_StyledCheckbox.default, {
    checked: !!homeEnabled,
    onChange: onMetaSpaceChangeFactory(_spaces.MetaSpace.Home),
    className: "mx_SidebarUserSettingsTab_homeCheckbox"
  }, (0, _languageHandler._t)("Home")), /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_SidebarUserSettingsTab_checkboxMicrocopy"
  }, (0, _languageHandler._t)("Home is useful for getting an overview of everything.")), /*#__PURE__*/_react.default.createElement(_StyledCheckbox.default, {
    checked: allRoomsInHome,
    disabled: !homeEnabled,
    onChange: e => {
      _SettingsStore.default.setValue("Spaces.allRoomsInHome", null, _SettingLevel.SettingLevel.ACCOUNT, e.target.checked);
    },
    className: "mx_SidebarUserSettingsTab_homeAllRoomsCheckbox"
  }, (0, _languageHandler._t)("Show all rooms")), /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_SidebarUserSettingsTab_checkboxMicrocopy"
  }, (0, _languageHandler._t)("Show all your rooms in Home, even if they're in a space.")), /*#__PURE__*/_react.default.createElement(_StyledCheckbox.default, {
    checked: !!favouritesEnabled,
    onChange: onMetaSpaceChangeFactory(_spaces.MetaSpace.Favourites),
    className: "mx_SidebarUserSettingsTab_favouritesCheckbox"
  }, (0, _languageHandler._t)("Favourites")), /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_SidebarUserSettingsTab_checkboxMicrocopy"
  }, (0, _languageHandler._t)("Automatically group all your favourite rooms and people together in one place.")), /*#__PURE__*/_react.default.createElement(_StyledCheckbox.default, {
    checked: !!peopleEnabled,
    onChange: onMetaSpaceChangeFactory(_spaces.MetaSpace.People),
    className: "mx_SidebarUserSettingsTab_peopleCheckbox"
  }, (0, _languageHandler._t)("People")), /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_SidebarUserSettingsTab_checkboxMicrocopy"
  }, (0, _languageHandler._t)("Automatically group all your people together in one place.")), /*#__PURE__*/_react.default.createElement(_StyledCheckbox.default, {
    checked: !!orphansEnabled,
    onChange: onMetaSpaceChangeFactory(_spaces.MetaSpace.Orphans),
    className: "mx_SidebarUserSettingsTab_orphansCheckbox"
  }, (0, _languageHandler._t)("Rooms outside of a space")), /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_SidebarUserSettingsTab_checkboxMicrocopy"
  }, (0, _languageHandler._t)("Automatically group all your rooms that aren't part of a space in one place."))));
};

var _default = SidebarUserSettingsTab;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,