"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _languageHandler = require("../../../languageHandler");

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _Keyboard = require("../../../Keyboard");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _Spinner = _interopRequireDefault(require("../elements/Spinner"));

var _dec, _class, _class2, _temp;

let IntegrationManager = (_dec = (0, _replaceableComponent.replaceableComponent)("views.settings.IntegrationManager"), _dec(_class = (_temp = _class2 = class IntegrationManager extends _react.default.Component {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "dispatcherRef", void 0);
    (0, _defineProperty2.default)(this, "state", {
      errored: false
    });
    (0, _defineProperty2.default)(this, "onKeyDown", ev => {
      if (ev.key === _Keyboard.Key.ESCAPE) {
        ev.stopPropagation();
        ev.preventDefault();
        this.props.onFinished();
      }
    });
    (0, _defineProperty2.default)(this, "onAction", payload => {
      if (payload.action === 'close_scalar') {
        this.props.onFinished();
      }
    });
    (0, _defineProperty2.default)(this, "onError", () => {
      this.setState({
        errored: true
      });
    });
  }

  componentDidMount() {
    this.dispatcherRef = _dispatcher.default.register(this.onAction);
    document.addEventListener("keydown", this.onKeyDown);
  }

  componentWillUnmount() {
    _dispatcher.default.unregister(this.dispatcherRef);

    document.removeEventListener("keydown", this.onKeyDown);
  }

  render() {
    if (this.props.loading) {
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_IntegrationManager_loading"
      }, /*#__PURE__*/_react.default.createElement("h3", null, (0, _languageHandler._t)("Connecting to integration manager...")), /*#__PURE__*/_react.default.createElement(_Spinner.default, null));
    }

    if (!this.props.connected || this.state.errored) {
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_IntegrationManager_error"
      }, /*#__PURE__*/_react.default.createElement("h3", null, (0, _languageHandler._t)("Cannot connect to integration manager")), /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("The integration manager is offline or it cannot reach your homeserver.")));
    }

    return /*#__PURE__*/_react.default.createElement("iframe", {
      src: this.props.url,
      onError: this.onError
    });
  }

}, (0, _defineProperty2.default)(_class2, "defaultProps", {
  connected: true,
  loading: false
}), _temp)) || _class);
exports.default = IntegrationManager;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL3NldHRpbmdzL0ludGVncmF0aW9uTWFuYWdlci50c3giXSwibmFtZXMiOlsiSW50ZWdyYXRpb25NYW5hZ2VyIiwiUmVhY3QiLCJDb21wb25lbnQiLCJlcnJvcmVkIiwiZXYiLCJrZXkiLCJLZXkiLCJFU0NBUEUiLCJzdG9wUHJvcGFnYXRpb24iLCJwcmV2ZW50RGVmYXVsdCIsInByb3BzIiwib25GaW5pc2hlZCIsInBheWxvYWQiLCJhY3Rpb24iLCJzZXRTdGF0ZSIsImNvbXBvbmVudERpZE1vdW50IiwiZGlzcGF0Y2hlclJlZiIsImRpcyIsInJlZ2lzdGVyIiwib25BY3Rpb24iLCJkb2N1bWVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJvbktleURvd24iLCJjb21wb25lbnRXaWxsVW5tb3VudCIsInVucmVnaXN0ZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicmVuZGVyIiwibG9hZGluZyIsImNvbm5lY3RlZCIsInN0YXRlIiwidXJsIiwib25FcnJvciJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFnQkE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRUE7Ozs7SUFxQnFCQSxrQixXQURwQixnREFBcUIsbUNBQXJCLEMsbUNBQUQsTUFDcUJBLGtCQURyQixTQUNnREMsZUFBTUMsU0FEdEQsQ0FDZ0Y7QUFBQTtBQUFBO0FBQUE7QUFBQSxpREFRN0Q7QUFDWEMsTUFBQUEsT0FBTyxFQUFFO0FBREUsS0FSNkQ7QUFBQSxxREFzQnZEQyxFQUFELElBQTZCO0FBQzdDLFVBQUlBLEVBQUUsQ0FBQ0MsR0FBSCxLQUFXQyxjQUFJQyxNQUFuQixFQUEyQjtBQUN2QkgsUUFBQUEsRUFBRSxDQUFDSSxlQUFIO0FBQ0FKLFFBQUFBLEVBQUUsQ0FBQ0ssY0FBSDtBQUNBLGFBQUtDLEtBQUwsQ0FBV0MsVUFBWDtBQUNIO0FBQ0osS0E1QjJFO0FBQUEsb0RBOEJ4REMsT0FBRCxJQUFrQztBQUNqRCxVQUFJQSxPQUFPLENBQUNDLE1BQVIsS0FBbUIsY0FBdkIsRUFBdUM7QUFDbkMsYUFBS0gsS0FBTCxDQUFXQyxVQUFYO0FBQ0g7QUFDSixLQWxDMkU7QUFBQSxtREFvQzFELE1BQVk7QUFDMUIsV0FBS0csUUFBTCxDQUFjO0FBQUVYLFFBQUFBLE9BQU8sRUFBRTtBQUFYLE9BQWQ7QUFDSCxLQXRDMkU7QUFBQTs7QUFZckVZLEVBQUFBLGlCQUFpQixHQUFTO0FBQzdCLFNBQUtDLGFBQUwsR0FBcUJDLG9CQUFJQyxRQUFKLENBQWEsS0FBS0MsUUFBbEIsQ0FBckI7QUFDQUMsSUFBQUEsUUFBUSxDQUFDQyxnQkFBVCxDQUEwQixTQUExQixFQUFxQyxLQUFLQyxTQUExQztBQUNIOztBQUVNQyxFQUFBQSxvQkFBb0IsR0FBUztBQUNoQ04sd0JBQUlPLFVBQUosQ0FBZSxLQUFLUixhQUFwQjs7QUFDQUksSUFBQUEsUUFBUSxDQUFDSyxtQkFBVCxDQUE2QixTQUE3QixFQUF3QyxLQUFLSCxTQUE3QztBQUNIOztBQW9CTUksRUFBQUEsTUFBTSxHQUFnQjtBQUN6QixRQUFJLEtBQUtoQixLQUFMLENBQVdpQixPQUFmLEVBQXdCO0FBQ3BCLDBCQUNJO0FBQUssUUFBQSxTQUFTLEVBQUM7QUFBZixzQkFDSSx5Q0FBTSx5QkFBRyxzQ0FBSCxDQUFOLENBREosZUFFSSw2QkFBQyxnQkFBRCxPQUZKLENBREo7QUFNSDs7QUFFRCxRQUFJLENBQUMsS0FBS2pCLEtBQUwsQ0FBV2tCLFNBQVosSUFBeUIsS0FBS0MsS0FBTCxDQUFXMUIsT0FBeEMsRUFBaUQ7QUFDN0MsMEJBQ0k7QUFBSyxRQUFBLFNBQVMsRUFBQztBQUFmLHNCQUNJLHlDQUFNLHlCQUFHLHVDQUFILENBQU4sQ0FESixlQUVJLHdDQUFLLHlCQUFHLHdFQUFILENBQUwsQ0FGSixDQURKO0FBTUg7O0FBRUQsd0JBQU87QUFBUSxNQUFBLEdBQUcsRUFBRSxLQUFLTyxLQUFMLENBQVdvQixHQUF4QjtBQUE2QixNQUFBLE9BQU8sRUFBRSxLQUFLQztBQUEzQyxNQUFQO0FBQ0g7O0FBNUQyRSxDLHlEQUcvQztBQUN6QkgsRUFBQUEsU0FBUyxFQUFFLElBRGM7QUFFekJELEVBQUFBLE9BQU8sRUFBRTtBQUZnQixDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbkNvcHlyaWdodCAyMDE1IC0gMjAyMSBUaGUgTWF0cml4Lm9yZyBGb3VuZGF0aW9uIEMuSS5DLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBfdCB9IGZyb20gJy4uLy4uLy4uL2xhbmd1YWdlSGFuZGxlcic7XG5pbXBvcnQgZGlzIGZyb20gJy4uLy4uLy4uL2Rpc3BhdGNoZXIvZGlzcGF0Y2hlcic7XG5pbXBvcnQgeyBLZXkgfSBmcm9tIFwiLi4vLi4vLi4vS2V5Ym9hcmRcIjtcbmltcG9ydCB7IHJlcGxhY2VhYmxlQ29tcG9uZW50IH0gZnJvbSBcIi4uLy4uLy4uL3V0aWxzL3JlcGxhY2VhYmxlQ29tcG9uZW50XCI7XG5pbXBvcnQgeyBBY3Rpb25QYXlsb2FkIH0gZnJvbSAnLi4vLi4vLi4vZGlzcGF0Y2hlci9wYXlsb2Fkcyc7XG5pbXBvcnQgU3Bpbm5lciBmcm9tIFwiLi4vZWxlbWVudHMvU3Bpbm5lclwiO1xuXG5pbnRlcmZhY2UgSVByb3BzIHtcbiAgICAvLyBmYWxzZSB0byBkaXNwbGF5IGFuIGVycm9yIHNheWluZyB0aGF0IHdlIGNvdWxkbid0IGNvbm5lY3QgdG8gdGhlIGludGVncmF0aW9uIG1hbmFnZXJcbiAgICBjb25uZWN0ZWQ6IGJvb2xlYW47XG5cbiAgICAvLyB0cnVlIHRvIGRpc3BsYXkgYSBsb2FkaW5nIHNwaW5uZXJcbiAgICBsb2FkaW5nOiBib29sZWFuO1xuXG4gICAgLy8gVGhlIHNvdXJjZSBVUkwgdG8gbG9hZFxuICAgIHVybD86IHN0cmluZztcblxuICAgIC8vIGNhbGxiYWNrIHdoZW4gdGhlIG1hbmFnZXIgaXMgZGlzbWlzc2VkXG4gICAgb25GaW5pc2hlZDogKCkgPT4gdm9pZDtcbn1cblxuaW50ZXJmYWNlIElTdGF0ZSB7XG4gICAgZXJyb3JlZDogYm9vbGVhbjtcbn1cblxuQHJlcGxhY2VhYmxlQ29tcG9uZW50KFwidmlld3Muc2V0dGluZ3MuSW50ZWdyYXRpb25NYW5hZ2VyXCIpXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJbnRlZ3JhdGlvbk1hbmFnZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8SVByb3BzLCBJU3RhdGU+IHtcbiAgICBwcml2YXRlIGRpc3BhdGNoZXJSZWY6IHN0cmluZztcblxuICAgIHB1YmxpYyBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgICAgICBjb25uZWN0ZWQ6IHRydWUsXG4gICAgICAgIGxvYWRpbmc6IGZhbHNlLFxuICAgIH07XG5cbiAgICBwdWJsaWMgc3RhdGUgPSB7XG4gICAgICAgIGVycm9yZWQ6IGZhbHNlLFxuICAgIH07XG5cbiAgICBwdWJsaWMgY29tcG9uZW50RGlkTW91bnQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hlclJlZiA9IGRpcy5yZWdpc3Rlcih0aGlzLm9uQWN0aW9uKTtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgdGhpcy5vbktleURvd24pO1xuICAgIH1cblxuICAgIHB1YmxpYyBjb21wb25lbnRXaWxsVW5tb3VudCgpOiB2b2lkIHtcbiAgICAgICAgZGlzLnVucmVnaXN0ZXIodGhpcy5kaXNwYXRjaGVyUmVmKTtcbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgdGhpcy5vbktleURvd24pO1xuICAgIH1cblxuICAgIHByaXZhdGUgb25LZXlEb3duID0gKGV2OiBLZXlib2FyZEV2ZW50KTogdm9pZCA9PiB7XG4gICAgICAgIGlmIChldi5rZXkgPT09IEtleS5FU0NBUEUpIHtcbiAgICAgICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIHRoaXMucHJvcHMub25GaW5pc2hlZCgpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHByaXZhdGUgb25BY3Rpb24gPSAocGF5bG9hZDogQWN0aW9uUGF5bG9hZCk6IHZvaWQgPT4ge1xuICAgICAgICBpZiAocGF5bG9hZC5hY3Rpb24gPT09ICdjbG9zZV9zY2FsYXInKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLm9uRmluaXNoZWQoKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBwcml2YXRlIG9uRXJyb3IgPSAoKTogdm9pZCA9PiB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBlcnJvcmVkOiB0cnVlIH0pO1xuICAgIH07XG5cbiAgICBwdWJsaWMgcmVuZGVyKCk6IEpTWC5FbGVtZW50IHtcbiAgICAgICAgaWYgKHRoaXMucHJvcHMubG9hZGluZykge1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nbXhfSW50ZWdyYXRpb25NYW5hZ2VyX2xvYWRpbmcnPlxuICAgICAgICAgICAgICAgICAgICA8aDM+eyBfdChcIkNvbm5lY3RpbmcgdG8gaW50ZWdyYXRpb24gbWFuYWdlci4uLlwiKSB9PC9oMz5cbiAgICAgICAgICAgICAgICAgICAgPFNwaW5uZXIgLz5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMucHJvcHMuY29ubmVjdGVkIHx8IHRoaXMuc3RhdGUuZXJyb3JlZCkge1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nbXhfSW50ZWdyYXRpb25NYW5hZ2VyX2Vycm9yJz5cbiAgICAgICAgICAgICAgICAgICAgPGgzPnsgX3QoXCJDYW5ub3QgY29ubmVjdCB0byBpbnRlZ3JhdGlvbiBtYW5hZ2VyXCIpIH08L2gzPlxuICAgICAgICAgICAgICAgICAgICA8cD57IF90KFwiVGhlIGludGVncmF0aW9uIG1hbmFnZXIgaXMgb2ZmbGluZSBvciBpdCBjYW5ub3QgcmVhY2ggeW91ciBob21lc2VydmVyLlwiKSB9PC9wPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiA8aWZyYW1lIHNyYz17dGhpcy5wcm9wcy51cmx9IG9uRXJyb3I9e3RoaXMub25FcnJvcn0gLz47XG4gICAgfVxufVxuIl19