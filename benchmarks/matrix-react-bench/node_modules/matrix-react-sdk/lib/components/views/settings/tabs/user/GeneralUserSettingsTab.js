"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var languageHandler = _interopRequireWildcard(require("../../../../../languageHandler"));

var _ProfileSettings = _interopRequireDefault(require("../../ProfileSettings"));

var _SettingsStore = _interopRequireDefault(require("../../../../../settings/SettingsStore"));

var _LanguageDropdown = _interopRequireDefault(require("../../../elements/LanguageDropdown"));

var _SpellCheckSettings = _interopRequireDefault(require("../../SpellCheckSettings"));

var _AccessibleButton = _interopRequireDefault(require("../../../elements/AccessibleButton"));

var _DeactivateAccountDialog = _interopRequireDefault(require("../../../dialogs/DeactivateAccountDialog"));

var _PlatformPeg = _interopRequireDefault(require("../../../../../PlatformPeg"));

var _MatrixClientPeg = require("../../../../../MatrixClientPeg");

var _Modal = _interopRequireDefault(require("../../../../../Modal"));

var _dispatcher = _interopRequireDefault(require("../../../../../dispatcher/dispatcher"));

var _Terms = require("../../../../../Terms");

var _serviceTypes = require("matrix-js-sdk/src/service-types");

var _IdentityAuthClient = _interopRequireDefault(require("../../../../../IdentityAuthClient"));

var _UrlUtils = require("../../../../../utils/UrlUtils");

var _boundThreepids = require("../../../../../boundThreepids");

var _Spinner = _interopRequireDefault(require("../../../elements/Spinner"));

var _SettingLevel = require("../../../../../settings/SettingLevel");

var _UIFeature = require("../../../../../settings/UIFeature");

var _replaceableComponent = require("../../../../../utils/replaceableComponent");

var _ErrorDialog = _interopRequireDefault(require("../../../dialogs/ErrorDialog"));

var _PhoneNumbers = _interopRequireDefault(require("../../account/PhoneNumbers"));

var _EmailAddresses = _interopRequireDefault(require("../../account/EmailAddresses"));

var _EmailAddresses2 = _interopRequireDefault(require("../../discovery/EmailAddresses"));

var _PhoneNumbers2 = _interopRequireDefault(require("../../discovery/PhoneNumbers"));

var _ChangePassword = _interopRequireDefault(require("../../ChangePassword"));

var _InlineTermsAgreement = _interopRequireDefault(require("../../../terms/InlineTermsAgreement"));

var _SetIdServer = _interopRequireDefault(require("../../SetIdServer"));

var _SetIntegrationManager = _interopRequireDefault(require("../../SetIntegrationManager"));

var _logger = require("matrix-js-sdk/src/logger");

var _dec, _class;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

let GeneralUserSettingsTab = (_dec = (0, _replaceableComponent.replaceableComponent)("views.settings.tabs.user.GeneralUserSettingsTab"), _dec(_class = class GeneralUserSettingsTab extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "dispatcherRef", void 0);
    (0, _defineProperty2.default)(this, "onAction", payload => {
      if (payload.action === 'id_server_changed') {
        this.setState({
          haveIdServer: Boolean(_MatrixClientPeg.MatrixClientPeg.get().getIdentityServerUrl())
        });
        this.getThreepidState();
      }
    });
    (0, _defineProperty2.default)(this, "onEmailsChange", emails => {
      this.setState({
        emails
      });
    });
    (0, _defineProperty2.default)(this, "onMsisdnsChange", msisdns => {
      this.setState({
        msisdns
      });
    });
    (0, _defineProperty2.default)(this, "onLanguageChange", newLanguage => {
      if (this.state.language === newLanguage) return;

      _SettingsStore.default.setValue("language", null, _SettingLevel.SettingLevel.DEVICE, newLanguage);

      this.setState({
        language: newLanguage
      });

      const platform = _PlatformPeg.default.get();

      if (platform) {
        platform.setLanguage([newLanguage]);
        platform.reload();
      }
    });
    (0, _defineProperty2.default)(this, "onSpellCheckLanguagesChange", languages => {
      this.setState({
        spellCheckLanguages: languages
      });

      const plaf = _PlatformPeg.default.get();

      if (plaf) {
        plaf.setSpellCheckLanguages(languages);
      }
    });
    (0, _defineProperty2.default)(this, "onPasswordChangeError", err => {
      // TODO: Figure out a design that doesn't involve replacing the current dialog
      let errMsg = err.error || err.message || "";

      if (err.httpStatus === 403) {
        errMsg = (0, languageHandler._t)("Failed to change password. Is your password correct?");
      } else if (!errMsg) {
        errMsg += ` (HTTP status ${err.httpStatus})`;
      }

      _logger.logger.error("Failed to change password: " + errMsg);

      _Modal.default.createTrackedDialog('Failed to change password', '', _ErrorDialog.default, {
        title: (0, languageHandler._t)("Error"),
        description: errMsg
      });
    });
    (0, _defineProperty2.default)(this, "onPasswordChanged", () => {
      // TODO: Figure out a design that doesn't involve replacing the current dialog
      _Modal.default.createTrackedDialog('Password changed', '', _ErrorDialog.default, {
        title: (0, languageHandler._t)("Success"),
        description: (0, languageHandler._t)("Your password was successfully changed. You will not receive " + "push notifications on other sessions until you log back in to them") + "."
      });
    });
    (0, _defineProperty2.default)(this, "onDeactivateClicked", () => {
      _Modal.default.createTrackedDialog('Deactivate Account', '', _DeactivateAccountDialog.default, {
        onFinished: success => {
          if (success) this.props.closeSettingsFn();
        }
      });
    });
    this.state = {
      language: languageHandler.getCurrentLanguage(),
      spellCheckLanguages: [],
      haveIdServer: Boolean(_MatrixClientPeg.MatrixClientPeg.get().getIdentityServerUrl()),
      serverSupportsSeparateAddAndBind: null,
      idServerHasUnsignedTerms: false,
      requiredPolicyInfo: {
        // This object is passed along to a component for handling
        hasTerms: false,
        policiesAndServices: null,
        // From the startTermsFlow callback
        agreedUrls: null,
        // From the startTermsFlow callback
        resolve: null // Promise resolve function for startTermsFlow callback

      },
      emails: [],
      msisdns: [],
      loading3pids: true,
      // whether or not the emails and msisdns have been loaded
      canChangePassword: false,
      idServerName: null
    };
    this.dispatcherRef = _dispatcher.default.register(this.onAction);
  } // TODO: [REACT-WARNING] Move this to constructor
  // eslint-disable-next-line @typescript-eslint/naming-convention, camelcase


  async UNSAFE_componentWillMount() {
    const cli = _MatrixClientPeg.MatrixClientPeg.get();

    const serverSupportsSeparateAddAndBind = await cli.doesServerSupportSeparateAddAndBind();
    const capabilities = await cli.getCapabilities(); // this is cached

    const changePasswordCap = capabilities['m.change_password']; // You can change your password so long as the capability isn't explicitly disabled. The implicit
    // behaviour is you can change your password when the capability is missing or has not-false as
    // the enabled flag value.

    const canChangePassword = !changePasswordCap || changePasswordCap['enabled'] !== false;
    this.setState({
      serverSupportsSeparateAddAndBind,
      canChangePassword
    });
    this.getThreepidState();
  }

  async componentDidMount() {
    const plaf = _PlatformPeg.default.get();

    if (plaf) {
      this.setState({
        spellCheckLanguages: await plaf.getSpellCheckLanguages()
      });
    }
  }

  componentWillUnmount() {
    _dispatcher.default.unregister(this.dispatcherRef);
  }

  async getThreepidState() {
    const cli = _MatrixClientPeg.MatrixClientPeg.get(); // Check to see if terms need accepting


    this.checkTerms(); // Need to get 3PIDs generally for Account section and possibly also for
    // Discovery (assuming we have an IS and terms are agreed).

    let threepids = [];

    try {
      threepids = await (0, _boundThreepids.getThreepidsWithBindStatus)(cli);
    } catch (e) {
      const idServerUrl = _MatrixClientPeg.MatrixClientPeg.get().getIdentityServerUrl();

      _logger.logger.warn(`Unable to reach identity server at ${idServerUrl} to check ` + `for 3PIDs bindings in Settings`);

      _logger.logger.warn(e);
    }

    this.setState({
      emails: threepids.filter(a => a.medium === 'email'),
      msisdns: threepids.filter(a => a.medium === 'msisdn'),
      loading3pids: false
    });
  }

  async checkTerms() {
    if (!this.state.haveIdServer) {
      this.setState({
        idServerHasUnsignedTerms: false
      });
      return;
    } // By starting the terms flow we get the logic for checking which terms the user has signed
    // for free. So we might as well use that for our own purposes.


    const idServerUrl = _MatrixClientPeg.MatrixClientPeg.get().getIdentityServerUrl();

    const authClient = new _IdentityAuthClient.default();

    try {
      const idAccessToken = await authClient.getAccessToken({
        check: false
      });
      await (0, _Terms.startTermsFlow)([new _Terms.Service(_serviceTypes.SERVICE_TYPES.IS, idServerUrl, idAccessToken)], (policiesAndServices, agreedUrls, extraClassNames) => {
        return new Promise((resolve, reject) => {
          this.setState({
            idServerName: (0, _UrlUtils.abbreviateUrl)(idServerUrl),
            requiredPolicyInfo: {
              hasTerms: true,
              policiesAndServices,
              agreedUrls,
              resolve
            }
          });
        });
      }); // User accepted all terms

      this.setState({
        requiredPolicyInfo: _objectSpread({
          hasTerms: false
        }, this.state.requiredPolicyInfo)
      });
    } catch (e) {
      _logger.logger.warn(`Unable to reach identity server at ${idServerUrl} to check ` + `for terms in Settings`);

      _logger.logger.warn(e);
    }
  }

  renderProfileSection() {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_section"
    }, /*#__PURE__*/_react.default.createElement(_ProfileSettings.default, null));
  }

  renderAccountSection() {
    let passwordChangeForm = /*#__PURE__*/_react.default.createElement(_ChangePassword.default, {
      className: "mx_GeneralUserSettingsTab_changePassword",
      rowClassName: "",
      buttonKind: "primary",
      onError: this.onPasswordChangeError,
      onFinished: this.onPasswordChanged
    });

    let threepidSection = null; // For older homeservers without separate 3PID add and bind methods (MSC2290),
    // we use a combo add with bind option API which requires an identity server to
    // validate 3PID ownership even if we're just adding to the homeserver only.
    // For newer homeservers with separate 3PID add and bind methods (MSC2290),
    // there is no such concern, so we can always show the HS account 3PIDs.

    if (_SettingsStore.default.getValue(_UIFeature.UIFeature.ThirdPartyID) && (this.state.haveIdServer || this.state.serverSupportsSeparateAddAndBind === true)) {
      const emails = this.state.loading3pids ? /*#__PURE__*/_react.default.createElement(_Spinner.default, null) : /*#__PURE__*/_react.default.createElement(_EmailAddresses.default, {
        emails: this.state.emails,
        onEmailsChange: this.onEmailsChange
      });
      const msisdns = this.state.loading3pids ? /*#__PURE__*/_react.default.createElement(_Spinner.default, null) : /*#__PURE__*/_react.default.createElement(_PhoneNumbers.default, {
        msisdns: this.state.msisdns,
        onMsisdnsChange: this.onMsisdnsChange
      });
      threepidSection = /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("span", {
        className: "mx_SettingsTab_subheading"
      }, (0, languageHandler._t)("Email addresses")), emails, /*#__PURE__*/_react.default.createElement("span", {
        className: "mx_SettingsTab_subheading"
      }, (0, languageHandler._t)("Phone numbers")), msisdns);
    } else if (this.state.serverSupportsSeparateAddAndBind === null) {
      threepidSection = /*#__PURE__*/_react.default.createElement(_Spinner.default, null);
    }

    let passwordChangeText = (0, languageHandler._t)("Set a new account password...");

    if (!this.state.canChangePassword) {
      // Just don't show anything if you can't do anything.
      passwordChangeText = null;
      passwordChangeForm = null;
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_section mx_GeneralUserSettingsTab_accountSection"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_SettingsTab_subheading"
    }, (0, languageHandler._t)("Account")), /*#__PURE__*/_react.default.createElement("p", {
      className: "mx_SettingsTab_subsectionText"
    }, passwordChangeText), passwordChangeForm, threepidSection);
  }

  renderLanguageSection() {
    // TODO: Convert to new-styled Field
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_section"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_SettingsTab_subheading"
    }, (0, languageHandler._t)("Language and region")), /*#__PURE__*/_react.default.createElement(_LanguageDropdown.default, {
      className: "mx_GeneralUserSettingsTab_languageInput",
      onOptionChange: this.onLanguageChange,
      value: this.state.language
    }));
  }

  renderSpellCheckSection() {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_section"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_SettingsTab_subheading"
    }, (0, languageHandler._t)("Spell check dictionaries")), /*#__PURE__*/_react.default.createElement(_SpellCheckSettings.default, {
      languages: this.state.spellCheckLanguages,
      onLanguagesChange: this.onSpellCheckLanguagesChange
    }));
  }

  renderDiscoverySection() {
    if (this.state.requiredPolicyInfo.hasTerms) {
      const intro = /*#__PURE__*/_react.default.createElement("span", {
        className: "mx_SettingsTab_subsectionText"
      }, (0, languageHandler._t)("Agree to the identity server (%(serverName)s) Terms of Service to " + "allow yourself to be discoverable by email address or phone number.", {
        serverName: this.state.idServerName
      }));

      return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_InlineTermsAgreement.default, {
        policiesAndServicePairs: this.state.requiredPolicyInfo.policiesAndServices,
        agreedUrls: this.state.requiredPolicyInfo.agreedUrls,
        onFinished: this.state.requiredPolicyInfo.resolve,
        introElement: intro
      }), /*#__PURE__*/_react.default.createElement(_SetIdServer.default, {
        missingTerms: true
      }));
    }

    const emails = this.state.loading3pids ? /*#__PURE__*/_react.default.createElement(_Spinner.default, null) : /*#__PURE__*/_react.default.createElement(_EmailAddresses2.default, {
      emails: this.state.emails
    });
    const msisdns = this.state.loading3pids ? /*#__PURE__*/_react.default.createElement(_Spinner.default, null) : /*#__PURE__*/_react.default.createElement(_PhoneNumbers2.default, {
      msisdns: this.state.msisdns
    });
    const threepidSection = this.state.haveIdServer ? /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_GeneralUserSettingsTab_discovery"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_SettingsTab_subheading"
    }, (0, languageHandler._t)("Email addresses")), emails, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_SettingsTab_subheading"
    }, (0, languageHandler._t)("Phone numbers")), msisdns) : null;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_section"
    }, threepidSection, /*#__PURE__*/_react.default.createElement(_SetIdServer.default, {
      missingTerms: false
    }));
  }

  renderManagementSection() {
    // TODO: Improve warning text for account deactivation
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_section"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_SettingsTab_subheading"
    }, (0, languageHandler._t)("Account management")), /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_SettingsTab_subsectionText"
    }, (0, languageHandler._t)("Deactivating your account is a permanent action - be careful!")), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      onClick: this.onDeactivateClicked,
      kind: "danger"
    }, (0, languageHandler._t)("Deactivate Account")));
  }

  renderIntegrationManagerSection() {
    if (!_SettingsStore.default.getValue(_UIFeature.UIFeature.Widgets)) return null;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_section"
    }, /*#__PURE__*/_react.default.createElement(_SetIntegrationManager.default, null));
  }

  render() {
    const plaf = _PlatformPeg.default.get();

    const supportsMultiLanguageSpellCheck = plaf.supportsMultiLanguageSpellCheck();
    const discoWarning = this.state.requiredPolicyInfo.hasTerms ? /*#__PURE__*/_react.default.createElement("img", {
      className: "mx_GeneralUserSettingsTab_warningIcon",
      src: require("../../../../../../res/img/feather-customised/warning-triangle.svg"),
      width: "18",
      height: "18",
      alt: (0, languageHandler._t)("Warning")
    }) : null;
    let accountManagementSection;

    if (_SettingsStore.default.getValue(_UIFeature.UIFeature.Deactivate)) {
      accountManagementSection = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_SettingsTab_heading"
      }, (0, languageHandler._t)("Deactivate account")), this.renderManagementSection());
    }

    let discoverySection;

    if (_SettingsStore.default.getValue(_UIFeature.UIFeature.IdentityServer)) {
      discoverySection = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_SettingsTab_heading"
      }, discoWarning, " ", (0, languageHandler._t)("Discovery")), this.renderDiscoverySection());
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_heading"
    }, (0, languageHandler._t)("General")), this.renderProfileSection(), this.renderAccountSection(), this.renderLanguageSection(), supportsMultiLanguageSpellCheck ? this.renderSpellCheckSection() : null, discoverySection, this.renderIntegrationManagerSection()
    /* Has its own title */
    , accountManagementSection);
  }

}) || _class);
exports.default = GeneralUserSettingsTab;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,