"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _SettingsStore = _interopRequireDefault(require("../../../settings/SettingsStore"));

var _StyledRadioButton = _interopRequireDefault(require("../elements/StyledRadioButton"));

var _languageHandler = require("../../../languageHandler");

var _SettingLevel = require("../../../settings/SettingLevel");

var _ImageSize = require("../../../settings/enums/ImageSize");

/*
Copyright 2021 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
class ImageSizePanel extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "onSizeChange", ev => {
      const newSize = ev.target.value;
      this.setState({
        size: newSize
      }); // noinspection JSIgnoredPromiseFromCall

      _SettingsStore.default.setValue("Images.size", null, _SettingLevel.SettingLevel.ACCOUNT, newSize);
    });
    this.state = {
      size: _SettingsStore.default.getValue("Images.size")
    };
  }

  render() {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_section mx_ImageSizePanel"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_SettingsTab_subheading"
    }, (0, _languageHandler._t)("Image size in the timeline")), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_ImageSizePanel_radios"
    }, /*#__PURE__*/_react.default.createElement("label", null, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_ImageSizePanel_size mx_ImageSizePanel_sizeDefault"
    }), /*#__PURE__*/_react.default.createElement(_StyledRadioButton.default, {
      name: "image_size",
      value: _ImageSize.ImageSize.Normal,
      checked: this.state.size === _ImageSize.ImageSize.Normal,
      onChange: this.onSizeChange
    }, (0, _languageHandler._t)("Default"))), /*#__PURE__*/_react.default.createElement("label", null, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_ImageSizePanel_size mx_ImageSizePanel_sizeLarge"
    }), /*#__PURE__*/_react.default.createElement(_StyledRadioButton.default, {
      name: "image_size",
      value: _ImageSize.ImageSize.Large,
      checked: this.state.size === _ImageSize.ImageSize.Large,
      onChange: this.onSizeChange
    }, (0, _languageHandler._t)("Large")))));
  }

}

exports.default = ImageSizePanel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL3NldHRpbmdzL0ltYWdlU2l6ZVBhbmVsLnRzeCJdLCJuYW1lcyI6WyJJbWFnZVNpemVQYW5lbCIsIlJlYWN0IiwiQ29tcG9uZW50IiwiY29uc3RydWN0b3IiLCJwcm9wcyIsImV2IiwibmV3U2l6ZSIsInRhcmdldCIsInZhbHVlIiwic2V0U3RhdGUiLCJzaXplIiwiU2V0dGluZ3NTdG9yZSIsInNldFZhbHVlIiwiU2V0dGluZ0xldmVsIiwiQUNDT1VOVCIsInN0YXRlIiwiZ2V0VmFsdWUiLCJyZW5kZXIiLCJJbWFnZVNpemUiLCJOb3JtYWwiLCJvblNpemVDaGFuZ2UiLCJMYXJnZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFnQkE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBckJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQWlCZSxNQUFNQSxjQUFOLFNBQTZCQyxlQUFNQyxTQUFuQyxDQUE2RDtBQUN4RUMsRUFBQUEsV0FBVyxDQUFDQyxLQUFELEVBQWdCO0FBQ3ZCLFVBQU1BLEtBQU47QUFEdUIsd0RBUUhDLEVBQUQsSUFBbUQ7QUFDdEUsWUFBTUMsT0FBTyxHQUFHRCxFQUFFLENBQUNFLE1BQUgsQ0FBVUMsS0FBMUI7QUFDQSxXQUFLQyxRQUFMLENBQWM7QUFBRUMsUUFBQUEsSUFBSSxFQUFFSjtBQUFSLE9BQWQsRUFGc0UsQ0FJdEU7O0FBQ0FLLDZCQUFjQyxRQUFkLENBQXVCLGFBQXZCLEVBQXNDLElBQXRDLEVBQTRDQywyQkFBYUMsT0FBekQsRUFBa0VSLE9BQWxFO0FBQ0gsS0FkMEI7QUFHdkIsU0FBS1MsS0FBTCxHQUFhO0FBQ1RMLE1BQUFBLElBQUksRUFBRUMsdUJBQWNLLFFBQWQsQ0FBdUIsYUFBdkI7QUFERyxLQUFiO0FBR0g7O0FBVU1DLEVBQUFBLE1BQU0sR0FBZ0I7QUFDekIsd0JBQ0k7QUFBSyxNQUFBLFNBQVMsRUFBQztBQUFmLG9CQUNJO0FBQU0sTUFBQSxTQUFTLEVBQUM7QUFBaEIsT0FDTSx5QkFBRyw0QkFBSCxDQUROLENBREosZUFLSTtBQUFLLE1BQUEsU0FBUyxFQUFDO0FBQWYsb0JBQ0kseURBQ0k7QUFBSyxNQUFBLFNBQVMsRUFBQztBQUFmLE1BREosZUFFSSw2QkFBQywwQkFBRDtBQUNJLE1BQUEsSUFBSSxFQUFDLFlBRFQ7QUFFSSxNQUFBLEtBQUssRUFBRUMscUJBQVVDLE1BRnJCO0FBR0ksTUFBQSxPQUFPLEVBQUUsS0FBS0osS0FBTCxDQUFXTCxJQUFYLEtBQW9CUSxxQkFBVUMsTUFIM0M7QUFJSSxNQUFBLFFBQVEsRUFBRSxLQUFLQztBQUpuQixPQUtHLHlCQUFHLFNBQUgsQ0FMSCxDQUZKLENBREosZUFVSSx5REFDSTtBQUFLLE1BQUEsU0FBUyxFQUFDO0FBQWYsTUFESixlQUVJLDZCQUFDLDBCQUFEO0FBQ0ksTUFBQSxJQUFJLEVBQUMsWUFEVDtBQUVJLE1BQUEsS0FBSyxFQUFFRixxQkFBVUcsS0FGckI7QUFHSSxNQUFBLE9BQU8sRUFBRSxLQUFLTixLQUFMLENBQVdMLElBQVgsS0FBb0JRLHFCQUFVRyxLQUgzQztBQUlJLE1BQUEsUUFBUSxFQUFFLEtBQUtEO0FBSm5CLE9BS0cseUJBQUcsT0FBSCxDQUxILENBRkosQ0FWSixDQUxKLENBREo7QUE0Qkg7O0FBOUN1RSIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5Db3B5cmlnaHQgMjAyMSBUaGUgTWF0cml4Lm9yZyBGb3VuZGF0aW9uIEMuSS5DLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBTZXR0aW5nc1N0b3JlIGZyb20gXCIuLi8uLi8uLi9zZXR0aW5ncy9TZXR0aW5nc1N0b3JlXCI7XG5pbXBvcnQgU3R5bGVkUmFkaW9CdXR0b24gZnJvbSBcIi4uL2VsZW1lbnRzL1N0eWxlZFJhZGlvQnV0dG9uXCI7XG5pbXBvcnQgeyBfdCB9IGZyb20gXCIuLi8uLi8uLi9sYW5ndWFnZUhhbmRsZXJcIjtcbmltcG9ydCB7IFNldHRpbmdMZXZlbCB9IGZyb20gXCIuLi8uLi8uLi9zZXR0aW5ncy9TZXR0aW5nTGV2ZWxcIjtcbmltcG9ydCB7IEltYWdlU2l6ZSB9IGZyb20gXCIuLi8uLi8uLi9zZXR0aW5ncy9lbnVtcy9JbWFnZVNpemVcIjtcblxuaW50ZXJmYWNlIElQcm9wcyB7XG4gICAgLy8gbm9uZVxufVxuXG5pbnRlcmZhY2UgSVN0YXRlIHtcbiAgICBzaXplOiBJbWFnZVNpemU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEltYWdlU2l6ZVBhbmVsIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PElQcm9wcywgSVN0YXRlPiB7XG4gICAgY29uc3RydWN0b3IocHJvcHM6IElQcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG5cbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIHNpemU6IFNldHRpbmdzU3RvcmUuZ2V0VmFsdWUoXCJJbWFnZXMuc2l6ZVwiKSxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG9uU2l6ZUNoYW5nZSA9IChldjogUmVhY3QuQ2hhbmdlRXZlbnQ8SFRNTElucHV0RWxlbWVudD4pOiB2b2lkID0+IHtcbiAgICAgICAgY29uc3QgbmV3U2l6ZSA9IGV2LnRhcmdldC52YWx1ZSBhcyBJbWFnZVNpemU7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBzaXplOiBuZXdTaXplIH0pO1xuXG4gICAgICAgIC8vIG5vaW5zcGVjdGlvbiBKU0lnbm9yZWRQcm9taXNlRnJvbUNhbGxcbiAgICAgICAgU2V0dGluZ3NTdG9yZS5zZXRWYWx1ZShcIkltYWdlcy5zaXplXCIsIG51bGwsIFNldHRpbmdMZXZlbC5BQ0NPVU5ULCBuZXdTaXplKTtcbiAgICB9O1xuXG4gICAgcHVibGljIHJlbmRlcigpOiBKU1guRWxlbWVudCB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm14X1NldHRpbmdzVGFiX3NlY3Rpb24gbXhfSW1hZ2VTaXplUGFuZWxcIj5cbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJteF9TZXR0aW5nc1RhYl9zdWJoZWFkaW5nXCI+XG4gICAgICAgICAgICAgICAgICAgIHsgX3QoXCJJbWFnZSBzaXplIGluIHRoZSB0aW1lbGluZVwiKSB9XG4gICAgICAgICAgICAgICAgPC9zcGFuPlxuXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJteF9JbWFnZVNpemVQYW5lbF9yYWRpb3NcIj5cbiAgICAgICAgICAgICAgICAgICAgPGxhYmVsPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJteF9JbWFnZVNpemVQYW5lbF9zaXplIG14X0ltYWdlU2l6ZVBhbmVsX3NpemVEZWZhdWx0XCIgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxTdHlsZWRSYWRpb0J1dHRvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJpbWFnZV9zaXplXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17SW1hZ2VTaXplLk5vcm1hbH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGVja2VkPXt0aGlzLnN0YXRlLnNpemUgPT09IEltYWdlU2l6ZS5Ob3JtYWx9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMub25TaXplQ2hhbmdlfVxuICAgICAgICAgICAgICAgICAgICAgICAgPnsgX3QoXCJEZWZhdWx0XCIpIH08L1N0eWxlZFJhZGlvQnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICAgICAgICAgICA8bGFiZWw+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm14X0ltYWdlU2l6ZVBhbmVsX3NpemUgbXhfSW1hZ2VTaXplUGFuZWxfc2l6ZUxhcmdlXCIgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxTdHlsZWRSYWRpb0J1dHRvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJpbWFnZV9zaXplXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17SW1hZ2VTaXplLkxhcmdlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrZWQ9e3RoaXMuc3RhdGUuc2l6ZSA9PT0gSW1hZ2VTaXplLkxhcmdlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLm9uU2l6ZUNoYW5nZX1cbiAgICAgICAgICAgICAgICAgICAgICAgID57IF90KFwiTGFyZ2VcIikgfTwvU3R5bGVkUmFkaW9CdXR0b24+XG4gICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICB9XG59XG4iXX0=