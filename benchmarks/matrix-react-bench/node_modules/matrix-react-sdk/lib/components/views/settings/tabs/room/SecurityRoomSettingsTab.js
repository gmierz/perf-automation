"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _partials = require("matrix-js-sdk/src/@types/partials");

var _event = require("matrix-js-sdk/src/@types/event");

var _languageHandler = require("../../../../../languageHandler");

var _MatrixClientPeg = require("../../../../../MatrixClientPeg");

var _LabelledToggleSwitch = _interopRequireDefault(require("../../../elements/LabelledToggleSwitch"));

var _Modal = _interopRequireDefault(require("../../../../../Modal"));

var _QuestionDialog = _interopRequireDefault(require("../../../dialogs/QuestionDialog"));

var _StyledRadioGroup = _interopRequireDefault(require("../../../elements/StyledRadioGroup"));

var _SettingLevel = require("../../../../../settings/SettingLevel");

var _SettingsStore = _interopRequireDefault(require("../../../../../settings/SettingsStore"));

var _UIFeature = require("../../../../../settings/UIFeature");

var _replaceableComponent = require("../../../../../utils/replaceableComponent");

var _AccessibleButton = _interopRequireDefault(require("../../../elements/AccessibleButton"));

var _SettingsFlag = _interopRequireDefault(require("../../../elements/SettingsFlag"));

var _createRoom = _interopRequireDefault(require("../../../../../createRoom"));

var _CreateRoomDialog = _interopRequireDefault(require("../../../dialogs/CreateRoomDialog"));

var _JoinRuleSettings = _interopRequireDefault(require("../../JoinRuleSettings"));

var _ErrorDialog = _interopRequireDefault(require("../../../dialogs/ErrorDialog"));

var _logger = require("matrix-js-sdk/src/logger");

var _dec, _class;

let SecurityRoomSettingsTab = (_dec = (0, _replaceableComponent.replaceableComponent)("views.settings.tabs.room.SecurityRoomSettingsTab"), _dec(_class = class SecurityRoomSettingsTab extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "onStateEvent", e => {
      const refreshWhenTypes = [_event.EventType.RoomJoinRules, _event.EventType.RoomGuestAccess, _event.EventType.RoomHistoryVisibility, _event.EventType.RoomEncryption];
      if (refreshWhenTypes.includes(e.getType())) this.forceUpdate();
    });
    (0, _defineProperty2.default)(this, "onEncryptionChange", async () => {
      var _MatrixClientPeg$get$;

      if (((_MatrixClientPeg$get$ = _MatrixClientPeg.MatrixClientPeg.get().getRoom(this.props.roomId)) === null || _MatrixClientPeg$get$ === void 0 ? void 0 : _MatrixClientPeg$get$.getJoinRule()) === _partials.JoinRule.Public) {
        const dialog = _Modal.default.createTrackedDialog('Confirm Public Encrypted Room', '', _QuestionDialog.default, {
          title: (0, _languageHandler._t)('Are you sure you want to add encryption to this public room?'),
          description: /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("p", null, " ", (0, _languageHandler._t)("<b>It's not recommended to add encryption to public rooms.</b>" + "Anyone can find and join public rooms, so anyone can read messages in them. " + "You'll get none of the benefits of encryption, and you won't be able to turn it " + "off later. Encrypting messages in a public room will make receiving and sending " + "messages slower.", null, {
            "b": sub => /*#__PURE__*/_react.default.createElement("b", null, sub)
          }), " "), /*#__PURE__*/_react.default.createElement("p", null, " ", (0, _languageHandler._t)("To avoid these issues, create a <a>new encrypted room</a> for " + "the conversation you plan to have.", null, {
            "a": sub => /*#__PURE__*/_react.default.createElement("a", {
              className: "mx_linkButton",
              onClick: () => {
                dialog.close();
                this.createNewRoom(false, true);
              }
            }, " ", sub, " ")
          }), " "))
        });

        const {
          finished
        } = dialog;
        const [confirm] = await finished;
        if (!confirm) return;
      }

      _Modal.default.createTrackedDialog('Enable encryption', '', _QuestionDialog.default, {
        title: (0, _languageHandler._t)('Enable encryption?'),
        description: (0, _languageHandler._t)("Once enabled, encryption for a room cannot be disabled. Messages sent in an encrypted " + "room cannot be seen by the server, only by the participants of the room. Enabling encryption " + "may prevent many bots and bridges from working correctly. <a>Learn more about encryption.</a>", {}, {
          a: sub => /*#__PURE__*/_react.default.createElement("a", {
            href: "https://element.io/help#encryption",
            rel: "noreferrer noopener",
            target: "_blank"
          }, sub)
        }),
        onFinished: confirm => {
          if (!confirm) {
            this.setState({
              encrypted: false
            });
            return;
          }

          const beforeEncrypted = this.state.encrypted;
          this.setState({
            encrypted: true
          });

          _MatrixClientPeg.MatrixClientPeg.get().sendStateEvent(this.props.roomId, _event.EventType.RoomEncryption, {
            algorithm: "m.megolm.v1.aes-sha2"
          }).catch(e => {
            _logger.logger.error(e);

            this.setState({
              encrypted: beforeEncrypted
            });
          });
        }
      });
    });
    (0, _defineProperty2.default)(this, "onGuestAccessChange", allowed => {
      const guestAccess = allowed ? _partials.GuestAccess.CanJoin : _partials.GuestAccess.Forbidden;
      const beforeGuestAccess = this.state.guestAccess;
      if (beforeGuestAccess === guestAccess) return;
      this.setState({
        guestAccess
      });

      const client = _MatrixClientPeg.MatrixClientPeg.get();

      client.sendStateEvent(this.props.roomId, _event.EventType.RoomGuestAccess, {
        guest_access: guestAccess
      }, "").catch(e => {
        _logger.logger.error(e);

        this.setState({
          guestAccess: beforeGuestAccess
        });
      });
    });
    (0, _defineProperty2.default)(this, "createNewRoom", async (defaultPublic, defaultEncrypted) => {
      const modal = _Modal.default.createTrackedDialog("Create Room", "Create room after trying to make an E2EE room public", _CreateRoomDialog.default, {
        defaultPublic,
        defaultEncrypted
      });

      const [shouldCreate, opts] = await modal.finished;

      if (shouldCreate) {
        await (0, _createRoom.default)(opts);
      }

      return shouldCreate;
    });
    (0, _defineProperty2.default)(this, "onHistoryRadioToggle", history => {
      const beforeHistory = this.state.history;
      if (beforeHistory === history) return;
      this.setState({
        history: history
      });

      _MatrixClientPeg.MatrixClientPeg.get().sendStateEvent(this.props.roomId, _event.EventType.RoomHistoryVisibility, {
        history_visibility: history
      }, "").catch(e => {
        _logger.logger.error(e);

        this.setState({
          history: beforeHistory
        });
      });
    });
    (0, _defineProperty2.default)(this, "updateBlacklistDevicesFlag", checked => {
      _MatrixClientPeg.MatrixClientPeg.get().getRoom(this.props.roomId).setBlacklistUnverifiedDevices(checked);
    });
    (0, _defineProperty2.default)(this, "onJoinRuleChangeError", error => {
      _Modal.default.createTrackedDialog('Room not found', '', _ErrorDialog.default, {
        title: (0, _languageHandler._t)("Failed to update the join rules"),
        description: error.message ?? (0, _languageHandler._t)("Unknown failure")
      });
    });
    (0, _defineProperty2.default)(this, "onBeforeJoinRuleChange", async joinRule => {
      if (this.state.encrypted && joinRule === _partials.JoinRule.Public) {
        const dialog = _Modal.default.createTrackedDialog('Confirm Public Encrypted Room', '', _QuestionDialog.default, {
          title: (0, _languageHandler._t)("Are you sure you want to make this encrypted room public?"),
          description: /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("p", null, " ", (0, _languageHandler._t)("<b>It's not recommended to make encrypted rooms public.</b> " + "It will mean anyone can find and join the room, so anyone can read messages. " + "You'll get none of the benefits of encryption. Encrypting messages in a public " + "room will make receiving and sending messages slower.", null, {
            "b": sub => /*#__PURE__*/_react.default.createElement("b", null, sub)
          }), " "), /*#__PURE__*/_react.default.createElement("p", null, " ", (0, _languageHandler._t)("To avoid these issues, create a <a>new public room</a> for the conversation " + "you plan to have.", null, {
            "a": sub => /*#__PURE__*/_react.default.createElement("a", {
              className: "mx_linkButton",
              onClick: () => {
                dialog.close();
                this.createNewRoom(true, false);
              }
            }, " ", sub, " ")
          }), " "))
        });

        const {
          finished
        } = dialog;
        const [confirm] = await finished;
        if (!confirm) return false;
      }

      return true;
    });
    (0, _defineProperty2.default)(this, "toggleAdvancedSection", () => {
      this.setState({
        showAdvancedSection: !this.state.showAdvancedSection
      });
    });
    this.state = {
      guestAccess: _partials.GuestAccess.Forbidden,
      history: _partials.HistoryVisibility.Shared,
      hasAliases: false,
      encrypted: false,
      showAdvancedSection: false
    };
  } // TODO: [REACT-WARNING] Move this to constructor


  UNSAFE_componentWillMount() {
    var _joinRuleEvent$getCon, _joinRuleEvent$getCon2;

    // eslint-disable-line
    const cli = _MatrixClientPeg.MatrixClientPeg.get();

    cli.on("RoomState.events", this.onStateEvent);
    const room = cli.getRoom(this.props.roomId);
    const state = room.currentState;
    const joinRuleEvent = state.getStateEvents(_event.EventType.RoomJoinRules, "");
    const joinRule = this.pullContentPropertyFromEvent(joinRuleEvent, 'join_rule', _partials.JoinRule.Invite);
    const restrictedAllowRoomIds = joinRule === _partials.JoinRule.Restricted ? joinRuleEvent === null || joinRuleEvent === void 0 ? void 0 : (_joinRuleEvent$getCon = joinRuleEvent.getContent().allow) === null || _joinRuleEvent$getCon === void 0 ? void 0 : (_joinRuleEvent$getCon2 = _joinRuleEvent$getCon.filter(a => a.type === _partials.RestrictedAllowType.RoomMembership)) === null || _joinRuleEvent$getCon2 === void 0 ? void 0 : _joinRuleEvent$getCon2.map(a => a.room_id) : undefined;
    const guestAccess = this.pullContentPropertyFromEvent(state.getStateEvents(_event.EventType.RoomGuestAccess, ""), 'guest_access', _partials.GuestAccess.Forbidden);
    const history = this.pullContentPropertyFromEvent(state.getStateEvents(_event.EventType.RoomHistoryVisibility, ""), 'history_visibility', _partials.HistoryVisibility.Shared);

    const encrypted = _MatrixClientPeg.MatrixClientPeg.get().isRoomEncrypted(this.props.roomId);

    this.setState({
      restrictedAllowRoomIds,
      guestAccess,
      history,
      encrypted
    });
    this.hasAliases().then(hasAliases => this.setState({
      hasAliases
    }));
  }

  pullContentPropertyFromEvent(event, key, defaultValue) {
    return (event === null || event === void 0 ? void 0 : event.getContent()[key]) || defaultValue;
  }

  componentWillUnmount() {
    _MatrixClientPeg.MatrixClientPeg.get().removeListener("RoomState.events", this.onStateEvent);
  }

  async hasAliases() {
    const cli = _MatrixClientPeg.MatrixClientPeg.get();

    if (await cli.doesServerSupportUnstableFeature("org.matrix.msc2432")) {
      const response = await cli.unstableGetLocalAliases(this.props.roomId);
      const localAliases = response.aliases;
      return Array.isArray(localAliases) && localAliases.length !== 0;
    } else {
      const room = cli.getRoom(this.props.roomId);
      const aliasEvents = room.currentState.getStateEvents(_event.EventType.RoomAliases) || [];
      const hasAliases = !!aliasEvents.find(ev => (ev.getContent().aliases || []).length > 0);
      return hasAliases;
    }
  }

  renderJoinRule() {
    const client = _MatrixClientPeg.MatrixClientPeg.get();

    const room = client.getRoom(this.props.roomId);
    let aliasWarning = null;

    if (room.getJoinRule() === _partials.JoinRule.Public && !this.state.hasAliases) {
      aliasWarning = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_SecurityRoomSettingsTab_warning"
      }, /*#__PURE__*/_react.default.createElement("img", {
        src: require("../../../../../../res/img/warning.svg"),
        width: 15,
        height: 15
      }), /*#__PURE__*/_react.default.createElement("span", null, (0, _languageHandler._t)("To link to this room, please add an address.")));
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SecurityRoomSettingsTab_joinRule"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_subsectionText"
    }, /*#__PURE__*/_react.default.createElement("span", null, (0, _languageHandler._t)("Decide who can join %(roomName)s.", {
      roomName: room === null || room === void 0 ? void 0 : room.name
    }))), aliasWarning, /*#__PURE__*/_react.default.createElement(_JoinRuleSettings.default, {
      room: room,
      beforeChange: this.onBeforeJoinRuleChange,
      onError: this.onJoinRuleChangeError,
      closeSettingsFn: this.props.closeSettingsFn,
      promptUpgrade: true
    }));
  }

  renderHistory() {
    const client = _MatrixClientPeg.MatrixClientPeg.get();

    const history = this.state.history;
    const state = client.getRoom(this.props.roomId).currentState;
    const canChangeHistory = state.mayClientSendStateEvent(_event.EventType.RoomHistoryVisibility, client);
    const options = [{
      value: _partials.HistoryVisibility.Shared,
      label: (0, _languageHandler._t)('Members only (since the point in time of selecting this option)')
    }, {
      value: _partials.HistoryVisibility.Invited,
      label: (0, _languageHandler._t)('Members only (since they were invited)')
    }, {
      value: _partials.HistoryVisibility.Joined,
      label: (0, _languageHandler._t)('Members only (since they joined)')
    }]; // World readable doesn't make sense for encrypted rooms

    if (!this.state.encrypted || history === _partials.HistoryVisibility.WorldReadable) {
      options.unshift({
        value: _partials.HistoryVisibility.WorldReadable,
        label: (0, _languageHandler._t)("Anyone")
      });
    }

    return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("div", null, (0, _languageHandler._t)('Changes to who can read history will only apply to future messages in this room. ' + 'The visibility of existing history will be unchanged.')), /*#__PURE__*/_react.default.createElement(_StyledRadioGroup.default, {
      name: "historyVis",
      value: history,
      onChange: this.onHistoryRadioToggle,
      disabled: !canChangeHistory,
      definitions: options
    }));
  }

  renderAdvanced() {
    const client = _MatrixClientPeg.MatrixClientPeg.get();

    const guestAccess = this.state.guestAccess;
    const state = client.getRoom(this.props.roomId).currentState;
    const canSetGuestAccess = state.mayClientSendStateEvent(_event.EventType.RoomGuestAccess, client);
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_section"
    }, /*#__PURE__*/_react.default.createElement(_LabelledToggleSwitch.default, {
      value: guestAccess === _partials.GuestAccess.CanJoin,
      onChange: this.onGuestAccessChange,
      disabled: !canSetGuestAccess,
      label: (0, _languageHandler._t)("Enable guest access")
    }), /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("People with supported clients will be able to join " + "the room without having a registered account.")));
  }

  render() {
    const client = _MatrixClientPeg.MatrixClientPeg.get();

    const room = client.getRoom(this.props.roomId);
    const isEncrypted = this.state.encrypted;
    const hasEncryptionPermission = room.currentState.mayClientSendStateEvent(_event.EventType.RoomEncryption, client);
    const canEnableEncryption = !isEncrypted && hasEncryptionPermission;
    let encryptionSettings = null;

    if (isEncrypted && _SettingsStore.default.isEnabled("blacklistUnverifiedDevices")) {
      encryptionSettings = /*#__PURE__*/_react.default.createElement(_SettingsFlag.default, {
        name: "blacklistUnverifiedDevices",
        level: _SettingLevel.SettingLevel.ROOM_DEVICE,
        onChange: this.updateBlacklistDevicesFlag,
        roomId: this.props.roomId
      });
    }

    let historySection = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_SettingsTab_subheading"
    }, (0, _languageHandler._t)("Who can read history?")), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_section mx_SettingsTab_subsectionText"
    }, this.renderHistory()));

    if (!_SettingsStore.default.getValue(_UIFeature.UIFeature.RoomHistorySettings)) {
      historySection = null;
    }

    let advanced;

    if (room.getJoinRule() === _partials.JoinRule.Public) {
      advanced = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        onClick: this.toggleAdvancedSection,
        kind: "link",
        className: "mx_SettingsTab_showAdvanced"
      }, this.state.showAdvancedSection ? (0, _languageHandler._t)("Hide advanced") : (0, _languageHandler._t)("Show advanced")), this.state.showAdvancedSection && this.renderAdvanced());
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab mx_SecurityRoomSettingsTab"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_heading"
    }, (0, _languageHandler._t)("Security & Privacy")), /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_SettingsTab_subheading"
    }, (0, _languageHandler._t)("Encryption")), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_section mx_SecurityRoomSettingsTab_encryptionSection"
    }, /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_subsectionText"
    }, /*#__PURE__*/_react.default.createElement("span", null, (0, _languageHandler._t)("Once enabled, encryption cannot be disabled."))), /*#__PURE__*/_react.default.createElement(_LabelledToggleSwitch.default, {
      value: isEncrypted,
      onChange: this.onEncryptionChange,
      label: (0, _languageHandler._t)("Encrypted"),
      disabled: !canEnableEncryption
    })), encryptionSettings), /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_SettingsTab_subheading"
    }, (0, _languageHandler._t)("Access")), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_section mx_SettingsTab_subsectionText"
    }, this.renderJoinRule()), advanced, historySection);
  }

}) || _class);
exports.default = SecurityRoomSettingsTab;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL3NldHRpbmdzL3RhYnMvcm9vbS9TZWN1cml0eVJvb21TZXR0aW5nc1RhYi50c3giXSwibmFtZXMiOlsiU2VjdXJpdHlSb29tU2V0dGluZ3NUYWIiLCJSZWFjdCIsIkNvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwicHJvcHMiLCJlIiwicmVmcmVzaFdoZW5UeXBlcyIsIkV2ZW50VHlwZSIsIlJvb21Kb2luUnVsZXMiLCJSb29tR3Vlc3RBY2Nlc3MiLCJSb29tSGlzdG9yeVZpc2liaWxpdHkiLCJSb29tRW5jcnlwdGlvbiIsImluY2x1ZGVzIiwiZ2V0VHlwZSIsImZvcmNlVXBkYXRlIiwiZ2V0IiwiZ2V0Um9vbSIsInJvb21JZCIsImdldEpvaW5SdWxlIiwiSm9pblJ1bGUiLCJQdWJsaWMiLCJkaWFsb2ciLCJNb2RhbCIsImNyZWF0ZVRyYWNrZWREaWFsb2ciLCJRdWVzdGlvbkRpYWxvZyIsInRpdGxlIiwiZGVzY3JpcHRpb24iLCJzdWIiLCJjbG9zZSIsImNyZWF0ZU5ld1Jvb20iLCJmaW5pc2hlZCIsImNvbmZpcm0iLCJhIiwib25GaW5pc2hlZCIsInNldFN0YXRlIiwiZW5jcnlwdGVkIiwiYmVmb3JlRW5jcnlwdGVkIiwic3RhdGUiLCJNYXRyaXhDbGllbnRQZWciLCJzZW5kU3RhdGVFdmVudCIsImFsZ29yaXRobSIsImNhdGNoIiwibG9nZ2VyIiwiZXJyb3IiLCJhbGxvd2VkIiwiZ3Vlc3RBY2Nlc3MiLCJHdWVzdEFjY2VzcyIsIkNhbkpvaW4iLCJGb3JiaWRkZW4iLCJiZWZvcmVHdWVzdEFjY2VzcyIsImNsaWVudCIsImd1ZXN0X2FjY2VzcyIsImRlZmF1bHRQdWJsaWMiLCJkZWZhdWx0RW5jcnlwdGVkIiwibW9kYWwiLCJDcmVhdGVSb29tRGlhbG9nIiwic2hvdWxkQ3JlYXRlIiwib3B0cyIsImhpc3RvcnkiLCJiZWZvcmVIaXN0b3J5IiwiaGlzdG9yeV92aXNpYmlsaXR5IiwiY2hlY2tlZCIsInNldEJsYWNrbGlzdFVudmVyaWZpZWREZXZpY2VzIiwiRXJyb3JEaWFsb2ciLCJtZXNzYWdlIiwiam9pblJ1bGUiLCJzaG93QWR2YW5jZWRTZWN0aW9uIiwiSGlzdG9yeVZpc2liaWxpdHkiLCJTaGFyZWQiLCJoYXNBbGlhc2VzIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCIsImNsaSIsIm9uIiwib25TdGF0ZUV2ZW50Iiwicm9vbSIsImN1cnJlbnRTdGF0ZSIsImpvaW5SdWxlRXZlbnQiLCJnZXRTdGF0ZUV2ZW50cyIsInB1bGxDb250ZW50UHJvcGVydHlGcm9tRXZlbnQiLCJJbnZpdGUiLCJyZXN0cmljdGVkQWxsb3dSb29tSWRzIiwiUmVzdHJpY3RlZCIsImdldENvbnRlbnQiLCJhbGxvdyIsImZpbHRlciIsInR5cGUiLCJSZXN0cmljdGVkQWxsb3dUeXBlIiwiUm9vbU1lbWJlcnNoaXAiLCJtYXAiLCJyb29tX2lkIiwidW5kZWZpbmVkIiwiaXNSb29tRW5jcnlwdGVkIiwidGhlbiIsImV2ZW50Iiwia2V5IiwiZGVmYXVsdFZhbHVlIiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJyZW1vdmVMaXN0ZW5lciIsImRvZXNTZXJ2ZXJTdXBwb3J0VW5zdGFibGVGZWF0dXJlIiwicmVzcG9uc2UiLCJ1bnN0YWJsZUdldExvY2FsQWxpYXNlcyIsImxvY2FsQWxpYXNlcyIsImFsaWFzZXMiLCJBcnJheSIsImlzQXJyYXkiLCJsZW5ndGgiLCJhbGlhc0V2ZW50cyIsIlJvb21BbGlhc2VzIiwiZmluZCIsImV2IiwicmVuZGVySm9pblJ1bGUiLCJhbGlhc1dhcm5pbmciLCJyZXF1aXJlIiwicm9vbU5hbWUiLCJuYW1lIiwib25CZWZvcmVKb2luUnVsZUNoYW5nZSIsIm9uSm9pblJ1bGVDaGFuZ2VFcnJvciIsImNsb3NlU2V0dGluZ3NGbiIsInJlbmRlckhpc3RvcnkiLCJjYW5DaGFuZ2VIaXN0b3J5IiwibWF5Q2xpZW50U2VuZFN0YXRlRXZlbnQiLCJvcHRpb25zIiwidmFsdWUiLCJsYWJlbCIsIkludml0ZWQiLCJKb2luZWQiLCJXb3JsZFJlYWRhYmxlIiwidW5zaGlmdCIsIm9uSGlzdG9yeVJhZGlvVG9nZ2xlIiwicmVuZGVyQWR2YW5jZWQiLCJjYW5TZXRHdWVzdEFjY2VzcyIsIm9uR3Vlc3RBY2Nlc3NDaGFuZ2UiLCJyZW5kZXIiLCJpc0VuY3J5cHRlZCIsImhhc0VuY3J5cHRpb25QZXJtaXNzaW9uIiwiY2FuRW5hYmxlRW5jcnlwdGlvbiIsImVuY3J5cHRpb25TZXR0aW5ncyIsIlNldHRpbmdzU3RvcmUiLCJpc0VuYWJsZWQiLCJTZXR0aW5nTGV2ZWwiLCJST09NX0RFVklDRSIsInVwZGF0ZUJsYWNrbGlzdERldmljZXNGbGFnIiwiaGlzdG9yeVNlY3Rpb24iLCJnZXRWYWx1ZSIsIlVJRmVhdHVyZSIsIlJvb21IaXN0b3J5U2V0dGluZ3MiLCJhZHZhbmNlZCIsInRvZ2dsZUFkdmFuY2VkU2VjdGlvbiIsIm9uRW5jcnlwdGlvbkNoYW5nZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFnQkE7O0FBQ0E7O0FBRUE7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRUE7Ozs7SUFpQnFCQSx1QixXQURwQixnREFBcUIsa0RBQXJCLEMsZ0JBQUQsTUFDcUJBLHVCQURyQixTQUNxREMsZUFBTUMsU0FEM0QsQ0FDcUY7QUFDakZDLEVBQUFBLFdBQVcsQ0FBQ0MsS0FBRCxFQUFRO0FBQ2YsVUFBTUEsS0FBTjtBQURlLHdEQXlES0MsQ0FBRCxJQUFvQjtBQUN2QyxZQUFNQyxnQkFBNkIsR0FBRyxDQUNsQ0MsaUJBQVVDLGFBRHdCLEVBRWxDRCxpQkFBVUUsZUFGd0IsRUFHbENGLGlCQUFVRyxxQkFId0IsRUFJbENILGlCQUFVSSxjQUp3QixDQUF0QztBQU1BLFVBQUlMLGdCQUFnQixDQUFDTSxRQUFqQixDQUEwQlAsQ0FBQyxDQUFDUSxPQUFGLEVBQTFCLENBQUosRUFB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UUFBQSxPQUFPLEVBQUUsS0FBS0MscUJBRGxCO0FBRUksUUFBQSxJQUFJLEVBQUMsTUFGVDtBQUdJLFFBQUEsU0FBUyxFQUFDO0FBSGQsU0FLTSxLQUFLOUcsS0FBTCxDQUFXNkIsbUJBQVgsR0FBaUMseUJBQUcsZUFBSCxDQUFqQyxHQUF1RCx5QkFBRyxlQUFILENBTDdELENBREosRUFRTSxLQUFLN0IsS0FBTCxDQUFXNkIsbUJBQVgsSUFBa0MsS0FBSytELGNBQUwsRUFSeEMsQ0FESjtBQVlIOztBQUVELHdCQUNJO0FBQUssTUFBQSxTQUFTLEVBQUM7QUFBZixvQkFDSTtBQUFLLE1BQUEsU0FBUyxFQUFDO0FBQWYsT0FBMEMseUJBQUcsb0JBQUgsQ0FBMUMsQ0FESixlQUdJO0FBQU0sTUFBQSxTQUFTLEVBQUM7QUFBaEIsT0FBOEMseUJBQUcsWUFBSCxDQUE5QyxDQUhKLGVBSUk7QUFBSyxNQUFBLFNBQVMsRUFBQztBQUFmLG9CQUNJLHVEQUNJO0FBQUssTUFBQSxTQUFTLEVBQUM7QUFBZixvQkFDSSwyQ0FBUSx5QkFBRyw4Q0FBSCxDQUFSLENBREosQ0FESixlQUlJLDZCQUFDLDZCQUFEO0FBQ0ksTUFBQSxLQUFLLEVBQUVJLFdBRFg7QUFFSSxNQUFBLFFBQVEsRUFBRSxLQUFLZSxrQkFGbkI7QUFHSSxNQUFBLEtBQUssRUFBRSx5QkFBRyxXQUFILENBSFg7QUFJSSxNQUFBLFFBQVEsRUFBRSxDQUFDYjtBQUpmLE1BSkosQ0FESixFQVlNQyxrQkFaTixDQUpKLGVBbUJJO0FBQU0sTUFBQSxTQUFTLEVBQUM7QUFBaEIsT0FBOEMseUJBQUcsUUFBSCxDQUE5QyxDQW5CSixlQW9CSTtBQUFLLE1BQUEsU0FBUyxFQUFDO0FBQWYsT0FDTSxLQUFLMUIsY0FBTCxFQUROLENBcEJKLEVBd0JNb0MsUUF4Qk4sRUF5Qk1KLGNBekJOLENBREo7QUE2Qkg7O0FBbGFnRixDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbkNvcHlyaWdodCAyMDE5LTIwMjEgVGhlIE1hdHJpeC5vcmcgRm91bmRhdGlvbiBDLkkuQy5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgR3Vlc3RBY2Nlc3MsIEhpc3RvcnlWaXNpYmlsaXR5LCBKb2luUnVsZSwgUmVzdHJpY3RlZEFsbG93VHlwZSB9IGZyb20gXCJtYXRyaXgtanMtc2RrL3NyYy9AdHlwZXMvcGFydGlhbHNcIjtcbmltcG9ydCB7IE1hdHJpeEV2ZW50IH0gZnJvbSBcIm1hdHJpeC1qcy1zZGsvc3JjL21vZGVscy9ldmVudFwiO1xuaW1wb3J0IHsgRXZlbnRUeXBlIH0gZnJvbSAnbWF0cml4LWpzLXNkay9zcmMvQHR5cGVzL2V2ZW50JztcblxuaW1wb3J0IHsgX3QgfSBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vbGFuZ3VhZ2VIYW5kbGVyXCI7XG5pbXBvcnQgeyBNYXRyaXhDbGllbnRQZWcgfSBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vTWF0cml4Q2xpZW50UGVnXCI7XG5pbXBvcnQgTGFiZWxsZWRUb2dnbGVTd2l0Y2ggZnJvbSBcIi4uLy4uLy4uL2VsZW1lbnRzL0xhYmVsbGVkVG9nZ2xlU3dpdGNoXCI7XG5pbXBvcnQgTW9kYWwgZnJvbSBcIi4uLy4uLy4uLy4uLy4uL01vZGFsXCI7XG5pbXBvcnQgUXVlc3Rpb25EaWFsb2cgZnJvbSBcIi4uLy4uLy4uL2RpYWxvZ3MvUXVlc3Rpb25EaWFsb2dcIjtcbmltcG9ydCBTdHlsZWRSYWRpb0dyb3VwIGZyb20gJy4uLy4uLy4uL2VsZW1lbnRzL1N0eWxlZFJhZGlvR3JvdXAnO1xuaW1wb3J0IHsgU2V0dGluZ0xldmVsIH0gZnJvbSBcIi4uLy4uLy4uLy4uLy4uL3NldHRpbmdzL1NldHRpbmdMZXZlbFwiO1xuaW1wb3J0IFNldHRpbmdzU3RvcmUgZnJvbSBcIi4uLy4uLy4uLy4uLy4uL3NldHRpbmdzL1NldHRpbmdzU3RvcmVcIjtcbmltcG9ydCB7IFVJRmVhdHVyZSB9IGZyb20gXCIuLi8uLi8uLi8uLi8uLi9zZXR0aW5ncy9VSUZlYXR1cmVcIjtcbmltcG9ydCB7IHJlcGxhY2VhYmxlQ29tcG9uZW50IH0gZnJvbSBcIi4uLy4uLy4uLy4uLy4uL3V0aWxzL3JlcGxhY2VhYmxlQ29tcG9uZW50XCI7XG5pbXBvcnQgQWNjZXNzaWJsZUJ1dHRvbiBmcm9tIFwiLi4vLi4vLi4vZWxlbWVudHMvQWNjZXNzaWJsZUJ1dHRvblwiO1xuaW1wb3J0IFNldHRpbmdzRmxhZyBmcm9tICcuLi8uLi8uLi9lbGVtZW50cy9TZXR0aW5nc0ZsYWcnO1xuaW1wb3J0IGNyZWF0ZVJvb20sIHsgSU9wdHMgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9jcmVhdGVSb29tJztcbmltcG9ydCBDcmVhdGVSb29tRGlhbG9nIGZyb20gJy4uLy4uLy4uL2RpYWxvZ3MvQ3JlYXRlUm9vbURpYWxvZyc7XG5pbXBvcnQgSm9pblJ1bGVTZXR0aW5ncyBmcm9tIFwiLi4vLi4vSm9pblJ1bGVTZXR0aW5nc1wiO1xuaW1wb3J0IEVycm9yRGlhbG9nIGZyb20gXCIuLi8uLi8uLi9kaWFsb2dzL0Vycm9yRGlhbG9nXCI7XG5cbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gXCJtYXRyaXgtanMtc2RrL3NyYy9sb2dnZXJcIjtcblxuaW50ZXJmYWNlIElQcm9wcyB7XG4gICAgcm9vbUlkOiBzdHJpbmc7XG4gICAgY2xvc2VTZXR0aW5nc0ZuOiAoKSA9PiB2b2lkO1xufVxuXG5pbnRlcmZhY2UgSVN0YXRlIHtcbiAgICByZXN0cmljdGVkQWxsb3dSb29tSWRzPzogc3RyaW5nW107XG4gICAgZ3Vlc3RBY2Nlc3M6IEd1ZXN0QWNjZXNzO1xuICAgIGhpc3Rvcnk6IEhpc3RvcnlWaXNpYmlsaXR5O1xuICAgIGhhc0FsaWFzZXM6IGJvb2xlYW47XG4gICAgZW5jcnlwdGVkOiBib29sZWFuO1xuICAgIHNob3dBZHZhbmNlZFNlY3Rpb246IGJvb2xlYW47XG59XG5cbkByZXBsYWNlYWJsZUNvbXBvbmVudChcInZpZXdzLnNldHRpbmdzLnRhYnMucm9vbS5TZWN1cml0eVJvb21TZXR0aW5nc1RhYlwiKVxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2VjdXJpdHlSb29tU2V0dGluZ3NUYWIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8SVByb3BzLCBJU3RhdGU+IHtcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG5cbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIGd1ZXN0QWNjZXNzOiBHdWVzdEFjY2Vzcy5Gb3JiaWRkZW4sXG4gICAgICAgICAgICBoaXN0b3J5OiBIaXN0b3J5VmlzaWJpbGl0eS5TaGFyZWQsXG4gICAgICAgICAgICBoYXNBbGlhc2VzOiBmYWxzZSxcbiAgICAgICAgICAgIGVuY3J5cHRlZDogZmFsc2UsXG4gICAgICAgICAgICBzaG93QWR2YW5jZWRTZWN0aW9uOiBmYWxzZSxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBUT0RPOiBbUkVBQ1QtV0FSTklOR10gTW92ZSB0aGlzIHRvIGNvbnN0cnVjdG9yXG4gICAgVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgICAgICBjb25zdCBjbGkgPSBNYXRyaXhDbGllbnRQZWcuZ2V0KCk7XG4gICAgICAgIGNsaS5vbihcIlJvb21TdGF0ZS5ldmVudHNcIiwgdGhpcy5vblN0YXRlRXZlbnQpO1xuXG4gICAgICAgIGNvbnN0IHJvb20gPSBjbGkuZ2V0Um9vbSh0aGlzLnByb3BzLnJvb21JZCk7XG4gICAgICAgIGNvbnN0IHN0YXRlID0gcm9vbS5jdXJyZW50U3RhdGU7XG5cbiAgICAgICAgY29uc3Qgam9pblJ1bGVFdmVudCA9IHN0YXRlLmdldFN0YXRlRXZlbnRzKEV2ZW50VHlwZS5Sb29tSm9pblJ1bGVzLCBcIlwiKTtcbiAgICAgICAgY29uc3Qgam9pblJ1bGU6IEpvaW5SdWxlID0gdGhpcy5wdWxsQ29udGVudFByb3BlcnR5RnJvbUV2ZW50PEpvaW5SdWxlPihcbiAgICAgICAgICAgIGpvaW5SdWxlRXZlbnQsXG4gICAgICAgICAgICAnam9pbl9ydWxlJyxcbiAgICAgICAgICAgIEpvaW5SdWxlLkludml0ZSxcbiAgICAgICAgKTtcbiAgICAgICAgY29uc3QgcmVzdHJpY3RlZEFsbG93Um9vbUlkcyA9IGpvaW5SdWxlID09PSBKb2luUnVsZS5SZXN0cmljdGVkXG4gICAgICAgICAgICA/IGpvaW5SdWxlRXZlbnQ/LmdldENvbnRlbnQoKS5hbGxvd1xuICAgICAgICAgICAgICAgID8uZmlsdGVyKGEgPT4gYS50eXBlID09PSBSZXN0cmljdGVkQWxsb3dUeXBlLlJvb21NZW1iZXJzaGlwKVxuICAgICAgICAgICAgICAgID8ubWFwKGEgPT4gYS5yb29tX2lkKVxuICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgY29uc3QgZ3Vlc3RBY2Nlc3M6IEd1ZXN0QWNjZXNzID0gdGhpcy5wdWxsQ29udGVudFByb3BlcnR5RnJvbUV2ZW50PEd1ZXN0QWNjZXNzPihcbiAgICAgICAgICAgIHN0YXRlLmdldFN0YXRlRXZlbnRzKEV2ZW50VHlwZS5Sb29tR3Vlc3RBY2Nlc3MsIFwiXCIpLFxuICAgICAgICAgICAgJ2d1ZXN0X2FjY2VzcycsXG4gICAgICAgICAgICBHdWVzdEFjY2Vzcy5Gb3JiaWRkZW4sXG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IGhpc3Rvcnk6IEhpc3RvcnlWaXNpYmlsaXR5ID0gdGhpcy5wdWxsQ29udGVudFByb3BlcnR5RnJvbUV2ZW50PEhpc3RvcnlWaXNpYmlsaXR5PihcbiAgICAgICAgICAgIHN0YXRlLmdldFN0YXRlRXZlbnRzKEV2ZW50VHlwZS5Sb29tSGlzdG9yeVZpc2liaWxpdHksIFwiXCIpLFxuICAgICAgICAgICAgJ2hpc3RvcnlfdmlzaWJpbGl0eScsXG4gICAgICAgICAgICBIaXN0b3J5VmlzaWJpbGl0eS5TaGFyZWQsXG4gICAgICAgICk7XG5cbiAgICAgICAgY29uc3QgZW5jcnlwdGVkID0gTWF0cml4Q2xpZW50UGVnLmdldCgpLmlzUm9vbUVuY3J5cHRlZCh0aGlzLnByb3BzLnJvb21JZCk7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyByZXN0cmljdGVkQWxsb3dSb29tSWRzLCBndWVzdEFjY2VzcywgaGlzdG9yeSwgZW5jcnlwdGVkIH0pO1xuXG4gICAgICAgIHRoaXMuaGFzQWxpYXNlcygpLnRoZW4oaGFzQWxpYXNlcyA9PiB0aGlzLnNldFN0YXRlKHsgaGFzQWxpYXNlcyB9KSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBwdWxsQ29udGVudFByb3BlcnR5RnJvbUV2ZW50PFQ+KGV2ZW50OiBNYXRyaXhFdmVudCwga2V5OiBzdHJpbmcsIGRlZmF1bHRWYWx1ZTogVCk6IFQge1xuICAgICAgICByZXR1cm4gZXZlbnQ/LmdldENvbnRlbnQoKVtrZXldIHx8IGRlZmF1bHRWYWx1ZTtcbiAgICB9XG5cbiAgICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgICAgTWF0cml4Q2xpZW50UGVnLmdldCgpLnJlbW92ZUxpc3RlbmVyKFwiUm9vbVN0YXRlLmV2ZW50c1wiLCB0aGlzLm9uU3RhdGVFdmVudCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvblN0YXRlRXZlbnQgPSAoZTogTWF0cml4RXZlbnQpID0+IHtcbiAgICAgICAgY29uc3QgcmVmcmVzaFdoZW5UeXBlczogRXZlbnRUeXBlW10gPSBbXG4gICAgICAgICAgICBFdmVudFR5cGUuUm9vbUpvaW5SdWxlcyxcbiAgICAgICAgICAgIEV2ZW50VHlwZS5Sb29tR3Vlc3RBY2Nlc3MsXG4gICAgICAgICAgICBFdmVudFR5cGUuUm9vbUhpc3RvcnlWaXNpYmlsaXR5LFxuICAgICAgICAgICAgRXZlbnRUeXBlLlJvb21FbmNyeXB0aW9uLFxuICAgICAgICBdO1xuICAgICAgICBpZiAocmVmcmVzaFdoZW5UeXBlcy5pbmNsdWRlcyhlLmdldFR5cGUoKSBhcyBFdmVudFR5cGUpKSB0aGlzLmZvcmNlVXBkYXRlKCk7XG4gICAgfTtcblxuICAgIHByaXZhdGUgb25FbmNyeXB0aW9uQ2hhbmdlID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICBpZiAoTWF0cml4Q2xpZW50UGVnLmdldCgpLmdldFJvb20odGhpcy5wcm9wcy5yb29tSWQpPy5nZXRKb2luUnVsZSgpID09PSBKb2luUnVsZS5QdWJsaWMpIHtcbiAgICAgICAgICAgIGNvbnN0IGRpYWxvZyA9IE1vZGFsLmNyZWF0ZVRyYWNrZWREaWFsb2coJ0NvbmZpcm0gUHVibGljIEVuY3J5cHRlZCBSb29tJywgJycsIFF1ZXN0aW9uRGlhbG9nLCB7XG4gICAgICAgICAgICAgICAgdGl0bGU6IF90KCdBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gYWRkIGVuY3J5cHRpb24gdG8gdGhpcyBwdWJsaWMgcm9vbT8nKSxcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgPHA+IHsgX3QoXG4gICAgICAgICAgICAgICAgICAgICAgICBcIjxiPkl0J3Mgbm90IHJlY29tbWVuZGVkIHRvIGFkZCBlbmNyeXB0aW9uIHRvIHB1YmxpYyByb29tcy48L2I+XCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJBbnlvbmUgY2FuIGZpbmQgYW5kIGpvaW4gcHVibGljIHJvb21zLCBzbyBhbnlvbmUgY2FuIHJlYWQgbWVzc2FnZXMgaW4gdGhlbS4gXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJZb3UnbGwgZ2V0IG5vbmUgb2YgdGhlIGJlbmVmaXRzIG9mIGVuY3J5cHRpb24sIGFuZCB5b3Ugd29uJ3QgYmUgYWJsZSB0byB0dXJuIGl0IFwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwib2ZmIGxhdGVyLiBFbmNyeXB0aW5nIG1lc3NhZ2VzIGluIGEgcHVibGljIHJvb20gd2lsbCBtYWtlIHJlY2VpdmluZyBhbmQgc2VuZGluZyBcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICBcIm1lc3NhZ2VzIHNsb3dlci5cIixcbiAgICAgICAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICB7IFwiYlwiOiAoc3ViKSA9PiA8Yj57IHN1YiB9PC9iPiB9LFxuICAgICAgICAgICAgICAgICAgICApIH0gPC9wPlxuICAgICAgICAgICAgICAgICAgICA8cD4geyBfdChcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiVG8gYXZvaWQgdGhlc2UgaXNzdWVzLCBjcmVhdGUgYSA8YT5uZXcgZW5jcnlwdGVkIHJvb208L2E+IGZvciBcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICBcInRoZSBjb252ZXJzYXRpb24geW91IHBsYW4gdG8gaGF2ZS5cIixcbiAgICAgICAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICB7IFwiYVwiOiAoc3ViKSA9PiA8YVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cIm14X2xpbmtCdXR0b25cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlhbG9nLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlTmV3Um9vbShmYWxzZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfX0+IHsgc3ViIH0gPC9hPiB9LFxuICAgICAgICAgICAgICAgICAgICApIH0gPC9wPlxuICAgICAgICAgICAgICAgIDwvZGl2PixcblxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGNvbnN0IHsgZmluaXNoZWQgfSA9IGRpYWxvZztcbiAgICAgICAgICAgIGNvbnN0IFtjb25maXJtXSA9IGF3YWl0IGZpbmlzaGVkO1xuICAgICAgICAgICAgaWYgKCFjb25maXJtKSByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBNb2RhbC5jcmVhdGVUcmFja2VkRGlhbG9nKCdFbmFibGUgZW5jcnlwdGlvbicsICcnLCBRdWVzdGlvbkRpYWxvZywge1xuICAgICAgICAgICAgdGl0bGU6IF90KCdFbmFibGUgZW5jcnlwdGlvbj8nKSxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBfdChcbiAgICAgICAgICAgICAgICBcIk9uY2UgZW5hYmxlZCwgZW5jcnlwdGlvbiBmb3IgYSByb29tIGNhbm5vdCBiZSBkaXNhYmxlZC4gTWVzc2FnZXMgc2VudCBpbiBhbiBlbmNyeXB0ZWQgXCIgK1xuICAgICAgICAgICAgICAgIFwicm9vbSBjYW5ub3QgYmUgc2VlbiBieSB0aGUgc2VydmVyLCBvbmx5IGJ5IHRoZSBwYXJ0aWNpcGFudHMgb2YgdGhlIHJvb20uIEVuYWJsaW5nIGVuY3J5cHRpb24gXCIgK1xuICAgICAgICAgICAgICAgIFwibWF5IHByZXZlbnQgbWFueSBib3RzIGFuZCBicmlkZ2VzIGZyb20gd29ya2luZyBjb3JyZWN0bHkuIDxhPkxlYXJuIG1vcmUgYWJvdXQgZW5jcnlwdGlvbi48L2E+XCIsXG4gICAgICAgICAgICAgICAge30sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBhOiBzdWIgPT4gPGFcbiAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9XCJodHRwczovL2VsZW1lbnQuaW8vaGVscCNlbmNyeXB0aW9uXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbD1cIm5vcmVmZXJyZXIgbm9vcGVuZXJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0PVwiX2JsYW5rXCJcbiAgICAgICAgICAgICAgICAgICAgPnsgc3ViIH08L2E+LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgb25GaW5pc2hlZDogKGNvbmZpcm0pID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIWNvbmZpcm0pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGVuY3J5cHRlZDogZmFsc2UgfSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjb25zdCBiZWZvcmVFbmNyeXB0ZWQgPSB0aGlzLnN0YXRlLmVuY3J5cHRlZDtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgZW5jcnlwdGVkOiB0cnVlIH0pO1xuICAgICAgICAgICAgICAgIE1hdHJpeENsaWVudFBlZy5nZXQoKS5zZW5kU3RhdGVFdmVudChcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5yb29tSWQsIEV2ZW50VHlwZS5Sb29tRW5jcnlwdGlvbixcbiAgICAgICAgICAgICAgICAgICAgeyBhbGdvcml0aG06IFwibS5tZWdvbG0udjEuYWVzLXNoYTJcIiB9LFxuICAgICAgICAgICAgICAgICkuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKGUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgZW5jcnlwdGVkOiBiZWZvcmVFbmNyeXB0ZWQgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgcHJpdmF0ZSBvbkd1ZXN0QWNjZXNzQ2hhbmdlID0gKGFsbG93ZWQ6IGJvb2xlYW4pID0+IHtcbiAgICAgICAgY29uc3QgZ3Vlc3RBY2Nlc3MgPSBhbGxvd2VkID8gR3Vlc3RBY2Nlc3MuQ2FuSm9pbiA6IEd1ZXN0QWNjZXNzLkZvcmJpZGRlbjtcbiAgICAgICAgY29uc3QgYmVmb3JlR3Vlc3RBY2Nlc3MgPSB0aGlzLnN0YXRlLmd1ZXN0QWNjZXNzO1xuICAgICAgICBpZiAoYmVmb3JlR3Vlc3RBY2Nlc3MgPT09IGd1ZXN0QWNjZXNzKSByZXR1cm47XG5cbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGd1ZXN0QWNjZXNzIH0pO1xuXG4gICAgICAgIGNvbnN0IGNsaWVudCA9IE1hdHJpeENsaWVudFBlZy5nZXQoKTtcbiAgICAgICAgY2xpZW50LnNlbmRTdGF0ZUV2ZW50KHRoaXMucHJvcHMucm9vbUlkLCBFdmVudFR5cGUuUm9vbUd1ZXN0QWNjZXNzLCB7XG4gICAgICAgICAgICBndWVzdF9hY2Nlc3M6IGd1ZXN0QWNjZXNzLFxuICAgICAgICB9LCBcIlwiKS5jYXRjaCgoZSkgPT4ge1xuICAgICAgICAgICAgbG9nZ2VyLmVycm9yKGUpO1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGd1ZXN0QWNjZXNzOiBiZWZvcmVHdWVzdEFjY2VzcyB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIHByaXZhdGUgY3JlYXRlTmV3Um9vbSA9IGFzeW5jIChkZWZhdWx0UHVibGljOiBib29sZWFuLCBkZWZhdWx0RW5jcnlwdGVkOiBib29sZWFuKSA9PiB7XG4gICAgICAgIGNvbnN0IG1vZGFsID0gTW9kYWwuY3JlYXRlVHJhY2tlZERpYWxvZzxbYm9vbGVhbiwgSU9wdHNdPihcbiAgICAgICAgICAgIFwiQ3JlYXRlIFJvb21cIixcbiAgICAgICAgICAgIFwiQ3JlYXRlIHJvb20gYWZ0ZXIgdHJ5aW5nIHRvIG1ha2UgYW4gRTJFRSByb29tIHB1YmxpY1wiLFxuICAgICAgICAgICAgQ3JlYXRlUm9vbURpYWxvZyxcbiAgICAgICAgICAgIHsgZGVmYXVsdFB1YmxpYywgZGVmYXVsdEVuY3J5cHRlZCB9LFxuICAgICAgICApO1xuICAgICAgICBjb25zdCBbc2hvdWxkQ3JlYXRlLCBvcHRzXSA9IGF3YWl0IG1vZGFsLmZpbmlzaGVkO1xuICAgICAgICBpZiAoc2hvdWxkQ3JlYXRlKSB7XG4gICAgICAgICAgICBhd2FpdCBjcmVhdGVSb29tKG9wdHMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzaG91bGRDcmVhdGU7XG4gICAgfTtcblxuICAgIHByaXZhdGUgb25IaXN0b3J5UmFkaW9Ub2dnbGUgPSAoaGlzdG9yeTogSGlzdG9yeVZpc2liaWxpdHkpID0+IHtcbiAgICAgICAgY29uc3QgYmVmb3JlSGlzdG9yeSA9IHRoaXMuc3RhdGUuaGlzdG9yeTtcbiAgICAgICAgaWYgKGJlZm9yZUhpc3RvcnkgPT09IGhpc3RvcnkpIHJldHVybjtcblxuICAgICAgICB0aGlzLnNldFN0YXRlKHsgaGlzdG9yeTogaGlzdG9yeSB9KTtcbiAgICAgICAgTWF0cml4Q2xpZW50UGVnLmdldCgpLnNlbmRTdGF0ZUV2ZW50KHRoaXMucHJvcHMucm9vbUlkLCBFdmVudFR5cGUuUm9vbUhpc3RvcnlWaXNpYmlsaXR5LCB7XG4gICAgICAgICAgICBoaXN0b3J5X3Zpc2liaWxpdHk6IGhpc3RvcnksXG4gICAgICAgIH0sIFwiXCIpLmNhdGNoKChlKSA9PiB7XG4gICAgICAgICAgICBsb2dnZXIuZXJyb3IoZSk7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgaGlzdG9yeTogYmVmb3JlSGlzdG9yeSB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIHByaXZhdGUgdXBkYXRlQmxhY2tsaXN0RGV2aWNlc0ZsYWcgPSAoY2hlY2tlZDogYm9vbGVhbikgPT4ge1xuICAgICAgICBNYXRyaXhDbGllbnRQZWcuZ2V0KCkuZ2V0Um9vbSh0aGlzLnByb3BzLnJvb21JZCkuc2V0QmxhY2tsaXN0VW52ZXJpZmllZERldmljZXMoY2hlY2tlZCk7XG4gICAgfTtcblxuICAgIHByaXZhdGUgYXN5bmMgaGFzQWxpYXNlcygpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICAgICAgY29uc3QgY2xpID0gTWF0cml4Q2xpZW50UGVnLmdldCgpO1xuICAgICAgICBpZiAoYXdhaXQgY2xpLmRvZXNTZXJ2ZXJTdXBwb3J0VW5zdGFibGVGZWF0dXJlKFwib3JnLm1hdHJpeC5tc2MyNDMyXCIpKSB7XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGNsaS51bnN0YWJsZUdldExvY2FsQWxpYXNlcyh0aGlzLnByb3BzLnJvb21JZCk7XG4gICAgICAgICAgICBjb25zdCBsb2NhbEFsaWFzZXMgPSByZXNwb25zZS5hbGlhc2VzO1xuICAgICAgICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkobG9jYWxBbGlhc2VzKSAmJiBsb2NhbEFsaWFzZXMubGVuZ3RoICE9PSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3Qgcm9vbSA9IGNsaS5nZXRSb29tKHRoaXMucHJvcHMucm9vbUlkKTtcbiAgICAgICAgICAgIGNvbnN0IGFsaWFzRXZlbnRzID0gcm9vbS5jdXJyZW50U3RhdGUuZ2V0U3RhdGVFdmVudHMoRXZlbnRUeXBlLlJvb21BbGlhc2VzKSB8fCBbXTtcbiAgICAgICAgICAgIGNvbnN0IGhhc0FsaWFzZXMgPSAhIWFsaWFzRXZlbnRzLmZpbmQoKGV2KSA9PiAoZXYuZ2V0Q29udGVudCgpLmFsaWFzZXMgfHwgW10pLmxlbmd0aCA+IDApO1xuICAgICAgICAgICAgcmV0dXJuIGhhc0FsaWFzZXM7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHJlbmRlckpvaW5SdWxlKCkge1xuICAgICAgICBjb25zdCBjbGllbnQgPSBNYXRyaXhDbGllbnRQZWcuZ2V0KCk7XG4gICAgICAgIGNvbnN0IHJvb20gPSBjbGllbnQuZ2V0Um9vbSh0aGlzLnByb3BzLnJvb21JZCk7XG5cbiAgICAgICAgbGV0IGFsaWFzV2FybmluZyA9IG51bGw7XG4gICAgICAgIGlmIChyb29tLmdldEpvaW5SdWxlKCkgPT09IEpvaW5SdWxlLlB1YmxpYyAmJiAhdGhpcy5zdGF0ZS5oYXNBbGlhc2VzKSB7XG4gICAgICAgICAgICBhbGlhc1dhcm5pbmcgPSAoXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J214X1NlY3VyaXR5Um9vbVNldHRpbmdzVGFiX3dhcm5pbmcnPlxuICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz17cmVxdWlyZShcIi4uLy4uLy4uLy4uLy4uLy4uL3Jlcy9pbWcvd2FybmluZy5zdmdcIil9IHdpZHRoPXsxNX0gaGVpZ2h0PXsxNX0gLz5cbiAgICAgICAgICAgICAgICAgICAgPHNwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICB7IF90KFwiVG8gbGluayB0byB0aGlzIHJvb20sIHBsZWFzZSBhZGQgYW4gYWRkcmVzcy5cIikgfVxuICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPVwibXhfU2VjdXJpdHlSb29tU2V0dGluZ3NUYWJfam9pblJ1bGVcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibXhfU2V0dGluZ3NUYWJfc3Vic2VjdGlvblRleHRcIj5cbiAgICAgICAgICAgICAgICA8c3Bhbj57IF90KFwiRGVjaWRlIHdobyBjYW4gam9pbiAlKHJvb21OYW1lKXMuXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgcm9vbU5hbWU6IHJvb20/Lm5hbWUsXG4gICAgICAgICAgICAgICAgfSkgfTwvc3Bhbj5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICB7IGFsaWFzV2FybmluZyB9XG5cbiAgICAgICAgICAgIDxKb2luUnVsZVNldHRpbmdzXG4gICAgICAgICAgICAgICAgcm9vbT17cm9vbX1cbiAgICAgICAgICAgICAgICBiZWZvcmVDaGFuZ2U9e3RoaXMub25CZWZvcmVKb2luUnVsZUNoYW5nZX1cbiAgICAgICAgICAgICAgICBvbkVycm9yPXt0aGlzLm9uSm9pblJ1bGVDaGFuZ2VFcnJvcn1cbiAgICAgICAgICAgICAgICBjbG9zZVNldHRpbmdzRm49e3RoaXMucHJvcHMuY2xvc2VTZXR0aW5nc0ZufVxuICAgICAgICAgICAgICAgIHByb21wdFVwZ3JhZGU9e3RydWV9XG4gICAgICAgICAgICAvPlxuICAgICAgICA8L2Rpdj47XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvbkpvaW5SdWxlQ2hhbmdlRXJyb3IgPSAoZXJyb3I6IEVycm9yKSA9PiB7XG4gICAgICAgIE1vZGFsLmNyZWF0ZVRyYWNrZWREaWFsb2coJ1Jvb20gbm90IGZvdW5kJywgJycsIEVycm9yRGlhbG9nLCB7XG4gICAgICAgICAgICB0aXRsZTogX3QoXCJGYWlsZWQgdG8gdXBkYXRlIHRoZSBqb2luIHJ1bGVzXCIpLFxuICAgICAgICAgICAgZGVzY3JpcHRpb246IGVycm9yLm1lc3NhZ2UgPz8gX3QoXCJVbmtub3duIGZhaWx1cmVcIiksXG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBwcml2YXRlIG9uQmVmb3JlSm9pblJ1bGVDaGFuZ2UgPSBhc3luYyAoam9pblJ1bGU6IEpvaW5SdWxlKTogUHJvbWlzZTxib29sZWFuPiA9PiB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmVuY3J5cHRlZCAmJiBqb2luUnVsZSA9PT0gSm9pblJ1bGUuUHVibGljKSB7XG4gICAgICAgICAgICBjb25zdCBkaWFsb2cgPSBNb2RhbC5jcmVhdGVUcmFja2VkRGlhbG9nKCdDb25maXJtIFB1YmxpYyBFbmNyeXB0ZWQgUm9vbScsICcnLCBRdWVzdGlvbkRpYWxvZywge1xuICAgICAgICAgICAgICAgIHRpdGxlOiBfdChcIkFyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBtYWtlIHRoaXMgZW5jcnlwdGVkIHJvb20gcHVibGljP1wiKSxcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgPHA+IHsgX3QoXG4gICAgICAgICAgICAgICAgICAgICAgICBcIjxiPkl0J3Mgbm90IHJlY29tbWVuZGVkIHRvIG1ha2UgZW5jcnlwdGVkIHJvb21zIHB1YmxpYy48L2I+IFwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiSXQgd2lsbCBtZWFuIGFueW9uZSBjYW4gZmluZCBhbmQgam9pbiB0aGUgcm9vbSwgc28gYW55b25lIGNhbiByZWFkIG1lc3NhZ2VzLiBcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICBcIllvdSdsbCBnZXQgbm9uZSBvZiB0aGUgYmVuZWZpdHMgb2YgZW5jcnlwdGlvbi4gRW5jcnlwdGluZyBtZXNzYWdlcyBpbiBhIHB1YmxpYyBcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICBcInJvb20gd2lsbCBtYWtlIHJlY2VpdmluZyBhbmQgc2VuZGluZyBtZXNzYWdlcyBzbG93ZXIuXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgeyBcImJcIjogKHN1YikgPT4gPGI+eyBzdWIgfTwvYj4gfSxcbiAgICAgICAgICAgICAgICAgICAgKSB9IDwvcD5cbiAgICAgICAgICAgICAgICAgICAgPHA+IHsgX3QoXG4gICAgICAgICAgICAgICAgICAgICAgICBcIlRvIGF2b2lkIHRoZXNlIGlzc3VlcywgY3JlYXRlIGEgPGE+bmV3IHB1YmxpYyByb29tPC9hPiBmb3IgdGhlIGNvbnZlcnNhdGlvbiBcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICBcInlvdSBwbGFuIHRvIGhhdmUuXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiYVwiOiAoc3ViKSA9PiA8YVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJteF9saW5rQnV0dG9uXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlhbG9nLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNyZWF0ZU5ld1Jvb20odHJ1ZSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fT4geyBzdWIgfSA8L2E+LFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgKSB9IDwvcD5cbiAgICAgICAgICAgICAgICA8L2Rpdj4sXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgY29uc3QgeyBmaW5pc2hlZCB9ID0gZGlhbG9nO1xuICAgICAgICAgICAgY29uc3QgW2NvbmZpcm1dID0gYXdhaXQgZmluaXNoZWQ7XG4gICAgICAgICAgICBpZiAoIWNvbmZpcm0pIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG5cbiAgICBwcml2YXRlIHJlbmRlckhpc3RvcnkoKSB7XG4gICAgICAgIGNvbnN0IGNsaWVudCA9IE1hdHJpeENsaWVudFBlZy5nZXQoKTtcbiAgICAgICAgY29uc3QgaGlzdG9yeSA9IHRoaXMuc3RhdGUuaGlzdG9yeTtcbiAgICAgICAgY29uc3Qgc3RhdGUgPSBjbGllbnQuZ2V0Um9vbSh0aGlzLnByb3BzLnJvb21JZCkuY3VycmVudFN0YXRlO1xuICAgICAgICBjb25zdCBjYW5DaGFuZ2VIaXN0b3J5ID0gc3RhdGUubWF5Q2xpZW50U2VuZFN0YXRlRXZlbnQoRXZlbnRUeXBlLlJvb21IaXN0b3J5VmlzaWJpbGl0eSwgY2xpZW50KTtcblxuICAgICAgICBjb25zdCBvcHRpb25zID0gW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBIaXN0b3J5VmlzaWJpbGl0eS5TaGFyZWQsXG4gICAgICAgICAgICAgICAgbGFiZWw6IF90KCdNZW1iZXJzIG9ubHkgKHNpbmNlIHRoZSBwb2ludCBpbiB0aW1lIG9mIHNlbGVjdGluZyB0aGlzIG9wdGlvbiknKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IEhpc3RvcnlWaXNpYmlsaXR5Lkludml0ZWQsXG4gICAgICAgICAgICAgICAgbGFiZWw6IF90KCdNZW1iZXJzIG9ubHkgKHNpbmNlIHRoZXkgd2VyZSBpbnZpdGVkKScpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogSGlzdG9yeVZpc2liaWxpdHkuSm9pbmVkLFxuICAgICAgICAgICAgICAgIGxhYmVsOiBfdCgnTWVtYmVycyBvbmx5IChzaW5jZSB0aGV5IGpvaW5lZCknKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF07XG5cbiAgICAgICAgLy8gV29ybGQgcmVhZGFibGUgZG9lc24ndCBtYWtlIHNlbnNlIGZvciBlbmNyeXB0ZWQgcm9vbXNcbiAgICAgICAgaWYgKCF0aGlzLnN0YXRlLmVuY3J5cHRlZCB8fCBoaXN0b3J5ID09PSBIaXN0b3J5VmlzaWJpbGl0eS5Xb3JsZFJlYWRhYmxlKSB7XG4gICAgICAgICAgICBvcHRpb25zLnVuc2hpZnQoe1xuICAgICAgICAgICAgICAgIHZhbHVlOiBIaXN0b3J5VmlzaWJpbGl0eS5Xb3JsZFJlYWRhYmxlLFxuICAgICAgICAgICAgICAgIGxhYmVsOiBfdChcIkFueW9uZVwiKSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgeyBfdCgnQ2hhbmdlcyB0byB3aG8gY2FuIHJlYWQgaGlzdG9yeSB3aWxsIG9ubHkgYXBwbHkgdG8gZnV0dXJlIG1lc3NhZ2VzIGluIHRoaXMgcm9vbS4gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnVGhlIHZpc2liaWxpdHkgb2YgZXhpc3RpbmcgaGlzdG9yeSB3aWxsIGJlIHVuY2hhbmdlZC4nKSB9XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPFN0eWxlZFJhZGlvR3JvdXBcbiAgICAgICAgICAgICAgICAgICAgbmFtZT1cImhpc3RvcnlWaXNcIlxuICAgICAgICAgICAgICAgICAgICB2YWx1ZT17aGlzdG9yeX1cbiAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMub25IaXN0b3J5UmFkaW9Ub2dnbGV9XG4gICAgICAgICAgICAgICAgICAgIGRpc2FibGVkPXshY2FuQ2hhbmdlSGlzdG9yeX1cbiAgICAgICAgICAgICAgICAgICAgZGVmaW5pdGlvbnM9e29wdGlvbnN9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICApO1xuICAgIH1cblxuICAgIHByaXZhdGUgdG9nZ2xlQWR2YW5jZWRTZWN0aW9uID0gKCkgPT4ge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHsgc2hvd0FkdmFuY2VkU2VjdGlvbjogIXRoaXMuc3RhdGUuc2hvd0FkdmFuY2VkU2VjdGlvbiB9KTtcbiAgICB9O1xuXG4gICAgcHJpdmF0ZSByZW5kZXJBZHZhbmNlZCgpIHtcbiAgICAgICAgY29uc3QgY2xpZW50ID0gTWF0cml4Q2xpZW50UGVnLmdldCgpO1xuICAgICAgICBjb25zdCBndWVzdEFjY2VzcyA9IHRoaXMuc3RhdGUuZ3Vlc3RBY2Nlc3M7XG4gICAgICAgIGNvbnN0IHN0YXRlID0gY2xpZW50LmdldFJvb20odGhpcy5wcm9wcy5yb29tSWQpLmN1cnJlbnRTdGF0ZTtcbiAgICAgICAgY29uc3QgY2FuU2V0R3Vlc3RBY2Nlc3MgPSBzdGF0ZS5tYXlDbGllbnRTZW5kU3RhdGVFdmVudChFdmVudFR5cGUuUm9vbUd1ZXN0QWNjZXNzLCBjbGllbnQpO1xuXG4gICAgICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cIm14X1NldHRpbmdzVGFiX3NlY3Rpb25cIj5cbiAgICAgICAgICAgIDxMYWJlbGxlZFRvZ2dsZVN3aXRjaFxuICAgICAgICAgICAgICAgIHZhbHVlPXtndWVzdEFjY2VzcyA9PT0gR3Vlc3RBY2Nlc3MuQ2FuSm9pbn1cbiAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5vbkd1ZXN0QWNjZXNzQ2hhbmdlfVxuICAgICAgICAgICAgICAgIGRpc2FibGVkPXshY2FuU2V0R3Vlc3RBY2Nlc3N9XG4gICAgICAgICAgICAgICAgbGFiZWw9e190KFwiRW5hYmxlIGd1ZXN0IGFjY2Vzc1wiKX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8cD5cbiAgICAgICAgICAgICAgICB7IF90KFwiUGVvcGxlIHdpdGggc3VwcG9ydGVkIGNsaWVudHMgd2lsbCBiZSBhYmxlIHRvIGpvaW4gXCIgK1xuICAgICAgICAgICAgICAgICAgICBcInRoZSByb29tIHdpdGhvdXQgaGF2aW5nIGEgcmVnaXN0ZXJlZCBhY2NvdW50LlwiKSB9XG4gICAgICAgICAgICA8L3A+XG4gICAgICAgIDwvZGl2PjtcbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGNvbnN0IGNsaWVudCA9IE1hdHJpeENsaWVudFBlZy5nZXQoKTtcbiAgICAgICAgY29uc3Qgcm9vbSA9IGNsaWVudC5nZXRSb29tKHRoaXMucHJvcHMucm9vbUlkKTtcbiAgICAgICAgY29uc3QgaXNFbmNyeXB0ZWQgPSB0aGlzLnN0YXRlLmVuY3J5cHRlZDtcbiAgICAgICAgY29uc3QgaGFzRW5jcnlwdGlvblBlcm1pc3Npb24gPSByb29tLmN1cnJlbnRTdGF0ZS5tYXlDbGllbnRTZW5kU3RhdGVFdmVudChFdmVudFR5cGUuUm9vbUVuY3J5cHRpb24sIGNsaWVudCk7XG4gICAgICAgIGNvbnN0IGNhbkVuYWJsZUVuY3J5cHRpb24gPSAhaXNFbmNyeXB0ZWQgJiYgaGFzRW5jcnlwdGlvblBlcm1pc3Npb247XG5cbiAgICAgICAgbGV0IGVuY3J5cHRpb25TZXR0aW5ncyA9IG51bGw7XG4gICAgICAgIGlmIChpc0VuY3J5cHRlZCAmJiBTZXR0aW5nc1N0b3JlLmlzRW5hYmxlZChcImJsYWNrbGlzdFVudmVyaWZpZWREZXZpY2VzXCIpKSB7XG4gICAgICAgICAgICBlbmNyeXB0aW9uU2V0dGluZ3MgPSA8U2V0dGluZ3NGbGFnXG4gICAgICAgICAgICAgICAgbmFtZT1cImJsYWNrbGlzdFVudmVyaWZpZWREZXZpY2VzXCJcbiAgICAgICAgICAgICAgICBsZXZlbD17U2V0dGluZ0xldmVsLlJPT01fREVWSUNFfVxuICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLnVwZGF0ZUJsYWNrbGlzdERldmljZXNGbGFnfVxuICAgICAgICAgICAgICAgIHJvb21JZD17dGhpcy5wcm9wcy5yb29tSWR9XG4gICAgICAgICAgICAvPjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBoaXN0b3J5U2VjdGlvbiA9ICg8PlxuICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPSdteF9TZXR0aW5nc1RhYl9zdWJoZWFkaW5nJz57IF90KFwiV2hvIGNhbiByZWFkIGhpc3Rvcnk/XCIpIH08L3NwYW4+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nbXhfU2V0dGluZ3NUYWJfc2VjdGlvbiBteF9TZXR0aW5nc1RhYl9zdWJzZWN0aW9uVGV4dCc+XG4gICAgICAgICAgICAgICAgeyB0aGlzLnJlbmRlckhpc3RvcnkoKSB9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC8+KTtcbiAgICAgICAgaWYgKCFTZXR0aW5nc1N0b3JlLmdldFZhbHVlKFVJRmVhdHVyZS5Sb29tSGlzdG9yeVNldHRpbmdzKSkge1xuICAgICAgICAgICAgaGlzdG9yeVNlY3Rpb24gPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGFkdmFuY2VkO1xuICAgICAgICBpZiAocm9vbS5nZXRKb2luUnVsZSgpID09PSBKb2luUnVsZS5QdWJsaWMpIHtcbiAgICAgICAgICAgIGFkdmFuY2VkID0gKFxuICAgICAgICAgICAgICAgIDw+XG4gICAgICAgICAgICAgICAgICAgIDxBY2Nlc3NpYmxlQnV0dG9uXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLnRvZ2dsZUFkdmFuY2VkU2VjdGlvbn1cbiAgICAgICAgICAgICAgICAgICAgICAgIGtpbmQ9XCJsaW5rXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cIm14X1NldHRpbmdzVGFiX3Nob3dBZHZhbmNlZFwiXG4gICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgIHsgdGhpcy5zdGF0ZS5zaG93QWR2YW5jZWRTZWN0aW9uID8gX3QoXCJIaWRlIGFkdmFuY2VkXCIpIDogX3QoXCJTaG93IGFkdmFuY2VkXCIpIH1cbiAgICAgICAgICAgICAgICAgICAgPC9BY2Nlc3NpYmxlQnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICB7IHRoaXMuc3RhdGUuc2hvd0FkdmFuY2VkU2VjdGlvbiAmJiB0aGlzLnJlbmRlckFkdmFuY2VkKCkgfVxuICAgICAgICAgICAgICAgIDwvPlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm14X1NldHRpbmdzVGFiIG14X1NlY3VyaXR5Um9vbVNldHRpbmdzVGFiXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJteF9TZXR0aW5nc1RhYl9oZWFkaW5nXCI+eyBfdChcIlNlY3VyaXR5ICYgUHJpdmFjeVwiKSB9PC9kaXY+XG5cbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9J214X1NldHRpbmdzVGFiX3N1YmhlYWRpbmcnPnsgX3QoXCJFbmNyeXB0aW9uXCIpIH08L3NwYW4+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J214X1NldHRpbmdzVGFiX3NlY3Rpb24gbXhfU2VjdXJpdHlSb29tU2V0dGluZ3NUYWJfZW5jcnlwdGlvblNlY3Rpb24nPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J214X1NldHRpbmdzVGFiX3N1YnNlY3Rpb25UZXh0Jz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj57IF90KFwiT25jZSBlbmFibGVkLCBlbmNyeXB0aW9uIGNhbm5vdCBiZSBkaXNhYmxlZC5cIikgfTwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPExhYmVsbGVkVG9nZ2xlU3dpdGNoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e2lzRW5jcnlwdGVkfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLm9uRW5jcnlwdGlvbkNoYW5nZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbD17X3QoXCJFbmNyeXB0ZWRcIil9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ9eyFjYW5FbmFibGVFbmNyeXB0aW9ufVxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIHsgZW5jcnlwdGlvblNldHRpbmdzIH1cbiAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT0nbXhfU2V0dGluZ3NUYWJfc3ViaGVhZGluZyc+eyBfdChcIkFjY2Vzc1wiKSB9PC9zcGFuPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdteF9TZXR0aW5nc1RhYl9zZWN0aW9uIG14X1NldHRpbmdzVGFiX3N1YnNlY3Rpb25UZXh0Jz5cbiAgICAgICAgICAgICAgICAgICAgeyB0aGlzLnJlbmRlckpvaW5SdWxlKCkgfVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgeyBhZHZhbmNlZCB9XG4gICAgICAgICAgICAgICAgeyBoaXN0b3J5U2VjdGlvbiB9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICB9XG59XG4iXX0=