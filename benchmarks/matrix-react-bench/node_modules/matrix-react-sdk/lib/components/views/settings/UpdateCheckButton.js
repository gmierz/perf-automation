"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _BasePlatform = require("../../../BasePlatform");

var _PlatformPeg = _interopRequireDefault(require("../../../PlatformPeg"));

var _useDispatcher = require("../../../hooks/useDispatcher");

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _actions = require("../../../dispatcher/actions");

var _languageHandler = require("../../../languageHandler");

var _InlineSpinner = _interopRequireDefault(require("../../../components/views/elements/InlineSpinner"));

var _AccessibleButton = _interopRequireDefault(require("../../../components/views/elements/AccessibleButton"));

const _excluded = ["action"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function installUpdate() {
  _PlatformPeg.default.get().installUpdate();
}

function getStatusText(status, errorDetail) {
  switch (status) {
    case _BasePlatform.UpdateCheckStatus.Error:
      return (0, _languageHandler._t)('Error encountered (%(errorDetail)s).', {
        errorDetail
      });

    case _BasePlatform.UpdateCheckStatus.Checking:
      return (0, _languageHandler._t)('Checking for an update...');

    case _BasePlatform.UpdateCheckStatus.NotAvailable:
      return (0, _languageHandler._t)('No update available.');

    case _BasePlatform.UpdateCheckStatus.Downloading:
      return (0, _languageHandler._t)('Downloading update...');

    case _BasePlatform.UpdateCheckStatus.Ready:
      return (0, _languageHandler._t)("New version available. <a>Update now.</a>", {}, {
        a: sub => /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
          kind: "link",
          onClick: installUpdate
        }, sub)
      });
  }
}

const doneStatuses = [_BasePlatform.UpdateCheckStatus.Ready, _BasePlatform.UpdateCheckStatus.Error, _BasePlatform.UpdateCheckStatus.NotAvailable];

const UpdateCheckButton = () => {
  const [state, setState] = (0, _react.useState)(null);

  const onCheckForUpdateClick = () => {
    setState(null);

    _PlatformPeg.default.get().startUpdateCheck();
  };

  (0, _useDispatcher.useDispatcher)(_dispatcher.default, _ref => {
    let {
      action
    } = _ref,
        params = (0, _objectWithoutProperties2.default)(_ref, _excluded);

    if (action === _actions.Action.CheckUpdates) {
      setState(params);
    }
  });
  const busy = state && !doneStatuses.includes(state.status);
  let suffix;

  if (state) {
    suffix = /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_UpdateCheckButton_summary"
    }, getStatusText(state.status, state.detail), busy && /*#__PURE__*/_react.default.createElement(_InlineSpinner.default, null));
  }

  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
    onClick: onCheckForUpdateClick,
    kind: "primary",
    disabled: busy
  }, (0, _languageHandler._t)("Check for update")), suffix);
};

var _default = UpdateCheckButton;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL3NldHRpbmdzL1VwZGF0ZUNoZWNrQnV0dG9uLnRzeCJdLCJuYW1lcyI6WyJpbnN0YWxsVXBkYXRlIiwiUGxhdGZvcm1QZWciLCJnZXQiLCJnZXRTdGF0dXNUZXh0Iiwic3RhdHVzIiwiZXJyb3JEZXRhaWwiLCJVcGRhdGVDaGVja1N0YXR1cyIsIkVycm9yIiwiQ2hlY2tpbmciLCJOb3RBdmFpbGFibGUiLCJEb3dubG9hZGluZyIsIlJlYWR5IiwiYSIsInN1YiIsImRvbmVTdGF0dXNlcyIsIlVwZGF0ZUNoZWNrQnV0dG9uIiwic3RhdGUiLCJzZXRTdGF0ZSIsIm9uQ2hlY2tGb3JVcGRhdGVDbGljayIsInN0YXJ0VXBkYXRlQ2hlY2siLCJkaXMiLCJhY3Rpb24iLCJwYXJhbXMiLCJBY3Rpb24iLCJDaGVja1VwZGF0ZXMiLCJidXN5IiwiaW5jbHVkZXMiLCJzdWZmaXgiLCJkZXRhaWwiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBZ0JBOztBQUVBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOzs7Ozs7OztBQUdBLFNBQVNBLGFBQVQsR0FBeUI7QUFDckJDLHVCQUFZQyxHQUFaLEdBQWtCRixhQUFsQjtBQUNIOztBQUVELFNBQVNHLGFBQVQsQ0FBdUJDLE1BQXZCLEVBQWtEQyxXQUFsRCxFQUF3RTtBQUNwRSxVQUFRRCxNQUFSO0FBQ0ksU0FBS0UsZ0NBQWtCQyxLQUF2QjtBQUNJLGFBQU8seUJBQUcsc0NBQUgsRUFBMkM7QUFBRUYsUUFBQUE7QUFBRixPQUEzQyxDQUFQOztBQUNKLFNBQUtDLGdDQUFrQkUsUUFBdkI7QUFDSSxhQUFPLHlCQUFHLDJCQUFILENBQVA7O0FBQ0osU0FBS0YsZ0NBQWtCRyxZQUF2QjtBQUNJLGFBQU8seUJBQUcsc0JBQUgsQ0FBUDs7QUFDSixTQUFLSCxnQ0FBa0JJLFdBQXZCO0FBQ0ksYUFBTyx5QkFBRyx1QkFBSCxDQUFQOztBQUNKLFNBQUtKLGdDQUFrQkssS0FBdkI7QUFDSSxhQUFPLHlCQUFHLDJDQUFILEVBQWdELEVBQWhELEVBQW9EO0FBQ3ZEQyxRQUFBQSxDQUFDLEVBQUVDLEdBQUcsaUJBQUksNkJBQUMseUJBQUQ7QUFBa0IsVUFBQSxJQUFJLEVBQUMsTUFBdkI7QUFBOEIsVUFBQSxPQUFPLEVBQUViO0FBQXZDLFdBQXdEYSxHQUF4RDtBQUQ2QyxPQUFwRCxDQUFQO0FBVlI7QUFjSDs7QUFFRCxNQUFNQyxZQUFZLEdBQUcsQ0FDakJSLGdDQUFrQkssS0FERCxFQUVqQkwsZ0NBQWtCQyxLQUZELEVBR2pCRCxnQ0FBa0JHLFlBSEQsQ0FBckI7O0FBTUEsTUFBTU0saUJBQWlCLEdBQUcsTUFBTTtBQUM1QixRQUFNLENBQUNDLEtBQUQsRUFBUUMsUUFBUixJQUFvQixxQkFBOEIsSUFBOUIsQ0FBMUI7O0FBRUEsUUFBTUMscUJBQXFCLEdBQUcsTUFBTTtBQUNoQ0QsSUFBQUEsUUFBUSxDQUFDLElBQUQsQ0FBUjs7QUFDQWhCLHlCQUFZQyxHQUFaLEdBQWtCaUIsZ0JBQWxCO0FBQ0gsR0FIRDs7QUFLQSxvQ0FBY0MsbUJBQWQsRUFBbUIsUUFBMkI7QUFBQSxRQUExQjtBQUFFQyxNQUFBQTtBQUFGLEtBQTBCO0FBQUEsUUFBYkMsTUFBYTs7QUFDMUMsUUFBSUQsTUFBTSxLQUFLRSxnQkFBT0MsWUFBdEIsRUFBb0M7QUFDaENQLE1BQUFBLFFBQVEsQ0FBQ0ssTUFBRCxDQUFSO0FBQ0g7QUFDSixHQUpEO0FBTUEsUUFBTUcsSUFBSSxHQUFHVCxLQUFLLElBQUksQ0FBQ0YsWUFBWSxDQUFDWSxRQUFiLENBQXNCVixLQUFLLENBQUNaLE1BQTVCLENBQXZCO0FBRUEsTUFBSXVCLE1BQUo7O0FBQ0EsTUFBSVgsS0FBSixFQUFXO0FBQ1BXLElBQUFBLE1BQU0sZ0JBQUc7QUFBTSxNQUFBLFNBQVMsRUFBQztBQUFoQixPQUNIeEIsYUFBYSxDQUFDYSxLQUFLLENBQUNaLE1BQVAsRUFBZVksS0FBSyxDQUFDWSxNQUFyQixDQURWLEVBRUhILElBQUksaUJBQUksNkJBQUMsc0JBQUQsT0FGTCxDQUFUO0FBSUg7O0FBRUQsc0JBQU8sNkJBQUMsY0FBRCxDQUFPLFFBQVAscUJBQ0gsNkJBQUMseUJBQUQ7QUFBa0IsSUFBQSxPQUFPLEVBQUVQLHFCQUEzQjtBQUFrRCxJQUFBLElBQUksRUFBQyxTQUF2RDtBQUFpRSxJQUFBLFFBQVEsRUFBRU87QUFBM0UsS0FDTSx5QkFBRyxrQkFBSCxDQUROLENBREcsRUFJREUsTUFKQyxDQUFQO0FBTUgsQ0E5QkQ7O2VBZ0NlWixpQiIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5Db3B5cmlnaHQgMjAyMCBUaGUgTWF0cml4Lm9yZyBGb3VuZGF0aW9uIEMuSS5DLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbmltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuXG5pbXBvcnQgeyBVcGRhdGVDaGVja1N0YXR1cyB9IGZyb20gXCIuLi8uLi8uLi9CYXNlUGxhdGZvcm1cIjtcbmltcG9ydCBQbGF0Zm9ybVBlZyBmcm9tIFwiLi4vLi4vLi4vUGxhdGZvcm1QZWdcIjtcbmltcG9ydCB7IHVzZURpc3BhdGNoZXIgfSBmcm9tIFwiLi4vLi4vLi4vaG9va3MvdXNlRGlzcGF0Y2hlclwiO1xuaW1wb3J0IGRpcyBmcm9tIFwiLi4vLi4vLi4vZGlzcGF0Y2hlci9kaXNwYXRjaGVyXCI7XG5pbXBvcnQgeyBBY3Rpb24gfSBmcm9tIFwiLi4vLi4vLi4vZGlzcGF0Y2hlci9hY3Rpb25zXCI7XG5pbXBvcnQgeyBfdCB9IGZyb20gXCIuLi8uLi8uLi9sYW5ndWFnZUhhbmRsZXJcIjtcbmltcG9ydCBJbmxpbmVTcGlubmVyIGZyb20gXCIuLi8uLi8uLi9jb21wb25lbnRzL3ZpZXdzL2VsZW1lbnRzL0lubGluZVNwaW5uZXJcIjtcbmltcG9ydCBBY2Nlc3NpYmxlQnV0dG9uIGZyb20gXCIuLi8uLi8uLi9jb21wb25lbnRzL3ZpZXdzL2VsZW1lbnRzL0FjY2Vzc2libGVCdXR0b25cIjtcbmltcG9ydCB7IENoZWNrVXBkYXRlc1BheWxvYWQgfSBmcm9tIFwiLi4vLi4vLi4vZGlzcGF0Y2hlci9wYXlsb2Fkcy9DaGVja1VwZGF0ZXNQYXlsb2FkXCI7XG5cbmZ1bmN0aW9uIGluc3RhbGxVcGRhdGUoKSB7XG4gICAgUGxhdGZvcm1QZWcuZ2V0KCkuaW5zdGFsbFVwZGF0ZSgpO1xufVxuXG5mdW5jdGlvbiBnZXRTdGF0dXNUZXh0KHN0YXR1czogVXBkYXRlQ2hlY2tTdGF0dXMsIGVycm9yRGV0YWlsPzogc3RyaW5nKSB7XG4gICAgc3dpdGNoIChzdGF0dXMpIHtcbiAgICAgICAgY2FzZSBVcGRhdGVDaGVja1N0YXR1cy5FcnJvcjpcbiAgICAgICAgICAgIHJldHVybiBfdCgnRXJyb3IgZW5jb3VudGVyZWQgKCUoZXJyb3JEZXRhaWwpcykuJywgeyBlcnJvckRldGFpbCB9KTtcbiAgICAgICAgY2FzZSBVcGRhdGVDaGVja1N0YXR1cy5DaGVja2luZzpcbiAgICAgICAgICAgIHJldHVybiBfdCgnQ2hlY2tpbmcgZm9yIGFuIHVwZGF0ZS4uLicpO1xuICAgICAgICBjYXNlIFVwZGF0ZUNoZWNrU3RhdHVzLk5vdEF2YWlsYWJsZTpcbiAgICAgICAgICAgIHJldHVybiBfdCgnTm8gdXBkYXRlIGF2YWlsYWJsZS4nKTtcbiAgICAgICAgY2FzZSBVcGRhdGVDaGVja1N0YXR1cy5Eb3dubG9hZGluZzpcbiAgICAgICAgICAgIHJldHVybiBfdCgnRG93bmxvYWRpbmcgdXBkYXRlLi4uJyk7XG4gICAgICAgIGNhc2UgVXBkYXRlQ2hlY2tTdGF0dXMuUmVhZHk6XG4gICAgICAgICAgICByZXR1cm4gX3QoXCJOZXcgdmVyc2lvbiBhdmFpbGFibGUuIDxhPlVwZGF0ZSBub3cuPC9hPlwiLCB7fSwge1xuICAgICAgICAgICAgICAgIGE6IHN1YiA9PiA8QWNjZXNzaWJsZUJ1dHRvbiBraW5kPVwibGlua1wiIG9uQ2xpY2s9e2luc3RhbGxVcGRhdGV9Pnsgc3ViIH08L0FjY2Vzc2libGVCdXR0b24+LFxuICAgICAgICAgICAgfSk7XG4gICAgfVxufVxuXG5jb25zdCBkb25lU3RhdHVzZXMgPSBbXG4gICAgVXBkYXRlQ2hlY2tTdGF0dXMuUmVhZHksXG4gICAgVXBkYXRlQ2hlY2tTdGF0dXMuRXJyb3IsXG4gICAgVXBkYXRlQ2hlY2tTdGF0dXMuTm90QXZhaWxhYmxlLFxuXTtcblxuY29uc3QgVXBkYXRlQ2hlY2tCdXR0b24gPSAoKSA9PiB7XG4gICAgY29uc3QgW3N0YXRlLCBzZXRTdGF0ZV0gPSB1c2VTdGF0ZTxDaGVja1VwZGF0ZXNQYXlsb2FkPihudWxsKTtcblxuICAgIGNvbnN0IG9uQ2hlY2tGb3JVcGRhdGVDbGljayA9ICgpID0+IHtcbiAgICAgICAgc2V0U3RhdGUobnVsbCk7XG4gICAgICAgIFBsYXRmb3JtUGVnLmdldCgpLnN0YXJ0VXBkYXRlQ2hlY2soKTtcbiAgICB9O1xuXG4gICAgdXNlRGlzcGF0Y2hlcihkaXMsICh7IGFjdGlvbiwgLi4ucGFyYW1zIH0pID0+IHtcbiAgICAgICAgaWYgKGFjdGlvbiA9PT0gQWN0aW9uLkNoZWNrVXBkYXRlcykge1xuICAgICAgICAgICAgc2V0U3RhdGUocGFyYW1zIGFzIENoZWNrVXBkYXRlc1BheWxvYWQpO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBjb25zdCBidXN5ID0gc3RhdGUgJiYgIWRvbmVTdGF0dXNlcy5pbmNsdWRlcyhzdGF0ZS5zdGF0dXMpO1xuXG4gICAgbGV0IHN1ZmZpeDtcbiAgICBpZiAoc3RhdGUpIHtcbiAgICAgICAgc3VmZml4ID0gPHNwYW4gY2xhc3NOYW1lPVwibXhfVXBkYXRlQ2hlY2tCdXR0b25fc3VtbWFyeVwiPlxuICAgICAgICAgICAgeyBnZXRTdGF0dXNUZXh0KHN0YXRlLnN0YXR1cywgc3RhdGUuZGV0YWlsKSB9XG4gICAgICAgICAgICB7IGJ1c3kgJiYgPElubGluZVNwaW5uZXIgLz4gfVxuICAgICAgICA8L3NwYW4+O1xuICAgIH1cblxuICAgIHJldHVybiA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICAgIDxBY2Nlc3NpYmxlQnV0dG9uIG9uQ2xpY2s9e29uQ2hlY2tGb3JVcGRhdGVDbGlja30ga2luZD1cInByaW1hcnlcIiBkaXNhYmxlZD17YnVzeX0+XG4gICAgICAgICAgICB7IF90KFwiQ2hlY2sgZm9yIHVwZGF0ZVwiKSB9XG4gICAgICAgIDwvQWNjZXNzaWJsZUJ1dHRvbj5cbiAgICAgICAgeyBzdWZmaXggfVxuICAgIDwvUmVhY3QuRnJhZ21lbnQ+O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgVXBkYXRlQ2hlY2tCdXR0b247XG4iXX0=