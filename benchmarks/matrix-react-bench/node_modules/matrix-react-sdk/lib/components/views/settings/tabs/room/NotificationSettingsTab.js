"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _languageHandler = require("../../../../../languageHandler");

var _MatrixClientPeg = require("../../../../../MatrixClientPeg");

var _AccessibleButton = _interopRequireDefault(require("../../../elements/AccessibleButton"));

var _Notifier = _interopRequireDefault(require("../../../../../Notifier"));

var _SettingsStore = _interopRequireDefault(require("../../../../../settings/SettingsStore"));

var _SettingLevel = require("../../../../../settings/SettingLevel");

var _replaceableComponent = require("../../../../../utils/replaceableComponent");

var _logger = require("matrix-js-sdk/src/logger");

var _EchoChamber = require("../../../../../stores/local-echo/EchoChamber");

var _MatrixClientContext = _interopRequireDefault(require("../../../../../contexts/MatrixClientContext"));

var _StyledRadioGroup = _interopRequireDefault(require("../../../elements/StyledRadioGroup"));

var _RoomNotifs = require("../../../../../RoomNotifs");

var _dispatcher = _interopRequireDefault(require("../../../../../dispatcher/dispatcher"));

var _actions = require("../../../../../dispatcher/actions");

var _UserSettingsDialog = require("../../../dialogs/UserSettingsDialog");

var _dec, _class, _class2, _temp;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

let NotificationsSettingsTab = (_dec = (0, _replaceableComponent.replaceableComponent)("views.settings.tabs.room.NotificationsSettingsTab"), _dec(_class = (_temp = _class2 = class NotificationsSettingsTab extends _react.default.Component {
  constructor(props, context) {
    super(props, context);
    (0, _defineProperty2.default)(this, "roomProps", void 0);
    (0, _defineProperty2.default)(this, "soundUpload", /*#__PURE__*/(0, _react.createRef)());
    (0, _defineProperty2.default)(this, "context", void 0);
    (0, _defineProperty2.default)(this, "triggerUploader", async e => {
      e.stopPropagation();
      e.preventDefault();
      this.soundUpload.current.click();
    });
    (0, _defineProperty2.default)(this, "onSoundUploadChanged", e => {
      if (!e.target.files || !e.target.files.length) {
        this.setState({
          uploadedFile: null
        });
        return;
      }

      const file = e.target.files[0];
      this.setState({
        uploadedFile: file
      });
    });
    (0, _defineProperty2.default)(this, "onClickSaveSound", async e => {
      e.stopPropagation();
      e.preventDefault();

      try {
        await this.saveSound();
      } catch (ex) {
        _logger.logger.error(`Unable to save notification sound for ${this.props.roomId}`);

        _logger.logger.error(ex);
      }
    });
    (0, _defineProperty2.default)(this, "clearSound", e => {
      e.stopPropagation();
      e.preventDefault();

      _SettingsStore.default.setValue("notificationSound", this.props.roomId, _SettingLevel.SettingLevel.ROOM_ACCOUNT, null);

      this.setState({
        currentSound: "default"
      });
    });
    (0, _defineProperty2.default)(this, "onRoomNotificationChange", value => {
      this.roomProps.notificationVolume = value;
      this.forceUpdate();
    });
    (0, _defineProperty2.default)(this, "onOpenSettingsClick", () => {
      this.props.closeSettingsFn();

      _dispatcher.default.dispatch({
        action: _actions.Action.ViewUserSettings,
        initialTabId: _UserSettingsDialog.UserTab.Notifications
      });
    });
    this.roomProps = _EchoChamber.EchoChamber.forRoom(context.getRoom(this.props.roomId));
    this.state = {
      currentSound: "default",
      uploadedFile: null
    };
  } // TODO: [REACT-WARNING] Replace component with real class, use constructor for refs
  // eslint-disable-next-line @typescript-eslint/naming-convention, camelcase


  UNSAFE_componentWillMount() {
    const soundData = _Notifier.default.getSoundForRoom(this.props.roomId);

    if (!soundData) {
      return;
    }

    this.setState({
      currentSound: soundData.name || soundData.url
    });
  }

  async saveSound() {
    if (!this.state.uploadedFile) {
      return;
    }

    let type = this.state.uploadedFile.type;

    if (type === "video/ogg") {
      // XXX: I've observed browsers allowing users to pick a audio/ogg files,
      // and then calling it a video/ogg. This is a lame hack, but man browsers
      // suck at detecting mimetypes.
      type = "audio/ogg";
    }

    const url = await _MatrixClientPeg.MatrixClientPeg.get().uploadContent(this.state.uploadedFile, {
      type
    });
    await _SettingsStore.default.setValue("notificationSound", this.props.roomId, _SettingLevel.SettingLevel.ROOM_ACCOUNT, {
      name: this.state.uploadedFile.name,
      type: type,
      size: this.state.uploadedFile.size,
      url
    });
    this.setState({
      uploadedFile: null,
      currentSound: this.state.uploadedFile.name
    });
  }

  render() {
    let currentUploadedFile = null;

    if (this.state.uploadedFile) {
      currentUploadedFile = /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("span", null, (0, _languageHandler._t)("Uploaded sound"), ": ", /*#__PURE__*/_react.default.createElement("code", null, this.state.uploadedFile.name)));
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_heading"
    }, (0, _languageHandler._t)("Notifications")), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_section mx_NotificationSettingsTab_notificationsSection"
    }, /*#__PURE__*/_react.default.createElement(_StyledRadioGroup.default, {
      name: "roomNotificationSetting",
      definitions: [{
        value: _RoomNotifs.RoomNotifState.AllMessages,
        className: "mx_NotificationSettingsTab_defaultEntry",
        label: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, (0, _languageHandler._t)("Default"), /*#__PURE__*/_react.default.createElement("div", {
          className: "mx_NotificationSettingsTab_microCopy"
        }, (0, _languageHandler._t)("Get notifications as set up in your <a>settings</a>", {}, {
          a: sub => /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
            kind: "link",
            onClick: this.onOpenSettingsClick
          }, sub)
        })))
      }, {
        value: _RoomNotifs.RoomNotifState.AllMessagesLoud,
        className: "mx_NotificationSettingsTab_allMessagesEntry",
        label: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, (0, _languageHandler._t)("All messages"), /*#__PURE__*/_react.default.createElement("div", {
          className: "mx_NotificationSettingsTab_microCopy"
        }, (0, _languageHandler._t)("Get notified for every message")))
      }, {
        value: _RoomNotifs.RoomNotifState.MentionsOnly,
        className: "mx_NotificationSettingsTab_mentionsKeywordsEntry",
        label: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, (0, _languageHandler._t)("@mentions & keywords"), /*#__PURE__*/_react.default.createElement("div", {
          className: "mx_NotificationSettingsTab_microCopy"
        }, (0, _languageHandler._t)("Get notified only with mentions and keywords " + "as set up in your <a>settings</a>", {}, {
          a: sub => /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
            kind: "link",
            onClick: this.onOpenSettingsClick
          }, sub)
        })))
      }, {
        value: _RoomNotifs.RoomNotifState.Mute,
        className: "mx_NotificationSettingsTab_noneEntry",
        label: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, (0, _languageHandler._t)("Off"), /*#__PURE__*/_react.default.createElement("div", {
          className: "mx_NotificationSettingsTab_microCopy"
        }, (0, _languageHandler._t)("You won't get any notifications")))
      }],
      onChange: this.onRoomNotificationChange,
      value: this.roomProps.notificationVolume
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_section mx_SettingsTab_subsectionText"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_SettingsTab_subheading"
    }, (0, _languageHandler._t)("Sounds")), /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_subsectionText"
    }, /*#__PURE__*/_react.default.createElement("span", null, (0, _languageHandler._t)("Notification sound"), ": ", /*#__PURE__*/_react.default.createElement("code", null, this.state.currentSound))), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      className: "mx_NotificationSound_resetSound",
      disabled: this.state.currentSound == "default",
      onClick: this.clearSound,
      kind: "primary"
    }, (0, _languageHandler._t)("Reset"))), /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("h3", null, (0, _languageHandler._t)("Set a new custom sound")), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsFlag"
    }, /*#__PURE__*/_react.default.createElement("form", {
      autoComplete: "off",
      noValidate: true
    }, /*#__PURE__*/_react.default.createElement("input", {
      ref: this.soundUpload,
      className: "mx_NotificationSound_soundUpload",
      type: "file",
      onChange: this.onSoundUploadChanged,
      accept: "audio/*"
    })), currentUploadedFile), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      className: "mx_NotificationSound_browse",
      onClick: this.triggerUploader,
      kind: "primary"
    }, (0, _languageHandler._t)("Browse")), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      className: "mx_NotificationSound_save",
      disabled: this.state.uploadedFile == null,
      onClick: this.onClickSaveSound,
      kind: "primary"
    }, (0, _languageHandler._t)("Save")), /*#__PURE__*/_react.default.createElement("br", null))));
  }

}, (0, _defineProperty2.default)(_class2, "contextType", _MatrixClientContext.default), _temp)) || _class);
exports.default = NotificationsSettingsTab;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,