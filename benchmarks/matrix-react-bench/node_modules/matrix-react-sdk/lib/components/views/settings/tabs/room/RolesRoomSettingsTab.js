"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.BannedUser = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _languageHandler = require("../../../../../languageHandler");

var _MatrixClientPeg = require("../../../../../MatrixClientPeg");

var _AccessibleButton = _interopRequireDefault(require("../../../elements/AccessibleButton"));

var _Modal = _interopRequireDefault(require("../../../../../Modal"));

var _replaceableComponent = require("../../../../../utils/replaceableComponent");

var _event = require("matrix-js-sdk/src/@types/event");

var _strings = require("../../../../../utils/strings");

var _ErrorDialog = _interopRequireDefault(require("../../../dialogs/ErrorDialog"));

var _PowerSelector = _interopRequireDefault(require("../../../elements/PowerSelector"));

var _logger = require("matrix-js-sdk/src/logger");

var _dec, _class;

const plEventsToShow = {
  // If an event is listed here, it will be shown in the PL settings. Defaults will be calculated.
  [_event.EventType.RoomAvatar]: {
    isState: true
  },
  [_event.EventType.RoomName]: {
    isState: true
  },
  [_event.EventType.RoomCanonicalAlias]: {
    isState: true
  },
  [_event.EventType.SpaceChild]: {
    isState: true,
    hideForRoom: true
  },
  [_event.EventType.RoomHistoryVisibility]: {
    isState: true,
    hideForSpace: true
  },
  [_event.EventType.RoomPowerLevels]: {
    isState: true
  },
  [_event.EventType.RoomTopic]: {
    isState: true
  },
  [_event.EventType.RoomTombstone]: {
    isState: true,
    hideForSpace: true
  },
  [_event.EventType.RoomEncryption]: {
    isState: true,
    hideForSpace: true
  },
  [_event.EventType.RoomServerAcl]: {
    isState: true,
    hideForSpace: true
  },
  // TODO: Enable support for m.widget event type (https://github.com/vector-im/element-web/issues/13111)
  "im.vector.modular.widgets": {
    isState: true,
    hideForSpace: true
  }
}; // parse a string as an integer; if the input is undefined, or cannot be parsed
// as an integer, return a default.

function parseIntWithDefault(val, def) {
  const res = parseInt(val);
  return isNaN(res) ? def : res;
}

class BannedUser extends _react.default.Component {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "onUnbanClick", e => {
      _MatrixClientPeg.MatrixClientPeg.get().unban(this.props.member.roomId, this.props.member.userId).catch(err => {
        _logger.logger.error("Failed to unban: " + err);

        _Modal.default.createTrackedDialog('Failed to unban', '', _ErrorDialog.default, {
          title: (0, _languageHandler._t)('Error'),
          description: (0, _languageHandler._t)('Failed to unban')
        });
      });
    });
  }

  render() {
    let unbanButton;

    if (this.props.canUnban) {
      unbanButton = /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        className: "mx_RolesRoomSettingsTab_unbanBtn",
        kind: "danger_sm",
        onClick: this.onUnbanClick
      }, (0, _languageHandler._t)('Unban'));
    }

    const userId = this.props.member.name === this.props.member.userId ? null : this.props.member.userId;
    return /*#__PURE__*/_react.default.createElement("li", null, unbanButton, /*#__PURE__*/_react.default.createElement("span", {
      title: (0, _languageHandler._t)("Banned by %(displayName)s", {
        displayName: this.props.by
      })
    }, /*#__PURE__*/_react.default.createElement("strong", null, this.props.member.name), " ", userId, this.props.reason ? " " + (0, _languageHandler._t)('Reason') + ": " + this.props.reason : ""));
  }

}

exports.BannedUser = BannedUser;
let RolesRoomSettingsTab = (_dec = (0, _replaceableComponent.replaceableComponent)("views.settings.tabs.room.RolesRoomSettingsTab"), _dec(_class = class RolesRoomSettingsTab extends _react.default.Component {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "onRoomMembership", (event, state, member) => {
      if (state.roomId !== this.props.roomId) return;
      this.forceUpdate();
    });
    (0, _defineProperty2.default)(this, "onPowerLevelsChanged", (value, powerLevelKey) => {
      const client = _MatrixClientPeg.MatrixClientPeg.get();

      const room = client.getRoom(this.props.roomId);
      const plEvent = room.currentState.getStateEvents(_event.EventType.RoomPowerLevels, '');
      let plContent = plEvent ? plEvent.getContent() || {} : {}; // Clone the power levels just in case

      plContent = Object.assign({}, plContent);
      const eventsLevelPrefix = "event_levels_";

      if (powerLevelKey.startsWith(eventsLevelPrefix)) {
        // deep copy "events" object, Object.assign itself won't deep copy
        plContent["events"] = Object.assign({}, plContent["events"] || {});
        plContent["events"][powerLevelKey.slice(eventsLevelPrefix.length)] = value;
      } else {
        const keyPath = powerLevelKey.split('.');
        let parentObj;
        let currentObj = plContent;

        for (const key of keyPath) {
          if (!currentObj[key]) {
            currentObj[key] = {};
          }

          parentObj = currentObj;
          currentObj = currentObj[key];
        }

        parentObj[keyPath[keyPath.length - 1]] = value;
      }

      client.sendStateEvent(this.props.roomId, _event.EventType.RoomPowerLevels, plContent).catch(e => {
        _logger.logger.error(e);

        _Modal.default.createTrackedDialog('Power level requirement change failed', '', _ErrorDialog.default, {
          title: (0, _languageHandler._t)('Error changing power level requirement'),
          description: (0, _languageHandler._t)("An error occurred changing the room's power level requirements. Ensure you have sufficient " + "permissions and try again.")
        });
      });
    });
    (0, _defineProperty2.default)(this, "onUserPowerLevelChanged", (value, powerLevelKey) => {
      const client = _MatrixClientPeg.MatrixClientPeg.get();

      const room = client.getRoom(this.props.roomId);
      const plEvent = room.currentState.getStateEvents(_event.EventType.RoomPowerLevels, '');
      let plContent = plEvent ? plEvent.getContent() || {} : {}; // Clone the power levels just in case

      plContent = Object.assign({}, plContent); // powerLevelKey should be a user ID

      if (!plContent['users']) plContent['users'] = {};
      plContent['users'][powerLevelKey] = value;
      client.sendStateEvent(this.props.roomId, _event.EventType.RoomPowerLevels, plContent).catch(e => {
        _logger.logger.error(e);

        _Modal.default.createTrackedDialog('Power level change failed', '', _ErrorDialog.default, {
          title: (0, _languageHandler._t)('Error changing power level'),
          description: (0, _languageHandler._t)("An error occurred changing the user's power level. Ensure you have sufficient " + "permissions and try again.")
        });
      });
    });
  }

  componentDidMount() {
    _MatrixClientPeg.MatrixClientPeg.get().on("RoomState.members", this.onRoomMembership);
  }

  componentWillUnmount() {
    const client = _MatrixClientPeg.MatrixClientPeg.get();

    if (client) {
      client.removeListener("RoomState.members", this.onRoomMembership);
    }
  }

  populateDefaultPlEvents(eventsSection, stateLevel, eventsLevel) {
    for (const desiredEvent of Object.keys(plEventsToShow)) {
      if (!(desiredEvent in eventsSection)) {
        eventsSection[desiredEvent] = plEventsToShow[desiredEvent].isState ? stateLevel : eventsLevel;
      }
    }
  }

  render() {
    const client = _MatrixClientPeg.MatrixClientPeg.get();

    const room = client.getRoom(this.props.roomId);
    const isSpaceRoom = room.isSpaceRoom();
    const plEvent = room.currentState.getStateEvents(_event.EventType.RoomPowerLevels, '');
    const plContent = plEvent ? plEvent.getContent() || {} : {};
    const canChangeLevels = room.currentState.mayClientSendStateEvent(_event.EventType.RoomPowerLevels, client);
    const plEventsToLabels = {
      // These will be translated for us later.
      [_event.EventType.RoomAvatar]: isSpaceRoom ? (0, _languageHandler._td)("Change space avatar") : (0, _languageHandler._td)("Change room avatar"),
      [_event.EventType.RoomName]: isSpaceRoom ? (0, _languageHandler._td)("Change space name") : (0, _languageHandler._td)("Change room name"),
      [_event.EventType.RoomCanonicalAlias]: isSpaceRoom ? (0, _languageHandler._td)("Change main address for the space") : (0, _languageHandler._td)("Change main address for the room"),
      [_event.EventType.SpaceChild]: (0, _languageHandler._td)("Manage rooms in this space"),
      [_event.EventType.RoomHistoryVisibility]: (0, _languageHandler._td)("Change history visibility"),
      [_event.EventType.RoomPowerLevels]: (0, _languageHandler._td)("Change permissions"),
      [_event.EventType.RoomTopic]: isSpaceRoom ? (0, _languageHandler._td)("Change description") : (0, _languageHandler._td)("Change topic"),
      [_event.EventType.RoomTombstone]: (0, _languageHandler._td)("Upgrade the room"),
      [_event.EventType.RoomEncryption]: (0, _languageHandler._td)("Enable room encryption"),
      [_event.EventType.RoomServerAcl]: (0, _languageHandler._td)("Change server ACLs"),
      // TODO: Enable support for m.widget event type (https://github.com/vector-im/element-web/issues/13111)
      "im.vector.modular.widgets": isSpaceRoom ? null : (0, _languageHandler._td)("Modify widgets")
    };
    const powerLevelDescriptors = {
      "users_default": {
        desc: (0, _languageHandler._t)('Default role'),
        defaultValue: 0
      },
      "events_default": {
        desc: (0, _languageHandler._t)('Send messages'),
        defaultValue: 0,
        hideForSpace: true
      },
      "invite": {
        desc: (0, _languageHandler._t)('Invite users'),
        defaultValue: 50
      },
      "state_default": {
        desc: (0, _languageHandler._t)('Change settings'),
        defaultValue: 50
      },
      "kick": {
        desc: (0, _languageHandler._t)('Kick users'),
        defaultValue: 50
      },
      "ban": {
        desc: (0, _languageHandler._t)('Ban users'),
        defaultValue: 50
      },
      "redact": {
        desc: (0, _languageHandler._t)('Remove messages sent by others'),
        defaultValue: 50,
        hideForSpace: true
      },
      "notifications.room": {
        desc: (0, _languageHandler._t)('Notify everyone'),
        defaultValue: 50,
        hideForSpace: true
      }
    };
    const eventsLevels = plContent.events || {};
    const userLevels = plContent.users || {};
    const banLevel = parseIntWithDefault(plContent.ban, powerLevelDescriptors.ban.defaultValue);
    const defaultUserLevel = parseIntWithDefault(plContent.users_default, powerLevelDescriptors.users_default.defaultValue);
    let currentUserLevel = userLevels[client.getUserId()];

    if (currentUserLevel === undefined) {
      currentUserLevel = defaultUserLevel;
    }

    this.populateDefaultPlEvents(eventsLevels, parseIntWithDefault(plContent.state_default, powerLevelDescriptors.state_default.defaultValue), parseIntWithDefault(plContent.events_default, powerLevelDescriptors.events_default.defaultValue));

    let privilegedUsersSection = /*#__PURE__*/_react.default.createElement("div", null, (0, _languageHandler._t)('No users have specific privileges in this room'));

    let mutedUsersSection;

    if (Object.keys(userLevels).length) {
      const privilegedUsers = [];
      const mutedUsers = [];
      Object.keys(userLevels).forEach(user => {
        if (!Number.isInteger(userLevels[user])) {
          return;
        }

        const canChange = userLevels[user] < currentUserLevel && canChangeLevels;

        if (userLevels[user] > defaultUserLevel) {
          // privileged
          privilegedUsers.push( /*#__PURE__*/_react.default.createElement(_PowerSelector.default, {
            value: userLevels[user],
            disabled: !canChange,
            label: user,
            key: user,
            powerLevelKey: user // Will be sent as the second parameter to `onChange`
            ,
            onChange: this.onUserPowerLevelChanged
          }));
        } else if (userLevels[user] < defaultUserLevel) {
          // muted
          mutedUsers.push( /*#__PURE__*/_react.default.createElement(_PowerSelector.default, {
            value: userLevels[user],
            disabled: !canChange,
            label: user,
            key: user,
            powerLevelKey: user // Will be sent as the second parameter to `onChange`
            ,
            onChange: this.onUserPowerLevelChanged
          }));
        }
      }); // comparator for sorting PL users lexicographically on PL descending, MXID ascending. (case-insensitive)

      const comparator = (a, b) => {
        const plDiff = userLevels[b.key] - userLevels[a.key];
        return plDiff !== 0 ? plDiff : (0, _strings.compare)(a.key.toLocaleLowerCase(), b.key.toLocaleLowerCase());
      };

      privilegedUsers.sort(comparator);
      mutedUsers.sort(comparator);

      if (privilegedUsers.length) {
        privilegedUsersSection = /*#__PURE__*/_react.default.createElement("div", {
          className: "mx_SettingsTab_section mx_SettingsTab_subsectionText"
        }, /*#__PURE__*/_react.default.createElement("div", {
          className: "mx_SettingsTab_subheading"
        }, (0, _languageHandler._t)('Privileged Users')), privilegedUsers);
      }

      if (mutedUsers.length) {
        mutedUsersSection = /*#__PURE__*/_react.default.createElement("div", {
          className: "mx_SettingsTab_section mx_SettingsTab_subsectionText"
        }, /*#__PURE__*/_react.default.createElement("div", {
          className: "mx_SettingsTab_subheading"
        }, (0, _languageHandler._t)('Muted Users')), mutedUsers);
      }
    }

    const banned = room.getMembersWithMembership("ban");
    let bannedUsersSection;

    if (banned.length) {
      const canBanUsers = currentUserLevel >= banLevel;
      bannedUsersSection = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_SettingsTab_section mx_SettingsTab_subsectionText"
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_SettingsTab_subheading"
      }, (0, _languageHandler._t)('Banned users')), /*#__PURE__*/_react.default.createElement("ul", null, banned.map(member => {
        const banEvent = member.events.member.getContent();
        const sender = room.getMember(member.events.member.getSender());
        let bannedBy = member.events.member.getSender(); // start by falling back to mxid

        if (sender) bannedBy = sender.name;
        return /*#__PURE__*/_react.default.createElement(BannedUser, {
          key: member.userId,
          canUnban: canBanUsers,
          member: member,
          reason: banEvent.reason,
          by: bannedBy
        });
      })));
    }

    const powerSelectors = Object.keys(powerLevelDescriptors).map((key, index) => {
      const descriptor = powerLevelDescriptors[key];

      if (isSpaceRoom && descriptor.hideForSpace) {
        return null;
      }

      const keyPath = key.split('.');
      let currentObj = plContent;

      for (const prop of keyPath) {
        if (currentObj === undefined) {
          break;
        }

        currentObj = currentObj[prop];
      }

      const value = parseIntWithDefault(currentObj, descriptor.defaultValue);
      return /*#__PURE__*/_react.default.createElement("div", {
        key: index,
        className: ""
      }, /*#__PURE__*/_react.default.createElement(_PowerSelector.default, {
        label: descriptor.desc,
        value: value,
        usersDefault: defaultUserLevel,
        disabled: !canChangeLevels || currentUserLevel < value,
        powerLevelKey: key // Will be sent as the second parameter to `onChange`
        ,
        onChange: this.onPowerLevelsChanged
      }));
    }).filter(Boolean); // hide the power level selector for enabling E2EE if it the room is already encrypted

    if (client.isRoomEncrypted(this.props.roomId)) {
      delete eventsLevels[_event.EventType.RoomEncryption];
    }

    const eventPowerSelectors = Object.keys(eventsLevels).map((eventType, i) => {
      var _plEventsToShow$event, _plEventsToShow$event2;

      if (isSpaceRoom && (_plEventsToShow$event = plEventsToShow[eventType]) !== null && _plEventsToShow$event !== void 0 && _plEventsToShow$event.hideForSpace) {
        return null;
      } else if (!isSpaceRoom && (_plEventsToShow$event2 = plEventsToShow[eventType]) !== null && _plEventsToShow$event2 !== void 0 && _plEventsToShow$event2.hideForRoom) {
        return null;
      }

      let label = plEventsToLabels[eventType];

      if (label) {
        label = (0, _languageHandler._t)(label);
      } else {
        label = (0, _languageHandler._t)("Send %(eventType)s events", {
          eventType
        });
      }

      return /*#__PURE__*/_react.default.createElement("div", {
        className: "",
        key: eventType
      }, /*#__PURE__*/_react.default.createElement(_PowerSelector.default, {
        label: label,
        value: eventsLevels[eventType],
        usersDefault: defaultUserLevel,
        disabled: !canChangeLevels || currentUserLevel < eventsLevels[eventType],
        powerLevelKey: "event_levels_" + eventType,
        onChange: this.onPowerLevelsChanged
      }));
    }).filter(Boolean);
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab mx_RolesRoomSettingsTab"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_heading"
    }, (0, _languageHandler._t)("Roles & Permissions")), privilegedUsersSection, mutedUsersSection, bannedUsersSection, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_section mx_SettingsTab_subsectionText"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_SettingsTab_subheading"
    }, (0, _languageHandler._t)("Permissions")), /*#__PURE__*/_react.default.createElement("p", null, isSpaceRoom ? (0, _languageHandler._t)('Select the roles required to change various parts of the space') : (0, _languageHandler._t)('Select the roles required to change various parts of the room')), powerSelectors, eventPowerSelectors));
  }

}) || _class);
exports.default = RolesRoomSettingsTab;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,