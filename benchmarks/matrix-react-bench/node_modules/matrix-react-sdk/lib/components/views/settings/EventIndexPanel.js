"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _languageHandler = require("../../../languageHandler");

var _SdkConfig = _interopRequireDefault(require("../../../SdkConfig"));

var _Modal = _interopRequireDefault(require("../../../Modal"));

var _SettingsStore = _interopRequireDefault(require("../../../settings/SettingsStore"));

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

var _FormattingUtils = require("../../../utils/FormattingUtils");

var _EventIndexPeg = _interopRequireDefault(require("../../../indexing/EventIndexPeg"));

var _SettingLevel = require("../../../settings/SettingLevel");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _SeshatResetDialog = _interopRequireDefault(require("../dialogs/SeshatResetDialog"));

var _InlineSpinner = _interopRequireDefault(require("../elements/InlineSpinner"));

var _dec, _class;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

let EventIndexPanel = (_dec = (0, _replaceableComponent.replaceableComponent)("views.settings.EventIndexPanel"), _dec(_class = class EventIndexPanel extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "updateCurrentRoom", async room => {
      const eventIndex = _EventIndexPeg.default.get();

      let stats;

      try {
        stats = await eventIndex.getStats();
      } catch {
        // This call may fail if sporadically, not a huge issue as we will
        // try later again and probably succeed.
        return;
      }

      this.setState({
        eventIndexSize: stats.size,
        roomCount: stats.roomCount
      });
    });
    (0, _defineProperty2.default)(this, "onManage", async () => {
      _Modal.default.createTrackedDialogAsync('Message search', 'Message search', // @ts-ignore: TS doesn't seem to like the type of this now that it
      // has also been converted to TS as well, but I can't figure out why...
      Promise.resolve().then(() => _interopRequireWildcard(require('../../../async-components/views/dialogs/eventindex/ManageEventIndexDialog'))), {
        onFinished: () => {}
      }, null,
      /* priority = */
      false,
      /* static = */
      true);
    });
    (0, _defineProperty2.default)(this, "onEnable", async () => {
      this.setState({
        enabling: true
      });
      await _EventIndexPeg.default.initEventIndex();
      await _EventIndexPeg.default.get().addInitialCheckpoints();
      await _EventIndexPeg.default.get().startCrawler();
      await _SettingsStore.default.setValue('enableEventIndexing', null, _SettingLevel.SettingLevel.DEVICE, true);
      await this.updateState();
    });
    (0, _defineProperty2.default)(this, "confirmEventStoreReset", () => {
      const {
        close
      } = _Modal.default.createDialog(_SeshatResetDialog.default, {
        onFinished: async success => {
          if (success) {
            await _SettingsStore.default.setValue('enableEventIndexing', null, _SettingLevel.SettingLevel.DEVICE, false);
            await _EventIndexPeg.default.deleteEventIndex();
            await this.onEnable();
            close();
          }
        }
      });
    });
    this.state = {
      enabling: false,
      eventIndexSize: 0,
      roomCount: 0,
      eventIndexingEnabled: _SettingsStore.default.getValueAt(_SettingLevel.SettingLevel.DEVICE, 'enableEventIndexing')
    };
  }

  componentWillUnmount() {
    const eventIndex = _EventIndexPeg.default.get();

    if (eventIndex !== null) {
      eventIndex.removeListener("changedCheckpoint", this.updateCurrentRoom);
    }
  }

  componentDidMount() {
    this.updateState();
  }

  async updateState() {
    const eventIndex = _EventIndexPeg.default.get();

    const eventIndexingEnabled = _SettingsStore.default.getValueAt(_SettingLevel.SettingLevel.DEVICE, 'enableEventIndexing');

    const enabling = false;
    let eventIndexSize = 0;
    let roomCount = 0;

    if (eventIndex !== null) {
      eventIndex.on("changedCheckpoint", this.updateCurrentRoom);

      try {
        const stats = await eventIndex.getStats();
        eventIndexSize = stats.size;
        roomCount = stats.roomCount;
      } catch {// This call may fail if sporadically, not a huge issue as we
        // will try later again in the updateCurrentRoom call and
        // probably succeed.
      }
    }

    this.setState({
      enabling,
      eventIndexSize,
      roomCount,
      eventIndexingEnabled
    });
  }

  render() {
    let eventIndexingSettings = null;

    const brand = _SdkConfig.default.get().brand;

    if (_EventIndexPeg.default.get() !== null) {
      eventIndexingSettings = /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_SettingsTab_subsectionText"
      }, (0, _languageHandler._t)("Securely cache encrypted messages locally for them " + "to appear in search results, using %(size)s to store messages from %(rooms)s rooms.", {
        size: (0, _FormattingUtils.formatBytes)(this.state.eventIndexSize, 0),
        // This drives the singular / plural string
        // selection for "room" / "rooms" only.
        count: this.state.roomCount,
        rooms: (0, _FormattingUtils.formatCountLong)(this.state.roomCount)
      })), /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        kind: "primary",
        onClick: this.onManage
      }, (0, _languageHandler._t)("Manage"))));
    } else if (!this.state.eventIndexingEnabled && _EventIndexPeg.default.supportIsInstalled()) {
      eventIndexingSettings = /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_SettingsTab_subsectionText"
      }, (0, _languageHandler._t)("Securely cache encrypted messages locally for them to " + "appear in search results.")), /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        kind: "primary",
        disabled: this.state.enabling,
        onClick: this.onEnable
      }, (0, _languageHandler._t)("Enable")), this.state.enabling ? /*#__PURE__*/_react.default.createElement(_InlineSpinner.default, null) : /*#__PURE__*/_react.default.createElement("div", null)));
    } else if (_EventIndexPeg.default.platformHasSupport() && !_EventIndexPeg.default.supportIsInstalled()) {
      const nativeLink = "https://github.com/vector-im/element-desktop/blob/develop/" + "docs/native-node-modules.md#" + "adding-seshat-for-search-in-e2e-encrypted-rooms";
      eventIndexingSettings = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_SettingsTab_subsectionText"
      }, (0, _languageHandler._t)("%(brand)s is missing some components required for securely " + "caching encrypted messages locally. If you'd like to " + "experiment with this feature, build a custom %(brand)s Desktop " + "with <nativeLink>search components added</nativeLink>.", {
        brand
      }, {
        nativeLink: sub => /*#__PURE__*/_react.default.createElement("a", {
          href: nativeLink,
          target: "_blank",
          rel: "noreferrer noopener"
        }, sub)
      }));
    } else if (!_EventIndexPeg.default.platformHasSupport()) {
      eventIndexingSettings = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_SettingsTab_subsectionText"
      }, (0, _languageHandler._t)("%(brand)s can't securely cache encrypted messages locally " + "while running in a web browser. Use <desktopLink>%(brand)s Desktop</desktopLink> " + "for encrypted messages to appear in search results.", {
        brand
      }, {
        desktopLink: sub => /*#__PURE__*/_react.default.createElement("a", {
          href: "https://element.io/get-started",
          target: "_blank",
          rel: "noreferrer noopener"
        }, sub)
      }));
    } else {
      eventIndexingSettings = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_SettingsTab_subsectionText"
      }, /*#__PURE__*/_react.default.createElement("p", null, this.state.enabling ? /*#__PURE__*/_react.default.createElement(_InlineSpinner.default, null) : (0, _languageHandler._t)("Message search initialisation failed")), _EventIndexPeg.default.error && /*#__PURE__*/_react.default.createElement("details", null, /*#__PURE__*/_react.default.createElement("summary", null, (0, _languageHandler._t)("Advanced")), /*#__PURE__*/_react.default.createElement("code", null, _EventIndexPeg.default.error.message), /*#__PURE__*/_react.default.createElement("p", null, /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        key: "delete",
        kind: "danger",
        onClick: this.confirmEventStoreReset
      }, (0, _languageHandler._t)("Reset")))));
    }

    return eventIndexingSettings;
  }

}) || _class);
exports.default = EventIndexPanel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,