"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _languageHandler = require("../../../languageHandler");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _EditableTextContainer = _interopRequireDefault(require("../elements/EditableTextContainer"));

var _dec, _class;

let ChangeDisplayName = (_dec = (0, _replaceableComponent.replaceableComponent)("views.settings.ChangeDisplayName"), _dec(_class = class ChangeDisplayName extends _react.default.Component {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "getDisplayName", async () => {
      const cli = _MatrixClientPeg.MatrixClientPeg.get();

      try {
        const res = await cli.getProfileInfo(cli.getUserId());
        return res.displayname;
      } catch (e) {
        throw new Error("Failed to fetch display name");
      }
    });
    (0, _defineProperty2.default)(this, "changeDisplayName", newDisplayname => {
      const cli = _MatrixClientPeg.MatrixClientPeg.get();

      return cli.setDisplayName(newDisplayname).catch(function () {
        throw new Error("Failed to set display name");
      });
    });
  }

  render() {
    return /*#__PURE__*/_react.default.createElement(_EditableTextContainer.default, {
      getInitialValue: this.getDisplayName,
      placeholder: (0, _languageHandler._t)("No display name"),
      blurToSubmit: true,
      onSubmit: this.changeDisplayName
    });
  }

}) || _class);
exports.default = ChangeDisplayName;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL3NldHRpbmdzL0NoYW5nZURpc3BsYXlOYW1lLnRzeCJdLCJuYW1lcyI6WyJDaGFuZ2VEaXNwbGF5TmFtZSIsIlJlYWN0IiwiQ29tcG9uZW50IiwiY2xpIiwiTWF0cml4Q2xpZW50UGVnIiwiZ2V0IiwicmVzIiwiZ2V0UHJvZmlsZUluZm8iLCJnZXRVc2VySWQiLCJkaXNwbGF5bmFtZSIsImUiLCJFcnJvciIsIm5ld0Rpc3BsYXluYW1lIiwic2V0RGlzcGxheU5hbWUiLCJjYXRjaCIsInJlbmRlciIsImdldERpc3BsYXlOYW1lIiwiY2hhbmdlRGlzcGxheU5hbWUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBZ0JBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOzs7O0lBR3FCQSxpQixXQURwQixnREFBcUIsa0NBQXJCLEMsZ0JBQUQsTUFDcUJBLGlCQURyQixTQUMrQ0MsZUFBTUMsU0FEckQsQ0FDK0Q7QUFBQTtBQUFBO0FBQUEsMERBQ2xDLFlBQTZCO0FBQ2xELFlBQU1DLEdBQUcsR0FBR0MsaUNBQWdCQyxHQUFoQixFQUFaOztBQUNBLFVBQUk7QUFDQSxjQUFNQyxHQUFHLEdBQUcsTUFBTUgsR0FBRyxDQUFDSSxjQUFKLENBQW1CSixHQUFHLENBQUNLLFNBQUosRUFBbkIsQ0FBbEI7QUFDQSxlQUFPRixHQUFHLENBQUNHLFdBQVg7QUFDSCxPQUhELENBR0UsT0FBT0MsQ0FBUCxFQUFVO0FBQ1IsY0FBTSxJQUFJQyxLQUFKLENBQVUsOEJBQVYsQ0FBTjtBQUNIO0FBQ0osS0FUMEQ7QUFBQSw2REFXOUJDLGNBQUQsSUFBeUM7QUFDakUsWUFBTVQsR0FBRyxHQUFHQyxpQ0FBZ0JDLEdBQWhCLEVBQVo7O0FBQ0EsYUFBT0YsR0FBRyxDQUFDVSxjQUFKLENBQW1CRCxjQUFuQixFQUFtQ0UsS0FBbkMsQ0FBeUMsWUFBVztBQUN2RCxjQUFNLElBQUlILEtBQUosQ0FBVSw0QkFBVixDQUFOO0FBQ0gsT0FGTSxDQUFQO0FBR0gsS0FoQjBEO0FBQUE7O0FBa0JwREksRUFBQUEsTUFBTSxHQUFnQjtBQUN6Qix3QkFDSSw2QkFBQyw4QkFBRDtBQUNJLE1BQUEsZUFBZSxFQUFFLEtBQUtDLGNBRDFCO0FBRUksTUFBQSxXQUFXLEVBQUUseUJBQUcsaUJBQUgsQ0FGakI7QUFHSSxNQUFBLFlBQVksRUFBRSxJQUhsQjtBQUlJLE1BQUEsUUFBUSxFQUFFLEtBQUtDO0FBSm5CLE1BREo7QUFPSDs7QUExQjBELEMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuQ29weXJpZ2h0IDIwMTUgLSAyMDIxIFRoZSBNYXRyaXgub3JnIEZvdW5kYXRpb24gQy5JLkMuXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IE1hdHJpeENsaWVudFBlZyB9IGZyb20gJy4uLy4uLy4uL01hdHJpeENsaWVudFBlZyc7XG5pbXBvcnQgeyBfdCB9IGZyb20gJy4uLy4uLy4uL2xhbmd1YWdlSGFuZGxlcic7XG5pbXBvcnQgeyByZXBsYWNlYWJsZUNvbXBvbmVudCB9IGZyb20gXCIuLi8uLi8uLi91dGlscy9yZXBsYWNlYWJsZUNvbXBvbmVudFwiO1xuaW1wb3J0IEVkaXRhYmxlVGV4dENvbnRhaW5lciBmcm9tIFwiLi4vZWxlbWVudHMvRWRpdGFibGVUZXh0Q29udGFpbmVyXCI7XG5cbkByZXBsYWNlYWJsZUNvbXBvbmVudChcInZpZXdzLnNldHRpbmdzLkNoYW5nZURpc3BsYXlOYW1lXCIpXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDaGFuZ2VEaXNwbGF5TmFtZSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gICAgcHJpdmF0ZSBnZXREaXNwbGF5TmFtZSA9IGFzeW5jICgpOiBQcm9taXNlPHN0cmluZz4gPT4ge1xuICAgICAgICBjb25zdCBjbGkgPSBNYXRyaXhDbGllbnRQZWcuZ2V0KCk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBjbGkuZ2V0UHJvZmlsZUluZm8oY2xpLmdldFVzZXJJZCgpKTtcbiAgICAgICAgICAgIHJldHVybiByZXMuZGlzcGxheW5hbWU7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byBmZXRjaCBkaXNwbGF5IG5hbWVcIik7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcHJpdmF0ZSBjaGFuZ2VEaXNwbGF5TmFtZSA9IChuZXdEaXNwbGF5bmFtZTogc3RyaW5nKTogUHJvbWlzZTx7fT4gPT4ge1xuICAgICAgICBjb25zdCBjbGkgPSBNYXRyaXhDbGllbnRQZWcuZ2V0KCk7XG4gICAgICAgIHJldHVybiBjbGkuc2V0RGlzcGxheU5hbWUobmV3RGlzcGxheW5hbWUpLmNhdGNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIHNldCBkaXNwbGF5IG5hbWVcIik7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBwdWJsaWMgcmVuZGVyKCk6IEpTWC5FbGVtZW50IHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxFZGl0YWJsZVRleHRDb250YWluZXJcbiAgICAgICAgICAgICAgICBnZXRJbml0aWFsVmFsdWU9e3RoaXMuZ2V0RGlzcGxheU5hbWV9XG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9e190KFwiTm8gZGlzcGxheSBuYW1lXCIpfVxuICAgICAgICAgICAgICAgIGJsdXJUb1N1Ym1pdD17dHJ1ZX1cbiAgICAgICAgICAgICAgICBvblN1Ym1pdD17dGhpcy5jaGFuZ2VEaXNwbGF5TmFtZX0gLz5cbiAgICAgICAgKTtcbiAgICB9XG59XG4iXX0=