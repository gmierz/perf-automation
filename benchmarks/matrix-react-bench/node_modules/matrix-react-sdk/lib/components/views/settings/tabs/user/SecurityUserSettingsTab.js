"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.IgnoredUser = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _utils = require("matrix-js-sdk/src/utils");

var _languageHandler = require("../../../../../languageHandler");

var _SdkConfig = _interopRequireDefault(require("../../../../../SdkConfig"));

var _MatrixClientPeg = require("../../../../../MatrixClientPeg");

var _AccessibleButton = _interopRequireDefault(require("../../../elements/AccessibleButton"));

var _Analytics = _interopRequireDefault(require("../../../../../Analytics"));

var _dispatcher = _interopRequireDefault(require("../../../../../dispatcher/dispatcher"));

var _createRoom = require("../../../../../createRoom");

var _SettingLevel = require("../../../../../settings/SettingLevel");

var _SecureBackupPanel = _interopRequireDefault(require("../../SecureBackupPanel"));

var _SettingsStore = _interopRequireDefault(require("../../../../../settings/SettingsStore"));

var _UIFeature = require("../../../../../settings/UIFeature");

var _E2eAdvancedPanel = _interopRequireWildcard(require("../../E2eAdvancedPanel"));

var _CountlyAnalytics = _interopRequireDefault(require("../../../../../CountlyAnalytics"));

var _replaceableComponent = require("../../../../../utils/replaceableComponent");

var _PosthogAnalytics = require("../../../../../PosthogAnalytics");

var _CryptographyPanel = _interopRequireDefault(require("../../CryptographyPanel"));

var _DevicesPanel = _interopRequireDefault(require("../../DevicesPanel"));

var _SettingsFlag = _interopRequireDefault(require("../../../elements/SettingsFlag"));

var _CrossSigningPanel = _interopRequireDefault(require("../../CrossSigningPanel"));

var _EventIndexPanel = _interopRequireDefault(require("../../EventIndexPanel"));

var _InlineSpinner = _interopRequireDefault(require("../../../elements/InlineSpinner"));

var _logger = require("matrix-js-sdk/src/logger");

var _dec, _class;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class IgnoredUser extends _react.default.Component {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "onUnignoreClicked", () => {
      this.props.onUnignored(this.props.userId);
    });
  }

  render() {
    const id = `mx_SecurityUserSettingsTab_ignoredUser_${this.props.userId}`;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SecurityUserSettingsTab_ignoredUser"
    }, /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      onClick: this.onUnignoreClicked,
      kind: "primary_sm",
      "aria-describedby": id,
      disabled: this.props.inProgress
    }, (0, _languageHandler._t)('Unignore')), /*#__PURE__*/_react.default.createElement("span", {
      id: id
    }, this.props.userId));
  }

}

exports.IgnoredUser = IgnoredUser;
let SecurityUserSettingsTab = (_dec = (0, _replaceableComponent.replaceableComponent)("views.settings.tabs.user.SecurityUserSettingsTab"), _dec(_class = class SecurityUserSettingsTab extends _react.default.Component {
  constructor(props) {
    super(props); // Get rooms we're invited to

    (0, _defineProperty2.default)(this, "dispatcherRef", void 0);
    (0, _defineProperty2.default)(this, "onAction", ({
      action
    }) => {
      if (action === "ignore_state_changed") {
        const ignoredUserIds = _MatrixClientPeg.MatrixClientPeg.get().getIgnoredUsers();

        const newWaitingUnignored = this.state.waitingUnignored.filter(e => ignoredUserIds.includes(e));
        this.setState({
          ignoredUserIds,
          waitingUnignored: newWaitingUnignored
        });
      }
    });
    (0, _defineProperty2.default)(this, "updateAnalytics", checked => {
      checked ? _Analytics.default.enable() : _Analytics.default.disable();

      _CountlyAnalytics.default.instance.enable(
      /* anonymous = */
      !checked);

      _PosthogAnalytics.PosthogAnalytics.instance.updateAnonymityFromSettings(_MatrixClientPeg.MatrixClientPeg.get().getUserId());
    });
    (0, _defineProperty2.default)(this, "onMyMembership", (room, membership) => {
      if (room.isSpaceRoom()) {
        return;
      }

      if (membership === "invite") {
        this.addInvitedRoom(room);
      } else if (this.state.invitedRoomIds.has(room.roomId)) {
        // The user isn't invited anymore
        this.removeInvitedRoom(room.roomId);
      }
    });
    (0, _defineProperty2.default)(this, "addInvitedRoom", room => {
      this.setState(({
        invitedRoomIds
      }) => ({
        invitedRoomIds: new Set(invitedRoomIds).add(room.roomId)
      }));
    });
    (0, _defineProperty2.default)(this, "removeInvitedRoom", roomId => {
      this.setState(({
        invitedRoomIds
      }) => {
        const newInvitedRoomIds = new Set(invitedRoomIds);
        newInvitedRoomIds.delete(roomId);
        return {
          invitedRoomIds: newInvitedRoomIds
        };
      });
    });
    (0, _defineProperty2.default)(this, "onGoToUserProfileClick", () => {
      _dispatcher.default.dispatch({
        action: 'view_user_info',
        userId: _MatrixClientPeg.MatrixClientPeg.get().getUserId()
      });

      this.props.closeSettingsFn();
    });
    (0, _defineProperty2.default)(this, "onUserUnignored", async userId => {
      const {
        ignoredUserIds,
        waitingUnignored
      } = this.state;
      const currentlyIgnoredUserIds = ignoredUserIds.filter(e => !waitingUnignored.includes(e));
      const index = currentlyIgnoredUserIds.indexOf(userId);

      if (index !== -1) {
        currentlyIgnoredUserIds.splice(index, 1);
        this.setState(({
          waitingUnignored
        }) => ({
          waitingUnignored: [...waitingUnignored, userId]
        }));

        _MatrixClientPeg.MatrixClientPeg.get().setIgnoredUsers(currentlyIgnoredUserIds);
      }
    });
    (0, _defineProperty2.default)(this, "getInvitedRooms", () => {
      return _MatrixClientPeg.MatrixClientPeg.get().getRooms().filter(r => {
        return r.hasMembershipState(_MatrixClientPeg.MatrixClientPeg.get().getUserId(), "invite");
      });
    });
    (0, _defineProperty2.default)(this, "manageInvites", async accept => {
      this.setState({
        managingInvites: true
      }); // iterate with a normal for loop in order to retry on action failure

      const invitedRoomIdsValues = Array.from(this.state.invitedRoomIds); // Execute all acceptances/rejections sequentially

      const cli = _MatrixClientPeg.MatrixClientPeg.get();

      const action = accept ? cli.joinRoom.bind(cli) : cli.leave.bind(cli);

      for (let i = 0; i < invitedRoomIdsValues.length; i++) {
        const roomId = invitedRoomIdsValues[i]; // Accept/reject invite

        await action(roomId).then(() => {
          // No error, update invited rooms button
          this.removeInvitedRoom(roomId);
        }, async e => {
          // Action failure
          if (e.errcode === "M_LIMIT_EXCEEDED") {
            // Add a delay between each invite change in order to avoid rate
            // limiting by the server.
            await (0, _utils.sleep)(e.retry_after_ms || 2500); // Redo last action

            i--;
          } else {
            // Print out error with joining/leaving room
            _logger.logger.warn(e);
          }
        });
      }

      this.setState({
        managingInvites: false
      });
    });
    (0, _defineProperty2.default)(this, "onAcceptAllInvitesClicked", () => {
      this.manageInvites(true);
    });
    (0, _defineProperty2.default)(this, "onRejectAllInvitesClicked", () => {
      this.manageInvites(false);
    });

    const _invitedRoomIds = new Set(this.getInvitedRooms().map(room => room.roomId));

    this.state = {
      ignoredUserIds: _MatrixClientPeg.MatrixClientPeg.get().getIgnoredUsers(),
      waitingUnignored: [],
      managingInvites: false,
      invitedRoomIds: _invitedRoomIds
    };
  }

  componentDidMount() {
    this.dispatcherRef = _dispatcher.default.register(this.onAction);

    _MatrixClientPeg.MatrixClientPeg.get().on("Room.myMembership", this.onMyMembership);
  }

  componentWillUnmount() {
    _dispatcher.default.unregister(this.dispatcherRef);

    _MatrixClientPeg.MatrixClientPeg.get().removeListener("Room.myMembership", this.onMyMembership);
  }

  renderIgnoredUsers() {
    const {
      waitingUnignored,
      ignoredUserIds
    } = this.state;
    const userIds = !(ignoredUserIds !== null && ignoredUserIds !== void 0 && ignoredUserIds.length) ? (0, _languageHandler._t)('You have no ignored users.') : ignoredUserIds.map(u => {
      return /*#__PURE__*/_react.default.createElement(IgnoredUser, {
        userId: u,
        onUnignored: this.onUserUnignored,
        key: u,
        inProgress: waitingUnignored.includes(u)
      });
    });
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_section"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_SettingsTab_subheading"
    }, (0, _languageHandler._t)('Ignored users')), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_subsectionText"
    }, userIds));
  }

  renderManageInvites() {
    const {
      invitedRoomIds
    } = this.state;

    if (invitedRoomIds.size === 0) {
      return null;
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_section mx_SecurityUserSettingsTab_bulkOptions"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_SettingsTab_subheading"
    }, (0, _languageHandler._t)('Bulk options')), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      onClick: this.onAcceptAllInvitesClicked,
      kind: "primary",
      disabled: this.state.managingInvites
    }, (0, _languageHandler._t)("Accept all %(invitedRooms)s invites", {
      invitedRooms: invitedRoomIds.size
    })), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      onClick: this.onRejectAllInvitesClicked,
      kind: "danger",
      disabled: this.state.managingInvites
    }, (0, _languageHandler._t)("Reject all %(invitedRooms)s invites", {
      invitedRooms: invitedRoomIds.size
    })), this.state.managingInvites ? /*#__PURE__*/_react.default.createElement(_InlineSpinner.default, null) : /*#__PURE__*/_react.default.createElement("div", null));
  }

  render() {
    const brand = _SdkConfig.default.get().brand;

    const secureBackup = /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_section"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_SettingsTab_subheading"
    }, (0, _languageHandler._t)("Secure Backup")), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_subsectionText"
    }, /*#__PURE__*/_react.default.createElement(_SecureBackupPanel.default, null)));

    const eventIndex = /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_section"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_SettingsTab_subheading"
    }, (0, _languageHandler._t)("Message search")), /*#__PURE__*/_react.default.createElement(_EventIndexPanel.default, null)); // XXX: There's no such panel in the current cross-signing designs, but
    // it's useful to have for testing the feature. If there's no interest
    // in having advanced details here once all flows are implemented, we
    // can remove this.


    const crossSigning = /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_section"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_SettingsTab_subheading"
    }, (0, _languageHandler._t)("Cross-signing")), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_subsectionText"
    }, /*#__PURE__*/_react.default.createElement(_CrossSigningPanel.default, null)));

    let warning;

    if (!(0, _createRoom.privateShouldBeEncrypted)()) {
      warning = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_SecurityUserSettingsTab_warning"
      }, (0, _languageHandler._t)("Your server admin has disabled end-to-end encryption by default " + "in private rooms & Direct Messages."));
    }

    let privacySection;

    if (_Analytics.default.canEnable() || _CountlyAnalytics.default.instance.canEnable()) {
      privacySection = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_SettingsTab_heading"
      }, (0, _languageHandler._t)("Privacy")), /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_SettingsTab_section"
      }, /*#__PURE__*/_react.default.createElement("span", {
        className: "mx_SettingsTab_subheading"
      }, (0, _languageHandler._t)("Analytics")), /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_SettingsTab_subsectionText"
      }, (0, _languageHandler._t)("%(brand)s collects anonymous analytics to allow us to improve the application.", {
        brand
      }), "\xA0", (0, _languageHandler._t)("Privacy is important to us, so we don't collect any personal or " + "identifiable data for our analytics."), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        className: "mx_SettingsTab_linkBtn",
        onClick: _Analytics.default.showDetailsModal
      }, (0, _languageHandler._t)("Learn more about how we use analytics."))), /*#__PURE__*/_react.default.createElement(_SettingsFlag.default, {
        name: "analyticsOptIn",
        level: _SettingLevel.SettingLevel.DEVICE,
        onChange: this.updateAnalytics
      })));
    }

    let advancedSection;

    if (_SettingsStore.default.getValue(_UIFeature.UIFeature.AdvancedSettings)) {
      const ignoreUsersPanel = this.renderIgnoredUsers();
      const invitesPanel = this.renderManageInvites();
      const e2ePanel = (0, _E2eAdvancedPanel.isE2eAdvancedPanelPossible)() ? /*#__PURE__*/_react.default.createElement(_E2eAdvancedPanel.default, null) : null; // only show the section if there's something to show

      if (ignoreUsersPanel || invitesPanel || e2ePanel) {
        advancedSection = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
          className: "mx_SettingsTab_heading"
        }, (0, _languageHandler._t)("Advanced")), /*#__PURE__*/_react.default.createElement("div", {
          className: "mx_SettingsTab_section"
        }, ignoreUsersPanel, invitesPanel, e2ePanel));
      }
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab mx_SecurityUserSettingsTab"
    }, warning, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_heading"
    }, (0, _languageHandler._t)("Where you're signed in")), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_section"
    }, /*#__PURE__*/_react.default.createElement("span", null, (0, _languageHandler._t)("Manage your signed-in devices below. " + "A device's name is visible to people you communicate with.")), /*#__PURE__*/_react.default.createElement(_DevicesPanel.default, null)), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_heading"
    }, (0, _languageHandler._t)("Encryption")), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_section"
    }, secureBackup, eventIndex, crossSigning, /*#__PURE__*/_react.default.createElement(_CryptographyPanel.default, null)), privacySection, advancedSection);
  }

}) || _class);
exports.default = SecurityUserSettingsTab;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,