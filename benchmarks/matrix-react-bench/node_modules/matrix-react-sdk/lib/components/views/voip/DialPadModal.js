"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var React = _interopRequireWildcard(require("react"));

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

var _Field = _interopRequireDefault(require("../elements/Field"));

var _DialPad = _interopRequireDefault(require("./DialPad"));

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _actions = require("../../../dispatcher/actions");

var _DialPadBackspaceButton = _interopRequireDefault(require("../elements/DialPadBackspaceButton"));

var _dec, _class;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

let DialpadModal = (_dec = (0, _replaceableComponent.replaceableComponent)("views.voip.DialPadModal"), _dec(_class = class DialpadModal extends React.PureComponent {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "numberEntryFieldRef", /*#__PURE__*/(0, React.createRef)());
    (0, _defineProperty2.default)(this, "onCancelClick", () => {
      this.props.onFinished(false);
    });
    (0, _defineProperty2.default)(this, "onChange", ev => {
      this.setState({
        value: ev.target.value
      });
    });
    (0, _defineProperty2.default)(this, "onFormSubmit", ev => {
      ev.preventDefault();
      this.onDialPress();
    });
    (0, _defineProperty2.default)(this, "onDigitPress", (digit, ev) => {
      this.setState({
        value: this.state.value + digit
      }); // Keep the number field focused so that keyboard entry is still available.
      // However, don't focus if this wasn't the result of directly clicking on the button,
      // i.e someone using keyboard navigation.

      if (ev.type === "click") {
        var _this$numberEntryFiel;

        (_this$numberEntryFiel = this.numberEntryFieldRef.current) === null || _this$numberEntryFiel === void 0 ? void 0 : _this$numberEntryFiel.focus();
      }
    });
    (0, _defineProperty2.default)(this, "onDeletePress", ev => {
      if (this.state.value.length === 0) return;
      this.setState({
        value: this.state.value.slice(0, -1)
      }); // Keep the number field focused so that keyboard entry is still available
      // However, don't focus if this wasn't the result of directly clicking on the button,
      // i.e someone using keyboard navigation.

      if (ev.type === "click") {
        var _this$numberEntryFiel2;

        (_this$numberEntryFiel2 = this.numberEntryFieldRef.current) === null || _this$numberEntryFiel2 === void 0 ? void 0 : _this$numberEntryFiel2.focus();
      }
    });
    (0, _defineProperty2.default)(this, "onDialPress", async () => {
      const payload = {
        action: _actions.Action.DialNumber,
        number: this.state.value
      };

      _dispatcher.default.dispatch(payload);

      this.props.onFinished(true);
    });
    this.state = {
      value: ''
    };
  }

  render() {
    const backspaceButton = /*#__PURE__*/React.createElement(_DialPadBackspaceButton.default, {
      onBackspacePress: this.onDeletePress
    }); // Only show the backspace button if the field has content

    let dialPadField;

    if (this.state.value.length !== 0) {
      dialPadField = /*#__PURE__*/React.createElement(_Field.default, {
        ref: this.numberEntryFieldRef,
        className: "mx_DialPadModal_field",
        id: "dialpad_number",
        value: this.state.value,
        autoFocus: true,
        onChange: this.onChange,
        postfixComponent: backspaceButton
      });
    } else {
      dialPadField = /*#__PURE__*/React.createElement(_Field.default, {
        ref: this.numberEntryFieldRef,
        className: "mx_DialPadModal_field",
        id: "dialpad_number",
        value: this.state.value,
        autoFocus: true,
        onChange: this.onChange
      });
    }

    return /*#__PURE__*/React.createElement("div", {
      className: "mx_DialPadModal"
    }, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(_AccessibleButton.default, {
      className: "mx_DialPadModal_cancel",
      onClick: this.onCancelClick
    })), /*#__PURE__*/React.createElement("div", {
      className: "mx_DialPadModal_header"
    }, /*#__PURE__*/React.createElement("form", {
      onSubmit: this.onFormSubmit
    }, dialPadField)), /*#__PURE__*/React.createElement("div", {
      className: "mx_DialPadModal_dialPad"
    }, /*#__PURE__*/React.createElement(_DialPad.default, {
      hasDial: true,
      onDigitPress: this.onDigitPress,
      onDeletePress: this.onDeletePress,
      onDialPress: this.onDialPress
    })));
  }

}) || _class);
exports.default = DialpadModal;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,