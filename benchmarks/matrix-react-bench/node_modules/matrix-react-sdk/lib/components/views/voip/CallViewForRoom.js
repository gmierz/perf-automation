"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _call = require("matrix-js-sdk/src/webrtc/call");

var _react = _interopRequireDefault(require("react"));

var _CallHandler = _interopRequireWildcard(require("../../../CallHandler"));

var _CallView = _interopRequireDefault(require("./CallView"));

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _reResizable = require("re-resizable");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _dec, _class;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

let CallViewForRoom = (
/*
 * Wrapper for CallView that always display the call in a given room,
 * or nothing if there is no call in that room.
 */
_dec = (0, _replaceableComponent.replaceableComponent)("views.voip.CallViewForRoom"), _dec(_class = class CallViewForRoom extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "dispatcherRef", void 0);
    (0, _defineProperty2.default)(this, "onAction", payload => {
      switch (payload.action) {
        case 'call_state':
          {
            this.updateCall();
            break;
          }
      }
    });
    (0, _defineProperty2.default)(this, "updateCall", () => {
      const newCall = this.getCall();

      if (newCall !== this.state.call) {
        this.setState({
          call: newCall
        });
      }
    });
    (0, _defineProperty2.default)(this, "onResizeStart", () => {
      this.props.resizeNotifier.startResizing();
    });
    (0, _defineProperty2.default)(this, "onResize", () => {
      this.props.resizeNotifier.notifyTimelineHeightChanged();
    });
    (0, _defineProperty2.default)(this, "onResizeStop", () => {
      this.props.resizeNotifier.stopResizing();
    });
    this.state = {
      call: this.getCall()
    };
  }

  componentDidMount() {
    this.dispatcherRef = _dispatcher.default.register(this.onAction);

    _CallHandler.default.sharedInstance().addListener(_CallHandler.CallHandlerEvent.CallChangeRoom, this.updateCall);
  }

  componentWillUnmount() {
    _dispatcher.default.unregister(this.dispatcherRef);

    _CallHandler.default.sharedInstance().removeListener(_CallHandler.CallHandlerEvent.CallChangeRoom, this.updateCall);
  }

  getCall() {
    const call = _CallHandler.default.sharedInstance().getCallForRoom(this.props.roomId);

    if (call && [_call.CallState.Ended, _call.CallState.Ringing].includes(call.state)) return null;
    return call;
  }

  render() {
    if (!this.state.call) return null;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_CallViewForRoom"
    }, /*#__PURE__*/_react.default.createElement(_reResizable.Resizable, {
      minHeight: 380,
      maxHeight: "80vh",
      enable: {
        top: false,
        right: false,
        bottom: true,
        left: false,
        topRight: false,
        bottomRight: false,
        bottomLeft: false,
        topLeft: false
      },
      onResizeStart: this.onResizeStart,
      onResize: this.onResize,
      onResizeStop: this.onResizeStop,
      className: "mx_CallViewForRoom_ResizeWrapper",
      handleClasses: {
        bottom: "mx_CallViewForRoom_ResizeHandle"
      }
    }, /*#__PURE__*/_react.default.createElement(_CallView.default, {
      call: this.state.call,
      pipMode: false,
      showApps: this.props.showApps
    })));
  }

}) || _class);
exports.default = CallViewForRoom;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,