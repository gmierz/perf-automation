"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _CallHandler = _interopRequireDefault(require("../../../CallHandler"));

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _languageHandler = require("../../../languageHandler");

var _VideoFeed = _interopRequireDefault(require("./VideoFeed"));

var _RoomAvatar = _interopRequireDefault(require("../avatars/RoomAvatar"));

var _call = require("matrix-js-sdk/src/webrtc/call");

var _classnames = _interopRequireDefault(require("classnames"));

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

var _Keyboard = require("../../../Keyboard");

var _Avatar = require("../../../Avatar");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _DesktopCapturerSourcePicker = _interopRequireDefault(require("../elements/DesktopCapturerSourcePicker"));

var _Modal = _interopRequireDefault(require("../../../Modal"));

var _callEventTypes = require("matrix-js-sdk/src/webrtc/callEventTypes");

var _CallViewSidebar = _interopRequireDefault(require("./CallViewSidebar"));

var _CallViewHeader = _interopRequireDefault(require("./CallView/CallViewHeader"));

var _CallViewButtons = _interopRequireDefault(require("./CallView/CallViewButtons"));

var _dec, _class;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function getFullScreenElement() {
  return document.fullscreenElement || // moz omitted because firefox supports this unprefixed now (webkit here for safari)
  document.webkitFullscreenElement || document.msFullscreenElement;
}

function requestFullscreen(element) {
  const method = element.requestFullscreen || // moz omitted since firefox supports unprefixed now
  element.webkitRequestFullScreen || element.msRequestFullscreen;
  if (method) method.call(element);
}

function exitFullscreen() {
  const exitMethod = document.exitFullscreen || document.webkitExitFullscreen || document.msExitFullscreen;
  if (exitMethod) exitMethod.call(document);
}

let CallView = (_dec = (0, _replaceableComponent.replaceableComponent)("views.voip.CallView"), _dec(_class = class CallView extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "dispatcherRef", void 0);
    (0, _defineProperty2.default)(this, "contentRef", /*#__PURE__*/(0, _react.createRef)());
    (0, _defineProperty2.default)(this, "buttonsRef", /*#__PURE__*/(0, _react.createRef)());
    (0, _defineProperty2.default)(this, "onAction", payload => {
      switch (payload.action) {
        case 'video_fullscreen':
          {
            if (!this.contentRef.current) {
              return;
            }

            if (payload.fullscreen) {
              requestFullscreen(this.contentRef.current);
            } else if (getFullScreenElement()) {
              exitFullscreen();
            }

            break;
          }
      }
    });
    (0, _defineProperty2.default)(this, "onCallState", state => {
      this.setState({
        callState: state
      });
    });
    (0, _defineProperty2.default)(this, "onFeedsChanged", newFeeds => {
      const {
        primary,
        secondary
      } = CallView.getOrderedFeeds(newFeeds);
      this.setState({
        primaryFeed: primary,
        secondaryFeeds: secondary,
        micMuted: this.props.call.isMicrophoneMuted(),
        vidMuted: this.props.call.isLocalVideoMuted()
      });
    });
    (0, _defineProperty2.default)(this, "onCallLocalHoldUnhold", () => {
      this.setState({
        isLocalOnHold: this.props.call.isLocalOnHold()
      });
    });
    (0, _defineProperty2.default)(this, "onCallRemoteHoldUnhold", () => {
      this.setState({
        isRemoteOnHold: this.props.call.isRemoteOnHold(),
        // update both here because isLocalOnHold changes when we hold the call too
        isLocalOnHold: this.props.call.isLocalOnHold()
      });
    });
    (0, _defineProperty2.default)(this, "onMouseMove", () => {
      var _this$buttonsRef$curr;

      (_this$buttonsRef$curr = this.buttonsRef.current) === null || _this$buttonsRef$curr === void 0 ? void 0 : _this$buttonsRef$curr.showControls();
    });
    (0, _defineProperty2.default)(this, "onMicMuteClick", async () => {
      const newVal = !this.state.micMuted;
      this.setState({
        micMuted: await this.props.call.setMicrophoneMuted(newVal)
      });
    });
    (0, _defineProperty2.default)(this, "onVidMuteClick", async () => {
      const newVal = !this.state.vidMuted;
      this.setState({
        vidMuted: await this.props.call.setLocalVideoMuted(newVal)
      });
    });
    (0, _defineProperty2.default)(this, "onScreenshareClick", async () => {
      let isScreensharing;

      if (this.state.screensharing) {
        isScreensharing = await this.props.call.setScreensharingEnabled(false);
      } else {
        var _window$electron;

        if ((_window$electron = window.electron) !== null && _window$electron !== void 0 && _window$electron.getDesktopCapturerSources) {
          const {
            finished
          } = _Modal.default.createDialog(_DesktopCapturerSourcePicker.default);

          const [source] = await finished;
          if (!source) return;
          isScreensharing = await this.props.call.setScreensharingEnabled(true, source);
        } else {
          isScreensharing = await this.props.call.setScreensharingEnabled(true);
        }
      }

      this.setState({
        sidebarShown: true,
        screensharing: isScreensharing
      });
    });
    (0, _defineProperty2.default)(this, "onNativeKeyDown", ev => {
      let handled = false;
      const ctrlCmdOnly = (0, _Keyboard.isOnlyCtrlOrCmdKeyEvent)(ev);

      switch (ev.key) {
        case _Keyboard.Key.D:
          if (ctrlCmdOnly) {
            var _this$buttonsRef$curr2;

            this.onMicMuteClick(); // show the controls to give feedback

            (_this$buttonsRef$curr2 = this.buttonsRef.current) === null || _this$buttonsRef$curr2 === void 0 ? void 0 : _this$buttonsRef$curr2.showControls();
            handled = true;
          }

          break;

        case _Keyboard.Key.E:
          if (ctrlCmdOnly) {
            var _this$buttonsRef$curr3;

            this.onVidMuteClick(); // show the controls to give feedback

            (_this$buttonsRef$curr3 = this.buttonsRef.current) === null || _this$buttonsRef$curr3 === void 0 ? void 0 : _this$buttonsRef$curr3.showControls();
            handled = true;
          }

          break;
      }

      if (handled) {
        ev.stopPropagation();
        ev.preventDefault();
      }
    });
    (0, _defineProperty2.default)(this, "onCallResumeClick", () => {
      const userFacingRoomId = _CallHandler.default.sharedInstance().roomIdForCall(this.props.call);

      _CallHandler.default.sharedInstance().setActiveCallRoomId(userFacingRoomId);
    });
    (0, _defineProperty2.default)(this, "onTransferClick", () => {
      const transfereeCall = _CallHandler.default.sharedInstance().getTransfereeForCallId(this.props.call.callId);

      this.props.call.transferToCall(transfereeCall);
    });
    (0, _defineProperty2.default)(this, "onHangupClick", () => {
      _dispatcher.default.dispatch({
        action: 'hangup',
        room_id: _CallHandler.default.sharedInstance().roomIdForCall(this.props.call)
      });
    });
    (0, _defineProperty2.default)(this, "onToggleSidebar", () => {
      this.setState({
        sidebarShown: !this.state.sidebarShown
      });
    });
    const {
      primary: _primary,
      secondary: _secondary
    } = CallView.getOrderedFeeds(this.props.call.getFeeds());
    this.state = {
      isLocalOnHold: this.props.call.isLocalOnHold(),
      isRemoteOnHold: this.props.call.isRemoteOnHold(),
      micMuted: this.props.call.isMicrophoneMuted(),
      vidMuted: this.props.call.isLocalVideoMuted(),
      screensharing: this.props.call.isScreensharing(),
      callState: this.props.call.state,
      controlsVisible: true,
      hoveringControls: false,
      showMoreMenu: false,
      showDialpad: false,
      primaryFeed: _primary,
      secondaryFeeds: _secondary,
      sidebarShown: true
    };
    this.updateCallListeners(null, this.props.call);
  }

  componentDidMount() {
    this.dispatcherRef = _dispatcher.default.register(this.onAction);
    document.addEventListener('keydown', this.onNativeKeyDown);
  }

  componentWillUnmount() {
    if (getFullScreenElement()) {
      exitFullscreen();
    }

    document.removeEventListener("keydown", this.onNativeKeyDown);
    this.updateCallListeners(this.props.call, null);

    _dispatcher.default.unregister(this.dispatcherRef);
  }

  static getDerivedStateFromProps(props) {
    const {
      primary,
      secondary
    } = CallView.getOrderedFeeds(props.call.getFeeds());
    return {
      primaryFeed: primary,
      secondaryFeeds: secondary
    };
  }

  componentDidUpdate(prevProps) {
    if (this.props.call === prevProps.call) return;
    this.setState({
      isLocalOnHold: this.props.call.isLocalOnHold(),
      isRemoteOnHold: this.props.call.isRemoteOnHold(),
      micMuted: this.props.call.isMicrophoneMuted(),
      vidMuted: this.props.call.isLocalVideoMuted(),
      callState: this.props.call.state
    });
    this.updateCallListeners(null, this.props.call);
  }

  updateCallListeners(oldCall, newCall) {
    if (oldCall === newCall) return;

    if (oldCall) {
      oldCall.removeListener(_call.CallEvent.State, this.onCallState);
      oldCall.removeListener(_call.CallEvent.LocalHoldUnhold, this.onCallLocalHoldUnhold);
      oldCall.removeListener(_call.CallEvent.RemoteHoldUnhold, this.onCallRemoteHoldUnhold);
      oldCall.removeListener(_call.CallEvent.FeedsChanged, this.onFeedsChanged);
    }

    if (newCall) {
      newCall.on(_call.CallEvent.State, this.onCallState);
      newCall.on(_call.CallEvent.LocalHoldUnhold, this.onCallLocalHoldUnhold);
      newCall.on(_call.CallEvent.RemoteHoldUnhold, this.onCallRemoteHoldUnhold);
      newCall.on(_call.CallEvent.FeedsChanged, this.onFeedsChanged);
    }
  }

  static getOrderedFeeds(feeds) {
    let primary; // Try to use a screensharing as primary, a remote one if possible

    const screensharingFeeds = feeds.filter(feed => feed.purpose === _callEventTypes.SDPStreamMetadataPurpose.Screenshare);
    primary = screensharingFeeds.find(feed => !feed.isLocal()) || screensharingFeeds[0]; // If we didn't find remote screen-sharing stream, try to find any remote stream

    if (!primary) {
      primary = feeds.find(feed => !feed.isLocal());
    }

    const secondary = [...feeds]; // Remove the primary feed from the array

    if (primary) secondary.splice(secondary.indexOf(primary), 1);
    secondary.sort((a, b) => {
      if (a.isLocal() && !b.isLocal()) return -1;
      if (!a.isLocal() && b.isLocal()) return 1;
      return 0;
    });
    return {
      primary,
      secondary
    };
  }

  renderCallControls() {
    var _this$state$primaryFe;

    // We don't support call upgrades (yet) so hide the video mute button in voice calls
    const vidMuteButtonShown = this.props.call.type === _call.CallType.Video; // Screensharing is possible, if we can send a second stream and
    // identify it using SDPStreamMetadata or if we can replace the already
    // existing usermedia track by a screensharing track. We also need to be
    // connected to know the state of the other side

    const screensharingButtonShown = (this.props.call.opponentSupportsSDPStreamMetadata() || this.props.call.type === _call.CallType.Video) && this.props.call.state === _call.CallState.Connected; // To show the sidebar we need secondary feeds, if we don't have them,
    // we can hide this button. If we are in PiP, sidebar is also hidden, so
    // we can hide the button too


    const sidebarButtonShown = ((_this$state$primaryFe = this.state.primaryFeed) === null || _this$state$primaryFe === void 0 ? void 0 : _this$state$primaryFe.purpose) === _callEventTypes.SDPStreamMetadataPurpose.Screenshare || this.props.call.isScreensharing(); // The dial pad & 'more' button actions are only relevant in a connected call

    const contextMenuButtonShown = this.state.callState === _call.CallState.Connected;
    const dialpadButtonShown = this.state.callState === _call.CallState.Connected && this.props.call.opponentSupportsDTMF();
    return /*#__PURE__*/_react.default.createElement(_CallViewButtons.default, {
      ref: this.buttonsRef,
      call: this.props.call,
      pipMode: this.props.pipMode,
      handlers: {
        onToggleSidebarClick: this.onToggleSidebar,
        onScreenshareClick: this.onScreenshareClick,
        onHangupClick: this.onHangupClick,
        onMicMuteClick: this.onMicMuteClick,
        onVidMuteClick: this.onVidMuteClick
      },
      buttonsState: {
        micMuted: this.state.micMuted,
        vidMuted: this.state.vidMuted,
        sidebarShown: this.state.sidebarShown,
        screensharing: this.state.screensharing
      },
      buttonsVisibility: {
        vidMute: vidMuteButtonShown,
        screensharing: screensharingButtonShown,
        sidebar: sidebarButtonShown,
        contextMenu: contextMenuButtonShown,
        dialpad: dialpadButtonShown
      }
    });
  }

  render() {
    const client = _MatrixClientPeg.MatrixClientPeg.get();

    const callRoomId = _CallHandler.default.sharedInstance().roomIdForCall(this.props.call);

    const secondaryCallRoomId = _CallHandler.default.sharedInstance().roomIdForCall(this.props.secondaryCall);

    const callRoom = client.getRoom(callRoomId);
    const secCallRoom = this.props.secondaryCall ? client.getRoom(secondaryCallRoomId) : null;
    const avatarSize = this.props.pipMode ? 76 : 160;

    const transfereeCall = _CallHandler.default.sharedInstance().getTransfereeForCallId(this.props.call.callId);

    const isOnHold = this.state.isLocalOnHold || this.state.isRemoteOnHold;
    const isScreensharing = this.props.call.isScreensharing();
    const sidebarShown = this.state.sidebarShown;
    const someoneIsScreensharing = this.props.call.getFeeds().some(feed => {
      return feed.purpose === _callEventTypes.SDPStreamMetadataPurpose.Screenshare;
    });
    const isVideoCall = this.props.call.type === _call.CallType.Video;
    let contentView;
    let holdTransferContent;

    if (transfereeCall) {
      const transferTargetRoom = _MatrixClientPeg.MatrixClientPeg.get().getRoom(_CallHandler.default.sharedInstance().roomIdForCall(this.props.call));

      const transferTargetName = transferTargetRoom ? transferTargetRoom.name : (0, _languageHandler._t)("unknown person");

      const transfereeRoom = _MatrixClientPeg.MatrixClientPeg.get().getRoom(_CallHandler.default.sharedInstance().roomIdForCall(transfereeCall));

      const transfereeName = transfereeRoom ? transfereeRoom.name : (0, _languageHandler._t)("unknown person");
      holdTransferContent = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_CallView_holdTransferContent"
      }, (0, _languageHandler._t)("Consulting with %(transferTarget)s. <a>Transfer to %(transferee)s</a>", {
        transferTarget: transferTargetName,
        transferee: transfereeName
      }, {
        a: sub => /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
          kind: "link",
          onClick: this.onTransferClick
        }, sub)
      }));
    } else if (isOnHold) {
      let onHoldText = null;

      if (this.state.isRemoteOnHold) {
        const holdString = _CallHandler.default.sharedInstance().hasAnyUnheldCall() ? (0, _languageHandler._td)("You held the call <a>Switch</a>") : (0, _languageHandler._td)("You held the call <a>Resume</a>");
        onHoldText = (0, _languageHandler._t)(holdString, {}, {
          a: sub => /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
            kind: "link",
            onClick: this.onCallResumeClick
          }, sub)
        });
      } else if (this.state.isLocalOnHold) {
        onHoldText = (0, _languageHandler._t)("%(peerName)s held the call", {
          peerName: this.props.call.getOpponentMember().name
        });
      }

      holdTransferContent = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_CallView_holdTransferContent"
      }, onHoldText);
    }

    let sidebar;

    if (!isOnHold && !transfereeCall && sidebarShown && (isVideoCall || someoneIsScreensharing)) {
      sidebar = /*#__PURE__*/_react.default.createElement(_CallViewSidebar.default, {
        feeds: this.state.secondaryFeeds,
        call: this.props.call,
        pipMode: this.props.pipMode
      });
    } // This is a bit messy. I can't see a reason to have two onHold/transfer screens


    if (isOnHold || transfereeCall) {
      if (isVideoCall) {
        const containerClasses = (0, _classnames.default)({
          mx_CallView_content: true,
          mx_CallView_video: true,
          mx_CallView_video_hold: isOnHold
        });
        let onHoldBackground = null;
        const backgroundStyle = {};
        const backgroundAvatarUrl = (0, _Avatar.avatarUrlForMember)( // is it worth getting the size of the div to pass here?
        this.props.call.getOpponentMember(), 1024, 1024, 'crop');
        backgroundStyle.backgroundImage = 'url(' + backgroundAvatarUrl + ')';
        onHoldBackground = /*#__PURE__*/_react.default.createElement("div", {
          className: "mx_CallView_video_holdBackground",
          style: backgroundStyle
        });
        contentView = /*#__PURE__*/_react.default.createElement("div", {
          className: containerClasses,
          ref: this.contentRef,
          onMouseMove: this.onMouseMove
        }, onHoldBackground, holdTransferContent, this.renderCallControls());
      } else {
        const classes = (0, _classnames.default)({
          mx_CallView_content: true,
          mx_CallView_voice: true,
          mx_CallView_voice_hold: isOnHold
        });
        contentView = /*#__PURE__*/_react.default.createElement("div", {
          className: classes,
          onMouseMove: this.onMouseMove
        }, /*#__PURE__*/_react.default.createElement("div", {
          className: "mx_CallView_voice_avatarsContainer"
        }, /*#__PURE__*/_react.default.createElement("div", {
          className: "mx_CallView_voice_avatarContainer",
          style: {
            width: avatarSize,
            height: avatarSize
          }
        }, /*#__PURE__*/_react.default.createElement(_RoomAvatar.default, {
          room: callRoom,
          height: avatarSize,
          width: avatarSize
        }))), holdTransferContent, this.renderCallControls());
      }
    } else if (this.props.call.noIncomingFeeds()) {
      // Here we're reusing the css classes from voice on hold, because
      // I am lazy. If this gets merged, the CallView might be subject
      // to change anyway - I might take an axe to this file in order to
      // try to get other things working
      const classes = (0, _classnames.default)({
        mx_CallView_content: true,
        mx_CallView_voice: true
      }); // Saying "Connecting" here isn't really true, but the best thing
      // I can come up with, but this might be subject to change as well

      contentView = /*#__PURE__*/_react.default.createElement("div", {
        className: classes,
        onMouseMove: this.onMouseMove,
        ref: this.contentRef
      }, sidebar, /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_CallView_voice_avatarsContainer"
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_CallView_voice_avatarContainer",
        style: {
          width: avatarSize,
          height: avatarSize
        }
      }, /*#__PURE__*/_react.default.createElement(_RoomAvatar.default, {
        room: callRoom,
        height: avatarSize,
        width: avatarSize
      }))), /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_CallView_holdTransferContent"
      }, (0, _languageHandler._t)("Connecting")), this.renderCallControls());
    } else {
      const containerClasses = (0, _classnames.default)({
        mx_CallView_content: true,
        mx_CallView_video: true
      });
      let toast;

      if (someoneIsScreensharing) {
        const presentingClasses = (0, _classnames.default)({
          mx_CallView_presenting: true,
          mx_CallView_presenting_hidden: !this.state.controlsVisible
        });
        const sharerName = this.state.primaryFeed.getMember().name;
        let text = isScreensharing ? (0, _languageHandler._t)("You are presenting") : (0, _languageHandler._t)('%(sharerName)s is presenting', {
          sharerName
        });

        if (!this.state.sidebarShown && isVideoCall) {
          text += " • " + (this.props.call.isLocalVideoMuted() ? (0, _languageHandler._t)("Your camera is turned off") : (0, _languageHandler._t)("Your camera is still enabled"));
        }

        toast = /*#__PURE__*/_react.default.createElement("div", {
          className: presentingClasses
        }, text);
      }

      contentView = /*#__PURE__*/_react.default.createElement("div", {
        className: containerClasses,
        ref: this.contentRef,
        onMouseMove: this.onMouseMove
      }, toast, sidebar, /*#__PURE__*/_react.default.createElement(_VideoFeed.default, {
        feed: this.state.primaryFeed,
        call: this.props.call,
        pipMode: this.props.pipMode,
        onResize: this.props.onResize,
        primary: true
      }), this.renderCallControls());
    }

    const callViewClasses = (0, _classnames.default)({
      mx_CallView: true,
      mx_CallView_pip: this.props.pipMode,
      mx_CallView_large: !this.props.pipMode,
      mx_CallView_belowWidget: this.props.showApps // css to correct the margins if the call is below the AppsDrawer.

    });
    return /*#__PURE__*/_react.default.createElement("div", {
      className: callViewClasses
    }, /*#__PURE__*/_react.default.createElement(_CallViewHeader.default, {
      onPipMouseDown: this.props.onMouseDownOnHeader,
      pipMode: this.props.pipMode,
      type: this.props.call.type,
      callRooms: [callRoom, secCallRoom]
    }), contentView);
  }

}) || _class);
exports.default = CallView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,