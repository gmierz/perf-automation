"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classnames = _interopRequireDefault(require("classnames"));

var _react = _interopRequireDefault(require("react"));

var _SettingsStore = _interopRequireDefault(require("../../../settings/SettingsStore"));

var _callFeed = require("matrix-js-sdk/src/webrtc/callFeed");

var _logger = require("matrix-js-sdk/src/logger");

var _MemberAvatar = _interopRequireDefault(require("../avatars/MemberAvatar"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _callEventTypes = require("matrix-js-sdk/src/webrtc/callEventTypes");

var _dec, _class;

let VideoFeed = (_dec = (0, _replaceableComponent.replaceableComponent)("views.voip.VideoFeed"), _dec(_class = class VideoFeed extends _react.default.PureComponent {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "element", void 0);
    (0, _defineProperty2.default)(this, "setElementRef", element => {
      if (!element) {
        var _this$element;

        (_this$element = this.element) === null || _this$element === void 0 ? void 0 : _this$element.removeEventListener('resize', this.onResize);
        return;
      }

      this.element = element;
      element.addEventListener('resize', this.onResize);
    });
    (0, _defineProperty2.default)(this, "onNewStream", () => {
      this.setState({
        audioMuted: this.props.feed.isAudioMuted(),
        videoMuted: this.props.feed.isVideoMuted()
      });
    });
    (0, _defineProperty2.default)(this, "onMuteStateChanged", () => {
      this.setState({
        audioMuted: this.props.feed.isAudioMuted(),
        videoMuted: this.props.feed.isVideoMuted()
      });
    });
    (0, _defineProperty2.default)(this, "onResize", e => {
      if (this.props.onResize && !this.props.feed.isLocal()) {
        this.props.onResize(e);
      }
    });
    this.state = {
      audioMuted: this.props.feed.isAudioMuted(),
      videoMuted: this.props.feed.isVideoMuted()
    };
  }

  componentDidMount() {
    this.updateFeed(null, this.props.feed);
    this.playMedia();
  }

  componentWillUnmount() {
    this.updateFeed(this.props.feed, null);
  }

  componentDidUpdate(prevProps, prevState) {
    this.updateFeed(prevProps.feed, this.props.feed); // If the mutes state has changed, we try to playMedia()

    if (prevState.videoMuted !== this.state.videoMuted || prevProps.feed.stream !== this.props.feed.stream) {
      this.playMedia();
    }
  }

  static getDerivedStateFromProps(props) {
    return {
      audioMuted: props.feed.isAudioMuted(),
      videoMuted: props.feed.isVideoMuted()
    };
  }

  updateFeed(oldFeed, newFeed) {
    if (oldFeed === newFeed) return;

    if (oldFeed) {
      this.props.feed.removeListener(_callFeed.CallFeedEvent.NewStream, this.onNewStream);
      this.props.feed.removeListener(_callFeed.CallFeedEvent.MuteStateChanged, this.onMuteStateChanged);

      if (this.props.feed.purpose === _callEventTypes.SDPStreamMetadataPurpose.Usermedia) {
        this.props.feed.measureVolumeActivity(false);
      }

      this.stopMedia();
    }

    if (newFeed) {
      this.props.feed.addListener(_callFeed.CallFeedEvent.NewStream, this.onNewStream);
      this.props.feed.addListener(_callFeed.CallFeedEvent.MuteStateChanged, this.onMuteStateChanged);

      if (this.props.feed.purpose === _callEventTypes.SDPStreamMetadataPurpose.Usermedia) {
        this.props.feed.measureVolumeActivity(true);
      }

      this.playMedia();
    }
  }

  async playMedia() {
    const element = this.element;
    if (!element) return; // We play audio in AudioFeed, not here

    element.muted = true;
    element.srcObject = this.props.feed.stream;
    element.autoplay = true;

    try {
      // A note on calling methods on media elements:
      // We used to have queues per media element to serialise all calls on those elements.
      // The reason given for this was that load() and play() were racing. However, we now
      // never call load() explicitly so this seems unnecessary. However, serialising every
      // operation was causing bugs where video would not resume because some play command
      // had got stuck and all media operations were queued up behind it. If necessary, we
      // should serialise the ones that need to be serialised but then be able to interrupt
      // them with another load() which will cancel the pending one, but since we don't call
      // load() explicitly, it shouldn't be a problem. - Dave
      await element.play();
    } catch (e) {
      _logger.logger.info("Failed to play media element with feed", this.props.feed, e);
    }
  }

  stopMedia() {
    const element = this.element;
    if (!element) return;
    element.pause();
    element.src = null; // As per comment in componentDidMount, setting the sink ID back to the
    // default once the call is over makes setSinkId work reliably. - Dave
    // Since we are not using the same element anymore, the above doesn't
    // seem to be necessary - Å imon
  }

  render() {
    const {
      pipMode,
      primary,
      feed
    } = this.props;
    const wrapperClasses = (0, _classnames.default)("mx_VideoFeed", {
      mx_VideoFeed_voice: this.state.videoMuted
    });
    const micIconClasses = (0, _classnames.default)("mx_VideoFeed_mic", {
      mx_VideoFeed_mic_muted: this.state.audioMuted,
      mx_VideoFeed_mic_unmuted: !this.state.audioMuted
    });
    let micIcon;

    if (feed.purpose !== _callEventTypes.SDPStreamMetadataPurpose.Screenshare && !primary && !pipMode) {
      micIcon = /*#__PURE__*/_react.default.createElement("div", {
        className: micIconClasses
      });
    }

    let content;

    if (this.state.videoMuted) {
      const member = this.props.feed.getMember();
      let avatarSize;
      if (pipMode && primary) avatarSize = 76;else if (pipMode && !primary) avatarSize = 16;else if (!pipMode && primary) avatarSize = 160;else ; // TBD

      content = /*#__PURE__*/_react.default.createElement(_MemberAvatar.default, {
        member: member,
        height: avatarSize,
        width: avatarSize
      });
    } else {
      const videoClasses = (0, _classnames.default)("mx_VideoFeed_video", {
        mx_VideoFeed_video_mirror: this.props.feed.isLocal() && this.props.feed.purpose === _callEventTypes.SDPStreamMetadataPurpose.Usermedia && _SettingsStore.default.getValue('VideoView.flipVideoHorizontally')
      });
      content = /*#__PURE__*/_react.default.createElement("video", {
        className: videoClasses,
        ref: this.setElementRef
      });
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: wrapperClasses
    }, micIcon, content);
  }

}) || _class);
exports.default = VideoFeed;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,