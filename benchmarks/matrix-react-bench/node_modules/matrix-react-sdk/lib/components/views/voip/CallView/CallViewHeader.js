"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _call = require("matrix-js-sdk/src/webrtc/call");

var _react = _interopRequireDefault(require("react"));

var _languageHandler = require("../../../../languageHandler");

var _RoomAvatar = _interopRequireDefault(require("../../avatars/RoomAvatar"));

var _dispatcher = _interopRequireDefault(require("../../../../dispatcher/dispatcher"));

var _actions = require("../../../../dispatcher/actions");

var _classnames = _interopRequireDefault(require("classnames"));

var _AccessibleTooltipButton = _interopRequireDefault(require("../../elements/AccessibleTooltipButton"));

/*
Copyright 2021 New Vector Ltd

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const callTypeTranslationByType = {
  [_call.CallType.Video]: (0, _languageHandler._td)("Video Call"),
  [_call.CallType.Voice]: (0, _languageHandler._td)("Voice Call")
};

const onFullscreenClick = () => {
  _dispatcher.default.dispatch({
    action: 'video_fullscreen',
    fullscreen: true
  });
};

const onExpandClick = roomId => {
  _dispatcher.default.dispatch({
    action: _actions.Action.ViewRoom,
    room_id: roomId
  });
};

const CallViewHeaderControls = ({
  pipMode = false,
  type,
  roomId
}) => {
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_CallViewHeader_controls"
  }, !pipMode && /*#__PURE__*/_react.default.createElement(_AccessibleTooltipButton.default, {
    className: "mx_CallViewHeader_button mx_CallViewHeader_button_fullscreen",
    onClick: onFullscreenClick,
    title: (0, _languageHandler._t)("Fill Screen")
  }), pipMode && /*#__PURE__*/_react.default.createElement(_AccessibleTooltipButton.default, {
    className: "mx_CallViewHeader_button mx_CallViewHeader_button_expand",
    onClick: () => onExpandClick(roomId),
    title: (0, _languageHandler._t)("Return to call")
  }));
};

const SecondaryCallInfo = ({
  callRoom
}) => {
  return /*#__PURE__*/_react.default.createElement("span", {
    className: "mx_CallViewHeader_secondaryCallInfo"
  }, /*#__PURE__*/_react.default.createElement(_RoomAvatar.default, {
    room: callRoom,
    height: 16,
    width: 16
  }), /*#__PURE__*/_react.default.createElement("span", {
    className: "mx_CallView_secondaryCall_roomName"
  }, (0, _languageHandler._t)("%(name)s on hold", {
    name: callRoom.name
  })));
};

const CallTypeIcon = ({
  type
}) => {
  const classes = (0, _classnames.default)({
    'mx_CallViewHeader_callTypeIcon': true,
    'mx_CallViewHeader_callTypeIcon_video': type === _call.CallType.Video,
    'mx_CallViewHeader_callTypeIcon_voice': type === _call.CallType.Voice
  });
  return /*#__PURE__*/_react.default.createElement("div", {
    className: classes
  });
};

const CallViewHeader = ({
  type,
  pipMode = false,
  callRooms = [],
  onPipMouseDown
}) => {
  const [callRoom, onHoldCallRoom] = callRooms;
  const callTypeText = (0, _languageHandler._t)(callTypeTranslationByType[type]);
  const callRoomName = callRoom.name;
  const {
    roomId
  } = callRoom;

  if (!pipMode) {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_CallViewHeader"
    }, /*#__PURE__*/_react.default.createElement(CallTypeIcon, {
      type: type
    }), /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_CallViewHeader_callType"
    }, callTypeText), /*#__PURE__*/_react.default.createElement(CallViewHeaderControls, {
      roomId: roomId,
      pipMode: pipMode,
      type: type
    }));
  }

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_CallViewHeader",
    onMouseDown: onPipMouseDown
  }, /*#__PURE__*/_react.default.createElement(_RoomAvatar.default, {
    room: callRoom,
    height: 32,
    width: 32
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_CallViewHeader_callInfo"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_CallViewHeader_roomName"
  }, callRoomName), /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_CallViewHeader_callTypeSmall"
  }, callTypeText, onHoldCallRoom && /*#__PURE__*/_react.default.createElement(SecondaryCallInfo, {
    callRoom: onHoldCallRoom
  }))), /*#__PURE__*/_react.default.createElement(CallViewHeaderControls, {
    roomId: roomId,
    pipMode: pipMode,
    type: type
  }));
};

var _default = CallViewHeader;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,