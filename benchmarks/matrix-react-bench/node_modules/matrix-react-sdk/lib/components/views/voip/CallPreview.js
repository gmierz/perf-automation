"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _CallView = _interopRequireDefault(require("./CallView"));

var _RoomViewStore = _interopRequireDefault(require("../../../stores/RoomViewStore"));

var _CallHandler = _interopRequireWildcard(require("../../../CallHandler"));

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _PersistentApp = _interopRequireDefault(require("../elements/PersistentApp"));

var _SettingsStore = _interopRequireDefault(require("../../../settings/SettingsStore"));

var _call = require("matrix-js-sdk/src/webrtc/call");

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _PictureInPictureDragger = _interopRequireDefault(require("./PictureInPictureDragger"));

var _logger = require("matrix-js-sdk/src/logger");

var _WidgetLayoutStore = require("../../../stores/widgets/WidgetLayoutStore");

var _dec, _class;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const SHOW_CALL_IN_STATES = [_call.CallState.Connected, _call.CallState.InviteSent, _call.CallState.Connecting, _call.CallState.CreateAnswer, _call.CallState.CreateOffer, _call.CallState.WaitLocalMedia];

// Splits a list of calls into one 'primary' one and a list
// (which should be a single element) of other calls.
// The primary will be the one not on hold, or an arbitrary one
// if they're all on hold)
function getPrimarySecondaryCallsForPip(roomId) {
  const calls = _CallHandler.default.sharedInstance().getAllActiveCallsForPip(roomId);

  let primary = null;
  let secondaries = [];

  for (const call of calls) {
    if (!SHOW_CALL_IN_STATES.includes(call.state)) continue;

    if (!call.isRemoteOnHold() && primary === null) {
      primary = call;
    } else {
      secondaries.push(call);
    }
  }

  if (primary === null && secondaries.length > 0) {
    primary = secondaries[0];
    secondaries = secondaries.slice(1);
  }

  if (secondaries.length > 1) {
    // We should never be in more than two calls so this shouldn't happen
    _logger.logger.log("Found more than 1 secondary call! Other calls will not be shown.");
  }

  return [primary, secondaries];
}
/**
 * CallPreview shows a small version of CallView hovering over the UI in 'picture-in-picture'
 * (PiP mode). It displays the call(s) which is *not* in the room the user is currently viewing.
 */


let CallPreview = (_dec = (0, _replaceableComponent.replaceableComponent)("views.voip.CallPreview"), _dec(_class = class CallPreview extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "roomStoreToken", void 0);
    (0, _defineProperty2.default)(this, "dispatcherRef", void 0);
    (0, _defineProperty2.default)(this, "settingsWatcherRef", void 0);
    (0, _defineProperty2.default)(this, "onRoomViewStoreUpdate", () => {
      var _MatrixClientPeg$get, _MatrixClientPeg$get2;

      const newRoomId = _RoomViewStore.default.getRoomId();

      const oldRoomId = this.state.roomId;
      if (newRoomId === oldRoomId) return; // The WidgetLayoutStore observer always tracks the currently viewed Room,
      // so we don't end up with multiple observers and know what observer to remove on unmount

      const oldRoom = (_MatrixClientPeg$get = _MatrixClientPeg.MatrixClientPeg.get()) === null || _MatrixClientPeg$get === void 0 ? void 0 : _MatrixClientPeg$get.getRoom(oldRoomId);

      if (oldRoom) {
        _WidgetLayoutStore.WidgetLayoutStore.instance.off(_WidgetLayoutStore.WidgetLayoutStore.emissionForRoom(oldRoom), this.updateCalls);
      }

      const newRoom = (_MatrixClientPeg$get2 = _MatrixClientPeg.MatrixClientPeg.get()) === null || _MatrixClientPeg$get2 === void 0 ? void 0 : _MatrixClientPeg$get2.getRoom(newRoomId);

      if (newRoom) {
        _WidgetLayoutStore.WidgetLayoutStore.instance.on(_WidgetLayoutStore.WidgetLayoutStore.emissionForRoom(newRoom), this.updateCalls);
      }

      if (!newRoomId) return;
      const [primaryCall, secondaryCalls] = getPrimarySecondaryCallsForPip(newRoomId);
      this.setState({
        roomId: newRoomId,
        primaryCall: primaryCall,
        secondaryCall: secondaryCalls[0]
      });
    });
    (0, _defineProperty2.default)(this, "onAction", payload => {
      switch (payload.action) {
        case 'call_state':
          {
            // listen for call state changes to prod the render method, which
            // may hide the global CallView if the call it is tracking is dead
            this.updateCalls();
            break;
          }
      }
    });
    (0, _defineProperty2.default)(this, "updateCalls", () => {
      if (!this.state.roomId) return;
      const [primaryCall, secondaryCalls] = getPrimarySecondaryCallsForPip(this.state.roomId);
      this.setState({
        primaryCall: primaryCall,
        secondaryCall: secondaryCalls[0]
      });
    });
    (0, _defineProperty2.default)(this, "onCallRemoteHold", () => {
      if (!this.state.roomId) return;
      const [primaryCall, secondaryCalls] = getPrimarySecondaryCallsForPip(this.state.roomId);
      this.setState({
        primaryCall: primaryCall,
        secondaryCall: secondaryCalls[0]
      });
    });
    (0, _defineProperty2.default)(this, "onDoubleClick", () => {
      _dispatcher.default.dispatch({
        action: "view_room",
        room_id: this.state.primaryCall.roomId
      });
    });

    const roomId = _RoomViewStore.default.getRoomId();

    const [_primaryCall, _secondaryCalls] = getPrimarySecondaryCallsForPip(roomId);
    this.state = {
      roomId,
      primaryCall: _primaryCall,
      secondaryCall: _secondaryCalls[0]
    };
  }

  componentDidMount() {
    var _MatrixClientPeg$get3;

    _CallHandler.default.sharedInstance().addListener(_CallHandler.CallHandlerEvent.CallChangeRoom, this.updateCalls);

    this.roomStoreToken = _RoomViewStore.default.addListener(this.onRoomViewStoreUpdate);
    this.dispatcherRef = _dispatcher.default.register(this.onAction);

    _MatrixClientPeg.MatrixClientPeg.get().on(_call.CallEvent.RemoteHoldUnhold, this.onCallRemoteHold);

    const room = (_MatrixClientPeg$get3 = _MatrixClientPeg.MatrixClientPeg.get()) === null || _MatrixClientPeg$get3 === void 0 ? void 0 : _MatrixClientPeg$get3.getRoom(this.state.roomId);

    if (room) {
      _WidgetLayoutStore.WidgetLayoutStore.instance.on(_WidgetLayoutStore.WidgetLayoutStore.emissionForRoom(room), this.updateCalls);
    }
  }

  componentWillUnmount() {
    _CallHandler.default.sharedInstance().removeListener(_CallHandler.CallHandlerEvent.CallChangeRoom, this.updateCalls);

    _MatrixClientPeg.MatrixClientPeg.get().removeListener(_call.CallEvent.RemoteHoldUnhold, this.onCallRemoteHold);

    if (this.roomStoreToken) {
      this.roomStoreToken.remove();
    }

    _dispatcher.default.unregister(this.dispatcherRef);

    _SettingsStore.default.unwatchSetting(this.settingsWatcherRef);

    const room = _MatrixClientPeg.MatrixClientPeg.get().getRoom(this.state.roomId);

    _WidgetLayoutStore.WidgetLayoutStore.instance.off(_WidgetLayoutStore.WidgetLayoutStore.emissionForRoom(room), this.updateCalls);
  }

  render() {
    const pipMode = true;

    if (this.state.primaryCall) {
      return /*#__PURE__*/_react.default.createElement(_PictureInPictureDragger.default, {
        className: "mx_CallPreview",
        draggable: pipMode,
        onDoubleClick: this.onDoubleClick
      }, ({
        onStartMoving,
        onResize
      }) => /*#__PURE__*/_react.default.createElement(_CallView.default, {
        onMouseDownOnHeader: onStartMoving,
        call: this.state.primaryCall,
        secondaryCall: this.state.secondaryCall,
        pipMode: pipMode,
        onResize: onResize
      }));
    }

    return /*#__PURE__*/_react.default.createElement(_PersistentApp.default, null);
  }

}) || _class);
exports.default = CallPreview;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,