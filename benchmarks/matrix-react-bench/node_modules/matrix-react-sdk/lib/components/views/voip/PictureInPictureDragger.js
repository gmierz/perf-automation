"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _UIStore = _interopRequireDefault(require("../../../stores/UIStore"));

var _AnimationUtils = require("../../../utils/AnimationUtils");

var _MarkedExecution = require("../../../utils/MarkedExecution");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _dec, _class;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const PIP_VIEW_WIDTH = 336;
const PIP_VIEW_HEIGHT = 232;
const MOVING_AMT = 0.2;
const SNAPPING_AMT = 0.1;
const PADDING = {
  top: 58,
  bottom: 58,
  left: 76,
  right: 8
};
let PictureInPictureDragger = (
/**
 * PictureInPictureDragger shows a small version of CallView hovering over the UI in 'picture-in-picture'
 * (PiP mode). It displays the call(s) which is *not* in the room the user is currently viewing.
 */
_dec = (0, _replaceableComponent.replaceableComponent)("views.voip.PictureInPictureDragger"), _dec(_class = class PictureInPictureDragger extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "callViewWrapper", /*#__PURE__*/(0, _react.createRef)());
    (0, _defineProperty2.default)(this, "initX", 0);
    (0, _defineProperty2.default)(this, "initY", 0);
    (0, _defineProperty2.default)(this, "desiredTranslationX", _UIStore.default.instance.windowWidth - PADDING.right - PIP_VIEW_WIDTH);
    (0, _defineProperty2.default)(this, "desiredTranslationY", _UIStore.default.instance.windowHeight - PADDING.bottom - PIP_VIEW_HEIGHT);
    (0, _defineProperty2.default)(this, "moving", false);
    (0, _defineProperty2.default)(this, "scheduledUpdate", new _MarkedExecution.MarkedExecution(() => this.animationCallback(), () => requestAnimationFrame(() => this.scheduledUpdate.trigger())));
    (0, _defineProperty2.default)(this, "animationCallback", () => {
      // If the PiP isn't being dragged and there is only a tiny difference in
      // the desiredTranslation and translation, quit the animationCallback
      // loop. If that is the case, it means the PiP has snapped into its
      // position and there is nothing to do. Not doing this would cause an
      // infinite loop
      if (!this.moving && Math.abs(this.state.translationX - this.desiredTranslationX) <= 1 && Math.abs(this.state.translationY - this.desiredTranslationY) <= 1) return;
      const amt = this.moving ? MOVING_AMT : SNAPPING_AMT;
      this.setState({
        translationX: (0, _AnimationUtils.lerp)(this.state.translationX, this.desiredTranslationX, amt),
        translationY: (0, _AnimationUtils.lerp)(this.state.translationY, this.desiredTranslationY, amt)
      });
      this.scheduledUpdate.mark();
    });
    (0, _defineProperty2.default)(this, "onResize", () => {
      this.snap(false);
    });
    (0, _defineProperty2.default)(this, "snap", (animate = false) => {
      var _this$callViewWrapper, _this$callViewWrapper2;

      const translationX = this.desiredTranslationX;
      const translationY = this.desiredTranslationY; // We subtract the PiP size from the window size in order to calculate
      // the position to snap to from the PiP center and not its top-left
      // corner

      const windowWidth = _UIStore.default.instance.windowWidth - (((_this$callViewWrapper = this.callViewWrapper.current) === null || _this$callViewWrapper === void 0 ? void 0 : _this$callViewWrapper.clientWidth) || PIP_VIEW_WIDTH);
      const windowHeight = _UIStore.default.instance.windowHeight - (((_this$callViewWrapper2 = this.callViewWrapper.current) === null || _this$callViewWrapper2 === void 0 ? void 0 : _this$callViewWrapper2.clientHeight) || PIP_VIEW_HEIGHT);

      if (translationX >= windowWidth / 2 && translationY >= windowHeight / 2) {
        this.desiredTranslationX = windowWidth - PADDING.right;
        this.desiredTranslationY = windowHeight - PADDING.bottom;
      } else if (translationX >= windowWidth / 2 && translationY <= windowHeight / 2) {
        this.desiredTranslationX = windowWidth - PADDING.right;
        this.desiredTranslationY = PADDING.top;
      } else if (translationX <= windowWidth / 2 && translationY >= windowHeight / 2) {
        this.desiredTranslationX = PADDING.left;
        this.desiredTranslationY = windowHeight - PADDING.bottom;
      } else {
        this.desiredTranslationX = PADDING.left;
        this.desiredTranslationY = PADDING.top;
      } // We start animating here because we want the PiP to move when we're
      // resizing the window


      this.scheduledUpdate.mark();

      if (animate) {
        // We start animating here because we want the PiP to move when we're
        // resizing the window
        this.scheduledUpdate.mark();
      } else {
        this.setState({
          translationX: this.desiredTranslationX,
          translationY: this.desiredTranslationY
        });
      }
    });
    (0, _defineProperty2.default)(this, "onStartMoving", event => {
      event.preventDefault();
      event.stopPropagation();
      this.moving = true;
      this.initX = event.pageX - this.desiredTranslationX;
      this.initY = event.pageY - this.desiredTranslationY;
      this.scheduledUpdate.mark();
    });
    (0, _defineProperty2.default)(this, "onMoving", event => {
      if (!this.moving) return;
      event.preventDefault();
      event.stopPropagation();
      this.setTranslation(event.pageX - this.initX, event.pageY - this.initY);
    });
    (0, _defineProperty2.default)(this, "onEndMoving", () => {
      this.moving = false;
      this.snap(true);
    });
    this.state = {
      translationX: _UIStore.default.instance.windowWidth - PADDING.right - PIP_VIEW_WIDTH,
      translationY: _UIStore.default.instance.windowHeight - PADDING.bottom - PIP_VIEW_HEIGHT
    };
  }

  componentDidMount() {
    document.addEventListener("mousemove", this.onMoving);
    document.addEventListener("mouseup", this.onEndMoving);
    window.addEventListener("resize", this.onResize);
  }

  componentWillUnmount() {
    document.removeEventListener("mousemove", this.onMoving);
    document.removeEventListener("mouseup", this.onEndMoving);
    window.removeEventListener("resize", this.onResize);
  }

  setTranslation(inTranslationX, inTranslationY) {
    var _this$callViewWrapper3, _this$callViewWrapper4;

    const width = ((_this$callViewWrapper3 = this.callViewWrapper.current) === null || _this$callViewWrapper3 === void 0 ? void 0 : _this$callViewWrapper3.clientWidth) || PIP_VIEW_WIDTH;
    const height = ((_this$callViewWrapper4 = this.callViewWrapper.current) === null || _this$callViewWrapper4 === void 0 ? void 0 : _this$callViewWrapper4.clientHeight) || PIP_VIEW_HEIGHT; // Avoid overflow on the x axis

    if (inTranslationX + width >= _UIStore.default.instance.windowWidth) {
      this.desiredTranslationX = _UIStore.default.instance.windowWidth - width;
    } else if (inTranslationX <= 0) {
      this.desiredTranslationX = 0;
    } else {
      this.desiredTranslationX = inTranslationX;
    } // Avoid overflow on the y axis


    if (inTranslationY + height >= _UIStore.default.instance.windowHeight) {
      this.desiredTranslationY = _UIStore.default.instance.windowHeight - height;
    } else if (inTranslationY <= 0) {
      this.desiredTranslationY = 0;
    } else {
      this.desiredTranslationY = inTranslationY;
    }
  }

  render() {
    const translatePixelsX = this.state.translationX + "px";
    const translatePixelsY = this.state.translationY + "px";
    const style = {
      transform: `translateX(${translatePixelsX})
                        translateY(${translatePixelsY})`
    };
    return /*#__PURE__*/_react.default.createElement("div", {
      className: this.props.className,
      style: this.props.draggable ? style : undefined,
      ref: this.callViewWrapper,
      onDoubleClick: this.props.onDoubleClick
    }, /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, this.props.children({
      onStartMoving: this.onStartMoving,
      onResize: this.onResize
    })));
  }

}) || _class);
exports.default = PictureInPictureDragger;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,