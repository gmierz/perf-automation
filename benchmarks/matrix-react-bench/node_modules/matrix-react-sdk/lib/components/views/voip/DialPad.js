"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var React = _interopRequireWildcard(require("react"));

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _dec, _class;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const BUTTONS = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '*', '0', '#'];
const BUTTON_LETTERS = ['', 'ABC', 'DEF', 'GHI', 'JKL', 'MNO', 'PQRS', 'TUV', 'WXYZ', '', '+', ''];
var DialPadButtonKind;

(function (DialPadButtonKind) {
  DialPadButtonKind[DialPadButtonKind["Digit"] = 0] = "Digit";
  DialPadButtonKind[DialPadButtonKind["Dial"] = 1] = "Dial";
})(DialPadButtonKind || (DialPadButtonKind = {}));

class DialPadButton extends React.PureComponent {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "onClick", ev => {
      this.props.onButtonPress(this.props.digit, ev);
    });
  }

  render() {
    switch (this.props.kind) {
      case DialPadButtonKind.Digit:
        return /*#__PURE__*/React.createElement(_AccessibleButton.default, {
          className: "mx_DialPad_button",
          onClick: this.onClick
        }, this.props.digit, /*#__PURE__*/React.createElement("div", {
          className: "mx_DialPad_buttonSubText"
        }, this.props.digitSubtext));

      case DialPadButtonKind.Dial:
        return /*#__PURE__*/React.createElement(_AccessibleButton.default, {
          className: "mx_DialPad_button mx_DialPad_dialButton",
          onClick: this.onClick
        });
    }
  }

}

let Dialpad = (_dec = (0, _replaceableComponent.replaceableComponent)("views.voip.DialPad"), _dec(_class = class Dialpad extends React.PureComponent {
  render() {
    const buttonNodes = [];

    for (let i = 0; i < BUTTONS.length; i++) {
      const button = BUTTONS[i];
      const digitSubtext = BUTTON_LETTERS[i];
      buttonNodes.push( /*#__PURE__*/React.createElement(DialPadButton, {
        key: button,
        kind: DialPadButtonKind.Digit,
        digit: button,
        digitSubtext: digitSubtext,
        onButtonPress: this.props.onDigitPress
      }));
    }

    if (this.props.hasDial) {
      buttonNodes.push( /*#__PURE__*/React.createElement(DialPadButton, {
        key: "dial",
        kind: DialPadButtonKind.Dial,
        onButtonPress: this.props.onDialPress
      }));
    }

    return /*#__PURE__*/React.createElement("div", {
      className: "mx_DialPad"
    }, buttonNodes);
  }

}) || _class);
exports.default = Dialpad;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL3ZvaXAvRGlhbFBhZC50c3giXSwibmFtZXMiOlsiQlVUVE9OUyIsIkJVVFRPTl9MRVRURVJTIiwiRGlhbFBhZEJ1dHRvbktpbmQiLCJEaWFsUGFkQnV0dG9uIiwiUmVhY3QiLCJQdXJlQ29tcG9uZW50IiwiZXYiLCJwcm9wcyIsIm9uQnV0dG9uUHJlc3MiLCJkaWdpdCIsInJlbmRlciIsImtpbmQiLCJEaWdpdCIsIm9uQ2xpY2siLCJkaWdpdFN1YnRleHQiLCJEaWFsIiwiRGlhbHBhZCIsImJ1dHRvbk5vZGVzIiwiaSIsImxlbmd0aCIsImJ1dHRvbiIsInB1c2giLCJvbkRpZ2l0UHJlc3MiLCJoYXNEaWFsIiwib25EaWFsUHJlc3MiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBZ0JBOztBQUNBOztBQUNBOzs7Ozs7OztBQUVBLE1BQU1BLE9BQU8sR0FBRyxDQUFDLEdBQUQsRUFBTSxHQUFOLEVBQVcsR0FBWCxFQUFnQixHQUFoQixFQUFxQixHQUFyQixFQUEwQixHQUExQixFQUErQixHQUEvQixFQUFvQyxHQUFwQyxFQUF5QyxHQUF6QyxFQUE4QyxHQUE5QyxFQUFtRCxHQUFuRCxFQUF3RCxHQUF4RCxDQUFoQjtBQUNBLE1BQU1DLGNBQWMsR0FBRyxDQUFDLEVBQUQsRUFBSyxLQUFMLEVBQVksS0FBWixFQUFtQixLQUFuQixFQUEwQixLQUExQixFQUFpQyxLQUFqQyxFQUF3QyxNQUF4QyxFQUFnRCxLQUFoRCxFQUF1RCxNQUF2RCxFQUErRCxFQUEvRCxFQUFtRSxHQUFuRSxFQUF3RSxFQUF4RSxDQUF2QjtJQUVLQyxpQjs7V0FBQUEsaUI7QUFBQUEsRUFBQUEsaUIsQ0FBQUEsaUI7QUFBQUEsRUFBQUEsaUIsQ0FBQUEsaUI7R0FBQUEsaUIsS0FBQUEsaUI7O0FBWUwsTUFBTUMsYUFBTixTQUE0QkMsS0FBSyxDQUFDQyxhQUFsQyxDQUE4RDtBQUFBO0FBQUE7QUFBQSxtREFDL0NDLEVBQUQsSUFBcUI7QUFDM0IsV0FBS0MsS0FBTCxDQUFXQyxhQUFYLENBQXlCLEtBQUtELEtBQUwsQ0FBV0UsS0FBcEMsRUFBMkNILEVBQTNDO0FBQ0gsS0FIeUQ7QUFBQTs7QUFLMURJLEVBQUFBLE1BQU0sR0FBRztBQUNMLFlBQVEsS0FBS0gsS0FBTCxDQUFXSSxJQUFuQjtBQUNJLFdBQUtULGlCQUFpQixDQUFDVSxLQUF2QjtBQUNJLDRCQUFPLG9CQUFDLHlCQUFEO0FBQWtCLFVBQUEsU0FBUyxFQUFDLG1CQUE1QjtBQUFnRCxVQUFBLE9BQU8sRUFBRSxLQUFLQztBQUE5RCxXQUNELEtBQUtOLEtBQUwsQ0FBV0UsS0FEVixlQUVIO0FBQUssVUFBQSxTQUFTLEVBQUM7QUFBZixXQUNNLEtBQUtGLEtBQUwsQ0FBV08sWUFEakIsQ0FGRyxDQUFQOztBQU1KLFdBQUtaLGlCQUFpQixDQUFDYSxJQUF2QjtBQUNJLDRCQUFPLG9CQUFDLHlCQUFEO0FBQWtCLFVBQUEsU0FBUyxFQUFDLHlDQUE1QjtBQUFzRSxVQUFBLE9BQU8sRUFBRSxLQUFLRjtBQUFwRixVQUFQO0FBVFI7QUFXSDs7QUFqQnlEOztJQTRCekNHLE8sV0FEcEIsZ0RBQXFCLG9CQUFyQixDLGdCQUFELE1BQ3FCQSxPQURyQixTQUNxQ1osS0FBSyxDQUFDQyxhQUQzQyxDQUNpRTtBQUM3REssRUFBQUEsTUFBTSxHQUFHO0FBQ0wsVUFBTU8sV0FBVyxHQUFHLEVBQXBCOztBQUVBLFNBQUssSUFBSUMsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR2xCLE9BQU8sQ0FBQ21CLE1BQTVCLEVBQW9DRCxDQUFDLEVBQXJDLEVBQXlDO0FBQ3JDLFlBQU1FLE1BQU0sR0FBR3BCLE9BQU8sQ0FBQ2tCLENBQUQsQ0FBdEI7QUFDQSxZQUFNSixZQUFZLEdBQUdiLGNBQWMsQ0FBQ2lCLENBQUQsQ0FBbkM7QUFDQUQsTUFBQUEsV0FBVyxDQUFDSSxJQUFaLGVBQWlCLG9CQUFDLGFBQUQ7QUFDYixRQUFBLEdBQUcsRUFBRUQsTUFEUTtBQUViLFFBQUEsSUFBSSxFQUFFbEIsaUJBQWlCLENBQUNVLEtBRlg7QUFHYixRQUFBLEtBQUssRUFBRVEsTUFITTtBQUliLFFBQUEsWUFBWSxFQUFFTixZQUpEO0FBS2IsUUFBQSxhQUFhLEVBQUUsS0FBS1AsS0FBTCxDQUFXZTtBQUxiLFFBQWpCO0FBT0g7O0FBRUQsUUFBSSxLQUFLZixLQUFMLENBQVdnQixPQUFmLEVBQXdCO0FBQ3BCTixNQUFBQSxXQUFXLENBQUNJLElBQVosZUFBaUIsb0JBQUMsYUFBRDtBQUNiLFFBQUEsR0FBRyxFQUFDLE1BRFM7QUFFYixRQUFBLElBQUksRUFBRW5CLGlCQUFpQixDQUFDYSxJQUZYO0FBR2IsUUFBQSxhQUFhLEVBQUUsS0FBS1IsS0FBTCxDQUFXaUI7QUFIYixRQUFqQjtBQUtIOztBQUVELHdCQUFPO0FBQUssTUFBQSxTQUFTLEVBQUM7QUFBZixPQUNEUCxXQURDLENBQVA7QUFHSDs7QUEzQjRELEMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuQ29weXJpZ2h0IDIwMjAgVGhlIE1hdHJpeC5vcmcgRm91bmRhdGlvbiBDLkkuQy5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBBY2Nlc3NpYmxlQnV0dG9uLCB7IEJ1dHRvbkV2ZW50IH0gZnJvbSBcIi4uL2VsZW1lbnRzL0FjY2Vzc2libGVCdXR0b25cIjtcbmltcG9ydCB7IHJlcGxhY2VhYmxlQ29tcG9uZW50IH0gZnJvbSBcIi4uLy4uLy4uL3V0aWxzL3JlcGxhY2VhYmxlQ29tcG9uZW50XCI7XG5cbmNvbnN0IEJVVFRPTlMgPSBbJzEnLCAnMicsICczJywgJzQnLCAnNScsICc2JywgJzcnLCAnOCcsICc5JywgJyonLCAnMCcsICcjJ107XG5jb25zdCBCVVRUT05fTEVUVEVSUyA9IFsnJywgJ0FCQycsICdERUYnLCAnR0hJJywgJ0pLTCcsICdNTk8nLCAnUFFSUycsICdUVVYnLCAnV1hZWicsICcnLCAnKycsICcnXTtcblxuZW51bSBEaWFsUGFkQnV0dG9uS2luZCB7XG4gICAgRGlnaXQsXG4gICAgRGlhbCxcbn1cblxuaW50ZXJmYWNlIElCdXR0b25Qcm9wcyB7XG4gICAga2luZDogRGlhbFBhZEJ1dHRvbktpbmQ7XG4gICAgZGlnaXQ/OiBzdHJpbmc7XG4gICAgZGlnaXRTdWJ0ZXh0Pzogc3RyaW5nO1xuICAgIG9uQnV0dG9uUHJlc3M6IChkaWdpdDogc3RyaW5nLCBldjogQnV0dG9uRXZlbnQpID0+IHZvaWQ7XG59XG5cbmNsYXNzIERpYWxQYWRCdXR0b24gZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50PElCdXR0b25Qcm9wcz4ge1xuICAgIG9uQ2xpY2sgPSAoZXY6IEJ1dHRvbkV2ZW50KSA9PiB7XG4gICAgICAgIHRoaXMucHJvcHMub25CdXR0b25QcmVzcyh0aGlzLnByb3BzLmRpZ2l0LCBldik7XG4gICAgfTtcblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgc3dpdGNoICh0aGlzLnByb3BzLmtpbmQpIHtcbiAgICAgICAgICAgIGNhc2UgRGlhbFBhZEJ1dHRvbktpbmQuRGlnaXQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIDxBY2Nlc3NpYmxlQnV0dG9uIGNsYXNzTmFtZT1cIm14X0RpYWxQYWRfYnV0dG9uXCIgb25DbGljaz17dGhpcy5vbkNsaWNrfT5cbiAgICAgICAgICAgICAgICAgICAgeyB0aGlzLnByb3BzLmRpZ2l0IH1cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJteF9EaWFsUGFkX2J1dHRvblN1YlRleHRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIHsgdGhpcy5wcm9wcy5kaWdpdFN1YnRleHQgfVxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L0FjY2Vzc2libGVCdXR0b24+O1xuICAgICAgICAgICAgY2FzZSBEaWFsUGFkQnV0dG9uS2luZC5EaWFsOlxuICAgICAgICAgICAgICAgIHJldHVybiA8QWNjZXNzaWJsZUJ1dHRvbiBjbGFzc05hbWU9XCJteF9EaWFsUGFkX2J1dHRvbiBteF9EaWFsUGFkX2RpYWxCdXR0b25cIiBvbkNsaWNrPXt0aGlzLm9uQ2xpY2t9IC8+O1xuICAgICAgICB9XG4gICAgfVxufVxuXG5pbnRlcmZhY2UgSVByb3BzIHtcbiAgICBvbkRpZ2l0UHJlc3M6IChkaWdpdDogc3RyaW5nLCBldjogQnV0dG9uRXZlbnQpID0+IHZvaWQ7XG4gICAgaGFzRGlhbDogYm9vbGVhbjtcbiAgICBvbkRlbGV0ZVByZXNzPzogKGV2OiBCdXR0b25FdmVudCkgPT4gdm9pZDtcbiAgICBvbkRpYWxQcmVzcz86ICgpID0+IHZvaWQ7XG59XG5cbkByZXBsYWNlYWJsZUNvbXBvbmVudChcInZpZXdzLnZvaXAuRGlhbFBhZFwiKVxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGlhbHBhZCBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQ8SVByb3BzPiB7XG4gICAgcmVuZGVyKCkge1xuICAgICAgICBjb25zdCBidXR0b25Ob2RlcyA9IFtdO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgQlVUVE9OUy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgYnV0dG9uID0gQlVUVE9OU1tpXTtcbiAgICAgICAgICAgIGNvbnN0IGRpZ2l0U3VidGV4dCA9IEJVVFRPTl9MRVRURVJTW2ldO1xuICAgICAgICAgICAgYnV0dG9uTm9kZXMucHVzaCg8RGlhbFBhZEJ1dHRvblxuICAgICAgICAgICAgICAgIGtleT17YnV0dG9ufVxuICAgICAgICAgICAgICAgIGtpbmQ9e0RpYWxQYWRCdXR0b25LaW5kLkRpZ2l0fVxuICAgICAgICAgICAgICAgIGRpZ2l0PXtidXR0b259XG4gICAgICAgICAgICAgICAgZGlnaXRTdWJ0ZXh0PXtkaWdpdFN1YnRleHR9XG4gICAgICAgICAgICAgICAgb25CdXR0b25QcmVzcz17dGhpcy5wcm9wcy5vbkRpZ2l0UHJlc3N9XG4gICAgICAgICAgICAvPik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5wcm9wcy5oYXNEaWFsKSB7XG4gICAgICAgICAgICBidXR0b25Ob2Rlcy5wdXNoKDxEaWFsUGFkQnV0dG9uXG4gICAgICAgICAgICAgICAga2V5PVwiZGlhbFwiXG4gICAgICAgICAgICAgICAga2luZD17RGlhbFBhZEJ1dHRvbktpbmQuRGlhbH1cbiAgICAgICAgICAgICAgICBvbkJ1dHRvblByZXNzPXt0aGlzLnByb3BzLm9uRGlhbFByZXNzfVxuICAgICAgICAgICAgLz4pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPVwibXhfRGlhbFBhZFwiPlxuICAgICAgICAgICAgeyBidXR0b25Ob2RlcyB9XG4gICAgICAgIDwvZGl2PjtcbiAgICB9XG59XG4iXX0=