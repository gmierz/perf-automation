"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _AccessibleTooltipButton = _interopRequireDefault(require("../../elements/AccessibleTooltipButton"));

var _CallContextMenu = _interopRequireDefault(require("../../context_menus/CallContextMenu"));

var _DialpadContextMenu = _interopRequireDefault(require("../../context_menus/DialpadContextMenu"));

var _Tooltip = require("../../elements/Tooltip");

var _ContextMenu = require("../../../structures/ContextMenu");

var _languageHandler = require("../../../../languageHandler");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
Copyright 2015, 2016 OpenMarket Ltd
Copyright 2019 - 2021 The Matrix.org Foundation C.I.C.
Copyright 2021 Å imon Brandner <simon.bra.ag@gmail.com>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Height of the header duplicated from CSS because we need to subtract it from our max
// height to get the max height of the video
const CONTEXT_MENU_VPADDING = 8; // How far the context menu sits above the button (px)

const TOOLTIP_Y_OFFSET = -24;
const CONTROLS_HIDE_DELAY = 2000;

const CallViewToggleButton = ({
  state: isOn,
  className,
  onLabel,
  offLabel,
  onClick
}) => {
  const classes = (0, _classnames.default)("mx_CallViewButtons_button", className, {
    mx_CallViewButtons_button_on: isOn,
    mx_CallViewButtons_button_off: !isOn
  });
  return /*#__PURE__*/_react.default.createElement(_AccessibleTooltipButton.default, {
    className: classes,
    onClick: onClick,
    title: isOn ? onLabel : offLabel,
    alignment: _Tooltip.Alignment.Top,
    yOffset: TOOLTIP_Y_OFFSET
  });
};

class CallViewButtons extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "dialpadButton", /*#__PURE__*/(0, _react.createRef)());
    (0, _defineProperty2.default)(this, "contextMenuButton", /*#__PURE__*/(0, _react.createRef)());
    (0, _defineProperty2.default)(this, "controlsHideTimer", null);
    (0, _defineProperty2.default)(this, "onControlsHideTimer", () => {
      if (this.state.hoveringControls || this.state.showDialpad || this.state.showMoreMenu) return;
      this.controlsHideTimer = null;
      this.setState({
        visible: false
      });
    });
    (0, _defineProperty2.default)(this, "onMouseEnter", () => {
      this.setState({
        hoveringControls: true
      });
    });
    (0, _defineProperty2.default)(this, "onMouseLeave", () => {
      this.setState({
        hoveringControls: false
      });
    });
    (0, _defineProperty2.default)(this, "onDialpadClick", () => {
      if (!this.state.showDialpad) {
        this.setState({
          showDialpad: true
        });
        this.showControls();
      } else {
        this.setState({
          showDialpad: false
        });
      }
    });
    (0, _defineProperty2.default)(this, "onMoreClick", () => {
      this.setState({
        showMoreMenu: true
      });
      this.showControls();
    });
    (0, _defineProperty2.default)(this, "closeDialpad", () => {
      this.setState({
        showDialpad: false
      });
    });
    (0, _defineProperty2.default)(this, "closeContextMenu", () => {
      this.setState({
        showMoreMenu: false
      });
    });
    this.state = {
      showDialpad: false,
      hoveringControls: false,
      showMoreMenu: false,
      visible: true
    };
  }

  componentDidMount() {
    this.showControls();
  }

  showControls() {
    if (this.state.showMoreMenu || this.state.showDialpad) return;

    if (!this.state.visible) {
      this.setState({
        visible: true
      });
    }

    if (this.controlsHideTimer !== null) {
      clearTimeout(this.controlsHideTimer);
    }

    this.controlsHideTimer = window.setTimeout(this.onControlsHideTimer, CONTROLS_HIDE_DELAY);
  }

  render() {
    const callControlsClasses = (0, _classnames.default)("mx_CallViewButtons", {
      mx_CallViewButtons_hidden: !this.state.visible
    });
    let dialPad;

    if (this.state.showDialpad) {
      dialPad = /*#__PURE__*/_react.default.createElement(_DialpadContextMenu.default, (0, _extends2.default)({}, (0, _ContextMenu.alwaysAboveRightOf)(this.dialpadButton.current.getBoundingClientRect(), _ContextMenu.ChevronFace.None, CONTEXT_MENU_VPADDING), {
        // We mount the context menus as a as a child typically in order to include the
        // context menus when fullscreening the call content.
        // However, this does not work as well when the call is embedded in a
        // picture-in-picture frame. Thus, only mount as child when we are *not* in PiP.
        mountAsChild: !this.props.pipMode,
        onFinished: this.closeDialpad,
        call: this.props.call
      }));
    }

    let contextMenu;

    if (this.state.showMoreMenu) {
      contextMenu = /*#__PURE__*/_react.default.createElement(_CallContextMenu.default, (0, _extends2.default)({}, (0, _ContextMenu.alwaysAboveLeftOf)(this.contextMenuButton.current.getBoundingClientRect(), _ContextMenu.ChevronFace.None, CONTEXT_MENU_VPADDING), {
        mountAsChild: !this.props.pipMode,
        onFinished: this.closeContextMenu,
        call: this.props.call
      }));
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: callControlsClasses,
      onMouseEnter: this.onMouseEnter,
      onMouseLeave: this.onMouseLeave
    }, dialPad, contextMenu, this.props.buttonsVisibility.dialpad && /*#__PURE__*/_react.default.createElement(_ContextMenu.ContextMenuTooltipButton, {
      className: "mx_CallViewButtons_button mx_CallViewButtons_dialpad",
      inputRef: this.dialpadButton,
      onClick: this.onDialpadClick,
      isExpanded: this.state.showDialpad,
      title: (0, _languageHandler._t)("Dialpad"),
      alignment: _Tooltip.Alignment.Top,
      yOffset: TOOLTIP_Y_OFFSET
    }), /*#__PURE__*/_react.default.createElement(CallViewToggleButton, {
      state: !this.props.buttonsState.micMuted,
      className: "mx_CallViewButtons_button_mic",
      onLabel: (0, _languageHandler._t)("Mute the microphone"),
      offLabel: (0, _languageHandler._t)("Unmute the microphone"),
      onClick: this.props.handlers.onMicMuteClick
    }), this.props.buttonsVisibility.vidMute && /*#__PURE__*/_react.default.createElement(CallViewToggleButton, {
      state: !this.props.buttonsState.vidMuted,
      className: "mx_CallViewButtons_button_vid",
      onLabel: (0, _languageHandler._t)("Stop the camera"),
      offLabel: (0, _languageHandler._t)("Start the camera"),
      onClick: this.props.handlers.onVidMuteClick
    }), this.props.buttonsVisibility.screensharing && /*#__PURE__*/_react.default.createElement(CallViewToggleButton, {
      state: this.props.buttonsState.screensharing,
      className: "mx_CallViewButtons_button_screensharing",
      onLabel: (0, _languageHandler._t)("Stop sharing your screen"),
      offLabel: (0, _languageHandler._t)("Start sharing your screen"),
      onClick: this.props.handlers.onScreenshareClick
    }), this.props.buttonsVisibility.sidebar && /*#__PURE__*/_react.default.createElement(CallViewToggleButton, {
      state: this.props.buttonsState.sidebarShown,
      className: "mx_CallViewButtons_button_sidebar",
      onLabel: (0, _languageHandler._t)("Hide sidebar"),
      offLabel: (0, _languageHandler._t)("Show sidebar"),
      onClick: this.props.handlers.onToggleSidebarClick
    }), this.props.buttonsVisibility.contextMenu && /*#__PURE__*/_react.default.createElement(_ContextMenu.ContextMenuTooltipButton, {
      className: "mx_CallViewButtons_button mx_CallViewButtons_button_more",
      onClick: this.onMoreClick,
      inputRef: this.contextMenuButton,
      isExpanded: this.state.showMoreMenu,
      title: (0, _languageHandler._t)("More"),
      alignment: _Tooltip.Alignment.Top,
      yOffset: TOOLTIP_Y_OFFSET
    }), /*#__PURE__*/_react.default.createElement(_AccessibleTooltipButton.default, {
      className: "mx_CallViewButtons_button mx_CallViewButtons_button_hangup",
      onClick: this.props.handlers.onHangupClick,
      title: (0, _languageHandler._t)("Hangup"),
      alignment: _Tooltip.Alignment.Top,
      yOffset: TOOLTIP_Y_OFFSET
    }));
  }

}

exports.default = CallViewButtons;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,