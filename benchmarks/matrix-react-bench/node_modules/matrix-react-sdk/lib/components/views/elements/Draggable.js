"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _dec, _class;

let Draggable = (_dec = (0, _replaceableComponent.replaceableComponent)("views.elements.Draggable"), _dec(_class = class Draggable extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "onMouseDown", event => {
      this.setState({
        location: {
          currentX: event.clientX,
          currentY: event.clientY
        }
      });
      document.addEventListener("mousemove", this.state.onMouseMove);
      document.addEventListener("mouseup", this.state.onMouseUp);
    });
    (0, _defineProperty2.default)(this, "onMouseUp", event => {
      document.removeEventListener("mousemove", this.state.onMouseMove);
      document.removeEventListener("mouseup", this.state.onMouseUp);
      this.props.onMouseUp(event);
    });
    this.state = {
      onMouseMove: this.onMouseMove.bind(this),
      onMouseUp: this.onMouseUp.bind(this),
      location: {
        currentX: 0,
        currentY: 0
      }
    };
  }

  onMouseMove(event) {
    const newLocation = this.props.dragFunc(this.state.location, event);
    this.setState({
      location: newLocation
    });
  }

  render() {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: this.props.className,
      onMouseDown: this.onMouseDown.bind(this)
    });
  }

}) || _class);
exports.default = Draggable;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL2VsZW1lbnRzL0RyYWdnYWJsZS50c3giXSwibmFtZXMiOlsiRHJhZ2dhYmxlIiwiUmVhY3QiLCJDb21wb25lbnQiLCJjb25zdHJ1Y3RvciIsInByb3BzIiwiZXZlbnQiLCJzZXRTdGF0ZSIsImxvY2F0aW9uIiwiY3VycmVudFgiLCJjbGllbnRYIiwiY3VycmVudFkiLCJjbGllbnRZIiwiZG9jdW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwic3RhdGUiLCJvbk1vdXNlTW92ZSIsIm9uTW91c2VVcCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJiaW5kIiwibmV3TG9jYXRpb24iLCJkcmFnRnVuYyIsInJlbmRlciIsImNsYXNzTmFtZSIsIm9uTW91c2VEb3duIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQWdCQTs7QUFDQTs7OztJQW9CcUJBLFMsV0FEcEIsZ0RBQXFCLDBCQUFyQixDLGdCQUFELE1BQ3FCQSxTQURyQixTQUN1Q0MsZUFBTUMsU0FEN0MsQ0FDdUU7QUFDbkVDLEVBQUFBLFdBQVcsQ0FBQ0MsS0FBRCxFQUFnQjtBQUN2QixVQUFNQSxLQUFOO0FBRHVCLHVEQWFKQyxLQUFELElBQTZCO0FBQy9DLFdBQUtDLFFBQUwsQ0FBYztBQUNWQyxRQUFBQSxRQUFRLEVBQUU7QUFDTkMsVUFBQUEsUUFBUSxFQUFFSCxLQUFLLENBQUNJLE9BRFY7QUFFTkMsVUFBQUEsUUFBUSxFQUFFTCxLQUFLLENBQUNNO0FBRlY7QUFEQSxPQUFkO0FBT0FDLE1BQUFBLFFBQVEsQ0FBQ0MsZ0JBQVQsQ0FBMEIsV0FBMUIsRUFBdUMsS0FBS0MsS0FBTCxDQUFXQyxXQUFsRDtBQUNBSCxNQUFBQSxRQUFRLENBQUNDLGdCQUFULENBQTBCLFNBQTFCLEVBQXFDLEtBQUtDLEtBQUwsQ0FBV0UsU0FBaEQ7QUFDSCxLQXZCMEI7QUFBQSxxREF5Qk5YLEtBQUQsSUFBNkI7QUFDN0NPLE1BQUFBLFFBQVEsQ0FBQ0ssbUJBQVQsQ0FBNkIsV0FBN0IsRUFBMEMsS0FBS0gsS0FBTCxDQUFXQyxXQUFyRDtBQUNBSCxNQUFBQSxRQUFRLENBQUNLLG1CQUFULENBQTZCLFNBQTdCLEVBQXdDLEtBQUtILEtBQUwsQ0FBV0UsU0FBbkQ7QUFDQSxXQUFLWixLQUFMLENBQVdZLFNBQVgsQ0FBcUJYLEtBQXJCO0FBQ0gsS0E3QjBCO0FBR3ZCLFNBQUtTLEtBQUwsR0FBYTtBQUNUQyxNQUFBQSxXQUFXLEVBQUUsS0FBS0EsV0FBTCxDQUFpQkcsSUFBakIsQ0FBc0IsSUFBdEIsQ0FESjtBQUVURixNQUFBQSxTQUFTLEVBQUUsS0FBS0EsU0FBTCxDQUFlRSxJQUFmLENBQW9CLElBQXBCLENBRkY7QUFHVFgsTUFBQUEsUUFBUSxFQUFFO0FBQ05DLFFBQUFBLFFBQVEsRUFBRSxDQURKO0FBRU5FLFFBQUFBLFFBQVEsRUFBRTtBQUZKO0FBSEQsS0FBYjtBQVFIOztBQW9CT0ssRUFBQUEsV0FBVyxDQUFDVixLQUFELEVBQTBCO0FBQ3pDLFVBQU1jLFdBQVcsR0FBRyxLQUFLZixLQUFMLENBQVdnQixRQUFYLENBQW9CLEtBQUtOLEtBQUwsQ0FBV1AsUUFBL0IsRUFBeUNGLEtBQXpDLENBQXBCO0FBRUEsU0FBS0MsUUFBTCxDQUFjO0FBQ1ZDLE1BQUFBLFFBQVEsRUFBRVk7QUFEQSxLQUFkO0FBR0g7O0FBRURFLEVBQUFBLE1BQU0sR0FBRztBQUNMLHdCQUFPO0FBQUssTUFBQSxTQUFTLEVBQUUsS0FBS2pCLEtBQUwsQ0FBV2tCLFNBQTNCO0FBQXNDLE1BQUEsV0FBVyxFQUFFLEtBQUtDLFdBQUwsQ0FBaUJMLElBQWpCLENBQXNCLElBQXRCO0FBQW5ELE1BQVA7QUFDSDs7QUExQ2tFLEMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuQ29weXJpZ2h0IDIwMjAgVGhlIE1hdHJpeC5vcmcgRm91bmRhdGlvbiBDLkkuQy5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgcmVwbGFjZWFibGVDb21wb25lbnQgfSBmcm9tIFwiLi4vLi4vLi4vdXRpbHMvcmVwbGFjZWFibGVDb21wb25lbnRcIjtcblxuaW50ZXJmYWNlIElQcm9wcyB7XG4gICAgY2xhc3NOYW1lOiBzdHJpbmc7XG4gICAgZHJhZ0Z1bmM6IChjdXJyZW50TG9jYXRpb246IElMb2NhdGlvblN0YXRlLCBldmVudDogTW91c2VFdmVudCkgPT4gSUxvY2F0aW9uU3RhdGU7XG4gICAgb25Nb3VzZVVwOiAoZXZlbnQ6IE1vdXNlRXZlbnQpID0+IHZvaWQ7XG59XG5cbmludGVyZmFjZSBJU3RhdGUge1xuICAgIG9uTW91c2VNb3ZlOiAoZXZlbnQ6IE1vdXNlRXZlbnQpID0+IHZvaWQ7XG4gICAgb25Nb3VzZVVwOiAoZXZlbnQ6IE1vdXNlRXZlbnQpID0+IHZvaWQ7XG4gICAgbG9jYXRpb246IElMb2NhdGlvblN0YXRlO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElMb2NhdGlvblN0YXRlIHtcbiAgICBjdXJyZW50WDogbnVtYmVyO1xuICAgIGN1cnJlbnRZOiBudW1iZXI7XG59XG5cbkByZXBsYWNlYWJsZUNvbXBvbmVudChcInZpZXdzLmVsZW1lbnRzLkRyYWdnYWJsZVwiKVxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRHJhZ2dhYmxlIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PElQcm9wcywgSVN0YXRlPiB7XG4gICAgY29uc3RydWN0b3IocHJvcHM6IElQcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG5cbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIG9uTW91c2VNb3ZlOiB0aGlzLm9uTW91c2VNb3ZlLmJpbmQodGhpcyksXG4gICAgICAgICAgICBvbk1vdXNlVXA6IHRoaXMub25Nb3VzZVVwLmJpbmQodGhpcyksXG4gICAgICAgICAgICBsb2NhdGlvbjoge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRYOiAwLFxuICAgICAgICAgICAgICAgIGN1cnJlbnRZOiAwLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG9uTW91c2VEb3duID0gKGV2ZW50OiBNb3VzZUV2ZW50KTogdm9pZCA9PiB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgbG9jYXRpb246IHtcbiAgICAgICAgICAgICAgICBjdXJyZW50WDogZXZlbnQuY2xpZW50WCxcbiAgICAgICAgICAgICAgICBjdXJyZW50WTogZXZlbnQuY2xpZW50WSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgdGhpcy5zdGF0ZS5vbk1vdXNlTW92ZSk7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIHRoaXMuc3RhdGUub25Nb3VzZVVwKTtcbiAgICB9O1xuXG4gICAgcHJpdmF0ZSBvbk1vdXNlVXAgPSAoZXZlbnQ6IE1vdXNlRXZlbnQpOiB2b2lkID0+IHtcbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCB0aGlzLnN0YXRlLm9uTW91c2VNb3ZlKTtcbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgdGhpcy5zdGF0ZS5vbk1vdXNlVXApO1xuICAgICAgICB0aGlzLnByb3BzLm9uTW91c2VVcChldmVudCk7XG4gICAgfTtcblxuICAgIHByaXZhdGUgb25Nb3VzZU1vdmUoZXZlbnQ6IE1vdXNlRXZlbnQpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgbmV3TG9jYXRpb24gPSB0aGlzLnByb3BzLmRyYWdGdW5jKHRoaXMuc3RhdGUubG9jYXRpb24sIGV2ZW50KTtcblxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGxvY2F0aW9uOiBuZXdMb2NhdGlvbixcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9e3RoaXMucHJvcHMuY2xhc3NOYW1lfSBvbk1vdXNlRG93bj17dGhpcy5vbk1vdXNlRG93bi5iaW5kKHRoaXMpfSAvPjtcbiAgICB9XG59XG4iXX0=