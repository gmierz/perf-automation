"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _Tooltip = _interopRequireDefault(require("./Tooltip"));

var _dec, _class;

let TooltipButton = (_dec = (0, _replaceableComponent.replaceableComponent)("views.elements.TooltipButton"), _dec(_class = class TooltipButton extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "onMouseOver", () => {
      this.setState({
        hover: true
      });
    });
    (0, _defineProperty2.default)(this, "onMouseLeave", () => {
      this.setState({
        hover: false
      });
    });
    this.state = {
      hover: false
    };
  }

  render() {
    const tip = this.state.hover ? /*#__PURE__*/_react.default.createElement(_Tooltip.default, {
      className: "mx_TooltipButton_container",
      tooltipClassName: "mx_TooltipButton_helpText",
      label: this.props.helpText
    }) : /*#__PURE__*/_react.default.createElement("div", null);
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_TooltipButton",
      onMouseOver: this.onMouseOver,
      onMouseLeave: this.onMouseLeave
    }, "?", tip);
  }

}) || _class);
exports.default = TooltipButton;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL2VsZW1lbnRzL1Rvb2x0aXBCdXR0b24udHN4Il0sIm5hbWVzIjpbIlRvb2x0aXBCdXR0b24iLCJSZWFjdCIsIkNvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwicHJvcHMiLCJzZXRTdGF0ZSIsImhvdmVyIiwic3RhdGUiLCJyZW5kZXIiLCJ0aXAiLCJoZWxwVGV4dCIsIm9uTW91c2VPdmVyIiwib25Nb3VzZUxlYXZlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQWlCQTs7QUFDQTs7QUFDQTs7OztJQVdxQkEsYSxXQURwQixnREFBcUIsOEJBQXJCLEMsZ0JBQUQsTUFDcUJBLGFBRHJCLFNBQzJDQyxlQUFNQyxTQURqRCxDQUMyRTtBQUN2RUMsRUFBQUEsV0FBVyxDQUFDQyxLQUFELEVBQVE7QUFDZixVQUFNQSxLQUFOO0FBRGUsdURBT0csTUFBTTtBQUN4QixXQUFLQyxRQUFMLENBQWM7QUFDVkMsUUFBQUEsS0FBSyxFQUFFO0FBREcsT0FBZDtBQUdILEtBWGtCO0FBQUEsd0RBYUksTUFBTTtBQUN6QixXQUFLRCxRQUFMLENBQWM7QUFDVkMsUUFBQUEsS0FBSyxFQUFFO0FBREcsT0FBZDtBQUdILEtBakJrQjtBQUVmLFNBQUtDLEtBQUwsR0FBYTtBQUNURCxNQUFBQSxLQUFLLEVBQUU7QUFERSxLQUFiO0FBR0g7O0FBY0RFLEVBQUFBLE1BQU0sR0FBRztBQUNMLFVBQU1DLEdBQUcsR0FBRyxLQUFLRixLQUFMLENBQVdELEtBQVgsZ0JBQW1CLDZCQUFDLGdCQUFEO0FBQzNCLE1BQUEsU0FBUyxFQUFDLDRCQURpQjtBQUUzQixNQUFBLGdCQUFnQixFQUFDLDJCQUZVO0FBRzNCLE1BQUEsS0FBSyxFQUFFLEtBQUtGLEtBQUwsQ0FBV007QUFIUyxNQUFuQixnQkFJUCx5Q0FKTDtBQUtBLHdCQUNJO0FBQUssTUFBQSxTQUFTLEVBQUMsa0JBQWY7QUFBa0MsTUFBQSxXQUFXLEVBQUUsS0FBS0MsV0FBcEQ7QUFBaUUsTUFBQSxZQUFZLEVBQUUsS0FBS0M7QUFBcEYsWUFFTUgsR0FGTixDQURKO0FBTUg7O0FBaENzRSxDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbkNvcHlyaWdodCAyMDE3IE5ldyBWZWN0b3IgTHRkLlxuQ29weXJpZ2h0IDIwMTkgVGhlIE1hdHJpeC5vcmcgRm91bmRhdGlvbiBDLkkuQy5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgcmVwbGFjZWFibGVDb21wb25lbnQgfSBmcm9tIFwiLi4vLi4vLi4vdXRpbHMvcmVwbGFjZWFibGVDb21wb25lbnRcIjtcbmltcG9ydCBUb29sdGlwIGZyb20gJy4vVG9vbHRpcCc7XG5cbmludGVyZmFjZSBJUHJvcHMge1xuICAgIGhlbHBUZXh0OiBSZWFjdC5SZWFjdE5vZGUgfCBzdHJpbmc7XG59XG5cbmludGVyZmFjZSBJU3RhdGUge1xuICAgIGhvdmVyOiBib29sZWFuO1xufVxuXG5AcmVwbGFjZWFibGVDb21wb25lbnQoXCJ2aWV3cy5lbGVtZW50cy5Ub29sdGlwQnV0dG9uXCIpXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUb29sdGlwQnV0dG9uIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PElQcm9wcywgSVN0YXRlPiB7XG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgaG92ZXI6IGZhbHNlLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHByaXZhdGUgb25Nb3VzZU92ZXIgPSAoKSA9PiB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgaG92ZXI6IHRydWUsXG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBwcml2YXRlIG9uTW91c2VMZWF2ZSA9ICgpID0+IHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBob3ZlcjogZmFsc2UsXG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGNvbnN0IHRpcCA9IHRoaXMuc3RhdGUuaG92ZXIgPyA8VG9vbHRpcFxuICAgICAgICAgICAgY2xhc3NOYW1lPVwibXhfVG9vbHRpcEJ1dHRvbl9jb250YWluZXJcIlxuICAgICAgICAgICAgdG9vbHRpcENsYXNzTmFtZT1cIm14X1Rvb2x0aXBCdXR0b25faGVscFRleHRcIlxuICAgICAgICAgICAgbGFiZWw9e3RoaXMucHJvcHMuaGVscFRleHR9XG4gICAgICAgIC8+IDogPGRpdiAvPjtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibXhfVG9vbHRpcEJ1dHRvblwiIG9uTW91c2VPdmVyPXt0aGlzLm9uTW91c2VPdmVyfSBvbk1vdXNlTGVhdmU9e3RoaXMub25Nb3VzZUxlYXZlfT5cbiAgICAgICAgICAgICAgICA/XG4gICAgICAgICAgICAgICAgeyB0aXAgfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgfVxufVxuIl19