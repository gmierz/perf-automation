"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var languageHandler = _interopRequireWildcard(require("../../../languageHandler"));

var _SettingsStore = _interopRequireDefault(require("../../../settings/SettingsStore"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _Spinner = _interopRequireDefault(require("./Spinner"));

var _Dropdown = _interopRequireDefault(require("./Dropdown"));

var _dec, _class;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function languageMatchesSearchQuery(query, language) {
  if (language.label.toUpperCase().includes(query.toUpperCase())) return true;
  if (language.value.toUpperCase() === query.toUpperCase()) return true;
  return false;
}

let LanguageDropdown = (_dec = (0, _replaceableComponent.replaceableComponent)("views.elements.LanguageDropdown"), _dec(_class = class LanguageDropdown extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "onSearchChange", search => {
      this.setState({
        searchQuery: search
      });
    });
    this.state = {
      searchQuery: '',
      langs: null
    };
  }

  componentDidMount() {
    languageHandler.getAllLanguagesFromJson().then(langs => {
      langs.sort(function (a, b) {
        if (a.label < b.label) return -1;
        if (a.label > b.label) return 1;
        return 0;
      });
      this.setState({
        langs
      });
    }).catch(() => {
      this.setState({
        langs: ['en']
      });
    });

    if (!this.props.value) {
      // If no value is given, we start with the first
      // country selected, but our parent component
      // doesn't know this, therefore we do this.
      const language = languageHandler.getUserLanguage();
      this.props.onOptionChange(language);
    }
  }

  render() {
    if (this.state.langs === null) {
      return /*#__PURE__*/_react.default.createElement(_Spinner.default, null);
    }

    let displayedLanguages;

    if (this.state.searchQuery) {
      displayedLanguages = this.state.langs.filter(lang => {
        return languageMatchesSearchQuery(this.state.searchQuery, lang);
      });
    } else {
      displayedLanguages = this.state.langs;
    }

    const options = displayedLanguages.map(language => {
      return /*#__PURE__*/_react.default.createElement("div", {
        key: language.value
      }, language.label);
    }); // default value here too, otherwise we need to handle null / undefined
    // values between mounting and the initial value propgating

    let language = _SettingsStore.default.getValue("language", null,
    /*excludeDefault:*/
    true);

    let value = null;

    if (language) {
      value = this.props.value || language;
    } else {
      language = navigator.language || navigator.userLanguage;
      value = this.props.value || language;
    }

    return /*#__PURE__*/_react.default.createElement(_Dropdown.default, {
      id: "mx_LanguageDropdown",
      className: this.props.className,
      onOptionChange: this.props.onOptionChange,
      onSearchChange: this.onSearchChange,
      searchEnabled: true,
      value: value,
      label: (0, languageHandler._t)("Language Dropdown"),
      disabled: this.props.disabled
    }, options);
  }

}) || _class);
exports.default = LanguageDropdown;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,