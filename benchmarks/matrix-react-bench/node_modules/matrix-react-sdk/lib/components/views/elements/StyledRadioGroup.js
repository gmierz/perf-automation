"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _StyledRadioButton = _interopRequireDefault(require("./StyledRadioButton"));

/*
Copyright 2020 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
function StyledRadioGroup({
  name,
  definitions,
  value,
  className,
  outlined,
  disabled,
  onChange
}) {
  const _onChange = e => {
    onChange(e.target.value);
  };

  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, definitions.map(d => /*#__PURE__*/_react.default.createElement(_react.default.Fragment, {
    key: d.value
  }, /*#__PURE__*/_react.default.createElement(_StyledRadioButton.default, {
    className: (0, _classnames.default)(className, d.className),
    onChange: _onChange,
    checked: d.checked !== undefined ? d.checked : d.value === value,
    name: name,
    value: d.value,
    disabled: d.disabled ?? disabled,
    outlined: outlined
  }, d.label), d.description ? /*#__PURE__*/_react.default.createElement("span", null, d.description) : null)));
}

var _default = StyledRadioGroup;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL2VsZW1lbnRzL1N0eWxlZFJhZGlvR3JvdXAudHN4Il0sIm5hbWVzIjpbIlN0eWxlZFJhZGlvR3JvdXAiLCJuYW1lIiwiZGVmaW5pdGlvbnMiLCJ2YWx1ZSIsImNsYXNzTmFtZSIsIm91dGxpbmVkIiwiZGlzYWJsZWQiLCJvbkNoYW5nZSIsIl9vbkNoYW5nZSIsImUiLCJ0YXJnZXQiLCJtYXAiLCJkIiwiY2hlY2tlZCIsInVuZGVmaW5lZCIsImxhYmVsIiwiZGVzY3JpcHRpb24iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQWdCQTs7QUFDQTs7QUFFQTs7QUFuQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBMEJBLFNBQVNBLGdCQUFULENBQTRDO0FBQ3hDQyxFQUFBQSxJQUR3QztBQUV4Q0MsRUFBQUEsV0FGd0M7QUFHeENDLEVBQUFBLEtBSHdDO0FBSXhDQyxFQUFBQSxTQUp3QztBQUt4Q0MsRUFBQUEsUUFMd0M7QUFNeENDLEVBQUFBLFFBTndDO0FBT3hDQyxFQUFBQTtBQVB3QyxDQUE1QyxFQVFjO0FBQ1YsUUFBTUMsU0FBUyxHQUFHQyxDQUFDLElBQUk7QUFDbkJGLElBQUFBLFFBQVEsQ0FBQ0UsQ0FBQyxDQUFDQyxNQUFGLENBQVNQLEtBQVYsQ0FBUjtBQUNILEdBRkQ7O0FBSUEsc0JBQU8sNkJBQUMsY0FBRCxDQUFPLFFBQVAsUUFDREQsV0FBVyxDQUFDUyxHQUFaLENBQWdCQyxDQUFDLGlCQUFJLDZCQUFDLGNBQUQsQ0FBTyxRQUFQO0FBQWdCLElBQUEsR0FBRyxFQUFFQSxDQUFDLENBQUNUO0FBQXZCLGtCQUNuQiw2QkFBQywwQkFBRDtBQUNJLElBQUEsU0FBUyxFQUFFLHlCQUFXQyxTQUFYLEVBQXNCUSxDQUFDLENBQUNSLFNBQXhCLENBRGY7QUFFSSxJQUFBLFFBQVEsRUFBRUksU0FGZDtBQUdJLElBQUEsT0FBTyxFQUFFSSxDQUFDLENBQUNDLE9BQUYsS0FBY0MsU0FBZCxHQUEwQkYsQ0FBQyxDQUFDQyxPQUE1QixHQUFzQ0QsQ0FBQyxDQUFDVCxLQUFGLEtBQVlBLEtBSC9EO0FBSUksSUFBQSxJQUFJLEVBQUVGLElBSlY7QUFLSSxJQUFBLEtBQUssRUFBRVcsQ0FBQyxDQUFDVCxLQUxiO0FBTUksSUFBQSxRQUFRLEVBQUVTLENBQUMsQ0FBQ04sUUFBRixJQUFjQSxRQU41QjtBQU9JLElBQUEsUUFBUSxFQUFFRDtBQVBkLEtBU01PLENBQUMsQ0FBQ0csS0FUUixDQURtQixFQVlqQkgsQ0FBQyxDQUFDSSxXQUFGLGdCQUFnQiwyQ0FBUUosQ0FBQyxDQUFDSSxXQUFWLENBQWhCLEdBQWlELElBWmhDLENBQXJCLENBREMsQ0FBUDtBQWdCSDs7ZUFFY2hCLGdCIiwic291cmNlc0NvbnRlbnQiOlsiLypcbkNvcHlyaWdodCAyMDIwIFRoZSBNYXRyaXgub3JnIEZvdW5kYXRpb24gQy5JLkMuXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuaW1wb3J0IFJlYWN0LCB7IFJlYWN0Tm9kZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSBcImNsYXNzbmFtZXNcIjtcblxuaW1wb3J0IFN0eWxlZFJhZGlvQnV0dG9uIGZyb20gXCIuL1N0eWxlZFJhZGlvQnV0dG9uXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSURlZmluaXRpb248VCBleHRlbmRzIHN0cmluZz4ge1xuICAgIHZhbHVlOiBUO1xuICAgIGNsYXNzTmFtZT86IHN0cmluZztcbiAgICBkaXNhYmxlZD86IGJvb2xlYW47XG4gICAgbGFiZWw6IFJlYWN0Tm9kZTtcbiAgICBkZXNjcmlwdGlvbj86IFJlYWN0Tm9kZTtcbiAgICBjaGVja2VkPzogYm9vbGVhbjsgLy8gSWYgcHJvdmlkZWQgaXQgd2lsbCBvdmVycmlkZSB0aGUgdmFsdWUgY29tcGFyaXNvbiBkb25lIGluIHRoZSBncm91cFxufVxuXG5pbnRlcmZhY2UgSVByb3BzPFQgZXh0ZW5kcyBzdHJpbmc+IHtcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgY2xhc3NOYW1lPzogc3RyaW5nO1xuICAgIGRlZmluaXRpb25zOiBJRGVmaW5pdGlvbjxUPltdO1xuICAgIHZhbHVlPzogVDsgLy8gaWYgbm90IHByb3ZpZGVkIG5vIG9wdGlvbnMgd2lsbCBiZSBzZWxlY3RlZFxuICAgIG91dGxpbmVkPzogYm9vbGVhbjtcbiAgICBkaXNhYmxlZD86IGJvb2xlYW47XG4gICAgb25DaGFuZ2UobmV3VmFsdWU6IFQpOiB2b2lkO1xufVxuXG5mdW5jdGlvbiBTdHlsZWRSYWRpb0dyb3VwPFQgZXh0ZW5kcyBzdHJpbmc+KHtcbiAgICBuYW1lLFxuICAgIGRlZmluaXRpb25zLFxuICAgIHZhbHVlLFxuICAgIGNsYXNzTmFtZSxcbiAgICBvdXRsaW5lZCxcbiAgICBkaXNhYmxlZCxcbiAgICBvbkNoYW5nZSxcbn06IElQcm9wczxUPikge1xuICAgIGNvbnN0IF9vbkNoYW5nZSA9IGUgPT4ge1xuICAgICAgICBvbkNoYW5nZShlLnRhcmdldC52YWx1ZSk7XG4gICAgfTtcblxuICAgIHJldHVybiA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICAgIHsgZGVmaW5pdGlvbnMubWFwKGQgPT4gPFJlYWN0LkZyYWdtZW50IGtleT17ZC52YWx1ZX0+XG4gICAgICAgICAgICA8U3R5bGVkUmFkaW9CdXR0b25cbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZXMoY2xhc3NOYW1lLCBkLmNsYXNzTmFtZSl9XG4gICAgICAgICAgICAgICAgb25DaGFuZ2U9e19vbkNoYW5nZX1cbiAgICAgICAgICAgICAgICBjaGVja2VkPXtkLmNoZWNrZWQgIT09IHVuZGVmaW5lZCA/IGQuY2hlY2tlZCA6IGQudmFsdWUgPT09IHZhbHVlfVxuICAgICAgICAgICAgICAgIG5hbWU9e25hbWV9XG4gICAgICAgICAgICAgICAgdmFsdWU9e2QudmFsdWV9XG4gICAgICAgICAgICAgICAgZGlzYWJsZWQ9e2QuZGlzYWJsZWQgPz8gZGlzYWJsZWR9XG4gICAgICAgICAgICAgICAgb3V0bGluZWQ9e291dGxpbmVkfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHsgZC5sYWJlbCB9XG4gICAgICAgICAgICA8L1N0eWxlZFJhZGlvQnV0dG9uPlxuICAgICAgICAgICAgeyBkLmRlc2NyaXB0aW9uID8gPHNwYW4+eyBkLmRlc2NyaXB0aW9uIH08L3NwYW4+IDogbnVsbCB9XG4gICAgICAgIDwvUmVhY3QuRnJhZ21lbnQ+KSB9XG4gICAgPC9SZWFjdC5GcmFnbWVudD47XG59XG5cbmV4cG9ydCBkZWZhdWx0IFN0eWxlZFJhZGlvR3JvdXA7XG4iXX0=