"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _event = require("matrix-js-sdk/src/models/event");

var Avatar = _interopRequireWildcard(require("../../../Avatar"));

var _EventTile = _interopRequireDefault(require("../rooms/EventTile"));

var _SettingsStore = _interopRequireDefault(require("../../../settings/SettingsStore"));

var _Layout = require("../../../settings/enums/Layout");

var _UIFeature = require("../../../settings/UIFeature");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _Spinner = _interopRequireDefault(require("./Spinner"));

var _dec, _class;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const AVATAR_SIZE = 32;
let EventTilePreview = (_dec = (0, _replaceableComponent.replaceableComponent)("views.elements.EventTilePreview"), _dec(_class = class EventTilePreview extends _react.default.Component {
  constructor(props) {
    super(props);
    this.state = {
      message: props.message
    };
  }

  fakeEvent({
    message
  }) {
    // Fake it till we make it

    /* eslint-disable quote-props */
    const rawEvent = {
      type: "m.room.message",
      sender: this.props.userId,
      content: {
        "m.new_content": {
          msgtype: "m.text",
          body: message,
          displayname: this.props.displayName,
          avatar_url: this.props.avatarUrl
        },
        msgtype: "m.text",
        body: message,
        displayname: this.props.displayName,
        avatar_url: this.props.avatarUrl
      },
      unsigned: {
        age: 97
      },
      event_id: "$9999999999999999999999999999999999999999999",
      room_id: "!999999999999999999:example.org"
    };
    const event = new _event.MatrixEvent(rawEvent);
    /* eslint-enable quote-props */
    // Fake it more

    event.sender = {
      name: this.props.displayName || this.props.userId,
      rawDisplayName: this.props.displayName,
      userId: this.props.userId,
      getAvatarUrl: (..._) => {
        return Avatar.avatarUrlForUser({
          avatarUrl: this.props.avatarUrl
        }, AVATAR_SIZE, AVATAR_SIZE, "crop");
      },
      getMxcAvatarUrl: () => this.props.avatarUrl
    };
    return event;
  }

  render() {
    const className = (0, _classnames.default)(this.props.className, {
      "mx_IRCLayout": this.props.layout == _Layout.Layout.IRC,
      "mx_GroupLayout": this.props.layout == _Layout.Layout.Group,
      "mx_EventTilePreview_loader": !this.props.userId
    });
    if (!this.props.userId) return /*#__PURE__*/_react.default.createElement("div", {
      className: className
    }, /*#__PURE__*/_react.default.createElement(_Spinner.default, null));
    const event = this.fakeEvent(this.state);
    return /*#__PURE__*/_react.default.createElement("div", {
      className: className
    }, /*#__PURE__*/_react.default.createElement(_EventTile.default, {
      mxEvent: event,
      layout: this.props.layout,
      enableFlair: _SettingsStore.default.getValue(_UIFeature.UIFeature.Flair),
      as: "div"
    }));
  }

}) || _class);
exports.default = EventTilePreview;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL2VsZW1lbnRzL0V2ZW50VGlsZVByZXZpZXcudHN4Il0sIm5hbWVzIjpbIkFWQVRBUl9TSVpFIiwiRXZlbnRUaWxlUHJldmlldyIsIlJlYWN0IiwiQ29tcG9uZW50IiwiY29uc3RydWN0b3IiLCJwcm9wcyIsInN0YXRlIiwibWVzc2FnZSIsImZha2VFdmVudCIsInJhd0V2ZW50IiwidHlwZSIsInNlbmRlciIsInVzZXJJZCIsImNvbnRlbnQiLCJtc2d0eXBlIiwiYm9keSIsImRpc3BsYXluYW1lIiwiZGlzcGxheU5hbWUiLCJhdmF0YXJfdXJsIiwiYXZhdGFyVXJsIiwidW5zaWduZWQiLCJhZ2UiLCJldmVudF9pZCIsInJvb21faWQiLCJldmVudCIsIk1hdHJpeEV2ZW50IiwibmFtZSIsInJhd0Rpc3BsYXlOYW1lIiwiZ2V0QXZhdGFyVXJsIiwiXyIsIkF2YXRhciIsImF2YXRhclVybEZvclVzZXIiLCJnZXRNeGNBdmF0YXJVcmwiLCJyZW5kZXIiLCJjbGFzc05hbWUiLCJsYXlvdXQiLCJMYXlvdXQiLCJJUkMiLCJHcm91cCIsIlNldHRpbmdzU3RvcmUiLCJnZXRWYWx1ZSIsIlVJRmVhdHVyZSIsIkZsYWlyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFnQkE7O0FBQ0E7O0FBQ0E7O0FBR0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7Ozs7O0FBc0NBLE1BQU1BLFdBQVcsR0FBRyxFQUFwQjtJQUdxQkMsZ0IsV0FEcEIsZ0RBQXFCLGlDQUFyQixDLGdCQUFELE1BQ3FCQSxnQkFEckIsU0FDOENDLGVBQU1DLFNBRHBELENBQzhFO0FBQzFFQyxFQUFBQSxXQUFXLENBQUNDLEtBQUQsRUFBZ0I7QUFDdkIsVUFBTUEsS0FBTjtBQUNBLFNBQUtDLEtBQUwsR0FBYTtBQUNUQyxNQUFBQSxPQUFPLEVBQUVGLEtBQUssQ0FBQ0U7QUFETixLQUFiO0FBR0g7O0FBRU9DLEVBQUFBLFNB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cml4Lm9yZyBGb3VuZGF0aW9uIEMuSS5DLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY2xhc3NuYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCB7IE1hdHJpeEV2ZW50IH0gZnJvbSAnbWF0cml4LWpzLXNkay9zcmMvbW9kZWxzL2V2ZW50JztcbmltcG9ydCB7IFJvb21NZW1iZXIgfSBmcm9tICdtYXRyaXgtanMtc2RrL3NyYy9tb2RlbHMvcm9vbS1tZW1iZXInO1xuXG5pbXBvcnQgKiBhcyBBdmF0YXIgZnJvbSAnLi4vLi4vLi4vQXZhdGFyJztcbmltcG9ydCBFdmVudFRpbGUgZnJvbSAnLi4vcm9vbXMvRXZlbnRUaWxlJztcbmltcG9ydCBTZXR0aW5nc1N0b3JlIGZyb20gXCIuLi8uLi8uLi9zZXR0aW5ncy9TZXR0aW5nc1N0b3JlXCI7XG5pbXBvcnQgeyBMYXlvdXQgfSBmcm9tIFwiLi4vLi4vLi4vc2V0dGluZ3MvZW51bXMvTGF5b3V0XCI7XG5pbXBvcnQgeyBVSUZlYXR1cmUgfSBmcm9tIFwiLi4vLi4vLi4vc2V0dGluZ3MvVUlGZWF0dXJlXCI7XG5pbXBvcnQgeyByZXBsYWNlYWJsZUNvbXBvbmVudCB9IGZyb20gXCIuLi8uLi8uLi91dGlscy9yZXBsYWNlYWJsZUNvbXBvbmVudFwiO1xuaW1wb3J0IFNwaW5uZXIgZnJvbSAnLi9TcGlubmVyJztcblxuaW50ZXJmYWNlIElQcm9wcyB7XG4gICAgLyoqXG4gICAgICogVGhlIHRleHQgdG8gYmUgZGlzcGxheWVkIGluIHRoZSBtZXNzYWdlIHByZXZpZXdcbiAgICAgKi9cbiAgICBtZXNzYWdlOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHRvIHVzZSB0aGUgaXJjIGxheW91dCBvciBub3RcbiAgICAgKi9cbiAgICBsYXlvdXQ6IExheW91dDtcblxuICAgIC8qKlxuICAgICAqIGNsYXNzbmFtZXMgdG8gYXBwbHkgdG8gdGhlIHdyYXBwZXIgb2YgdGhlIHByZXZpZXdcbiAgICAgKi9cbiAgICBjbGFzc05hbWU6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFRoZSBJRCBvZiB0aGUgZGlzcGxheWVkIHVzZXJcbiAgICAgKi9cbiAgICB1c2VySWQ/OiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgZGlzcGxheSBuYW1lIG9mIHRoZSBkaXNwbGF5ZWQgdXNlclxuICAgICAqL1xuICAgIGRpc3BsYXlOYW1lPzogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG14YzovLyBhdmF0YXIgVVJMIG9mIHRoZSBkaXNwbGF5ZWQgdXNlclxuICAgICAqL1xuICAgIGF2YXRhclVybD86IHN0cmluZztcbn1cblxuaW50ZXJmYWNlIElTdGF0ZSB7XG4gICAgbWVzc2FnZTogc3RyaW5nO1xufVxuXG5jb25zdCBBVkFUQVJfU0laRSA9IDMyO1xuXG5AcmVwbGFjZWFibGVDb21wb25lbnQoXCJ2aWV3cy5lbGVtZW50cy5FdmVudFRpbGVQcmV2aWV3XCIpXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFdmVudFRpbGVQcmV2aWV3IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PElQcm9wcywgSVN0YXRlPiB7XG4gICAgY29uc3RydWN0b3IocHJvcHM6IElQcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBtZXNzYWdlOiBwcm9wcy5tZXNzYWdlLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHByaXZhdGUgZmFrZUV2ZW50KHsgbWVzc2FnZSB9OiBJU3RhdGUpIHtcbiAgICAgICAgLy8gRmFrZSBpdCB0aWxsIHdlIG1ha2UgaXRcbiAgICAgICAgLyogZXNsaW50LWRpc2FibGUgcXVvdGUtcHJvcHMgKi9cbiAgICAgICAgY29uc3QgcmF3RXZlbnQgPSB7XG4gICAgICAgICAgICB0eXBlOiBcIm0ucm9vbS5tZXNzYWdlXCIsXG4gICAgICAgICAgICBzZW5kZXI6IHRoaXMucHJvcHMudXNlcklkLFxuICAgICAgICAgICAgY29udGVudDoge1xuICAgICAgICAgICAgICAgIFwibS5uZXdfY29udGVudFwiOiB7XG4gICAgICAgICAgICAgICAgICAgIG1zZ3R5cGU6IFwibS50ZXh0XCIsXG4gICAgICAgICAgICAgICAgICAgIGJvZHk6IG1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXluYW1lOiB0aGlzLnByb3BzLmRpc3BsYXlOYW1lLFxuICAgICAgICAgICAgICAgICAgICBhdmF0YXJfdXJsOiB0aGlzLnByb3BzLmF2YXRhclVybCxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG1zZ3R5cGU6IFwibS50ZXh0XCIsXG4gICAgICAgICAgICAgICAgYm9keTogbWVzc2FnZSxcbiAgICAgICAgICAgICAgICBkaXNwbGF5bmFtZTogdGhpcy5wcm9wcy5kaXNwbGF5TmFtZSxcbiAgICAgICAgICAgICAgICBhdmF0YXJfdXJsOiB0aGlzLnByb3BzLmF2YXRhclVybCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB1bnNpZ25lZDoge1xuICAgICAgICAgICAgICAgIGFnZTogOTcsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZXZlbnRfaWQ6IFwiJDk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTlcIixcbiAgICAgICAgICAgIHJvb21faWQ6IFwiITk5OTk5OTk5OTk5OTk5OTk5OTpleGFtcGxlLm9yZ1wiLFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBldmVudCA9IG5ldyBNYXRyaXhFdmVudChyYXdFdmVudCk7XG4gICAgICAgIC8qIGVzbGludC1lbmFibGUgcXVvdGUtcHJvcHMgKi9cblxuICAgICAgICAvLyBGYWtlIGl0IG1vcmVcbiAgICAgICAgZXZlbnQuc2VuZGVyID0ge1xuICAgICAgICAgICAgbmFtZTogdGhpcy5wcm9wcy5kaXNwbGF5TmFtZSB8fCB0aGlzLnByb3BzLnVzZXJJZCxcbiAgICAgICAgICAgIHJhd0Rpc3BsYXlOYW1lOiB0aGlzLnByb3BzLmRpc3BsYXlOYW1lLFxuICAgICAgICAgICAgdXNlcklkOiB0aGlzLnByb3BzLnVzZXJJZCxcbiAgICAgICAgICAgIGdldEF2YXRhclVybDogKC4uLl8pID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gQXZhdGFyLmF2YXRhclVybEZvclVzZXIoXG4gICAgICAgICAgICAgICAgICAgIHsgYXZhdGFyVXJsOiB0aGlzLnByb3BzLmF2YXRhclVybCB9LFxuICAgICAgICAgICAgICAgICAgICBBVkFUQVJfU0laRSwgQVZBVEFSX1NJWkUsIFwiY3JvcFwiLFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0TXhjQXZhdGFyVXJsOiAoKSA9PiB0aGlzLnByb3BzLmF2YXRhclVybCxcbiAgICAgICAgfSBhcyBSb29tTWVtYmVyO1xuXG4gICAgICAgIHJldHVybiBldmVudDtcbiAgICB9XG5cbiAgICBwdWJsaWMgcmVuZGVyKCkge1xuICAgICAgICBjb25zdCBjbGFzc05hbWUgPSBjbGFzc25hbWVzKHRoaXMucHJvcHMuY2xhc3NOYW1lLCB7XG4gICAgICAgICAgICBcIm14X0lSQ0xheW91dFwiOiB0aGlzLnByb3BzLmxheW91dCA9PSBMYXlvdXQuSVJDLFxuICAgICAgICAgICAgXCJteF9Hcm91cExheW91dFwiOiB0aGlzLnByb3BzLmxheW91dCA9PSBMYXlvdXQuR3JvdXAsXG4gICAgICAgICAgICBcIm14X0V2ZW50VGlsZVByZXZpZXdfbG9hZGVyXCI6ICF0aGlzLnByb3BzLnVzZXJJZCxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKCF0aGlzLnByb3BzLnVzZXJJZCkgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPXtjbGFzc05hbWV9PjxTcGlubmVyIC8+PC9kaXY+O1xuXG4gICAgICAgIGNvbnN0IGV2ZW50ID0gdGhpcy5mYWtlRXZlbnQodGhpcy5zdGF0ZSk7XG5cbiAgICAgICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPXtjbGFzc05hbWV9PlxuICAgICAgICAgICAgPEV2ZW50VGlsZVxuICAgICAgICAgICAgICAgIG14RXZlbnQ9e2V2ZW50fVxuICAgICAgICAgICAgICAgIGxheW91dD17dGhpcy5wcm9wcy5sYXlvdXR9XG4gICAgICAgICAgICAgICAgZW5hYmxlRmxhaXI9e1NldHRpbmdzU3RvcmUuZ2V0VmFsdWUoVUlGZWF0dXJlLkZsYWlyKX1cbiAgICAgICAgICAgICAgICBhcz1cImRpdlwiXG4gICAgICAgICAgICAvPlxuICAgICAgICA8L2Rpdj47XG4gICAgfVxufVxuIl19