"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _languageHandler = require("../../../languageHandler");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _dec, _class, _class2, _temp;

let TruncatedList = (_dec = (0, _replaceableComponent.replaceableComponent)("views.elements.TruncatedList"), _dec(_class = (_temp = _class2 = class TruncatedList extends _react.default.Component {
  getChildren(start, end) {
    if (this.props.getChildren && this.props.getChildCount) {
      return this.props.getChildren(start, end);
    } else {
      // XXX: I'm not sure why anything would pass null into this, it seems
      // like a bizzare case to handle, but I'm preserving the behaviour.
      // (see commit 38d5c7d5c5d5a34dc16ef5d46278315f5c57f542)
      return _react.default.Children.toArray(this.props.children).filter(c => {
        return c != null;
      }).slice(start, end);
    }
  }

  getChildCount() {
    if (this.props.getChildren && this.props.getChildCount) {
      return this.props.getChildCount();
    } else {
      return _react.default.Children.toArray(this.props.children).filter(c => {
        return c != null;
      }).length;
    }
  }

  render() {
    let overflowNode = null;
    const totalChildren = this.getChildCount();
    let upperBound = totalChildren;

    if (this.props.truncateAt >= 0) {
      const overflowCount = totalChildren - this.props.truncateAt;

      if (overflowCount > 1) {
        overflowNode = this.props.createOverflowElement(overflowCount, totalChildren);
        upperBound = this.props.truncateAt;
      }
    }

    const childNodes = this.getChildren(0, upperBound);
    return /*#__PURE__*/_react.default.createElement("div", {
      className: this.props.className
    }, childNodes, overflowNode);
  }

}, (0, _defineProperty2.default)(_class2, "defaultProps", {
  truncateAt: 2,

  createOverflowElement(overflowCount, totalCount) {
    return /*#__PURE__*/_react.default.createElement("div", null, (0, _languageHandler._t)("And %(count)s more...", {
      count: overflowCount
    }));
  }

}), _temp)) || _class);
exports.default = TruncatedList;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL2VsZW1lbnRzL1RydW5jYXRlZExpc3QudHN4Il0sIm5hbWVzIjpbIlRydW5jYXRlZExpc3QiLCJSZWFjdCIsIkNvbXBvbmVudCIsImdldENoaWxkcmVuIiwic3RhcnQiLCJlbmQiLCJwcm9wcyIsImdldENoaWxkQ291bnQiLCJDaGlsZHJlbiIsInRvQXJyYXkiLCJjaGlsZHJlbiIsImZpbHRlciIsImMiLCJzbGljZSIsImxlbmd0aCIsInJlbmRlciIsIm92ZXJmbG93Tm9kZSIsInRvdGFsQ2hpbGRyZW4iLCJ1cHBlckJvdW5kIiwidHJ1bmNhdGVBdCIsIm92ZXJmbG93Q291bnQiLCJjcmVhdGVPdmVyZmxvd0VsZW1lbnQiLCJjaGlsZE5vZGVzIiwiY2xhc3NOYW1lIiwidG90YWxDb3VudCIsImNvdW50Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQWlCQTs7QUFDQTs7QUFDQTs7OztJQXFCcUJBLGEsV0FEcEIsZ0RBQXFCLDhCQUFyQixDLG1DQUFELE1BQ3FCQSxhQURyQixTQUMyQ0MsZUFBTUMsU0FEakQsQ0FDbUU7QUFVdkRDLEVBQUFBLFdBQVcsQ0FBQ0MsS0FBRCxFQUFnQkMsR0FBaEIsRUFBcUQ7QUFDcEUsUUFBSSxLQUFLQyxLQUFMLENBQVdILFdBQVgsSUFBMEIsS0FBS0csS0FBTCxDQUFXQyxhQUF6QyxFQUF3RDtBQUNwRCxhQUFPLEtBQUtELEtBQUwsQ0FBV0gsV0FBWCxDQUF1QkMsS0FBdkIsRUFBOEJDLEdBQTlCLENBQVA7QUFDSCxLQUZELE1BRU87QUFDSDtBQUNBO0FBQ0E7QUFDQSxhQUFPSixlQUFNTyxRQUFOLENBQWVDLE9BQWYsQ0FBdUIsS0FBS0gsS0FBTCxDQUFXSSxRQUFsQyxFQUE0Q0MsTUFBNUMsQ0FBb0RDLENBQUQsSUFBTztBQUM3RCxlQUFPQSxDQUFDLElBQUksSUFBWjtBQUNILE9BRk0sRUFFSkMsS0FGSSxDQUVFVCxLQUZGLEVBRVNDLEdBRlQsQ0FBUDtBQUdIO0FBQ0o7O0FBRU9FLEVBQUFBLGFBQWEsR0FBVztBQUM1QixRQUFJLEtBQUtELEtBQUwsQ0FBV0gsV0FBWCxJQUEwQixLQUFLRyxLQUFMLENBQVdDLGFBQXpDLEVBQXdEO0FBQ3BELGFBQU8sS0FBS0QsS0FBTCxDQUFXQyxhQUFYLEVBQVA7QUFDSCxLQUZELE1BRU87QUFDSCxhQUFPTixlQUFNTyxRQUFOLENBQWVDLE9BQWYsQ0FBdUIsS0FBS0gsS0FBTCxDQUFXSSxRQUFsQyxFQUE0Q0MsTUFBNUMsQ0FBb0RDLENBQUQsSUFBTztBQUM3RCxlQUFPQSxDQUFDLElBQUksSUFBWjtBQUNILE9BRk0sRUFFSkUsTUFGSDtBQUdIO0FBQ0o7O0FBRU1DLEVBQUFBLE1BQU0sR0FBRztBQUNaLFFBQUlDLFlBQVksR0FBRyxJQUFuQjtBQUVBLFVBQU1DLGFBQWEsR0FBRyxLQUFLVixhQUFMLEVBQXRCO0FBQ0EsUUFBSVcsVUFBVSxHQUFHRCxhQUFqQjs7QUFDQSxRQUFJLEtBQUtYLEtBQUwsQ0FBV2EsVUFBWCxJQUF5QixDQUE3QixFQUFnQztBQUM1QixZQUFNQyxhQUFhLEdBQUdILGFBQWEsR0FBRyxLQUFLWCxLQUFMLENBQVdhLFVBQWpEOztBQUNBLFVBQUlDLGFBQWEsR0FBRyxDQUFwQixFQUF1QjtBQUNuQkosUUFBQUEsWUFBWSxHQUFHLEtBQUtWLEtBQUwsQ0FBV2UscUJBQVgsQ0FDWEQsYUFEVyxFQUNJSCxhQURKLENBQWY7QUFHQUMsUUFBQUEsVUFBVSxHQUFHLEtBQUtaLEtBQUwsQ0FBV2EsVUFBeEI7QUFDSDtBQUNKOztBQUNELFVBQU1HLFVBQVUsR0FBRyxLQUFLbkIsV0FBTCxDQUFpQixDQUFqQixFQUFvQmUsVUFBcEIsQ0FBbkI7QUFFQSx3QkFDSTtBQUFLLE1BQUEsU0FBUyxFQUFFLEtBQUtaLEtBQUwsQ0FBV2lCO0FBQTNCLE9BQ01ELFVBRE4sRUFFTU4sWUFGTixDQURKO0FBTUg7O0FBdkQ4RCxDLHlEQUMxQztBQUNqQkcsRUFBQUEsVUFBVSxFQUFFLENBREs7O0FBRWpCRSxFQUFBQSxxQkFBcUIsQ0FBQ0QsYUFBRCxFQUFnQkksVUFBaEIsRUFBNEI7QUFDN0Msd0JBQ0ksMENBQU8seUJBQUcsdUJBQUgsRUFBNEI7QUFBRUMsTUFBQUEsS0FBSyxFQUFFTDtBQUFULEtBQTVCLENBQVAsQ0FESjtBQUdIOztBQU5nQixDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbkNvcHlyaWdodCAyMDE2IE9wZW5NYXJrZXQgTHRkXG5Db3B5cmlnaHQgMjAxNyBOZXcgVmVjdG9yIEx0ZFxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBfdCB9IGZyb20gJy4uLy4uLy4uL2xhbmd1YWdlSGFuZGxlcic7XG5pbXBvcnQgeyByZXBsYWNlYWJsZUNvbXBvbmVudCB9IGZyb20gXCIuLi8uLi8uLi91dGlscy9yZXBsYWNlYWJsZUNvbXBvbmVudFwiO1xuXG5pbnRlcmZhY2UgSVByb3BzIHtcbiAgICAvLyBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIHNob3cgYmVmb3JlIHRydW5jYXRpbmcuIElmIG5lZ2F0aXZlLCBubyB0cnVuY2F0aW9uIGlzIGRvbmUuXG4gICAgdHJ1bmNhdGVBdD86IG51bWJlcjtcbiAgICAvLyBUaGUgY2xhc3NOYW1lIHRvIGFwcGx5IHRvIHRoZSB3cmFwcGluZyBkaXZcbiAgICBjbGFzc05hbWU/OiBzdHJpbmc7XG4gICAgLy8gQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIGNoaWxkcmVuIHRvIGJlIHJlbmRlcmVkIGludG8gdGhlIGVsZW1lbnQuXG4gICAgLy8gVGhlIHN0YXJ0IGVsZW1lbnQgaXMgaW5jbHVkZWQsIHRoZSBlbmQgaXMgbm90IChhcyBpbiBgc2xpY2VgKS5cbiAgICAvLyBJZiBvbWl0dGVkLCB0aGUgUmVhY3QgY2hpbGQgZWxlbWVudHMgd2lsbCBiZSB1c2VkLiBUaGlzIHBhcmFtZXRlciBjYW4gYmUgdXNlZFxuICAgIC8vIHRvIGF2b2lkIGNyZWF0aW5nIHVubmVjZXNzYXJ5IFJlYWN0IGVsZW1lbnRzLlxuICAgIGdldENoaWxkcmVuPzogKHN0YXJ0OiBudW1iZXIsIGVuZDogbnVtYmVyKSA9PiBBcnJheTxSZWFjdC5SZWFjdE5vZGU+O1xuICAgIC8vIEEgZnVuY3Rpb24gdGhhdCBzaG91bGQgcmV0dXJuIHRoZSB0b3RhbCBudW1iZXIgb2YgY2hpbGQgZWxlbWVudCBhdmFpbGFibGUuXG4gICAgLy8gUmVxdWlyZWQgaWYgZ2V0Q2hpbGRyZW4gaXMgc3VwcGxpZWQuXG4gICAgZ2V0Q2hpbGRDb3VudD86ICgpID0+IG51bWJlcjtcbiAgICAvLyBBIGZ1bmN0aW9uIHdoaWNoIHdpbGwgYmUgaW52b2tlZCB3aGVuIGFuIG92ZXJmbG93IGVsZW1lbnQgaXMgcmVxdWlyZWQuXG4gICAgLy8gVGhpcyB3aWxsIGJlIGluc2VydGVkIGFmdGVyIHRoZSBjaGlsZHJlbi5cbiAgICBjcmVhdGVPdmVyZmxvd0VsZW1lbnQ/OiAob3ZlcmZsb3dDb3VudDogbnVtYmVyLCB0b3RhbENvdW50OiBudW1iZXIpID0+IFJlYWN0LlJlYWN0Tm9kZTtcbn1cblxuQHJlcGxhY2VhYmxlQ29tcG9uZW50KFwidmlld3MuZWxlbWVudHMuVHJ1bmNhdGVkTGlzdFwiKVxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVHJ1bmNhdGVkTGlzdCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxJUHJvcHM+IHtcbiAgICBzdGF0aWMgZGVmYXVsdFByb3BzID17XG4gICAgICAgIHRydW5jYXRlQXQ6IDIsXG4gICAgICAgIGNyZWF0ZU92ZXJmbG93RWxlbWVudChvdmVyZmxvd0NvdW50LCB0b3RhbENvdW50KSB7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIDxkaXY+eyBfdChcIkFuZCAlKGNvdW50KXMgbW9yZS4uLlwiLCB7IGNvdW50OiBvdmVyZmxvd0NvdW50IH0pIH08L2Rpdj5cbiAgICAgICAgICAgICk7XG4gICAgICAgIH0sXG4gICAgfTtcblxuICAgIHByaXZhdGUgZ2V0Q2hpbGRyZW4oc3RhcnQ6IG51bWJlciwgZW5kOiBudW1iZXIpOiBBcnJheTxSZWFjdC5SZWFjdE5vZGU+IHtcbiAgICAgICAgaWYgKHRoaXMucHJvcHMuZ2V0Q2hpbGRyZW4gJiYgdGhpcy5wcm9wcy5nZXRDaGlsZENvdW50KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5nZXRDaGlsZHJlbihzdGFydCwgZW5kKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIFhYWDogSSdtIG5vdCBzdXJlIHdoeSBhbnl0aGluZyB3b3VsZCBwYXNzIG51bGwgaW50byB0aGlzLCBpdCBzZWVtc1xuICAgICAgICAgICAgLy8gbGlrZSBhIGJpenphcmUgY2FzZSB0byBoYW5kbGUsIGJ1dCBJJ20gcHJlc2VydmluZyB0aGUgYmVoYXZpb3VyLlxuICAgICAgICAgICAgLy8gKHNlZSBjb21taXQgMzhkNWM3ZDVjNWQ1YTM0ZGMxNmVmNWQ0NjI3ODMxNWY1YzU3ZjU0MilcbiAgICAgICAgICAgIHJldHVybiBSZWFjdC5DaGlsZHJlbi50b0FycmF5KHRoaXMucHJvcHMuY2hpbGRyZW4pLmZpbHRlcigoYykgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBjICE9IG51bGw7XG4gICAgICAgICAgICB9KS5zbGljZShzdGFydCwgZW5kKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0Q2hpbGRDb3VudCgpOiBudW1iZXIge1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5nZXRDaGlsZHJlbiAmJiB0aGlzLnByb3BzLmdldENoaWxkQ291bnQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByb3BzLmdldENoaWxkQ291bnQoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBSZWFjdC5DaGlsZHJlbi50b0FycmF5KHRoaXMucHJvcHMuY2hpbGRyZW4pLmZpbHRlcigoYykgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBjICE9IG51bGw7XG4gICAgICAgICAgICB9KS5sZW5ndGg7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgcmVuZGVyKCkge1xuICAgICAgICBsZXQgb3ZlcmZsb3dOb2RlID0gbnVsbDtcblxuICAgICAgICBjb25zdCB0b3RhbENoaWxkcmVuID0gdGhpcy5nZXRDaGlsZENvdW50KCk7XG4gICAgICAgIGxldCB1cHBlckJvdW5kID0gdG90YWxDaGlsZHJlbjtcbiAgICAgICAgaWYgKHRoaXMucHJvcHMudHJ1bmNhdGVBdCA+PSAwKSB7XG4gICAgICAgICAgICBjb25zdCBvdmVyZmxvd0NvdW50ID0gdG90YWxDaGlsZHJlbiAtIHRoaXMucHJvcHMudHJ1bmNhdGVBdDtcbiAgICAgICAgICAgIGlmIChvdmVyZmxvd0NvdW50ID4gMSkge1xuICAgICAgICAgICAgICAgIG92ZXJmbG93Tm9kZSA9IHRoaXMucHJvcHMuY3JlYXRlT3ZlcmZsb3dFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICBvdmVyZmxvd0NvdW50LCB0b3RhbENoaWxkcmVuLFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgdXBwZXJCb3VuZCA9IHRoaXMucHJvcHMudHJ1bmNhdGVBdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjaGlsZE5vZGVzID0gdGhpcy5nZXRDaGlsZHJlbigwLCB1cHBlckJvdW5kKTtcblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3RoaXMucHJvcHMuY2xhc3NOYW1lfT5cbiAgICAgICAgICAgICAgICB7IGNoaWxkTm9kZXMgfVxuICAgICAgICAgICAgICAgIHsgb3ZlcmZsb3dOb2RlIH1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICApO1xuICAgIH1cbn1cbiJdfQ==