"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _languageHandler = require("../../../languageHandler");

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _Permalinks = require("../../../utils/permalinks/Permalinks");

var _SettingsStore = _interopRequireDefault(require("../../../settings/SettingsStore"));

var _escapeHtml = _interopRequireDefault(require("escape-html"));

var _MatrixClientContext = _interopRequireDefault(require("../../../contexts/MatrixClientContext"));

var _FormattingUtils = require("../../../utils/FormattingUtils");

var _actions = require("../../../dispatcher/actions");

var _sanitizeHtml = _interopRequireDefault(require("sanitize-html"));

var _HtmlUtils = require("../../../HtmlUtils");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _Spinner = _interopRequireDefault(require("./Spinner"));

var _ReplyTile = _interopRequireDefault(require("../rooms/ReplyTile"));

var _Pill = _interopRequireDefault(require("./Pill"));

var _event = require("matrix-js-sdk/src/@types/event");

var _dec, _class, _class2, _temp;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * This number is based on the previous behavior - if we have message of height
 * over 60px then we want to show button that will allow to expand it.
 */
const SHOW_EXPAND_QUOTE_PIXELS = 60;
let ReplyChain = ( // This component does no cycle detection, simply because the only way to make such a cycle would be to
// craft event_id's, using a homeserver that generates predictable event IDs; even then the impact would
// be low as each event being loaded (after the first) is triggered by an explicit user action.
_dec = (0, _replaceableComponent.replaceableComponent)("views.elements.ReplyChain"), _dec(_class = (_temp = _class2 = class ReplyChain extends _react.default.Component {
  constructor(props, context) {
    super(props, context);
    (0, _defineProperty2.default)(this, "unmounted", false);
    (0, _defineProperty2.default)(this, "room", void 0);
    (0, _defineProperty2.default)(this, "blockquoteRef", /*#__PURE__*/_react.default.createRef());
    (0, _defineProperty2.default)(this, "canCollapse", () => {
      return this.state.events.length > 1;
    });
    (0, _defineProperty2.default)(this, "collapse", () => {
      this.initialize();
    });
    (0, _defineProperty2.default)(this, "onQuoteClick", async event => {
      const events = [this.state.loadedEv, ...this.state.events];
      let loadedEv = null;

      if (events.length > 0) {
        loadedEv = await this.getNextEvent(events[0]);
      }

      this.setState({
        loadedEv,
        events
      });

      _dispatcher.default.fire(_actions.Action.FocusSendMessageComposer);
    });
    this.state = {
      events: [],
      loadedEv: null,
      loading: true,
      err: false
    };
    this.room = this.context.getRoom(this.props.parentEv.getRoomId());
  }

  static getParentEventId(ev) {
    if (!ev || ev.isRedacted()) return; // XXX: For newer relations (annotations, replacements, etc.), we now
    // have a `getRelation` helper on the event, and you might assume it
    // could be used here for replies as well... However, the helper
    // currently assumes the relation has a `rel_type`, which older replies
    // do not, so this block is left as-is for now.
    //
    // We're prefer ev.getContent() over ev.getWireContent() to make sure
    // we grab the latest edit with potentially new relations. But we also
    // can't just rely on ev.getContent() by itself because historically we
    // still show the reply from the original message even though the edit
    // event does not include the relation reply.

    const mRelatesTo = ev.getContent()['m.relates_to'] || ev.getWireContent()['m.relates_to'];

    if (mRelatesTo && mRelatesTo['m.in_reply_to']) {
      const mInReplyTo = mRelatesTo['m.in_reply_to'];
      if (mInReplyTo && mInReplyTo['event_id']) return mInReplyTo['event_id'];
    } else if (!_SettingsStore.default.getValue("feature_thread") && ev.isThreadRelation) {
      return ev.threadRootId;
    }
  } // Part of Replies fallback support


  static stripPlainReply(body) {
    // Removes lines beginning with `> ` until you reach one that doesn't.
    const lines = body.split('\n');

    while (lines.length && lines[0].startsWith('> ')) lines.shift(); // Reply fallback has a blank line after it, so remove it to prevent leading newline


    if (lines[0] === '') lines.shift();
    return lines.join('\n');
  } // Part of Replies fallback support


  static stripHTMLReply(html) {
    // Sanitize the original HTML for inclusion in <mx-reply>.  We allow
    // any HTML, since the original sender could use special tags that we
    // don't recognize, but want to pass along to any recipients who do
    // recognize them -- recipients should be sanitizing before displaying
    // anyways.  However, we sanitize to 1) remove any mx-reply, so that we
    // don't generate a nested mx-reply, and 2) make sure that the HTML is
    // properly formatted (e.g. tags are closed where necessary)
    return (0, _sanitizeHtml.default)(html, {
      allowedTags: false,
      // false means allow everything
      allowedAttributes: false,
      // we somehow can't allow all schemes, so we allow all that we
      // know of and mxc (for img tags)
      allowedSchemes: [..._HtmlUtils.PERMITTED_URL_SCHEMES, 'mxc'],
      exclusiveFilter: frame => frame.tag === "mx-reply"
    });
  } // Part of Replies fallback support


  static getNestedReplyText(ev, permalinkCreator) {
    if (!ev) return null;
    let {
      body,
      formatted_body: html
    } = ev.getContent();

    if (this.getParentEventId(ev)) {
      if (body) body = this.stripPlainReply(body);
    }

    if (!body) body = ""; // Always ensure we have a body, for reasons.

    if (html) {
      // sanitize the HTML before we put it in an <mx-reply>
      html = this.stripHTMLReply(html);
    } else {
      // Escape the body to use as HTML below.
      // We also run a nl2br over the result to fix the fallback representation. We do this
      // after converting the text to safe HTML to avoid user-provided BR's from being converted.
      html = (0, _escapeHtml.default)(body).replace(/\n/g, '<br/>');
    } // dev note: do not rely on `body` being safe for HTML usage below.


    const evLink = permalinkCreator.forEvent(ev.getId());
    const userLink = (0, _Permalinks.makeUserPermalink)(ev.getSender());
    const mxid = ev.getSender(); // This fallback contains text that is explicitly EN.

    switch (ev.getContent().msgtype) {
      case 'm.text':
      case 'm.notice':
        {
          html = `<mx-reply><blockquote><a href="${evLink}">In reply to</a> <a href="${userLink}">${mxid}</a>` + `<br>${html}</blockquote></mx-reply>`;
          const lines = body.trim().split('\n');

          if (lines.length > 0) {
            lines[0] = `<${mxid}> ${lines[0]}`;
            body = lines.map(line => `> ${line}`).join('\n') + '\n\n';
          }

          break;
        }

      case 'm.image':
        html = `<mx-reply><blockquote><a href="${evLink}">In reply to</a> <a href="${userLink}">${mxid}</a>` + `<br>sent an image.</blockquote></mx-reply>`;
        body = `> <${mxid}> sent an image.\n\n`;
        break;

      case 'm.video':
        html = `<mx-reply><blockquote><a href="${evLink}">In reply to</a> <a href="${userLink}">${mxid}</a>` + `<br>sent a video.</blockquote></mx-reply>`;
        body = `> <${mxid}> sent a video.\n\n`;
        break;

      case 'm.audio':
        html = `<mx-reply><blockquote><a href="${evLink}">In reply to</a> <a href="${userLink}">${mxid}</a>` + `<br>sent an audio file.</blockquote></mx-reply>`;
        body = `> <${mxid}> sent an audio file.\n\n`;
        break;

      case 'm.file':
        html = `<mx-reply><blockquote><a href="${evLink}">In reply to</a> <a href="${userLink}">${mxid}</a>` + `<br>sent a file.</blockquote></mx-reply>`;
        body = `> <${mxid}> sent a file.\n\n`;
        break;

      case 'm.emote':
        {
          html = `<mx-reply><blockquote><a href="${evLink}">In reply to</a> * ` + `<a href="${userLink}">${mxid}</a><br>${html}</blockquote></mx-reply>`;
          const lines = body.trim().split('\n');

          if (lines.length > 0) {
            lines[0] = `* <${mxid}> ${lines[0]}`;
            body = lines.map(line => `> ${line}`).join('\n') + '\n\n';
          }

          break;
        }

      default:
        return null;
    }

    return {
      body,
      html
    };
  }

  static makeReplyMixIn(ev) {
    if (!ev) return {};
    const mixin = {
      'm.relates_to': {
        'm.in_reply_to': {
          'event_id': ev.getId()
        }
      }
    };
    /**
     * If the event replied is part of a thread
     * Add the `m.thread` relation so that clients
     * that know how to handle that relation will
     * be able to render them more accurately
     */

    if (ev.isThreadRelation) {
      mixin['m.relates_to'] = _objectSpread(_objectSpread({}, mixin['m.relates_to']), {}, {
        rel_type: _event.RelationType.Thread,
        event_id: ev.threadRootId
      });
    }

    return mixin;
  }

  static hasReply(event) {
    return Boolean(ReplyChain.getParentEventId(event));
  }

  componentDidMount() {
    this.initialize();
    this.trySetExpandableQuotes();
  }

  componentDidUpdate() {
    this.props.onHeightChanged();
    this.trySetExpandableQuotes();
  }

  componentWillUnmount() {
    this.unmounted = true;
  }

  trySetExpandableQuotes() {
    if (this.props.isQuoteExpanded === undefined && this.blockquoteRef.current) {
      const el = this.blockquoteRef.current.querySelector('.mx_EventTile_body');

      if (el) {
        const code = el.querySelector('code');
        const isCodeEllipsisShown = code ? code.offsetHeight >= SHOW_EXPAND_QUOTE_PIXELS : false;
        const isElipsisShown = el.offsetHeight >= SHOW_EXPAND_QUOTE_PIXELS || isCodeEllipsisShown;

        if (isElipsisShown) {
          this.props.setQuoteExpanded(false);
        }
      }
    }
  }

  async initialize() {
    const {
      parentEv
    } = this.props; // at time of making this component we checked that props.parentEv has a parentEventId

    const ev = await this.getEvent(ReplyChain.getParentEventId(parentEv));
    if (this.unmounted) return;

    if (ev) {
      const loadedEv = await this.getNextEvent(ev);
      this.setState({
        events: [ev],
        loadedEv,
        loading: false
      });
    } else {
      this.setState({
        err: true
      });
    }
  }

  async getNextEvent(ev) {
    try {
      const inReplyToEventId = ReplyChain.getParentEventId(ev);
      return await this.getEvent(inReplyToEventId);
    } catch (e) {
      return null;
    }
  }

  async getEvent(eventId) {
    if (!eventId) return null;
    const event = this.room.findEventById(eventId);
    if (event) return event;

    try {
      // ask the client to fetch the event we want using the context API, only interface to do so is to ask
      // for a timeline with that event, but once it is loaded we can use findEventById to look up the ev map
      await this.context.getEventTimeline(this.room.getUnfilteredTimelineSet(), eventId);
    } catch (e) {
      // if it fails catch the error and return early, there's no point trying to find the event in this case.
      // Return null as it is falsey and thus should be treated as an error (as the event cannot be resolved).
      return null;
    }

    return this.room.findEventById(eventId);
  }

  getReplyChainColorClass(ev) {
    return (0, _FormattingUtils.getUserNameColorClass)(ev.getSender()).replace("Username", "ReplyChain");
  }

  render() {
    let header = null;

    if (this.state.err) {
      header = /*#__PURE__*/_react.default.createElement("blockquote", {
        className: "mx_ReplyChain mx_ReplyChain_error"
      }, (0, _languageHandler._t)('Unable to load event that was replied to, ' + 'it either does not exist or you do not have permission to view it.'));
    } else if (this.state.loadedEv) {
      const ev = this.state.loadedEv;
      const room = this.context.getRoom(ev.getRoomId());
      header = /*#__PURE__*/_react.default.createElement("blockquote", {
        className: `mx_ReplyChain ${this.getReplyChainColorClass(ev)}`
      }, (0, _languageHandler._t)('<a>In reply to</a> <pill>', {}, {
        'a': sub => /*#__PURE__*/_react.default.createElement("a", {
          onClick: this.onQuoteClick,
          className: "mx_ReplyChain_show"
        }, sub),
        'pill': /*#__PURE__*/_react.default.createElement(_Pill.default, {
          type: _Pill.default.TYPE_USER_MENTION,
          room: room,
          url: (0, _Permalinks.makeUserPermalink)(ev.getSender()),
          shouldShowPillAvatar: _SettingsStore.default.getValue("Pill.shouldShowPillAvatar")
        })
      }));
    } else if (this.props.forExport) {
      const eventId = ReplyChain.getParentEventId(this.props.parentEv);
      header = /*#__PURE__*/_react.default.createElement("p", {
        className: "mx_ReplyChain_Export"
      }, (0, _languageHandler._t)("In reply to <a>this message</a>", {}, {
        a: sub => /*#__PURE__*/_react.default.createElement("a", {
          className: "mx_reply_anchor",
          href: `#${eventId}`,
          "scroll-to": eventId
        }, " ", sub, " ")
      }));
    } else if (this.state.loading) {
      header = /*#__PURE__*/_react.default.createElement(_Spinner.default, {
        w: 16,
        h: 16
      });
    }

    const {
      isQuoteExpanded
    } = this.props;
    const evTiles = this.state.events.map(ev => {
      const classname = (0, _classnames.default)({
        'mx_ReplyChain': true,
        [this.getReplyChainColorClass(ev)]: true,
        // We don't want to add the class if it's undefined, it should only be expanded/collapsed when it's true/false
        'mx_ReplyChain--expanded': isQuoteExpanded === true,
        // We don't want to add the class if it's undefined, it should only be expanded/collapsed when it's true/false
        'mx_ReplyChain--collapsed': isQuoteExpanded === false
      });
      return /*#__PURE__*/_react.default.createElement("blockquote", {
        ref: this.blockquoteRef,
        className: classname,
        key: ev.getId()
      }, /*#__PURE__*/_react.default.createElement(_ReplyTile.default, {
        mxEvent: ev,
        onHeightChanged: this.props.onHeightChanged,
        permalinkCreator: this.props.permalinkCreator,
        toggleExpandedQuote: () => this.props.setQuoteExpanded(!this.props.isQuoteExpanded)
      }));
    });
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_ReplyChain_wrapper"
    }, /*#__PURE__*/_react.default.createElement("div", null, header), /*#__PURE__*/_react.default.createElement("div", null, evTiles));
  }

}, (0, _defineProperty2.default)(_class2, "contextType", _MatrixClientContext.default), _temp)) || _class);
exports.default = ReplyChain;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,