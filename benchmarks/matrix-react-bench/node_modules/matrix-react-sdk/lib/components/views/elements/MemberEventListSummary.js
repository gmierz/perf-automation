"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _languageHandler = require("../../../languageHandler");

var _FormattingUtils = require("../../../utils/FormattingUtils");

var _RoomInvite = require("../../../RoomInvite");

var _EventListSummary = _interopRequireDefault(require("./EventListSummary"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _RightPanelStorePhases = require("../../../stores/RightPanelStorePhases");

var _actions = require("../../../dispatcher/actions");

var _ReactUtils = require("../../../utils/ReactUtils");

var _event = require("matrix-js-sdk/src/@types/event");

var _Layout = require("../../../settings/enums/Layout");

var _dec, _class, _class2, _temp;

const onPinnedMessagesClick = () => {
  _dispatcher.default.dispatch({
    action: _actions.Action.SetRightPanelPhase,
    phase: _RightPanelStorePhases.RightPanelPhases.PinnedMessages,
    allowClose: false
  });
};

const SENDER_AS_DISPLAY_NAME_EVENTS = [_event.EventType.RoomServerAcl, _event.EventType.RoomPinnedEvents];
var TransitionType;

(function (TransitionType) {
  TransitionType["Joined"] = "joined";
  TransitionType["Left"] = "left";
  TransitionType["JoinedAndLeft"] = "joined_and_left";
  TransitionType["LeftAndJoined"] = "left_and_joined";
  TransitionType["InviteReject"] = "invite_reject";
  TransitionType["InviteWithdrawal"] = "invite_withdrawal";
  TransitionType["Invited"] = "invited";
  TransitionType["Banned"] = "banned";
  TransitionType["Unbanned"] = "unbanned";
  TransitionType["Kicked"] = "kicked";
  TransitionType["ChangedName"] = "changed_name";
  TransitionType["ChangedAvatar"] = "changed_avatar";
  TransitionType["NoChange"] = "no_change";
  TransitionType["ServerAcl"] = "server_acl";
  TransitionType["ChangedPins"] = "pinned_messages";
})(TransitionType || (TransitionType = {}));

const SEP = ",";
let MemberEventListSummary = (_dec = (0, _replaceableComponent.replaceableComponent)("views.elements.MemberEventListSummary"), _dec(_class = (_temp = _class2 = class MemberEventListSummary extends _react.default.Component {
  shouldComponentUpdate(nextProps) {
    // Update if
    //  - The number of summarised events has changed
    //  - or if the summary is about to toggle to become collapsed
    //  - or if there are fewEvents, meaning the child eventTiles are shown as-is
    return nextProps.events.length !== this.props.events.length || nextProps.events.length < this.props.threshold;
  }
  /**
   * Generate the text for users aggregated by their transition sequences (`eventAggregates`) where
   * the sequences are ordered by `orderedTransitionSequences`.
   * @param {object} eventAggregates a map of transition sequence to array of user display names
   * or user IDs.
   * @param {string[]} orderedTransitionSequences an array which is some ordering of
   * `Object.keys(eventAggregates)`.
   * @returns {string} the textual summary of the aggregated events that occurred.
   */


  generateSummary(eventAggregates, orderedTransitionSequences) {
    const summaries = orderedTransitionSequences.map(transitions => {
      const userNames = eventAggregates[transitions];
      const nameList = this.renderNameList(userNames);
      const splitTransitions = transitions.split(SEP); // Some neighbouring transitions are common, so canonicalise some into "pair"
      // transitions

      const canonicalTransitions = MemberEventListSummary.getCanonicalTransitions(splitTransitions); // Transform into consecutive repetitions of the same transition (like 5
      // consecutive 'joined_and_left's)

      const coalescedTransitions = MemberEventListSummary.coalesceRepeatedTransitions(canonicalTransitions);
      const descs = coalescedTransitions.map(t => {
        return MemberEventListSummary.getDescriptionForTransition(t.transitionType, userNames.length, t.repeats);
      });
      const desc = (0, _FormattingUtils.formatCommaSeparatedList)(descs);
      return (0, _languageHandler._t)('%(nameList)s %(transitionList)s', {
        nameList,
        transitionList: desc
      });
    });

    if (!summaries) {
      return null;
    }

    return (0, _ReactUtils.jsxJoin)(summaries, ", ");
  }
  /**
   * @param {string[]} users an array of user display names or user IDs.
   * @returns {string} a comma-separated list that ends with "and [n] others" if there are
   * more items in `users` than `this.props.summaryLength`, which is the number of names
   * included before "and [n] others".
   */


  renderNameList(users) {
    return (0, _FormattingUtils.formatCommaSeparatedList)(users, this.props.summaryLength);
  }
  /**
   * Canonicalise an array of transitions such that some pairs of transitions become
   * single transitions. For example an input ['joined','left'] would result in an output
   * ['joined_and_left'].
   * @param {string[]} transitions an array of transitions.
   * @returns {string[]} an array of transitions.
   */


  static getCanonicalTransitions(transitions) {
    const modMap = {
      [TransitionType.Joined]: {
        after: TransitionType.Left,
        newTransition: TransitionType.JoinedAndLeft
      },
      [TransitionType.Left]: {
        after: TransitionType.Joined,
        newTransition: TransitionType.LeftAndJoined
      } // $currentTransition : {
      //     'after' : $nextTransition,
      //     'newTransition' : 'new_transition_type',
      // },

    };
    const res = [];

    for (let i = 0; i < transitions.length; i++) {
      const t = transitions[i];
      const t2 = transitions[i + 1];
      let transition = t;

      if (i < transitions.length - 1 && modMap[t] && modMap[t].after === t2) {
        transition = modMap[t].newTransition;
        i++;
      }

      res.push(transition);
    }

    return res;
  }
  /**
   * Transform an array of transitions into an array of transitions and how many times
   * they are repeated consecutively.
   *
   * An array of 123 "joined_and_left" transitions, would result in:
   * ```
   * [{
   *   transitionType: "joined_and_left"
   *   repeats: 123
   * }]
   * ```
   * @param {string[]} transitions the array of transitions to transform.
   * @returns {object[]} an array of coalesced transitions.
   */


  static coalesceRepeatedTransitions(transitions) {
    const res = [];

    for (let i = 0; i < transitions.length; i++) {
      if (res.length > 0 && res[res.length - 1].transitionType === transitions[i]) {
        res[res.length - 1].repeats += 1;
      } else {
        res.push({
          transitionType: transitions[i],
          repeats: 1
        });
      }
    }

    return res;
  }
  /**
   * For a certain transition, t, describe what happened to the users that
   * underwent the transition.
   * @param {string} t the transition type.
   * @param {number} userCount number of usernames
   * @param {number} repeats the number of times the transition was repeated in a row.
   * @returns {string} the written Human Readable equivalent of the transition.
   */


  static getDescriptionForTransition(t, userCount, repeats) {
    // The empty interpolations 'severalUsers' and 'oneUser'
    // are there only to show translators to non-English languages
    // that the verb is conjugated to plural or singular Subject.
    let res = null;

    switch (t) {
      case "joined":
        res = userCount > 1 ? (0, _languageHandler._t)("%(severalUsers)sjoined %(count)s times", {
          severalUsers: "",
          count: repeats
        }) : (0, _languageHandler._t)("%(oneUser)sjoined %(count)s times", {
          oneUser: "",
          count: repeats
        });
        break;

      case "left":
        res = userCount > 1 ? (0, _languageHandler._t)("%(severalUsers)sleft %(count)s times", {
          severalUsers: "",
          count: repeats
        }) : (0, _languageHandler._t)("%(oneUser)sleft %(count)s times", {
          oneUser: "",
          count: repeats
        });
        break;

      case "joined_and_left":
        res = userCount > 1 ? (0, _languageHandler._t)("%(severalUsers)sjoined and left %(count)s times", {
          severalUsers: "",
          count: repeats
        }) : (0, _languageHandler._t)("%(oneUser)sjoined and left %(count)s times", {
          oneUser: "",
          count: repeats
        });
        break;

      case "left_and_joined":
        res = userCount > 1 ? (0, _languageHandler._t)("%(severalUsers)sleft and rejoined %(count)s times", {
          severalUsers: "",
          count: repeats
        }) : (0, _languageHandler._t)("%(oneUser)sleft and rejoined %(count)s times", {
          oneUser: "",
          count: repeats
        });
        break;

      case "invite_reject":
        res = userCount > 1 ? (0, _languageHandler._t)("%(severalUsers)srejected their invitations %(count)s times", {
          severalUsers: "",
          count: repeats
        }) : (0, _languageHandler._t)("%(oneUser)srejected their invitation %(count)s times", {
          oneUser: "",
          count: repeats
        });
        break;

      case "invite_withdrawal":
        res = userCount > 1 ? (0, _languageHandler._t)("%(severalUsers)shad their invitations withdrawn %(count)s times", {
          severalUsers: "",
          count: repeats
        }) : (0, _languageHandler._t)("%(oneUser)shad their invitation withdrawn %(count)s times", {
          oneUser: "",
          count: repeats
        });
        break;

      case "invited":
        res = userCount > 1 ? (0, _languageHandler._t)("were invited %(count)s times", {
          count: repeats
        }) : (0, _languageHandler._t)("was invited %(count)s times", {
          count: repeats
        });
        break;

      case "banned":
        res = userCount > 1 ? (0, _languageHandler._t)("were banned %(count)s times", {
          count: repeats
        }) : (0, _languageHandler._t)("was banned %(count)s times", {
          count: repeats
        });
        break;

      case "unbanned":
        res = userCount > 1 ? (0, _languageHandler._t)("were unbanned %(count)s times", {
          count: repeats
        }) : (0, _languageHandler._t)("was unbanned %(count)s times", {
          count: repeats
        });
        break;

      case "kicked":
        res = userCount > 1 ? (0, _languageHandler._t)("were kicked %(count)s times", {
          count: repeats
        }) : (0, _languageHandler._t)("was kicked %(count)s times", {
          count: repeats
        });
        break;

      case "changed_name":
        res = userCount > 1 ? (0, _languageHandler._t)("%(severalUsers)schanged their name %(count)s times", {
          severalUsers: "",
          count: repeats
        }) : (0, _languageHandler._t)("%(oneUser)schanged their name %(count)s times", {
          oneUser: "",
          count: repeats
        });
        break;

      case "changed_avatar":
        res = userCount > 1 ? (0, _languageHandler._t)("%(severalUsers)schanged their avatar %(count)s times", {
          severalUsers: "",
          count: repeats
        }) : (0, _languageHandler._t)("%(oneUser)schanged their avatar %(count)s times", {
          oneUser: "",
          count: repeats
        });
        break;

      case "no_change":
        res = userCount > 1 ? (0, _languageHandler._t)("%(severalUsers)smade no changes %(count)s times", {
          severalUsers: "",
          count: repeats
        }) : (0, _languageHandler._t)("%(oneUser)smade no changes %(count)s times", {
          oneUser: "",
          count: repeats
        });
        break;

      case "server_acl":
        res = userCount > 1 ? (0, _languageHandler._t)("%(severalUsers)schanged the server ACLs %(count)s times", {
          severalUsers: "",
          count: repeats
        }) : (0, _languageHandler._t)("%(oneUser)schanged the server ACLs %(count)s times", {
          oneUser: "",
          count: repeats
        });
        break;

      case "pinned_messages":
        res = userCount > 1 ? (0, _languageHandler._t)("%(severalUsers)schanged the <a>pinned messages</a> for the room %(count)s times.", {
          severalUsers: "",
          count: repeats
        }, {
          "a": sub => /*#__PURE__*/_react.default.createElement("a", {
            onClick: onPinnedMessagesClick
          }, " ", sub, " ")
        }) : (0, _languageHandler._t)("%(oneUser)schanged the <a>pinned messages</a> for the room %(count)s times.", {
          oneUser: "",
          count: repeats
        }, {
          "a": sub => /*#__PURE__*/_react.default.createElement("a", {
            onClick: onPinnedMessagesClick
          }, " ", sub, " ")
        });
        break;
    }

    return res;
  }

  static getTransitionSequence(events) {
    return events.map(MemberEventListSummary.getTransition);
  }
  /**
   * Label a given membership event, `e`, where `getContent().membership` has
   * changed for each transition allowed by the Matrix protocol. This attempts to
   * label the membership changes that occur in `../../../TextForEvent.js`.
   * @param {MatrixEvent} e the membership change event to label.
   * @returns {string?} the transition type given to this event. This defaults to `null`
   * if a transition is not recognised.
   */


  static getTransition(e) {
    const type = e.mxEvent.getType();

    if (type === _event.EventType.RoomThirdPartyInvite) {
      // Handle 3pid invites the same as invites so they get bundled together
      if (!(0, _RoomInvite.isValid3pidInvite)(e.mxEvent)) {
        return TransitionType.InviteWithdrawal;
      }

      return TransitionType.Invited;
    } else if (type === _event.EventType.RoomServerAcl) {
      return TransitionType.ServerAcl;
    } else if (type === _event.EventType.RoomPinnedEvents) {
      return TransitionType.ChangedPins;
    }

    switch (e.mxEvent.getContent().membership) {
      case 'invite':
        return TransitionType.Invited;

      case 'ban':
        return TransitionType.Banned;

      case 'join':
        if (e.mxEvent.getPrevContent().membership === 'join') {
          if (e.mxEvent.getContent().displayname !== e.mxEvent.getPrevContent().displayname) {
            return TransitionType.ChangedName;
          } else if (e.mxEvent.getContent().avatar_url !== e.mxEvent.getPrevContent().avatar_url) {
            return TransitionType.ChangedAvatar;
          } // console.log("MELS ignoring duplicate membership join event");


          return TransitionType.NoChange;
        } else {
          return TransitionType.Joined;
        }

      case 'leave':
        if (e.mxEvent.getSender() === e.mxEvent.getStateKey()) {
          switch (e.mxEvent.getPrevContent().membership) {
            case 'invite':
              return TransitionType.InviteReject;

            default:
              return TransitionType.Left;
          }
        }

        switch (e.mxEvent.getPrevContent().membership) {
          case 'invite':
            return TransitionType.InviteWithdrawal;

          case 'ban':
            return TransitionType.Unbanned;
          // sender is not target and made the target leave, if not from invite/ban then this is a kick

          default:
            return TransitionType.Kicked;
        }

      default:
        return null;
    }
  }

  getAggregate(userEvents) {
    // A map of aggregate type to arrays of display names. Each aggregate type
    // is a comma-delimited string of transitions, e.g. "joined,left,kicked".
    // The array of display names is the array of users who went through that
    // sequence during eventsToRender.
    const aggregate = {// $aggregateType : []:string
    }; // A map of aggregate types to the indices that order them (the index of
    // the first event for a given transition sequence)

    const aggregateIndices = {// $aggregateType : int
    };
    const users = Object.keys(userEvents);
    users.forEach(userId => {
      const firstEvent = userEvents[userId][0];
      const displayName = firstEvent.displayName;
      const seq = MemberEventListSummary.getTransitionSequence(userEvents[userId]).join(SEP);

      if (!aggregate[seq]) {
        aggregate[seq] = [];
        aggregateIndices[seq] = -1;
      }

      aggregate[seq].push(displayName);

      if (aggregateIndices[seq] === -1 || firstEvent.index < aggregateIndices[seq]) {
        aggregateIndices[seq] = firstEvent.index;
      }
    });
    return {
      names: aggregate,
      indices: aggregateIndices
    };
  }

  render() {
    const eventsToRender = this.props.events; // Map user IDs to latest Avatar Member. ES6 Maps are ordered by when the key was created,
    // so this works perfectly for us to match event order whilst storing the latest Avatar Member

    const latestUserAvatarMember = new Map(); // Object mapping user IDs to an array of IUserEvents

    const userEvents = {};
    eventsToRender.forEach((e, index) => {
      const type = e.getType();
      const userId = type === _event.EventType.RoomServerAcl ? e.getSender() : e.getStateKey(); // Initialise a user's events

      if (!userEvents[userId]) {
        userEvents[userId] = [];
      }

      if (SENDER_AS_DISPLAY_NAME_EVENTS.includes(type)) {
        latestUserAvatarMember.set(userId, e.sender);
      } else if (e.target) {
        latestUserAvatarMember.set(userId, e.target);
      }

      let displayName = userId;

      if (type === _event.EventType.RoomThirdPartyInvite) {
        displayName = e.getContent().display_name;
      } else if (SENDER_AS_DISPLAY_NAME_EVENTS.includes(type)) {
        displayName = e.sender.name;
      } else if (e.target) {
        displayName = e.target.name;
      }

      userEvents[userId].push({
        mxEvent: e,
        displayName,
        index: index
      });
    });
    const aggregate = this.getAggregate(userEvents); // Sort types by order of lowest event index within sequence

    const orderedTransitionSequences = Object.keys(aggregate.names).sort((seq1, seq2) => aggregate.indices[seq1] - aggregate.indices[seq2]);
    return /*#__PURE__*/_react.default.createElement(_EventListSummary.default, {
      events: this.props.events,
      threshold: this.props.threshold,
      onToggle: this.props.onToggle,
      startExpanded: this.props.startExpanded,
      children: this.props.children,
      summaryMembers: [...latestUserAvatarMember.values()],
      layout: this.props.layout,
      summaryText: this.generateSummary(aggregate.names, orderedTransitionSequences)
    });
  }

}, (0, _defineProperty2.default)(_class2, "defaultProps", {
  summaryLength: 1,
  threshold: 3,
  avatarsMaxLength: 5,
  layout: _Layout.Layout.Group
}), _temp)) || _class);
exports.default = MemberEventListSummary;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,