"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _Field = _interopRequireDefault(require("./Field"));

var _languageHandler = require("../../../languageHandler");

var _AccessibleButton = _interopRequireDefault(require("./AccessibleButton"));

var _dec, _class;

let TagComposer = (
/**
 * A simple, controlled, composer for entering string tags. Contains a simple
 * input, add button, and per-tag remove button.
 */
_dec = (0, _replaceableComponent.replaceableComponent)("views.elements.TagComposer"), _dec(_class = class TagComposer extends _react.default.PureComponent {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "onInputChange", ev => {
      this.setState({
        newTag: ev.target.value
      });
    });
    (0, _defineProperty2.default)(this, "onAdd", ev => {
      ev.preventDefault();
      if (!this.state.newTag) return;
      this.props.onAdd(this.state.newTag);
      this.setState({
        newTag: ""
      });
    });
    this.state = {
      newTag: ""
    };
  }

  onRemove(tag) {
    // We probably don't need to proxy this, but for
    // sanity of `this` we'll do so anyways.
    this.props.onRemove(tag);
  }

  render() {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_TagComposer"
    }, /*#__PURE__*/_react.default.createElement("form", {
      className: "mx_TagComposer_input",
      onSubmit: this.onAdd
    }, /*#__PURE__*/_react.default.createElement(_Field.default, {
      value: this.state.newTag,
      onChange: this.onInputChange,
      label: this.props.label || (0, _languageHandler._t)("Keyword"),
      placeholder: this.props.placeholder || (0, _languageHandler._t)("New keyword"),
      disabled: this.props.disabled,
      autoComplete: "off"
    }), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      onClick: this.onAdd,
      kind: "primary",
      disabled: this.props.disabled
    }, (0, _languageHandler._t)("Add"))), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_TagComposer_tags"
    }, this.props.tags.map((t, i) => /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_TagComposer_tag",
      key: i
    }, /*#__PURE__*/_react.default.createElement("span", null, t), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      onClick: this.onRemove.bind(this, t),
      disabled: this.props.disabled
    })))));
  }

}) || _class);
exports.default = TagComposer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL2VsZW1lbnRzL1RhZ0NvbXBvc2VyLnRzeCJdLCJuYW1lcyI6WyJUYWdDb21wb3NlciIsIlJlYWN0IiwiUHVyZUNvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwicHJvcHMiLCJldiIsInNldFN0YXRlIiwibmV3VGFnIiwidGFyZ2V0IiwidmFsdWUiLCJwcmV2ZW50RGVmYXVsdCIsInN0YXRlIiwib25BZGQiLCJvblJlbW92ZSIsInRhZyIsInJlbmRlciIsIm9uSW5wdXRDaGFuZ2UiLCJsYWJlbCIsInBsYWNlaG9sZGVyIiwiZGlzYWJsZWQiLCJ0YWdzIiwibWFwIiwidCIsImkiLCJiaW5kIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQWdCQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7OztJQW9CcUJBLFc7QUFMckI7QUFDQTtBQUNBO0FBQ0E7T0FDQyxnREFBcUIsNEJBQXJCLEMsZ0JBQUQsTUFDcUJBLFdBRHJCLFNBQ3lDQyxlQUFNQyxhQUQvQyxDQUM2RTtBQUNsRUMsRUFBQUEsV0FBVyxDQUFDQyxLQUFELEVBQWdCO0FBQzlCLFVBQU1BLEtBQU47QUFEOEIseURBUVRDLEVBQUQsSUFBdUM7QUFDM0QsV0FBS0MsUUFBTCxDQUFjO0FBQUVDLFFBQUFBLE1BQU0sRUFBRUYsRUFBRSxDQUFDRyxNQUFILENBQVVDO0FBQXBCLE9BQWQ7QUFDSCxLQVZpQztBQUFBLGlEQVlqQkosRUFBRCxJQUFtQjtBQUMvQkEsTUFBQUEsRUFBRSxDQUFDSyxjQUFIO0FBQ0EsVUFBSSxDQUFDLEtBQUtDLEtBQUwsQ0FBV0osTUFBaEIsRUFBd0I7QUFFeEIsV0FBS0gsS0FBTCxDQUFXUSxLQUFYLENBQWlCLEtBQUtELEtBQUwsQ0FBV0osTUFBNUI7QUFDQSxXQUFLRCxRQUFMLENBQWM7QUFBRUMsUUFBQUEsTUFBTSxFQUFFO0FBQVYsT0FBZDtBQUNILEtBbEJpQztBQUc5QixTQUFLSSxLQUFMLEdBQWE7QUFDVEosTUFBQUEsTUFBTSxFQUFFO0FBREMsS0FBYjtBQUdIOztBQWNPTSxFQUFBQSxRQUFRLENBQUNDLEdBQUQsRUFBYztBQUMxQjtBQUNBO0FBQ0EsU0FBS1YsS0FBTCxDQUFXUyxRQUFYLENBQW9CQyxHQUFwQjtBQUNIOztBQUVNQyxFQUFBQSxNQUFNLEdBQUc7QUFDWix3QkFBTztBQUFLLE1BQUEsU0FBUyxFQUFDO0FBQWYsb0JBQ0g7QUFBTSxNQUFBLFNBQVMsRUFBQyxzQkFBaEI7QUFBdUMsTUFBQSxRQUFRLEVBQUUsS0FBS0g7QUFBdEQsb0JBQ0ksNkJBQUMsY0FBRDtBQUNJLE1BQUEsS0FBSyxFQUFFLEtBQUtELEtBQUwsQ0FBV0osTUFEdEI7QUFFSSxNQUFBLFFBQVEsRUFBRSxLQUFLUyxhQUZuQjtBQUdJLE1BQUEsS0FBSyxFQUFFLEtBQUtaLEtBQUwsQ0FBV2EsS0FBWCxJQUFvQix5QkFBRyxTQUFILENBSC9CO0FBSUksTUFBQSxXQUFXLEVBQUUsS0FBS2IsS0FBTCxDQUFXYyxXQUFYLElBQTBCLHlCQUFHLGFBQUgsQ0FKM0M7QUFLSSxNQUFBLFFBQVEsRUFBRSxLQUFLZCxLQUFMLENBQVdlLFFBTHpCO0FBTUksTUFBQSxZQUFZLEVBQUM7QUFOakIsTUFESixlQVNJLDZCQUFDLHlCQUFEO0FBQWtCLE1BQUEsT0FBTyxFQUFFLEtBQUtQLEtBQWhDO0FBQXVDLE1BQUEsSUFBSSxFQUFDLFNBQTVDO0FBQXNELE1BQUEsUUFBUSxFQUFFLEtBQUtSLEtBQUwsQ0FBV2U7QUFBM0UsT0FDTSx5QkFBRyxLQUFILENBRE4sQ0FUSixDQURHLGVBY0g7QUFBSyxNQUFBLFNBQVMsRUFBQztBQUFmLE9BQ00sS0FBS2YsS0FBTCxDQUFXZ0IsSUFBWCxDQUFnQkMsR0FBaEIsQ0FBb0IsQ0FBQ0MsQ0FBRCxFQUFJQyxDQUFKLGtCQUFXO0FBQUssTUFBQSxTQUFTLEVBQUMsb0JBQWY7QUFBb0MsTUFBQSxHQUFHLEVBQUVBO0FBQXpDLG9CQUM3QiwyQ0FBUUQsQ0FBUixDQUQ2QixlQUU3Qiw2QkFBQyx5QkFBRDtBQUFrQixNQUFBLE9BQU8sRUFBRSxLQUFLVCxRQUFMLENBQWNXLElBQWQsQ0FBbUIsSUFBbkIsRUFBeUJGLENBQXpCLENBQTNCO0FBQXdELE1BQUEsUUFBUSxFQUFFLEtBQUtsQixLQUFMLENBQVdlO0FBQTdFLE1BRjZCLENBQS9CLENBRE4sQ0FkRyxDQUFQO0FBcUJIOztBQWpEd0UsQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5Db3B5cmlnaHQgMjAyMSBUaGUgTWF0cml4Lm9yZyBGb3VuZGF0aW9uIEMuSS5DLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbmltcG9ydCBSZWFjdCwgeyBDaGFuZ2VFdmVudCwgRm9ybUV2ZW50IH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyByZXBsYWNlYWJsZUNvbXBvbmVudCB9IGZyb20gXCIuLi8uLi8uLi91dGlscy9yZXBsYWNlYWJsZUNvbXBvbmVudFwiO1xuaW1wb3J0IEZpZWxkIGZyb20gXCIuL0ZpZWxkXCI7XG5pbXBvcnQgeyBfdCB9IGZyb20gXCIuLi8uLi8uLi9sYW5ndWFnZUhhbmRsZXJcIjtcbmltcG9ydCBBY2Nlc3NpYmxlQnV0dG9uIGZyb20gXCIuL0FjY2Vzc2libGVCdXR0b25cIjtcblxuaW50ZXJmYWNlIElQcm9wcyB7XG4gICAgdGFnczogc3RyaW5nW107XG4gICAgb25BZGQ6ICh0YWc6IHN0cmluZykgPT4gdm9pZDtcbiAgICBvblJlbW92ZTogKHRhZzogc3RyaW5nKSA9PiB2b2lkO1xuICAgIGRpc2FibGVkPzogYm9vbGVhbjtcbiAgICBsYWJlbD86IHN0cmluZztcbiAgICBwbGFjZWhvbGRlcj86IHN0cmluZztcbn1cblxuaW50ZXJmYWNlIElTdGF0ZSB7XG4gICAgbmV3VGFnOiBzdHJpbmc7XG59XG5cbi8qKlxuICogQSBzaW1wbGUsIGNvbnRyb2xsZWQsIGNvbXBvc2VyIGZvciBlbnRlcmluZyBzdHJpbmcgdGFncy4gQ29udGFpbnMgYSBzaW1wbGVcbiAqIGlucHV0LCBhZGQgYnV0dG9uLCBhbmQgcGVyLXRhZyByZW1vdmUgYnV0dG9uLlxuICovXG5AcmVwbGFjZWFibGVDb21wb25lbnQoXCJ2aWV3cy5lbGVtZW50cy5UYWdDb21wb3NlclwiKVxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGFnQ29tcG9zZXIgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50PElQcm9wcywgSVN0YXRlPiB7XG4gICAgcHVibGljIGNvbnN0cnVjdG9yKHByb3BzOiBJUHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBuZXdUYWc6IFwiXCIsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvbklucHV0Q2hhbmdlID0gKGV2OiBDaGFuZ2VFdmVudDxIVE1MSW5wdXRFbGVtZW50PikgPT4ge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHsgbmV3VGFnOiBldi50YXJnZXQudmFsdWUgfSk7XG4gICAgfTtcblxuICAgIHByaXZhdGUgb25BZGQgPSAoZXY6IEZvcm1FdmVudCkgPT4ge1xuICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBpZiAoIXRoaXMuc3RhdGUubmV3VGFnKSByZXR1cm47XG5cbiAgICAgICAgdGhpcy5wcm9wcy5vbkFkZCh0aGlzLnN0YXRlLm5ld1RhZyk7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBuZXdUYWc6IFwiXCIgfSk7XG4gICAgfTtcblxuICAgIHByaXZhdGUgb25SZW1vdmUodGFnOiBzdHJpbmcpIHtcbiAgICAgICAgLy8gV2UgcHJvYmFibHkgZG9uJ3QgbmVlZCB0byBwcm94eSB0aGlzLCBidXQgZm9yXG4gICAgICAgIC8vIHNhbml0eSBvZiBgdGhpc2Agd2UnbGwgZG8gc28gYW55d2F5cy5cbiAgICAgICAgdGhpcy5wcm9wcy5vblJlbW92ZSh0YWcpO1xuICAgIH1cblxuICAgIHB1YmxpYyByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT0nbXhfVGFnQ29tcG9zZXInPlxuICAgICAgICAgICAgPGZvcm0gY2xhc3NOYW1lPSdteF9UYWdDb21wb3Nlcl9pbnB1dCcgb25TdWJtaXQ9e3RoaXMub25BZGR9PlxuICAgICAgICAgICAgICAgIDxGaWVsZFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS5uZXdUYWd9XG4gICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLm9uSW5wdXRDaGFuZ2V9XG4gICAgICAgICAgICAgICAgICAgIGxhYmVsPXt0aGlzLnByb3BzLmxhYmVsIHx8IF90KFwiS2V5d29yZFwiKX1cbiAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9e3RoaXMucHJvcHMucGxhY2Vob2xkZXIgfHwgX3QoXCJOZXcga2V5d29yZFwiKX1cbiAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ9e3RoaXMucHJvcHMuZGlzYWJsZWR9XG4gICAgICAgICAgICAgICAgICAgIGF1dG9Db21wbGV0ZT1cIm9mZlwiXG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8QWNjZXNzaWJsZUJ1dHRvbiBvbkNsaWNrPXt0aGlzLm9uQWRkfSBraW5kPSdwcmltYXJ5JyBkaXNhYmxlZD17dGhpcy5wcm9wcy5kaXNhYmxlZH0+XG4gICAgICAgICAgICAgICAgICAgIHsgX3QoXCJBZGRcIikgfVxuICAgICAgICAgICAgICAgIDwvQWNjZXNzaWJsZUJ1dHRvbj5cbiAgICAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdteF9UYWdDb21wb3Nlcl90YWdzJz5cbiAgICAgICAgICAgICAgICB7IHRoaXMucHJvcHMudGFncy5tYXAoKHQsIGkpID0+ICg8ZGl2IGNsYXNzTmFtZT0nbXhfVGFnQ29tcG9zZXJfdGFnJyBrZXk9e2l9PlxuICAgICAgICAgICAgICAgICAgICA8c3Bhbj57IHQgfTwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgPEFjY2Vzc2libGVCdXR0b24gb25DbGljaz17dGhpcy5vblJlbW92ZS5iaW5kKHRoaXMsIHQpfSBkaXNhYmxlZD17dGhpcy5wcm9wcy5kaXNhYmxlZH0gLz5cbiAgICAgICAgICAgICAgICA8L2Rpdj4pKSB9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+O1xuICAgIH1cbn1cbiJdfQ==