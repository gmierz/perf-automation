"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _SettingsStore = _interopRequireDefault(require("../../../settings/SettingsStore"));

var _Draggable = _interopRequireDefault(require("./Draggable"));

var _SettingLevel = require("../../../settings/SettingLevel");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _dec, _class;

let IRCTimelineProfileResizer = (_dec = (0, _replaceableComponent.replaceableComponent)("views.elements.IRCTimelineProfileResizer"), _dec(_class = class IRCTimelineProfileResizer extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "dragFunc", (location, event) => {
      const offset = event.clientX - location.currentX;
      const newWidth = this.state.width + offset; // If we're trying to go smaller than min width, don't.

      if (newWidth < this.props.minWidth) {
        return location;
      }

      if (newWidth > this.props.maxWidth) {
        return location;
      }

      this.setState({
        width: newWidth
      });
      this.updateCSSWidth.bind(this)(newWidth);
      return {
        currentX: event.clientX,
        currentY: location.currentY
      };
    });
    this.state = {
      width: _SettingsStore.default.getValue("ircDisplayNameWidth", this.props.roomId),
      IRCLayoutRoot: null
    };
  }

  componentDidMount() {
    this.setState({
      IRCLayoutRoot: document.querySelector(".mx_IRCLayout")
    }, () => this.updateCSSWidth(this.state.width));
  }

  updateCSSWidth(newWidth) {
    this.state.IRCLayoutRoot.style.setProperty("--name-width", newWidth + "px");
  }

  onMoueUp(event) {
    if (this.props.roomId) {
      _SettingsStore.default.setValue("ircDisplayNameWidth", this.props.roomId, _SettingLevel.SettingLevel.ROOM_DEVICE, this.state.width);
    }
  }

  render() {
    return /*#__PURE__*/_react.default.createElement(_Draggable.default, {
      className: "mx_ProfileResizer",
      dragFunc: this.dragFunc.bind(this),
      onMouseUp: this.onMoueUp.bind(this)
    });
  }

}) || _class);
exports.default = IRCTimelineProfileResizer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL2VsZW1lbnRzL0lSQ1RpbWVsaW5lUHJvZmlsZVJlc2l6ZXIudHN4Il0sIm5hbWVzIjpbIklSQ1RpbWVsaW5lUHJvZmlsZVJlc2l6ZXIiLCJSZWFjdCIsIkNvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwicHJvcHMiLCJsb2NhdGlvbiIsImV2ZW50Iiwib2Zmc2V0IiwiY2xpZW50WCIsImN1cnJlbnRYIiwibmV3V2lkdGgiLCJzdGF0ZSIsIndpZHRoIiwibWluV2lkdGgiLCJtYXhXaWR0aCIsInNldFN0YXRlIiwidXBkYXRlQ1NTV2lkdGgiLCJiaW5kIiwiY3VycmVudFkiLCJTZXR0aW5nc1N0b3JlIiwiZ2V0VmFsdWUiLCJyb29tSWQiLCJJUkNMYXlvdXRSb290IiwiY29tcG9uZW50RGlkTW91bnQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJzdHlsZSIsInNldFByb3BlcnR5Iiwib25Nb3VlVXAiLCJzZXRWYWx1ZSIsIlNldHRpbmdMZXZlbCIsIlJPT01fREVWSUNFIiwicmVuZGVyIiwiZHJhZ0Z1bmMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBZ0JBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOzs7O0lBZXFCQSx5QixXQURwQixnREFBcUIsMENBQXJCLEMsZ0JBQUQsTUFDcUJBLHlCQURyQixTQUN1REMsZUFBTUMsU0FEN0QsQ0FDdUY7QUFDbkZDLEVBQUFBLFdBQVcsQ0FBQ0MsS0FBRCxFQUFnQjtBQUN2QixVQUFNQSxLQUFOO0FBRHVCLG9EQWVSLENBQUNDLFFBQUQsRUFBMkJDLEtBQTNCLEtBQTRGO0FBQzNHLFlBQU1DLE1BQU0sR0FBR0QsS0FBSyxDQUFDRSxPQUFOLEdBQWdCSCxRQUFRLENBQUNJLFFBQXhDO0FBQ0EsWUFBTUMsUUFBUSxHQUFHLEtBQUtDLEtBQUwsQ0FBV0MsS0FBWCxHQUFtQkwsTUFBcEMsQ0FGMkcsQ0FJM0c7O0FBQ0EsVUFBSUcsUUFBUSxHQUFHLEtBQUtOLEtBQUwsQ0FBV1MsUUFBMUIsRUFBb0M7QUFDaEMsZUFBT1IsUUFBUDtBQUNIOztBQUVELFVBQUlLLFFBQVEsR0FBRyxLQUFLTixLQUFMLENBQVdVLFFBQTFCLEVBQW9DO0FBQ2hDLGVBQU9ULFFBQVA7QUFDSDs7QUFFRCxXQUFLVSxRQUFMLENBQWM7QUFDVkgsUUFBQUEsS0FBSyxFQUFFRjtBQURHLE9BQWQ7QUFJQSxXQUFLTSxjQUFMLENBQW9CQyxJQUFwQixDQUF5QixJQUF6QixFQUErQlAsUUFBL0I7QUFFQSxhQUFPO0FBQ0hELFFBQUFBLFFBQVEsRUFBRUgsS0FBSyxDQUFDRSxPQURiO0FBRUhVLFFBQUFBLFFBQVEsRUFBRWIsUUFBUSxDQUFDYTtBQUZoQixPQUFQO0FBSUgsS0F0QzBCO0FBR3ZCLFNBQUtQLEtBQUwsR0FBYTtBQUNUQyxNQUFBQSxLQUFLLEVBQUVPLHVCQUFjQyxRQUFkLENBQXVCLHFCQUF2QixFQUE4QyxLQUFLaEIsS0FBTCxDQUFXaUIsTUFBekQsQ0FERTtBQUVUQyxNQUFBQSxhQUFhLEVBQUU7QUFGTixLQUFiO0FBSUg7O0FBRURDLEVBQUFBLGlCQUFpQixHQUFHO0FBQ2hCLFNBQUtSLFFBQUwsQ0FBYztBQUNWTyxNQUFBQSxhQUFhLEVBQUVFLFFBQVEsQ0FBQ0MsYUFBVCxDQUF1QixlQUF2QjtBQURMLEtBQWQsRUFFRyxNQUFNLEtBQUtULGNBQUwsQ0FBb0IsS0FBS0wsS0FBTCxDQUFXQyxLQUEvQixDQUZUO0FBR0g7O0FBMkJPSSxFQUFBQSxjQUFjLENBQUNOLFFBQUQsRUFBbUI7QUFDckMsU0FBS0MsS0FBTCxDQUFXVyxhQUFYLENBQXlCSSxLQUF6QixDQUErQkMsV0FBL0IsQ0FBMkMsY0FBM0MsRUFBMkRqQixRQUFRLEdBQUcsSUFBdEU7QUFDSDs7QUFFT2tCLEVBQUFBLFFBQVEsQ0FBQ3RCLEtBQUQsRUFBb0I7QUFDaEMsUUFBSSxLQUFLRixLQUFMLENBQVdpQixNQUFmLEVBQXVCO0FBQ25CRiw2QkFBY1UsUUFBZCxDQUNJLHFCQURKLEVBRUksS0FBS3pCLEtBQUwsQ0FBV2lCLE1BRmYsRUFHSVMsMkJBQWFDLFdBSGpCLEVBSUksS0FBS3BCLEtBQUwsQ0FBV0MsS0FKZjtBQU1IO0FBQ0o7O0FBRURvQixFQUFBQSxNQUFNLEdBQUc7QUFDTCx3QkFBTyw2QkFBQyxrQkFBRDtBQUNILE1BQUEsU0FBUyxFQUFDLG1CQURQO0FBRUgsTUFBQSxRQUFRLEVBQUUsS0FBS0MsUUFBTCxDQUFjaEIsSUFBZCxDQUFtQixJQUFuQixDQUZQO0FBR0gsTUFBQSxTQUFTLEVBQUUsS0FBS1csUUFBTCxDQUFjWCxJQUFkLENBQW1CLElBQW5CO0FBSFIsTUFBUDtBQUtIOztBQTlEa0YsQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5Db3B5cmlnaHQgMjAyMCBUaGUgTWF0cml4Lm9yZyBGb3VuZGF0aW9uIEMuSS5DLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgU2V0dGluZ3NTdG9yZSBmcm9tIFwiLi4vLi4vLi4vc2V0dGluZ3MvU2V0dGluZ3NTdG9yZVwiO1xuaW1wb3J0IERyYWdnYWJsZSwgeyBJTG9jYXRpb25TdGF0ZSB9IGZyb20gJy4vRHJhZ2dhYmxlJztcbmltcG9ydCB7IFNldHRpbmdMZXZlbCB9IGZyb20gXCIuLi8uLi8uLi9zZXR0aW5ncy9TZXR0aW5nTGV2ZWxcIjtcbmltcG9ydCB7IHJlcGxhY2VhYmxlQ29tcG9uZW50IH0gZnJvbSBcIi4uLy4uLy4uL3V0aWxzL3JlcGxhY2VhYmxlQ29tcG9uZW50XCI7XG5cbmludGVyZmFjZSBJUHJvcHMge1xuICAgIC8vIEN1cnJlbnQgcm9vbVxuICAgIHJvb21JZDogc3RyaW5nO1xuICAgIG1pbldpZHRoOiBudW1iZXI7XG4gICAgbWF4V2lkdGg6IG51bWJlcjtcbn1cblxuaW50ZXJmYWNlIElTdGF0ZSB7XG4gICAgd2lkdGg6IG51bWJlcjtcbiAgICBJUkNMYXlvdXRSb290OiBIVE1MRWxlbWVudDtcbn1cblxuQHJlcGxhY2VhYmxlQ29tcG9uZW50KFwidmlld3MuZWxlbWVudHMuSVJDVGltZWxpbmVQcm9maWxlUmVzaXplclwiKVxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSVJDVGltZWxpbmVQcm9maWxlUmVzaXplciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxJUHJvcHMsIElTdGF0ZT4ge1xuICAgIGNvbnN0cnVjdG9yKHByb3BzOiBJUHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICB3aWR0aDogU2V0dGluZ3NTdG9yZS5nZXRWYWx1ZShcImlyY0Rpc3BsYXlOYW1lV2lkdGhcIiwgdGhpcy5wcm9wcy5yb29tSWQpLFxuICAgICAgICAgICAgSVJDTGF5b3V0Um9vdDogbnVsbCxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBJUkNMYXlvdXRSb290OiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm14X0lSQ0xheW91dFwiKSBhcyBIVE1MRWxlbWVudCxcbiAgICAgICAgfSwgKCkgPT4gdGhpcy51cGRhdGVDU1NXaWR0aCh0aGlzLnN0YXRlLndpZHRoKSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBkcmFnRnVuYyA9IChsb2NhdGlvbjogSUxvY2F0aW9uU3RhdGUsIGV2ZW50OiBSZWFjdC5Nb3VzZUV2ZW50PEVsZW1lbnQsIE1vdXNlRXZlbnQ+KTogSUxvY2F0aW9uU3RhdGUgPT4ge1xuICAgICAgICBjb25zdCBvZmZzZXQgPSBldmVudC5jbGllbnRYIC0gbG9jYXRpb24uY3VycmVudFg7XG4gICAgICAgIGNvbnN0IG5ld1dpZHRoID0gdGhpcy5zdGF0ZS53aWR0aCArIG9mZnNldDtcblxuICAgICAgICAvLyBJZiB3ZSdyZSB0cnlpbmcgdG8gZ28gc21hbGxlciB0aGFuIG1pbiB3aWR0aCwgZG9uJ3QuXG4gICAgICAgIGlmIChuZXdXaWR0aCA8IHRoaXMucHJvcHMubWluV2lkdGgpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NhdGlvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChuZXdXaWR0aCA+IHRoaXMucHJvcHMubWF4V2lkdGgpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NhdGlvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgd2lkdGg6IG5ld1dpZHRoLFxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLnVwZGF0ZUNTU1dpZHRoLmJpbmQodGhpcykobmV3V2lkdGgpO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjdXJyZW50WDogZXZlbnQuY2xpZW50WCxcbiAgICAgICAgICAgIGN1cnJlbnRZOiBsb2NhdGlvbi5jdXJyZW50WSxcbiAgICAgICAgfTtcbiAgICB9O1xuXG4gICAgcHJpdmF0ZSB1cGRhdGVDU1NXaWR0aChuZXdXaWR0aDogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMuc3RhdGUuSVJDTGF5b3V0Um9vdC5zdHlsZS5zZXRQcm9wZXJ0eShcIi0tbmFtZS13aWR0aFwiLCBuZXdXaWR0aCArIFwicHhcIik7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvbk1vdWVVcChldmVudDogTW91c2VFdmVudCkge1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5yb29tSWQpIHtcbiAgICAgICAgICAgIFNldHRpbmdzU3RvcmUuc2V0VmFsdWUoXG4gICAgICAgICAgICAgICAgXCJpcmNEaXNwbGF5TmFtZVdpZHRoXCIsXG4gICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5yb29tSWQsXG4gICAgICAgICAgICAgICAgU2V0dGluZ0xldmVsLlJPT01fREVWSUNFLFxuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUud2lkdGgsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gPERyYWdnYWJsZVxuICAgICAgICAgICAgY2xhc3NOYW1lPVwibXhfUHJvZmlsZVJlc2l6ZXJcIlxuICAgICAgICAgICAgZHJhZ0Z1bmM9e3RoaXMuZHJhZ0Z1bmMuYmluZCh0aGlzKX1cbiAgICAgICAgICAgIG9uTW91c2VVcD17dGhpcy5vbk1vdWVVcC5iaW5kKHRoaXMpfVxuICAgICAgICAvPjtcbiAgICB9XG59XG4iXX0=