"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classnames = _interopRequireDefault(require("classnames"));

var _react = _interopRequireDefault(require("react"));

var _HtmlUtils = require("../../../HtmlUtils");

var _languageHandler = require("../../../languageHandler");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _dec, _class;

let InviteReason = (_dec = (0, _replaceableComponent.replaceableComponent)("views.elements.InviteReason"), _dec(_class = class InviteReason extends _react.default.PureComponent {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "onViewClick", () => {
      this.setState({
        hidden: false
      });
    });
    this.state = {
      // We hide the reason for invitation by default, since it can be a
      // vector for spam/harassment.
      hidden: true
    };
  }

  render() {
    const classes = (0, _classnames.default)({
      "mx_InviteReason": true,
      "mx_InviteReason_hidden": this.state.hidden
    });
    return /*#__PURE__*/_react.default.createElement("div", {
      className: classes
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_InviteReason_reason"
    }, this.props.htmlReason ? (0, _HtmlUtils.sanitizedHtmlNode)(this.props.htmlReason) : this.props.reason), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_InviteReason_view",
      onClick: this.onViewClick
    }, (0, _languageHandler._t)("View message")));
  }

}) || _class);
exports.default = InviteReason;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL2VsZW1lbnRzL0ludml0ZVJlYXNvbi50c3giXSwibmFtZXMiOlsiSW52aXRlUmVhc29uIiwiUmVhY3QiLCJQdXJlQ29tcG9uZW50IiwiY29uc3RydWN0b3IiLCJwcm9wcyIsInNldFN0YXRlIiwiaGlkZGVuIiwic3RhdGUiLCJyZW5kZXIiLCJjbGFzc2VzIiwiaHRtbFJlYXNvbiIsInJlYXNvbiIsIm9uVmlld0NsaWNrIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQWdCQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7OztJQVlxQkEsWSxXQURwQixnREFBcUIsNkJBQXJCLEMsZ0JBQUQsTUFDcUJBLFlBRHJCLFNBQzBDQyxlQUFNQyxhQURoRCxDQUM4RTtBQUMxRUMsRUFBQUEsV0FBVyxDQUFDQyxLQUFELEVBQVE7QUFDZixVQUFNQSxLQUFOO0FBRGUsdURBU0wsTUFBTTtBQUNoQixXQUFLQyxRQUFMLENBQWM7QUFDVkMsUUFBQUEsTUFBTSxFQUFFO0FBREUsT0FBZDtBQUdILEtBYmtCO0FBRWYsU0FBS0MsS0FBTCxHQUFhO0FBQ1Q7QUFDQTtBQUNBRCxNQUFBQSxNQUFNLEVBQUU7QUFIQyxLQUFiO0FBS0g7O0FBUURFLEVBQUFBLE1BQU0sR0FBRztBQUNMLFVBQU1DLE9BQU8sR0FBRyx5QkFBVztBQUN2Qix5QkFBbUIsSUFESTtBQUV2QixnQ0FBMEIsS0FBS0YsS0FBTCxDQUFXRDtBQUZkLEtBQVgsQ0FBaEI7QUFLQSx3QkFBTztBQUFLLE1BQUEsU0FBUyxFQUFFRztBQUFoQixvQkFDSDtBQUFLLE1BQUEsU0FBUyxFQUFDO0FBQWYsT0FBMEMsS0FBS0wsS0FBTCxDQUFXTSxVQUFYLEdBQXdCLGtDQUFrQixLQUFLTixLQUFMLENBQVdNLFVBQTdCLENBQXhCLEdBQW1FLEtBQUtOLEtBQUwsQ0FBV08sTUFBeEgsQ0FERyxlQUVIO0FBQUssTUFBQSxTQUFTLEVBQUMsc0JBQWY7QUFDSSxNQUFBLE9BQU8sRUFBRSxLQUFLQztBQURsQixPQUdNLHlCQUFHLGNBQUgsQ0FITixDQUZHLENBQVA7QUFRSDs7QUE5QnlFLEMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuQ29weXJpZ2h0IDIwMjEgVGhlIE1hdHJpeC5vcmcgRm91bmRhdGlvbiBDLkkuQy5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tIFwiY2xhc3NuYW1lc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgc2FuaXRpemVkSHRtbE5vZGUgfSBmcm9tIFwiLi4vLi4vLi4vSHRtbFV0aWxzXCI7XG5pbXBvcnQgeyBfdCB9IGZyb20gXCIuLi8uLi8uLi9sYW5ndWFnZUhhbmRsZXJcIjtcbmltcG9ydCB7IHJlcGxhY2VhYmxlQ29tcG9uZW50IH0gZnJvbSBcIi4uLy4uLy4uL3V0aWxzL3JlcGxhY2VhYmxlQ29tcG9uZW50XCI7XG5cbmludGVyZmFjZSBJUHJvcHMge1xuICAgIHJlYXNvbjogc3RyaW5nO1xuICAgIGh0bWxSZWFzb24/OiBzdHJpbmc7XG59XG5cbmludGVyZmFjZSBJU3RhdGUge1xuICAgIGhpZGRlbjogYm9vbGVhbjtcbn1cblxuQHJlcGxhY2VhYmxlQ29tcG9uZW50KFwidmlld3MuZWxlbWVudHMuSW52aXRlUmVhc29uXCIpXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJbnZpdGVSZWFzb24gZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50PElQcm9wcywgSVN0YXRlPiB7XG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgLy8gV2UgaGlkZSB0aGUgcmVhc29uIGZvciBpbnZpdGF0aW9uIGJ5IGRlZmF1bHQsIHNpbmNlIGl0IGNhbiBiZSBhXG4gICAgICAgICAgICAvLyB2ZWN0b3IgZm9yIHNwYW0vaGFyYXNzbWVudC5cbiAgICAgICAgICAgIGhpZGRlbjogdHJ1ZSxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBvblZpZXdDbGljayA9ICgpID0+IHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBoaWRkZW46IGZhbHNlLFxuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICBjb25zdCBjbGFzc2VzID0gY2xhc3NOYW1lcyh7XG4gICAgICAgICAgICBcIm14X0ludml0ZVJlYXNvblwiOiB0cnVlLFxuICAgICAgICAgICAgXCJteF9JbnZpdGVSZWFzb25faGlkZGVuXCI6IHRoaXMuc3RhdGUuaGlkZGVuLFxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9e2NsYXNzZXN9PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJteF9JbnZpdGVSZWFzb25fcmVhc29uXCI+eyB0aGlzLnByb3BzLmh0bWxSZWFzb24gPyBzYW5pdGl6ZWRIdG1sTm9kZSh0aGlzLnByb3BzLmh0bWxSZWFzb24pIDogdGhpcy5wcm9wcy5yZWFzb24gfTwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJteF9JbnZpdGVSZWFzb25fdmlld1wiXG4gICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5vblZpZXdDbGlja31cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICB7IF90KFwiVmlldyBtZXNzYWdlXCIpIH1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj47XG4gICAgfVxufVxuIl19