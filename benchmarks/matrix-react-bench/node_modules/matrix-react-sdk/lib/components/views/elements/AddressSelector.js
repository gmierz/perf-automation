"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _AddressTile = _interopRequireDefault(require("./AddressTile"));

var _dec, _class;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

let AddressSelector = (_dec = (0, _replaceableComponent.replaceableComponent)("views.elements.AddressSelector"), _dec(_class = class AddressSelector extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "scrollElement", /*#__PURE__*/(0, _react.createRef)());
    (0, _defineProperty2.default)(this, "addressListElement", /*#__PURE__*/(0, _react.createRef)());
    (0, _defineProperty2.default)(this, "moveSelectionTop", () => {
      if (this.state.selected > 0) {
        this.setState({
          selected: 0,
          hover: false
        });
      }
    });
    (0, _defineProperty2.default)(this, "moveSelectionUp", () => {
      if (this.state.selected > 0) {
        this.setState({
          selected: this.state.selected - 1,
          hover: false
        });
      }
    });
    (0, _defineProperty2.default)(this, "moveSelectionDown", () => {
      if (this.state.selected < this.maxSelected(this.props.addressList)) {
        this.setState({
          selected: this.state.selected + 1,
          hover: false
        });
      }
    });
    (0, _defineProperty2.default)(this, "chooseSelection", () => {
      this.selectAddress(this.state.selected);
    });
    (0, _defineProperty2.default)(this, "onClick", index => {
      this.selectAddress(index);
    });
    (0, _defineProperty2.default)(this, "onMouseEnter", index => {
      this.setState({
        selected: index,
        hover: true
      });
    });
    (0, _defineProperty2.default)(this, "onMouseLeave", () => {
      this.setState({
        hover: false
      });
    });
    (0, _defineProperty2.default)(this, "selectAddress", index => {
      // Only try to select an address if one exists
      if (this.props.addressList.length !== 0) {
        this.props.onSelected(index);
        this.setState({
          hover: false
        });
      }
    });
    this.state = {
      selected: this.props.selected === undefined ? 0 : this.props.selected,
      hover: false
    };
  } // TODO: [REACT-WARNING] Replace with appropriate lifecycle event


  UNSAFE_componentWillReceiveProps(props) {
    // eslint-disable-line
    // Make sure the selected item isn't outside the list bounds
    const selected = this.state.selected;
    const maxSelected = this.maxSelected(props.addressList);

    if (selected > maxSelected) {
      this.setState({
        selected: maxSelected
      });
    }
  }

  componentDidUpdate() {
    // As the user scrolls with the arrow keys keep the selected item
    // at the top of the window.
    if (this.scrollElement.current && this.props.addressList.length > 0 && !this.state.hover) {
      const elementHeight = this.addressListElement.current.getBoundingClientRect().height;
      this.scrollElement.current.scrollTop = this.state.selected * elementHeight - elementHeight;
    }
  }

  createAddressListTiles() {
    const maxSelected = this.maxSelected(this.props.addressList);
    const addressList = []; // Only create the address elements if there are address

    if (this.props.addressList.length > 0) {
      for (let i = 0; i <= maxSelected; i++) {
        const classes = (0, _classnames.default)({
          "mx_AddressSelector_addressListElement": true,
          "mx_AddressSelector_selected": this.state.selected === i
        }); // NOTE: Defaulting to "vector" as the network, until the network backend stuff is done.
        // Saving the addressListElement so we can use it to work out, in the componentDidUpdate
        // method, how far to scroll when using the arrow keys

        addressList.push( /*#__PURE__*/_react.default.createElement("div", {
          className: classes,
          onClick: this.onClick.bind(this, i),
          onMouseEnter: this.onMouseEnter.bind(this, i),
          onMouseLeave: this.onMouseLeave,
          key: this.props.addressList[i].addressType + "/" + this.props.addressList[i].address,
          ref: this.addressListElement
        }, /*#__PURE__*/_react.default.createElement(_AddressTile.default, {
          address: this.props.addressList[i],
          showAddress: this.props.showAddress,
          justified: true
        })));
      }
    }

    return addressList;
  }

  maxSelected(list) {
    const listSize = list.length === 0 ? 0 : list.length - 1;
    const maxSelected = listSize > this.props.truncateAt - 1 ? this.props.truncateAt - 1 : listSize;
    return maxSelected;
  }

  render() {
    const classes = (0, _classnames.default)({
      "mx_AddressSelector": true,
      "mx_AddressSelector_empty": this.props.addressList.length === 0
    });
    return /*#__PURE__*/_react.default.createElement("div", {
      className: classes,
      ref: this.scrollElement
    }, this.props.header, this.createAddressListTiles());
  }

}) || _class);
exports.default = AddressSelector;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,