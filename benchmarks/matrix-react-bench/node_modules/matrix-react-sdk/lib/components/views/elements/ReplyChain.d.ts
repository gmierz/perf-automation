import React from 'react';
import { MatrixEvent } from 'matrix-js-sdk/src/models/event';
import { RoomPermalinkCreator } from "../../../utils/permalinks/Permalinks";
import { Layout } from "../../../settings/enums/Layout";
interface IProps {
    parentEv?: MatrixEvent;
    onHeightChanged: () => void;
    permalinkCreator: RoomPermalinkCreator;
    layout?: Layout;
    alwaysShowTimestamps?: boolean;
    forExport?: boolean;
    isQuoteExpanded?: boolean;
    setQuoteExpanded: (isExpanded: boolean) => void;
}
interface IState {
    events: MatrixEvent[];
    loadedEv: MatrixEvent;
    loading: boolean;
    err: boolean;
}
export default class ReplyChain extends React.Component<IProps, IState> {
    static contextType: React.Context<import("matrix-js-sdk").MatrixClient>;
    private unmounted;
    private room;
    private blockquoteRef;
    constructor(props: any, context: any);
    static getParentEventId(ev: MatrixEvent): string | undefined;
    static stripPlainReply(body: string): string;
    static stripHTMLReply(html: string): string;
    static getNestedReplyText(ev: MatrixEvent, permalinkCreator: RoomPermalinkCreator): {
        body: string;
        html: string;
    } | null;
    static makeReplyMixIn(ev: MatrixEvent): any;
    static hasReply(event: MatrixEvent): boolean;
    componentDidMount(): void;
    componentDidUpdate(): void;
    componentWillUnmount(): void;
    private trySetExpandableQuotes;
    private initialize;
    private getNextEvent;
    private getEvent;
    canCollapse: () => boolean;
    collapse: () => void;
    private onQuoteClick;
    private getReplyChainColorClass;
    render(): JSX.Element;
}
export {};
