"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _RoomViewStore = _interopRequireDefault(require("../../../stores/RoomViewStore"));

var _ActiveWidgetStore = _interopRequireWildcard(require("../../../stores/ActiveWidgetStore"));

var _WidgetUtils = _interopRequireDefault(require("../../../utils/WidgetUtils"));

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _AppTile = _interopRequireDefault(require("./AppTile"));

var _dec, _class;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

let PersistentApp = (_dec = (0, _replaceableComponent.replaceableComponent)("views.elements.PersistentApp"), _dec(_class = class PersistentApp extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "roomStoreToken", void 0);
    (0, _defineProperty2.default)(this, "onRoomViewStoreUpdate", () => {
      if (_RoomViewStore.default.getRoomId() === this.state.roomId) return;
      this.setState({
        roomId: _RoomViewStore.default.getRoomId()
      });
    });
    (0, _defineProperty2.default)(this, "onActiveWidgetStoreUpdate", () => {
      this.setState({
        persistentWidgetId: _ActiveWidgetStore.default.instance.getPersistentWidgetId()
      });
    });
    (0, _defineProperty2.default)(this, "onMyMembership", async (room, membership) => {
      const persistentWidgetInRoomId = _ActiveWidgetStore.default.instance.getRoomId(this.state.persistentWidgetId);

      if (membership !== "join") {
        // we're not in the room anymore - delete
        if (room.roomId === persistentWidgetInRoomId) {
          _ActiveWidgetStore.default.instance.destroyPersistentWidget(this.state.persistentWidgetId);
        }
      }
    });
    this.state = {
      roomId: _RoomViewStore.default.getRoomId(),
      persistentWidgetId: _ActiveWidgetStore.default.instance.getPersistentWidgetId()
    };
  }

  componentDidMount() {
    this.roomStoreToken = _RoomViewStore.default.addListener(this.onRoomViewStoreUpdate);

    _ActiveWidgetStore.default.instance.on(_ActiveWidgetStore.ActiveWidgetStoreEvent.Update, this.onActiveWidgetStoreUpdate);

    _MatrixClientPeg.MatrixClientPeg.get().on("Room.myMembership", this.onMyMembership);
  }

  componentWillUnmount() {
    if (this.roomStoreToken) {
      this.roomStoreToken.remove();
    }

    _ActiveWidgetStore.default.instance.removeListener(_ActiveWidgetStore.ActiveWidgetStoreEvent.Update, this.onActiveWidgetStoreUpdate);

    if (_MatrixClientPeg.MatrixClientPeg.get()) {
      _MatrixClientPeg.MatrixClientPeg.get().removeListener("Room.myMembership", this.onMyMembership);
    }
  }

  render() {
    if (this.state.persistentWidgetId) {
      const persistentWidgetInRoomId = _ActiveWidgetStore.default.instance.getRoomId(this.state.persistentWidgetId);

      const persistentWidgetInRoom = _MatrixClientPeg.MatrixClientPeg.get().getRoom(persistentWidgetInRoomId); // Sanity check the room - the widget may have been destroyed between render cycles, and
      // thus no room is associated anymore.


      if (!persistentWidgetInRoom) return null;
      const myMembership = persistentWidgetInRoom.getMyMembership();

      if (this.state.roomId !== persistentWidgetInRoomId && myMembership === "join") {
        // get the widget data
        const appEvent = _WidgetUtils.default.getRoomWidgets(persistentWidgetInRoom).find(ev => {
          return ev.getStateKey() === _ActiveWidgetStore.default.instance.getPersistentWidgetId();
        });

        const app = _WidgetUtils.default.makeAppConfig(appEvent.getStateKey(), appEvent.getContent(), appEvent.getSender(), persistentWidgetInRoomId, appEvent.getId());

        return /*#__PURE__*/_react.default.createElement(_AppTile.default, {
          key: app.id,
          app: app,
          fullWidth: true,
          room: persistentWidgetInRoom,
          userId: _MatrixClientPeg.MatrixClientPeg.get().credentials.userId,
          creatorUserId: app.creatorUserId,
          widgetPageTitle: _WidgetUtils.default.getWidgetDataTitle(app),
          waitForIframeLoad: app.waitForIframeLoad,
          miniMode: true,
          showMenubar: false
        });
      }
    }

    return null;
  }

}) || _class);
exports.default = PersistentApp;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,