"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var sdk = _interopRequireWildcard(require("../../../index"));

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _classnames = _interopRequireDefault(require("classnames"));

var _room = require("matrix-js-sdk/src/models/room");

var _roomMember = require("matrix-js-sdk/src/models/room-member");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _FlairStore = _interopRequireDefault(require("../../../stores/FlairStore"));

var _Permalinks = require("../../../utils/permalinks/Permalinks");

var _MatrixClientContext = _interopRequireDefault(require("../../../contexts/MatrixClientContext"));

var _actions = require("../../../dispatcher/actions");

var _Media = require("../../../customisations/Media");

var _Tooltip = _interopRequireDefault(require("./Tooltip"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _logger = require("matrix-js-sdk/src/logger");

var _dec, _class, _class2, _temp;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

let Pill = (_dec = (0, _replaceableComponent.replaceableComponent)("views.elements.Pill"), _dec(_class = (_temp = _class2 = class Pill extends _react.default.Component {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "state", {
      // ID/alias of the room/user
      resourceId: null,
      // Type of pill
      pillType: null,
      // The member related to the user pill
      member: null,
      // The group related to the group pill
      group: null,
      // The room related to the room pill
      room: null,
      // Is the user hovering the pill
      hover: false
    });
    (0, _defineProperty2.default)(this, "onMouseOver", () => {
      this.setState({
        hover: true
      });
    });
    (0, _defineProperty2.default)(this, "onMouseLeave", () => {
      this.setState({
        hover: false
      });
    });
    (0, _defineProperty2.default)(this, "onUserPillClicked", e => {
      e.preventDefault();

      _dispatcher.default.dispatch({
        action: _actions.Action.ViewUser,
        member: this.state.member
      });
    });
  }

  static roomNotifPos(text) {
    return text.indexOf("@room");
  }

  static roomNotifLen() {
    return "@room".length;
  }

  // TODO: [REACT-WARNING] Replace with appropriate lifecycle event
  // eslint-disable-next-line camelcase
  async UNSAFE_componentWillReceiveProps(nextProps) {
    let resourceId;
    let prefix;

    if (nextProps.url) {
      if (nextProps.inMessage) {
        const parts = (0, _Permalinks.parseAppLocalLink)(nextProps.url);
        resourceId = parts.primaryEntityId; // The room/user ID

        prefix = parts.sigil; // The first character of prefix
      } else {
        resourceId = (0, _Permalinks.getPrimaryPermalinkEntity)(nextProps.url);
        prefix = resourceId ? resourceId[0] : undefined;
      }
    }

    const pillType = this.props.type || {
      '@': Pill.TYPE_USER_MENTION,
      '#': Pill.TYPE_ROOM_MENTION,
      '!': Pill.TYPE_ROOM_MENTION,
      '+': Pill.TYPE_GROUP_MENTION
    }[prefix];
    let member;
    let group;
    let room;

    switch (pillType) {
      case Pill.TYPE_AT_ROOM_MENTION:
        {
          room = nextProps.room;
        }
        break;

      case Pill.TYPE_USER_MENTION:
        {
          const localMember = nextProps.room ? nextProps.room.getMember(resourceId) : undefined;
          member = localMember;

          if (!localMember) {
            member = new _roomMember.RoomMember(null, resourceId);
            this.doProfileLookup(resourceId, member);
          }
        }
        break;

      case Pill.TYPE_ROOM_MENTION:
        {
          const localRoom = resourceId[0] === '#' ? _MatrixClientPeg.MatrixClientPeg.get().getRooms().find(r => {
            return r.getCanonicalAlias() === resourceId || r.getAltAliases().includes(resourceId);
          }) : _MatrixClientPeg.MatrixClientPeg.get().getRoom(resourceId);
          room = localRoom;

          if (!localRoom) {// TODO: This would require a new API to resolve a room alias to
            // a room avatar and name.
            // this.doRoomProfileLookup(resourceId, member);
          }
        }
        break;

      case Pill.TYPE_GROUP_MENTION:
        {
          const cli = _MatrixClientPeg.MatrixClientPeg.get();

          try {
            group = await _FlairStore.default.getGroupProfileCached(cli, resourceId);
          } catch (e) {
            // if FlairStore failed, fall back to just groupId
            group = {
              groupId: resourceId,
              avatarUrl: null,
              name: null
            };
          }
        }
    }

    this.setState({
      resourceId,
      pillType,
      member,
      group,
      room
    });
  }

  componentDidMount() {
    this._unmounted = false;
    this._matrixClient = _MatrixClientPeg.MatrixClientPeg.get(); // eslint-disable-next-line new-cap

    this.UNSAFE_componentWillReceiveProps(this.props); // HACK: We shouldn't be calling lifecycle functions ourselves.
  }

  componentWillUnmount() {
    this._unmounted = true;
  }

  doProfileLookup(userId, member) {
    _MatrixClientPeg.MatrixClientPeg.get().getProfileInfo(userId).then(resp => {
      if (this._unmounted) {
        return;
      }

      member.name = resp.displayname;
      member.rawDisplayName = resp.displayname;
      member.events.member = {
        getContent: () => {
          return {
            avatar_url: resp.avatar_url
          };
        },
        getDirectionalContent: function () {
          return this.getContent();
        }
      };
      this.setState({
        member
      });
    }).catch(err => {
      _logger.logger.error('Could not retrieve profile data for ' + userId + ':', err);
    });
  }

  render() {
    const BaseAvatar = sdk.getComponent('views.avatars.BaseAvatar');
    const MemberAvatar = sdk.getComponent('avatars.MemberAvatar');
    const RoomAvatar = sdk.getComponent('avatars.RoomAvatar');
    const resource = this.state.resourceId;
    let avatar = null;
    let linkText = resource;
    let pillClass;
    let userId;
    let href = this.props.url;
    let onClick;

    switch (this.state.pillType) {
      case Pill.TYPE_AT_ROOM_MENTION:
        {
          const room = this.props.room;

          if (room) {
            linkText = "@room";

            if (this.props.shouldShowPillAvatar) {
              avatar = /*#__PURE__*/_react.default.createElement(RoomAvatar, {
                room: room,
                width: 16,
                height: 16,
                "aria-hidden": "true"
              });
            }

            pillClass = 'mx_AtRoomPill';
          }
        }
        break;

      case Pill.TYPE_USER_MENTION:
        {
          // If this user is not a member of this room, default to the empty member
          const member = this.state.member;

          if (member) {
            userId = member.userId;
            member.rawDisplayName = member.rawDisplayName || '';
            linkText = member.rawDisplayName;

            if (this.props.shouldShowPillAvatar) {
              avatar = /*#__PURE__*/_react.default.createElement(MemberAvatar, {
                member: member,
                width: 16,
                height: 16,
                "aria-hidden": "true"
              });
            }

            pillClass = 'mx_UserPill';
            href = null;
            onClick = this.onUserPillClicked;
          }
        }
        break;

      case Pill.TYPE_ROOM_MENTION:
        {
          const room = this.state.room;

          if (room) {
            linkText = room.name || resource;

            if (this.props.shouldShowPillAvatar) {
              avatar = /*#__PURE__*/_react.default.createElement(RoomAvatar, {
                room: room,
                width: 16,
                height: 16,
                "aria-hidden": "true"
              });
            }
          }

          pillClass = 'mx_RoomPill';
        }
        break;

      case Pill.TYPE_GROUP_MENTION:
        {
          if (this.state.group) {
            const {
              avatarUrl,
              groupId,
              name
            } = this.state.group;
            linkText = groupId;

            if (this.props.shouldShowPillAvatar) {
              avatar = /*#__PURE__*/_react.default.createElement(BaseAvatar, {
                name: name || groupId,
                width: 16,
                height: 16,
                "aria-hidden": "true",
                url: avatarUrl ? (0, _Media.mediaFromMxc)(avatarUrl).getSquareThumbnailHttp(16) : null
              });
            }

            pillClass = 'mx_GroupPill';
          }
        }
        break;
    }

    const classes = (0, _classnames.default)("mx_Pill", pillClass, {
      "mx_UserPill_me": userId === _MatrixClientPeg.MatrixClientPeg.get().getUserId(),
      "mx_UserPill_selected": this.props.isSelected
    });

    if (this.state.pillType) {
      const {
        yOffset
      } = this.props;
      let tip;

      if (this.state.hover && resource) {
        tip = /*#__PURE__*/_react.default.createElement(_Tooltip.default, {
          label: resource,
          yOffset: yOffset
        });
      }

      return /*#__PURE__*/_react.default.createElement(_MatrixClientContext.default.Provider, {
        value: this._matrixClient
      }, this.props.inMessage ? /*#__PURE__*/_react.default.createElement("a", {
        className: classes,
        href: href,
        onClick: onClick,
        "data-offset-key": this.props.offsetKey,
        onMouseOver: this.onMouseOver,
        onMouseLeave: this.onMouseLeave
      }, avatar, linkText, tip) : /*#__PURE__*/_react.default.createElement("span", {
        className: classes,
        "data-offset-key": this.props.offsetKey,
        onMouseOver: this.onMouseOver,
        onMouseLeave: this.onMouseLeave
      }, avatar, linkText, tip));
    } else {
      // Deliberately render nothing if the URL isn't recognised
      return null;
    }
  }

}, (0, _defineProperty2.default)(_class2, "TYPE_USER_MENTION", 'TYPE_USER_MENTION'), (0, _defineProperty2.default)(_class2, "TYPE_ROOM_MENTION", 'TYPE_ROOM_MENTION'), (0, _defineProperty2.default)(_class2, "TYPE_GROUP_MENTION", 'TYPE_GROUP_MENTION'), (0, _defineProperty2.default)(_class2, "TYPE_AT_ROOM_MENTION", 'TYPE_AT_ROOM_MENTION'), (0, _defineProperty2.default)(_class2, "propTypes", {
  // The Type of this Pill. If url is given, this is auto-detected.
  type: _propTypes.default.string,
  // The URL to pillify (no validation is done)
  url: _propTypes.default.string,
  // Whether the pill is in a message
  inMessage: _propTypes.default.bool,
  // The room in which this pill is being rendered
  room: _propTypes.default.instanceOf(_room.Room),
  // Whether to include an avatar in the pill
  shouldShowPillAvatar: _propTypes.default.bool,
  // Whether to render this pill as if it were highlit by a selection
  isSelected: _propTypes.default.bool
}), _temp)) || _class);
var _default = Pill;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,