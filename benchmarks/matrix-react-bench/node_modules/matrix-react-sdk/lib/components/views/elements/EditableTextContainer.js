"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _Spinner = _interopRequireDefault(require("./Spinner"));

var _EditableText = _interopRequireDefault(require("./EditableText"));

var _dec, _class, _class2, _temp;

let EditableTextContainer = (
/**
 * A component which wraps an EditableText, with a spinner while updates take
 * place.
 *
 * Parent components should supply an 'onSubmit' callback which returns a
 * promise; a spinner is shown until the promise resolves.
 *
 * The parent can also supply a 'getInitialValue' callback, which works in a
 * similarly asynchronous way. If this is not provided, the initial value is
 * taken from the 'initialValue' property.
 */
_dec = (0, _replaceableComponent.replaceableComponent)("views.elements.EditableTextContainer"), _dec(_class = (_temp = _class2 = class EditableTextContainer extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "unmounted", false);
    (0, _defineProperty2.default)(this, "onValueChanged", (value, shouldSubmit) => {
      if (!shouldSubmit) {
        return;
      }

      this.setState({
        busy: true,
        errorString: null
      });
      this.props.onSubmit(value).then(() => {
        if (this.unmounted) {
          return;
        }

        this.setState({
          busy: false,
          value: value
        });
      }, error => {
        if (this.unmounted) {
          return;
        }

        this.setState({
          errorString: error.toString(),
          busy: false
        });
      });
    });
    this.state = {
      busy: false,
      errorString: null,
      value: props.initialValue
    };
  }

  async componentDidMount() {
    // use whatever was given in the initialValue property.
    if (this.props.getInitialValue === undefined) return;
    this.setState({
      busy: true
    });

    try {
      const initialValue = await this.props.getInitialValue();
      if (this.unmounted) return;
      this.setState({
        busy: false,
        value: initialValue
      });
    } catch (error) {
      if (this.unmounted) return;
      this.setState({
        errorString: error.toString(),
        busy: false
      });
    }
  }

  componentWillUnmount() {
    this.unmounted = true;
  }

  render() {
    if (this.state.busy) {
      return /*#__PURE__*/_react.default.createElement(_Spinner.default, null);
    } else if (this.state.errorString) {
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "error"
      }, this.state.errorString);
    } else {
      return /*#__PURE__*/_react.default.createElement(_EditableText.default, {
        initialValue: this.state.value,
        placeholder: this.props.placeholder,
        onValueChanged: this.onValueChanged,
        blurToSubmit: this.props.blurToSubmit
      });
    }
  }

}, (0, _defineProperty2.default)(_class2, "defaultProps", {
  initialValue: "",
  placeholder: "",
  blurToSubmit: false,
  onSubmit: () => {
    return Promise.resolve();
  }
}), _temp)) || _class);
exports.default = EditableTextContainer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,