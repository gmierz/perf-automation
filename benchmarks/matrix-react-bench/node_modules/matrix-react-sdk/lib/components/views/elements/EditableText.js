"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _Keyboard = require("../../../Keyboard");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _dec, _class, _class2, _temp;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var Phases;

(function (Phases) {
  Phases["Display"] = "display";
  Phases["Edit"] = "edit";
})(Phases || (Phases = {}));

let EditableText = (_dec = (0, _replaceableComponent.replaceableComponent)("views.elements.EditableText"), _dec(_class = (_temp = _class2 = class EditableText extends _react.default.Component {
  // we track value as an JS object field rather than in React state
  // as React doesn't play nice with contentEditable.
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "value", '');
    (0, _defineProperty2.default)(this, "placeholder", false);
    (0, _defineProperty2.default)(this, "editableDiv", /*#__PURE__*/(0, _react.createRef)());
    (0, _defineProperty2.default)(this, "showPlaceholder", show => {
      if (show) {
        this.editableDiv.current.textContent = this.props.placeholder;
        this.editableDiv.current.setAttribute("class", this.props.className + " " + this.props.placeholderClassName);
        this.placeholder = true;
        this.value = '';
      } else {
        this.editableDiv.current.textContent = this.value;
        this.editableDiv.current.setAttribute("class", this.props.className);
        this.placeholder = false;
      }
    });
    (0, _defineProperty2.default)(this, "cancelEdit", () => {
      this.setState({
        phase: Phases.Display
      });
      this.value = this.props.initialValue;
      this.showPlaceholder(!this.value);
      this.onValueChanged(false);
      this.editableDiv.current.blur();
    });
    (0, _defineProperty2.default)(this, "onValueChanged", shouldSubmit => {
      this.props.onValueChanged(this.value, shouldSubmit);
    });
    (0, _defineProperty2.default)(this, "onKeyDown", ev => {
      // console.log("keyDown: textContent=" + ev.target.textContent + ", value=" + this.value + ", placeholder=" + this.placeholder);
      if (this.placeholder) {
        this.showPlaceholder(false);
      }

      if (ev.key === _Keyboard.Key.ENTER) {
        ev.stopPropagation();
        ev.preventDefault();
      } // console.log("keyDown: textContent=" + ev.target.textContent + ", value=" + this.value + ", placeholder=" + this.placeholder);

    });
    (0, _defineProperty2.default)(this, "onKeyUp", ev => {
      // console.log("keyUp: textContent=" + ev.target.textContent + ", value=" + this.value + ", placeholder=" + this.placeholder);
      if (!ev.target.textContent) {
        this.showPlaceholder(true);
      } else if (!this.placeholder) {
        this.value = ev.target.textContent;
      }

      if (ev.key === _Keyboard.Key.ENTER) {
        this.onFinish(ev);
      } else if (ev.key === _Keyboard.Key.ESCAPE) {
        this.cancelEdit();
      } // console.log("keyUp: textContent=" + ev.target.textContent + ", value=" + this.value + ", placeholder=" + this.placeholder);

    });
    (0, _defineProperty2.default)(this, "onClickDiv", () => {
      if (!this.props.editable) return;
      this.setState({
        phase: Phases.Edit
      });
    });
    (0, _defineProperty2.default)(this, "onFocus", ev => {
      //ev.target.setSelectionRange(0, ev.target.textContent.length);
      const node = ev.target.childNodes[0];

      if (node) {
        const range = document.createRange();
        range.setStart(node, 0);
        range.setEnd(node, ev.target.childNodes.length);
        const sel = window.getSelection();
        sel.removeAllRanges();
        sel.addRange(range);
      }
    });
    (0, _defineProperty2.default)(this, "onFinish", (ev, shouldSubmit) => {
      // eslint-disable-next-line @typescript-eslint/no-this-alias
      const self = this;
      const submit = "key" in ev && ev.key === _Keyboard.Key.ENTER || shouldSubmit;
      this.setState({
        phase: Phases.Display
      }, () => {
        if (this.value !== this.props.initialValue) {
          self.onValueChanged(submit);
        }
      });
    });
    (0, _defineProperty2.default)(this, "onBlur", ev => {
      const sel = window.getSelection();
      sel.removeAllRanges();

      if (this.props.blurToCancel) {
        this.cancelEdit();
      } else {
        this.onFinish(ev, this.props.blurToSubmit);
      }

      this.showPlaceholder(!this.value);
    });
    this.state = {
      phase: Phases.Display
    };
  } // TODO: [REACT-WARNING] Replace with appropriate lifecycle event
  // eslint-disable-next-line @typescript-eslint/naming-convention, camelcase


  UNSAFE_componentWillReceiveProps(nextProps) {
    if (nextProps.initialValue !== this.props.initialValue) {
      this.value = nextProps.initialValue;

      if (this.editableDiv.current) {
        this.showPlaceholder(!this.value);
      }
    }
  }

  componentDidMount() {
    this.value = this.props.initialValue;

    if (this.editableDiv.current) {
      this.showPlaceholder(!this.value);
    }
  }

  render() {
    const {
      className,
      editable,
      initialValue,
      label,
      labelClassName
    } = this.props;
    let editableEl;

    if (!editable || this.state.phase === Phases.Display && (label || labelClassName) && !this.value) {
      // show the label
      editableEl = /*#__PURE__*/_react.default.createElement("div", {
        className: className + " " + labelClassName,
        onClick: this.onClickDiv
      }, label || initialValue);
    } else {
      // show the content editable div, but manually manage its contents as react and contentEditable don't play nice together
      editableEl = /*#__PURE__*/_react.default.createElement("div", {
        ref: this.editableDiv,
        contentEditable: true,
        className: className,
        onKeyDown: this.onKeyDown,
        onKeyUp: this.onKeyUp,
        onFocus: this.onFocus,
        onBlur: this.onBlur
      });
    }

    return editableEl;
  }

}, (0, _defineProperty2.default)(_class2, "defaultProps", {
  onValueChanged() {},

  initialValue: '',
  label: '',
  placeholder: '',
  editable: true,
  className: "mx_EditableText",
  placeholderClassName: "mx_EditableText_placeholder",
  blurToSubmit: false
}), _temp)) || _class);
exports.default = EditableText;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,