"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Tabs = exports.ExistingSource = void 0;
exports.getDesktopCapturerSources = getDesktopCapturerSources;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _languageHandler = require("../../../languageHandler");

var _BaseDialog = _interopRequireDefault(require("..//dialogs/BaseDialog"));

var _DialogButtons = _interopRequireDefault(require("./DialogButtons"));

var _classnames = _interopRequireDefault(require("classnames"));

var _AccessibleButton = _interopRequireDefault(require("./AccessibleButton"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _TabbedView = _interopRequireWildcard(require("../../structures/TabbedView"));

var _dec, _class;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function getDesktopCapturerSources() {
  const options = {
    thumbnailSize: {
      height: 176,
      width: 312
    },
    types: ["screen", "window"]
  };
  return window.electron.getDesktopCapturerSources(options);
}

let Tabs;
exports.Tabs = Tabs;

(function (Tabs) {
  Tabs["Screens"] = "screen";
  Tabs["Windows"] = "window";
})(Tabs || (exports.Tabs = Tabs = {}));

class ExistingSource extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "onClick", () => {
      this.props.onSelect(this.props.source);
    });
  }

  render() {
    const thumbnailClasses = (0, _classnames.default)({
      mx_desktopCapturerSourcePicker_source_thumbnail: true,
      mx_desktopCapturerSourcePicker_source_thumbnail_selected: this.props.selected
    });
    return /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      className: "mx_desktopCapturerSourcePicker_source",
      title: this.props.source.name,
      onClick: this.onClick
    }, /*#__PURE__*/_react.default.createElement("img", {
      className: thumbnailClasses,
      src: this.props.source.thumbnailURL
    }), /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_desktopCapturerSourcePicker_source_name"
    }, this.props.source.name));
  }

}

exports.ExistingSource = ExistingSource;
let DesktopCapturerSourcePicker = (_dec = (0, _replaceableComponent.replaceableComponent)("views.elements.DesktopCapturerSourcePicker"), _dec(_class = class DesktopCapturerSourcePicker extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "interval", void 0);
    (0, _defineProperty2.default)(this, "onSelect", source => {
      this.setState({
        selectedSource: source
      });
    });
    (0, _defineProperty2.default)(this, "onShare", () => {
      this.props.onFinished(this.state.selectedSource.id);
    });
    (0, _defineProperty2.default)(this, "onTabChange", () => {
      this.setState({
        selectedSource: null
      });
    });
    (0, _defineProperty2.default)(this, "onCloseClick", () => {
      this.props.onFinished(null);
    });
    this.state = {
      selectedTab: Tabs.Screens,
      sources: [],
      selectedSource: null
    };
  }

  async componentDidMount() {
    // setInterval() first waits and then executes, therefore
    // we call getDesktopCapturerSources() here without any delay.
    // Otherwise the dialog would be left empty for some time.
    this.setState({
      sources: await getDesktopCapturerSources()
    }); // We update the sources every 500ms to get newer thumbnails

    this.interval = setInterval(async () => {
      this.setState({
        sources: await getDesktopCapturerSources()
      });
    }, 500);
  }

  componentWillUnmount() {
    clearInterval(this.interval);
  }

  getTab(type, label) {
    const sources = this.state.sources.filter(source => source.id.startsWith(type)).map(source => {
      var _this$state$selectedS;

      return /*#__PURE__*/_react.default.createElement(ExistingSource, {
        selected: ((_this$state$selectedS = this.state.selectedSource) === null || _this$state$selectedS === void 0 ? void 0 : _this$state$selectedS.id) === source.id,
        source: source,
        onSelect: this.onSelect,
        key: source.id
      });
    });
    return new _TabbedView.Tab(type, label, null, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_desktopCapturerSourcePicker_tab"
    }, sources));
  }

  render() {
    const tabs = [this.getTab("screen", (0, _languageHandler._t)("Share entire screen")), this.getTab("window", (0, _languageHandler._t)("Application window"))];
    return /*#__PURE__*/_react.default.createElement(_BaseDialog.default, {
      className: "mx_desktopCapturerSourcePicker",
      onFinished: this.onCloseClick,
      title: (0, _languageHandler._t)("Share content")
    }, /*#__PURE__*/_react.default.createElement(_TabbedView.default, {
      tabs: tabs,
      tabLocation: _TabbedView.TabLocation.TOP,
      onChange: this.onTabChange
    }), /*#__PURE__*/_react.default.createElement(_DialogButtons.default, {
      primaryButton: (0, _languageHandler._t)("Share"),
      hasCancel: true,
      onCancel: this.onCloseClick,
      onPrimaryButtonClick: this.onShare,
      primaryDisabled: !this.state.selectedSource
    }));
  }

}) || _class);
exports.default = DesktopCapturerSourcePicker;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,