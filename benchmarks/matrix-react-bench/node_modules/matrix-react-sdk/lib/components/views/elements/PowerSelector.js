"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var Roles = _interopRequireWildcard(require("../../../Roles"));

var _languageHandler = require("../../../languageHandler");

var _Field = _interopRequireDefault(require("./Field"));

var _Keyboard = require("../../../Keyboard");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _dec, _class, _class2, _temp;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const CUSTOM_VALUE = "SELECT_VALUE_CUSTOM";
let PowerSelector = (_dec = (0, _replaceableComponent.replaceableComponent)("views.elements.PowerSelector"), _dec(_class = (_temp = _class2 = class PowerSelector extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "onSelectChange", event => {
      const isCustom = event.target.value === CUSTOM_VALUE;

      if (isCustom) {
        this.setState({
          custom: true
        });
      } else {
        const powerLevel = parseInt(event.target.value);
        this.props.onChange(powerLevel, this.props.powerLevelKey);
        this.setState({
          selectValue: powerLevel
        });
      }
    });
    (0, _defineProperty2.default)(this, "onCustomChange", event => {
      this.setState({
        customValue: parseInt(event.target.value)
      });
    });
    (0, _defineProperty2.default)(this, "onCustomBlur", event => {
      event.preventDefault();
      event.stopPropagation();
      this.props.onChange(this.state.customValue, this.props.powerLevelKey);
    });
    (0, _defineProperty2.default)(this, "onCustomKeyDown", event => {
      if (event.key === _Keyboard.Key.ENTER) {
        event.preventDefault();
        event.stopPropagation(); // Do not call the onChange handler directly here - it can cause an infinite loop.
        // Long story short, a user hits Enter to submit the value which onChange handles as
        // raising a dialog which causes a blur which causes a dialog which causes a blur and
        // so on. By not causing the onChange to be called here, we avoid the loop because we
        // handle the onBlur safely.

        event.target.blur();
      }
    });
    this.state = {
      levelRoleMap: {},
      // List of power levels to show in the drop-down
      options: [],
      customValue: this.props.value,
      selectValue: 0
    };
  } // TODO: [REACT-WARNING] Replace with appropriate lifecycle event
  // eslint-disable-next-line camelcase, @typescript-eslint/naming-convention


  UNSAFE_componentWillMount() {
    this.initStateFromProps(this.props);
  } // eslint-disable-next-line camelcase, @typescript-eslint/naming-convention


  UNSAFE_componentWillReceiveProps(newProps) {
    this.initStateFromProps(newProps);
  }

  initStateFromProps(newProps) {
    // This needs to be done now because levelRoleMap has translated strings
    const levelRoleMap = Roles.levelRoleMap(newProps.usersDefault);
    const options = Object.keys(levelRoleMap).filter(level => {
      return level === undefined || parseInt(level) <= newProps.maxValue || parseInt(level) == newProps.value;
    }).map(level => parseInt(level));
    const isCustom = levelRoleMap[newProps.value] === undefined;
    this.setState({
      levelRoleMap,
      options,
      custom: isCustom,
      customLevel: newProps.value,
      selectValue: isCustom ? CUSTOM_VALUE : newProps.value
    });
  }

  render() {
    let picker;
    const label = typeof this.props.label === "undefined" ? (0, _languageHandler._t)("Power level") : this.props.label;

    if (this.state.custom) {
      picker = /*#__PURE__*/_react.default.createElement(_Field.default, {
        type: "number",
        label: label,
        max: this.props.maxValue,
        onBlur: this.onCustomBlur,
        onKeyDown: this.onCustomKeyDown,
        onChange: this.onCustomChange,
        value: String(this.state.customValue),
        disabled: this.props.disabled
      });
    } else {
      // Each level must have a definition in this.state.levelRoleMap
      const options = this.state.options.map(level => {
        return {
          value: String(level),
          text: Roles.textualPowerLevel(level, this.props.usersDefault)
        };
      });
      options.push({
        value: CUSTOM_VALUE,
        text: (0, _languageHandler._t)("Custom level")
      });
      const optionsElements = options.map(op => {
        return /*#__PURE__*/_react.default.createElement("option", {
          value: op.value,
          key: op.value
        }, op.text);
      });
      picker = /*#__PURE__*/_react.default.createElement(_Field.default, {
        element: "select",
        label: label,
        onChange: this.onSelectChange,
        value: String(this.state.selectValue),
        disabled: this.props.disabled
      }, optionsElements);
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_PowerSelector"
    }, picker);
  }

}, (0, _defineProperty2.default)(_class2, "defaultProps", {
  maxValue: Infinity,
  usersDefault: 0
}), _temp)) || _class);
exports.default = PowerSelector;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,