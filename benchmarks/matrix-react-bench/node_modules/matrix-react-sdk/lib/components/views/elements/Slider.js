"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _dec, _class;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

let Slider = (_dec = (0, _replaceableComponent.replaceableComponent)("views.elements.Slider"), _dec(_class = class Slider extends React.Component {
  // offset is a terrible inverse approximation.
  // if the values represents some function f(x) = y where x is the
  // index of the array and y = values[x] then offset(f, y) = x
  // s.t f(x) = y.
  // it assumes a monotonic function and interpolates linearly between
  // y values.
  // Offset is used for finding the location of a value on a
  // non linear slider.
  offset(values, value) {
    // the index of the first number greater than value.
    const closest = values.reduce((prev, curr) => {
      return value > curr ? prev + 1 : prev;
    }, 0); // Off the left

    if (closest === 0) {
      return 0;
    } // Off the right


    if (closest === values.length) {
      return 100;
    } // Now


    const closestLessValue = values[closest - 1];
    const closestGreaterValue = values[closest];
    const intervalWidth = 1 / (values.length - 1);
    const linearInterpolation = (value - closestLessValue) / (closestGreaterValue - closestLessValue);
    return 100 * (closest - 1 + linearInterpolation) * intervalWidth;
  }

  render() {
    const dots = this.props.values.map(v => /*#__PURE__*/React.createElement(Dot, {
      active: v <= this.props.value,
      label: this.props.displayFunc(v),
      onClick: this.props.disabled ? () => {} : () => this.props.onSelectionChange(v),
      key: v,
      disabled: this.props.disabled
    }));
    let selection = null;

    if (!this.props.disabled) {
      const offset = this.offset(this.props.values, this.props.value);
      selection = /*#__PURE__*/React.createElement("div", {
        className: "mx_Slider_selection"
      }, /*#__PURE__*/React.createElement("div", {
        className: "mx_Slider_selectionDot",
        style: {
          left: "calc(-1.195em + " + offset + "%)"
        }
      }, /*#__PURE__*/React.createElement("div", {
        className: "mx_Slider_selectionText"
      }, this.props.value)), /*#__PURE__*/React.createElement("hr", {
        style: {
          width: offset + "%"
        }
      }));
    }

    return /*#__PURE__*/React.createElement("div", {
      className: "mx_Slider"
    }, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("div", {
      className: "mx_Slider_bar"
    }, /*#__PURE__*/React.createElement("hr", {
      onClick: this.props.disabled ? () => {} : this.onClick.bind(this)
    }), selection), /*#__PURE__*/React.createElement("div", {
      className: "mx_Slider_dotContainer"
    }, dots)));
  }

  onClick(event) {
    const width = event.target.clientWidth; // nativeEvent is safe to use because https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/offsetX
    // is supported by all modern browsers

    const relativeClick = event.nativeEvent.offsetX / width;
    const nearestValue = this.props.values[Math.round(relativeClick * (this.props.values.length - 1))];
    this.props.onSelectionChange(nearestValue);
  }

}) || _class);
exports.default = Slider;

class Dot extends React.PureComponent {
  render() {
    let className = "mx_Slider_dot";

    if (!this.props.disabled && this.props.active) {
      className += " mx_Slider_dotActive";
    }

    return /*#__PURE__*/React.createElement("span", {
      onClick: this.props.onClick,
      className: "mx_Slider_dotValue"
    }, /*#__PURE__*/React.createElement("div", {
      className: className
    }), /*#__PURE__*/React.createElement("div", {
      className: "mx_Slider_labelContainer"
    }, /*#__PURE__*/React.createElement("div", {
      className: "mx_Slider_label"
    }, this.props.label)));
  }

}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,