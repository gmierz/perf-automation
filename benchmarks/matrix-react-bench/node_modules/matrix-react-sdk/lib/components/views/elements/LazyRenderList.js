"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _dec, _class, _class2, _temp;

class ItemRange {
  constructor(topCount, renderCount, bottomCount) {
    this.topCount = topCount;
    this.renderCount = renderCount;
    this.bottomCount = bottomCount;
  }

  contains(range) {
    // don't contain empty ranges
    // as it will prevent clearing the list
    // once it is scrolled far enough out of view
    if (!range.renderCount && this.renderCount) {
      return false;
    }

    return range.topCount >= this.topCount && range.topCount + range.renderCount <= this.topCount + this.renderCount;
  }

  expand(amount) {
    // don't expand ranges that won't render anything
    if (this.renderCount === 0) {
      return this;
    }

    const topGrow = Math.min(amount, this.topCount);
    const bottomGrow = Math.min(amount, this.bottomCount);
    return new ItemRange(this.topCount - topGrow, this.renderCount + topGrow + bottomGrow, this.bottomCount - bottomGrow);
  }

  totalSize() {
    return this.topCount + this.renderCount + this.bottomCount;
  }

}

let LazyRenderList = (_dec = (0, _replaceableComponent.replaceableComponent)("views.elements.LazyRenderList"), _dec(_class = (_temp = _class2 = class LazyRenderList extends _react.default.Component {
  constructor(props) {
    super(props);
    this.state = {
      renderRange: null
    };
  }

  static getDerivedStateFromProps(props, state) {
    const range = LazyRenderList.getVisibleRangeFromProps(props);
    const intersectRange = range.expand(props.overflowMargin);
    const renderRange = range.expand(props.overflowItems);
    const listHasChangedSize = !!state.renderRange && renderRange.totalSize() !== state.renderRange.totalSize(); // only update render Range if the list has shrunk/grown and we need to adjust padding OR
    // if the new range + overflowMargin isn't contained by the old anymore

    if (listHasChangedSize || !state.renderRange || !state.renderRange.contains(intersectRange)) {
      return {
        renderRange
      };
    }

    return null;
  }

  static getVisibleRangeFromProps(props) {
    const {
      items,
      itemHeight,
      scrollTop,
      height
    } = props;
    const length = items ? items.length : 0;
    const topCount = Math.min(Math.max(0, Math.floor(scrollTop / itemHeight)), length);
    const itemsAfterTop = length - topCount;
    const visibleItems = height !== 0 ? Math.ceil(height / itemHeight) : 0;
    const renderCount = Math.min(visibleItems, itemsAfterTop);
    const bottomCount = itemsAfterTop - renderCount;
    return new ItemRange(topCount, renderCount, bottomCount);
  }

  render() {
    const {
      itemHeight,
      items,
      renderItem
    } = this.props;
    const {
      renderRange
    } = this.state;
    const {
      topCount,
      renderCount,
      bottomCount
    } = renderRange;
    const paddingTop = topCount * itemHeight;
    const paddingBottom = bottomCount * itemHeight;
    const renderedItems = (items || []).slice(topCount, topCount + renderCount);
    const element = this.props.element || "div";
    const elementProps = {
      "style": {
        paddingTop: `${paddingTop}px`,
        paddingBottom: `${paddingBottom}px`
      },
      "className": this.props.className
    };
    return /*#__PURE__*/_react.default.createElement(element, elementProps, renderedItems.map(renderItem));
  }

}, (0, _defineProperty2.default)(_class2, "defaultProps", {
  overflowItems: 20,
  overflowMargin: 5
}), _temp)) || _class);
exports.default = LazyRenderList;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,