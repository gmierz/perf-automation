"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _Dropdown = _interopRequireDefault(require("../../views/elements/Dropdown"));

var _PlatformPeg = _interopRequireDefault(require("../../../PlatformPeg"));

var _SettingsStore = _interopRequireDefault(require("../../../settings/SettingsStore"));

var _languageHandler = require("../../../languageHandler");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _Spinner = _interopRequireDefault(require("./Spinner"));

var _dec, _class;

function languageMatchesSearchQuery(query, language) {
  if (language.label.toUpperCase().includes(query.toUpperCase())) return true;
  if (language.value.toUpperCase() === query.toUpperCase()) return true;
  return false;
}

let SpellCheckLanguagesDropdown = (_dec = (0, _replaceableComponent.replaceableComponent)("views.elements.SpellCheckLanguagesDropdown"), _dec(_class = class SpellCheckLanguagesDropdown extends _react.default.Component {
  constructor(props) {
    super(props);
    this.onSearchChange = this.onSearchChange.bind(this);
    this.state = {
      searchQuery: '',
      languages: null
    };
  }

  componentDidMount() {
    const plaf = _PlatformPeg.default.get();

    if (plaf) {
      plaf.getAvailableSpellCheckLanguages().then(languages => {
        languages.sort(function (a, b) {
          if (a < b) return -1;
          if (a > b) return 1;
          return 0;
        });
        const langs = [];
        languages.forEach(language => {
          langs.push({
            label: language,
            value: language
          });
        });
        this.setState({
          languages: langs
        });
      }).catch(e => {
        this.setState({
          languages: ['en']
        });
      });
    }
  }

  onSearchChange(searchQuery) {
    this.setState({
      searchQuery
    });
  }

  render() {
    if (this.state.languages === null) {
      return /*#__PURE__*/_react.default.createElement(_Spinner.default, null);
    }

    let displayedLanguages;

    if (this.state.searchQuery) {
      displayedLanguages = this.state.languages.filter(lang => {
        return languageMatchesSearchQuery(this.state.searchQuery, lang);
      });
    } else {
      displayedLanguages = this.state.languages;
    }

    const options = displayedLanguages.map(language => {
      return /*#__PURE__*/_react.default.createElement("div", {
        key: language.value
      }, language.label);
    }); // default value here too, otherwise we need to handle null / undefined;
    // values between mounting and the initial value propgating

    let language = _SettingsStore.default.getValue("language", null,
    /*excludeDefault:*/
    true);

    let value = null;

    if (language) {
      value = this.props.value || language;
    } else {
      language = navigator.language || navigator.userLanguage;
      value = this.props.value || language;
    }

    return /*#__PURE__*/_react.default.createElement(_Dropdown.default, {
      id: "mx_LanguageDropdown",
      className: this.props.className,
      onOptionChange: this.props.onOptionChange,
      onSearchChange: this.onSearchChange,
      searchEnabled: true,
      value: value,
      label: (0, _languageHandler._t)("Language Dropdown")
    }, options);
  }

}) || _class);
exports.default = SpellCheckLanguagesDropdown;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,