"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.CheckboxStyle = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _randomstring = require("matrix-js-sdk/src/randomstring");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _classnames = _interopRequireDefault(require("classnames"));

const _excluded = ["children", "className", "kind"];

var _dec, _class, _class2, _temp;

let CheckboxStyle;
exports.CheckboxStyle = CheckboxStyle;

(function (CheckboxStyle) {
  CheckboxStyle["Solid"] = "solid";
  CheckboxStyle["Outline"] = "outline";
})(CheckboxStyle || (exports.CheckboxStyle = CheckboxStyle = {}));

let StyledCheckbox = (_dec = (0, _replaceableComponent.replaceableComponent)("views.elements.StyledCheckbox"), _dec(_class = (_temp = _class2 = class StyledCheckbox extends _react.default.PureComponent {
  constructor(props) {
    super(props); // 56^10 so unlikely chance of collision.

    (0, _defineProperty2.default)(this, "id", void 0);
    this.id = "checkbox_" + (0, _randomstring.randomString)(10);
  }

  render() {
    /* eslint @typescript-eslint/no-unused-vars: ["error", { "ignoreRestSiblings": true }] */
    const _this$props = this.props,
          {
      children,
      className,
      kind = CheckboxStyle.Solid
    } = _this$props,
          otherProps = (0, _objectWithoutProperties2.default)(_this$props, _excluded);
    const newClassName = (0, _classnames.default)("mx_Checkbox", className, {
      "mx_Checkbox_hasKind": kind,
      [`mx_Checkbox_kind_${kind}`]: kind
    });
    return /*#__PURE__*/_react.default.createElement("span", {
      className: newClassName
    }, /*#__PURE__*/_react.default.createElement("input", (0, _extends2.default)({
      id: this.id
    }, otherProps, {
      type: "checkbox"
    })), /*#__PURE__*/_react.default.createElement("label", {
      htmlFor: this.id
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_Checkbox_background"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_Checkbox_checkmark"
    })), /*#__PURE__*/_react.default.createElement("div", null, this.props.children)));
  }

}, (0, _defineProperty2.default)(_class2, "defaultProps", {
  className: ""
}), _temp)) || _class);
exports.default = StyledCheckbox;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL2VsZW1lbnRzL1N0eWxlZENoZWNrYm94LnRzeCJdLCJuYW1lcyI6WyJDaGVja2JveFN0eWxlIiwiU3R5bGVkQ2hlY2tib3giLCJSZWFjdCIsIlB1cmVDb21wb25lbnQiLCJjb25zdHJ1Y3RvciIsInByb3BzIiwiaWQiLCJyZW5kZXIiLCJjaGlsZHJlbiIsImNsYXNzTmFtZSIsImtpbmQiLCJTb2xpZCIsIm90aGVyUHJvcHMiLCJuZXdDbGFzc05hbWUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQWdCQTs7QUFDQTs7QUFDQTs7QUFDQTs7Ozs7O0lBRVlBLGE7OztXQUFBQSxhO0FBQUFBLEVBQUFBLGE7QUFBQUEsRUFBQUEsYTtHQUFBQSxhLDZCQUFBQSxhOztJQWFTQyxjLFdBRHBCLGdEQUFxQiwrQkFBckIsQyxtQ0FBRCxNQUNxQkEsY0FEckIsU0FDNENDLGVBQU1DLGFBRGxELENBQ2dGO0FBTzVFQyxFQUFBQSxXQUFXLENBQUNDLEtBQUQsRUFBZ0I7QUFDdkIsVUFBTUEsS0FBTixFQUR1QixDQUV2Qjs7QUFGdUI7QUFHdkIsU0FBS0MsRUFBTCxHQUFVLGNBQWMsZ0NBQWEsRUFBYixDQUF4QjtBQUNIOztBQUVNQyxFQUFBQSxNQUFNLEdBQUc7QUFDWjtBQUNBLHdCQUEyRSxLQUFLRixLQUFoRjtBQUFBLFVBQU07QUFBRUcsTUFBQUEsUUFBRjtBQUFZQyxNQUFBQSxTQUFaO0FBQXVCQyxNQUFBQSxJQUFJLEdBQUdWLGFBQWEsQ0FBQ1c7QUFBNUMsS0FBTjtBQUFBLFVBQTREQyxVQUE1RDtBQUNBLFVBQU1DLFlBQVksR0FBRyx5QkFDakIsYUFEaUIsRUFFakJKLFNBRmlCLEVBR2pCO0FBQ0ksNkJBQXVCQyxJQUQzQjtBQUVJLE9BQUUsb0JBQW1CQSxJQUFLLEVBQTFCLEdBQThCQTtBQUZsQyxLQUhpQixDQUFyQjtBQVFBLHdCQUFPO0FBQU0sTUFBQSxTQUFTLEVBQUVHO0FBQWpCLG9CQUNIO0FBQU8sTUFBQSxFQUFFLEVBQUUsS0FBS1A7QUFBaEIsT0FBd0JNLFVBQXhCO0FBQW9DLE1BQUEsSUFBSSxFQUFDO0FBQXpDLE9BREcsZUFFSDtBQUFPLE1BQUEsT0FBTyxFQUFFLEtBQUtOO0FBQXJCLG9CQUVJO0FBQUssTUFBQSxTQUFTLEVBQUM7QUFBZixvQkFDSTtBQUFLLE1BQUEsU0FBUyxFQUFDO0FBQWYsTUFESixDQUZKLGVBS0ksMENBQ00sS0FBS0QsS0FBTCxDQUFXRyxRQURqQixDQUxKLENBRkcsQ0FBUDtBQVlIOztBQXBDMkUsQyx5REFHdEM7QUFDbENDLEVBQUFBLFNBQVMsRUFBRTtBQUR1QixDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbkNvcHlyaWdodCAyMDIwIFRoZSBNYXRyaXgub3JnIEZvdW5kYXRpb24gQy5JLkMuXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgcmFuZG9tU3RyaW5nIH0gZnJvbSBcIm1hdHJpeC1qcy1zZGsvc3JjL3JhbmRvbXN0cmluZ1wiO1xuaW1wb3J0IHsgcmVwbGFjZWFibGVDb21wb25lbnQgfSBmcm9tIFwiLi4vLi4vLi4vdXRpbHMvcmVwbGFjZWFibGVDb21wb25lbnRcIjtcbmltcG9ydCBjbGFzc25hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuXG5leHBvcnQgZW51bSBDaGVja2JveFN0eWxlIHtcbiAgICBTb2xpZCA9IFwic29saWRcIixcbiAgICBPdXRsaW5lID0gXCJvdXRsaW5lXCIsXG59XG5cbmludGVyZmFjZSBJUHJvcHMgZXh0ZW5kcyBSZWFjdC5JbnB1dEhUTUxBdHRyaWJ1dGVzPEhUTUxJbnB1dEVsZW1lbnQ+IHtcbiAgICBraW5kPzogQ2hlY2tib3hTdHlsZTtcbn1cblxuaW50ZXJmYWNlIElTdGF0ZSB7XG59XG5cbkByZXBsYWNlYWJsZUNvbXBvbmVudChcInZpZXdzLmVsZW1lbnRzLlN0eWxlZENoZWNrYm94XCIpXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTdHlsZWRDaGVja2JveCBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQ8SVByb3BzLCBJU3RhdGU+IHtcbiAgICBwcml2YXRlIGlkOiBzdHJpbmc7XG5cbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IGRlZmF1bHRQcm9wcyA9IHtcbiAgICAgICAgY2xhc3NOYW1lOiBcIlwiLFxuICAgIH07XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm9wczogSVByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcbiAgICAgICAgLy8gNTZeMTAgc28gdW5saWtlbHkgY2hhbmNlIG9mIGNvbGxpc2lvbi5cbiAgICAgICAgdGhpcy5pZCA9IFwiY2hlY2tib3hfXCIgKyByYW5kb21TdHJpbmcoMTApO1xuICAgIH1cblxuICAgIHB1YmxpYyByZW5kZXIoKSB7XG4gICAgICAgIC8qIGVzbGludCBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnM6IFtcImVycm9yXCIsIHsgXCJpZ25vcmVSZXN0U2libGluZ3NcIjogdHJ1ZSB9XSAqL1xuICAgICAgICBjb25zdCB7IGNoaWxkcmVuLCBjbGFzc05hbWUsIGtpbmQgPSBDaGVja2JveFN0eWxlLlNvbGlkLCAuLi5vdGhlclByb3BzIH0gPSB0aGlzLnByb3BzO1xuICAgICAgICBjb25zdCBuZXdDbGFzc05hbWUgPSBjbGFzc25hbWVzKFxuICAgICAgICAgICAgXCJteF9DaGVja2JveFwiLFxuICAgICAgICAgICAgY2xhc3NOYW1lLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibXhfQ2hlY2tib3hfaGFzS2luZFwiOiBraW5kLFxuICAgICAgICAgICAgICAgIFtgbXhfQ2hlY2tib3hfa2luZF8ke2tpbmR9YF06IGtpbmQsXG4gICAgICAgICAgICB9LFxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gPHNwYW4gY2xhc3NOYW1lPXtuZXdDbGFzc05hbWV9PlxuICAgICAgICAgICAgPGlucHV0IGlkPXt0aGlzLmlkfSB7Li4ub3RoZXJQcm9wc30gdHlwZT1cImNoZWNrYm94XCIgLz5cbiAgICAgICAgICAgIDxsYWJlbCBodG1sRm9yPXt0aGlzLmlkfT5cbiAgICAgICAgICAgICAgICB7IC8qIFVzaW5nIHRoZSBkaXYgdG8gY2VudGVyIHRoZSBpbWFnZSAqLyB9XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJteF9DaGVja2JveF9iYWNrZ3JvdW5kXCI+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibXhfQ2hlY2tib3hfY2hlY2ttYXJrXCIgLz5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICB7IHRoaXMucHJvcHMuY2hpbGRyZW4gfVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgPC9zcGFuPjtcbiAgICB9XG59XG4iXX0=