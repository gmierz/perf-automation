"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _highlight = _interopRequireDefault(require("highlight.js"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _dec, _class;

let SyntaxHighlight = (_dec = (0, _replaceableComponent.replaceableComponent)("views.elements.SyntaxHighlight"), _dec(_class = class SyntaxHighlight extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "el", null);
    (0, _defineProperty2.default)(this, "ref", el => {
      this.el = el;
      this.componentDidUpdate();
    });
  } // componentDidUpdate used here for reusability


  componentDidUpdate() {
    if (this.el) _highlight.default.highlightElement(this.el);
  } // call componentDidUpdate because _ref is fired on initial render
  // which does not fire componentDidUpdate


  render() {
    const {
      className,
      children
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("pre", {
      className: `${className} mx_SyntaxHighlight`,
      ref: this.ref
    }, /*#__PURE__*/_react.default.createElement("code", null, children));
  }

}) || _class);
exports.default = SyntaxHighlight;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL2VsZW1lbnRzL1N5bnRheEhpZ2hsaWdodC50c3giXSwibmFtZXMiOlsiU3ludGF4SGlnaGxpZ2h0IiwiUmVhY3QiLCJDb21wb25lbnQiLCJjb25zdHJ1Y3RvciIsInByb3BzIiwiZWwiLCJjb21wb25lbnREaWRVcGRhdGUiLCJoaWdobGlnaHQiLCJoaWdobGlnaHRFbGVtZW50IiwicmVuZGVyIiwiY2xhc3NOYW1lIiwiY2hpbGRyZW4iLCJyZWYiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBZ0JBOztBQUNBOztBQUNBOzs7O0lBUXFCQSxlLFdBRHBCLGdEQUFxQixnQ0FBckIsQyxnQkFBRCxNQUNxQkEsZUFEckIsU0FDNkNDLGVBQU1DLFNBRG5ELENBQ3FFO0FBR2pFQyxFQUFBQSxXQUFXLENBQUNDLEtBQUQsRUFBZ0I7QUFDdkIsVUFBTUEsS0FBTjtBQUR1Qiw4Q0FGRSxJQUVGO0FBQUEsK0NBV1pDLEVBQUQsSUFBOEI7QUFDeEMsV0FBS0EsRUFBTCxHQUFVQSxFQUFWO0FBQ0EsV0FBS0Msa0JBQUw7QUFDSCxLQWQwQjtBQUUxQixHQUxnRSxDQU9qRTs7O0FBQ09BLEVBQUFBLGtCQUFrQixHQUFTO0FBQzlCLFFBQUksS0FBS0QsRUFBVCxFQUFhRSxtQkFBVUMsZ0JBQVYsQ0FBMkIsS0FBS0gsRUFBaEM7QUFDaEIsR0FWZ0UsQ0FZakU7QUFDQTs7O0FBTU9JLEVBQUFBLE1BQU0sR0FBZ0I7QUFDekIsVUFBTTtBQUFFQyxNQUFBQSxTQUFGO0FBQWFDLE1BQUFBO0FBQWIsUUFBMEIsS0FBS1AsS0FBckM7QUFFQSx3QkFBTztBQUFLLE1BQUEsU0FBUyxFQUFHLEdBQUVNLFNBQVUscUJBQTdCO0FBQW1ELE1BQUEsR0FBRyxFQUFFLEtBQUtFO0FBQTdELG9CQUNILDJDQUFRRCxRQUFSLENBREcsQ0FBUDtBQUdIOztBQXpCZ0UsQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5Db3B5cmlnaHQgMjAxNyBNaWNoYWVsIFRlbGF0eW5za2kgPDd0M2NoZ3V5QGdtYWlsLmNvbT5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGhpZ2hsaWdodCBmcm9tICdoaWdobGlnaHQuanMnO1xuaW1wb3J0IHsgcmVwbGFjZWFibGVDb21wb25lbnQgfSBmcm9tIFwiLi4vLi4vLi4vdXRpbHMvcmVwbGFjZWFibGVDb21wb25lbnRcIjtcblxuaW50ZXJmYWNlIElQcm9wcyB7XG4gICAgY2xhc3NOYW1lPzogc3RyaW5nO1xuICAgIGNoaWxkcmVuPzogUmVhY3QuUmVhY3ROb2RlO1xufVxuXG5AcmVwbGFjZWFibGVDb21wb25lbnQoXCJ2aWV3cy5lbGVtZW50cy5TeW50YXhIaWdobGlnaHRcIilcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFN5bnRheEhpZ2hsaWdodCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxJUHJvcHM+IHtcbiAgICBwcml2YXRlIGVsOiBIVE1MUHJlRWxlbWVudCA9IG51bGw7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm9wczogSVByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcbiAgICB9XG5cbiAgICAvLyBjb21wb25lbnREaWRVcGRhdGUgdXNlZCBoZXJlIGZvciByZXVzYWJpbGl0eVxuICAgIHB1YmxpYyBjb21wb25lbnREaWRVcGRhdGUoKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLmVsKSBoaWdobGlnaHQuaGlnaGxpZ2h0RWxlbWVudCh0aGlzLmVsKTtcbiAgICB9XG5cbiAgICAvLyBjYWxsIGNvbXBvbmVudERpZFVwZGF0ZSBiZWNhdXNlIF9yZWYgaXMgZmlyZWQgb24gaW5pdGlhbCByZW5kZXJcbiAgICAvLyB3aGljaCBkb2VzIG5vdCBmaXJlIGNvbXBvbmVudERpZFVwZGF0ZVxuICAgIHByaXZhdGUgcmVmID0gKGVsOiBIVE1MUHJlRWxlbWVudCk6IHZvaWQgPT4ge1xuICAgICAgICB0aGlzLmVsID0gZWw7XG4gICAgICAgIHRoaXMuY29tcG9uZW50RGlkVXBkYXRlKCk7XG4gICAgfTtcblxuICAgIHB1YmxpYyByZW5kZXIoKTogSlNYLkVsZW1lbnQge1xuICAgICAgICBjb25zdCB7IGNsYXNzTmFtZSwgY2hpbGRyZW4gfSA9IHRoaXMucHJvcHM7XG5cbiAgICAgICAgcmV0dXJuIDxwcmUgY2xhc3NOYW1lPXtgJHtjbGFzc05hbWV9IG14X1N5bnRheEhpZ2hsaWdodGB9IHJlZj17dGhpcy5yZWZ9PlxuICAgICAgICAgICAgPGNvZGU+eyBjaGlsZHJlbiB9PC9jb2RlPlxuICAgICAgICA8L3ByZT47XG4gICAgfVxufVxuXG4iXX0=