"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _languageHandler = require("../../../languageHandler");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _AccessibleButton = _interopRequireDefault(require("./AccessibleButton"));

var _dec, _class;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

let DirectorySearchBox = (_dec = (0, _replaceableComponent.replaceableComponent)("views.elements.DirectorySearchBox"), _dec(_class = class DirectorySearchBox extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "input", /*#__PURE__*/(0, _react.createRef)());
    (0, _defineProperty2.default)(this, "onClearClick", () => {
      this.setState({
        value: ''
      });

      if (this.input.current) {
        this.input.current.focus();

        if (this.props.onClear) {
          this.props.onClear();
        }
      }
    });
    (0, _defineProperty2.default)(this, "onChange", ev => {
      if (!this.input.current) return;
      this.setState({
        value: ev.target.value
      });

      if (this.props.onChange) {
        this.props.onChange(ev.target.value);
      }
    });
    (0, _defineProperty2.default)(this, "onKeyUp", ev => {
      if (ev.key == 'Enter' && this.props.showJoinButton) {
        if (this.props.onJoinClick) {
          this.props.onJoinClick(this.state.value);
        }
      }
    });
    (0, _defineProperty2.default)(this, "onJoinButtonClick", () => {
      if (this.props.onJoinClick) {
        this.props.onJoinClick(this.state.value);
      }
    });
    this.state = {
      value: this.props.initialText || ''
    };
  }

  render() {
    const searchboxClasses = {
      mx_DirectorySearchBox: true
    };
    searchboxClasses[this.props.className] = true;
    let joinButton;

    if (this.props.showJoinButton) {
      joinButton = /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        className: "mx_DirectorySearchBox_joinButton",
        onClick: this.onJoinButtonClick
      }, (0, _languageHandler._t)("Join"));
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: `mx_DirectorySearchBox ${this.props.className} mx_textinput`
    }, /*#__PURE__*/_react.default.createElement("input", {
      type: "text",
      name: "dirsearch",
      value: this.state.value,
      className: "mx_textinput_icon mx_textinput_search",
      ref: this.input,
      onChange: this.onChange,
      onKeyUp: this.onKeyUp,
      placeholder: this.props.placeholder,
      autoFocus: true
    }), joinButton, /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      className: "mx_DirectorySearchBox_clear",
      onClick: this.onClearClick
    }));
  }

}) || _class);
exports.default = DirectorySearchBox;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL2VsZW1lbnRzL0RpcmVjdG9yeVNlYXJjaEJveC50c3giXSwibmFtZXMiOlsiRGlyZWN0b3J5U2VhcmNoQm94IiwiUmVhY3QiLCJDb21wb25lbnQiLCJjb25zdHJ1Y3RvciIsInByb3BzIiwic2V0U3RhdGUiLCJ2YWx1ZSIsImlucHV0IiwiY3VycmVudCIsImZvY3VzIiwib25DbGVhciIsImV2IiwidGFyZ2V0Iiwib25DaGFuZ2UiLCJrZXkiLCJzaG93Sm9pbkJ1dHRvbiIsIm9uSm9pbkNsaWNrIiwic3RhdGUiLCJpbml0aWFsVGV4dCIsInJlbmRlciIsInNlYXJjaGJveENsYXNzZXMiLCJteF9EaXJlY3RvcnlTZWFyY2hCb3giLCJjbGFzc05hbWUiLCJqb2luQnV0dG9uIiwib25Kb2luQnV0dG9uQ2xpY2siLCJvbktleVVwIiwicGxhY2Vob2xkZXIiLCJvbkNsZWFyQ2xpY2siXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBZ0JBOztBQUNBOztBQUNBOztBQUNBOzs7Ozs7OztJQWlCcUJBLGtCLFdBRHBCLGdEQUFxQixtQ0FBckIsQyxnQkFBRCxNQUNxQkEsa0JBRHJCLFNBQ2dEQyxlQUFNQyxTQUR0RCxDQUNnRjtBQUc1RUMsRUFBQUEsV0FBVyxDQUFDQyxLQUFELEVBQWdCO0FBQ3ZCLFVBQU1BLEtBQU47QUFEdUIsOERBRlgsdUJBRVc7QUFBQSx3REFRSixNQUFZO0FBQy9CLFdBQUtDLFFBQUwsQ0FBYztBQUFFQyxRQUFBQSxLQUFLLEVBQUU7QUFBVCxPQUFkOztBQUVBLFVBQUksS0FBS0MsS0FBTCxDQUFXQyxPQUFmLEVBQXdCO0FBQ3BCLGFBQUtELEtBQUwsQ0FBV0MsT0FBWCxDQUFtQkMsS0FBbkI7O0FBRUEsWUFBSSxLQUFLTCxLQUFMLENBQVdNLE9BQWYsRUFBd0I7QUFDcEIsZUFBS04sS0FBTCxDQUFXTSxPQUFYO0FBQ0g7QUFDSjtBQUNKLEtBbEIwQjtBQUFBLG9EQW9CUEMsRUFBRCxJQUE2QztBQUM1RCxVQUFJLENBQUMsS0FBS0osS0FBTCxDQUFXQyxPQUFoQixFQUF5QjtBQUN6QixXQUFLSCxRQUFMLENBQWM7QUFBRUMsUUFBQUEsS0FBSyxFQUFFSyxFQUFFLENBQUNDLE1BQUgsQ0FBVU47QUFBbkIsT0FBZDs7QUFFQSxVQUFJLEtBQUtGLEtBQUwsQ0FBV1MsUUFBZixFQUF5QjtBQUNyQixhQUFLVCxLQUFMLENBQVdTLFFBQVgsQ0FBb0JGLEVBQUUsQ0FBQ0MsTUFBSCxDQUFVTixLQUE5QjtBQUNIO0FBQ0osS0EzQjBCO0FBQUEsbURBNkJSSyxFQUFELElBQW1DO0FBQ2pELFVBQUlBLEVBQUUsQ0FBQ0csR0FBSCxJQUFVLE9BQVYsSUFBcUIsS0FBS1YsS0FBTCxDQUFXVyxjQUFwQyxFQUFvRDtBQUNoRCxZQUFJLEtBQUtYLEtBQUwsQ0FBV1ksV0FBZixFQUE0QjtBQUN4QixlQUFLWixLQUFMLENBQVdZLFdBQVgsQ0FBdUIsS0FBS0MsS0FBTCxDQUFXWCxLQUFsQztBQUNIO0FBQ0o7QUFDSixLQW5DMEI7QUFBQSw2REFxQ0MsTUFBWTtBQUNwQyxVQUFJLEtBQUtGLEtBQUwsQ0FBV1ksV0FBZixFQUE0QjtBQUN4QixhQUFLWixLQUFMLENBQVdZLFdBQVgsQ0FBdUIsS0FBS0MsS0FBTCxDQUFXWCxLQUFsQztBQUNIO0FBQ0osS0F6QzBCO0FBR3ZCLFNBQUtXLEtBQUwsR0FBYTtBQUNUWCxNQUFBQSxLQUFLLEVBQUUsS0FBS0YsS0FBTCxDQUFXYyxXQUFYLElBQTBCO0FBRHhCLEtBQWI7QUFHSDs7QUFxQ01DLEVBQUFBLE1BQU0sR0FBZ0I7QUFDekIsVUFBTUMsZ0JBQWdCLEdBQUc7QUFDckJDLE1BQUFBLHFCQUFxQixFQUFFO0FBREYsS0FBekI7QUFHQUQsSUFBQUEsZ0JBQWdCLENBQUMsS0FBS2hCLEtBQUwsQ0FBV2tCLFNBQVosQ0FBaEIsR0FBeUMsSUFBekM7QUFFQSxRQUFJQyxVQUFKOztBQUNBLFFBQUksS0FBS25CLEtBQUwsQ0FBV1csY0FBZixFQUErQjtBQUMzQlEsTUFBQUEsVUFBVSxnQkFBRyw2QkFBQyx5QkFBRDtBQUFrQixRQUFBLFNBQVMsRUFBQyxrQ0FBNUI7QUFDVCxRQUFBLE9BQU8sRUFBRSxLQUFLQztBQURMLFNBRVYseUJBQUcsTUFBSCxDQUZVLENBQWI7QUFHSDs7QUFFRCx3QkFBTztBQUFLLE1BQUEsU0FBUyxFQUFHLHlCQUF3QixLQUFLcEIsS0FBTCxDQUFXa0IsU0FBVTtBQUE5RCxvQkFDSDtBQUNJLE1BQUEsSUFBSSxFQUFDLE1BRFQ7QUFFSSxNQUFBLElBQUksRUFBQyxXQUZUO0FBR0ksTUFBQSxLQUFLLEVBQUUsS0FBS0wsS0FBTCxDQUFXWCxLQUh0QjtBQUlJLE1BQUEsU0FBUyxFQUFDLHVDQUpkO0FBS0ksTUFBQSxHQUFHLEVBQUUsS0FBS0MsS0FMZDtBQU1JLE1BQUEsUUFBUSxFQUFFLEtBQUtNLFFBTm5CO0FBT0ksTUFBQSxPQUFPLEVBQUUsS0FBS1ksT0FQbEI7QUFRSSxNQUFBLFdBQVcsRUFBRSxLQUFLckIsS0FBTCxDQUFXc0IsV0FSNUI7QUFTSSxNQUFBLFNBQVM7QUFUYixNQURHLEVBWURILFVBWkMsZUFhSCw2QkFBQyx5QkFBRDtBQUFrQixNQUFBLFNBQVMsRUFBQyw2QkFBNUI7QUFBMEQsTUFBQSxPQUFPLEVBQUUsS0FBS0k7QUFBeEUsTUFiRyxDQUFQO0FBZUg7O0FBMUUyRSxDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbkNvcHlyaWdodCAyMDE2IE9wZW5NYXJrZXQgTHRkXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuaW1wb3J0IFJlYWN0LCB7IENoYW5nZUV2ZW50LCBjcmVhdGVSZWYgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBfdCB9IGZyb20gJy4uLy4uLy4uL2xhbmd1YWdlSGFuZGxlcic7XG5pbXBvcnQgeyByZXBsYWNlYWJsZUNvbXBvbmVudCB9IGZyb20gXCIuLi8uLi8uLi91dGlscy9yZXBsYWNlYWJsZUNvbXBvbmVudFwiO1xuaW1wb3J0IEFjY2Vzc2libGVCdXR0b24gZnJvbSBcIi4vQWNjZXNzaWJsZUJ1dHRvblwiO1xuXG5pbnRlcmZhY2UgSVByb3BzIHtcbiAgICBjbGFzc05hbWU/OiBzdHJpbmc7XG4gICAgb25DaGFuZ2U/OiAodmFsdWU6IHN0cmluZykgPT4gdm9pZDtcbiAgICBvbkNsZWFyPzogKCkgPT4gdm9pZDtcbiAgICBvbkpvaW5DbGljaz86ICh2YWx1ZTogc3RyaW5nKSA9PiB2b2lkO1xuICAgIHBsYWNlaG9sZGVyPzogc3RyaW5nO1xuICAgIHNob3dKb2luQnV0dG9uPzogYm9vbGVhbjtcbiAgICBpbml0aWFsVGV4dD86IHN0cmluZztcbn1cblxuaW50ZXJmYWNlIElTdGF0ZSB7XG4gICAgdmFsdWU6IHN0cmluZztcbn1cblxuQHJlcGxhY2VhYmxlQ29tcG9uZW50KFwidmlld3MuZWxlbWVudHMuRGlyZWN0b3J5U2VhcmNoQm94XCIpXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEaXJlY3RvcnlTZWFyY2hCb3ggZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8SVByb3BzLCBJU3RhdGU+IHtcbiAgICBwcml2YXRlIGlucHV0ID0gY3JlYXRlUmVmPEhUTUxJbnB1dEVsZW1lbnQ+KCk7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm9wczogSVByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcblxuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgdmFsdWU6IHRoaXMucHJvcHMuaW5pdGlhbFRleHQgfHwgJycsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvbkNsZWFyQ2xpY2sgPSAoKTogdm9pZCA9PiB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyB2YWx1ZTogJycgfSk7XG5cbiAgICAgICAgaWYgKHRoaXMuaW5wdXQuY3VycmVudCkge1xuICAgICAgICAgICAgdGhpcy5pbnB1dC5jdXJyZW50LmZvY3VzKCk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLm9uQ2xlYXIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnByb3BzLm9uQ2xlYXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBwcml2YXRlIG9uQ2hhbmdlID0gKGV2OiBDaGFuZ2VFdmVudDxIVE1MSW5wdXRFbGVtZW50Pik6IHZvaWQgPT4ge1xuICAgICAgICBpZiAoIXRoaXMuaW5wdXQuY3VycmVudCkgcmV0dXJuO1xuICAgICAgICB0aGlzLnNldFN0YXRlKHsgdmFsdWU6IGV2LnRhcmdldC52YWx1ZSB9KTtcblxuICAgICAgICBpZiAodGhpcy5wcm9wcy5vbkNoYW5nZSkge1xuICAgICAgICAgICAgdGhpcy5wcm9wcy5vbkNoYW5nZShldi50YXJnZXQudmFsdWUpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHByaXZhdGUgb25LZXlVcCA9IChldjogUmVhY3QuS2V5Ym9hcmRFdmVudCk6IHZvaWQgPT4ge1xuICAgICAgICBpZiAoZXYua2V5ID09ICdFbnRlcicgJiYgdGhpcy5wcm9wcy5zaG93Sm9pbkJ1dHRvbikge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMub25Kb2luQ2xpY2spIHtcbiAgICAgICAgICAgICAgICB0aGlzLnByb3BzLm9uSm9pbkNsaWNrKHRoaXMuc3RhdGUudmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIHByaXZhdGUgb25Kb2luQnV0dG9uQ2xpY2sgPSAoKTogdm9pZCA9PiB7XG4gICAgICAgIGlmICh0aGlzLnByb3BzLm9uSm9pbkNsaWNrKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLm9uSm9pbkNsaWNrKHRoaXMuc3RhdGUudmFsdWUpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHB1YmxpYyByZW5kZXIoKTogSlNYLkVsZW1lbnQge1xuICAgICAgICBjb25zdCBzZWFyY2hib3hDbGFzc2VzID0ge1xuICAgICAgICAgICAgbXhfRGlyZWN0b3J5U2VhcmNoQm94OiB0cnVlLFxuICAgICAgICB9O1xuICAgICAgICBzZWFyY2hib3hDbGFzc2VzW3RoaXMucHJvcHMuY2xhc3NOYW1lXSA9IHRydWU7XG5cbiAgICAgICAgbGV0IGpvaW5CdXR0b247XG4gICAgICAgIGlmICh0aGlzLnByb3BzLnNob3dKb2luQnV0dG9uKSB7XG4gICAgICAgICAgICBqb2luQnV0dG9uID0gPEFjY2Vzc2libGVCdXR0b24gY2xhc3NOYW1lPVwibXhfRGlyZWN0b3J5U2VhcmNoQm94X2pvaW5CdXR0b25cIlxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMub25Kb2luQnV0dG9uQ2xpY2t9XG4gICAgICAgICAgICA+eyBfdChcIkpvaW5cIikgfTwvQWNjZXNzaWJsZUJ1dHRvbj47XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9e2BteF9EaXJlY3RvcnlTZWFyY2hCb3ggJHt0aGlzLnByb3BzLmNsYXNzTmFtZX0gbXhfdGV4dGlucHV0YH0+XG4gICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgICAgICAgbmFtZT1cImRpcnNlYXJjaFwiXG4gICAgICAgICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUudmFsdWV9XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwibXhfdGV4dGlucHV0X2ljb24gbXhfdGV4dGlucHV0X3NlYXJjaFwiXG4gICAgICAgICAgICAgICAgcmVmPXt0aGlzLmlucHV0fVxuICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLm9uQ2hhbmdlfVxuICAgICAgICAgICAgICAgIG9uS2V5VXA9e3RoaXMub25LZXlVcH1cbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj17dGhpcy5wcm9wcy5wbGFjZWhvbGRlcn1cbiAgICAgICAgICAgICAgICBhdXRvRm9jdXNcbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICB7IGpvaW5CdXR0b24gfVxuICAgICAgICAgICAgPEFjY2Vzc2libGVCdXR0b24gY2xhc3NOYW1lPVwibXhfRGlyZWN0b3J5U2VhcmNoQm94X2NsZWFyXCIgb25DbGljaz17dGhpcy5vbkNsZWFyQ2xpY2t9IC8+XG4gICAgICAgIDwvZGl2PjtcbiAgICB9XG59XG5cbiJdfQ==