"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _lodash = require("lodash");

var _MemberAvatar = _interopRequireDefault(require("../avatars/MemberAvatar"));

var _languageHandler = require("../../../languageHandler");

var _DMRoomMap = _interopRequireDefault(require("../../../utils/DMRoomMap"));

var _TextWithTooltip = _interopRequireDefault(require("../elements/TextWithTooltip"));

var _useRoomMembers = require("../../../hooks/useRoomMembers");

var _MatrixClientContext = _interopRequireDefault(require("../../../contexts/MatrixClientContext"));

const _excluded = ["room", "onlyKnownUsers", "numShown"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const DEFAULT_NUM_FACES = 5;

const isKnownMember = member => {
  var _DMRoomMap$shared$get;

  return !!((_DMRoomMap$shared$get = _DMRoomMap.default.shared().getDMRoomsForUserId(member.userId)) !== null && _DMRoomMap$shared$get !== void 0 && _DMRoomMap$shared$get.length);
};

const FacePile = _ref => {
  let {
    room,
    onlyKnownUsers = true,
    numShown = DEFAULT_NUM_FACES
  } = _ref,
      props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  const cli = (0, _react.useContext)(_MatrixClientContext.default);
  let members = (0, _useRoomMembers.useRoomMembers)(room); // sort users with an explicit avatar first

  const iteratees = [member => !!member.getMxcAvatarUrl()];

  if (onlyKnownUsers) {
    members = members.filter(isKnownMember);
  } else {
    // sort known users first
    iteratees.unshift(member => isKnownMember(member));
  } // exclude ourselves from the shown members list


  const shownMembers = (0, _lodash.sortBy)(members.filter(m => m.userId !== cli.getUserId()), iteratees).slice(0, numShown);
  if (shownMembers.length < 1) return null; // We reverse the order of the shown faces in CSS to simplify their visual overlap,
  // reverse members in tooltip order to make the order between the two match up.

  const commaSeparatedMembers = shownMembers.map(m => m.rawDisplayName).reverse().join(", ");
  let tooltip;

  if (props.onClick) {
    tooltip = /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_Tooltip_title"
    }, (0, _languageHandler._t)("View all %(count)s members", {
      count: members.length
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_Tooltip_sub"
    }, (0, _languageHandler._t)("Including %(commaSeparatedMembers)s", {
      commaSeparatedMembers
    })));
  } else {
    tooltip = (0, _languageHandler._t)("%(count)s members including %(commaSeparatedMembers)s", {
      count: members.length,
      commaSeparatedMembers
    });
  }

  return /*#__PURE__*/_react.default.createElement("div", (0, _extends2.default)({}, props, {
    className: "mx_FacePile"
  }), /*#__PURE__*/_react.default.createElement(_TextWithTooltip.default, {
    class: "mx_FacePile_faces",
    tooltip: tooltip,
    tooltipProps: {
      yOffset: 32
    }
  }, members.length > numShown ? /*#__PURE__*/_react.default.createElement("span", {
    className: "mx_FacePile_face mx_FacePile_more"
  }) : null, shownMembers.map(m => /*#__PURE__*/_react.default.createElement(_MemberAvatar.default, {
    key: m.userId,
    member: m,
    width: 28,
    height: 28,
    className: "mx_FacePile_face"
  }))), onlyKnownUsers && /*#__PURE__*/_react.default.createElement("span", {
    className: "mx_FacePile_summary"
  }, (0, _languageHandler._t)("%(count)s people you know have already joined", {
    count: members.length
  })));
};

var _default = FacePile;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,