"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _lodash = require("lodash");

var _MemberAvatar = _interopRequireDefault(require("../avatars/MemberAvatar"));

var _languageHandler = require("../../../languageHandler");

var _useStateToggle = require("../../../hooks/useStateToggle");

var _AccessibleButton = _interopRequireDefault(require("./AccessibleButton"));

var _Layout = require("../../../settings/enums/Layout");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
Copyright 2019, 2020 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const EventListSummary = ({
  events,
  children,
  threshold = 3,
  onToggle,
  startExpanded,
  summaryMembers = [],
  summaryText,
  layout
}) => {
  const [expanded, toggleExpanded] = (0, _useStateToggle.useStateToggle)(startExpanded); // Whenever expanded changes call onToggle

  (0, _react.useEffect)(() => {
    if (onToggle) {
      onToggle();
    }
  }, [expanded]); // eslint-disable-line react-hooks/exhaustive-deps

  const eventIds = events.map(e => e.getId()).join(','); // If we are only given few events then just pass them through

  if (events.length < threshold) {
    return /*#__PURE__*/_react.default.createElement("li", {
      className: "mx_EventListSummary",
      "data-scroll-tokens": eventIds,
      "data-expanded": true,
      "data-layout": layout
    }, children);
  }

  let body;

  if (expanded) {
    body = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_EventListSummary_line"
    }, "\xA0"), children);
  } else {
    const uniqueMembers = (0, _lodash.uniqBy)(summaryMembers, member => member.getMxcAvatarUrl());
    const avatars = uniqueMembers.map(m => /*#__PURE__*/_react.default.createElement(_MemberAvatar.default, {
      key: m.userId,
      member: m,
      width: 14,
      height: 14
    }));
    body = /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_EventTile_line"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_EventTile_info"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_EventListSummary_avatars",
      onClick: toggleExpanded
    }, avatars), /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_TextualEvent mx_EventListSummary_summary"
    }, summaryText)));
  }

  return /*#__PURE__*/_react.default.createElement("li", {
    className: "mx_EventListSummary",
    "data-scroll-tokens": eventIds,
    "data-expanded": expanded + "",
    "data-layout": layout
  }, /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
    className: "mx_EventListSummary_toggle",
    onClick: toggleExpanded,
    "aria-expanded": expanded
  }, expanded ? (0, _languageHandler._t)('collapse') : (0, _languageHandler._t)('expand')), body);
};

EventListSummary.defaultProps = {
  startExpanded: false,
  layout: _Layout.Layout.Group
};
var _default = EventListSummary;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,