"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _effects = require("../../../effects");

var _UIStore = _interopRequireWildcard(require("../../../stores/UIStore"));

var _logger = require("matrix-js-sdk/src/logger");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const EffectsOverlay = ({
  roomWidth
}) => {
  const canvasRef = (0, _react.useRef)(null);
  const effectsRef = (0, _react.useRef)(new Map());

  const lazyLoadEffectModule = async name => {
    if (!name) return null;
    let effect = effectsRef.current[name] || null;

    if (effect === null) {
      var _CHAT_EFFECTS$find;

      const options = (_CHAT_EFFECTS$find = _effects.CHAT_EFFECTS.find(e => e.command === name)) === null || _CHAT_EFFECTS$find === void 0 ? void 0 : _CHAT_EFFECTS$find.options;

      try {
        const {
          default: Effect
        } = await Promise.resolve(`../../../effects/${name}`).then(s => _interopRequireWildcard(require(s)));
        effect = new Effect(options);
        effectsRef.current[name] = effect;
      } catch (err) {
        _logger.logger.warn(`Unable to load effect module at '../../../effects/${name}.`, err);
      }
    }

    return effect;
  };

  (0, _react.useEffect)(() => {
    const resize = () => {
      var _canvasRef$current;

      if (canvasRef.current && ((_canvasRef$current = canvasRef.current) === null || _canvasRef$current === void 0 ? void 0 : _canvasRef$current.height) !== _UIStore.default.instance.windowHeight) {
        canvasRef.current.height = _UIStore.default.instance.windowHeight;
      }
    };

    const onAction = payload => {
      const actionPrefix = 'effects.';

      if (payload.action.indexOf(actionPrefix) === 0) {
        const effect = payload.action.substr(actionPrefix.length);
        lazyLoadEffectModule(effect).then(module => module === null || module === void 0 ? void 0 : module.start(canvasRef.current));
      }
    };

    const dispatcherRef = _dispatcher.default.register(onAction);

    const canvas = canvasRef.current;
    canvas.height = _UIStore.default.instance.windowHeight;

    _UIStore.default.instance.on(_UIStore.UI_EVENTS.Resize, resize);

    return () => {
      _dispatcher.default.unregister(dispatcherRef);

      _UIStore.default.instance.off(_UIStore.UI_EVENTS.Resize, resize); // eslint-disable-next-line react-hooks/exhaustive-deps


      const currentEffects = effectsRef.current; // this is not a react node ref, warning can be safely ignored

      for (const effect in currentEffects) {
        const effectModule = currentEffects[effect];

        if (effectModule && effectModule.isRunning) {
          effectModule.stop();
        }
      }
    };
  }, []);
  return /*#__PURE__*/_react.default.createElement("canvas", {
    ref: canvasRef,
    width: roomWidth,
    style: {
      display: 'block',
      zIndex: 999999,
      pointerEvents: 'none',
      position: 'fixed',
      top: 0,
      right: 0
    }
  });
};

var _default = EffectsOverlay;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,