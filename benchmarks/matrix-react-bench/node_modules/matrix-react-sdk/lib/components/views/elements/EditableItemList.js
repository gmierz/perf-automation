"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.EditableItem = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _languageHandler = require("../../../languageHandler");

var _Field = _interopRequireDefault(require("./Field"));

var _AccessibleButton = _interopRequireDefault(require("./AccessibleButton"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _dec, _class;

class EditableItem extends _react.default.Component {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "state", {
      verifyRemove: false
    });
    (0, _defineProperty2.default)(this, "onRemove", e => {
      e.stopPropagation();
      e.preventDefault();
      this.setState({
        verifyRemove: true
      });
    });
    (0, _defineProperty2.default)(this, "onDontRemove", e => {
      e.stopPropagation();
      e.preventDefault();
      this.setState({
        verifyRemove: false
      });
    });
    (0, _defineProperty2.default)(this, "onActuallyRemove", e => {
      e.stopPropagation();
      e.preventDefault();
      if (this.props.onRemove) this.props.onRemove(this.props.index);
      this.setState({
        verifyRemove: false
      });
    });
  }

  render() {
    if (this.state.verifyRemove) {
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_EditableItem"
      }, /*#__PURE__*/_react.default.createElement("span", {
        className: "mx_EditableItem_promptText"
      }, (0, _languageHandler._t)("Are you sure?")), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        onClick: this.onActuallyRemove,
        kind: "primary_sm",
        className: "mx_EditableItem_confirmBtn"
      }, (0, _languageHandler._t)("Yes")), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        onClick: this.onDontRemove,
        kind: "danger_sm",
        className: "mx_EditableItem_confirmBtn"
      }, (0, _languageHandler._t)("No")));
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_EditableItem"
    }, /*#__PURE__*/_react.default.createElement("div", {
      onClick: this.onRemove,
      className: "mx_EditableItem_delete",
      title: (0, _languageHandler._t)("Remove"),
      role: "button"
    }), /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_EditableItem_item"
    }, this.props.value));
  }

}

exports.EditableItem = EditableItem;
let EditableItemList = (_dec = (0, _replaceableComponent.replaceableComponent)("views.elements.EditableItemList"), _dec(_class = class EditableItemList extends _react.default.PureComponent {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "onItemAdded", e => {
      e.stopPropagation();
      e.preventDefault();
      if (this.props.onItemAdded) this.props.onItemAdded(this.props.newItem);
    });
    (0, _defineProperty2.default)(this, "onItemRemoved", index => {
      if (this.props.onItemRemoved) this.props.onItemRemoved(index);
    });
    (0, _defineProperty2.default)(this, "onNewItemChanged", e => {
      if (this.props.onNewItemChanged) this.props.onNewItemChanged(e.target.value);
    });
  }

  renderNewItemField() {
    return /*#__PURE__*/_react.default.createElement("form", {
      onSubmit: this.onItemAdded,
      autoComplete: "off",
      noValidate: true,
      className: "mx_EditableItemList_newItem"
    }, /*#__PURE__*/_react.default.createElement(_Field.default, {
      label: this.props.placeholder,
      type: "text",
      autoComplete: "off",
      value: this.props.newItem || "",
      onChange: this.onNewItemChanged,
      list: this.props.suggestionsListId
    }), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      onClick: this.onItemAdded,
      kind: "primary",
      type: "submit",
      disabled: !this.props.newItem
    }, (0, _languageHandler._t)("Add")));
  }

  render() {
    const editableItems = this.props.items.map((item, index) => {
      if (!this.props.canRemove) {
        return /*#__PURE__*/_react.default.createElement("li", {
          key: item
        }, item);
      }

      return /*#__PURE__*/_react.default.createElement(EditableItem, {
        key: item,
        index: index,
        value: item,
        onRemove: this.onItemRemoved
      });
    });
    const editableItemsSection = this.props.canRemove ? editableItems : /*#__PURE__*/_react.default.createElement("ul", null, editableItems);
    const label = this.props.items.length > 0 ? this.props.itemsLabel : this.props.noItemsLabel;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_EditableItemList"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_EditableItemList_label"
    }, label), editableItemsSection, this.props.canEdit ? this.renderNewItemField() : /*#__PURE__*/_react.default.createElement("div", null));
  }

}) || _class);
exports.default = EditableItemList;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,