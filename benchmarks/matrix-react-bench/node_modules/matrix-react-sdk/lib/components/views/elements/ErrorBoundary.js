"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _languageHandler = require("../../../languageHandler");

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _PlatformPeg = _interopRequireDefault(require("../../../PlatformPeg"));

var _Modal = _interopRequireDefault(require("../../../Modal"));

var _SdkConfig = _interopRequireDefault(require("../../../SdkConfig"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _BugReportDialog = _interopRequireDefault(require("../dialogs/BugReportDialog"));

var _AccessibleButton = _interopRequireDefault(require("./AccessibleButton"));

var _logger = require("matrix-js-sdk/src/logger");

var _dec, _class;

let ErrorBoundary = (
/**
 * This error boundary component can be used to wrap large content areas and
 * catch exceptions during rendering in the component tree below them.
 */
_dec = (0, _replaceableComponent.replaceableComponent)("views.elements.ErrorBoundary"), _dec(_class = class ErrorBoundary extends _react.default.PureComponent {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "onClearCacheAndReload", () => {
      if (!_PlatformPeg.default.get()) return;

      _MatrixClientPeg.MatrixClientPeg.get().stopClient();

      _MatrixClientPeg.MatrixClientPeg.get().store.deleteAllData().then(() => {
        _PlatformPeg.default.get().reload();
      });
    });
    (0, _defineProperty2.default)(this, "onBugReport", () => {
      _Modal.default.createTrackedDialog('Bug Report Dialog', '', _BugReportDialog.default, {
        label: 'react-soft-crash',
        error: this.state.error
      });
    });
    this.state = {
      error: null
    };
  }

  static getDerivedStateFromError(error) {
    // Side effects are not permitted here, so we only update the state so
    // that the next render shows an error message.
    return {
      error
    };
  }

  componentDidCatch(error, {
    componentStack
  }) {
    // Browser consoles are better at formatting output when native errors are passed
    // in their own `console.error` invocation.
    _logger.logger.error(error);

    _logger.logger.error("The above error occured while React was rendering the following components:", componentStack);
  }

  render() {
    if (this.state.error) {
      const newIssueUrl = "https://github.com/vector-im/element-web/issues/new/choose";
      let bugReportSection;

      if (_SdkConfig.default.get().bug_report_endpoint_url) {
        bugReportSection = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Please <newIssueLink>create a new issue</newIssueLink> " + "on GitHub so that we can investigate this bug.", {}, {
          newIssueLink: sub => {
            return /*#__PURE__*/_react.default.createElement("a", {
              target: "_blank",
              rel: "noreferrer noopener",
              href: newIssueUrl
            }, sub);
          }
        })), /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("If you've submitted a bug via GitHub, debug logs can help " + "us track down the problem. Debug logs contain application " + "usage data including your username, the IDs or aliases of " + "the rooms or groups you have visited, which UI elements you " + "last interacted with, and the usernames of other users. " + "They do not contain messages.")), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
          onClick: this.onBugReport,
          kind: "primary"
        }, (0, _languageHandler._t)("Submit debug logs")));
      }

      return /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_ErrorBoundary"
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_ErrorBoundary_body"
      }, /*#__PURE__*/_react.default.createElement("h1", null, (0, _languageHandler._t)("Something went wrong!")), bugReportSection, /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        onClick: this.onClearCacheAndReload,
        kind: "danger"
      }, (0, _languageHandler._t)("Clear cache and reload"))));
    }

    return this.props.children;
  }

}) || _class);
exports.default = ErrorBoundary;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL2VsZW1lbnRzL0Vycm9yQm91bmRhcnkudHN4Il0sIm5hbWVzIjpbIkVycm9yQm91bmRhcnkiLCJSZWFjdCIsIlB1cmVDb21wb25lbnQiLCJjb25zdHJ1Y3RvciIsInByb3BzIiwiUGxhdGZvcm1QZWciLCJnZXQiLCJNYXRyaXhDbGllbnRQZWciLCJzdG9wQ2xpZW50Iiwic3RvcmUiLCJkZWxldGVBbGxEYXRhIiwidGhlbiIsInJlbG9hZCIsIk1vZGFsIiwiY3JlYXRlVHJhY2tlZERpYWxvZyIsIkJ1Z1JlcG9ydERpYWxvZyIsImxhYmVsIiwiZXJyb3IiLCJzdGF0ZSIsImdldERlcml2ZWRTdGF0ZUZyb21FcnJvciIsImNvbXBvbmVudERpZENhdGNoIiwiY29tcG9uZW50U3RhY2siLCJsb2dnZXIiLCJyZW5kZXIiLCJuZXdJc3N1ZVVybCIsImJ1Z1JlcG9ydFNlY3Rpb24iLCJTZGtDb25maWciLCJidWdfcmVwb3J0X2VuZHBvaW50X3VybCIsIm5ld0lzc3VlTGluayIsInN1YiIsIm9uQnVnUmVwb3J0Iiwib25DbGVhckNhY2hlQW5kUmVsb2FkIiwiY2hpbGRyZW4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBZ0JBOztBQUVBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUVBOzs7O0lBV3FCQSxhO0FBTHJCO0FBQ0E7QUFDQTtBQUNBO09BQ0MsZ0RBQXFCLDhCQUFyQixDLGdCQUFELE1BQ3FCQSxhQURyQixTQUMyQ0MsZUFBTUMsYUFEakQsQ0FDMkU7QUFDdkVDLEVBQUFBLFdBQVcsQ0FBQ0MsS0FBRCxFQUFRO0FBQ2YsVUFBTUEsS0FBTjtBQURlLGlFQXdCYSxNQUFZO0FBQ3hDLFVBQUksQ0FBQ0MscUJBQVlDLEdBQVosRUFBTCxFQUF3Qjs7QUFFeEJDLHVDQUFnQkQsR0FBaEIsR0FBc0JFLFVBQXRCOztBQUNBRCx1Q0FBZ0JELEdBQWhCLEdBQXNCRyxLQUF0QixDQUE0QkMsYUFBNUIsR0FBNENDLElBQTVDLENBQWlELE1BQU07QUFDbkROLDZCQUFZQyxHQUFaLEdBQWtCTSxNQUFsQjtBQUNILE9BRkQ7QUFHSCxLQS9Ca0I7QUFBQSx1REFpQ0csTUFBWTtBQUM5QkMscUJBQU1DLG1CQUFOLENBQTBCLG1CQUExQixFQUErQyxFQUEvQyxFQUFtREMsd0JBQW5ELEVBQW9FO0FBQ2hFQyxRQUFBQSxLQUFLLEVBQUUsa0JBRHlEO0FBRWhFQyxRQUFBQSxLQUFLLEVBQUUsS0FBS0MsS0FBTCxDQUFXRDtBQUY4QyxPQUFwRTtBQUlILEtBdENrQjtBQUdmLFNBQUtDLEtBQUwsR0FBYTtBQUNURCxNQUFBQSxLQUFLLEVBQUU7QUFERSxLQUFiO0FBR0g7O0FBRThCLFNBQXhCRSx3QkFBd0IsQ0FBQ0YsS0FBRCxFQUFnQztBQUMzRDtBQUNBO0FBQ0EsV0FBTztBQUFFQSxNQUFBQTtBQUFGLEtBQVA7QUFDSDs7QUFFREcsRUFBQUEsaUJBQWlCLENBQUNILEtBQUQsRUFBZTtBQUFFSSxJQUFBQTtBQUFGLEdBQWYsRUFBb0Q7QUFDakU7QUFDQTtBQUNBQyxtQkFBT0wsS0FBUCxDQUFhQSxLQUFiOztBQUNBSyxtQkFBT0wsS0FBUCxDQUNJLDZFQURKLEVBRUlJLGNBRko7QUFJSDs7QUFrQkRFLEVBQUFBLE1BQU0sR0FBRztBQUNMLFFBQUksS0FBS0wsS0FBTCxDQUFXRCxLQUFmLEVBQXNCO0FBQ2xCLFlBQU1PLFdBQVcsR0FBRyw0REFBcEI7QUFFQSxVQUFJQyxnQkFBSjs7QUFDQSxVQUFJQyxtQkFBVXBCLEdBQVYsR0FBZ0JxQix1QkFBcEIsRUFBNkM7QUFDekNGLFFBQUFBLGdCQUFnQixnQkFBRyw2QkFBQyxjQUFELENBQU8sUUFBUCxxQkFDZix3Q0FBSyx5QkFDRCw0REFDQSxnREFGQyxFQUVpRCxFQUZqRCxFQUVxRDtBQUNsREcsVUFBQUEsWUFBWSxFQUFHQyxHQUFELElBQVM7QUFDbkIsZ0NBQU87QUFBRyxjQUFBLE1BQU0sRUFBQyxRQUFWO0FBQW1CLGNBQUEsR0FBRyxFQUFDLHFCQUF2QjtBQUE2QyxjQUFBLElBQUksRUFBRUw7QUFBbkQsZUFBa0VLLEdBQWxFLENBQVA7QUFDSDtBQUhpRCxTQUZyRCxDQUFMLENBRGUsZUFTZix3Q0FBSyx5QkFDRCwrREFDQSw0REFEQSxHQUVBLDREQUZBLEdBR0EsOERBSEEsR0FJQSwwREFKQSxHQUtBLCtCQU5DLENBQUwsQ0FUZSxlQWlCZiw2QkFBQyx5QkFBRDtBQUFrQixVQUFBLE9BQU8sRUFBRSxLQUFLQyxXQUFoQztBQUE2QyxVQUFBLElBQUksRUFBQztBQUFsRCxXQUNNLHlCQUFHLG1CQUFILENBRE4sQ0FqQmUsQ0FBbkI7QUFxQkg7O0FBRUQsMEJBQU87QUFBSyxRQUFBLFNBQVMsRUFBQztBQUFmLHNCQUNIO0FBQUssUUFBQSxTQUFTLEVBQUM7QUFBZixzQkFDSSx5Q0FBTSx5QkFBRyx1QkFBSCxDQUFOLENBREosRUFFTUwsZ0JBRk4sZUFHSSw2QkFBQyx5QkFBRDtBQUFrQixRQUFBLE9BQU8sRUFBRSxLQUFLTSxxQkFBaEM7QUFBdUQsUUFBQSxJQUFJLEVBQUM7QUFBNUQsU0FDTSx5QkFBRyx3QkFBSCxDQUROLENBSEosQ0FERyxDQUFQO0FBU0g7O0FBRUQsV0FBTyxLQUFLM0IsS0FBTCxDQUFXNEIsUUFBbEI7QUFDSDs7QUFsRnNFLEMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuQ29weXJpZ2h0IDIwMTkgLSAyMDIxIFRoZSBNYXRyaXgub3JnIEZvdW5kYXRpb24gQy5JLkMuXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuaW1wb3J0IFJlYWN0LCB7IEVycm9ySW5mbyB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgX3QgfSBmcm9tICcuLi8uLi8uLi9sYW5ndWFnZUhhbmRsZXInO1xuaW1wb3J0IHsgTWF0cml4Q2xpZW50UGVnIH0gZnJvbSAnLi4vLi4vLi4vTWF0cml4Q2xpZW50UGVnJztcbmltcG9ydCBQbGF0Zm9ybVBlZyBmcm9tICcuLi8uLi8uLi9QbGF0Zm9ybVBlZyc7XG5pbXBvcnQgTW9kYWwgZnJvbSAnLi4vLi4vLi4vTW9kYWwnO1xuaW1wb3J0IFNka0NvbmZpZyBmcm9tIFwiLi4vLi4vLi4vU2RrQ29uZmlnXCI7XG5pbXBvcnQgeyByZXBsYWNlYWJsZUNvbXBvbmVudCB9IGZyb20gXCIuLi8uLi8uLi91dGlscy9yZXBsYWNlYWJsZUNvbXBvbmVudFwiO1xuaW1wb3J0IEJ1Z1JlcG9ydERpYWxvZyBmcm9tICcuLi9kaWFsb2dzL0J1Z1JlcG9ydERpYWxvZyc7XG5pbXBvcnQgQWNjZXNzaWJsZUJ1dHRvbiBmcm9tICcuL0FjY2Vzc2libGVCdXR0b24nO1xuXG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tIFwibWF0cml4LWpzLXNkay9zcmMvbG9nZ2VyXCI7XG5cbmludGVyZmFjZSBJU3RhdGUge1xuICAgIGVycm9yOiBFcnJvcjtcbn1cblxuLyoqXG4gKiBUaGlzIGVycm9yIGJvdW5kYXJ5IGNvbXBvbmVudCBjYW4gYmUgdXNlZCB0byB3cmFwIGxhcmdlIGNvbnRlbnQgYXJlYXMgYW5kXG4gKiBjYXRjaCBleGNlcHRpb25zIGR1cmluZyByZW5kZXJpbmcgaW4gdGhlIGNvbXBvbmVudCB0cmVlIGJlbG93IHRoZW0uXG4gKi9cbkByZXBsYWNlYWJsZUNvbXBvbmVudChcInZpZXdzLmVsZW1lbnRzLkVycm9yQm91bmRhcnlcIilcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVycm9yQm91bmRhcnkgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50PHt9LCBJU3RhdGU+IHtcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG5cbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIGVycm9yOiBudWxsLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHN0YXRpYyBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IoZXJyb3I6IEVycm9yKTogUGFydGlhbDxJU3RhdGU+IHtcbiAgICAgICAgLy8gU2lkZSBlZmZlY3RzIGFyZSBub3QgcGVybWl0dGVkIGhlcmUsIHNvIHdlIG9ubHkgdXBkYXRlIHRoZSBzdGF0ZSBzb1xuICAgICAgICAvLyB0aGF0IHRoZSBuZXh0IHJlbmRlciBzaG93cyBhbiBlcnJvciBtZXNzYWdlLlxuICAgICAgICByZXR1cm4geyBlcnJvciB9O1xuICAgIH1cblxuICAgIGNvbXBvbmVudERpZENhdGNoKGVycm9yOiBFcnJvciwgeyBjb21wb25lbnRTdGFjayB9OiBFcnJvckluZm8pOiB2b2lkIHtcbiAgICAgICAgLy8gQnJvd3NlciBjb25zb2xlcyBhcmUgYmV0dGVyIGF0IGZvcm1hdHRpbmcgb3V0cHV0IHdoZW4gbmF0aXZlIGVycm9ycyBhcmUgcGFzc2VkXG4gICAgICAgIC8vIGluIHRoZWlyIG93biBgY29uc29sZS5lcnJvcmAgaW52b2NhdGlvbi5cbiAgICAgICAgbG9nZ2VyLmVycm9yKGVycm9yKTtcbiAgICAgICAgbG9nZ2VyLmVycm9yKFxuICAgICAgICAgICAgXCJUaGUgYWJvdmUgZXJyb3Igb2NjdXJlZCB3aGlsZSBSZWFjdCB3YXMgcmVuZGVyaW5nIHRoZSBmb2xsb3dpbmcgY29tcG9uZW50czpcIixcbiAgICAgICAgICAgIGNvbXBvbmVudFN0YWNrLFxuICAgICAgICApO1xuICAgIH1cblxuICAgIHByaXZhdGUgb25DbGVhckNhY2hlQW5kUmVsb2FkID0gKCk6IHZvaWQgPT4ge1xuICAgICAgICBpZiAoIVBsYXRmb3JtUGVnLmdldCgpKSByZXR1cm47XG5cbiAgICAgICAgTWF0cml4Q2xpZW50UGVnLmdldCgpLnN0b3BDbGllbnQoKTtcbiAgICAgICAgTWF0cml4Q2xpZW50UGVnLmdldCgpLnN0b3JlLmRlbGV0ZUFsbERhdGEoKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIFBsYXRmb3JtUGVnLmdldCgpLnJlbG9hZCgpO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgcHJpdmF0ZSBvbkJ1Z1JlcG9ydCA9ICgpOiB2b2lkID0+IHtcbiAgICAgICAgTW9kYWwuY3JlYXRlVHJhY2tlZERpYWxvZygnQnVnIFJlcG9ydCBEaWFsb2cnLCAnJywgQnVnUmVwb3J0RGlhbG9nLCB7XG4gICAgICAgICAgICBsYWJlbDogJ3JlYWN0LXNvZnQtY3Jhc2gnLFxuICAgICAgICAgICAgZXJyb3I6IHRoaXMuc3RhdGUuZXJyb3IsXG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmVycm9yKSB7XG4gICAgICAgICAgICBjb25zdCBuZXdJc3N1ZVVybCA9IFwiaHR0cHM6Ly9naXRodWIuY29tL3ZlY3Rvci1pbS9lbGVtZW50LXdlYi9pc3N1ZXMvbmV3L2Nob29zZVwiO1xuXG4gICAgICAgICAgICBsZXQgYnVnUmVwb3J0U2VjdGlvbjtcbiAgICAgICAgICAgIGlmIChTZGtDb25maWcuZ2V0KCkuYnVnX3JlcG9ydF9lbmRwb2ludF91cmwpIHtcbiAgICAgICAgICAgICAgICBidWdSZXBvcnRTZWN0aW9uID0gPFJlYWN0LkZyYWdtZW50PlxuICAgICAgICAgICAgICAgICAgICA8cD57IF90KFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJQbGVhc2UgPG5ld0lzc3VlTGluaz5jcmVhdGUgYSBuZXcgaXNzdWU8L25ld0lzc3VlTGluaz4gXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJvbiBHaXRIdWIgc28gdGhhdCB3ZSBjYW4gaW52ZXN0aWdhdGUgdGhpcyBidWcuXCIsIHt9LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3SXNzdWVMaW5rOiAoc3ViKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiA8YSB0YXJnZXQ9XCJfYmxhbmtcIiByZWw9XCJub3JlZmVycmVyIG5vb3BlbmVyXCIgaHJlZj17bmV3SXNzdWVVcmx9Pnsgc3ViIH08L2E+O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICApIH08L3A+XG4gICAgICAgICAgICAgICAgICAgIDxwPnsgX3QoXG4gICAgICAgICAgICAgICAgICAgICAgICBcIklmIHlvdSd2ZSBzdWJtaXR0ZWQgYSBidWcgdmlhIEdpdEh1YiwgZGVidWcgbG9ncyBjYW4gaGVscCBcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICBcInVzIHRyYWNrIGRvd24gdGhlIHByb2JsZW0uIERlYnVnIGxvZ3MgY29udGFpbiBhcHBsaWNhdGlvbiBcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICBcInVzYWdlIGRhdGEgaW5jbHVkaW5nIHlvdXIgdXNlcm5hbWUsIHRoZSBJRHMgb3IgYWxpYXNlcyBvZiBcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICBcInRoZSByb29tcyBvciBncm91cHMgeW91IGhhdmUgdmlzaXRlZCwgd2hpY2ggVUkgZWxlbWVudHMgeW91IFwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwibGFzdCBpbnRlcmFjdGVkIHdpdGgsIGFuZCB0aGUgdXNlcm5hbWVzIG9mIG90aGVyIHVzZXJzLiBcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICBcIlRoZXkgZG8gbm90IGNvbnRhaW4gbWVzc2FnZXMuXCIsXG4gICAgICAgICAgICAgICAgICAgICkgfTwvcD5cbiAgICAgICAgICAgICAgICAgICAgPEFjY2Vzc2libGVCdXR0b24gb25DbGljaz17dGhpcy5vbkJ1Z1JlcG9ydH0ga2luZD0ncHJpbWFyeSc+XG4gICAgICAgICAgICAgICAgICAgICAgICB7IF90KFwiU3VibWl0IGRlYnVnIGxvZ3NcIikgfVxuICAgICAgICAgICAgICAgICAgICA8L0FjY2Vzc2libGVCdXR0b24+XG4gICAgICAgICAgICAgICAgPC9SZWFjdC5GcmFnbWVudD47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cIm14X0Vycm9yQm91bmRhcnlcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm14X0Vycm9yQm91bmRhcnlfYm9keVwiPlxuICAgICAgICAgICAgICAgICAgICA8aDE+eyBfdChcIlNvbWV0aGluZyB3ZW50IHdyb25nIVwiKSB9PC9oMT5cbiAgICAgICAgICAgICAgICAgICAgeyBidWdSZXBvcnRTZWN0aW9uIH1cbiAgICAgICAgICAgICAgICAgICAgPEFjY2Vzc2libGVCdXR0b24gb25DbGljaz17dGhpcy5vbkNsZWFyQ2FjaGVBbmRSZWxvYWR9IGtpbmQ9J2Rhbmdlcic+XG4gICAgICAgICAgICAgICAgICAgICAgICB7IF90KFwiQ2xlYXIgY2FjaGUgYW5kIHJlbG9hZFwiKSB9XG4gICAgICAgICAgICAgICAgICAgIDwvQWNjZXNzaWJsZUJ1dHRvbj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLmNoaWxkcmVuO1xuICAgIH1cbn1cbiJdfQ==