"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getPersistKey = exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _lodash = require("lodash");

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _MatrixClientContext = _interopRequireDefault(require("../../../contexts/MatrixClientContext"));

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _utils = require("matrix-js-sdk/src/utils");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _dec, _class;

const getPersistKey = appId => 'widget_' + appId; // Shamelessly ripped off Modal.js.  There's probably a better way
// of doing reusable widgets like dialog boxes & menus where we go and
// pass in a custom control as the actual body.


exports.getPersistKey = getPersistKey;

function getContainer(containerId) {
  return document.getElementById(containerId);
}

function getOrCreateContainer(containerId) {
  let container = getContainer(containerId);

  if (!container) {
    container = document.createElement("div");
    container.id = containerId;
    document.body.appendChild(container);
  }

  return container;
}

let PersistedElement = (
/**
 * Class of component that renders its children in a separate ReactDOM virtual tree
 * in a container element appended to document.body.
 *
 * This prevents the children from being unmounted when the parent of PersistedElement
 * unmounts, allowing them to persist.
 *
 * When PE is unmounted, it hides the children using CSS. When mounted or updated, the
 * children are made visible and are positioned into a div that is given the same
 * bounding rect as the parent of PE.
 */
_dec = (0, _replaceableComponent.replaceableComponent)("views.elements.PersistedElement"), _dec(_class = class PersistedElement extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "resizeObserver", void 0);
    (0, _defineProperty2.default)(this, "dispatcherRef", void 0);
    (0, _defineProperty2.default)(this, "childContainer", void 0);
    (0, _defineProperty2.default)(this, "child", void 0);
    (0, _defineProperty2.default)(this, "collectChildContainer", ref => {
      if (this.childContainer) {
        this.resizeObserver.unobserve(this.childContainer);
      }

      this.childContainer = ref;

      if (ref) {
        this.resizeObserver.observe(ref);
      }
    });
    (0, _defineProperty2.default)(this, "collectChild", ref => {
      this.child = ref;
      this.updateChild();
    });
    (0, _defineProperty2.default)(this, "onAction", payload => {
      if (payload.action === 'timeline_resize') {
        this.repositionChild();
      } else if (payload.action === 'logout') {
        PersistedElement.destroyElement(this.props.persistKey);
      }
    });
    (0, _defineProperty2.default)(this, "repositionChild", () => {
      this.updateChildPosition(this.child, this.childContainer);
    });
    (0, _defineProperty2.default)(this, "updateChildPosition", (0, _lodash.throttle)((child, parent) => {
      if (!child || !parent) return;
      const parentRect = parent.getBoundingClientRect();
      Object.assign(child.style, {
        zIndex: (0, _utils.isNullOrUndefined)(this.props.zIndex) ? 9 : this.props.zIndex,
        position: 'absolute',
        top: parentRect.top + 'px',
        left: parentRect.left + 'px',
        width: parentRect.width + 'px',
        height: parentRect.height + 'px'
      });
    }, 100, {
      trailing: true,
      leading: true
    }));
    this.resizeObserver = new ResizeObserver(this.repositionChild); // Annoyingly, a resize observer is insufficient, since we also care
    // about when the element moves on the screen without changing its
    // dimensions. Doesn't look like there's a ResizeObserver equivalent
    // for this, so we bodge it by listening for document resize and
    // the timeline_resize action.

    window.addEventListener('resize', this.repositionChild);
    this.dispatcherRef = _dispatcher.default.register(this.onAction);
  }
  /**
   * Removes the DOM elements created when a PersistedElement with the given
   * persistKey was mounted. The DOM elements will be re-added if another
   * PersistedElement is mounted in the future.
   *
   * @param {string} persistKey Key used to uniquely identify this PersistedElement
   */


  static destroyElement(persistKey) {
    const container = getContainer('mx_persistedElement_' + persistKey);

    if (container) {
      container.remove();
    }
  }

  static isMounted(persistKey) {
    return Boolean(getContainer('mx_persistedElement_' + persistKey));
  }

  componentDidMount() {
    this.updateChild();
    this.renderApp();
  }

  componentDidUpdate() {
    this.updateChild();
    this.renderApp();
  }

  componentWillUnmount() {
    this.updateChildVisibility(this.child, false);
    this.resizeObserver.disconnect();
    window.removeEventListener('resize', this.repositionChild);

    _dispatcher.default.unregister(this.dispatcherRef);
  }

  updateChild() {
    this.updateChildPosition(this.child, this.childContainer);
    this.updateChildVisibility(this.child, true);
  }

  renderApp() {
    const content = /*#__PURE__*/_react.default.createElement(_MatrixClientContext.default.Provider, {
      value: _MatrixClientPeg.MatrixClientPeg.get()
    }, /*#__PURE__*/_react.default.createElement("div", {
      ref: this.collectChild,
      style: this.props.style
    }, this.props.children));

    _reactDom.default.render(content, getOrCreateContainer('mx_persistedElement_' + this.props.persistKey));
  }

  updateChildVisibility(child, visible) {
    if (!child) return;
    child.style.display = visible ? 'block' : 'none';
  }

  render() {
    return /*#__PURE__*/_react.default.createElement("div", {
      ref: this.collectChildContainer
    });
  }

}) || _class);
exports.default = PersistedElement;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,