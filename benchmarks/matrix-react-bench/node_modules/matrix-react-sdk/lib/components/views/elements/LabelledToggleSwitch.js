"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _ToggleSwitch = _interopRequireDefault(require("./ToggleSwitch"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _dec, _class;

let LabelledToggleSwitch = (_dec = (0, _replaceableComponent.replaceableComponent)("views.elements.LabelledToggleSwitch"), _dec(_class = class LabelledToggleSwitch extends _react.default.PureComponent {
  render() {
    // This is a minimal version of a SettingsFlag
    let firstPart = /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_SettingsFlag_label"
    }, this.props.label);

    let secondPart = /*#__PURE__*/_react.default.createElement(_ToggleSwitch.default, {
      checked: this.props.value,
      disabled: this.props.disabled,
      onChange: this.props.onChange,
      "aria-label": this.props.label
    });

    if (this.props.toggleInFront) {
      const temp = firstPart;
      firstPart = secondPart;
      secondPart = temp;
    }

    const classes = `mx_SettingsFlag ${this.props.className || ""}`;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: classes
    }, firstPart, secondPart);
  }

}) || _class);
exports.default = LabelledToggleSwitch;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL2VsZW1lbnRzL0xhYmVsbGVkVG9nZ2xlU3dpdGNoLnRzeCJdLCJuYW1lcyI6WyJMYWJlbGxlZFRvZ2dsZVN3aXRjaCIsIlJlYWN0IiwiUHVyZUNvbXBvbmVudCIsInJlbmRlciIsImZpcnN0UGFydCIsInByb3BzIiwibGFiZWwiLCJzZWNvbmRQYXJ0IiwidmFsdWUiLCJkaXNhYmxlZCIsIm9uQ2hhbmdlIiwidG9nZ2xlSW5Gcm9udCIsInRlbXAiLCJjbGFzc2VzIiwiY2xhc3NOYW1lIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFnQkE7O0FBRUE7O0FBQ0E7Ozs7SUFtQnFCQSxvQixXQURwQixnREFBcUIscUNBQXJCLEMsZ0JBQUQsTUFDcUJBLG9CQURyQixTQUNrREMsZUFBTUMsYUFEeEQsQ0FDOEU7QUFDMUVDLEVBQUFBLE1BQU0sR0FBRztBQUNMO0FBRUEsUUFBSUMsU0FBUyxnQkFBRztBQUFNLE1BQUEsU0FBUyxFQUFDO0FBQWhCLE9BQTBDLEtBQUtDLEtBQUwsQ0FBV0MsS0FBckQsQ0FBaEI7O0FBQ0EsUUFBSUMsVUFBVSxnQkFBRyw2QkFBQyxxQkFBRDtBQUNiLE1BQUEsT0FBTyxFQUFFLEtBQUtGLEtBQUwsQ0FBV0csS0FEUDtBQUViLE1BQUEsUUFBUSxFQUFFLEtBQUtILEtBQUwsQ0FBV0ksUUFGUjtBQUdiLE1BQUEsUUFBUSxFQUFFLEtBQUtKLEtBQUwsQ0FBV0ssUUFIUjtBQUliLG9CQUFZLEtBQUtMLEtBQUwsQ0FBV0M7QUFKVixNQUFqQjs7QUFPQSxRQUFJLEtBQUtELEtBQUwsQ0FBV00sYUFBZixFQUE4QjtBQUMxQixZQUFNQyxJQUFJLEdBQUdSLFNBQWI7QUFDQUEsTUFBQUEsU0FBUyxHQUFHRyxVQUFaO0FBQ0FBLE1BQUFBLFVBQVUsR0FBR0ssSUFBYjtBQUNIOztBQUVELFVBQU1DLE9BQU8sR0FBSSxtQkFBa0IsS0FBS1IsS0FBTCxDQUFXUyxTQUFYLElBQXdCLEVBQUcsRUFBOUQ7QUFDQSx3QkFDSTtBQUFLLE1BQUEsU0FBUyxFQUFFRDtBQUFoQixPQUNNVCxTQUROLEVBRU1HLFVBRk4sQ0FESjtBQU1IOztBQXpCeUUsQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5Db3B5cmlnaHQgMjAxOSAtIDIwMjEgVGhlIE1hdHJpeC5vcmcgRm91bmRhdGlvbiBDLkkuQy5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5cbmltcG9ydCBUb2dnbGVTd2l0Y2ggZnJvbSBcIi4vVG9nZ2xlU3dpdGNoXCI7XG5pbXBvcnQgeyByZXBsYWNlYWJsZUNvbXBvbmVudCB9IGZyb20gXCIuLi8uLi8uLi91dGlscy9yZXBsYWNlYWJsZUNvbXBvbmVudFwiO1xuXG5pbnRlcmZhY2UgSVByb3BzIHtcbiAgICAvLyBUaGUgdmFsdWUgZm9yIHRoZSB0b2dnbGUgc3dpdGNoXG4gICAgdmFsdWU6IGJvb2xlYW47XG4gICAgLy8gVGhlIHRyYW5zbGF0ZWQgbGFiZWwgZm9yIHRoZSBzd2l0Y2hcbiAgICBsYWJlbDogc3RyaW5nO1xuICAgIC8vIFdoZXRoZXIgb3Igbm90IHRvIGRpc2FibGUgdGhlIHRvZ2dsZSBzd2l0Y2hcbiAgICBkaXNhYmxlZD86IGJvb2xlYW47XG4gICAgLy8gVHJ1ZSB0byBwdXQgdGhlIHRvZ2dsZSBpbiBmcm9udCBvZiB0aGUgbGFiZWxcbiAgICAvLyBEZWZhdWx0IGZhbHNlLlxuICAgIHRvZ2dsZUluRnJvbnQ/OiBib29sZWFuO1xuICAgIC8vIEFkZGl0aW9uYWwgY2xhc3MgbmFtZXMgdG8gYXBwZW5kIHRvIHRoZSBzd2l0Y2guIE9wdGlvbmFsLlxuICAgIGNsYXNzTmFtZT86IHN0cmluZztcbiAgICAvLyBUaGUgZnVuY3Rpb24gdG8gY2FsbCB3aGVuIHRoZSB2YWx1ZSBjaGFuZ2VzXG4gICAgb25DaGFuZ2UoY2hlY2tlZDogYm9vbGVhbik6IHZvaWQ7XG59XG5cbkByZXBsYWNlYWJsZUNvbXBvbmVudChcInZpZXdzLmVsZW1lbnRzLkxhYmVsbGVkVG9nZ2xlU3dpdGNoXCIpXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMYWJlbGxlZFRvZ2dsZVN3aXRjaCBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQ8SVByb3BzPiB7XG4gICAgcmVuZGVyKCkge1xuICAgICAgICAvLyBUaGlzIGlzIGEgbWluaW1hbCB2ZXJzaW9uIG9mIGEgU2V0dGluZ3NGbGFnXG5cbiAgICAgICAgbGV0IGZpcnN0UGFydCA9IDxzcGFuIGNsYXNzTmFtZT1cIm14X1NldHRpbmdzRmxhZ19sYWJlbFwiPnsgdGhpcy5wcm9wcy5sYWJlbCB9PC9zcGFuPjtcbiAgICAgICAgbGV0IHNlY29uZFBhcnQgPSA8VG9nZ2xlU3dpdGNoXG4gICAgICAgICAgICBjaGVja2VkPXt0aGlzLnByb3BzLnZhbHVlfVxuICAgICAgICAgICAgZGlzYWJsZWQ9e3RoaXMucHJvcHMuZGlzYWJsZWR9XG4gICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5wcm9wcy5vbkNoYW5nZX1cbiAgICAgICAgICAgIGFyaWEtbGFiZWw9e3RoaXMucHJvcHMubGFiZWx9XG4gICAgICAgIC8+O1xuXG4gICAgICAgIGlmICh0aGlzLnByb3BzLnRvZ2dsZUluRnJvbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRlbXAgPSBmaXJzdFBhcnQ7XG4gICAgICAgICAgICBmaXJzdFBhcnQgPSBzZWNvbmRQYXJ0O1xuICAgICAgICAgICAgc2Vjb25kUGFydCA9IHRlbXA7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBjbGFzc2VzID0gYG14X1NldHRpbmdzRmxhZyAke3RoaXMucHJvcHMuY2xhc3NOYW1lIHx8IFwiXCJ9YDtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc2VzfT5cbiAgICAgICAgICAgICAgICB7IGZpcnN0UGFydCB9XG4gICAgICAgICAgICAgICAgeyBzZWNvbmRQYXJ0IH1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICApO1xuICAgIH1cbn1cbiJdfQ==