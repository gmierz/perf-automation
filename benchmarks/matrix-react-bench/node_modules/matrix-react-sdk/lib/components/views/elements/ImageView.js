"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _languageHandler = require("../../../languageHandler");

var _AccessibleTooltipButton = _interopRequireDefault(require("./AccessibleTooltipButton"));

var _Keyboard = require("../../../Keyboard");

var _reactFocusLock = _interopRequireDefault(require("react-focus-lock"));

var _MemberAvatar = _interopRequireDefault(require("../avatars/MemberAvatar"));

var _ContextMenuTooltipButton = require("../../../accessibility/context_menu/ContextMenuTooltipButton");

var _MessageContextMenu = _interopRequireDefault(require("../context_menus/MessageContextMenu"));

var _ContextMenu = require("../../structures/ContextMenu");

var _MessageTimestamp = _interopRequireDefault(require("../messages/MessageTimestamp"));

var _SettingsStore = _interopRequireDefault(require("../../../settings/SettingsStore"));

var _DateUtils = require("../../../DateUtils");

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _actions = require("../../../dispatcher/actions");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _Mouse = require("../../../utils/Mouse");

var _UIStore = _interopRequireDefault(require("../../../stores/UIStore"));

var _dec, _class;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// Max scale to keep gaps around the image
const MAX_SCALE = 0.95; // This is used for the buttons

const ZOOM_STEP = 0.10; // This is used for mouse wheel events

const ZOOM_COEFFICIENT = 0.0025; // If we have moved only this much we can zoom

const ZOOM_DISTANCE = 10; // Height of mx_ImageView_panel

const getPanelHeight = () => {
  const value = getComputedStyle(document.documentElement).getPropertyValue("--image-view-panel-height"); // Return the value as a number without the unit

  return parseInt(value.slice(0, value.length - 2));
};

let ImageView = (_dec = (0, _replaceableComponent.replaceableComponent)("views.elements.ImageView"), _dec(_class = class ImageView extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "contextMenuButton", /*#__PURE__*/(0, _react.createRef)());
    (0, _defineProperty2.default)(this, "focusLock", /*#__PURE__*/(0, _react.createRef)());
    (0, _defineProperty2.default)(this, "imageWrapper", /*#__PURE__*/(0, _react.createRef)());
    (0, _defineProperty2.default)(this, "image", /*#__PURE__*/(0, _react.createRef)());
    (0, _defineProperty2.default)(this, "initX", 0);
    (0, _defineProperty2.default)(this, "initY", 0);
    (0, _defineProperty2.default)(this, "previousX", 0);
    (0, _defineProperty2.default)(this, "previousY", 0);
    (0, _defineProperty2.default)(this, "animatingLoading", false);
    (0, _defineProperty2.default)(this, "imageIsLoaded", false);
    (0, _defineProperty2.default)(this, "imageLoaded", () => {
      // First, we calculate the zoom, so that the image has the same size as
      // the thumbnail
      const {
        thumbnailInfo
      } = this.props;

      if (thumbnailInfo !== null && thumbnailInfo !== void 0 && thumbnailInfo.width) {
        this.setState({
          zoom: thumbnailInfo.width / this.image.current.naturalWidth
        });
      } // Once the zoom is set, we the image is considered loaded and we can
      // start animating it into the center of the screen


      this.imageIsLoaded = true;
      this.animatingLoading = true;
      this.setZoomAndRotation();
      this.setState({
        translationX: 0,
        translationY: 0
      }); // Once the position is set, there is no need to animate anymore

      this.animatingLoading = false;
    });
    (0, _defineProperty2.default)(this, "recalculateZoom", () => {
      this.setZoomAndRotation();
    });
    (0, _defineProperty2.default)(this, "setZoomAndRotation", inputRotation => {
      const image = this.image.current;
      const imageWrapper = this.imageWrapper.current;
      const rotation = inputRotation ?? this.state.rotation;
      const imageIsNotFlipped = rotation % 180 === 0; // If the image is rotated take it into account

      const width = imageIsNotFlipped ? image.naturalWidth : image.naturalHeight;
      const height = imageIsNotFlipped ? image.naturalHeight : image.naturalWidth;
      const zoomX = imageWrapper.clientWidth / width;
      const zoomY = imageWrapper.clientHeight / height; // If the image is smaller in both dimensions set its the zoom to 1 to
      // display it in its original size

      if (zoomX >= 1 && zoomY >= 1) {
        this.setState({
          zoom: 1,
          minZoom: 1,
          maxZoom: 1,
          rotation: rotation
        });
        return;
      } // We set minZoom to the min of the zoomX and zoomY to avoid overflow in
      // any direction. We also multiply by MAX_SCALE to get a gap around the
      // image by default


      const minZoom = Math.min(zoomX, zoomY) * MAX_SCALE; // If zoom is smaller than minZoom don't go below that value

      const zoom = this.state.zoom <= this.state.minZoom ? minZoom : this.state.zoom;
      this.setState({
        minZoom: minZoom,
        maxZoom: 1,
        rotation: rotation,
        zoom: zoom
      });
    });
    (0, _defineProperty2.default)(this, "onWheel", ev => {
      if (ev.target === this.image.current) {
        ev.stopPropagation();
        ev.preventDefault();
        const {
          deltaY
        } = (0, _Mouse.normalizeWheelEvent)(ev); // Zoom in on the point on the image targeted by the cursor

        this.zoomDelta(-deltaY * ZOOM_COEFFICIENT, ev.offsetX, ev.offsetY);
      }
    });
    (0, _defineProperty2.default)(this, "onZoomInClick", () => {
      this.zoomDelta(ZOOM_STEP);
    });
    (0, _defineProperty2.default)(this, "onZoomOutClick", () => {
      this.zoomDelta(-ZOOM_STEP);
    });
    (0, _defineProperty2.default)(this, "onKeyDown", ev => {
      if (ev.key === _Keyboard.Key.ESCAPE) {
        ev.stopPropagation();
        ev.preventDefault();
        this.props.onFinished();
      }
    });
    (0, _defineProperty2.default)(this, "onRotateCounterClockwiseClick", () => {
      const cur = this.state.rotation;
      this.setZoomAndRotation(cur - 90);
    });
    (0, _defineProperty2.default)(this, "onRotateClockwiseClick", () => {
      const cur = this.state.rotation;
      this.setZoomAndRotation(cur + 90);
    });
    (0, _defineProperty2.default)(this, "onDownloadClick", () => {
      const a = document.createElement("a");
      a.href = this.props.src;
      a.download = this.props.name;
      a.target = "_blank";
      a.rel = "noreferrer noopener";
      a.click();
    });
    (0, _defineProperty2.default)(this, "onOpenContextMenu", () => {
      this.setState({
        contextMenuDisplayed: true
      });
    });
    (0, _defineProperty2.default)(this, "onCloseContextMenu", () => {
      this.setState({
        contextMenuDisplayed: false
      });
    });
    (0, _defineProperty2.default)(this, "onPermalinkClicked", ev => {
      // This allows the permalink to be opened in a new tab/window or copied as
      // matrix.to, but also for it to enable routing within Element when clicked.
      ev.preventDefault();

      _dispatcher.default.dispatch({
        action: _actions.Action.ViewRoom,
        event_id: this.props.mxEvent.getId(),
        highlighted: true,
        room_id: this.props.mxEvent.getRoomId()
      });

      this.props.onFinished();
    });
    (0, _defineProperty2.default)(this, "onStartMoving", ev => {
      ev.stopPropagation();
      ev.preventDefault(); // Don't do anything if we pressed any
      // other button than the left one

      if (ev.button !== 0) return; // Zoom in if we are completely zoomed out

      if (this.state.zoom === this.state.minZoom) {
        this.zoom(this.state.maxZoom, ev.nativeEvent.offsetX, ev.nativeEvent.offsetY);
        return;
      }

      this.setState({
        moving: true
      });
      this.previousX = this.state.translationX;
      this.previousY = this.state.translationY;
      this.initX = ev.pageX - this.state.translationX;
      this.initY = ev.pageY - this.state.translationY;
    });
    (0, _defineProperty2.default)(this, "onMoving", ev => {
      ev.stopPropagation();
      ev.preventDefault();
      if (!this.state.moving) return;
      this.setState({
        translationX: ev.pageX - this.initX,
        translationY: ev.pageY - this.initY
      });
    });
    (0, _defineProperty2.default)(this, "onEndMoving", () => {
      // Zoom out if we haven't moved much
      if (this.state.moving === true && Math.abs(this.state.translationX - this.previousX) < ZOOM_DISTANCE && Math.abs(this.state.translationY - this.previousY) < ZOOM_DISTANCE) {
        this.zoom(this.state.minZoom);
        this.initX = 0;
        this.initY = 0;
      }

      this.setState({
        moving: false
      });
    });
    const {
      thumbnailInfo: _thumbnailInfo
    } = this.props;
    this.state = {
      zoom: 0,
      // We default to 0 and override this in imageLoaded once we have naturalSize
      minZoom: MAX_SCALE,
      maxZoom: MAX_SCALE,
      rotation: 0,
      translationX: (_thumbnailInfo === null || _thumbnailInfo === void 0 ? void 0 : _thumbnailInfo.positionX) + (_thumbnailInfo === null || _thumbnailInfo === void 0 ? void 0 : _thumbnailInfo.width) / 2 - _UIStore.default.instance.windowWidth / 2 ?? 0,
      translationY: (_thumbnailInfo === null || _thumbnailInfo === void 0 ? void 0 : _thumbnailInfo.positionY) + (_thumbnailInfo === null || _thumbnailInfo === void 0 ? void 0 : _thumbnailInfo.height) / 2 - _UIStore.default.instance.windowHeight / 2 - getPanelHeight() / 2 ?? 0,
      moving: false,
      contextMenuDisplayed: false
    };
  } // XXX: Refs to functional components


  componentDidMount() {
    // We have to use addEventListener() because the listener
    // needs to be passive in order to work with Chromium
    this.focusLock.current.addEventListener('wheel', this.onWheel, {
      passive: false
    }); // We want to recalculate zoom whenever the window's size changes

    window.addEventListener("resize", this.recalculateZoom); // After the image loads for the first time we want to calculate the zoom

    this.image.current.addEventListener("load", this.imageLoaded);
  }

  componentWillUnmount() {
    this.focusLock.current.removeEventListener('wheel', this.onWheel);
    window.removeEventListener("resize", this.recalculateZoom);
    this.image.current.removeEventListener("load", this.imageLoaded);
  }

  zoomDelta(delta, anchorX, anchorY) {
    this.zoom(this.state.zoom + delta, anchorX, anchorY);
  }

  zoom(zoomLevel, anchorX, anchorY) {
    const oldZoom = this.state.zoom;
    const newZoom = Math.min(zoomLevel, this.state.maxZoom);

    if (newZoom <= this.state.minZoom) {
      // Zoom out fully
      this.setState({
        zoom: this.state.minZoom,
        translationX: 0,
        translationY: 0
      });
    } else if (typeof anchorX !== "number" && typeof anchorY !== "number") {
      // Zoom relative to the center of the view
      this.setState({
        zoom: newZoom,
        translationX: this.state.translationX * newZoom / oldZoom,
        translationY: this.state.translationY * newZoom / oldZoom
      });
    } else {
      // Zoom relative to the given point on the image.
      // First we need to figure out the offset of the anchor point
      // relative to the center of the image, accounting for rotation.
      let offsetX;
      let offsetY; // The modulo operator can return negative values for some
      // rotations, so we have to do some extra work to normalize it

      switch ((this.state.rotation % 360 + 360) % 360) {
        case 0:
          offsetX = this.image.current.clientWidth / 2 - anchorX;
          offsetY = this.image.current.clientHeight / 2 - anchorY;
          break;

        case 90:
          offsetX = anchorY - this.image.current.clientHeight / 2;
          offsetY = this.image.current.clientWidth / 2 - anchorX;
          break;

        case 180:
          offsetX = anchorX - this.image.current.clientWidth / 2;
          offsetY = anchorY - this.image.current.clientHeight / 2;
          break;

        case 270:
          offsetX = this.image.current.clientHeight / 2 - anchorY;
          offsetY = anchorX - this.image.current.clientWidth / 2;
      } // Apply the zoom and offset


      this.setState({
        zoom: newZoom,
        translationX: this.state.translationX + (newZoom - oldZoom) * offsetX,
        translationY: this.state.translationY + (newZoom - oldZoom) * offsetY
      });
    }
  }

  renderContextMenu() {
    let contextMenu = null;

    if (this.state.contextMenuDisplayed) {
      contextMenu = /*#__PURE__*/_react.default.createElement(_MessageContextMenu.default, (0, _extends2.default)({}, (0, _ContextMenu.aboveLeftOf)(this.contextMenuButton.current.getBoundingClientRect()), {
        mxEvent: this.props.mxEvent,
        permalinkCreator: this.props.permalinkCreator,
        onFinished: this.onCloseContextMenu,
        onCloseDialog: this.props.onFinished
      }));
    }

    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, contextMenu);
  }

  render() {
    const showEventMeta = !!this.props.mxEvent;
    const zoomingDisabled = this.state.maxZoom === this.state.minZoom;
    let transitionClassName;
    if (this.animatingLoading) transitionClassName = "mx_ImageView_image_animatingLoading";else if (this.state.moving || !this.imageIsLoaded) transitionClassName = "";else transitionClassName = "mx_ImageView_image_animating";
    let cursor;
    if (this.state.moving) cursor = "grabbing";else if (zoomingDisabled) cursor = "default";else if (this.state.zoom === this.state.minZoom) cursor = "zoom-in";else cursor = "zoom-out";
    const rotationDegrees = this.state.rotation + "deg";
    const zoom = this.state.zoom;
    const translatePixelsX = this.state.translationX + "px";
    const translatePixelsY = this.state.translationY + "px"; // The order of the values is important!
    // First, we translate and only then we rotate, otherwise
    // we would apply the translation to an already rotated
    // image causing it translate in the wrong direction.

    const style = {
      cursor: cursor,
      transform: `translateX(${translatePixelsX})
                        translateY(${translatePixelsY})
                        scale(${zoom})
                        rotate(${rotationDegrees})`
    };
    let info;

    if (showEventMeta) {
      const mxEvent = this.props.mxEvent;

      const showTwelveHour = _SettingsStore.default.getValue("showTwelveHourTimestamps");

      let permalink = "#";

      if (this.props.permalinkCreator) {
        permalink = this.props.permalinkCreator.forEvent(this.props.mxEvent.getId());
      }

      const senderName = mxEvent.sender ? mxEvent.sender.name : mxEvent.getSender();

      const sender = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_ImageView_info_sender"
      }, senderName);

      const messageTimestamp = /*#__PURE__*/_react.default.createElement("a", {
        href: permalink,
        onClick: this.onPermalinkClicked,
        "aria-label": (0, _DateUtils.formatFullDate)(new Date(this.props.mxEvent.getTs()), showTwelveHour, false)
      }, /*#__PURE__*/_react.default.createElement(_MessageTimestamp.default, {
        showFullDate: true,
        showTwelveHour: showTwelveHour,
        ts: mxEvent.getTs(),
        showSeconds: false
      }));

      const avatar = /*#__PURE__*/_react.default.createElement(_MemberAvatar.default, {
        member: mxEvent.sender,
        fallbackUserId: mxEvent.getSender(),
        width: 32,
        height: 32,
        viewUserOnClick: true
      });

      info = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_ImageView_info_wrapper"
      }, avatar, /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_ImageView_info"
      }, sender, messageTimestamp));
    } else {
      // If there is no event - we're viewing an avatar, we set
      // an empty div here, since the panel uses space-between
      // and we want the same placement of elements
      info = /*#__PURE__*/_react.default.createElement("div", null);
    }

    let contextMenuButton;

    if (this.props.mxEvent) {
      contextMenuButton = /*#__PURE__*/_react.default.createElement(_ContextMenuTooltipButton.ContextMenuTooltipButton, {
        className: "mx_ImageView_button mx_ImageView_button_more",
        title: (0, _languageHandler._t)("Options"),
        onClick: this.onOpenContextMenu,
        inputRef: this.contextMenuButton,
        isExpanded: this.state.contextMenuDisplayed
      });
    }

    let zoomOutButton;
    let zoomInButton;

    if (!zoomingDisabled) {
      zoomOutButton = /*#__PURE__*/_react.default.createElement(_AccessibleTooltipButton.default, {
        className: "mx_ImageView_button mx_ImageView_button_zoomOut",
        title: (0, _languageHandler._t)("Zoom out"),
        onClick: this.onZoomOutClick
      });
      zoomInButton = /*#__PURE__*/_react.default.createElement(_AccessibleTooltipButton.default, {
        className: "mx_ImageView_button mx_ImageView_button_zoomIn",
        title: (0, _languageHandler._t)("Zoom in"),
        onClick: this.onZoomInClick
      });
    }

    return /*#__PURE__*/_react.default.createElement(_reactFocusLock.default, {
      returnFocus: true,
      lockProps: {
        onKeyDown: this.onKeyDown,
        role: "dialog"
      },
      className: "mx_ImageView",
      ref: this.focusLock
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_ImageView_panel"
    }, info, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_ImageView_toolbar"
    }, zoomOutButton, zoomInButton, /*#__PURE__*/_react.default.createElement(_AccessibleTooltipButton.default, {
      className: "mx_ImageView_button mx_ImageView_button_rotateCCW",
      title: (0, _languageHandler._t)("Rotate Left"),
      onClick: this.onRotateCounterClockwiseClick
    }), /*#__PURE__*/_react.default.createElement(_AccessibleTooltipButton.default, {
      className: "mx_ImageView_button mx_ImageView_button_rotateCW",
      title: (0, _languageHandler._t)("Rotate Right"),
      onClick: this.onRotateClockwiseClick
    }), /*#__PURE__*/_react.default.createElement(_AccessibleTooltipButton.default, {
      className: "mx_ImageView_button mx_ImageView_button_download",
      title: (0, _languageHandler._t)("Download"),
      onClick: this.onDownloadClick
    }), contextMenuButton, /*#__PURE__*/_react.default.createElement(_AccessibleTooltipButton.default, {
      className: "mx_ImageView_button mx_ImageView_button_close",
      title: (0, _languageHandler._t)("Close"),
      onClick: this.props.onFinished
    }), this.renderContextMenu())), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_ImageView_image_wrapper",
      ref: this.imageWrapper,
      onMouseDown: this.props.onFinished,
      onMouseMove: this.onMoving,
      onMouseUp: this.onEndMoving,
      onMouseLeave: this.onEndMoving
    }, /*#__PURE__*/_react.default.createElement("img", {
      src: this.props.src,
      style: style,
      alt: this.props.name,
      ref: this.image,
      className: `mx_ImageView_image ${transitionClassName}`,
      draggable: true,
      onMouseDown: this.onStartMoving
    })));
  }

}) || _class);
exports.default = ImageView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL2VsZW1lbnRzL0ltYWdlVmlldy50c3giXSwibmFtZXMiOlsiTUFYX1NDQUxFIiwiWk9PTV9TVEVQIiwiWk9PTV9DT0VGRklDSUVOVCIsIlpPT01fRElTVEFOQ0UiLCJnZXRQYW5lbEhlaWdodCIsInZhbHVlIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImRvY3VtZW50IiwiZG9jdW1lbnRFbGVtZW50IiwiZ2V0UHJvcGVydHlWYWx1ZSIsInBhcnNlSW50Iiwic2xpY2UiLCJsZW5ndGgiLCJJbWFnZVZpZXciLCJSZWFjdCIsIkNvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwicHJvcHMiLCJ0aHVtYm5haWxJbmZvIiwid2lkdGgiLCJzZXRTdGF0ZSIsInpvb20iLCJpbWFnZSIsImN1cnJlbnQiLCJuYXR1cmFsV2lkdGgiLCJpbWFnZUlzTG9hZGVkIiwiYW5pbWF0aW5nTG9hZGluZyIsInNldFpvb21BbmRSb3RhdGlvbiIsInRyYW5zbGF0aW9uWCIsInRyYW5zbGF0aW9uWSIsImlucHV0Um90YXRpb24iLCJpbWFnZVdyYXBwZXIiLCJyb3RhdGlvbiIsInN0YXRlIiwiaW1hZ2VJc05vdEZsaXBwZWQiLCJuYXR1cmFsSGVpZ2h0IiwiaGVpZ2h0Iiwiem9vbVgiLCJjbGllbnRXaWR0aCIsInpvb21ZIiwiY2xpZW50SGVpZ2h0IiwibWluWm9vbSIsIm1heFpvb20iLCJNYXRoIiwibWluIiwiZXYiLCJ0YXJnZXQiLCJzdG9wUHJvcGFnYXRpb24iLCJwcmV2ZW50RGVmYXVsdCIsImRlbHRhWSIsInpvb21EZWx0YSIsIm9mZnNldFgiLCJvZmZzZXRZIiwia2V5IiwiS2V5IiwiRVNDQVBFIiwib25GaW5pc2hlZCIsImN1ciIsImEiLCJjcmVhdGVFbGVtZW50IiwiaHJlZiIsInNyYyIsImRvd25sb2FkIiwibmFtZSIsInJlbCIsImNsaWNrIiwiY29udGV4dE1lbnVEaXNwbGF5ZWQiLCJkaXMiLCJkaXNwYXRjaCIsImFjdGlvbiIsIkFjdGlvbiIsIlZpZXdSb29tIiwiZXZlbnRfaWQiLCJteEV2ZW50IiwiZ2V0SWQiLCJoaWdobGlnaHRlZCIsInJvb21faWQiLCJnZXRSb29tSWQiLCJidXR0b24iLCJuYXRpdmVFdmVudCIsIm1vdmluZyIsInByZXZpb3VzWCIsInByZXZpb3VzWSIsImluaXRYIiwicGFnZVgiLCJpbml0WSIsInBhZ2VZIiwiYWJzIiwicG9zaXRpb25YIiwiVUlTdG9yZSIsImluc3RhbmNlIiwid2luZG93V2lkdGgiLCJwb3NpdGlvblkiLCJ3aW5kb3dIZWlnaHQiLCJjb21wb25lbnREaWRNb3VudCIsImZvY3VzTG9jayIsImFkZEV2ZW50TGlzdGVuZXIiLCJvbldoZWVsIiwicGFzc2l2ZSIsIndpbmRvdyIsInJlY2FsY3VsYXRlWm9vbSIsImltYWdlTG9hZGVkIiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZGVsdGEiLCJhbmNob3JYIiwiYW5jaG9yWSIsInpvb21MZXZlbCIsIm9sZFpvb20iLCJuZXdab29tIiwicmVuZGVyQ29udGV4dE1lbnUiLCJjb250ZXh0TWVudSIsImNvbnRleHRNZW51QnV0dG9uIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwicGVybWFsaW5rQ3JlYXRvciIsIm9uQ2xvc2VDb250ZXh0TWVudSIsInJlbmRlciIsInNob3dFdmVudE1ldGEiLCJ6b29taW5nRGlzYWJsZWQiLCJ0cmFuc2l0aW9uQ2xhc3NOYW1lIiwiY3Vyc29yIiwicm90YXRpb25EZWdyZWVzIiwidHJhbnNsYXRlUGl4ZWxzWCIsInRyYW5zbGF0ZVBpeGVsc1kiLCJzdHlsZSIsInRyYW5zZm9ybSIsImluZm8iLCJzaG93VHdlbHZlSG91ciIsIlNldHRpbmdzU3RvcmUiLCJnZXRWYWx1ZSIsInBlcm1hbGluayIsImZvckV2ZW50Iiwic2VuZGVyTmFtZSIsInNlbmRlciIsImdldFNlbmRlciIsIm1lc3NhZ2VUaW1lc3RhbXAiLCJvblBlcm1hbGlua0NsaWNrZWQiLCJEYXRlIiwiZ2V0VHMiLCJhdmF0YXIiLCJvbk9wZW5Db250ZXh0TWVudSIsInpvb21PdXRCdXR0b24iLCJ6b29tSW5CdXR0b24iLCJvblpvb21PdXRDbGljayIsIm9uWm9vbUluQ2xpY2siLCJvbktleURvd24iLCJyb2xlIiwib25Sb3RhdGVDb3VudGVyQ2xvY2t3aXNlQ2xpY2siLCJvblJvdGF0ZUNsb2Nrd2lzZUNsaWNrIiwib25Eb3dubG9hZENsaWNrIiwib25Nb3ZpbmciLCJvbkVuZE1vdmluZyIsIm9uU3RhcnRNb3ZpbmciXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFrQkE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBR0E7O0FBRUE7Ozs7Ozs7O0FBRUE7QUFDQSxNQUFNQSxTQUFTLEdBQUcsSUFBbEIsQyxDQUNBOztBQUNBLE1BQU1DLFNBQVMsR0FBRyxJQUFsQixDLENBQ0E7O0FBQ0EsTUFBTUMsZ0JBQWdCLEdBQUcsTUFBekIsQyxDQUNBOztBQUNBLE1BQU1DLGFBQWEsR0FBRyxFQUF0QixDLENBRUE7O0FBQ0EsTUFBTUMsY0FBYyxHQUFHLE1BQWM7QUFDakMsUUFBTUMsS0FBSyxHQUFHQyxnQkFBZ0IsQ0FBQ0MsUUFBUSxDQUFDQyxlQUFWLENBQWhCLENBQTJDQyxnQkFBM0MsQ0FBNEQsMkJBQTVELENBQWQsQ0FEaUMsQ0FFakM7O0FBQ0EsU0FBT0MsUUFBUSxDQUFDTCxLQUFLLENBQUNNLEtBQU4sQ0FBWSxDQUFaLEVBQWVOLEtBQUssQ0FBQ08sTUFBTixHQUFlLENBQTlCLENBQUQsQ0FBZjtBQUNILENBSkQ7O0lBeUNxQkMsUyxXQURwQixnREFBcUIsMEJBQXJCLEMsZ0JBQUQsTUFDcUJBLFNBRHJCLFNBQ3VDQyxlQUFNQyxTQUQ3QyxDQUN1RTtBQUNuRUMsRUFBQUEsV0FBVyxDQUFDQyxLQUFELEVBQVE7QUFDZixVQUFNQSxLQUFOO0FBRGUsMEVBMkJTLHVCQTNCVDtBQUFBLGtFQTRC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REo7QUEyREg7O0FBcGZrRSxDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbkNvcHlyaWdodCAyMDE1LCAyMDE2IE9wZW5NYXJrZXQgTHRkXG5Db3B5cmlnaHQgMjAxOSBNaWNoYWVsIFRlbGF0eW5za2kgPDd0M2NoZ3V5QGdtYWlsLmNvbT5cbkNvcHlyaWdodCAyMDIwLCAyMDIxIMWgaW1vbiBCcmFuZG5lciA8c2ltb24uYnJhLmFnQGdtYWlsLmNvbT5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG5pbXBvcnQgUmVhY3QsIHsgY3JlYXRlUmVmIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgX3QgfSBmcm9tICcuLi8uLi8uLi9sYW5ndWFnZUhhbmRsZXInO1xuaW1wb3J0IEFjY2Vzc2libGVUb29sdGlwQnV0dG9uIGZyb20gXCIuL0FjY2Vzc2libGVUb29sdGlwQnV0dG9uXCI7XG5pbXBvcnQgeyBLZXkgfSBmcm9tIFwiLi4vLi4vLi4vS2V5Ym9hcmRcIjtcbmltcG9ydCBGb2N1c0xvY2sgZnJvbSBcInJlYWN0LWZvY3VzLWxvY2tcIjtcbmltcG9ydCBNZW1iZXJBdmF0YXIgZnJvbSBcIi4uL2F2YXRhcnMvTWVtYmVyQXZhdGFyXCI7XG5pbXBvcnQgeyBDb250ZXh0TWVudVRvb2x0aXBCdXR0b24gfSBmcm9tIFwiLi4vLi4vLi4vYWNjZXNzaWJpbGl0eS9jb250ZXh0X21lbnUvQ29udGV4dE1lbnVUb29sdGlwQnV0dG9uXCI7XG5pbXBvcnQgTWVzc2FnZUNvbnRleHRNZW51IGZyb20gXCIuLi9jb250ZXh0X21lbnVzL01lc3NhZ2VDb250ZXh0TWVudVwiO1xuaW1wb3J0IHsgYWJvdmVMZWZ0T2YgfSBmcm9tICcuLi8uLi9zdHJ1Y3R1cmVzL0NvbnRleHRNZW51JztcbmltcG9ydCBNZXNzYWdlVGltZXN0YW1wIGZyb20gXCIuLi9tZXNzYWdlcy9NZXNzYWdlVGltZXN0YW1wXCI7XG5pbXBvcnQgU2V0dGluZ3NTdG9yZSBmcm9tIFwiLi4vLi4vLi4vc2V0dGluZ3MvU2V0dGluZ3NTdG9yZVwiO1xuaW1wb3J0IHsgZm9ybWF0RnVsbERhdGUgfSBmcm9tIFwiLi4vLi4vLi4vRGF0ZVV0aWxzXCI7XG5pbXBvcnQgZGlzIGZyb20gJy4uLy4uLy4uL2Rpc3BhdGNoZXIvZGlzcGF0Y2hlcic7XG5pbXBvcnQgeyBBY3Rpb24gfSBmcm9tICcuLi8uLi8uLi9kaXNwYXRjaGVyL2FjdGlvbnMnO1xuaW1wb3J0IHsgcmVwbGFjZWFibGVDb21wb25lbnQgfSBmcm9tIFwiLi4vLi4vLi4vdXRpbHMvcmVwbGFjZWFibGVDb21wb25lbnRcIjtcbmltcG9ydCB7IFJvb21QZXJtYWxpbmtDcmVhdG9yIH0gZnJvbSBcIi4uLy4uLy4uL3V0aWxzL3Blcm1hbGlua3MvUGVybWFsaW5rc1wiO1xuaW1wb3J0IHsgTWF0cml4RXZlbnQgfSBmcm9tIFwibWF0cml4LWpzLXNkay9zcmMvbW9kZWxzL2V2ZW50XCI7XG5pbXBvcnQgeyBub3JtYWxpemVXaGVlbEV2ZW50IH0gZnJvbSBcIi4uLy4uLy4uL3V0aWxzL01vdXNlXCI7XG5pbXBvcnQgeyBJRGlhbG9nUHJvcHMgfSBmcm9tICcuLi9kaWFsb2dzL0lEaWFsb2dQcm9wcyc7XG5pbXBvcnQgVUlTdG9yZSBmcm9tICcuLi8uLi8uLi9zdG9yZXMvVUlTdG9yZSc7XG5cbi8vIE1heCBzY2FsZSB0byBrZWVwIGdhcHMgYXJvdW5kIHRoZSBpbWFnZVxuY29uc3QgTUFYX1NDQUxFID0gMC45NTtcbi8vIFRoaXMgaXMgdXNlZCBmb3IgdGhlIGJ1dHRvbnNcbmNvbnN0IFpPT01fU1RFUCA9IDAuMTA7XG4vLyBUaGlzIGlzIHVzZWQgZm9yIG1vdXNlIHdoZWVsIGV2ZW50c1xuY29uc3QgWk9PTV9DT0VGRklDSUVOVCA9IDAuMDAyNTtcbi8vIElmIHdlIGhhdmUgbW92ZWQgb25seSB0aGlzIG11Y2ggd2UgY2FuIHpvb21cbmNvbnN0IFpPT01fRElTVEFOQ0UgPSAxMDtcblxuLy8gSGVpZ2h0IG9mIG14X0ltYWdlVmlld19wYW5lbFxuY29uc3QgZ2V0UGFuZWxIZWlnaHQgPSAoKTogbnVtYmVyID0+IHtcbiAgICBjb25zdCB2YWx1ZSA9IGdldENvbXB1dGVkU3R5bGUoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KS5nZXRQcm9wZXJ0eVZhbHVlKFwiLS1pbWFnZS12aWV3LXBhbmVsLWhlaWdodFwiKTtcbiAgICAvLyBSZXR1cm4gdGhlIHZhbHVlIGFzIGEgbnVtYmVyIHdpdGhvdXQgdGhlIHVuaXRcbiAgICByZXR1cm4gcGFyc2VJbnQodmFsdWUuc2xpY2UoMCwgdmFsdWUubGVuZ3RoIC0gMikpO1xufTtcblxuaW50ZXJmYWNlIElQcm9wcyBleHRlbmRzIElEaWFsb2dQcm9wcyB7XG4gICAgc3JjOiBzdHJpbmc7IC8vIHRoZSBzb3VyY2Ugb2YgdGhlIGltYWdlIGJlaW5nIGRpc3BsYXllZFxuICAgIG5hbWU/OiBzdHJpbmc7IC8vIHRoZSBtYWluIHRpdGxlICgnbmFtZScpIGZvciB0aGUgaW1hZ2VcbiAgICBsaW5rPzogc3RyaW5nOyAvLyB0aGUgbGluayAoaWYgYW55KSBhcHBsaWVkIHRvIHRoZSBuYW1lIG9mIHRoZSBpbWFnZVxuICAgIHdpZHRoPzogbnVtYmVyOyAvLyB3aWR0aCBvZiB0aGUgaW1hZ2Ugc3JjIGluIHBpeGVsc1xuICAgIGhlaWdodD86IG51bWJlcjsgLy8gaGVpZ2h0IG9mIHRoZSBpbWFnZSBzcmMgaW4gcGl4ZWxzXG4gICAgZmlsZVNpemU/OiBudW1iZXI7IC8vIHNpemUgb2YgdGhlIGltYWdlIHNyYyBpbiBieXRlc1xuXG4gICAgLy8gdGhlIGV2ZW50IChpZiBhbnkpIHRoYXQgdGhlIEltYWdlIGlzIGRpc3BsYXlpbmcuIFVzZWQgZm9yIGV2ZW50LXNwZWNpZmljIHN0dWZmIGxpa2VcbiAgICAvLyByZWRhY3Rpb25zLCBzZW5kZXJzLCB0aW1lc3RhbXBzIGV0Yy4gIE90aGVyIGRlc2NyaXB0b3JzIGFyZSB0YWtlbiBmcm9tIHRoZSBleHBsaWNpdFxuICAgIC8vIHByb3BlcnRpZXMgYWJvdmUsIHdoaWNoIGxldCB1cyB1c2UgbGlnaHRib3hlcyB0byBkaXNwbGF5IGltYWdlcyB3aGljaCBhcmVuJ3QgYXNzb2NpYXRlZFxuICAgIC8vIHdpdGggZXZlbnRzLlxuICAgIG14RXZlbnQ/OiBNYXRyaXhFdmVudDtcbiAgICBwZXJtYWxpbmtDcmVhdG9yPzogUm9vbVBlcm1hbGlua0NyZWF0b3I7XG5cbiAgICB0aHVtYm5haWxJbmZvPzoge1xuICAgICAgICBwb3NpdGlvblg6IG51bWJlcjtcbiAgICAgICAgcG9zaXRpb25ZOiBudW1iZXI7XG4gICAgICAgIHdpZHRoOiBudW1iZXI7XG4gICAgICAgIGhlaWdodDogbnVtYmVyO1xuICAgIH07XG59XG5cbmludGVyZmFjZSBJU3RhdGUge1xuICAgIHpvb206IG51bWJlcjtcbiAgICBtaW5ab29tOiBudW1iZXI7XG4gICAgbWF4Wm9vbTogbnVtYmVyO1xuICAgIHJvdGF0aW9uOiBudW1iZXI7XG4gICAgdHJhbnNsYXRpb25YOiBudW1iZXI7XG4gICAgdHJhbnNsYXRpb25ZOiBudW1iZXI7XG4gICAgbW92aW5nOiBib29sZWFuO1xuICAgIGNvbnRleHRNZW51RGlzcGxheWVkOiBib29sZWFuO1xufVxuXG5AcmVwbGFjZWFibGVDb21wb25lbnQoXCJ2aWV3cy5lbGVtZW50cy5JbWFnZVZpZXdcIilcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEltYWdlVmlldyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxJUHJvcHMsIElTdGF0ZT4ge1xuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcblxuICAgICAgICBjb25zdCB7IHRodW1ibmFpbEluZm8gfSA9IHRoaXMucHJvcHM7XG5cbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIHpvb206IDAsIC8vIFdlIGRlZmF1bHQgdG8gMCBhbmQgb3ZlcnJpZGUgdGhpcyBpbiBpbWFnZUxvYWRlZCBvbmNlIHdlIGhhdmUgbmF0dXJhbFNpemVcbiAgICAgICAgICAgIG1pblpvb206IE1BWF9TQ0FMRSxcbiAgICAgICAgICAgIG1heFpvb206IE1BWF9TQ0FMRSxcbiAgICAgICAgICAgIHJvdGF0aW9uOiAwLFxuICAgICAgICAgICAgdHJhbnNsYXRpb25YOiAoXG4gICAgICAgICAgICAgICAgdGh1bWJuYWlsSW5mbz8ucG9zaXRpb25YICtcbiAgICAgICAgICAgICAgICAodGh1bWJuYWlsSW5mbz8ud2lkdGggLyAyKSAtXG4gICAgICAgICAgICAgICAgKFVJU3RvcmUuaW5zdGFuY2Uud2luZG93V2lkdGggLyAyKVxuICAgICAgICAgICAgKSA/PyAwLFxuICAgICAgICAgICAgdHJhbnNsYXRpb25ZOiAoXG4gICAgICAgICAgICAgICAgdGh1bWJuYWlsSW5mbz8ucG9zaXRpb25ZICtcbiAgICAgICAgICAgICAgICAodGh1bWJuYWlsSW5mbz8uaGVpZ2h0IC8gMikgLVxuICAgICAgICAgICAgICAgIChVSVN0b3JlLmluc3RhbmNlLndpbmRvd0hlaWdodCAvIDIpIC1cbiAgICAgICAgICAgICAgICAoZ2V0UGFuZWxIZWlnaHQoKSAvIDIpXG4gICAgICAgICAgICApID8/IDAsXG4gICAgICAgICAgICBtb3Zpbmc6IGZhbHNlLFxuICAgICAgICAgICAgY29udGV4dE1lbnVEaXNwbGF5ZWQ6IGZhbHNlLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIFhYWDogUmVmcyB0byBmdW5jdGlvbmFsIGNvbXBvbmVudHNcbiAgICBwcml2YXRlIGNvbnRleHRNZW51QnV0dG9uID0gY3JlYXRlUmVmPGFueT4oKTtcbiAgICBwcml2YXRlIGZvY3VzTG9jayA9IGNyZWF0ZVJlZjxhbnk+KCk7XG4gICAgcHJpdmF0ZSBpbWFnZVdyYXBwZXIgPSBjcmVhdGVSZWY8SFRNTERpdkVsZW1lbnQ+KCk7XG4gICAgcHJpdmF0ZSBpbWFnZSA9IGNyZWF0ZVJlZjxIVE1MSW1hZ2VFbGVtZW50PigpO1xuXG4gICAgcHJpdmF0ZSBpbml0WCA9IDA7XG4gICAgcHJpdmF0ZSBpbml0WSA9IDA7XG4gICAgcHJpdmF0ZSBwcmV2aW91c1ggPSAwO1xuICAgIHByaXZhdGUgcHJldmlvdXNZID0gMDtcblxuICAgIHByaXZhdGUgYW5pbWF0aW5nTG9hZGluZyA9IGZhbHNlO1xuICAgIHByaXZhdGUgaW1hZ2VJc0xvYWRlZCA9IGZhbHNlO1xuXG4gICAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICAgIC8vIFdlIGhhdmUgdG8gdXNlIGFkZEV2ZW50TGlzdGVuZXIoKSBiZWNhdXNlIHRoZSBsaXN0ZW5lclxuICAgICAgICAvLyBuZWVkcyB0byBiZSBwYXNzaXZlIGluIG9yZGVyIHRvIHdvcmsgd2l0aCBDaHJvbWl1bVxuICAgICAgICB0aGlzLmZvY3VzTG9jay5jdXJyZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3doZWVsJywgdGhpcy5vbldoZWVsLCB7IHBhc3NpdmU6IGZhbHNlIH0pO1xuICAgICAgICAvLyBXZSB3YW50IHRvIHJlY2FsY3VsYXRlIHpvb20gd2hlbmV2ZXIgdGhlIHdpbmRvdydzIHNpemUgY2hhbmdlc1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCB0aGlzLnJlY2FsY3VsYXRlWm9vbSk7XG4gICAgICAgIC8vIEFmdGVyIHRoZSBpbWFnZSBsb2FkcyBmb3IgdGhlIGZpcnN0IHRpbWUgd2Ugd2FudCB0byBjYWxjdWxhdGUgdGhlIHpvb21cbiAgICAgICAgdGhpcy5pbWFnZS5jdXJyZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIHRoaXMuaW1hZ2VMb2FkZWQpO1xuICAgIH1cblxuICAgIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgICB0aGlzLmZvY3VzTG9jay5jdXJyZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3doZWVsJywgdGhpcy5vbldoZWVsKTtcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgdGhpcy5yZWNhbGN1bGF0ZVpvb20pO1xuICAgICAgICB0aGlzLmltYWdlLmN1cnJlbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgdGhpcy5pbWFnZUxvYWRlZCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpbWFnZUxvYWRlZCA9ICgpID0+IHtcbiAgICAgICAgLy8gRmlyc3QsIHdlIGNhbGN1bGF0ZSB0aGUgem9vbSwgc28gdGhhdCB0aGUgaW1hZ2UgaGFzIHRoZSBzYW1lIHNpemUgYXNcbiAgICAgICAgLy8gdGhlIHRodW1ibmFpbFxuICAgICAgICBjb25zdCB7IHRodW1ibmFpbEluZm8gfSA9IHRoaXMucHJvcHM7XG4gICAgICAgIGlmICh0aHVtYm5haWxJbmZvPy53aWR0aCkge1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHpvb206IHRodW1ibmFpbEluZm8ud2lkdGggLyB0aGlzLmltYWdlLmN1cnJlbnQubmF0dXJhbFdpZHRoIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gT25jZSB0aGUgem9vbSBpcyBzZXQsIHdlIHRoZSBpbWFnZSBpcyBjb25zaWRlcmVkIGxvYWRlZCBhbmQgd2UgY2FuXG4gICAgICAgIC8vIHN0YXJ0IGFuaW1hdGluZyBpdCBpbnRvIHRoZSBjZW50ZXIgb2YgdGhlIHNjcmVlblxuICAgICAgICB0aGlzLmltYWdlSXNMb2FkZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLmFuaW1hdGluZ0xvYWRpbmcgPSB0cnVlO1xuICAgICAgICB0aGlzLnNldFpvb21BbmRSb3RhdGlvbigpO1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIHRyYW5zbGF0aW9uWDogMCxcbiAgICAgICAgICAgIHRyYW5zbGF0aW9uWTogMCxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gT25jZSB0aGUgcG9zaXRpb24gaXMgc2V0LCB0aGVyZSBpcyBubyBuZWVkIHRvIGFuaW1hdGUgYW55bW9yZVxuICAgICAgICB0aGlzLmFuaW1hdGluZ0xvYWRpbmcgPSBmYWxzZTtcbiAgICB9O1xuXG4gICAgcHJpdmF0ZSByZWNhbGN1bGF0ZVpvb20gPSAoKSA9PiB7XG4gICAgICAgIHRoaXMuc2V0Wm9vbUFuZFJvdGF0aW9uKCk7XG4gICAgfTtcblxuICAgIHByaXZhdGUgc2V0Wm9vbUFuZFJvdGF0aW9uID0gKGlucHV0Um90YXRpb24/OiBudW1iZXIpID0+IHtcbiAgICAgICAgY29uc3QgaW1hZ2UgPSB0aGlzLmltYWdlLmN1cnJlbnQ7XG4gICAgICAgIGNvbnN0IGltYWdlV3JhcHBlciA9IHRoaXMuaW1hZ2VXcmFwcGVyLmN1cnJlbnQ7XG5cbiAgICAgICAgY29uc3Qgcm90YXRpb24gPSBpbnB1dFJvdGF0aW9uID8/IHRoaXMuc3RhdGUucm90YXRpb247XG5cbiAgICAgICAgY29uc3QgaW1hZ2VJc05vdEZsaXBwZWQgPSByb3RhdGlvbiAlIDE4MCA9PT0gMDtcblxuICAgICAgICAvLyBJZiB0aGUgaW1hZ2UgaXMgcm90YXRlZCB0YWtlIGl0IGludG8gYWNjb3VudFxuICAgICAgICBjb25zdCB3aWR0aCA9IGltYWdlSXNOb3RGbGlwcGVkID8gaW1hZ2UubmF0dXJhbFdpZHRoIDogaW1hZ2UubmF0dXJhbEhlaWdodDtcbiAgICAgICAgY29uc3QgaGVpZ2h0ID0gaW1hZ2VJc05vdEZsaXBwZWQgPyBpbWFnZS5uYXR1cmFsSGVpZ2h0IDogaW1hZ2UubmF0dXJhbFdpZHRoO1xuXG4gICAgICAgIGNvbnN0IHpvb21YID0gaW1hZ2VXcmFwcGVyLmNsaWVudFdpZHRoIC8gd2lkdGg7XG4gICAgICAgIGNvbnN0IHpvb21ZID0gaW1hZ2VXcmFwcGVyLmNsaWVudEhlaWdodCAvIGhlaWdodDtcblxuICAgICAgICAvLyBJZiB0aGUgaW1hZ2UgaXMgc21hbGxlciBpbiBib3RoIGRpbWVuc2lvbnMgc2V0IGl0cyB0aGUgem9vbSB0byAxIHRvXG4gICAgICAgIC8vIGRpc3BsYXkgaXQgaW4gaXRzIG9yaWdpbmFsIHNpemVcbiAgICAgICAgaWYgKHpvb21YID49IDEgJiYgem9vbVkgPj0gMSkge1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgem9vbTogMSxcbiAgICAgICAgICAgICAgICBtaW5ab29tOiAxLFxuICAgICAgICAgICAgICAgIG1heFpvb206IDEsXG4gICAgICAgICAgICAgICAgcm90YXRpb246IHJvdGF0aW9uLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gV2Ugc2V0IG1pblpvb20gdG8gdGhlIG1pbiBvZiB0aGUgem9vbVggYW5kIHpvb21ZIHRvIGF2b2lkIG92ZXJmbG93IGluXG4gICAgICAgIC8vIGFueSBkaXJlY3Rpb24uIFdlIGFsc28gbXVsdGlwbHkgYnkgTUFYX1NDQUxFIHRvIGdldCBhIGdhcCBhcm91bmQgdGhlXG4gICAgICAgIC8vIGltYWdlIGJ5IGRlZmF1bHRcbiAgICAgICAgY29uc3QgbWluWm9vbSA9IE1hdGgubWluKHpvb21YLCB6b29tWSkgKiBNQVhfU0NBTEU7XG5cbiAgICAgICAgLy8gSWYgem9vbSBpcyBzbWFsbGVyIHRoYW4gbWluWm9vbSBkb24ndCBnbyBiZWxvdyB0aGF0IHZhbHVlXG4gICAgICAgIGNvbnN0IHpvb20gPSAodGhpcy5zdGF0ZS56b29tIDw9IHRoaXMuc3RhdGUubWluWm9vbSkgPyBtaW5ab29tIDogdGhpcy5zdGF0ZS56b29tO1xuXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgbWluWm9vbTogbWluWm9vbSxcbiAgICAgICAgICAgIG1heFpvb206IDEsXG4gICAgICAgICAgICByb3RhdGlvbjogcm90YXRpb24sXG4gICAgICAgICAgICB6b29tOiB6b29tLFxuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgcHJpdmF0ZSB6b29tRGVsdGEoZGVsdGE6IG51bWJlciwgYW5jaG9yWD86IG51bWJlciwgYW5jaG9yWT86IG51bWJlcikge1xuICAgICAgICB0aGlzLnpvb20odGhpcy5zdGF0ZS56b29tICsgZGVsdGEsIGFuY2hvclgsIGFuY2hvclkpO1xuICAgIH1cblxuICAgIHByaXZhdGUgem9vbSh6b29tTGV2ZWw6IG51bWJlciwgYW5jaG9yWD86IG51bWJlciwgYW5jaG9yWT86IG51bWJlcikge1xuICAgICAgICBjb25zdCBvbGRab29tID0gdGhpcy5zdGF0ZS56b29tO1xuICAgICAgICBjb25zdCBuZXdab29tID0gTWF0aC5taW4oem9vbUxldmVsLCB0aGlzLnN0YXRlLm1heFpvb20pO1xuXG4gICAgICAgIGlmIChuZXdab29tIDw9IHRoaXMuc3RhdGUubWluWm9vbSkge1xuICAgICAgICAgICAgLy8gWm9vbSBvdXQgZnVsbHlcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgIHpvb206IHRoaXMuc3RhdGUubWluWm9vbSxcbiAgICAgICAgICAgICAgICB0cmFuc2xhdGlvblg6IDAsXG4gICAgICAgICAgICAgICAgdHJhbnNsYXRpb25ZOiAwLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGFuY2hvclggIT09IFwibnVtYmVyXCIgJiYgdHlwZW9mIGFuY2hvclkgIT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgIC8vIFpvb20gcmVsYXRpdmUgdG8gdGhlIGNlbnRlciBvZiB0aGUgdmlld1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgem9vbTogbmV3Wm9vbSxcbiAgICAgICAgICAgICAgICB0cmFuc2xhdGlvblg6IHRoaXMuc3RhdGUudHJhbnNsYXRpb25YICogbmV3Wm9vbSAvIG9sZFpvb20sXG4gICAgICAgICAgICAgICAgdHJhbnNsYXRpb25ZOiB0aGlzLnN0YXRlLnRyYW5zbGF0aW9uWSAqIG5ld1pvb20gLyBvbGRab29tLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBab29tIHJlbGF0aXZlIHRvIHRoZSBnaXZlbiBwb2ludCBvbiB0aGUgaW1hZ2UuXG4gICAgICAgICAgICAvLyBGaXJzdCB3ZSBuZWVkIHRvIGZpZ3VyZSBvdXQgdGhlIG9mZnNldCBvZiB0aGUgYW5jaG9yIHBvaW50XG4gICAgICAgICAgICAvLyByZWxhdGl2ZSB0byB0aGUgY2VudGVyIG9mIHRoZSBpbWFnZSwgYWNjb3VudGluZyBmb3Igcm90YXRpb24uXG4gICAgICAgICAgICBsZXQgb2Zmc2V0WDtcbiAgICAgICAgICAgIGxldCBvZmZzZXRZO1xuICAgICAgICAgICAgLy8gVGhlIG1vZHVsbyBvcGVyYXRvciBjYW4gcmV0dXJuIG5lZ2F0aXZlIHZhbHVlcyBmb3Igc29tZVxuICAgICAgICAgICAgLy8gcm90YXRpb25zLCBzbyB3ZSBoYXZlIHRvIGRvIHNvbWUgZXh0cmEgd29yayB0byBub3JtYWxpemUgaXRcbiAgICAgICAgICAgIHN3aXRjaCAoKCh0aGlzLnN0YXRlLnJvdGF0aW9uICUgMzYwKSArIDM2MCkgJSAzNjApIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIG9mZnNldFggPSB0aGlzLmltYWdlLmN1cnJlbnQuY2xpZW50V2lkdGggLyAyIC0gYW5jaG9yWDtcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0WSA9IHRoaXMuaW1hZ2UuY3VycmVudC5jbGllbnRIZWlnaHQgLyAyIC0gYW5jaG9yWTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA5MDpcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0WCA9IGFuY2hvclkgLSB0aGlzLmltYWdlLmN1cnJlbnQuY2xpZW50SGVpZ2h0IC8gMjtcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0WSA9IHRoaXMuaW1hZ2UuY3VycmVudC5jbGllbnRXaWR0aCAvIDIgLSBhbmNob3JYO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDE4MDpcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0WCA9IGFuY2hvclggLSB0aGlzLmltYWdlLmN1cnJlbnQuY2xpZW50V2lkdGggLyAyO1xuICAgICAgICAgICAgICAgICAgICBvZmZzZXRZID0gYW5jaG9yWSAtIHRoaXMuaW1hZ2UuY3VycmVudC5jbGllbnRIZWlnaHQgLyAyO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI3MDpcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0WCA9IHRoaXMuaW1hZ2UuY3VycmVudC5jbGllbnRIZWlnaHQgLyAyIC0gYW5jaG9yWTtcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0WSA9IGFuY2hvclggLSB0aGlzLmltYWdlLmN1cnJlbnQuY2xpZW50V2lkdGggLyAyO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBBcHBseSB0aGUgem9vbSBhbmQgb2Zmc2V0XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICB6b29tOiBuZXdab29tLFxuICAgICAgICAgICAgICAgIHRyYW5zbGF0aW9uWDogdGhpcy5zdGF0ZS50cmFuc2xhdGlvblggKyAobmV3Wm9vbSAtIG9sZFpvb20pICogb2Zmc2V0WCxcbiAgICAgICAgICAgICAgICB0cmFuc2xhdGlvblk6IHRoaXMuc3RhdGUudHJhbnNsYXRpb25ZICsgKG5ld1pvb20gLSBvbGRab29tKSAqIG9mZnNldFksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgb25XaGVlbCA9IChldjogV2hlZWxFdmVudCkgPT4ge1xuICAgICAgICBpZiAoZXYudGFyZ2V0ID09PSB0aGlzLmltYWdlLmN1cnJlbnQpIHtcbiAgICAgICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgICAgY29uc3QgeyBkZWx0YVkgfSA9IG5vcm1hbGl6ZVdoZWVsRXZlbnQoZXYpO1xuICAgICAgICAgICAgLy8gWm9vbSBpbiBvbiB0aGUgcG9pbnQgb24gdGhlIGltYWdlIHRhcmdldGVkIGJ5IHRoZSBjdXJzb3JcbiAgICAgICAgICAgIHRoaXMuem9vbURlbHRhKC1kZWx0YVkgKiBaT09NX0NPRUZGSUNJRU5ULCBldi5vZmZzZXRYLCBldi5vZmZzZXRZKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBwcml2YXRlIG9uWm9vbUluQ2xpY2sgPSAoKSA9PiB7XG4gICAgICAgIHRoaXMuem9vbURlbHRhKFpPT01fU1RFUCk7XG4gICAgfTtcblxuICAgIHByaXZhdGUgb25ab29tT3V0Q2xpY2sgPSAoKSA9PiB7XG4gICAgICAgIHRoaXMuem9vbURlbHRhKC1aT09NX1NURVApO1xuICAgIH07XG5cbiAgICBwcml2YXRlIG9uS2V5RG93biA9IChldjogS2V5Ym9hcmRFdmVudCkgPT4ge1xuICAgICAgICBpZiAoZXYua2V5ID09PSBLZXkuRVNDQVBFKSB7XG4gICAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB0aGlzLnByb3BzLm9uRmluaXNoZWQoKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBwcml2YXRlIG9uUm90YXRlQ291bnRlckNsb2Nrd2lzZUNsaWNrID0gKCkgPT4ge1xuICAgICAgICBjb25zdCBjdXIgPSB0aGlzLnN0YXRlLnJvdGF0aW9uO1xuICAgICAgICB0aGlzLnNldFpvb21BbmRSb3RhdGlvbihjdXIgLSA5MCk7XG4gICAgfTtcblxuICAgIHByaXZhdGUgb25Sb3RhdGVDbG9ja3dpc2VDbGljayA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgY3VyID0gdGhpcy5zdGF0ZS5yb3RhdGlvbjtcbiAgICAgICAgdGhpcy5zZXRab29tQW5kUm90YXRpb24oY3VyICsgOTApO1xuICAgIH07XG5cbiAgICBwcml2YXRlIG9uRG93bmxvYWRDbGljayA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhXCIpO1xuICAgICAgICBhLmhyZWYgPSB0aGlzLnByb3BzLnNyYztcbiAgICAgICAgYS5kb3dubG9hZCA9IHRoaXMucHJvcHMubmFtZTtcbiAgICAgICAgYS50YXJnZXQgPSBcIl9ibGFua1wiO1xuICAgICAgICBhLnJlbCA9IFwibm9yZWZlcnJlciBub29wZW5lclwiO1xuICAgICAgICBhLmNsaWNrKCk7XG4gICAgfTtcblxuICAgIHByaXZhdGUgb25PcGVuQ29udGV4dE1lbnUgPSAoKSA9PiB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgY29udGV4dE1lbnVEaXNwbGF5ZWQ6IHRydWUsXG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBwcml2YXRlIG9uQ2xvc2VDb250ZXh0TWVudSA9ICgpID0+IHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBjb250ZXh0TWVudURpc3BsYXllZDogZmFsc2UsXG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBwcml2YXRlIG9uUGVybWFsaW5rQ2xpY2tlZCA9IChldjogUmVhY3QuTW91c2VFdmVudCkgPT4ge1xuICAgICAgICAvLyBUaGlzIGFsbG93cyB0aGUgcGVybWFsaW5rIHRvIGJlIG9wZW5lZCBpbiBhIG5ldyB0YWIvd2luZG93IG9yIGNvcGllZCBhc1xuICAgICAgICAvLyBtYXRyaXgudG8sIGJ1dCBhbHNvIGZvciBpdCB0byBlbmFibGUgcm91dGluZyB3aXRoaW4gRWxlbWVudCB3aGVuIGNsaWNrZWQuXG4gICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGRpcy5kaXNwYXRjaCh7XG4gICAgICAgICAgICBhY3Rpb246IEFjdGlvbi5WaWV3Um9vbSxcbiAgICAgICAgICAgIGV2ZW50X2lkOiB0aGlzLnByb3BzLm14RXZlbnQuZ2V0SWQoKSxcbiAgICAgICAgICAgIGhpZ2hsaWdodGVkOiB0cnVlLFxuICAgICAgICAgICAgcm9vbV9pZDogdGhpcy5wcm9wcy5teEV2ZW50LmdldFJvb21JZCgpLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5wcm9wcy5vbkZpbmlzaGVkKCk7XG4gICAgfTtcblxuICAgIHByaXZhdGUgb25TdGFydE1vdmluZyA9IChldjogUmVhY3QuTW91c2VFdmVudCkgPT4ge1xuICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAvLyBEb24ndCBkbyBhbnl0aGluZyBpZiB3ZSBwcmVzc2VkIGFueVxuICAgICAgICAvLyBvdGhlciBidXR0b24gdGhhbiB0aGUgbGVmdCBvbmVcbiAgICAgICAgaWYgKGV2LmJ1dHRvbiAhPT0gMCkgcmV0dXJuO1xuXG4gICAgICAgIC8vIFpvb20gaW4gaWYgd2UgYXJlIGNvbXBsZXRlbHkgem9vbWVkIG91dFxuICAgICAgICBpZiAodGhpcy5zdGF0ZS56b29tID09PSB0aGlzLnN0YXRlLm1pblpvb20pIHtcbiAgICAgICAgICAgIHRoaXMuem9vbSh0aGlzLnN0YXRlLm1heFpvb20sIGV2Lm5hdGl2ZUV2ZW50Lm9mZnNldFgsIGV2Lm5hdGl2ZUV2ZW50Lm9mZnNldFkpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IG1vdmluZzogdHJ1ZSB9KTtcbiAgICAgICAgdGhpcy5wcmV2aW91c1ggPSB0aGlzLnN0YXRlLnRyYW5zbGF0aW9uWDtcbiAgICAgICAgdGhpcy5wcmV2aW91c1kgPSB0aGlzLnN0YXRlLnRyYW5zbGF0aW9uWTtcbiAgICAgICAgdGhpcy5pbml0WCA9IGV2LnBhZ2VYIC0gdGhpcy5zdGF0ZS50cmFuc2xhdGlvblg7XG4gICAgICAgIHRoaXMuaW5pdFkgPSBldi5wYWdlWSAtIHRoaXMuc3RhdGUudHJhbnNsYXRpb25ZO1xuICAgIH07XG5cbiAgICBwcml2YXRlIG9uTW92aW5nID0gKGV2OiBSZWFjdC5Nb3VzZUV2ZW50KSA9PiB7XG4gICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgIGlmICghdGhpcy5zdGF0ZS5tb3ZpbmcpIHJldHVybjtcblxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIHRyYW5zbGF0aW9uWDogZXYucGFnZVggLSB0aGlzLmluaXRYLFxuICAgICAgICAgICAgdHJhbnNsYXRpb25ZOiBldi5wYWdlWSAtIHRoaXMuaW5pdFksXG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBwcml2YXRlIG9uRW5kTW92aW5nID0gKCkgPT4ge1xuICAgICAgICAvLyBab29tIG91dCBpZiB3ZSBoYXZlbid0IG1vdmVkIG11Y2hcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgdGhpcy5zdGF0ZS5tb3ZpbmcgPT09IHRydWUgJiZcbiAgICAgICAgICAgIE1hdGguYWJzKHRoaXMuc3RhdGUudHJhbnNsYXRpb25YIC0gdGhpcy5wcmV2aW91c1gpIDwgWk9PTV9ESVNUQU5DRSAmJlxuICAgICAgICAgICAgTWF0aC5hYnModGhpcy5zdGF0ZS50cmFuc2xhdGlvblkgLSB0aGlzLnByZXZpb3VzWSkgPCBaT09NX0RJU1RBTkNFXG4gICAgICAgICkge1xuICAgICAgICAgICAgdGhpcy56b29tKHRoaXMuc3RhdGUubWluWm9vbSk7XG4gICAgICAgICAgICB0aGlzLmluaXRYID0gMDtcbiAgICAgICAgICAgIHRoaXMuaW5pdFkgPSAwO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBtb3Zpbmc6IGZhbHNlIH0pO1xuICAgIH07XG5cbiAgICBwcml2YXRlIHJlbmRlckNvbnRleHRNZW51KCkge1xuICAgICAgICBsZXQgY29udGV4dE1lbnUgPSBudWxsO1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS5jb250ZXh0TWVudURpc3BsYXllZCkge1xuICAgICAgICAgICAgY29udGV4dE1lbnUgPSAoXG4gICAgICAgICAgICAgICAgPE1lc3NhZ2VDb250ZXh0TWVudVxuICAgICAgICAgICAgICAgICAgICB7Li4uYWJvdmVMZWZ0T2YodGhpcy5jb250ZXh0TWVudUJ1dHRvbi5jdXJyZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpKX1cbiAgICAgICAgICAgICAgICAgICAgbXhFdmVudD17dGhpcy5wcm9wcy5teEV2ZW50fVxuICAgICAgICAgICAgICAgICAgICBwZXJtYWxpbmtDcmVhdG9yPXt0aGlzLnByb3BzLnBlcm1hbGlua0NyZWF0b3J9XG4gICAgICAgICAgICAgICAgICAgIG9uRmluaXNoZWQ9e3RoaXMub25DbG9zZUNvbnRleHRNZW51fVxuICAgICAgICAgICAgICAgICAgICBvbkNsb3NlRGlhbG9nPXt0aGlzLnByb3BzLm9uRmluaXNoZWR9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPFJlYWN0LkZyYWdtZW50PlxuICAgICAgICAgICAgICAgIHsgY29udGV4dE1lbnUgfVxuICAgICAgICAgICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGNvbnN0IHNob3dFdmVudE1ldGEgPSAhIXRoaXMucHJvcHMubXhFdmVudDtcbiAgICAgICAgY29uc3Qgem9vbWluZ0Rpc2FibGVkID0gdGhpcy5zdGF0ZS5tYXhab29tID09PSB0aGlzLnN0YXRlLm1pblpvb207XG5cbiAgICAgICAgbGV0IHRyYW5zaXRpb25DbGFzc05hbWU7XG4gICAgICAgIGlmICh0aGlzLmFuaW1hdGluZ0xvYWRpbmcpIHRyYW5zaXRpb25DbGFzc05hbWUgPSBcIm14X0ltYWdlVmlld19pbWFnZV9hbmltYXRpbmdMb2FkaW5nXCI7XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuc3RhdGUubW92aW5nIHx8ICF0aGlzLmltYWdlSXNMb2FkZWQpIHRyYW5zaXRpb25DbGFzc05hbWUgPSBcIlwiO1xuICAgICAgICBlbHNlIHRyYW5zaXRpb25DbGFzc05hbWUgPSBcIm14X0ltYWdlVmlld19pbWFnZV9hbmltYXRpbmdcIjtcblxuICAgICAgICBsZXQgY3Vyc29yO1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS5tb3ZpbmcpIGN1cnNvciA9IFwiZ3JhYmJpbmdcIjtcbiAgICAgICAgZWxzZSBpZiAoem9vbWluZ0Rpc2FibGVkKSBjdXJzb3IgPSBcImRlZmF1bHRcIjtcbiAgICAgICAgZWxzZSBpZiAodGhpcy5zdGF0ZS56b29tID09PSB0aGlzLnN0YXRlLm1pblpvb20pIGN1cnNvciA9IFwiem9vbS1pblwiO1xuICAgICAgICBlbHNlIGN1cnNvciA9IFwiem9vbS1vdXRcIjtcblxuICAgICAgICBjb25zdCByb3RhdGlvbkRlZ3JlZXMgPSB0aGlzLnN0YXRlLnJvdGF0aW9uICsgXCJkZWdcIjtcbiAgICAgICAgY29uc3Qgem9vbSA9IHRoaXMuc3RhdGUuem9vbTtcbiAgICAgICAgY29uc3QgdHJhbnNsYXRlUGl4ZWxzWCA9IHRoaXMuc3RhdGUudHJhbnNsYXRpb25YICsgXCJweFwiO1xuICAgICAgICBjb25zdCB0cmFuc2xhdGVQaXhlbHNZID0gdGhpcy5zdGF0ZS50cmFuc2xhdGlvblkgKyBcInB4XCI7XG4gICAgICAgIC8vIFRoZSBvcmRlciBvZiB0aGUgdmFsdWVzIGlzIGltcG9ydGFudCFcbiAgICAgICAgLy8gRmlyc3QsIHdlIHRyYW5zbGF0ZSBhbmQgb25seSB0aGVuIHdlIHJvdGF0ZSwgb3RoZXJ3aXNlXG4gICAgICAgIC8vIHdlIHdvdWxkIGFwcGx5IHRoZSB0cmFuc2xhdGlvbiB0byBhbiBhbHJlYWR5IHJvdGF0ZWRcbiAgICAgICAgLy8gaW1hZ2UgY2F1c2luZyBpdCB0cmFuc2xhdGUgaW4gdGhlIHdyb25nIGRpcmVjdGlvbi5cbiAgICAgICAgY29uc3Qgc3R5bGUgPSB7XG4gICAgICAgICAgICBjdXJzb3I6IGN1cnNvcixcbiAgICAgICAgICAgIHRyYW5zZm9ybTogYHRyYW5zbGF0ZVgoJHt0cmFuc2xhdGVQaXhlbHNYfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0ZVkoJHt0cmFuc2xhdGVQaXhlbHNZfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjYWxlKCR7em9vbX0pXG4gICAgICAgICAgICAgICAgICAgICAgICByb3RhdGUoJHtyb3RhdGlvbkRlZ3JlZXN9KWAsXG4gICAgICAgIH07XG5cbiAgICAgICAgbGV0IGluZm87XG4gICAgICAgIGlmIChzaG93RXZlbnRNZXRhKSB7XG4gICAgICAgICAgICBjb25zdCBteEV2ZW50ID0gdGhpcy5wcm9wcy5teEV2ZW50O1xuICAgICAgICAgICAgY29uc3Qgc2hvd1R3ZWx2ZUhvdXIgPSBTZXR0aW5nc1N0b3JlLmdldFZhbHVlKFwic2hvd1R3ZWx2ZUhvdXJUaW1lc3RhbXBzXCIpO1xuICAgICAgICAgICAgbGV0IHBlcm1hbGluayA9IFwiI1wiO1xuICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMucGVybWFsaW5rQ3JlYXRvcikge1xuICAgICAgICAgICAgICAgIHBlcm1hbGluayA9IHRoaXMucHJvcHMucGVybWFsaW5rQ3JlYXRvci5mb3JFdmVudCh0aGlzLnByb3BzLm14RXZlbnQuZ2V0SWQoKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IHNlbmRlck5hbWUgPSBteEV2ZW50LnNlbmRlciA/IG14RXZlbnQuc2VuZGVyLm5hbWUgOiBteEV2ZW50LmdldFNlbmRlcigpO1xuICAgICAgICAgICAgY29uc3Qgc2VuZGVyID0gKFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibXhfSW1hZ2VWaWV3X2luZm9fc2VuZGVyXCI+XG4gICAgICAgICAgICAgICAgICAgIHsgc2VuZGVyTmFtZSB9XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgY29uc3QgbWVzc2FnZVRpbWVzdGFtcCA9IChcbiAgICAgICAgICAgICAgICA8YVxuICAgICAgICAgICAgICAgICAgICBocmVmPXtwZXJtYWxpbmt9XG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMub25QZXJtYWxpbmtDbGlja2VkfVxuICAgICAgICAgICAgICAgICAgICBhcmlhLWxhYmVsPXtmb3JtYXRGdWxsRGF0ZShuZXcgRGF0ZSh0aGlzLnByb3BzLm14RXZlbnQuZ2V0VHMoKSksIHNob3dUd2VsdmVIb3VyLCBmYWxzZSl9XG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICA8TWVzc2FnZVRpbWVzdGFtcFxuICAgICAgICAgICAgICAgICAgICAgICAgc2hvd0Z1bGxEYXRlPXt0cnVlfVxuICAgICAgICAgICAgICAgICAgICAgICAgc2hvd1R3ZWx2ZUhvdXI9e3Nob3dUd2VsdmVIb3VyfVxuICAgICAgICAgICAgICAgICAgICAgICAgdHM9e214RXZlbnQuZ2V0VHMoKX1cbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3dTZWNvbmRzPXtmYWxzZX1cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgY29uc3QgYXZhdGFyID0gKFxuICAgICAgICAgICAgICAgIDxNZW1iZXJBdmF0YXJcbiAgICAgICAgICAgICAgICAgICAgbWVtYmVyPXtteEV2ZW50LnNlbmRlcn1cbiAgICAgICAgICAgICAgICAgICAgZmFsbGJhY2tVc2VySWQ9e214RXZlbnQuZ2V0U2VuZGVyKCl9XG4gICAgICAgICAgICAgICAgICAgIHdpZHRoPXszMn1cbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PXszMn1cbiAgICAgICAgICAgICAgICAgICAgdmlld1VzZXJPbkNsaWNrPXt0cnVlfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBpbmZvID0gKFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibXhfSW1hZ2VWaWV3X2luZm9fd3JhcHBlclwiPlxuICAgICAgICAgICAgICAgICAgICB7IGF2YXRhciB9XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibXhfSW1hZ2VWaWV3X2luZm9cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIHsgc2VuZGVyIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHsgbWVzc2FnZVRpbWVzdGFtcCB9XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIElmIHRoZXJlIGlzIG5vIGV2ZW50IC0gd2UncmUgdmlld2luZyBhbiBhdmF0YXIsIHdlIHNldFxuICAgICAgICAgICAgLy8gYW4gZW1wdHkgZGl2IGhlcmUsIHNpbmNlIHRoZSBwYW5lbCB1c2VzIHNwYWNlLWJldHdlZW5cbiAgICAgICAgICAgIC8vIGFuZCB3ZSB3YW50IHRoZSBzYW1lIHBsYWNlbWVudCBvZiBlbGVtZW50c1xuICAgICAgICAgICAgaW5mbyA9IChcbiAgICAgICAgICAgICAgICA8ZGl2IC8+XG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGNvbnRleHRNZW51QnV0dG9uO1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5teEV2ZW50KSB7XG4gICAgICAgICAgICBjb250ZXh0TWVudUJ1dHRvbiA9IChcbiAgICAgICAgICAgICAgICA8Q29udGV4dE1lbnVUb29sdGlwQnV0dG9uXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cIm14X0ltYWdlVmlld19idXR0b24gbXhfSW1hZ2VWaWV3X2J1dHRvbl9tb3JlXCJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU9e190KFwiT3B0aW9uc1wiKX1cbiAgICAgICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5vbk9wZW5Db250ZXh0TWVudX1cbiAgICAgICAgICAgICAgICAgICAgaW5wdXRSZWY9e3RoaXMuY29udGV4dE1lbnVCdXR0b259XG4gICAgICAgICAgICAgICAgICAgIGlzRXhwYW5kZWQ9e3RoaXMuc3RhdGUuY29udGV4dE1lbnVEaXNwbGF5ZWR9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgem9vbU91dEJ1dHRvbjtcbiAgICAgICAgbGV0IHpvb21JbkJ1dHRvbjtcbiAgICAgICAgaWYgKCF6b29taW5nRGlzYWJsZWQpIHtcbiAgICAgICAgICAgIHpvb21PdXRCdXR0b24gPSAoXG4gICAgICAgICAgICAgICAgPEFjY2Vzc2libGVUb29sdGlwQnV0dG9uXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cIm14X0ltYWdlVmlld19idXR0b24gbXhfSW1hZ2VWaWV3X2J1dHRvbl96b29tT3V0XCJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU9e190KFwiWm9vbSBvdXRcIil9XG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMub25ab29tT3V0Q2xpY2t9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB6b29tSW5CdXR0b24gPSAoXG4gICAgICAgICAgICAgICAgPEFjY2Vzc2libGVUb29sdGlwQnV0dG9uXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cIm14X0ltYWdlVmlld19idXR0b24gbXhfSW1hZ2VWaWV3X2J1dHRvbl96b29tSW5cIlxuICAgICAgICAgICAgICAgICAgICB0aXRsZT17X3QoXCJab29tIGluXCIpfVxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLm9uWm9vbUluQ2xpY2t9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPEZvY3VzTG9ja1xuICAgICAgICAgICAgICAgIHJldHVybkZvY3VzPXt0cnVlfVxuICAgICAgICAgICAgICAgIGxvY2tQcm9wcz17e1xuICAgICAgICAgICAgICAgICAgICBvbktleURvd246IHRoaXMub25LZXlEb3duLFxuICAgICAgICAgICAgICAgICAgICByb2xlOiBcImRpYWxvZ1wiLFxuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwibXhfSW1hZ2VWaWV3XCJcbiAgICAgICAgICAgICAgICByZWY9e3RoaXMuZm9jdXNMb2NrfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibXhfSW1hZ2VWaWV3X3BhbmVsXCI+XG4gICAgICAgICAgICAgICAgICAgIHsgaW5mbyB9XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibXhfSW1hZ2VWaWV3X3Rvb2xiYXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIHsgem9vbU91dEJ1dHRvbiB9XG4gICAgICAgICAgICAgICAgICAgICAgICB7IHpvb21JbkJ1dHRvbiB9XG4gICAgICAgICAgICAgICAgICAgICAgICA8QWNjZXNzaWJsZVRvb2x0aXBCdXR0b25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJteF9JbWFnZVZpZXdfYnV0dG9uIG14X0ltYWdlVmlld19idXR0b25fcm90YXRlQ0NXXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT17X3QoXCJSb3RhdGUgTGVmdFwiKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLm9uUm90YXRlQ291bnRlckNsb2Nrd2lzZUNsaWNrfVxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxBY2Nlc3NpYmxlVG9vbHRpcEJ1dHRvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cIm14X0ltYWdlVmlld19idXR0b24gbXhfSW1hZ2VWaWV3X2J1dHRvbl9yb3RhdGVDV1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9e190KFwiUm90YXRlIFJpZ2h0XCIpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMub25Sb3RhdGVDbG9ja3dpc2VDbGlja31cbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8QWNjZXNzaWJsZVRvb2x0aXBCdXR0b25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJteF9JbWFnZVZpZXdfYnV0dG9uIG14X0ltYWdlVmlld19idXR0b25fZG93bmxvYWRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPXtfdChcIkRvd25sb2FkXCIpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMub25Eb3dubG9hZENsaWNrfVxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIHsgY29udGV4dE1lbnVCdXR0b24gfVxuICAgICAgICAgICAgICAgICAgICAgICAgPEFjY2Vzc2libGVUb29sdGlwQnV0dG9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwibXhfSW1hZ2VWaWV3X2J1dHRvbiBteF9JbWFnZVZpZXdfYnV0dG9uX2Nsb3NlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT17X3QoXCJDbG9zZVwiKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLnByb3BzLm9uRmluaXNoZWR9XG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgeyB0aGlzLnJlbmRlckNvbnRleHRNZW51KCkgfVxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cIm14X0ltYWdlVmlld19pbWFnZV93cmFwcGVyXCJcbiAgICAgICAgICAgICAgICAgICAgcmVmPXt0aGlzLmltYWdlV3JhcHBlcn1cbiAgICAgICAgICAgICAgICAgICAgb25Nb3VzZURvd249e3RoaXMucHJvcHMub25GaW5pc2hlZH1cbiAgICAgICAgICAgICAgICAgICAgb25Nb3VzZU1vdmU9e3RoaXMub25Nb3Zpbmd9XG4gICAgICAgICAgICAgICAgICAgIG9uTW91c2VVcD17dGhpcy5vbkVuZE1vdmluZ31cbiAgICAgICAgICAgICAgICAgICAgb25Nb3VzZUxlYXZlPXt0aGlzLm9uRW5kTW92aW5nfVxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgPGltZ1xuICAgICAgICAgICAgICAgICAgICAgICAgc3JjPXt0aGlzLnByb3BzLnNyY31cbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXtzdHlsZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIGFsdD17dGhpcy5wcm9wcy5uYW1lfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmVmPXt0aGlzLmltYWdlfVxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtgbXhfSW1hZ2VWaWV3X2ltYWdlICR7dHJhbnNpdGlvbkNsYXNzTmFtZX1gfVxuICAgICAgICAgICAgICAgICAgICAgICAgZHJhZ2dhYmxlPXt0cnVlfVxuICAgICAgICAgICAgICAgICAgICAgICAgb25Nb3VzZURvd249e3RoaXMub25TdGFydE1vdmluZ31cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvRm9jdXNMb2NrPlxuICAgICAgICApO1xuICAgIH1cbn1cbiJdfQ==