"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _AccessibleButton = _interopRequireDefault(require("./AccessibleButton"));

var _languageHandler = require("../../../languageHandler");

var _Keyboard = require("../../../Keyboard");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _dec, _class;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class MenuOption extends _react.default.Component {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "onMouseEnter", () => {
      this.props.onMouseEnter(this.props.dropdownKey);
    });
    (0, _defineProperty2.default)(this, "onClick", e => {
      e.preventDefault();
      e.stopPropagation();
      this.props.onClick(this.props.dropdownKey);
    });
  }

  render() {
    const optClasses = (0, _classnames.default)({
      mx_Dropdown_option: true,
      mx_Dropdown_option_highlight: this.props.highlighted
    });
    return /*#__PURE__*/_react.default.createElement("div", {
      id: this.props.id,
      className: optClasses,
      onClick: this.onClick,
      onMouseEnter: this.onMouseEnter,
      role: "option",
      "aria-selected": this.props.highlighted,
      ref: this.props.inputRef
    }, this.props.children);
  }

}

(0, _defineProperty2.default)(MenuOption, "defaultProps", {
  disabled: false
});
let Dropdown = (
/*
 * Reusable dropdown select control, akin to react-select,
 * but somewhat simpler as react-select is 79KB of minified
 * javascript.
 */
_dec = (0, _replaceableComponent.replaceableComponent)("views.elements.Dropdown"), _dec(_class = class Dropdown extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "buttonRef", /*#__PURE__*/(0, _react.createRef)());
    (0, _defineProperty2.default)(this, "dropdownRootElement", null);
    (0, _defineProperty2.default)(this, "ignoreEvent", null);
    (0, _defineProperty2.default)(this, "childrenByKey", {});
    (0, _defineProperty2.default)(this, "onDocumentClick", ev => {
      // Close the dropdown if the user clicks anywhere that isn't
      // within our root element
      if (ev !== this.ignoreEvent) {
        this.setState({
          expanded: false
        });
      }
    });
    (0, _defineProperty2.default)(this, "onRootClick", ev => {
      // This captures any clicks that happen within our elements,
      // such that we can then ignore them when they're seen by the
      // click listener on the document handler, ie. not close the
      // dropdown immediately after opening it.
      // NB. We can't just stopPropagation() because then the event
      // doesn't reach the React onClick().
      this.ignoreEvent = ev;
    });
    (0, _defineProperty2.default)(this, "onAccessibleButtonClick", ev => {
      if (this.props.disabled) return;

      if (!this.state.expanded) {
        this.setState({
          expanded: true
        });
        ev.preventDefault();
      } else if (ev.key === _Keyboard.Key.ENTER) {
        // the accessible button consumes enter onKeyDown for firing onClick, so handle it here
        this.props.onOptionChange(this.state.highlightedOption);
        this.close();
      } else if (!ev.key) {
        // collapse on other non-keyboard event activations
        this.setState({
          expanded: false
        });
        ev.preventDefault();
      }
    });
    (0, _defineProperty2.default)(this, "onMenuOptionClick", dropdownKey => {
      this.close();
      this.props.onOptionChange(dropdownKey);
    });
    (0, _defineProperty2.default)(this, "onKeyDown", e => {
      let handled = true; // These keys don't generate keypress events and so needs to be on keyup

      switch (e.key) {
        case _Keyboard.Key.ENTER:
          this.props.onOptionChange(this.state.highlightedOption);
        // fallthrough

        case _Keyboard.Key.ESCAPE:
          this.close();
          break;

        case _Keyboard.Key.ARROW_DOWN:
          this.setState({
            highlightedOption: this.nextOption(this.state.highlightedOption)
          });
          break;

        case _Keyboard.Key.ARROW_UP:
          this.setState({
            highlightedOption: this.prevOption(this.state.highlightedOption)
          });
          break;

        default:
          handled = false;
      }

      if (handled) {
        e.preventDefault();
        e.stopPropagation();
      }
    });
    (0, _defineProperty2.default)(this, "onInputChange", e => {
      this.setState({
        searchQuery: e.currentTarget.value
      });

      if (this.props.onSearchChange) {
        this.props.onSearchChange(e.currentTarget.value);
      }
    });
    (0, _defineProperty2.default)(this, "collectRoot", e => {
      if (this.dropdownRootElement) {
        this.dropdownRootElement.removeEventListener('click', this.onRootClick, false);
      }

      if (e) {
        e.addEventListener('click', this.onRootClick, false);
      }

      this.dropdownRootElement = e;
    });
    (0, _defineProperty2.default)(this, "setHighlightedOption", optionKey => {
      this.setState({
        highlightedOption: optionKey
      });
    });
    this.reindexChildren(this.props.children);

    const firstChild = _react.default.Children.toArray(props.children)[0];

    this.state = {
      // True if the menu is dropped-down
      expanded: false,
      // The key of the highlighted option
      // (the option that would become selected if you pressed enter)
      highlightedOption: firstChild ? firstChild.key : null,
      // the current search query
      searchQuery: ''
    }; // Listen for all clicks on the document so we can close the
    // menu when the user clicks somewhere else

    document.addEventListener('click', this.onDocumentClick, false);
  }

  componentWillUnmount() {
    document.removeEventListener('click', this.onDocumentClick, false);
  } // TODO: [REACT-WARNING] Replace with appropriate lifecycle event


  UNSAFE_componentWillReceiveProps(nextProps) {
    // eslint-disable-line
    if (!nextProps.children || nextProps.children.length === 0) {
      return;
    }

    this.reindexChildren(nextProps.children);
    const firstChild = nextProps.children[0];
    this.setState({
      highlightedOption: firstChild ? firstChild.key : null
    });
  }

  reindexChildren(children) {
    this.childrenByKey = {};

    _react.default.Children.forEach(children, child => {
      this.childrenByKey[child.key] = child;
    });
  }

  close() {
    this.setState({
      expanded: false
    }); // their focus was on the input, its getting unmounted, move it to the button

    if (this.buttonRef.current) {
      this.buttonRef.current.focus();
    }
  }

  nextOption(optionKey) {
    const keys = Object.keys(this.childrenByKey);
    const index = keys.indexOf(optionKey);
    return keys[(index + 1) % keys.length];
  }

  prevOption(optionKey) {
    const keys = Object.keys(this.childrenByKey);
    const index = keys.indexOf(optionKey);
    return keys[index <= 0 ? keys.length - 1 : (index - 1) % keys.length];
  }

  scrollIntoView(node) {
    if (node) {
      node.scrollIntoView({
        block: "nearest",
        behavior: "auto"
      });
    }
  }

  getMenuOptions() {
    const options = _react.default.Children.map(this.props.children, child => {
      const highlighted = this.state.highlightedOption === child.key;
      return /*#__PURE__*/_react.default.createElement(MenuOption, {
        id: `${this.props.id}__${child.key}`,
        key: child.key,
        dropdownKey: child.key,
        highlighted: highlighted,
        onMouseEnter: this.setHighlightedOption,
        onClick: this.onMenuOptionClick,
        inputRef: highlighted ? this.scrollIntoView : undefined
      }, child);
    });

    if (options.length === 0) {
      return [/*#__PURE__*/_react.default.createElement("div", {
        key: "0",
        className: "mx_Dropdown_option",
        role: "option"
      }, (0, _languageHandler._t)("No results"))];
    }

    return options;
  }

  render() {
    let currentValue;
    const menuStyle = {};
    if (this.props.menuWidth) menuStyle.width = this.props.menuWidth;
    let menu;

    if (this.state.expanded) {
      if (this.props.searchEnabled) {
        currentValue = /*#__PURE__*/_react.default.createElement("input", {
          type: "text",
          autoFocus: true,
          className: "mx_Dropdown_option",
          onChange: this.onInputChange,
          value: this.state.searchQuery,
          role: "combobox",
          "aria-autocomplete": "list",
          "aria-activedescendant": `${this.props.id}__${this.state.highlightedOption}`,
          "aria-owns": `${this.props.id}_listbox`,
          "aria-disabled": this.props.disabled,
          "aria-label": this.props.label,
          onKeyDown: this.onKeyDown
        });
      }

      menu = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_Dropdown_menu",
        style: menuStyle,
        role: "listbox",
        id: `${this.props.id}_listbox`
      }, this.getMenuOptions());
    }

    if (!currentValue) {
      const selectedChild = this.props.getShortOption ? this.props.getShortOption(this.props.value) : this.childrenByKey[this.props.value];
      currentValue = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_Dropdown_option",
        id: `${this.props.id}_value`
      }, selectedChild);
    }

    const dropdownClasses = {
      mx_Dropdown: true,
      mx_Dropdown_disabled: this.props.disabled
    };

    if (this.props.className) {
      dropdownClasses[this.props.className] = true;
    } // Note the menu sits inside the AccessibleButton div so it's anchored
    // to the input, but overflows below it. The root contains both.


    return /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)(dropdownClasses),
      ref: this.collectRoot
    }, /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      className: "mx_Dropdown_input mx_no_textinput",
      onClick: this.onAccessibleButtonClick,
      "aria-haspopup": "listbox",
      "aria-expanded": this.state.expanded,
      disabled: this.props.disabled,
      inputRef: this.buttonRef,
      "aria-label": this.props.label,
      "aria-describedby": `${this.props.id}_value`,
      onKeyDown: this.onKeyDown
    }, currentValue, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_Dropdown_arrow"
    }), menu));
  }

}) || _class);
exports.default = Dropdown;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,