"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _FlairStore = _interopRequireDefault(require("../../../stores/FlairStore"));

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _MatrixClientContext = _interopRequireDefault(require("../../../contexts/MatrixClientContext"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _Media = require("../../../customisations/Media");

var _logger = require("matrix-js-sdk/src/logger");

var _dec, _class;

class FlairAvatar extends _react.default.Component {
  constructor() {
    super();
    this.onClick = this.onClick.bind(this);
  }

  onClick(ev) {
    ev.preventDefault(); // Don't trigger onClick of parent element

    ev.stopPropagation();

    _dispatcher.default.dispatch({
      action: 'view_group',
      group_id: this.props.groupProfile.groupId
    });
  }

  render() {
    const httpUrl = (0, _Media.mediaFromMxc)(this.props.groupProfile.avatarUrl).getSquareThumbnailHttp(16);
    const tooltip = this.props.groupProfile.name ? `${this.props.groupProfile.name} (${this.props.groupProfile.groupId})` : this.props.groupProfile.groupId;
    return /*#__PURE__*/_react.default.createElement("img", {
      src: httpUrl,
      width: "16",
      height: "16",
      onClick: this.onClick,
      title: tooltip
    });
  }

}

FlairAvatar.propTypes = {
  groupProfile: _propTypes.default.shape({
    groupId: _propTypes.default.string.isRequired,
    name: _propTypes.default.string,
    avatarUrl: _propTypes.default.string.isRequired
  })
};
FlairAvatar.contextType = _MatrixClientContext.default;
let Flair = (_dec = (0, _replaceableComponent.replaceableComponent)("views.elements.Flair"), _dec(_class = class Flair extends _react.default.Component {
  constructor() {
    super();
    this.state = {
      profiles: []
    };
  }

  componentDidMount() {
    this._unmounted = false;

    this._generateAvatars(this.props.groups);
  }

  componentWillUnmount() {
    this._unmounted = true;
  } // TODO: [REACT-WARNING] Replace with appropriate lifecycle event


  UNSAFE_componentWillReceiveProps(newProps) {
    // eslint-disable-line camelcase
    this._generateAvatars(newProps.groups);
  }

  async _getGroupProfiles(groups) {
    const profiles = [];

    for (const groupId of groups) {
      let groupProfile = null;

      try {
        groupProfile = await _FlairStore.default.getGroupProfileCached(this.context, groupId);
      } catch (err) {
        _logger.logger.error('Could not get profile for group', groupId, err);
      }

      profiles.push(groupProfile);
    }

    return profiles.filter(p => p !== null);
  }

  async _generateAvatars(groups) {
    if (!groups || groups.length === 0) {
      return;
    }

    const profiles = await this._getGroupProfiles(groups);

    if (!this.unmounted) {
      this.setState({
        profiles: profiles.filter(profile => {
          return profile ? profile.avatarUrl : false;
        })
      });
    }
  }

  render() {
    if (this.state.profiles.length === 0) {
      return null;
    }

    const avatars = this.state.profiles.map((profile, index) => {
      return /*#__PURE__*/_react.default.createElement(FlairAvatar, {
        key: index,
        groupProfile: profile
      });
    });
    return /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_Flair"
    }, avatars);
  }

}) || _class);
exports.default = Flair;
Flair.propTypes = {
  groups: _propTypes.default.arrayOf(_propTypes.default.string)
};
Flair.contextType = _MatrixClientContext.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,