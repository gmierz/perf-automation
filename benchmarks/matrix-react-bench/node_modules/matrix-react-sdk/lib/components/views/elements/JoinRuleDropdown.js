"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _partials = require("matrix-js-sdk/src/@types/partials");

var _Dropdown = _interopRequireDefault(require("./Dropdown"));

/*
Copyright 2021 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const JoinRuleDropdown = ({
  label,
  labelInvite,
  labelPublic,
  labelRestricted,
  value,
  width = 448,
  onChange
}) => {
  const options = [/*#__PURE__*/_react.default.createElement("div", {
    key: _partials.JoinRule.Invite,
    className: "mx_JoinRuleDropdown_invite"
  }, labelInvite), /*#__PURE__*/_react.default.createElement("div", {
    key: _partials.JoinRule.Public,
    className: "mx_JoinRuleDropdown_public"
  }, labelPublic)];

  if (labelRestricted) {
    options.unshift( /*#__PURE__*/_react.default.createElement("div", {
      key: _partials.JoinRule.Restricted,
      className: "mx_JoinRuleDropdown_restricted"
    }, labelRestricted));
  }

  return /*#__PURE__*/_react.default.createElement(_Dropdown.default, {
    id: "mx_JoinRuleDropdown",
    className: "mx_JoinRuleDropdown",
    onOptionChange: onChange,
    menuWidth: width,
    value: value,
    label: label
  }, options);
};

var _default = JoinRuleDropdown;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL2VsZW1lbnRzL0pvaW5SdWxlRHJvcGRvd24udHN4Il0sIm5hbWVzIjpbIkpvaW5SdWxlRHJvcGRvd24iLCJsYWJlbCIsImxhYmVsSW52aXRlIiwibGFiZWxQdWJsaWMiLCJsYWJlbFJlc3RyaWN0ZWQiLCJ2YWx1ZSIsIndpZHRoIiwib25DaGFuZ2UiLCJvcHRpb25zIiwiSm9pblJ1bGUiLCJJbnZpdGUiLCJQdWJsaWMiLCJ1bnNoaWZ0IiwiUmVzdHJpY3RlZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBZ0JBOztBQUNBOztBQUVBOztBQW5CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFpQkEsTUFBTUEsZ0JBQWdCLEdBQUcsQ0FBQztBQUN0QkMsRUFBQUEsS0FEc0I7QUFFdEJDLEVBQUFBLFdBRnNCO0FBR3RCQyxFQUFBQSxXQUhzQjtBQUl0QkMsRUFBQUEsZUFKc0I7QUFLdEJDLEVBQUFBLEtBTHNCO0FBTXRCQyxFQUFBQSxLQUFLLEdBQUcsR0FOYztBQU90QkMsRUFBQUE7QUFQc0IsQ0FBRCxLQVFYO0FBQ1YsUUFBTUMsT0FBTyxHQUFHLGNBQ1o7QUFBSyxJQUFBLEdBQUcsRUFBRUMsbUJBQVNDLE1BQW5CO0FBQTJCLElBQUEsU0FBUyxFQUFDO0FBQXJDLEtBQ01SLFdBRE4sQ0FEWSxlQUlaO0FBQUssSUFBQSxHQUFHLEVBQUVPLG1CQUFTRSxNQUFuQjtBQUEyQixJQUFBLFNBQVMsRUFBQztBQUFyQyxLQUNNUixXQUROLENBSlksQ0FBaEI7O0FBU0EsTUFBSUMsZUFBSixFQUFxQjtBQUNqQkksSUFBQUEsT0FBTyxDQUFDSSxPQUFSLGVBQWdCO0FBQUssTUFBQSxHQUFHLEVBQUVILG1CQUFTSSxVQUFuQjtBQUErQixNQUFBLFNBQVMsRUFBQztBQUF6QyxPQUNWVCxlQURVLENBQWhCO0FBR0g7O0FBRUQsc0JBQU8sNkJBQUMsaUJBQUQ7QUFDSCxJQUFBLEVBQUUsRUFBQyxxQkFEQTtBQUVILElBQUEsU0FBUyxFQUFDLHFCQUZQO0FBR0gsSUFBQSxjQUFjLEVBQUVHLFFBSGI7QUFJSCxJQUFBLFNBQVMsRUFBRUQsS0FKUjtBQUtILElBQUEsS0FBSyxFQUFFRCxLQUxKO0FBTUgsSUFBQSxLQUFLLEVBQUVKO0FBTkosS0FRRE8sT0FSQyxDQUFQO0FBVUgsQ0FsQ0Q7O2VBb0NlUixnQiIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5Db3B5cmlnaHQgMjAyMSBUaGUgTWF0cml4Lm9yZyBGb3VuZGF0aW9uIEMuSS5DLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBKb2luUnVsZSB9IGZyb20gJ21hdHJpeC1qcy1zZGsvc3JjL0B0eXBlcy9wYXJ0aWFscyc7XG5cbmltcG9ydCBEcm9wZG93biBmcm9tIFwiLi9Ecm9wZG93blwiO1xuXG5pbnRlcmZhY2UgSVByb3BzIHtcbiAgICB2YWx1ZTogSm9pblJ1bGU7XG4gICAgbGFiZWw6IHN0cmluZztcbiAgICB3aWR0aD86IG51bWJlcjtcbiAgICBsYWJlbEludml0ZTogc3RyaW5nO1xuICAgIGxhYmVsUHVibGljOiBzdHJpbmc7XG4gICAgbGFiZWxSZXN0cmljdGVkPzogc3RyaW5nOyAvLyBpZiBvbWl0dGVkIHRoZW4gdGhpcyBvcHRpb24gd2lsbCBiZSBoaWRkZW4sIGUuZyBpZiB1bnN1cHBvcnRlZFxuICAgIG9uQ2hhbmdlKHZhbHVlOiBKb2luUnVsZSk6IHZvaWQ7XG59XG5cbmNvbnN0IEpvaW5SdWxlRHJvcGRvd24gPSAoe1xuICAgIGxhYmVsLFxuICAgIGxhYmVsSW52aXRlLFxuICAgIGxhYmVsUHVibGljLFxuICAgIGxhYmVsUmVzdHJpY3RlZCxcbiAgICB2YWx1ZSxcbiAgICB3aWR0aCA9IDQ0OCxcbiAgICBvbkNoYW5nZSxcbn06IElQcm9wcykgPT4ge1xuICAgIGNvbnN0IG9wdGlvbnMgPSBbXG4gICAgICAgIDxkaXYga2V5PXtKb2luUnVsZS5JbnZpdGV9IGNsYXNzTmFtZT1cIm14X0pvaW5SdWxlRHJvcGRvd25faW52aXRlXCI+XG4gICAgICAgICAgICB7IGxhYmVsSW52aXRlIH1cbiAgICAgICAgPC9kaXY+LFxuICAgICAgICA8ZGl2IGtleT17Sm9pblJ1bGUuUHVibGljfSBjbGFzc05hbWU9XCJteF9Kb2luUnVsZURyb3Bkb3duX3B1YmxpY1wiPlxuICAgICAgICAgICAgeyBsYWJlbFB1YmxpYyB9XG4gICAgICAgIDwvZGl2PixcbiAgICBdO1xuXG4gICAgaWYgKGxhYmVsUmVzdHJpY3RlZCkge1xuICAgICAgICBvcHRpb25zLnVuc2hpZnQoPGRpdiBrZXk9e0pvaW5SdWxlLlJlc3RyaWN0ZWR9IGNsYXNzTmFtZT1cIm14X0pvaW5SdWxlRHJvcGRvd25fcmVzdHJpY3RlZFwiPlxuICAgICAgICAgICAgeyBsYWJlbFJlc3RyaWN0ZWQgfVxuICAgICAgICA8L2Rpdj4pO1xuICAgIH1cblxuICAgIHJldHVybiA8RHJvcGRvd25cbiAgICAgICAgaWQ9XCJteF9Kb2luUnVsZURyb3Bkb3duXCJcbiAgICAgICAgY2xhc3NOYW1lPVwibXhfSm9pblJ1bGVEcm9wZG93blwiXG4gICAgICAgIG9uT3B0aW9uQ2hhbmdlPXtvbkNoYW5nZX1cbiAgICAgICAgbWVudVdpZHRoPXt3aWR0aH1cbiAgICAgICAgdmFsdWU9e3ZhbHVlfVxuICAgICAgICBsYWJlbD17bGFiZWx9XG4gICAgPlxuICAgICAgICB7IG9wdGlvbnMgfVxuICAgIDwvRHJvcGRvd24+O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgSm9pblJ1bGVEcm9wZG93bjtcbiJdfQ==