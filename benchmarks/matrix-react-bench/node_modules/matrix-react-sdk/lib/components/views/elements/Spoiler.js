"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _dec, _class;

let Spoiler = (_dec = (0, _replaceableComponent.replaceableComponent)("views.elements.Spoiler"), _dec(_class = class Spoiler extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "toggleVisible", e => {
      if (!this.state.visible) {
        // we are un-blurring, we don't want this click to propagate to potential child pills
        e.preventDefault();
        e.stopPropagation();
      }

      this.setState({
        visible: !this.state.visible
      });
    });
    this.state = {
      visible: false
    };
  }

  render() {
    const reason = this.props.reason ? /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_EventTile_spoiler_reason"
    }, "(" + this.props.reason + ")") : null; // react doesn't allow appending a DOM node as child.
    // as such, we pass the this.props.contentHtml instead and then set the raw
    // HTML content. This is secure as the contents have already been parsed previously

    return /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_EventTile_spoiler" + (this.state.visible ? " visible" : ""),
      onClick: this.toggleVisible
    }, reason, "\xA0", /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_EventTile_spoiler_content",
      dangerouslySetInnerHTML: {
        __html: this.props.contentHtml
      }
    }));
  }

}) || _class);
exports.default = Spoiler;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL2VsZW1lbnRzL1Nwb2lsZXIudHN4Il0sIm5hbWVzIjpbIlNwb2lsZXIiLCJSZWFjdCIsIkNvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwicHJvcHMiLCJlIiwic3RhdGUiLCJ2aXNpYmxlIiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJzZXRTdGF0ZSIsInJlbmRlciIsInJlYXNvbiIsInRvZ2dsZVZpc2libGUiLCJfX2h0bWwiLCJjb250ZW50SHRtbCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFnQkE7O0FBQ0E7Ozs7SUFZcUJBLE8sV0FEcEIsZ0RBQXFCLHdCQUFyQixDLGdCQUFELE1BQ3FCQSxPQURyQixTQUNxQ0MsZUFBTUMsU0FEM0MsQ0FDcUU7QUFDakVDLEVBQUFBLFdBQVcsQ0FBQ0MsS0FBRCxFQUFnQjtBQUN2QixVQUFNQSxLQUFOO0FBRHVCLHlEQU9GQyxDQUFELElBQStCO0FBQ25ELFVBQUksQ0FBQyxLQUFLQyxLQUFMLENBQVdDLE9BQWhCLEVBQXlCO0FBQ3JCO0FBQ0FGLFFBQUFBLENBQUMsQ0FBQ0csY0FBRjtBQUNBSCxRQUFBQSxDQUFDLENBQUNJLGVBQUY7QUFDSDs7QUFDRCxXQUFLQyxRQUFMLENBQWM7QUFBRUgsUUFBQUEsT0FBTyxFQUFFLENBQUMsS0FBS0QsS0FBTCxDQUFXQztBQUF2QixPQUFkO0FBQ0gsS0FkMEI7QUFFdkIsU0FBS0QsS0FBTCxHQUFhO0FBQ1RDLE1BQUFBLE9BQU8sRUFBRTtBQURBLEtBQWI7QUFHSDs7QUFXTUksRUFBQUEsTUFBTSxHQUFnQjtBQUN6QixVQUFNQyxNQUFNLEdBQUcsS0FBS1IsS0FBTCxDQUFXUSxNQUFYLGdCQUNYO0FBQU0sTUFBQSxTQUFTLEVBQUM7QUFBaEIsT0FBZ0QsTUFBTSxLQUFLUixLQUFMLENBQVdRLE1BQWpCLEdBQTBCLEdBQTFFLENBRFcsR0FFWCxJQUZKLENBRHlCLENBSXpCO0FBQ0E7QUFDQTs7QUFDQSx3QkFDSTtBQUFNLE1BQUEsU0FBUyxFQUFFLDBCQUEwQixLQUFLTixLQUFMLENBQVdDLE9BQVgsR0FBcUIsVUFBckIsR0FBa0MsRUFBNUQsQ0FBakI7QUFBa0YsTUFBQSxPQUFPLEVBQUUsS0FBS007QUFBaEcsT0FDTUQsTUFETix1QkFHSTtBQUFNLE1BQUEsU0FBUyxFQUFDLDhCQUFoQjtBQUErQyxNQUFBLHVCQUF1QixFQUFFO0FBQUVFLFFBQUFBLE1BQU0sRUFBRSxLQUFLVixLQUFMLENBQVdXO0FBQXJCO0FBQXhFLE1BSEosQ0FESjtBQU9IOztBQS9CZ0UsQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gQ29weXJpZ2h0IDIwMTkgU29ydW5vbWVcblxuIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cbiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgcmVwbGFjZWFibGVDb21wb25lbnQgfSBmcm9tIFwiLi4vLi4vLi4vdXRpbHMvcmVwbGFjZWFibGVDb21wb25lbnRcIjtcblxuaW50ZXJmYWNlIElQcm9wcyB7XG4gICAgcmVhc29uPzogc3RyaW5nO1xuICAgIGNvbnRlbnRIdG1sOiBzdHJpbmc7XG59XG5cbmludGVyZmFjZSBJU3RhdGUge1xuICAgIHZpc2libGU6IGJvb2xlYW47XG59XG5cbkByZXBsYWNlYWJsZUNvbXBvbmVudChcInZpZXdzLmVsZW1lbnRzLlNwb2lsZXJcIilcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNwb2lsZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8SVByb3BzLCBJU3RhdGU+IHtcbiAgICBjb25zdHJ1Y3Rvcihwcm9wczogSVByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIHZpc2libGU6IGZhbHNlLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHByaXZhdGUgdG9nZ2xlVmlzaWJsZSA9IChlOiBSZWFjdC5Nb3VzZUV2ZW50KTogdm9pZCA9PiB7XG4gICAgICAgIGlmICghdGhpcy5zdGF0ZS52aXNpYmxlKSB7XG4gICAgICAgICAgICAvLyB3ZSBhcmUgdW4tYmx1cnJpbmcsIHdlIGRvbid0IHdhbnQgdGhpcyBjbGljayB0byBwcm9wYWdhdGUgdG8gcG90ZW50aWFsIGNoaWxkIHBpbGxzXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyB2aXNpYmxlOiAhdGhpcy5zdGF0ZS52aXNpYmxlIH0pO1xuICAgIH07XG5cbiAgICBwdWJsaWMgcmVuZGVyKCk6IEpTWC5FbGVtZW50IHtcbiAgICAgICAgY29uc3QgcmVhc29uID0gdGhpcy5wcm9wcy5yZWFzb24gPyAoXG4gICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJteF9FdmVudFRpbGVfc3BvaWxlcl9yZWFzb25cIj57IFwiKFwiICsgdGhpcy5wcm9wcy5yZWFzb24gKyBcIilcIiB9PC9zcGFuPlxuICAgICAgICApIDogbnVsbDtcbiAgICAgICAgLy8gcmVhY3QgZG9lc24ndCBhbGxvdyBhcHBlbmRpbmcgYSBET00gbm9kZSBhcyBjaGlsZC5cbiAgICAgICAgLy8gYXMgc3VjaCwgd2UgcGFzcyB0aGUgdGhpcy5wcm9wcy5jb250ZW50SHRtbCBpbnN0ZWFkIGFuZCB0aGVuIHNldCB0aGUgcmF3XG4gICAgICAgIC8vIEhUTUwgY29udGVudC4gVGhpcyBpcyBzZWN1cmUgYXMgdGhlIGNvbnRlbnRzIGhhdmUgYWxyZWFkeSBiZWVuIHBhcnNlZCBwcmV2aW91c2x5XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9e1wibXhfRXZlbnRUaWxlX3Nwb2lsZXJcIiArICh0aGlzLnN0YXRlLnZpc2libGUgPyBcIiB2aXNpYmxlXCIgOiBcIlwiKX0gb25DbGljaz17dGhpcy50b2dnbGVWaXNpYmxlfT5cbiAgICAgICAgICAgICAgICB7IHJlYXNvbiB9XG4gICAgICAgICAgICAgICAgJm5ic3A7XG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwibXhfRXZlbnRUaWxlX3Nwb2lsZXJfY29udGVudFwiIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7IF9faHRtbDogdGhpcy5wcm9wcy5jb250ZW50SHRtbCB9fSAvPlxuICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICApO1xuICAgIH1cbn1cbiJdfQ==