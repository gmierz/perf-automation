"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _languageHandler = require("../../../languageHandler");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _Media = require("../../../customisations/Media");

var _BaseAvatar = _interopRequireDefault(require("../avatars/BaseAvatar"));

var _iconEmailUser = _interopRequireDefault(require("../../../../res/img/icon-email-user.svg"));

var _dec, _class, _class2, _temp;

let AddressTile = (_dec = (0, _replaceableComponent.replaceableComponent)("views.elements.AddressTile"), _dec(_class = (_temp = _class2 = class AddressTile extends _react.default.Component {
  render() {
    const address = this.props.address;
    const name = address.displayName || address.address;
    const imgUrls = [];
    const isMatrixAddress = ['mx-user-id', 'mx-room-id'].includes(address.addressType);

    if (isMatrixAddress && address.avatarMxc) {
      imgUrls.push((0, _Media.mediaFromMxc)(address.avatarMxc).getSquareThumbnailHttp(25));
    } else if (address.addressType === 'email') {
      imgUrls.push(_iconEmailUser.default);
    }

    const nameClasses = (0, _classnames.default)({
      "mx_AddressTile_name": true,
      "mx_AddressTile_justified": this.props.justified
    });
    let info;
    let error = false;

    if (isMatrixAddress && address.isKnown) {
      const idClasses = (0, _classnames.default)({
        "mx_AddressTile_id": true,
        "mx_AddressTile_justified": this.props.justified
      });
      info = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_AddressTile_mx"
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: nameClasses
      }, name), this.props.showAddress ? /*#__PURE__*/_react.default.createElement("div", {
        className: idClasses
      }, address.address) : /*#__PURE__*/_react.default.createElement("div", null));
    } else if (isMatrixAddress) {
      const unknownMxClasses = (0, _classnames.default)({
        "mx_AddressTile_unknownMx": true,
        "mx_AddressTile_justified": this.props.justified
      });
      info = /*#__PURE__*/_react.default.createElement("div", {
        className: unknownMxClasses
      }, this.props.address.address);
    } else if (address.addressType === "email") {
      const emailClasses = (0, _classnames.default)({
        "mx_AddressTile_email": true,
        "mx_AddressTile_justified": this.props.justified
      });
      let nameNode = null;

      if (address.displayName) {
        nameNode = /*#__PURE__*/_react.default.createElement("div", {
          className: nameClasses
        }, address.displayName);
      }

      info = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_AddressTile_mx"
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: emailClasses
      }, address.address), nameNode);
    } else {
      error = true;
      const unknownClasses = (0, _classnames.default)({
        "mx_AddressTile_unknown": true,
        "mx_AddressTile_justified": this.props.justified
      });
      info = /*#__PURE__*/_react.default.createElement("div", {
        className: unknownClasses
      }, (0, _languageHandler._t)("Unknown Address"));
    }

    const classes = (0, _classnames.default)({
      "mx_AddressTile": true,
      "mx_AddressTile_error": error
    });
    let dismiss;

    if (this.props.canDismiss) {
      dismiss = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_AddressTile_dismiss",
        onClick: this.props.onDismissed
      }, /*#__PURE__*/_react.default.createElement("img", {
        src: require("../../../../res/img/icon-address-delete.svg"),
        width: "9",
        height: "9"
      }));
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: classes
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_AddressTile_avatar"
    }, /*#__PURE__*/_react.default.createElement(_BaseAvatar.default, {
      defaultToInitialLetter: true,
      width: 25,
      height: 25,
      name: name,
      title: name,
      urls: imgUrls
    })), info, dismiss);
  }

}, (0, _defineProperty2.default)(_class2, "defaultProps", {
  canDismiss: false,
  onDismissed: function () {},
  // NOP
  justified: false
}), _temp)) || _class);
exports.default = AddressTile;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,