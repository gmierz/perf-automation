"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _url = _interopRequireDefault(require("url"));

var _react = _interopRequireWildcard(require("react"));

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _AccessibleButton = _interopRequireDefault(require("./AccessibleButton"));

var _languageHandler = require("../../../languageHandler");

var _AppPermission = _interopRequireDefault(require("./AppPermission"));

var _AppWarning = _interopRequireDefault(require("./AppWarning"));

var _Spinner = _interopRequireDefault(require("./Spinner"));

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _ActiveWidgetStore = _interopRequireDefault(require("../../../stores/ActiveWidgetStore"));

var _classnames = _interopRequireDefault(require("classnames"));

var _SettingsStore = _interopRequireDefault(require("../../../settings/SettingsStore"));

var _ContextMenu = require("../../structures/ContextMenu");

var _PersistedElement = _interopRequireWildcard(require("./PersistedElement"));

var _WidgetType = require("../../../widgets/WidgetType");

var _StopGapWidget = require("../../../stores/widgets/StopGapWidget");

var _ElementWidgetActions = require("../../../stores/widgets/ElementWidgetActions");

var _matrixWidgetApi = require("matrix-widget-api");

var _WidgetContextMenu = _interopRequireDefault(require("../context_menus/WidgetContextMenu"));

var _WidgetAvatar = _interopRequireDefault(require("../avatars/WidgetAvatar"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _WidgetLayoutStore = require("../../../stores/widgets/WidgetLayoutStore");

var _logger = require("matrix-js-sdk/src/logger");

var _dec, _class, _class2, _temp;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

let AppTile = (_dec = (0, _replaceableComponent.replaceableComponent)("views.elements.AppTile"), _dec(_class = (_temp = _class2 = class AppTile extends _react.default.Component {
  // ref to the iframe (callback style)
  constructor(_props) {
    super(_props); // The key used for PersistedElement

    (0, _defineProperty2.default)(this, "contextMenuButton", /*#__PURE__*/(0, _react.createRef)());
    (0, _defineProperty2.default)(this, "iframe", void 0);
    (0, _defineProperty2.default)(this, "allowedWidgetsWatchRef", void 0);
    (0, _defineProperty2.default)(this, "persistKey", void 0);
    (0, _defineProperty2.default)(this, "sgWidget", void 0);
    (0, _defineProperty2.default)(this, "dispatcherRef", void 0);
    (0, _defineProperty2.default)(this, "hasPermissionToLoad", props => {
      if (this.usingLocalWidget()) return true;
      if (!props.room) return true; // user widgets always have permissions

      const currentlyAllowedWidgets = _SettingsStore.default.getValue("allowedWidgets", props.room.roomId);

      if (currentlyAllowedWidgets[props.app.eventId] === undefined) {
        return props.userId === props.creatorUserId;
      }

      return !!currentlyAllowedWidgets[props.app.eventId];
    });
    (0, _defineProperty2.default)(this, "onAllowedWidgetsChange", () => {
      const hasPermissionToLoad = this.hasPermissionToLoad(this.props);

      if (this.state.hasPermissionToLoad && !hasPermissionToLoad) {
        // Force the widget to be non-persistent (able to be deleted/forgotten)
        _ActiveWidgetStore.default.instance.destroyPersistentWidget(this.props.app.id);

        _PersistedElement.default.destroyElement(this.persistKey);

        if (this.sgWidget) this.sgWidget.stop();
      }

      this.setState({
        hasPermissionToLoad
      });
    });
    (0, _defineProperty2.default)(this, "iframeRefChange", ref => {
      this.iframe = ref;

      if (ref) {
        try {
          if (this.sgWidget) {
            this.sgWidget.start(ref);
          }
        } catch (e) {
          _logger.logger.error("Failed to start widget", e);
        }
      } else {
        this.resetWidget(this.props);
      }
    });
    (0, _defineProperty2.default)(this, "onWidgetPreparing", () => {
      this.setState({
        loading: false
      });
    });
    (0, _defineProperty2.default)(this, "onWidgetReady", () => {
      if (_WidgetType.WidgetType.JITSI.matches(this.props.app.type)) {
        this.sgWidget.widgetApi.transport.send(_ElementWidgetActions.ElementWidgetActions.ClientReady, {});
      }
    });
    (0, _defineProperty2.default)(this, "onWidgetCapabilitiesNotified", () => {
      this.setState({
        requiresClient: this.sgWidget.widgetApi.hasCapability(_matrixWidgetApi.MatrixCapabilities.RequiresClient)
      });
    });
    (0, _defineProperty2.default)(this, "onAction", payload => {
      if (payload.widgetId === this.props.app.id) {
        switch (payload.action) {
          case 'm.sticker':
            if (this.sgWidget.widgetApi.hasCapability(_matrixWidgetApi.MatrixCapabilities.StickerSending)) {
              _dispatcher.default.dispatch({
                action: 'post_sticker_message',
                data: payload.data
              });

              _dispatcher.default.dispatch({
                action: 'stickerpicker_close'
              });
            } else {
              _logger.logger.warn('Ignoring sticker message. Invalid capability');
            }

            break;
        }
      }
    });
    (0, _defineProperty2.default)(this, "grantWidgetPermission", () => {
      const roomId = this.props.room.roomId;

      _logger.logger.info("Granting permission for widget to load: " + this.props.app.eventId);

      const current = _SettingsStore.default.getValue("allowedWidgets", roomId);

      current[this.props.app.eventId] = true;

      const level = _SettingsStore.default.firstSupportedLevel("allowedWidgets");

      _SettingsStore.default.setValue("allowedWidgets", roomId, level, current).then(() => {
        this.setState({
          hasPermissionToLoad: true
        }); // Fetch a token for the integration manager, now that we're allowed to

        this.startWidget();
      }).catch(err => {
        _logger.logger.error(err); // We don't really need to do anything about this - the user will just hit the button again.

      });
    });
    (0, _defineProperty2.default)(this, "onPopoutWidgetClick", () => {
      // Ensure Jitsi conferences are closed on pop-out, to not confuse the user to join them
      // twice from the same computer, which Jitsi can have problems with (audio echo/gain-loop).
      if (_WidgetType.WidgetType.JITSI.matches(this.props.app.type)) {
        this.endWidgetActions().then(() => {
          if (this.iframe) {
            // Reload iframe
            this.iframe.src = this.sgWidget.embedUrl;
          }
        });
      } // Using Object.assign workaround as the following opens in a new window instead of a new tab.
      // window.open(this._getPopoutUrl(), '_blank', 'noopener=yes');


      Object.assign(document.createElement('a'), {
        target: '_blank',
        href: this.sgWidget.popoutUrl,
        rel: 'noreferrer noopener'
      }).click();
    });
    (0, _defineProperty2.default)(this, "onMaxMinWidgetClick", () => {
      const targetContainer = _WidgetLayoutStore.WidgetLayoutStore.instance.isInContainer(this.props.room, this.props.app, _WidgetLayoutStore.Container.Center) ? _WidgetLayoutStore.Container.Right : _WidgetLayoutStore.Container.Center;

      _WidgetLayoutStore.WidgetLayoutStore.instance.moveToContainer(this.props.room, this.props.app, targetContainer);
    });
    (0, _defineProperty2.default)(this, "onContextMenuClick", () => {
      this.setState({
        menuDisplayed: true
      });
    });
    (0, _defineProperty2.default)(this, "closeContextMenu", () => {
      this.setState({
        menuDisplayed: false
      });
    });
    this.persistKey = (0, _PersistedElement.getPersistKey)(this.props.app.id);

    try {
      this.sgWidget = new _StopGapWidget.StopGapWidget(this.props);
      this.sgWidget.on("preparing", this.onWidgetPreparing);
      this.sgWidget.on("ready", this.onWidgetReady); // emits when the capabilites have been setup or changed

      this.sgWidget.on("capabilitiesNotified", this.onWidgetCapabilitiesNotified);
    } catch (e) {
      _logger.logger.log("Failed to construct widget", e);

      this.sgWidget = null;
    }

    this.state = this.getNewState(_props);
    this.allowedWidgetsWatchRef = _SettingsStore.default.watchSetting("allowedWidgets", null, this.onAllowedWidgetsChange);
  } // This is a function to make the impact of calling SettingsStore slightly less


  /**
   * Set initial component state when the App wUrl (widget URL) is being updated.
   * Component props *must* be passed (rather than relying on this.props).
   * @param  {Object} newProps The new properties of the component
   * @return {Object} Updated component state to be set with setState
   */
  getNewState(newProps) {
    return {
      initialising: true,
      // True while we are mangling the widget URL
      // True while the iframe content is loading
      loading: this.props.waitForIframeLoad && !_PersistedElement.default.isMounted(this.persistKey),
      // Assume that widget has permission to load if we are the user who
      // added it to the room, or if explicitly granted by the user
      hasPermissionToLoad: this.hasPermissionToLoad(newProps),
      error: null,
      menuDisplayed: false,
      widgetPageTitle: this.props.widgetPageTitle,
      // requiresClient is initially set to true. This avoids the broken state of the popout
      // button being visible (for an instance) and then disappearing when the widget is loaded.
      // requiresClient <-> hide the popout button
      requiresClient: true
    };
  }

  isMixedContent() {
    const parentContentProtocol = window.location.protocol;

    const u = _url.default.parse(this.props.app.url);

    const childContentProtocol = u.protocol;

    if (parentContentProtocol === 'https:' && childContentProtocol !== 'https:') {
      _logger.logger.warn("Refusing to load mixed-content app:", parentContentProtocol, childContentProtocol, window.location, this.props.app.url);

      return true;
    }

    return false;
  }

  componentDidMount() {
    // Only fetch IM token on mount if we're showing and have permission to load
    if (this.sgWidget && this.state.hasPermissionToLoad) {
      this.startWidget();
    } // Widget action listeners


    this.dispatcherRef = _dispatcher.default.register(this.onAction);
  }

  componentWillUnmount() {
    // Widget action listeners
    if (this.dispatcherRef) _dispatcher.default.unregister(this.dispatcherRef); // if it's not remaining on screen, get rid of the PersistedElement container

    if (!_ActiveWidgetStore.default.instance.getWidgetPersistence(this.props.app.id)) {
      _ActiveWidgetStore.default.instance.destroyPersistentWidget(this.props.app.id);

      _PersistedElement.default.destroyElement(this.persistKey);
    }

    if (this.sgWidget) {
      this.sgWidget.stop();
    }

    _SettingsStore.default.unwatchSetting(this.allowedWidgetsWatchRef);
  }

  resetWidget(newProps) {
    if (this.sgWidget) {
      this.sgWidget.stop();
    }

    try {
      this.sgWidget = new _StopGapWidget.StopGapWidget(newProps);
      this.sgWidget.on("preparing", this.onWidgetPreparing);
      this.sgWidget.on("ready", this.onWidgetReady);
      this.startWidget();
    } catch (e) {
      _logger.logger.error("Failed to construct widget", e);

      this.sgWidget = null;
    }
  }

  startWidget() {
    this.sgWidget.prepare().then(() => {
      this.setState({
        initialising: false
      });
    });
  }

  // TODO: [REACT-WARNING] Replace with appropriate lifecycle event
  // eslint-disable-next-line @typescript-eslint/naming-convention
  UNSAFE_componentWillReceiveProps(nextProps) {
    // eslint-disable-line camelcase
    if (nextProps.app.url !== this.props.app.url) {
      this.getNewState(nextProps);

      if (this.state.hasPermissionToLoad) {
        this.resetWidget(nextProps);
      }
    }

    if (nextProps.widgetPageTitle !== this.props.widgetPageTitle) {
      this.setState({
        widgetPageTitle: nextProps.widgetPageTitle
      });
    }
  }
  /**
   * Ends all widget interaction, such as cancelling calls and disabling webcams.
   * @private
   * @returns {Promise<*>} Resolves when the widget is terminated, or timeout passed.
   */


  async endWidgetActions() {
    // widget migration dev note: async to maintain signature
    // HACK: This is a really dirty way to ensure that Jitsi cleans up
    // its hold on the webcam. Without this, the widget holds a media
    // stream open, even after death. See https://github.com/vector-im/element-web/issues/7351
    if (this.iframe) {
      // In practice we could just do `+= ''` to trick the browser
      // into thinking the URL changed, however I can foresee this
      // being optimized out by a browser. Instead, we'll just point
      // the iframe at a page that is reasonably safe to use in the
      // event the iframe doesn't wink away.
      // This is relative to where the Element instance is located.
      this.iframe.src = 'about:blank';
    }

    if (_WidgetType.WidgetType.JITSI.matches(this.props.app.type)) {
      _dispatcher.default.dispatch({
        action: 'hangup_conference'
      });
    } // Delete the widget from the persisted store for good measure.


    _PersistedElement.default.destroyElement(this.persistKey);

    _ActiveWidgetStore.default.instance.destroyPersistentWidget(this.props.app.id);

    if (this.sgWidget) this.sgWidget.stop({
      forceDestroy: true
    });
  }

  formatAppTileName() {
    let appTileName = "No name";

    if (this.props.app.name && this.props.app.name.trim()) {
      appTileName = this.props.app.name.trim();
    }

    return appTileName;
  }
  /**
   * Whether we're using a local version of the widget rather than loading the
   * actual widget URL
   * @returns {bool} true If using a local version of the widget
   */


  usingLocalWidget() {
    return _WidgetType.WidgetType.JITSI.matches(this.props.app.type);
  }

  getTileTitle() {
    const name = this.formatAppTileName();

    const titleSpacer = /*#__PURE__*/_react.default.createElement("span", null, "\xA0-\xA0");

    let title = '';

    if (this.state.widgetPageTitle && this.state.widgetPageTitle !== this.formatAppTileName()) {
      title = this.state.widgetPageTitle;
    }

    return /*#__PURE__*/_react.default.createElement("span", null, /*#__PURE__*/_react.default.createElement(_WidgetAvatar.default, {
      app: this.props.app
    }), /*#__PURE__*/_react.default.createElement("b", null, name), /*#__PURE__*/_react.default.createElement("span", null, title ? titleSpacer : '', title));
  } // TODO replace with full screen interactions


  render() {
    let appTileBody; // Note that there is advice saying allow-scripts shouldn't be used with allow-same-origin
    // because that would allow the iframe to programmatically remove the sandbox attribute, but
    // this would only be for content hosted on the same origin as the element client: anything
    // hosted on the same origin as the client will get the same access as if you clicked
    // a link to it.

    const sandboxFlags = "allow-forms allow-popups allow-popups-to-escape-sandbox " + "allow-same-origin allow-scripts allow-presentation"; // Additional iframe feature pemissions
    // (see - https://sites.google.com/a/chromium.org/dev/Home/chromium-security/deprecating-permissions-in-cross-origin-iframes and https://wicg.github.io/feature-policy/)

    const iframeFeatures = "microphone; camera; encrypted-media; autoplay; display-capture; clipboard-write;";
    const appTileBodyClass = 'mx_AppTileBody' + (this.props.miniMode ? '_mini  ' : ' ');
    const appTileBodyStyles = {};

    if (this.props.pointerEvents) {
      appTileBodyStyles['pointer-events'] = this.props.pointerEvents;
    }

    const loadingElement = /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_AppLoading_spinner_fadeIn"
    }, /*#__PURE__*/_react.default.createElement(_Spinner.default, {
      message: (0, _languageHandler._t)("Loading...")
    }));

    if (this.sgWidget === null) {
      appTileBody = /*#__PURE__*/_react.default.createElement("div", {
        className: appTileBodyClass,
        style: appTileBodyStyles
      }, /*#__PURE__*/_react.default.createElement(_AppWarning.default, {
        errorMsg: (0, _languageHandler._t)("Error loading Widget")
      }));
    } else if (!this.state.hasPermissionToLoad) {
      // only possible for room widgets, can assert this.props.room here
      const isEncrypted = _MatrixClientPeg.MatrixClientPeg.get().isRoomEncrypted(this.props.room.roomId);

      appTileBody = /*#__PURE__*/_react.default.createElement("div", {
        className: appTileBodyClass,
        style: appTileBodyStyles
      }, /*#__PURE__*/_react.default.createElement(_AppPermission.default, {
        roomId: this.props.room.roomId,
        creatorUserId: this.props.creatorUserId,
        url: this.sgWidget.embedUrl,
        isRoomEncrypted: isEncrypted,
        onPermissionGranted: this.grantWidgetPermission
      }));
    } else if (this.state.initialising) {
      appTileBody = /*#__PURE__*/_react.default.createElement("div", {
        className: appTileBodyClass + (this.state.loading ? 'mx_AppLoading' : ''),
        style: appTileBodyStyles
      }, loadingElement);
    } else {
      if (this.isMixedContent()) {
        appTileBody = /*#__PURE__*/_react.default.createElement("div", {
          className: appTileBodyClass,
          style: appTileBodyStyles
        }, /*#__PURE__*/_react.default.createElement(_AppWarning.default, {
          errorMsg: (0, _languageHandler._t)("Error - Mixed content")
        }));
      } else {
        appTileBody = /*#__PURE__*/_react.default.createElement("div", {
          className: appTileBodyClass + (this.state.loading ? 'mx_AppLoading' : ''),
          style: appTileBodyStyles
        }, this.state.loading && loadingElement, /*#__PURE__*/_react.default.createElement("iframe", {
          allow: iframeFeatures,
          ref: this.iframeRefChange,
          src: this.sgWidget.embedUrl,
          allowFullScreen: true,
          sandbox: sandboxFlags
        }));

        if (!this.props.userWidget) {
          // All room widgets can theoretically be allowed to remain on screen, so we
          // wrap them all in a PersistedElement from the get-go. If we wait, the iframe
          // will be re-mounted later, which means the widget has to start over, which is
          // bad.
          // Also wrap the PersistedElement in a div to fix the height, otherwise
          // AppTile's border is in the wrong place
          appTileBody = /*#__PURE__*/_react.default.createElement("div", {
            className: "mx_AppTile_persistedWrapper"
          }, /*#__PURE__*/_react.default.createElement(_PersistedElement.default, {
            persistKey: this.persistKey
          }, appTileBody));
        }
      }
    }

    let appTileClasses;

    if (this.props.miniMode) {
      appTileClasses = {
        mx_AppTile_mini: true
      };
    } else if (this.props.fullWidth) {
      appTileClasses = {
        mx_AppTileFullWidth: true
      };
    } else {
      appTileClasses = {
        mx_AppTile: true
      };
    }

    appTileClasses = (0, _classnames.default)(appTileClasses);
    let contextMenu;

    if (this.state.menuDisplayed) {
      contextMenu = /*#__PURE__*/_react.default.createElement(_WidgetContextMenu.default, (0, _extends2.default)({}, (0, _ContextMenu.aboveLeftOf)(this.contextMenuButton.current.getBoundingClientRect(), null), {
        app: this.props.app,
        onFinished: this.closeContextMenu,
        showUnpin: !this.props.userWidget,
        userWidget: this.props.userWidget,
        onEditClick: this.props.onEditClick,
        onDeleteClick: this.props.onDeleteClick
      }));
    }

    let maxMinButton;

    if (_SettingsStore.default.getValue("feature_maximised_widgets")) {
      const widgetIsMaximised = _WidgetLayoutStore.WidgetLayoutStore.instance.isInContainer(this.props.room, this.props.app, _WidgetLayoutStore.Container.Center);

      maxMinButton = /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        className: "mx_AppTileMenuBar_iconButton" + (widgetIsMaximised ? " mx_AppTileMenuBar_iconButton_minWidget" : " mx_AppTileMenuBar_iconButton_maxWidget"),
        title: widgetIsMaximised ? (0, _languageHandler._t)('Close') : (0, _languageHandler._t)('Maximise widget'),
        onClick: this.onMaxMinWidgetClick
      });
    }

    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
      className: appTileClasses,
      id: this.props.app.id
    }, this.props.showMenubar && /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_AppTileMenuBar"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_AppTileMenuBarTitle",
      style: {
        pointerEvents: this.props.handleMinimisePointerEvents ? 'all' : "none"
      }
    }, this.props.showTitle && this.getTileTitle()), /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_AppTileMenuBarWidgets"
    }, maxMinButton, this.props.showPopout && !this.state.requiresClient && /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      className: "mx_AppTileMenuBar_iconButton mx_AppTileMenuBar_iconButton_popout",
      title: (0, _languageHandler._t)('Popout widget'),
      onClick: this.onPopoutWidgetClick
    }), /*#__PURE__*/_react.default.createElement(_ContextMenu.ContextMenuButton, {
      className: "mx_AppTileMenuBar_iconButton mx_AppTileMenuBar_iconButton_menu",
      label: (0, _languageHandler._t)("Options"),
      isExpanded: this.state.menuDisplayed,
      inputRef: this.contextMenuButton,
      onClick: this.onContextMenuClick
    }))), appTileBody), contextMenu);
  }

}, (0, _defineProperty2.default)(_class2, "defaultProps", {
  waitForIframeLoad: true,
  showMenubar: true,
  showTitle: true,
  showPopout: true,
  handleMinimisePointerEvents: false,
  userWidget: false,
  miniMode: false
}), _temp)) || _class);
exports.default = AppTile;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL2VsZW1lbnRzL0FwcFRpbGUudHN4Il0sIm5hbWVzIjpbIkFwcFRpbGUiLCJSZWFjdCIsIkNvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwicHJvcHMiLCJ1c2luZ0xvY2FsV2lkZ2V0Iiwicm9vbSIsImN1cnJlbnRseUFsbG93ZWRXaWRnZXRzIiwiU2V0dGluZ3NTdG9yZSIsImdldFZhbHVlIiwicm9vbUlkIiwiYXBwIiwiZXZlbnRJZCIsInVuZGVmaW5lZCIsInVzZXJJZCIsImNyZWF0b3JVc2VySWQiLCJoYXNQZXJtaXNzaW9uVG9Mb2FkIiwic3RhdGUiLCJBY3RpdmVXaWRnZXRTdG9yZSIsImluc3RhbmNlIiwiZGVzdHJveVBlcnNpc3RlbnRXaWRnZXQiLCJpZCIsIlBlcnNpc3RlZEVsZW1lbnQiLCJkZXN0cm95RWxlbWVudCIsInBlcnNpc3RLZXkiLCJzZ1dpZGdldCIsInN0b3AiLCJzZXRTdGF0ZSIsInJlZiIsImlmcmFtZSIsInN0YXJ0IiwiZSIsImxvZ2dlciIsImVycm9yIiwicmVzZXRXaWRnZXQiLCJsb2FkaW5nIiwiV2lkZ2V0VHlwZSIsIkpJVFNJIiwibWF0Y2hlcyIsInR5cGUiLCJ3aWRnZXRBcGkiLCJ0cmFuc3BvcnQiLCJzZW5kIiwiRWxlbWVudFdpZGdldEFjdGlvbnMiLCJDbGllbnRSZWFkeSIsInJlcXVpcmVzQ2xpZW50IiwiaGFzQ2FwYWJpbGl0eSIsIk1hdHJpeENhcGFiaWxpdGllcyIsIlJlcXVpcmVzQ2xpZW50IiwicGF5bG9hZCIsIndpZGdldElkIiwiYWN0aW9uIiwiU3RpY2tlclNlbmRpbmciLCJkaXMiLCJkaXNwYXRjaCIsImRhdGEiLCJ3YXJuIiwiaW5mbyIsImN1cnJlbnQiLCJsZXZlbCIsImZpcnN0U3VwcG9ydGVkTGV2ZWwiLCJzZXRWYWx1ZSIsInRoZW4iLCJzdGFydFdpZGdldCIsImNhdGNoIiwiZXJyIiwiZW5kV2lkZ2V0QWN0aW9ucyIsInNyYyIsImVtYmVkVXJsIiwiT2JqZWN0IiwiYXNzaWduIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwidGFyZ2V0IiwiaHJlZiIsInBvcG91dFVybCIsInJlbCIsImNsaWNrIiwidGFyZ2V0Q29udGFpbmVyIiwiV2lkZ2V0TGF5b3V0U3RvcmUiLCJpc0luQ29udGFpbmVyIiwiQ29udGFpbmVyIiwiQ2VudGVyIiwiUmlnaHQiLCJtb3ZlVG9Db250YWluZXIiLCJtZW51RGlzcGxheWVkIiwiU3RvcEdhcFdpZGdldCIsIm9uIiwib25XaWRnZXRQcmVwYXJpbmciLCJvbldpZGdldFJlYWR5Iiwib25XaWRnZXRDYXBhYmlsaXRpZXNOb3RpZmllZCIsImxvZyIsImdldE5ld1N0YXRlIiwiYWxsb3dlZFdpZGdldHNXYXRjaFJlZiIsIndhdGNoU2V0dGluZyIsIm9uQWxsb3dlZFdpZGdldHNDaGFuZ2UiLCJuZXdQcm9wcyIsImluaXRpYWxpc2luZyIsIndhaXRGb3JJZnJhbWVMb2FkIiwiaXNNb3VudGVkIiwid2lkZ2V0UGFnZVRpdGxlIiwiaXNNaXhlZENvbnRlbnQiLCJwYXJlbnRDb250ZW50UHJvdG9jb2wiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsInByb3RvY29sIiwidSIsInVybCIsInBhcnNlIiwiY2hpbGRDb250ZW50UHJvdG9jb2wiLCJjb21wb25lbnREaWRNb3VudCIsImRpc3BhdGNoZXJSZWYiLCJyZWdpc3RlciIsIm9uQWN0aW9uIiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJ1bnJlZ2lzdGVyIiwiZ2V0V2lkZ2V0UGVyc2lzdGVuY2UiLCJ1bndhdGNoU2V0dGluZyIsInByZXBhcmUiLCJVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIm5leHRQcm9wcyIsImZvcmNlRGVzdHJveSIsImZvcm1hdEFwcFRpbGVOYW1lIiwiYXBwVGlsZU5hbWUiLCJuYW1lIiwidHJpbSIsImdldFRpbGVUaXRsZSIsInRpdGxlU3BhY2VyIiwidGl0bGUiLCJyZW5kZXIiLCJhcHBUaWxlQm9keSIsInNhbmRib3hGbGFncyIsImlmcmFtZUZlYXR1cmVzIiwiYXBwVGlsZUJvZHlDbGFzcyIsIm1pbmlNb2RlIiwiYXBwVGlsZUJvZHlTdHlsZXMiLCJwb2ludGVyRXZlbnRzIiwibG9hZGluZ0VsZW1lbnQiLCJpc0VuY3J5cHRlZCIsIk1hdHJpeENsaWVudFBlZyIsImdldCIsImlzUm9vbUVuY3J5cHRlZCIsImdyYW50V2lkZ2V0UGVybWlzc2lvbiIsImlmcmFtZVJlZkNoYW5nZSIsInVzZXJXaWRnZXQiLCJhcHBUaWxlQ2xhc3NlcyIsIm14X0FwcFRpbGVfbWluaSIsImZ1bGxXaWR0aCIsIm14X0FwcFRpbGVGdWxsV2lkdGgiLCJteF9BcHBUaWxlIiwiY29udGV4dE1lbnUiLCJjb250ZXh0TWVudUJ1dHRvbiIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImNsb3NlQ29udGV4dE1lbnUiLCJvbkVkaXRDbGljayIsIm9uRGVsZXRlQ2xpY2siLCJtYXhNaW5CdXR0b24iLCJ3aWRnZXRJc01heGltaXNlZCIsIm9uTWF4TWluV2lkZ2V0Q2xpY2siLCJzaG93TWVudWJhciIsImhhbmRsZU1pbmltaXNlUG9pbnRlckV2ZW50cyIsInNob3dUaXRsZSIsInNob3dQb3BvdXQiLCJvblBvcG91dFdpZGdldENsaWNrIiwib25Db250ZXh0TWVudUNsaWNrIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBbUJBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUdBOztBQStDQTs7Ozs7Ozs7SUFHcUJBLE8sV0FEcEIsZ0RBQXFCLHdCQUFyQixDLG1DQUFELE1BQ3FCQSxPQURyQixTQUNxQ0MsZUFBTUMsU0FEM0MsQ0FDcUU7QUFZOUI7QUFNbkNDLEVBQUFBLFdBQVcsQ0FBQ0MsTUFBRCxFQUFnQjtBQUN2QixVQUFNQSxNQUFOLEVBRHVCLENBR3ZCOztBQUh1QiwwRUFQQyx1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YXRpb25zIEx0ZFxuQ29weXJpZ2h0IDIwMTggTmV3IFZlY3RvciBMdGRcbkNvcHlyaWdodCAyMDE5IE1pY2hhZWwgVGVsYXR5bnNraSA8N3QzY2hndXlAZ21haWwuY29tPlxuQ29weXJpZ2h0IDIwMjAgVGhlIE1hdHJpeC5vcmcgRm91bmRhdGlvbiBDLkkuQy5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG5pbXBvcnQgdXJsIGZyb20gJ3VybCc7XG5pbXBvcnQgUmVhY3QsIHsgY3JlYXRlUmVmIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgTWF0cml4Q2xpZW50UGVnIH0gZnJvbSAnLi4vLi4vLi4vTWF0cml4Q2xpZW50UGVnJztcbmltcG9ydCBBY2Nlc3NpYmxlQnV0dG9uIGZyb20gJy4vQWNjZXNzaWJsZUJ1dHRvbic7XG5pbXBvcnQgeyBfdCB9IGZyb20gJy4uLy4uLy4uL2xhbmd1YWdlSGFuZGxlcic7XG5pbXBvcnQgQXBwUGVybWlzc2lvbiBmcm9tICcuL0FwcFBlcm1pc3Npb24nO1xuaW1wb3J0IEFwcFdhcm5pbmcgZnJvbSAnLi9BcHBXYXJuaW5nJztcbmltcG9ydCBTcGlubmVyIGZyb20gJy4vU3Bpbm5lcic7XG5pbXBvcnQgZGlzIGZyb20gJy4uLy4uLy4uL2Rpc3BhdGNoZXIvZGlzcGF0Y2hlcic7XG5pbXBvcnQgQWN0aXZlV2lkZ2V0U3RvcmUgZnJvbSAnLi4vLi4vLi4vc3RvcmVzL0FjdGl2ZVdpZGdldFN0b3JlJztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFNldHRpbmdzU3RvcmUgZnJvbSBcIi4uLy4uLy4uL3NldHRpbmdzL1NldHRpbmdzU3RvcmVcIjtcbmltcG9ydCB7IGFib3ZlTGVmdE9mLCBDb250ZXh0TWVudUJ1dHRvbiB9IGZyb20gXCIuLi8uLi9zdHJ1Y3R1cmVzL0NvbnRleHRNZW51XCI7XG5pbXBvcnQgUGVyc2lzdGVkRWxlbWVudCwgeyBnZXRQZXJzaXN0S2V5IH0gZnJvbSBcIi4vUGVyc2lzdGVkRWxlbWVudFwiO1xuaW1wb3J0IHsgV2lkZ2V0VHlwZSB9IGZyb20gXCIuLi8uLi8uLi93aWRnZXRzL1dpZGdldFR5cGVcIjtcbmltcG9ydCB7IFN0b3BHYXBXaWRnZXQgfSBmcm9tIFwiLi4vLi4vLi4vc3RvcmVzL3dpZGdldHMvU3RvcEdhcFdpZGdldFwiO1xuaW1wb3J0IHsgRWxlbWVudFdpZGdldEFjdGlvbnMgfSBmcm9tIFwiLi4vLi4vLi4vc3RvcmVzL3dpZGdldHMvRWxlbWVudFdpZGdldEFjdGlvbnNcIjtcbmltcG9ydCB7IE1hdHJpeENhcGFiaWxpdGllcyB9IGZyb20gXCJtYXRyaXgtd2lkZ2V0LWFwaVwiO1xuaW1wb3J0IFJvb21XaWRnZXRDb250ZXh0TWVudSBmcm9tIFwiLi4vY29udGV4dF9tZW51cy9XaWRnZXRDb250ZXh0TWVudVwiO1xuaW1wb3J0IFdpZGdldEF2YXRhciBmcm9tIFwiLi4vYXZhdGFycy9XaWRnZXRBdmF0YXJcIjtcbmltcG9ydCB7IHJlcGxhY2VhYmxlQ29tcG9uZW50IH0gZnJvbSBcIi4uLy4uLy4uL3V0aWxzL3JlcGxhY2VhYmxlQ29tcG9uZW50XCI7XG5pbXBvcnQgeyBSb29tIH0gZnJvbSBcIm1hdHJpeC1qcy1zZGsvc3JjL21vZGVscy9yb29tXCI7XG5pbXBvcnQgeyBJQXBwIH0gZnJvbSBcIi4uLy4uLy4uL3N0b3Jlcy9XaWRnZXRTdG9yZVwiO1xuaW1wb3J0IHsgV2lkZ2V0TGF5b3V0U3RvcmUsIENvbnRhaW5lciB9IGZyb20gXCIuLi8uLi8uLi9zdG9yZXMvd2lkZ2V0cy9XaWRnZXRMYXlvdXRTdG9yZVwiO1xuaW50ZXJmYWNlIElQcm9wcyB7XG4gICAgYXBwOiBJQXBwO1xuICAgIC8vIElmIHJvb20gaXMgbm90IHNwZWNpZmllZCB0aGVuIGl0IGlzIGFuIGFjY291bnQgbGV2ZWwgd2lkZ2V0XG4gICAgLy8gd2hpY2ggYnlwYXNzZXMgcGVybWlzc2lvbiBwcm9tcHRzIGFzIGl0IHdhcyBhZGRlZCBleHBsaWNpdGx5IGJ5IHRoYXQgdXNlclxuICAgIHJvb206IFJvb207XG4gICAgLy8gU3BlY2lmeWluZyAnZnVsbFdpZHRoJyBhcyB0cnVlIHdpbGwgcmVuZGVyIHRoZSBhcHAgdGlsZSB0byBmaWxsIHRoZSB3aWR0aCBvZiB0aGUgYXBwIGRyYXdlciBjb250aW5lci5cbiAgICAvLyBUaGlzIHNob3VsZCBiZSBzZXQgdG8gdHJ1ZSB3aGVuIHRoZXJlIGlzIG9ubHkgb25lIHdpZGdldCBpbiB0aGUgYXBwIGRyYXdlciwgb3RoZXJ3aXNlIGl0IHNob3VsZCBiZSBmYWxzZS5cbiAgICBmdWxsV2lkdGg/OiBib29sZWFuO1xuICAgIC8vIE9wdGlvbmFsLiBJZiBzZXQsIHJlbmRlcnMgYSBzbWFsbGVyIHZpZXcgb2YgdGhlIHdpZGdldFxuICAgIG1pbmlNb2RlPzogYm9vbGVhbjtcbiAgICAvLyBVc2VySWQgb2YgdGhlIGN1cnJlbnQgdXNlclxuICAgIHVzZXJJZDogc3RyaW5nO1xuICAgIC8vIFVzZXJJZCBvZiB0aGUgZW50aXR5IHRoYXQgYWRkZWQgLyBtb2RpZmllZCB0aGUgd2lkZ2V0XG4gICAgY3JlYXRvclVzZXJJZDogc3RyaW5nO1xuICAgIHdhaXRGb3JJZnJhbWVMb2FkOiBib29sZWFuO1xuICAgIHNob3dNZW51YmFyPzogYm9vbGVhbjtcbiAgICAvLyBPcHRpb25hbCBvbkVkaXRDbGlja0hhbmRsZXIgKG92ZXJyaWRlcyBkZWZhdWx0IGJlaGF2aW91cilcbiAgICBvbkVkaXRDbGljaz86ICgpID0+IHZvaWQ7XG4gICAgLy8gT3B0aW9uYWwgb25EZWxldGVDbGlja0hhbmRsZXIgKG92ZXJyaWRlcyBkZWZhdWx0IGJlaGF2aW91cilcbiAgICBvbkRlbGV0ZUNsaWNrPzogKCkgPT4gdm9pZDtcbiAgICAvLyBPcHRpb25hbGx5IGhpZGUgdGhlIHRpbGUgdGl0bGVcbiAgICBzaG93VGl0bGU/OiBib29sZWFuO1xuICAgIC8vIE9wdGlvbmFsbHkgaGFuZGxlIG1pbmltaXNlIGJ1dHRvbiBwb2ludGVyIGV2ZW50cyAoZGVmYXVsdCBmYWxzZSlcbiAgICBoYW5kbGVNaW5pbWlzZVBvaW50ZXJFdmVudHM/OiBib29sZWFuO1xuICAgIC8vIE9wdGlvbmFsbHkgaGlkZSB0aGUgcG9wb3V0IHdpZGdldCBpY29uXG4gICAgc2hvd1BvcG91dD86IGJvb2xlYW47XG4gICAgLy8gSXMgdGhpcyBhbiBpbnN0YW5jZSBvZiBhIHVzZXIgd2lkZ2V0XG4gICAgdXNlcldpZGdldDogYm9vbGVhbjtcbiAgICAvLyBzZXRzIHRoZSBwb2ludGVyLWV2ZW50cyBwcm9wZXJ0eSBvbiB0aGUgaWZyYW1lXG4gICAgcG9pbnRlckV2ZW50cz86IHN0cmluZztcbiAgICB3aWRnZXRQYWdlVGl0bGU/OiBzdHJpbmc7XG59XG5cbmludGVyZmFjZSBJU3RhdGUge1xuICAgIGluaXRpYWxpc2luZzogYm9vbGVhbjsgLy8gVHJ1ZSB3aGlsZSB3ZSBhcmUgbWFuZ2xpbmcgdGhlIHdpZGdldCBVUkxcbiAgICAvLyBUcnVlIHdoaWxlIHRoZSBpZnJhbWUgY29udGVudCBpcyBsb2FkaW5nXG4gICAgbG9hZGluZzogYm9vbGVhbjtcbiAgICAvLyBBc3N1bWUgdGhhdCB3aWRnZXQgaGFzIHBlcm1pc3Npb24gdG8gbG9hZCBpZiB3ZSBhcmUgdGhlIHVzZXIgd2hvXG4gICAgLy8gYWRkZWQgaXQgdG8gdGhlIHJvb20sIG9yIGlmIGV4cGxpY2l0bHkgZ3JhbnRlZCBieSB0aGUgdXNlclxuICAgIGhhc1Blcm1pc3Npb25Ub0xvYWQ6IGJvb2xlYW47XG4gICAgZXJyb3I6IEVycm9yO1xuICAgIG1lbnVEaXNwbGF5ZWQ6IGJvb2xlYW47XG4gICAgd2lkZ2V0UGFnZVRpdGxlOiBzdHJpbmc7XG4gICAgcmVxdWlyZXNDbGllbnQ6IGJvb2xlYW47XG59XG5cbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gXCJtYXRyaXgtanMtc2RrL3NyYy9sb2dnZXJcIjtcblxuQHJlcGxhY2VhYmxlQ29tcG9uZW50KFwidmlld3MuZWxlbWVudHMuQXBwVGlsZVwiKVxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXBwVGlsZSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxJUHJvcHMsIElTdGF0ZT4ge1xuICAgIHB1YmxpYyBzdGF0aWMgZGVmYXVsdFByb3BzOiBQYXJ0aWFsPElQcm9wcz4gPSB7XG4gICAgICAgIHdhaXRGb3JJZnJhbWVMb2FkOiB0cnVlLFxuICAgICAgICBzaG93TWVudWJhcjogdHJ1ZSxcbiAgICAgICAgc2hvd1RpdGxlOiB0cnVlLFxuICAgICAgICBzaG93UG9wb3V0OiB0cnVlLFxuICAgICAgICBoYW5kbGVNaW5pbWlzZVBvaW50ZXJFdmVudHM6IGZhbHNlLFxuICAgICAgICB1c2VyV2lkZ2V0OiBmYWxzZSxcbiAgICAgICAgbWluaU1vZGU6IGZhbHNlLFxuICAgIH07XG5cbiAgICBwcml2YXRlIGNvbnRleHRNZW51QnV0dG9uID0gY3JlYXRlUmVmPGFueT4oKTtcbiAgICBwcml2YXRlIGlmcmFtZTogSFRNTElGcmFtZUVsZW1lbnQ7IC8vIHJlZiB0byB0aGUgaWZyYW1lIChjYWxsYmFjayBzdHlsZSlcbiAgICBwcml2YXRlIGFsbG93ZWRXaWRnZXRzV2F0Y2hSZWY6IHN0cmluZztcbiAgICBwcml2YXRlIHBlcnNpc3RLZXk6IHN0cmluZztcbiAgICBwcml2YXRlIHNnV2lkZ2V0OiBTdG9wR2FwV2lkZ2V0O1xuICAgIHByaXZhdGUgZGlzcGF0Y2hlclJlZjogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IocHJvcHM6IElQcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG5cbiAgICAgICAgLy8gVGhlIGtleSB1c2VkIGZvciBQZXJzaXN0ZWRFbGVtZW50XG4gICAgICAgIHRoaXMucGVyc2lzdEtleSA9IGdldFBlcnNpc3RLZXkodGhpcy5wcm9wcy5hcHAuaWQpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5zZ1dpZGdldCA9IG5ldyBTdG9wR2FwV2lkZ2V0KHRoaXMucHJvcHMpO1xuICAgICAgICAgICAgdGhpcy5zZ1dpZGdldC5vbihcInByZXBhcmluZ1wiLCB0aGlzLm9uV2lkZ2V0UHJlcGFyaW5nKTtcbiAgICAgICAgICAgIHRoaXMuc2dXaWRnZXQub24oXCJyZWFkeVwiLCB0aGlzLm9uV2lkZ2V0UmVhZHkpO1xuICAgICAgICAgICAgLy8gZW1pdHMgd2hlbiB0aGUgY2FwYWJpbGl0ZXMgaGF2ZSBiZWVuIHNldHVwIG9yIGNoYW5nZWRcbiAgICAgICAgICAgIHRoaXMuc2dXaWRnZXQub24oXCJjYXBhYmlsaXRpZXNOb3RpZmllZFwiLCB0aGlzLm9uV2lkZ2V0Q2FwYWJpbGl0aWVzTm90aWZpZWQpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBsb2dnZXIubG9nKFwiRmFpbGVkIHRvIGNvbnN0cnVjdCB3aWRnZXRcIiwgZSk7XG4gICAgICAgICAgICB0aGlzLnNnV2lkZ2V0ID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc3RhdGUgPSB0aGlzLmdldE5ld1N0YXRlKHByb3BzKTtcblxuICAgICAgICB0aGlzLmFsbG93ZWRXaWRnZXRzV2F0Y2hSZWYgPSBTZXR0aW5nc1N0b3JlLndhdGNoU2V0dGluZyhcImFsbG93ZWRXaWRnZXRzXCIsIG51bGwsIHRoaXMub25BbGxvd2VkV2lkZ2V0c0NoYW5nZSk7XG4gICAgfVxuXG4gICAgLy8gVGhpcyBpcyBhIGZ1bmN0aW9uIHRvIG1ha2UgdGhlIGltcGFjdCBvZiBjYWxsaW5nIFNldHRpbmdzU3RvcmUgc2xpZ2h0bHkgbGVzc1xuICAgIHByaXZhdGUgaGFzUGVybWlzc2lvblRvTG9hZCA9IChwcm9wczogSVByb3BzKTogYm9vbGVhbiA9PiB7XG4gICAgICAgIGlmICh0aGlzLnVzaW5nTG9jYWxXaWRnZXQoKSkgcmV0dXJuIHRydWU7XG4gICAgICAgIGlmICghcHJvcHMucm9vbSkgcmV0dXJuIHRydWU7IC8vIHVzZXIgd2lkZ2V0cyBhbHdheXMgaGF2ZSBwZXJtaXNzaW9uc1xuXG4gICAgICAgIGNvbnN0IGN1cnJlbnRseUFsbG93ZWRXaWRnZXRzID0gU2V0dGluZ3NTdG9yZS5nZXRWYWx1ZShcImFsbG93ZWRXaWRnZXRzXCIsIHByb3BzLnJvb20ucm9vbUlkKTtcbiAgICAgICAgaWYgKGN1cnJlbnRseUFsbG93ZWRXaWRnZXRzW3Byb3BzLmFwcC5ldmVudElkXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gcHJvcHMudXNlcklkID09PSBwcm9wcy5jcmVhdG9yVXNlcklkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAhIWN1cnJlbnRseUFsbG93ZWRXaWRnZXRzW3Byb3BzLmFwcC5ldmVudElkXTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU2V0IGluaXRpYWwgY29tcG9uZW50IHN0YXRlIHdoZW4gdGhlIEFwcCB3VXJsICh3aWRnZXQgVVJMKSBpcyBiZWluZyB1cGRhdGVkLlxuICAgICAqIENvbXBvbmVudCBwcm9wcyAqbXVzdCogYmUgcGFzc2VkIChyYXRoZXIgdGhhbiByZWx5aW5nIG9uIHRoaXMucHJvcHMpLlxuICAgICAqIEBwYXJhbSAge09iamVjdH0gbmV3UHJvcHMgVGhlIG5ldyBwcm9wZXJ0aWVzIG9mIHRoZSBjb21wb25lbnRcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IFVwZGF0ZWQgY29tcG9uZW50IHN0YXRlIHRvIGJlIHNldCB3aXRoIHNldFN0YXRlXG4gICAgICovXG4gICAgcHJpdmF0ZSBnZXROZXdTdGF0ZShuZXdQcm9wczogSVByb3BzKTogSVN0YXRlIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGluaXRpYWxpc2luZzogdHJ1ZSwgLy8gVHJ1ZSB3aGlsZSB3ZSBhcmUgbWFuZ2xpbmcgdGhlIHdpZGdldCBVUkxcbiAgICAgICAgICAgIC8vIFRydWUgd2hpbGUgdGhlIGlmcmFtZSBjb250ZW50IGlzIGxvYWRpbmdcbiAgICAgICAgICAgIGxvYWRpbmc6IHRoaXMucHJvcHMud2FpdEZvcklmcmFtZUxvYWQgJiYgIVBlcnNpc3RlZEVsZW1lbnQuaXNNb3VudGVkKHRoaXMucGVyc2lzdEtleSksXG4gICAgICAgICAgICAvLyBBc3N1bWUgdGhhdCB3aWRnZXQgaGFzIHBlcm1pc3Npb24gdG8gbG9hZCBpZiB3ZSBhcmUgdGhlIHVzZXIgd2hvXG4gICAgICAgICAgICAvLyBhZGRlZCBpdCB0byB0aGUgcm9vbSwgb3IgaWYgZXhwbGljaXRseSBncmFudGVkIGJ5IHRoZSB1c2VyXG4gICAgICAgICAgICBoYXNQZXJtaXNzaW9uVG9Mb2FkOiB0aGlzLmhhc1Blcm1pc3Npb25Ub0xvYWQobmV3UHJvcHMpLFxuICAgICAgICAgICAgZXJyb3I6IG51bGwsXG4gICAgICAgICAgICBtZW51RGlzcGxheWVkOiBmYWxzZSxcbiAgICAgICAgICAgIHdpZGdldFBhZ2VUaXRsZTogdGhpcy5wcm9wcy53aWRnZXRQYWdlVGl0bGUsXG4gICAgICAgICAgICAvLyByZXF1aXJlc0NsaWVudCBpcyBpbml0aWFsbHkgc2V0IHRvIHRydWUuIFRoaXMgYXZvaWRzIHRoZSBicm9rZW4gc3RhdGUgb2YgdGhlIHBvcG91dFxuICAgICAgICAgICAgLy8gYnV0dG9uIGJlaW5nIHZpc2libGUgKGZvciBhbiBpbnN0YW5jZSkgYW5kIHRoZW4gZGlzYXBwZWFyaW5nIHdoZW4gdGhlIHdpZGdldCBpcyBsb2FkZWQuXG4gICAgICAgICAgICAvLyByZXF1aXJlc0NsaWVudCA8LT4gaGlkZSB0aGUgcG9wb3V0IGJ1dHRvblxuICAgICAgICAgICAgcmVxdWlyZXNDbGllbnQ6IHRydWUsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvbkFsbG93ZWRXaWRnZXRzQ2hhbmdlID0gKCk6IHZvaWQgPT4ge1xuICAgICAgICBjb25zdCBoYXNQZXJtaXNzaW9uVG9Mb2FkID0gdGhpcy5oYXNQZXJtaXNzaW9uVG9Mb2FkKHRoaXMucHJvcHMpO1xuXG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmhhc1Blcm1pc3Npb25Ub0xvYWQgJiYgIWhhc1Blcm1pc3Npb25Ub0xvYWQpIHtcbiAgICAgICAgICAgIC8vIEZvcmNlIHRoZSB3aWRnZXQgdG8gYmUgbm9uLXBlcnNpc3RlbnQgKGFibGUgdG8gYmUgZGVsZXRlZC9mb3Jnb3R0ZW4pXG4gICAgICAgICAgICBBY3RpdmVXaWRnZXRTdG9yZS5pbnN0YW5jZS5kZXN0cm95UGVyc2lzdGVudFdpZGdldCh0aGlzLnByb3BzLmFwcC5pZCk7XG4gICAgICAgICAgICBQZXJzaXN0ZWRFbGVtZW50LmRlc3Ryb3lFbGVtZW50KHRoaXMucGVyc2lzdEtleSk7XG4gICAgICAgICAgICBpZiAodGhpcy5zZ1dpZGdldCkgdGhpcy5zZ1dpZGdldC5zdG9wKCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNldFN0YXRlKHsgaGFzUGVybWlzc2lvblRvTG9hZCB9KTtcbiAgICB9O1xuXG4gICAgcHJpdmF0ZSBpc01peGVkQ29udGVudCgpOiBib29sZWFuIHtcbiAgICAgICAgY29uc3QgcGFyZW50Q29udGVudFByb3RvY29sID0gd2luZG93LmxvY2F0aW9uLnByb3RvY29sO1xuICAgICAgICBjb25zdCB1ID0gdXJsLnBhcnNlKHRoaXMucHJvcHMuYXBwLnVybCk7XG4gICAgICAgIGNvbnN0IGNoaWxkQ29udGVudFByb3RvY29sID0gdS5wcm90b2NvbDtcbiAgICAgICAgaWYgKHBhcmVudENvbnRlbnRQcm90b2NvbCA9PT0gJ2h0dHBzOicgJiYgY2hpbGRDb250ZW50UHJvdG9jb2wgIT09ICdodHRwczonKSB7XG4gICAgICAgICAgICBsb2dnZXIud2FybihcIlJlZnVzaW5nIHRvIGxvYWQgbWl4ZWQtY29udGVudCBhcHA6XCIsXG4gICAgICAgICAgICAgICAgcGFyZW50Q29udGVudFByb3RvY29sLCBjaGlsZENvbnRlbnRQcm90b2NvbCwgd2luZG93LmxvY2F0aW9uLCB0aGlzLnByb3BzLmFwcC51cmwpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHB1YmxpYyBjb21wb25lbnREaWRNb3VudCgpOiB2b2lkIHtcbiAgICAgICAgLy8gT25seSBmZXRjaCBJTSB0b2tlbiBvbiBtb3VudCBpZiB3ZSdyZSBzaG93aW5nIGFuZCBoYXZlIHBlcm1pc3Npb24gdG8gbG9hZFxuICAgICAgICBpZiAodGhpcy5zZ1dpZGdldCAmJiB0aGlzLnN0YXRlLmhhc1Blcm1pc3Npb25Ub0xvYWQpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhcnRXaWRnZXQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFdpZGdldCBhY3Rpb24gbGlzdGVuZXJzXG4gICAgICAgIHRoaXMuZGlzcGF0Y2hlclJlZiA9IGRpcy5yZWdpc3Rlcih0aGlzLm9uQWN0aW9uKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgY29tcG9uZW50V2lsbFVubW91bnQoKTogdm9pZCB7XG4gICAgICAgIC8vIFdpZGdldCBhY3Rpb24gbGlzdGVuZXJzXG4gICAgICAgIGlmICh0aGlzLmRpc3BhdGNoZXJSZWYpIGRpcy51bnJlZ2lzdGVyKHRoaXMuZGlzcGF0Y2hlclJlZik7XG5cbiAgICAgICAgLy8gaWYgaXQncyBub3QgcmVtYWluaW5nIG9uIHNjcmVlbiwgZ2V0IHJpZCBvZiB0aGUgUGVyc2lzdGVkRWxlbWVudCBjb250YWluZXJcbiAgICAgICAgaWYgKCFBY3RpdmVXaWRnZXRTdG9yZS5pbnN0YW5jZS5nZXRXaWRnZXRQZXJzaXN0ZW5jZSh0aGlzLnByb3BzLmFwcC5pZCkpIHtcbiAgICAgICAgICAgIEFjdGl2ZVdpZGdldFN0b3JlLmluc3RhbmNlLmRlc3Ryb3lQZXJzaXN0ZW50V2lkZ2V0KHRoaXMucHJvcHMuYXBwLmlkKTtcbiAgICAgICAgICAgIFBlcnNpc3RlZEVsZW1lbnQuZGVzdHJveUVsZW1lbnQodGhpcy5wZXJzaXN0S2V5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnNnV2lkZ2V0KSB7XG4gICAgICAgICAgICB0aGlzLnNnV2lkZ2V0LnN0b3AoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIFNldHRpbmdzU3RvcmUudW53YXRjaFNldHRpbmcodGhpcy5hbGxvd2VkV2lkZ2V0c1dhdGNoUmVmKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlc2V0V2lkZ2V0KG5ld1Byb3BzOiBJUHJvcHMpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMuc2dXaWRnZXQpIHtcbiAgICAgICAgICAgIHRoaXMuc2dXaWRnZXQuc3RvcCgpO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLnNnV2lkZ2V0ID0gbmV3IFN0b3BHYXBXaWRnZXQobmV3UHJvcHMpO1xuICAgICAgICAgICAgdGhpcy5zZ1dpZGdldC5vbihcInByZXBhcmluZ1wiLCB0aGlzLm9uV2lkZ2V0UHJlcGFyaW5nKTtcbiAgICAgICAgICAgIHRoaXMuc2dXaWRnZXQub24oXCJyZWFkeVwiLCB0aGlzLm9uV2lkZ2V0UmVhZHkpO1xuICAgICAgICAgICAgdGhpcy5zdGFydFdpZGdldCgpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBsb2dnZXIuZXJyb3IoXCJGYWlsZWQgdG8gY29uc3RydWN0IHdpZGdldFwiLCBlKTtcbiAgICAgICAgICAgIHRoaXMuc2dXaWRnZXQgPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdGFydFdpZGdldCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5zZ1dpZGdldC5wcmVwYXJlKCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgaW5pdGlhbGlzaW5nOiBmYWxzZSB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpZnJhbWVSZWZDaGFuZ2UgPSAocmVmOiBIVE1MSUZyYW1lRWxlbWVudCk6IHZvaWQgPT4ge1xuICAgICAgICB0aGlzLmlmcmFtZSA9IHJlZjtcbiAgICAgICAgaWYgKHJlZikge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zZ1dpZGdldCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNnV2lkZ2V0LnN0YXJ0KHJlZik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcihcIkZhaWxlZCB0byBzdGFydCB3aWRnZXRcIiwgZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnJlc2V0V2lkZ2V0KHRoaXMucHJvcHMpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8vIFRPRE86IFtSRUFDVC1XQVJOSU5HXSBSZXBsYWNlIHdpdGggYXBwcm9wcmlhdGUgbGlmZWN5Y2xlIGV2ZW50XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvblxuICAgIHB1YmxpYyBVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHM6IElQcm9wcyk6IHZvaWQgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNhbWVsY2FzZVxuICAgICAgICBpZiAobmV4dFByb3BzLmFwcC51cmwgIT09IHRoaXMucHJvcHMuYXBwLnVybCkge1xuICAgICAgICAgICAgdGhpcy5nZXROZXdTdGF0ZShuZXh0UHJvcHMpO1xuICAgICAgICAgICAgaWYgKHRoaXMuc3RhdGUuaGFzUGVybWlzc2lvblRvTG9hZCkge1xuICAgICAgICAgICAgICAgIHRoaXMucmVzZXRXaWRnZXQobmV4dFByb3BzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChuZXh0UHJvcHMud2lkZ2V0UGFnZVRpdGxlICE9PSB0aGlzLnByb3BzLndpZGdldFBhZ2VUaXRsZSkge1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgd2lkZ2V0UGFnZVRpdGxlOiBuZXh0UHJvcHMud2lkZ2V0UGFnZVRpdGxlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFbmRzIGFsbCB3aWRnZXQgaW50ZXJhY3Rpb24sIHN1Y2ggYXMgY2FuY2VsbGluZyBjYWxscyBhbmQgZGlzYWJsaW5nIHdlYmNhbXMuXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTwqPn0gUmVzb2x2ZXMgd2hlbiB0aGUgd2lkZ2V0IGlzIHRlcm1pbmF0ZWQsIG9yIHRpbWVvdXQgcGFzc2VkLlxuICAgICAqL1xuICAgIHByaXZhdGUgYXN5bmMgZW5kV2lkZ2V0QWN0aW9ucygpOiBQcm9taXNlPHZvaWQ+IHsgLy8gd2lkZ2V0IG1pZ3JhdGlvbiBkZXYgbm90ZTogYXN5bmMgdG8gbWFpbnRhaW4gc2lnbmF0dXJlXG4gICAgICAgIC8vIEhBQ0s6IFRoaXMgaXMgYSByZWFsbHkgZGlydHkgd2F5IHRvIGVuc3VyZSB0aGF0IEppdHNpIGNsZWFucyB1cFxuICAgICAgICAvLyBpdHMgaG9sZCBvbiB0aGUgd2ViY2FtLiBXaXRob3V0IHRoaXMsIHRoZSB3aWRnZXQgaG9sZHMgYSBtZWRpYVxuICAgICAgICAvLyBzdHJlYW0gb3BlbiwgZXZlbiBhZnRlciBkZWF0aC4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS92ZWN0b3ItaW0vZWxlbWVudC13ZWIvaXNzdWVzLzczNTFcbiAgICAgICAgaWYgKHRoaXMuaWZyYW1lKSB7XG4gICAgICAgICAgICAvLyBJbiBwcmFjdGljZSB3ZSBjb3VsZCBqdXN0IGRvIGArPSAnJ2AgdG8gdHJpY2sgdGhlIGJyb3dzZXJcbiAgICAgICAgICAgIC8vIGludG8gdGhpbmtpbmcgdGhlIFVSTCBjaGFuZ2VkLCBob3dldmVyIEkgY2FuIGZvcmVzZWUgdGhpc1xuICAgICAgICAgICAgLy8gYmVpbmcgb3B0aW1pemVkIG91dCBieSBhIGJyb3dzZXIuIEluc3RlYWQsIHdlJ2xsIGp1c3QgcG9pbnRcbiAgICAgICAgICAgIC8vIHRoZSBpZnJhbWUgYXQgYSBwYWdlIHRoYXQgaXMgcmVhc29uYWJseSBzYWZlIHRvIHVzZSBpbiB0aGVcbiAgICAgICAgICAgIC8vIGV2ZW50IHRoZSBpZnJhbWUgZG9lc24ndCB3aW5rIGF3YXkuXG4gICAgICAgICAgICAvLyBUaGlzIGlzIHJlbGF0aXZlIHRvIHdoZXJlIHRoZSBFbGVtZW50IGluc3RhbmNlIGlzIGxvY2F0ZWQuXG4gICAgICAgICAgICB0aGlzLmlmcmFtZS5zcmMgPSAnYWJvdXQ6YmxhbmsnO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKFdpZGdldFR5cGUuSklUU0kubWF0Y2hlcyh0aGlzLnByb3BzLmFwcC50eXBlKSkge1xuICAgICAgICAgICAgZGlzLmRpc3BhdGNoKHsgYWN0aW9uOiAnaGFuZ3VwX2NvbmZlcmVuY2UnIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRGVsZXRlIHRoZSB3aWRnZXQgZnJvbSB0aGUgcGVyc2lzdGVkIHN0b3JlIGZvciBnb29kIG1lYXN1cmUuXG4gICAgICAgIFBlcnNpc3RlZEVsZW1lbnQuZGVzdHJveUVsZW1lbnQodGhpcy5wZXJzaXN0S2V5KTtcbiAgICAgICAgQWN0aXZlV2lkZ2V0U3RvcmUuaW5zdGFuY2UuZGVzdHJveVBlcnNpc3RlbnRXaWRnZXQodGhpcy5wcm9wcy5hcHAuaWQpO1xuXG4gICAgICAgIGlmICh0aGlzLnNnV2lkZ2V0KSB0aGlzLnNnV2lkZ2V0LnN0b3AoeyBmb3JjZURlc3Ryb3k6IHRydWUgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvbldpZGdldFByZXBhcmluZyA9ICgpOiB2b2lkID0+IHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGxvYWRpbmc6IGZhbHNlIH0pO1xuICAgIH07XG5cbiAgICBwcml2YXRlIG9uV2lkZ2V0UmVhZHkgPSAoKTogdm9pZCA9PiB7XG4gICAgICAgIGlmIChXaWRnZXRUeXBlLkpJVFNJLm1hdGNoZXModGhpcy5wcm9wcy5hcHAudHlwZSkpIHtcbiAgICAgICAgICAgIHRoaXMuc2dXaWRnZXQud2lkZ2V0QXBpLnRyYW5zcG9ydC5zZW5kKEVsZW1lbnRXaWRnZXRBY3Rpb25zLkNsaWVudFJlYWR5LCB7fSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcHJpdmF0ZSBvbldpZGdldENhcGFiaWxpdGllc05vdGlmaWVkID0gKCk6IHZvaWQgPT4ge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIHJlcXVpcmVzQ2xpZW50OiB0aGlzLnNnV2lkZ2V0LndpZGdldEFwaS5oYXNDYXBhYmlsaXR5KE1hdHJpeENhcGFiaWxpdGllcy5SZXF1aXJlc0NsaWVudCksXG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBwcml2YXRlIG9uQWN0aW9uID0gKHBheWxvYWQpOiB2b2lkID0+IHtcbiAgICAgICAgaWYgKHBheWxvYWQud2lkZ2V0SWQgPT09IHRoaXMucHJvcHMuYXBwLmlkKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHBheWxvYWQuYWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnbS5zdGlja2VyJzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuc2dXaWRnZXQud2lkZ2V0QXBpLmhhc0NhcGFiaWxpdHkoTWF0cml4Q2FwYWJpbGl0aWVzLlN0aWNrZXJTZW5kaW5nKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGlzLmRpc3BhdGNoKHsgYWN0aW9uOiAncG9zdF9zdGlja2VyX21lc3NhZ2UnLCBkYXRhOiBwYXlsb2FkLmRhdGEgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaXMuZGlzcGF0Y2goeyBhY3Rpb246ICdzdGlja2VycGlja2VyX2Nsb3NlJyB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlci53YXJuKCdJZ25vcmluZyBzdGlja2VyIG1lc3NhZ2UuIEludmFsaWQgY2FwYWJpbGl0eScpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIHByaXZhdGUgZ3JhbnRXaWRnZXRQZXJtaXNzaW9uID0gKCk6IHZvaWQgPT4ge1xuICAgICAgICBjb25zdCByb29tSWQgPSB0aGlzLnByb3BzLnJvb20ucm9vbUlkO1xuICAgICAgICBsb2dnZXIuaW5mbyhcIkdyYW50aW5nIHBlcm1pc3Npb24gZm9yIHdpZGdldCB0byBsb2FkOiBcIiArIHRoaXMucHJvcHMuYXBwLmV2ZW50SWQpO1xuICAgICAgICBjb25zdCBjdXJyZW50ID0gU2V0dGluZ3NTdG9yZS5nZXRWYWx1ZShcImFsbG93ZWRXaWRnZXRzXCIsIHJvb21JZCk7XG4gICAgICAgIGN1cnJlbnRbdGhpcy5wcm9wcy5hcHAuZXZlbnRJZF0gPSB0cnVlO1xuICAgICAgICBjb25zdCBsZXZlbCA9IFNldHRpbmdzU3RvcmUuZmlyc3RTdXBwb3J0ZWRMZXZlbChcImFsbG93ZWRXaWRnZXRzXCIpO1xuICAgICAgICBTZXR0aW5nc1N0b3JlLnNldFZhbHVlKFwiYWxsb3dlZFdpZGdldHNcIiwgcm9vbUlkLCBsZXZlbCwgY3VycmVudCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgaGFzUGVybWlzc2lvblRvTG9hZDogdHJ1ZSB9KTtcblxuICAgICAgICAgICAgLy8gRmV0Y2ggYSB0b2tlbiBmb3IgdGhlIGludGVncmF0aW9uIG1hbmFnZXIsIG5vdyB0aGF0IHdlJ3JlIGFsbG93ZWQgdG9cbiAgICAgICAgICAgIHRoaXMuc3RhcnRXaWRnZXQoKTtcbiAgICAgICAgfSkuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICAgIGxvZ2dlci5lcnJvcihlcnIpO1xuICAgICAgICAgICAgLy8gV2UgZG9uJ3QgcmVhbGx5IG5lZWQgdG8gZG8gYW55dGhpbmcgYWJvdXQgdGhpcyAtIHRoZSB1c2VyIHdpbGwganVzdCBoaXQgdGhlIGJ1dHRvbiBhZ2Fpbi5cbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIHByaXZhdGUgZm9ybWF0QXBwVGlsZU5hbWUoKTogc3RyaW5nIHtcbiAgICAgICAgbGV0IGFwcFRpbGVOYW1lID0gXCJObyBuYW1lXCI7XG4gICAgICAgIGlmICh0aGlzLnByb3BzLmFwcC5uYW1lICYmIHRoaXMucHJvcHMuYXBwLm5hbWUudHJpbSgpKSB7XG4gICAgICAgICAgICBhcHBUaWxlTmFtZSA9IHRoaXMucHJvcHMuYXBwLm5hbWUudHJpbSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcHBUaWxlTmFtZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHdlJ3JlIHVzaW5nIGEgbG9jYWwgdmVyc2lvbiBvZiB0aGUgd2lkZ2V0IHJhdGhlciB0aGFuIGxvYWRpbmcgdGhlXG4gICAgICogYWN0dWFsIHdpZGdldCBVUkxcbiAgICAgKiBAcmV0dXJucyB7Ym9vbH0gdHJ1ZSBJZiB1c2luZyBhIGxvY2FsIHZlcnNpb24gb2YgdGhlIHdpZGdldFxuICAgICAqL1xuICAgIHByaXZhdGUgdXNpbmdMb2NhbFdpZGdldCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIFdpZGdldFR5cGUuSklUU0kubWF0Y2hlcyh0aGlzLnByb3BzLmFwcC50eXBlKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldFRpbGVUaXRsZSgpOiBKU1guRWxlbWVudCB7XG4gICAgICAgIGNvbnN0IG5hbWUgPSB0aGlzLmZvcm1hdEFwcFRpbGVOYW1lKCk7XG4gICAgICAgIGNvbnN0IHRpdGxlU3BhY2VyID0gPHNwYW4+Jm5ic3A7LSZuYnNwOzwvc3Bhbj47XG4gICAgICAgIGxldCB0aXRsZSA9ICcnO1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS53aWRnZXRQYWdlVGl0bGUgJiYgdGhpcy5zdGF0ZS53aWRnZXRQYWdlVGl0bGUgIT09IHRoaXMuZm9ybWF0QXBwVGlsZU5hbWUoKSkge1xuICAgICAgICAgICAgdGl0bGUgPSB0aGlzLnN0YXRlLndpZGdldFBhZ2VUaXRsZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8c3Bhbj5cbiAgICAgICAgICAgICAgICA8V2lkZ2V0QXZhdGFyIGFwcD17dGhpcy5wcm9wcy5hcHB9IC8+XG4gICAgICAgICAgICAgICAgPGI+eyBuYW1lIH08L2I+XG4gICAgICAgICAgICAgICAgPHNwYW4+eyB0aXRsZSA/IHRpdGxlU3BhY2VyIDogJycgfXsgdGl0bGUgfTwvc3Bhbj5cbiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBUT0RPIHJlcGxhY2Ugd2l0aCBmdWxsIHNjcmVlbiBpbnRlcmFjdGlvbnNcbiAgICBwcml2YXRlIG9uUG9wb3V0V2lkZ2V0Q2xpY2sgPSAoKTogdm9pZCA9PiB7XG4gICAgICAgIC8vIEVuc3VyZSBKaXRzaSBjb25mZXJlbmNlcyBhcmUgY2xvc2VkIG9uIHBvcC1vdXQsIHRvIG5vdCBjb25mdXNlIHRoZSB1c2VyIHRvIGpvaW4gdGhlbVxuICAgICAgICAvLyB0d2ljZSBmcm9tIHRoZSBzYW1lIGNvbXB1dGVyLCB3aGljaCBKaXRzaSBjYW4gaGF2ZSBwcm9ibGVtcyB3aXRoIChhdWRpbyBlY2hvL2dhaW4tbG9vcCkuXG4gICAgICAgIGlmIChXaWRnZXRUeXBlLkpJVFNJLm1hdGNoZXModGhpcy5wcm9wcy5hcHAudHlwZSkpIHtcbiAgICAgICAgICAgIHRoaXMuZW5kV2lkZ2V0QWN0aW9ucygpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlmcmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBSZWxvYWQgaWZyYW1lXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaWZyYW1lLnNyYyA9IHRoaXMuc2dXaWRnZXQuZW1iZWRVcmw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVXNpbmcgT2JqZWN0LmFzc2lnbiB3b3JrYXJvdW5kIGFzIHRoZSBmb2xsb3dpbmcgb3BlbnMgaW4gYSBuZXcgd2luZG93IGluc3RlYWQgb2YgYSBuZXcgdGFiLlxuICAgICAgICAvLyB3aW5kb3cub3Blbih0aGlzLl9nZXRQb3BvdXRVcmwoKSwgJ19ibGFuaycsICdub29wZW5lcj15ZXMnKTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyksXG4gICAgICAgICAgICB7IHRhcmdldDogJ19ibGFuaycsIGhyZWY6IHRoaXMuc2dXaWRnZXQucG9wb3V0VXJsLCByZWw6ICdub3JlZmVycmVyIG5vb3BlbmVyJyB9KS5jbGljaygpO1xuICAgIH07XG5cbiAgICBwcml2YXRlIG9uTWF4TWluV2lkZ2V0Q2xpY2sgPSAoKTogdm9pZCA9PiB7XG4gICAgICAgIGNvbnN0IHRhcmdldENvbnRhaW5lciA9XG4gICAgICAgICAgICBXaWRnZXRMYXlvdXRTdG9yZS5pbnN0YW5jZS5pc0luQ29udGFpbmVyKHRoaXMucHJvcHMucm9vbSwgdGhpcy5wcm9wcy5hcHAsIENvbnRhaW5lci5DZW50ZXIpXG4gICAgICAgICAgICAgICAgPyBDb250YWluZXIuUmlnaHRcbiAgICAgICAgICAgICAgICA6IENvbnRhaW5lci5DZW50ZXI7XG4gICAgICAgIFdpZGdldExheW91dFN0b3JlLmluc3RhbmNlLm1vdmVUb0NvbnRhaW5lcih0aGlzLnByb3BzLnJvb20sIHRoaXMucHJvcHMuYXBwLCB0YXJnZXRDb250YWluZXIpO1xuICAgIH07XG5cbiAgICBwcml2YXRlIG9uQ29udGV4dE1lbnVDbGljayA9ICgpOiB2b2lkID0+IHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IG1lbnVEaXNwbGF5ZWQ6IHRydWUgfSk7XG4gICAgfTtcblxuICAgIHByaXZhdGUgY2xvc2VDb250ZXh0TWVudSA9ICgpOiB2b2lkID0+IHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IG1lbnVEaXNwbGF5ZWQ6IGZhbHNlIH0pO1xuICAgIH07XG5cbiAgICBwdWJsaWMgcmVuZGVyKCk6IEpTWC5FbGVtZW50IHtcbiAgICAgICAgbGV0IGFwcFRpbGVCb2R5O1xuXG4gICAgICAgIC8vIE5vdGUgdGhhdCB0aGVyZSBpcyBhZHZpY2Ugc2F5aW5nIGFsbG93LXNjcmlwdHMgc2hvdWxkbid0IGJlIHVzZWQgd2l0aCBhbGxvdy1zYW1lLW9yaWdpblxuICAgICAgICAvLyBiZWNhdXNlIHRoYXQgd291bGQgYWxsb3cgdGhlIGlmcmFtZSB0byBwcm9ncmFtbWF0aWNhbGx5IHJlbW92ZSB0aGUgc2FuZGJveCBhdHRyaWJ1dGUsIGJ1dFxuICAgICAgICAvLyB0aGlzIHdvdWxkIG9ubHkgYmUgZm9yIGNvbnRlbnQgaG9zdGVkIG9uIHRoZSBzYW1lIG9yaWdpbiBhcyB0aGUgZWxlbWVudCBjbGllbnQ6IGFueXRoaW5nXG4gICAgICAgIC8vIGhvc3RlZCBvbiB0aGUgc2FtZSBvcmlnaW4gYXMgdGhlIGNsaWVudCB3aWxsIGdldCB0aGUgc2FtZSBhY2Nlc3MgYXMgaWYgeW91IGNsaWNrZWRcbiAgICAgICAgLy8gYSBsaW5rIHRvIGl0LlxuICAgICAgICBjb25zdCBzYW5kYm94RmxhZ3MgPSBcImFsbG93LWZvcm1zIGFsbG93LXBvcHVwcyBhbGxvdy1wb3B1cHMtdG8tZXNjYXBlLXNhbmRib3ggXCIgK1xuICAgICAgICAgICAgXCJhbGxvdy1zYW1lLW9yaWdpbiBhbGxvdy1zY3JpcHRzIGFsbG93LXByZXNlbnRhdGlvblwiO1xuXG4gICAgICAgIC8vIEFkZGl0aW9uYWwgaWZyYW1lIGZlYXR1cmUgcGVtaXNzaW9uc1xuICAgICAgICAvLyAoc2VlIC0gaHR0cHM6Ly9zaXRlcy5nb29nbGUuY29tL2EvY2hyb21pdW0ub3JnL2Rldi9Ib21lL2Nocm9taXVtLXNlY3VyaXR5L2RlcHJlY2F0aW5nLXBlcm1pc3Npb25zLWluLWNyb3NzLW9yaWdpbi1pZnJhbWVzIGFuZCBodHRwczovL3dpY2cuZ2l0aHViLmlvL2ZlYXR1cmUtcG9saWN5LylcbiAgICAgICAgY29uc3QgaWZyYW1lRmVhdHVyZXMgPSBcIm1pY3JvcGhvbmU7IGNhbWVyYTsgZW5jcnlwdGVkLW1lZGlhOyBhdXRvcGxheTsgZGlzcGxheS1jYXB0dXJlOyBjbGlwYm9hcmQtd3JpdGU7XCI7XG5cbiAgICAgICAgY29uc3QgYXBwVGlsZUJvZHlDbGFzcyA9ICdteF9BcHBUaWxlQm9keScgKyAodGhpcy5wcm9wcy5taW5pTW9kZSA/ICdfbWluaSAgJyA6ICcgJyk7XG4gICAgICAgIGNvbnN0IGFwcFRpbGVCb2R5U3R5bGVzID0ge307XG4gICAgICAgIGlmICh0aGlzLnByb3BzLnBvaW50ZXJFdmVudHMpIHtcbiAgICAgICAgICAgIGFwcFRpbGVCb2R5U3R5bGVzWydwb2ludGVyLWV2ZW50cyddID0gdGhpcy5wcm9wcy5wb2ludGVyRXZlbnRzO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbG9hZGluZ0VsZW1lbnQgPSAoXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm14X0FwcExvYWRpbmdfc3Bpbm5lcl9mYWRlSW5cIj5cbiAgICAgICAgICAgICAgICA8U3Bpbm5lciBtZXNzYWdlPXtfdChcIkxvYWRpbmcuLi5cIil9IC8+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICAgICAgaWYgKHRoaXMuc2dXaWRnZXQgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGFwcFRpbGVCb2R5ID0gKFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXthcHBUaWxlQm9keUNsYXNzfSBzdHlsZT17YXBwVGlsZUJvZHlTdHlsZXN9PlxuICAgICAgICAgICAgICAgICAgICA8QXBwV2FybmluZyBlcnJvck1zZz17X3QoXCJFcnJvciBsb2FkaW5nIFdpZGdldFwiKX0gLz5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSBpZiAoIXRoaXMuc3RhdGUuaGFzUGVybWlzc2lvblRvTG9hZCkge1xuICAgICAgICAgICAgLy8gb25seSBwb3NzaWJsZSBmb3Igcm9vbSB3aWRnZXRzLCBjYW4gYXNzZXJ0IHRoaXMucHJvcHMucm9vbSBoZXJlXG4gICAgICAgICAgICBjb25zdCBpc0VuY3J5cHRlZCA9IE1hdHJpeENsaWVudFBlZy5nZXQoKS5pc1Jvb21FbmNyeXB0ZWQodGhpcy5wcm9wcy5yb29tLnJvb21JZCk7XG4gICAgICAgICAgICBhcHBUaWxlQm9keSA9IChcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17YXBwVGlsZUJvZHlDbGFzc30gc3R5bGU9e2FwcFRpbGVCb2R5U3R5bGVzfT5cbiAgICAgICAgICAgICAgICAgICAgPEFwcFBlcm1pc3Npb25cbiAgICAgICAgICAgICAgICAgICAgICAgIHJvb21JZD17dGhpcy5wcm9wcy5yb29tLnJvb21JZH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0b3JVc2VySWQ9e3RoaXMucHJvcHMuY3JlYXRvclVzZXJJZH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHVybD17dGhpcy5zZ1dpZGdldC5lbWJlZFVybH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlzUm9vbUVuY3J5cHRlZD17aXNFbmNyeXB0ZWR9XG4gICAgICAgICAgICAgICAgICAgICAgICBvblBlcm1pc3Npb25HcmFudGVkPXt0aGlzLmdyYW50V2lkZ2V0UGVybWlzc2lvbn1cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5zdGF0ZS5pbml0aWFsaXNpbmcpIHtcbiAgICAgICAgICAgIGFwcFRpbGVCb2R5ID0gKFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXthcHBUaWxlQm9keUNsYXNzICsgKHRoaXMuc3RhdGUubG9hZGluZyA/ICdteF9BcHBMb2FkaW5nJyA6ICcnKX0gc3R5bGU9e2FwcFRpbGVCb2R5U3R5bGVzfT5cbiAgICAgICAgICAgICAgICAgICAgeyBsb2FkaW5nRWxlbWVudCB9XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNNaXhlZENvbnRlbnQoKSkge1xuICAgICAgICAgICAgICAgIGFwcFRpbGVCb2R5ID0gKFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17YXBwVGlsZUJvZHlDbGFzc30gc3R5bGU9e2FwcFRpbGVCb2R5U3R5bGVzfT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxBcHBXYXJuaW5nIGVycm9yTXNnPXtfdChcIkVycm9yIC0gTWl4ZWQgY29udGVudFwiKX0gLz5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYXBwVGlsZUJvZHkgPSAoXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXthcHBUaWxlQm9keUNsYXNzICsgKHRoaXMuc3RhdGUubG9hZGluZyA/ICdteF9BcHBMb2FkaW5nJyA6ICcnKX0gc3R5bGU9e2FwcFRpbGVCb2R5U3R5bGVzfT5cbiAgICAgICAgICAgICAgICAgICAgICAgIHsgdGhpcy5zdGF0ZS5sb2FkaW5nICYmIGxvYWRpbmdFbGVtZW50IH1cbiAgICAgICAgICAgICAgICAgICAgICAgIDxpZnJhbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGxvdz17aWZyYW1lRmVhdHVyZXN9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmPXt0aGlzLmlmcmFtZVJlZkNoYW5nZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM9e3RoaXMuc2dXaWRnZXQuZW1iZWRVcmx9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxsb3dGdWxsU2NyZWVuPXt0cnVlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNhbmRib3g9e3NhbmRib3hGbGFnc31cbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMucHJvcHMudXNlcldpZGdldCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBBbGwgcm9vbSB3aWRnZXRzIGNhbiB0aGVvcmV0aWNhbGx5IGJlIGFsbG93ZWQgdG8gcmVtYWluIG9uIHNjcmVlbiwgc28gd2VcbiAgICAgICAgICAgICAgICAgICAgLy8gd3JhcCB0aGVtIGFsbCBpbiBhIFBlcnNpc3RlZEVsZW1lbnQgZnJvbSB0aGUgZ2V0LWdvLiBJZiB3ZSB3YWl0LCB0aGUgaWZyYW1lXG4gICAgICAgICAgICAgICAgICAgIC8vIHdpbGwgYmUgcmUtbW91bnRlZCBsYXRlciwgd2hpY2ggbWVhbnMgdGhlIHdpZGdldCBoYXMgdG8gc3RhcnQgb3Zlciwgd2hpY2ggaXNcbiAgICAgICAgICAgICAgICAgICAgLy8gYmFkLlxuXG4gICAgICAgICAgICAgICAgICAgIC8vIEFsc28gd3JhcCB0aGUgUGVyc2lzdGVkRWxlbWVudCBpbiBhIGRpdiB0byBmaXggdGhlIGhlaWdodCwgb3RoZXJ3aXNlXG4gICAgICAgICAgICAgICAgICAgIC8vIEFwcFRpbGUncyBib3JkZXIgaXMgaW4gdGhlIHdyb25nIHBsYWNlXG4gICAgICAgICAgICAgICAgICAgIGFwcFRpbGVCb2R5ID0gPGRpdiBjbGFzc05hbWU9XCJteF9BcHBUaWxlX3BlcnNpc3RlZFdyYXBwZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxQZXJzaXN0ZWRFbGVtZW50IHBlcnNpc3RLZXk9e3RoaXMucGVyc2lzdEtleX0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBhcHBUaWxlQm9keSB9XG4gICAgICAgICAgICAgICAgICAgICAgICA8L1BlcnNpc3RlZEVsZW1lbnQ+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgYXBwVGlsZUNsYXNzZXM7XG4gICAgICAgIGlmICh0aGlzLnByb3BzLm1pbmlNb2RlKSB7XG4gICAgICAgICAgICBhcHBUaWxlQ2xhc3NlcyA9IHsgbXhfQXBwVGlsZV9taW5pOiB0cnVlIH07XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5wcm9wcy5mdWxsV2lkdGgpIHtcbiAgICAgICAgICAgIGFwcFRpbGVDbGFzc2VzID0geyBteF9BcHBUaWxlRnVsbFdpZHRoOiB0cnVlIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhcHBUaWxlQ2xhc3NlcyA9IHsgbXhfQXBwVGlsZTogdHJ1ZSB9O1xuICAgICAgICB9XG4gICAgICAgIGFwcFRpbGVDbGFzc2VzID0gY2xhc3NOYW1lcyhhcHBUaWxlQ2xhc3Nlcyk7XG5cbiAgICAgICAgbGV0IGNvbnRleHRNZW51O1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS5tZW51RGlzcGxheWVkKSB7XG4gICAgICAgICAgICBjb250ZXh0TWVudSA9IChcbiAgICAgICAgICAgICAgICA8Um9vbVdpZGdldENvbnRleHRNZW51XG4gICAgICAgICAgICAgICAgICAgIHsuLi5hYm92ZUxlZnRPZih0aGlzLmNvbnRleHRNZW51QnV0dG9uLmN1cnJlbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksIG51bGwpfVxuICAgICAgICAgICAgICAgICAgICBhcHA9e3RoaXMucHJvcHMuYXBwfVxuICAgICAgICAgICAgICAgICAgICBvbkZpbmlzaGVkPXt0aGlzLmNsb3NlQ29udGV4dE1lbnV9XG4gICAgICAgICAgICAgICAgICAgIHNob3dVbnBpbj17IXRoaXMucHJvcHMudXNlcldpZGdldH1cbiAgICAgICAgICAgICAgICAgICAgdXNlcldpZGdldD17dGhpcy5wcm9wcy51c2VyV2lkZ2V0fVxuICAgICAgICAgICAgICAgICAgICBvbkVkaXRDbGljaz17dGhpcy5wcm9wcy5vbkVkaXRDbGlja31cbiAgICAgICAgICAgICAgICAgICAgb25EZWxldGVDbGljaz17dGhpcy5wcm9wcy5vbkRlbGV0ZUNsaWNrfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGxldCBtYXhNaW5CdXR0b247XG4gICAgICAgIGlmIChTZXR0aW5nc1N0b3JlLmdldFZhbHVlKFwiZmVhdHVyZV9tYXhpbWlzZWRfd2lkZ2V0c1wiKSkge1xuICAgICAgICAgICAgY29uc3Qgd2lkZ2V0SXNNYXhpbWlzZWQgPSBXaWRnZXRMYXlvdXRTdG9yZS5pbnN0YW5jZS5cbiAgICAgICAgICAgICAgICBpc0luQ29udGFpbmVyKHRoaXMucHJvcHMucm9vbSwgdGhpcy5wcm9wcy5hcHAsIENvbnRhaW5lci5DZW50ZXIpO1xuICAgICAgICAgICAgbWF4TWluQnV0dG9uID0gPEFjY2Vzc2libGVCdXR0b25cbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e1xuICAgICAgICAgICAgICAgICAgICBcIm14X0FwcFRpbGVNZW51QmFyX2ljb25CdXR0b25cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAod2lkZ2V0SXNNYXhpbWlzZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IFwiIG14X0FwcFRpbGVNZW51QmFyX2ljb25CdXR0b25fbWluV2lkZ2V0XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IFwiIG14X0FwcFRpbGVNZW51QmFyX2ljb25CdXR0b25fbWF4V2lkZ2V0XCIpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRpdGxlPXtcbiAgICAgICAgICAgICAgICAgICAgd2lkZ2V0SXNNYXhpbWlzZWQgPyBfdCgnQ2xvc2UnKTogX3QoJ01heGltaXNlIHdpZGdldCcpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMub25NYXhNaW5XaWRnZXRDbGlja31cbiAgICAgICAgICAgIC8+O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXthcHBUaWxlQ2xhc3Nlc30gaWQ9e3RoaXMucHJvcHMuYXBwLmlkfT5cbiAgICAgICAgICAgICAgICB7IHRoaXMucHJvcHMuc2hvd01lbnViYXIgJiZcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJteF9BcHBUaWxlTWVudUJhclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwibXhfQXBwVGlsZU1lbnVCYXJUaXRsZVwiIHN0eWxlPXt7IHBvaW50ZXJFdmVudHM6ICh0aGlzLnByb3BzLmhhbmRsZU1pbmltaXNlUG9pbnRlckV2ZW50cyA/ICdhbGwnIDogXCJub25lXCIpIH19PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgdGhpcy5wcm9wcy5zaG93VGl0bGUgJiYgdGhpcy5nZXRUaWxlVGl0bGUoKSB9XG4gICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJteF9BcHBUaWxlTWVudUJhcldpZGdldHNcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IG1heE1pbkJ1dHRvbiB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyAodGhpcy5wcm9wcy5zaG93UG9wb3V0ICYmICF0aGlzLnN0YXRlLnJlcXVpcmVzQ2xpZW50KSAmJiA8QWNjZXNzaWJsZUJ1dHRvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJteF9BcHBUaWxlTWVudUJhcl9pY29uQnV0dG9uIG14X0FwcFRpbGVNZW51QmFyX2ljb25CdXR0b25fcG9wb3V0XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9e190KCdQb3BvdXQgd2lkZ2V0Jyl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMub25Qb3BvdXRXaWRnZXRDbGlja31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPiB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPENvbnRleHRNZW51QnV0dG9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cIm14X0FwcFRpbGVNZW51QmFyX2ljb25CdXR0b24gbXhfQXBwVGlsZU1lbnVCYXJfaWNvbkJ1dHRvbl9tZW51XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw9e190KFwiT3B0aW9uc1wiKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNFeHBhbmRlZD17dGhpcy5zdGF0ZS5tZW51RGlzcGxheWVkfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dFJlZj17dGhpcy5jb250ZXh0TWVudUJ1dHRvbn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5vbkNvbnRleHRNZW51Q2xpY2t9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+IH1cbiAgICAgICAgICAgICAgICB7IGFwcFRpbGVCb2R5IH1cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICB7IGNvbnRleHRNZW51IH1cbiAgICAgICAgPC9SZWFjdC5GcmFnbWVudD47XG4gICAgfVxufVxuIl19