"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _GroupFilterOrderStore = _interopRequireDefault(require("../../../stores/GroupFilterOrderStore"));

var _AccessibleTooltipButton = _interopRequireDefault(require("./AccessibleTooltipButton"));

var _classnames = _interopRequireDefault(require("classnames"));

var _languageHandler = require("../../../languageHandler");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _dec, _class;

let UserTagTile = (_dec = (0, _replaceableComponent.replaceableComponent)("views.elements.UserTagTile"), _dec(_class = class UserTagTile extends _react.default.PureComponent {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "tagStoreRef", void 0);
    (0, _defineProperty2.default)(this, "onTagStoreUpdate", () => {
      const selected = _GroupFilterOrderStore.default.getSelectedTags().length === 0;
      this.setState({
        selected
      });
    });
    (0, _defineProperty2.default)(this, "onTileClick", ev => {
      ev.preventDefault();
      ev.stopPropagation(); // Deselect all tags

      _dispatcher.default.dispatch({
        action: "deselect_tags"
      });
    });
    this.state = {
      selected: _GroupFilterOrderStore.default.getSelectedTags().length === 0
    };
  }

  componentDidMount() {
    this.tagStoreRef = _GroupFilterOrderStore.default.addListener(this.onTagStoreUpdate);
  }

  componentWillUnmount() {
    this.tagStoreRef.remove();
  }

  render() {
    // XXX: We reuse TagTile classes for ease of demonstration - we should probably generify
    // TagTile instead if we continue to use this component.
    const className = (0, _classnames.default)({
      mx_TagTile: true,
      mx_TagTile_prototype: true,
      mx_TagTile_selected_prototype: this.state.selected,
      mx_TagTile_home: true
    });
    return /*#__PURE__*/_react.default.createElement(_AccessibleTooltipButton.default, {
      className: className,
      onClick: this.onTileClick,
      title: (0, _languageHandler._t)("Home")
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_TagTile_avatar"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_TagTile_homeIcon"
    })));
  }

}) || _class);
exports.default = UserTagTile;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL2VsZW1lbnRzL1VzZXJUYWdUaWxlLnRzeCJdLCJuYW1lcyI6WyJVc2VyVGFnVGlsZSIsIlJlYWN0IiwiUHVyZUNvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwicHJvcHMiLCJzZWxlY3RlZCIsIkdyb3VwRmlsdGVyT3JkZXJTdG9yZSIsImdldFNlbGVjdGVkVGFncyIsImxlbmd0aCIsInNldFN0YXRlIiwiZXYiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BQcm9wYWdhdGlvbiIsImRlZmF1bHREaXNwYXRjaGVyIiwiZGlzcGF0Y2giLCJhY3Rpb24iLCJzdGF0ZSIsImNvbXBvbmVudERpZE1vdW50IiwidGFnU3RvcmVSZWYiLCJhZGRMaXN0ZW5lciIsIm9uVGFnU3RvcmVVcGRhdGUiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsInJlbW92ZSIsInJlbmRlciIsImNsYXNzTmFtZSIsIm14X1RhZ1RpbGUiLCJteF9UYWdUaWxlX3Byb3RvdHlwZSIsIm14X1RhZ1RpbGVfc2VsZWN0ZWRfcHJvdG90eXBlIiwibXhfVGFnVGlsZV9ob21lIiwib25UaWxlQ2xpY2siXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBZ0JBOztBQUNBOztBQUVBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOzs7O0lBVXFCQSxXLFdBRHBCLGdEQUFxQiw0QkFBckIsQyxnQkFBRCxNQUNxQkEsV0FEckIsU0FDeUNDLGVBQU1DLGFBRC9DLENBQzZFO0FBR3pFQyxFQUFBQSxXQUFXLENBQUNDLEtBQUQsRUFBZ0I7QUFDdkIsVUFBTUEsS0FBTjtBQUR1QjtBQUFBLDREQWdCQSxNQUFNO0FBQzdCLFlBQU1DLFFBQVEsR0FBR0MsK0JBQXNCQyxlQUF0QixHQUF3Q0MsTUFBeEMsS0FBbUQsQ0FBcEU7QUFDQSxXQUFLQyxRQUFMLENBQWM7QUFBRUosUUFBQUE7QUFBRixPQUFkO0FBQ0gsS0FuQjBCO0FBQUEsdURBcUJKSyxFQUFELElBQVE7QUFDMUJBLE1BQUFBLEVBQUUsQ0FBQ0MsY0FBSDtBQUNBRCxNQUFBQSxFQUFFLENBQUNFLGVBQUgsR0FGMEIsQ0FJMUI7O0FBQ0FDLDBCQUFrQkMsUUFBbEIsQ0FBMkI7QUFBRUMsUUFBQUEsTUFBTSxFQUFFO0FBQVYsT0FBM0I7QUFDSCxLQTNCMEI7QUFHdkIsU0FBS0MsS0FBTCxHQUFhO0FBQ1RYLE1BQUFBLFFBQVEsRUFBRUMsK0JBQXNCQyxlQUF0QixHQUF3Q0MsTUFBeEMsS0FBbUQ7QUFEcEQsS0FBYjtBQUdIOztBQUVNUyxFQUFBQSxpQkFBaUIsR0FBRztBQUN2QixTQUFLQyxXQUFMLEdBQW1CWiwrQkFBc0JhLFdBQXRCLENBQWtDLEtBQUtDLGdCQUF2QyxDQUFuQjtBQUNIOztBQUVNQyxFQUFBQSxvQkFBb0IsR0FBRztBQUMxQixTQUFLSCxXQUFMLENBQWlCSSxNQUFqQjtBQUNIOztBQWVNQyxFQUFBQSxNQUFNLEdBQUc7QUFDWjtBQUNBO0FBQ0EsVUFBTUMsU0FBUyxHQUFHLHlCQUFXO0FBQ3pCQyxNQUFBQSxVQUFVLEVBQUUsSUFEYTtBQUV6QkMsTUFBQUEsb0JBQW9CLEVBQUUsSUFGRztBQUd6QkMsTUFBQUEsNkJBQTZCLEVBQUUsS0FBS1gsS0FBTCxDQUFXWCxRQUhqQjtBQUl6QnVCLE1BQUFBLGVBQWUsRUFBRTtBQUpRLEtBQVgsQ0FBbEI7QUFNQSx3QkFDSSw2QkFBQyxnQ0FBRDtBQUNJLE1BQUEsU0FBUyxFQUFFSixTQURmO0FBRUksTUFBQSxPQUFPLEVBQUUsS0FBS0ssV0FGbEI7QUFHSSxNQUFBLEtBQUssRUFBRSx5QkFBRyxNQUFIO0FBSFgsb0JBS0k7QUFBSyxNQUFBLFNBQVMsRUFBQztBQUFmLG9CQUNJO0FBQUssTUFBQSxTQUFTLEVBQUM7QUFBZixNQURKLENBTEosQ0FESjtBQVdIOztBQXBEd0UsQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5Db3B5cmlnaHQgMjAyMCBUaGUgTWF0cml4Lm9yZyBGb3VuZGF0aW9uIEMuSS5DLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBkZWZhdWx0RGlzcGF0Y2hlciBmcm9tIFwiLi4vLi4vLi4vZGlzcGF0Y2hlci9kaXNwYXRjaGVyXCI7XG5pbXBvcnQgKiBhcyBmYkVtaXR0ZXIgZnJvbSBcImZiZW1pdHRlclwiO1xuaW1wb3J0IEdyb3VwRmlsdGVyT3JkZXJTdG9yZSBmcm9tIFwiLi4vLi4vLi4vc3RvcmVzL0dyb3VwRmlsdGVyT3JkZXJTdG9yZVwiO1xuaW1wb3J0IEFjY2Vzc2libGVUb29sdGlwQnV0dG9uIGZyb20gXCIuL0FjY2Vzc2libGVUb29sdGlwQnV0dG9uXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tIFwiY2xhc3NuYW1lc1wiO1xuaW1wb3J0IHsgX3QgfSBmcm9tIFwiLi4vLi4vLi4vbGFuZ3VhZ2VIYW5kbGVyXCI7XG5pbXBvcnQgeyByZXBsYWNlYWJsZUNvbXBvbmVudCB9IGZyb20gXCIuLi8uLi8uLi91dGlscy9yZXBsYWNlYWJsZUNvbXBvbmVudFwiO1xuXG5pbnRlcmZhY2UgSVByb3BzIHtcbn1cblxuaW50ZXJmYWNlIElTdGF0ZSB7XG4gICAgc2VsZWN0ZWQ6IGJvb2xlYW47XG59XG5cbkByZXBsYWNlYWJsZUNvbXBvbmVudChcInZpZXdzLmVsZW1lbnRzLlVzZXJUYWdUaWxlXCIpXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBVc2VyVGFnVGlsZSBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQ8SVByb3BzLCBJU3RhdGU+IHtcbiAgICBwcml2YXRlIHRhZ1N0b3JlUmVmOiBmYkVtaXR0ZXIuRXZlbnRTdWJzY3JpcHRpb247XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm9wczogSVByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcblxuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgc2VsZWN0ZWQ6IEdyb3VwRmlsdGVyT3JkZXJTdG9yZS5nZXRTZWxlY3RlZFRhZ3MoKS5sZW5ndGggPT09IDAsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcHVibGljIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgICB0aGlzLnRhZ1N0b3JlUmVmID0gR3JvdXBGaWx0ZXJPcmRlclN0b3JlLmFkZExpc3RlbmVyKHRoaXMub25UYWdTdG9yZVVwZGF0ZSk7XG4gICAgfVxuXG4gICAgcHVibGljIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgICB0aGlzLnRhZ1N0b3JlUmVmLnJlbW92ZSgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgb25UYWdTdG9yZVVwZGF0ZSA9ICgpID0+IHtcbiAgICAgICAgY29uc3Qgc2VsZWN0ZWQgPSBHcm91cEZpbHRlck9yZGVyU3RvcmUuZ2V0U2VsZWN0ZWRUYWdzKCkubGVuZ3RoID09PSAwO1xuICAgICAgICB0aGlzLnNldFN0YXRlKHsgc2VsZWN0ZWQgfSk7XG4gICAgfTtcblxuICAgIHByaXZhdGUgb25UaWxlQ2xpY2sgPSAoZXYpID0+IHtcbiAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICAgICAgLy8gRGVzZWxlY3QgYWxsIHRhZ3NcbiAgICAgICAgZGVmYXVsdERpc3BhdGNoZXIuZGlzcGF0Y2goeyBhY3Rpb246IFwiZGVzZWxlY3RfdGFnc1wiIH0pO1xuICAgIH07XG5cbiAgICBwdWJsaWMgcmVuZGVyKCkge1xuICAgICAgICAvLyBYWFg6IFdlIHJldXNlIFRhZ1RpbGUgY2xhc3NlcyBmb3IgZWFzZSBvZiBkZW1vbnN0cmF0aW9uIC0gd2Ugc2hvdWxkIHByb2JhYmx5IGdlbmVyaWZ5XG4gICAgICAgIC8vIFRhZ1RpbGUgaW5zdGVhZCBpZiB3ZSBjb250aW51ZSB0byB1c2UgdGhpcyBjb21wb25lbnQuXG4gICAgICAgIGNvbnN0IGNsYXNzTmFtZSA9IGNsYXNzTmFtZXMoe1xuICAgICAgICAgICAgbXhfVGFnVGlsZTogdHJ1ZSxcbiAgICAgICAgICAgIG14X1RhZ1RpbGVfcHJvdG90eXBlOiB0cnVlLFxuICAgICAgICAgICAgbXhfVGFnVGlsZV9zZWxlY3RlZF9wcm90b3R5cGU6IHRoaXMuc3RhdGUuc2VsZWN0ZWQsXG4gICAgICAgICAgICBteF9UYWdUaWxlX2hvbWU6IHRydWUsXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPEFjY2Vzc2libGVUb29sdGlwQnV0dG9uXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWV9XG4gICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5vblRpbGVDbGlja31cbiAgICAgICAgICAgICAgICB0aXRsZT17X3QoXCJIb21lXCIpfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibXhfVGFnVGlsZV9hdmF0YXJcIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJteF9UYWdUaWxlX2hvbWVJY29uXCIgLz5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvQWNjZXNzaWJsZVRvb2x0aXBCdXR0b24+XG4gICAgICAgICk7XG4gICAgfVxufVxuIl19