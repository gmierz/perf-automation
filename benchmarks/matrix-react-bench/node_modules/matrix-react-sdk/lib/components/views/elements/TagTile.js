"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var sdk = _interopRequireWildcard(require("../../../index"));

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _Keyboard = require("../../../Keyboard");

var FormattingUtils = _interopRequireWildcard(require("../../../utils/FormattingUtils"));

var _FlairStore = _interopRequireDefault(require("../../../stores/FlairStore"));

var _GroupStore = _interopRequireDefault(require("../../../stores/GroupStore"));

var _GroupFilterOrderStore = _interopRequireDefault(require("../../../stores/GroupFilterOrderStore"));

var _MatrixClientContext = _interopRequireDefault(require("../../../contexts/MatrixClientContext"));

var _AccessibleButton = _interopRequireDefault(require("./AccessibleButton"));

var _SettingsStore = _interopRequireDefault(require("../../../settings/SettingsStore"));

var _Media = require("../../../customisations/Media");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _logger = require("matrix-js-sdk/src/logger");

var _dec, _class, _class2, _temp;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

let TagTile = ( // A class for a child of GroupFilterPanel (possibly wrapped in a DNDTagTile) that represents
// a thing to click on for the user to filter the visible rooms in the RoomList to:
//  - Rooms that are part of the group
//  - Direct messages with members of the group
// with the intention that this could be expanded to arbitrary tags in future.
_dec = (0, _replaceableComponent.replaceableComponent)("views.elements.TagTile"), _dec(_class = (_temp = _class2 = class TagTile extends _react.default.Component {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "state", {
      // Whether the mouse is over the tile
      hover: false,
      // The profile data of the group if this.props.tag is a group ID
      profile: null
    });
    (0, _defineProperty2.default)(this, "_onFlairStoreUpdated", () => {
      if (this.unmounted) return;

      _FlairStore.default.getGroupProfileCached(this.context, this.props.tag).then(profile => {
        if (this.unmounted) return;
        this.setState({
          profile
        });
      }).catch(err => {
        _logger.logger.warn('Could not fetch group profile for ' + this.props.tag, err);
      });
    });
    (0, _defineProperty2.default)(this, "onClick", e => {
      e.preventDefault();
      e.stopPropagation();

      _dispatcher.default.dispatch({
        action: 'select_tag',
        tag: this.props.tag,
        ctrlOrCmdKey: (0, _Keyboard.isOnlyCtrlOrCmdIgnoreShiftKeyEvent)(e),
        shiftKey: e.shiftKey
      });

      if (this.props.tag[0] === '+') {
        // New rooms or members may have been added to the group, fetch async
        this._refreshGroup(this.props.tag);
      }
    });
    (0, _defineProperty2.default)(this, "onMouseOver", () => {
      if (_SettingsStore.default.getValue("feature_communities_v2_prototypes")) return;
      this.setState({
        hover: true
      });
    });
    (0, _defineProperty2.default)(this, "onMouseLeave", () => {
      this.setState({
        hover: false
      });
    });
    (0, _defineProperty2.default)(this, "openMenu", e => {
      // Prevent the TagTile onClick event firing as well
      e.stopPropagation();
      e.preventDefault();
      if (_SettingsStore.default.getValue("feature_communities_v2_prototypes")) return;
      this.setState({
        hover: false
      });
      this.props.openMenu();
    });
  }

  componentDidMount() {
    this.unmounted = false;

    if (this.props.tag[0] === '+') {
      _FlairStore.default.addListener('updateGroupProfile', this._onFlairStoreUpdated);

      this._onFlairStoreUpdated(); // New rooms or members may have been added to the group, fetch async


      this._refreshGroup(this.props.tag);
    }
  }

  componentWillUnmount() {
    this.unmounted = true;

    if (this.props.tag[0] === '+') {
      _FlairStore.default.removeListener('updateGroupProfile', this._onFlairStoreUpdated);
    }
  }

  _refreshGroup(groupId) {
    _GroupStore.default.refreshGroupRooms(groupId);

    _GroupStore.default.refreshGroupMembers(groupId);
  }

  render() {
    const BaseAvatar = sdk.getComponent('avatars.BaseAvatar');
    const profile = this.state.profile || {};
    const name = profile.name || this.props.tag;
    const avatarSize = 32;
    const httpUrl = profile.avatarUrl ? (0, _Media.mediaFromMxc)(profile.avatarUrl).getSquareThumbnailHttp(avatarSize) : null;

    const isPrototype = _SettingsStore.default.getValue("feature_communities_v2_prototypes");

    const className = (0, _classnames.default)({
      mx_TagTile: true,
      mx_TagTile_prototype: isPrototype,
      mx_TagTile_selected: this.props.selected && !isPrototype,
      mx_TagTile_selected_prototype: this.props.selected && isPrototype
    });

    const badge = _GroupFilterOrderStore.default.getGroupBadge(this.props.tag);

    let badgeElement;

    if (badge && !this.state.hover && !this.props.menuDisplayed) {
      const badgeClasses = (0, _classnames.default)({
        "mx_TagTile_badge": true,
        "mx_TagTile_badgeHighlight": badge.highlight
      });
      badgeElement = /*#__PURE__*/_react.default.createElement("div", {
        className: badgeClasses
      }, FormattingUtils.formatCount(badge.count));
    }

    const contextButton = this.state.hover || this.props.menuDisplayed ? /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      className: "mx_TagTile_context_button",
      onClick: this.openMenu,
      inputRef: this.props.contextMenuButtonRef
    }, "\u00B7\u00B7\u00B7") : /*#__PURE__*/_react.default.createElement("div", {
      ref: this.props.contextMenuButtonRef
    });
    const AccessibleTooltipButton = sdk.getComponent("elements.AccessibleTooltipButton");
    return /*#__PURE__*/_react.default.createElement(AccessibleTooltipButton, {
      className: className,
      onClick: this.onClick,
      onContextMenu: this.openMenu,
      title: name
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_TagTile_avatar",
      onMouseOver: this.onMouseOver,
      onMouseLeave: this.onMouseLeave
    }, /*#__PURE__*/_react.default.createElement(BaseAvatar, {
      name: name,
      idName: this.props.tag,
      url: httpUrl,
      width: avatarSize,
      height: avatarSize
    }), contextButton, badgeElement));
  }

}, (0, _defineProperty2.default)(_class2, "propTypes", {
  // A string tag such as "m.favourite" or a group ID such as "+groupid:domain.bla"
  // For now, only group IDs are handled.
  tag: _propTypes.default.string,
  contextMenuButtonRef: _propTypes.default.object,
  openMenu: _propTypes.default.func,
  menuDisplayed: _propTypes.default.bool,
  selected: _propTypes.default.bool
}), (0, _defineProperty2.default)(_class2, "contextType", _MatrixClientContext.default), _temp)) || _class);
exports.default = TagTile;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,