import React, { ReactHTML } from 'react';
export declare type ButtonEvent = React.MouseEvent<Element> | React.KeyboardEvent<Element> | React.FormEvent<Element>;
/**
 * children: React's magic prop. Represents all children given to the element.
 * element:  (optional) The base element type. "div" by default.
 * onClick:  (required) Event handler for button activation. Should be
 *           implemented exactly like a normal onClick handler.
 */
interface IProps extends React.InputHTMLAttributes<Element> {
    inputRef?: React.Ref<Element>;
    element?: keyof ReactHTML;
    kind?: string;
    role?: string;
    tabIndex?: number;
    disabled?: boolean;
    className?: string;
    onClick(e?: ButtonEvent): void | Promise<void>;
}
interface IAccessibleButtonProps extends React.InputHTMLAttributes<Element> {
    ref?: React.Ref<Element>;
}
/**
 * AccessibleButton is a generic wrapper for any element that should be treated
 * as a button.  Identifies the element as a button, setting proper tab
 * indexing and keyboard activation behavior.
 *
 * @param {Object} props  react element properties
 * @returns {Object} rendered react
 */
declare function AccessibleButton({ element, onClick, children, kind, disabled, inputRef, className, onKeyDown, onKeyUp, ...restProps }: IProps): React.DOMElement<IAccessibleButtonProps, Element>;
declare namespace AccessibleButton {
    var defaultProps: {
        element: keyof React.ReactHTML;
        role: string;
        tabIndex: number;
    };
    var displayName: string;
}
export default AccessibleButton;
