"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _AccessibleButton = _interopRequireDefault(require("./AccessibleButton"));

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _Analytics = _interopRequireDefault(require("../../../Analytics"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _Tooltip = _interopRequireDefault(require("./Tooltip"));

var _dec, _class, _class2, _temp;

let ActionButton = (_dec = (0, _replaceableComponent.replaceableComponent)("views.elements.ActionButton"), _dec(_class = (_temp = _class2 = class ActionButton extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "onClick", ev => {
      ev.stopPropagation();

      _Analytics.default.trackEvent('Action Button', 'click', this.props.action);

      _dispatcher.default.dispatch({
        action: this.props.action
      });
    });
    (0, _defineProperty2.default)(this, "onMouseEnter", () => {
      if (this.props.tooltip) this.setState({
        showTooltip: true
      });

      if (this.props.mouseOverAction) {
        _dispatcher.default.dispatch({
          action: this.props.mouseOverAction
        });
      }
    });
    (0, _defineProperty2.default)(this, "onMouseLeave", () => {
      this.setState({
        showTooltip: false
      });
    });
    this.state = {
      showTooltip: false
    };
  }

  render() {
    let tooltip;

    if (this.state.showTooltip) {
      tooltip = /*#__PURE__*/_react.default.createElement(_Tooltip.default, {
        className: "mx_RoleButton_tooltip",
        label: this.props.label
      });
    }

    const icon = this.props.iconPath ? /*#__PURE__*/_react.default.createElement("img", {
      src: this.props.iconPath,
      width: this.props.size,
      height: this.props.size
    }) : undefined;
    const classNames = ["mx_RoleButton"];

    if (this.props.className) {
      classNames.push(this.props.className);
    }

    return /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      className: classNames.join(" "),
      onClick: this.onClick,
      onMouseEnter: this.onMouseEnter,
      onMouseLeave: this.onMouseLeave,
      "aria-label": this.props.label
    }, icon, tooltip, this.props.children);
  }

}, (0, _defineProperty2.default)(_class2, "defaultProps", {
  size: "25",
  tooltip: false
}), _temp)) || _class);
exports.default = ActionButton;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL2VsZW1lbnRzL0FjdGlvbkJ1dHRvbi50c3giXSwibmFtZXMiOlsiQWN0aW9uQnV0dG9uIiwiUmVhY3QiLCJDb21wb25lbnQiLCJjb25zdHJ1Y3RvciIsInByb3BzIiwiZXYiLCJzdG9wUHJvcGFnYXRpb24iLCJBbmFseXRpY3MiLCJ0cmFja0V2ZW50IiwiYWN0aW9uIiwiZGlzIiwiZGlzcGF0Y2giLCJ0b29sdGlwIiwic2V0U3RhdGUiLCJzaG93VG9vbHRpcCIsIm1vdXNlT3ZlckFjdGlvbiIsInN0YXRlIiwicmVuZGVyIiwibGFiZWwiLCJpY29uIiwiaWNvblBhdGgiLCJzaXplIiwidW5kZWZpbmVkIiwiY2xhc3NOYW1lcyIsImNsYXNzTmFtZSIsInB1c2giLCJqb2luIiwib25DbGljayIsIm9uTW91c2VFbnRlciIsIm9uTW91c2VMZWF2ZSIsImNoaWxkcmVuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQWdCQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7OztJQWtCcUJBLFksV0FEcEIsZ0RBQXFCLDZCQUFyQixDLG1DQUFELE1BQ3FCQSxZQURyQixTQUMwQ0MsZUFBTUMsU0FEaEQsQ0FDMEU7QUFNdEVDLEVBQUFBLFdBQVcsQ0FBQ0MsS0FBRCxFQUFnQjtBQUN2QixVQUFNQSxLQUFOO0FBRHVCLG1EQVFSQyxFQUFELElBQWdDO0FBQzlDQSxNQUFBQSxFQUFFLENBQUNDLGVBQUg7O0FBQ0FDLHlCQUFVQyxVQUFWLENBQXFCLGVBQXJCLEVBQXNDLE9BQXRDLEVBQStDLEtBQUtKLEtBQUwsQ0FBV0ssTUFBMUQ7O0FBQ0FDLDBCQUFJQyxRQUFKLENBQWE7QUFBRUYsUUFBQUEsTUFBTSxFQUFFLEtBQUtMLEtBQUwsQ0FBV0s7QUFBckIsT0FBYjtBQUNILEtBWjBCO0FBQUEsd0RBY0osTUFBWTtBQUMvQixVQUFJLEtBQUtMLEtBQUwsQ0FBV1EsT0FBZixFQUF3QixLQUFLQyxRQUFMLENBQWM7QUFBRUMsUUFBQUEsV0FBVyxFQUFFO0FBQWYsT0FBZDs7QUFDeEIsVUFBSSxLQUFLVixLQUFMLENBQVdXLGVBQWYsRUFBZ0M7QUFDNUJMLDRCQUFJQyxRQUFKLENBQWE7QUFBRUYsVUFBQUEsTUFBTSxFQUFFLEtBQUtMLEtBQUwsQ0FBV1c7QUFBckIsU0FBYjtBQUNIO0FBQ0osS0FuQjBCO0FBQUEsd0RBcUJKLE1BQVk7QUFDL0IsV0FBS0YsUUFBTCxDQUFjO0FBQUVDLFFBQUFBLFdBQVcsRUFBRTtBQUFmLE9BQWQ7QUFDSCxLQXZCMEI7QUFHdkIsU0FBS0UsS0FBTCxHQUFhO0FBQ1RGLE1BQUFBLFdBQVcsRUFBRTtBQURKLEtBQWI7QUFHSDs7QUFtQkRHLEVBQUFBLE1BQU0sR0FBRztBQUNMLFFBQUlMLE9BQUo7O0FBQ0EsUUFBSSxLQUFLSSxLQUFMLENBQVdGLFdBQWYsRUFBNEI7QUFDeEJGLE1BQUFBLE9BQU8sZ0JBQUcsNkJBQUMsZ0JBQUQ7QUFBUyxRQUFBLFNBQVMsRUFBQyx1QkFBbkI7QUFBMkMsUUFBQSxLQUFLLEVBQUUsS0FBS1IsS0FBTCxDQUFXYztBQUE3RCxRQUFWO0FBQ0g7O0FBRUQsVUFBTUMsSUFBSSxHQUFHLEtBQUtmLEtBQUwsQ0FBV2dCLFFBQVgsZ0JBQ1I7QUFBSyxNQUFBLEdBQUcsRUFBRSxLQUFLaEIsS0FBTCxDQUFXZ0IsUUFBckI7QUFBK0IsTUFBQSxLQUFLLEVBQUUsS0FBS2hCLEtBQUwsQ0FBV2lCLElBQWpEO0FBQXVELE1BQUEsTUFBTSxFQUFFLEtBQUtqQixLQUFMLENBQVdpQjtBQUExRSxNQURRLEdBRVRDLFNBRko7QUFJQSxVQUFNQyxVQUFVLEdBQUcsQ0FBQyxlQUFELENBQW5COztBQUNBLFFBQUksS0FBS25CLEtBQUwsQ0FBV29CLFNBQWYsRUFBMEI7QUFDdEJELE1BQUFBLFVBQVUsQ0FBQ0UsSUFBWCxDQUFnQixLQUFLckIsS0FBTCxDQUFXb0IsU0FBM0I7QUFDSDs7QUFFRCx3QkFDSSw2QkFBQyx5QkFBRDtBQUNJLE1BQUEsU0FBUyxFQUFFRCxVQUFVLENBQUNHLElBQVgsQ0FBZ0IsR0FBaEIsQ0FEZjtBQUVJLE1BQUEsT0FBTyxFQUFFLEtBQUtDLE9BRmxCO0FBR0ksTUFBQSxZQUFZLEVBQUUsS0FBS0MsWUFIdkI7QUFJSSxNQUFBLFlBQVksRUFBRSxLQUFLQyxZQUp2QjtBQUtJLG9CQUFZLEtBQUt6QixLQUFMLENBQVdjO0FBTDNCLE9BT01DLElBUE4sRUFRTVAsT0FSTixFQVNNLEtBQUtSLEtBQUwsQ0FBVzBCLFFBVGpCLENBREo7QUFhSDs7QUEzRHFFLEMseURBQy9CO0FBQ25DVCxFQUFBQSxJQUFJLEVBQUUsSUFENkI7QUFFbkNULEVBQUFBLE9BQU8sRUFBRTtBQUYwQixDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbkNvcHlyaWdodCAyMDE3IFZlY3RvciBDcmVhdGlvbnMgTHRkXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBBY2Nlc3NpYmxlQnV0dG9uIGZyb20gJy4vQWNjZXNzaWJsZUJ1dHRvbic7XG5pbXBvcnQgZGlzIGZyb20gJy4uLy4uLy4uL2Rpc3BhdGNoZXIvZGlzcGF0Y2hlcic7XG5pbXBvcnQgQW5hbHl0aWNzIGZyb20gJy4uLy4uLy4uL0FuYWx5dGljcyc7XG5pbXBvcnQgeyByZXBsYWNlYWJsZUNvbXBvbmVudCB9IGZyb20gXCIuLi8uLi8uLi91dGlscy9yZXBsYWNlYWJsZUNvbXBvbmVudFwiO1xuaW1wb3J0IFRvb2x0aXAgZnJvbSAnLi9Ub29sdGlwJztcblxuaW50ZXJmYWNlIElQcm9wcyB7XG4gICAgc2l6ZT86IHN0cmluZztcbiAgICB0b29sdGlwPzogYm9vbGVhbjtcbiAgICBhY3Rpb246IHN0cmluZztcbiAgICBtb3VzZU92ZXJBY3Rpb24/OiBzdHJpbmc7XG4gICAgbGFiZWw6IHN0cmluZztcbiAgICBpY29uUGF0aD86IHN0cmluZztcbiAgICBjbGFzc05hbWU/OiBzdHJpbmc7XG4gICAgY2hpbGRyZW4/OiBKU1guRWxlbWVudDtcbn1cblxuaW50ZXJmYWNlIElTdGF0ZSB7XG4gICAgc2hvd1Rvb2x0aXA6IGJvb2xlYW47XG59XG5cbkByZXBsYWNlYWJsZUNvbXBvbmVudChcInZpZXdzLmVsZW1lbnRzLkFjdGlvbkJ1dHRvblwiKVxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQWN0aW9uQnV0dG9uIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PElQcm9wcywgSVN0YXRlPiB7XG4gICAgc3RhdGljIGRlZmF1bHRQcm9wczogUGFydGlhbDxJUHJvcHM+ID0ge1xuICAgICAgICBzaXplOiBcIjI1XCIsXG4gICAgICAgIHRvb2x0aXA6IGZhbHNlLFxuICAgIH07XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm9wczogSVByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcblxuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgc2hvd1Rvb2x0aXA6IGZhbHNlLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHByaXZhdGUgb25DbGljayA9IChldjogUmVhY3QuTW91c2VFdmVudCk6IHZvaWQgPT4ge1xuICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgQW5hbHl0aWNzLnRyYWNrRXZlbnQoJ0FjdGlvbiBCdXR0b24nLCAnY2xpY2snLCB0aGlzLnByb3BzLmFjdGlvbik7XG4gICAgICAgIGRpcy5kaXNwYXRjaCh7IGFjdGlvbjogdGhpcy5wcm9wcy5hY3Rpb24gfSk7XG4gICAgfTtcblxuICAgIHByaXZhdGUgb25Nb3VzZUVudGVyID0gKCk6IHZvaWQgPT4ge1xuICAgICAgICBpZiAodGhpcy5wcm9wcy50b29sdGlwKSB0aGlzLnNldFN0YXRlKHsgc2hvd1Rvb2x0aXA6IHRydWUgfSk7XG4gICAgICAgIGlmICh0aGlzLnByb3BzLm1vdXNlT3ZlckFjdGlvbikge1xuICAgICAgICAgICAgZGlzLmRpc3BhdGNoKHsgYWN0aW9uOiB0aGlzLnByb3BzLm1vdXNlT3ZlckFjdGlvbiB9KTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBwcml2YXRlIG9uTW91c2VMZWF2ZSA9ICgpOiB2b2lkID0+IHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHNob3dUb29sdGlwOiBmYWxzZSB9KTtcbiAgICB9O1xuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICBsZXQgdG9vbHRpcDtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuc2hvd1Rvb2x0aXApIHtcbiAgICAgICAgICAgIHRvb2x0aXAgPSA8VG9vbHRpcCBjbGFzc05hbWU9XCJteF9Sb2xlQnV0dG9uX3Rvb2x0aXBcIiBsYWJlbD17dGhpcy5wcm9wcy5sYWJlbH0gLz47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBpY29uID0gdGhpcy5wcm9wcy5pY29uUGF0aCA/XG4gICAgICAgICAgICAoPGltZyBzcmM9e3RoaXMucHJvcHMuaWNvblBhdGh9IHdpZHRoPXt0aGlzLnByb3BzLnNpemV9IGhlaWdodD17dGhpcy5wcm9wcy5zaXplfSAvPikgOlxuICAgICAgICAgICAgdW5kZWZpbmVkO1xuXG4gICAgICAgIGNvbnN0IGNsYXNzTmFtZXMgPSBbXCJteF9Sb2xlQnV0dG9uXCJdO1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5jbGFzc05hbWUpIHtcbiAgICAgICAgICAgIGNsYXNzTmFtZXMucHVzaCh0aGlzLnByb3BzLmNsYXNzTmFtZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPEFjY2Vzc2libGVCdXR0b25cbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZXMuam9pbihcIiBcIil9XG4gICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5vbkNsaWNrfVxuICAgICAgICAgICAgICAgIG9uTW91c2VFbnRlcj17dGhpcy5vbk1vdXNlRW50ZXJ9XG4gICAgICAgICAgICAgICAgb25Nb3VzZUxlYXZlPXt0aGlzLm9uTW91c2VMZWF2ZX1cbiAgICAgICAgICAgICAgICBhcmlhLWxhYmVsPXt0aGlzLnByb3BzLmxhYmVsfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHsgaWNvbiB9XG4gICAgICAgICAgICAgICAgeyB0b29sdGlwIH1cbiAgICAgICAgICAgICAgICB7IHRoaXMucHJvcHMuY2hpbGRyZW4gfVxuICAgICAgICAgICAgPC9BY2Nlc3NpYmxlQnV0dG9uPlxuICAgICAgICApO1xuICAgIH1cbn1cbiJdfQ==