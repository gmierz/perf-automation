"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _languageHandler = require("../../../languageHandler");

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _RightPanelStorePhases = require("../../../stores/RightPanelStorePhases");

var _KeyVerificationStateObserver = require("../../../utils/KeyVerificationStateObserver");

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _ToastStore = _interopRequireDefault(require("../../../stores/ToastStore"));

var _Modal = _interopRequireDefault(require("../../../Modal"));

var _GenericToast = _interopRequireDefault(require("./GenericToast"));

var _actions = require("../../../dispatcher/actions");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _VerificationRequestDialog = _interopRequireDefault(require("../dialogs/VerificationRequestDialog"));

var _logger = require("matrix-js-sdk/src/logger");

var _dec, _class;

let VerificationRequestToast = (_dec = (0, _replaceableComponent.replaceableComponent)("views.toasts.VerificationRequestToast"), _dec(_class = class VerificationRequestToast extends _react.default.PureComponent {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "intervalHandle", void 0);
    (0, _defineProperty2.default)(this, "checkRequestIsPending", () => {
      const {
        request
      } = this.props;

      if (!request.canAccept) {
        _ToastStore.default.sharedInstance().dismissToast(this.props.toastKey);
      }
    });
    (0, _defineProperty2.default)(this, "cancel", () => {
      _ToastStore.default.sharedInstance().dismissToast(this.props.toastKey);

      try {
        this.props.request.cancel();
      } catch (err) {
        _logger.logger.error("Error while cancelling verification request", err);
      }
    });
    (0, _defineProperty2.default)(this, "accept", async () => {
      _ToastStore.default.sharedInstance().dismissToast(this.props.toastKey);

      const {
        request
      } = this.props; // no room id for to_device requests

      const cli = _MatrixClientPeg.MatrixClientPeg.get();

      try {
        if (request.channel.roomId) {
          _dispatcher.default.dispatch({
            action: _actions.Action.ViewRoom,
            room_id: request.channel.roomId,
            should_peek: false
          });

          _dispatcher.default.dispatch({
            action: _actions.Action.SetRightPanelPhase,
            phase: _RightPanelStorePhases.RightPanelPhases.EncryptionPanel,
            refireParams: {
              verificationRequest: request,
              member: cli.getUser(request.otherUserId)
            }
          });
        } else {
          _Modal.default.createTrackedDialog('Incoming Verification', '', _VerificationRequestDialog.default, {
            verificationRequest: request,
            onFinished: () => {
              request.cancel();
            }
          }, null,
          /* priority = */
          false,
          /* static = */
          true);
        }

        await request.accept();
      } catch (err) {
        _logger.logger.error(err.message);
      }
    });
    this.state = {
      counter: Math.ceil(props.request.timeout / 1000)
    };
  }

  async componentDidMount() {
    const {
      request
    } = this.props;

    if (request.timeout && request.timeout > 0) {
      this.intervalHandle = setInterval(() => {
        let {
          counter
        } = this.state;
        counter = Math.max(0, counter - 1);
        this.setState({
          counter
        });
      }, 1000);
    }

    request.on("change", this.checkRequestIsPending); // We should probably have a separate class managing the active verification toasts,
    // rather than monitoring this in the toast component itself, since we'll get problems
    // like the toasdt not going away when the verification is cancelled unless it's the
    // one on the top (ie. the one that's mounted).
    // As a quick & dirty fix, check the toast is still relevant when it mounts (this prevents
    // a toast hanging around after logging in if you did a verification as part of login).

    this.checkRequestIsPending();

    if (request.isSelfVerification) {
      const cli = _MatrixClientPeg.MatrixClientPeg.get();

      const device = await cli.getDevice(request.channel.deviceId);
      const ip = device.last_seen_ip;
      this.setState({
        device: cli.getStoredDevice(cli.getUserId(), request.channel.deviceId),
        ip
      });
    }
  }

  componentWillUnmount() {
    clearInterval(this.intervalHandle);
    const {
      request
    } = this.props;
    request.off("change", this.checkRequestIsPending);
  }

  render() {
    const {
      request
    } = this.props;
    let description;
    let detail;

    if (request.isSelfVerification) {
      if (this.state.device) {
        description = this.state.device.getDisplayName();
        detail = (0, _languageHandler._t)("%(deviceId)s from %(ip)s", {
          deviceId: this.state.device.deviceId,
          ip: this.state.ip
        });
      }
    } else {
      const userId = request.otherUserId;
      const roomId = request.channel.roomId;
      description = roomId ? (0, _KeyVerificationStateObserver.userLabelForEventRoom)(userId, roomId) : userId; // for legacy to_device verification requests

      if (description === userId) {
        const client = _MatrixClientPeg.MatrixClientPeg.get();

        const user = client.getUser(userId);

        if (user && user.displayName) {
          description = (0, _languageHandler._t)("%(name)s (%(userId)s)", {
            name: user.displayName,
            userId
          });
        }
      }
    }

    const declineLabel = this.state.counter === 0 ? (0, _languageHandler._t)("Decline") : (0, _languageHandler._t)("Decline (%(counter)s)", {
      counter: this.state.counter
    });
    return /*#__PURE__*/_react.default.createElement(_GenericToast.default, {
      description: description,
      detail: detail,
      acceptLabel: (0, _languageHandler._t)("Accept"),
      onAccept: this.accept,
      rejectLabel: declineLabel,
      onReject: this.cancel
    });
  }

}) || _class);
exports.default = VerificationRequestToast;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,