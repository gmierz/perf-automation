import React, { ChangeEvent } from 'react';
import { Room } from "matrix-js-sdk/src/models/room";
interface IGenericEditorProps {
    onBack: () => void;
}
interface IGenericEditorState {
    message?: string;
    [inputId: string]: boolean | string;
}
declare abstract class GenericEditor<P extends IGenericEditorProps = IGenericEditorProps, S extends IGenericEditorState = IGenericEditorState> extends React.PureComponent<P, S> {
    protected onBack: () => void;
    protected onChange: (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => void;
    protected abstract send(): any;
    protected buttons(): React.ReactNode;
    protected textInput(id: string, label: string): React.ReactNode;
}
interface ISendCustomEventProps extends IGenericEditorProps {
    room: Room;
    forceStateEvent?: boolean;
    forceGeneralEvent?: boolean;
    inputs?: {
        eventType?: string;
        stateKey?: string;
        evContent?: string;
    };
}
interface ISendCustomEventState extends IGenericEditorState {
    isStateEvent: boolean;
    eventType: string;
    stateKey: string;
    evContent: string;
}
export declare class SendCustomEvent extends GenericEditor<ISendCustomEventProps, ISendCustomEventState> {
    static getLabel(): string;
    static contextType: React.Context<import("matrix-js-sdk").MatrixClient>;
    constructor(props: any);
    private doSend;
    protected send: () => Promise<void>;
    render(): JSX.Element;
}
declare type DevtoolsDialogEntry = React.JSXElementConstructor<any> & {
    getLabel: () => string;
};
interface IProps {
    roomId: string;
    onFinished: (finished: boolean) => void;
}
interface IState {
    mode?: DevtoolsDialogEntry;
}
export default class DevtoolsDialog extends React.PureComponent<IProps, IState> {
    constructor(props: any);
    private setMode;
    private onBack;
    private onCancel;
    render(): JSX.Element;
}
export {};
