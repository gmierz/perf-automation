"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _languageHandler = require("../../../languageHandler");

var _BaseDialog = _interopRequireDefault(require("./BaseDialog"));

var _DialogButtons = _interopRequireDefault(require("../elements/DialogButtons"));

var _Field = _interopRequireDefault(require("../elements/Field"));

var _StyledRadioGroup = _interopRequireDefault(require("../elements/StyledRadioGroup"));

var _StyledCheckbox = _interopRequireDefault(require("../elements/StyledCheckbox"));

var _exportUtils = require("../../../utils/exportUtils/exportUtils");

var _Validation = _interopRequireDefault(require("../elements/Validation"));

var _HtmlExport = _interopRequireDefault(require("../../../utils/exportUtils/HtmlExport"));

var _JSONExport = _interopRequireDefault(require("../../../utils/exportUtils/JSONExport"));

var _PlainTextExport = _interopRequireDefault(require("../../../utils/exportUtils/PlainTextExport"));

var _useStateCallback = require("../../../hooks/useStateCallback");

var _Spinner = _interopRequireDefault(require("../elements/Spinner"));

var _InfoDialog = _interopRequireDefault(require("./InfoDialog"));

var _logger = require("matrix-js-sdk/src/logger");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
Copyright 2021 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const ExportDialog = ({
  room,
  onFinished
}) => {
  const [exportFormat, setExportFormat] = (0, _react.useState)(_exportUtils.ExportFormat.Html);
  const [exportType, setExportType] = (0, _react.useState)(_exportUtils.ExportType.Timeline);
  const [includeAttachments, setAttachments] = (0, _react.useState)(false);
  const [isExporting, setExporting] = (0, _react.useState)(false);
  const [numberOfMessages, setNumberOfMessages] = (0, _react.useState)(100);
  const [sizeLimit, setSizeLimit] = (0, _react.useState)(8);
  const sizeLimitRef = (0, _react.useRef)();
  const messageCountRef = (0, _react.useRef)();
  const [exportProgressText, setExportProgressText] = (0, _react.useState)("Processing...");
  const [displayCancel, setCancelWarning] = (0, _react.useState)(false);
  const [exportCancelled, setExportCancelled] = (0, _react.useState)(false);
  const [exportSuccessful, setExportSuccessful] = (0, _react.useState)(false);
  const [exporter, setExporter] = (0, _useStateCallback.useStateCallback)(null, async exporter => {
    await (exporter === null || exporter === void 0 ? void 0 : exporter.export().then(() => {
      if (!exportCancelled) setExportSuccessful(true);
    }));
  });

  const startExport = async () => {
    const exportOptions = {
      numberOfMessages,
      attachmentsIncluded: includeAttachments,
      maxSize: sizeLimit * 1024 * 1024
    };

    switch (exportFormat) {
      case _exportUtils.ExportFormat.Html:
        setExporter(new _HtmlExport.default(room, _exportUtils.ExportType[exportType], exportOptions, setExportProgressText));
        break;

      case _exportUtils.ExportFormat.Json:
        setExporter(new _JSONExport.default(room, _exportUtils.ExportType[exportType], exportOptions, setExportProgressText));
        break;

      case _exportUtils.ExportFormat.PlainText:
        setExporter(new _PlainTextExport.default(room, _exportUtils.ExportType[exportType], exportOptions, setExportProgressText));
        break;

      default:
        _logger.logger.error("Unknown export format");

        return;
    }
  };

  const onExportClick = async () => {
    const isValidSize = await sizeLimitRef.current.validate({
      focused: false
    });

    if (!isValidSize) {
      sizeLimitRef.current.validate({
        focused: true
      });
      return;
    }

    if (exportType === _exportUtils.ExportType.LastNMessages) {
      const isValidNumberOfMessages = await messageCountRef.current.validate({
        focused: false
      });

      if (!isValidNumberOfMessages) {
        messageCountRef.current.validate({
          focused: true
        });
        return;
      }
    }

    setExporting(true);
    await startExport();
  };

  const validateSize = (0, _Validation.default)({
    rules: [{
      key: "required",

      test({
        value,
        allowEmpty
      }) {
        return allowEmpty || !!value;
      },

      invalid: () => {
        const min = 1;
        const max = 10 ** 8;
        return (0, _languageHandler._t)("Enter a number between %(min)s and %(max)s", {
          min,
          max
        });
      }
    }, {
      key: "number",
      test: ({
        value
      }) => {
        const parsedSize = parseFloat(value);
        const min = 1;
        const max = 2000;
        return !(isNaN(parsedSize) || min > parsedSize || parsedSize > max);
      },
      invalid: () => {
        const min = 1;
        const max = 2000;
        return (0, _languageHandler._t)("Size can only be a number between %(min)s MB and %(max)s MB", {
          min,
          max
        });
      }
    }]
  });

  const onValidateSize = async fieldState => {
    const result = await validateSize(fieldState);
    return result;
  };

  const validateNumberOfMessages = (0, _Validation.default)({
    rules: [{
      key: "required",

      test({
        value,
        allowEmpty
      }) {
        return allowEmpty || !!value;
      },

      invalid: () => {
        const min = 1;
        const max = 10 ** 8;
        return (0, _languageHandler._t)("Enter a number between %(min)s and %(max)s", {
          min,
          max
        });
      }
    }, {
      key: "number",
      test: ({
        value
      }) => {
        const parsedSize = parseFloat(value);
        const min = 1;
        const max = 10 ** 8;
        if (isNaN(parsedSize)) return false;
        return !(min > parsedSize || parsedSize > max);
      },
      invalid: () => {
        const min = 1;
        const max = 10 ** 8;
        return (0, _languageHandler._t)("Number of messages can only be a number between %(min)s and %(max)s", {
          min,
          max
        });
      }
    }]
  });

  const onValidateNumberOfMessages = async fieldState => {
    const result = await validateNumberOfMessages(fieldState);
    return result;
  };

  const onCancel = async () => {
    if (isExporting) setCancelWarning(true);else onFinished(false);
  };

  const confirmCanel = async () => {
    await (exporter === null || exporter === void 0 ? void 0 : exporter.cancelExport());
    setExportCancelled(true);
    setExporting(false);
    setExporter(null);
  };

  const exportFormatOptions = Object.keys(_exportUtils.ExportFormat).map(format => ({
    value: _exportUtils.ExportFormat[format],
    label: (0, _exportUtils.textForFormat)(_exportUtils.ExportFormat[format])
  }));
  const exportTypeOptions = Object.keys(_exportUtils.ExportType).map(type => {
    return /*#__PURE__*/_react.default.createElement("option", {
      key: type,
      value: _exportUtils.ExportType[type]
    }, (0, _exportUtils.textForType)(_exportUtils.ExportType[type]));
  });
  let messageCount = null;

  if (exportType === _exportUtils.ExportType.LastNMessages) {
    messageCount = /*#__PURE__*/_react.default.createElement(_Field.default, {
      element: "input",
      type: "number",
      value: numberOfMessages.toString(),
      ref: messageCountRef,
      onValidate: onValidateNumberOfMessages,
      label: (0, _languageHandler._t)("Number of messages"),
      onChange: e => {
        setNumberOfMessages(parseInt(e.target.value));
      }
    });
  }

  const sizePostFix = /*#__PURE__*/_react.default.createElement("span", null, (0, _languageHandler._t)("MB"));

  if (exportCancelled) {
    // Display successful cancellation message
    return /*#__PURE__*/_react.default.createElement(_InfoDialog.default, {
      title: (0, _languageHandler._t)("Export Successful"),
      description: (0, _languageHandler._t)("The export was cancelled successfully"),
      hasCloseButton: true,
      onFinished: onFinished
    });
  } else if (exportSuccessful) {
    // Display successful export message
    return /*#__PURE__*/_react.default.createElement(_InfoDialog.default, {
      title: (0, _languageHandler._t)("Export Successful"),
      description: (0, _languageHandler._t)("Your export was successful. Find it in your Downloads folder."),
      hasCloseButton: true,
      onFinished: onFinished
    });
  } else if (displayCancel) {
    // Display cancel warning
    return /*#__PURE__*/_react.default.createElement(_BaseDialog.default, {
      title: (0, _languageHandler._t)("Warning"),
      className: "mx_ExportDialog",
      contentId: "mx_Dialog_content",
      onFinished: onFinished,
      fixedWidth: true
    }, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Are you sure you want to stop exporting your data? If you do, you'll need to start over.")), /*#__PURE__*/_react.default.createElement(_DialogButtons.default, {
      primaryButton: (0, _languageHandler._t)("Stop"),
      primaryButtonClass: "danger",
      hasCancel: true,
      cancelButton: (0, _languageHandler._t)("Continue"),
      onCancel: () => setCancelWarning(false),
      onPrimaryButtonClick: confirmCanel
    }));
  } else {
    // Display export settings
    return /*#__PURE__*/_react.default.createElement(_BaseDialog.default, {
      title: isExporting ? (0, _languageHandler._t)("Exporting your data") : (0, _languageHandler._t)("Export Chat"),
      className: `mx_ExportDialog ${isExporting && "mx_ExportDialog_Exporting"}`,
      contentId: "mx_Dialog_content",
      hasCancel: true,
      onFinished: onFinished,
      fixedWidth: true
    }, !isExporting ? /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Select from the options below to export chats from your timeline")) : null, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_ExportDialog_subheading"
    }, (0, _languageHandler._t)("Format")), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_ExportDialog_options"
    }, /*#__PURE__*/_react.default.createElement(_StyledRadioGroup.default, {
      name: "exportFormat",
      value: exportFormat,
      onChange: key => setExportFormat(_exportUtils.ExportFormat[key]),
      definitions: exportFormatOptions
    }), /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_ExportDialog_subheading"
    }, (0, _languageHandler._t)("Messages")), /*#__PURE__*/_react.default.createElement(_Field.default, {
      element: "select",
      value: exportType,
      onChange: e => {
        setExportType(_exportUtils.ExportType[e.target.value]);
      }
    }, exportTypeOptions), messageCount, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_ExportDialog_subheading"
    }, (0, _languageHandler._t)("Size Limit")), /*#__PURE__*/_react.default.createElement(_Field.default, {
      type: "number",
      autoComplete: "off",
      onValidate: onValidateSize,
      element: "input",
      ref: sizeLimitRef,
      value: sizeLimit.toString(),
      postfixComponent: sizePostFix,
      onChange: e => setSizeLimit(parseInt(e.target.value))
    }), /*#__PURE__*/_react.default.createElement(_StyledCheckbox.default, {
      checked: includeAttachments,
      onChange: e => setAttachments(e.target.checked)
    }, (0, _languageHandler._t)("Include Attachments"))), isExporting ? /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_ExportDialog_progress"
    }, /*#__PURE__*/_react.default.createElement(_Spinner.default, {
      w: 24,
      h: 24
    }), /*#__PURE__*/_react.default.createElement("p", null, exportProgressText), /*#__PURE__*/_react.default.createElement(_DialogButtons.default, {
      primaryButton: (0, _languageHandler._t)("Cancel"),
      primaryButtonClass: "danger",
      hasCancel: false,
      onPrimaryButtonClick: onCancel
    })) : /*#__PURE__*/_react.default.createElement(_DialogButtons.default, {
      primaryButton: (0, _languageHandler._t)("Export"),
      onPrimaryButtonClick: onExportClick,
      onCancel: () => onFinished(false)
    }));
  }
};

var _default = ExportDialog;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,