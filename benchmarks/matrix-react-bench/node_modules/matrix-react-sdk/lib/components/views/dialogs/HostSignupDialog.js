"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

var _Modal = _interopRequireDefault(require("../../../Modal"));

var _PersistedElement = _interopRequireDefault(require("../elements/PersistedElement"));

var _QuestionDialog = _interopRequireDefault(require("./QuestionDialog"));

var _SdkConfig = _interopRequireDefault(require("../../../SdkConfig"));

var _classnames = _interopRequireDefault(require("classnames"));

var _languageHandler = require("../../../languageHandler");

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _HostSignupStore = require("../../../stores/HostSignupStore");

var _OwnProfileStore = require("../../../stores/OwnProfileStore");

var _HostSignupDialogTypes = require("./HostSignupDialogTypes");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _logger = require("matrix-js-sdk/src/logger");

var _dec, _class;

const HOST_SIGNUP_KEY = "host_signup";
let HostSignupDialog = (_dec = (0, _replaceableComponent.replaceableComponent)("views.dialogs.HostSignupDialog"), _dec(_class = class HostSignupDialog extends _react.default.PureComponent {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "iframeRef", /*#__PURE__*/_react.default.createRef());
    (0, _defineProperty2.default)(this, "config", void 0);
    (0, _defineProperty2.default)(this, "messageHandler", async message => {
      if (!this.config.url.startsWith(message.origin)) {
        return;
      }

      switch (message.data.action) {
        case _HostSignupDialogTypes.PostmessageAction.HostSignupAccountDetailsRequest:
          this.onAccountDetailsRequest();
          break;

        case _HostSignupDialogTypes.PostmessageAction.Maximize:
          this.setState({
            minimized: false
          });
          break;

        case _HostSignupDialogTypes.PostmessageAction.Minimize:
          this.setState({
            minimized: true
          });
          break;

        case _HostSignupDialogTypes.PostmessageAction.SetupComplete:
          this.setState({
            completed: true
          });
          break;

        case _HostSignupDialogTypes.PostmessageAction.CloseDialog:
          return this.closeDialog();
      }
    });
    (0, _defineProperty2.default)(this, "maximizeDialog", () => {
      this.setState({
        minimized: false
      }); // Send this action to the iframe so it can act accordingly

      this.sendMessage({
        action: _HostSignupDialogTypes.PostmessageAction.Maximize
      });
    });
    (0, _defineProperty2.default)(this, "minimizeDialog", () => {
      this.setState({
        minimized: true
      }); // Send this action to the iframe so it can act accordingly

      this.sendMessage({
        action: _HostSignupDialogTypes.PostmessageAction.Minimize
      });
    });
    (0, _defineProperty2.default)(this, "closeDialog", async () => {
      window.removeEventListener("message", this.messageHandler); // Ensure we destroy the host signup persisted element

      _PersistedElement.default.destroyElement("host_signup"); // Finally clear the flag in


      return _HostSignupStore.HostSignupStore.instance.setHostSignupActive(false);
    });
    (0, _defineProperty2.default)(this, "onCloseClick", async () => {
      if (this.state.completed) {
        // We're done, close
        return this.closeDialog();
      } else {
        _Modal.default.createDialog(_QuestionDialog.default, {
          title: (0, _languageHandler._t)("Confirm abort of host creation"),
          description: (0, _languageHandler._t)("Are you sure you wish to abort creation of the host? The process cannot be continued."),
          button: (0, _languageHandler._t)("Abort"),
          onFinished: result => {
            if (result) {
              return this.closeDialog();
            }
          }
        });
      }
    });
    (0, _defineProperty2.default)(this, "sendMessage", message => {
      this.iframeRef.current.contentWindow.postMessage(message, this.config.url);
    });
    (0, _defineProperty2.default)(this, "onAccountDetailsDialogFinished", async result => {
      if (result) {
        return this.sendAccountDetails();
      }

      return this.closeDialog();
    });
    (0, _defineProperty2.default)(this, "onAccountDetailsRequest", () => {
      const textComponent = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Continuing temporarily allows the %(hostSignupBrand)s setup process to access your " + "account to fetch verified email addresses. This data is not stored.", {
        hostSignupBrand: this.config.brand
      })), /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Learn more in our <privacyPolicyLink />, <termsOfServiceLink /> and <cookiePolicyLink />.", {}, {
        cookiePolicyLink: () => /*#__PURE__*/_react.default.createElement("a", {
          href: this.config.cookiePolicyUrl,
          target: "_blank",
          rel: "noreferrer noopener"
        }, (0, _languageHandler._t)("Cookie Policy")),
        privacyPolicyLink: () => /*#__PURE__*/_react.default.createElement("a", {
          href: this.config.privacyPolicyUrl,
          target: "_blank",
          rel: "noreferrer noopener"
        }, (0, _languageHandler._t)("Privacy Policy")),
        termsOfServiceLink: () => /*#__PURE__*/_react.default.createElement("a", {
          href: this.config.termsOfServiceUrl,
          target: "_blank",
          rel: "noreferrer noopener"
        }, (0, _languageHandler._t)("Terms of Service"))
      })));

      _Modal.default.createDialog(_QuestionDialog.default, {
        title: (0, _languageHandler._t)("You should know"),
        description: textComponent,
        button: (0, _languageHandler._t)("Continue"),
        onFinished: this.onAccountDetailsDialogFinished
      });
    });
    this.state = {
      completed: false,
      error: null,
      minimized: false
    };
    this.config = _SdkConfig.default.get().hostSignup;
  }

  async sendAccountDetails() {
    const openIdToken = await _MatrixClientPeg.MatrixClientPeg.get().getOpenIdToken();

    if (!openIdToken || !openIdToken.access_token) {
      _logger.logger.warn("Failed to connect to homeserver for OpenID token.");

      this.setState({
        completed: true,
        error: (0, _languageHandler._t)("Failed to connect to your homeserver. Please close this dialog and try again.")
      });
      return;
    }

    this.sendMessage({
      action: _HostSignupDialogTypes.PostmessageAction.HostSignupAccountDetails,
      account: {
        accessToken: await _MatrixClientPeg.MatrixClientPeg.get().getAccessToken(),
        name: _OwnProfileStore.OwnProfileStore.instance.displayName,
        openIdToken: openIdToken.access_token,
        serverName: await _MatrixClientPeg.MatrixClientPeg.get().getDomain(),
        userLocalpart: await _MatrixClientPeg.MatrixClientPeg.get().getUserIdLocalpart(),
        termsAccepted: true
      }
    });
  }

  componentDidMount() {
    window.addEventListener("message", this.messageHandler);
  }

  componentWillUnmount() {
    if (_HostSignupStore.HostSignupStore.instance.isHostSignupActive) {
      // Run the close dialog actions if we're still active, otherwise good to go
      return this.closeDialog();
    }
  }

  render() {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_HostSignup_persisted"
    }, /*#__PURE__*/_react.default.createElement(_PersistedElement.default, {
      key: HOST_SIGNUP_KEY,
      persistKey: HOST_SIGNUP_KEY
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)({
        "mx_Dialog_wrapper": !this.state.minimized
      })
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)("mx_Dialog", {
        "mx_HostSignupDialog_minimized": this.state.minimized,
        "mx_HostSignupDialog": !this.state.minimized
      })
    }, this.state.minimized && /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_Dialog_header mx_Dialog_headerWithButton"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_Dialog_title"
    }, (0, _languageHandler._t)("%(hostSignupBrand)s Setup", {
      hostSignupBrand: this.config.brand
    })), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      className: "mx_HostSignup_maximize_button",
      onClick: this.maximizeDialog,
      "aria-label": (0, _languageHandler._t)("Maximise dialog"),
      title: (0, _languageHandler._t)("Maximise dialog")
    })), !this.state.minimized && /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_Dialog_header mx_Dialog_headerWithCancel"
    }, /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      onClick: this.minimizeDialog,
      className: "mx_HostSignup_minimize_button",
      "aria-label": (0, _languageHandler._t)("Minimise dialog"),
      title: (0, _languageHandler._t)("Minimise dialog")
    }), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      onClick: this.onCloseClick,
      className: "mx_Dialog_cancelButton",
      "aria-label": (0, _languageHandler._t)("Close dialog"),
      title: (0, _languageHandler._t)("Close dialog")
    })), this.state.error && /*#__PURE__*/_react.default.createElement("div", null, this.state.error), !this.state.error && /*#__PURE__*/_react.default.createElement("iframe", {
      src: this.config.url,
      ref: this.iframeRef,
      sandbox: "allow-forms allow-scripts allow-same-origin allow-popups"
    })))));
  }

}) || _class);
exports.default = HostSignupDialog;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,