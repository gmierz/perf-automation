"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _MatrixClientPeg = require("../../../../MatrixClientPeg");

var _languageHandler = require("../../../../languageHandler");

var _Modal = _interopRequireDefault(require("../../../../Modal"));

var _InteractiveAuthEntryComponents = require("../../auth/InteractiveAuthEntryComponents");

var _DialogButtons = _interopRequireDefault(require("../../elements/DialogButtons"));

var _BaseDialog = _interopRequireDefault(require("../BaseDialog"));

var _Spinner = _interopRequireDefault(require("../../elements/Spinner"));

var _InteractiveAuthDialog = _interopRequireDefault(require("../InteractiveAuthDialog"));

var _replaceableComponent = require("../../../../utils/replaceableComponent");

var _logger = require("matrix-js-sdk/src/logger");

var _dec, _class;

let CreateCrossSigningDialog = (
/*
 * Walks the user through the process of creating a cross-signing keys. In most
 * cases, only a spinner is shown, but for more complex auth like SSO, the user
 * may need to complete some steps to proceed.
 */
_dec = (0, _replaceableComponent.replaceableComponent)("views.dialogs.security.CreateCrossSigningDialog"), _dec(_class = class CreateCrossSigningDialog extends _react.default.PureComponent {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "doBootstrapUIAuth", async makeRequest => {
      if (this.state.canUploadKeysWithPasswordOnly && this.state.accountPassword) {
        await makeRequest({
          type: 'm.login.password',
          identifier: {
            type: 'm.id.user',
            user: _MatrixClientPeg.MatrixClientPeg.get().getUserId()
          },
          // TODO: Remove `user` once servers support proper UIA
          // See https://github.com/matrix-org/synapse/issues/5665
          user: _MatrixClientPeg.MatrixClientPeg.get().getUserId(),
          password: this.state.accountPassword
        });
      } else if (this.props.tokenLogin) {
        // We are hoping the grace period is active
        await makeRequest({});
      } else {
        const dialogAesthetics = {
          [_InteractiveAuthEntryComponents.SSOAuthEntry.PHASE_PREAUTH]: {
            title: (0, _languageHandler._t)("Use Single Sign On to continue"),
            body: (0, _languageHandler._t)("To continue, use Single Sign On to prove your identity."),
            continueText: (0, _languageHandler._t)("Single Sign On"),
            continueKind: "primary"
          },
          [_InteractiveAuthEntryComponents.SSOAuthEntry.PHASE_POSTAUTH]: {
            title: (0, _languageHandler._t)("Confirm encryption setup"),
            body: (0, _languageHandler._t)("Click the button below to confirm setting up encryption."),
            continueText: (0, _languageHandler._t)("Confirm"),
            continueKind: "primary"
          }
        };

        const {
          finished
        } = _Modal.default.createTrackedDialog('Cross-signing keys dialog', '', _InteractiveAuthDialog.default, {
          title: (0, _languageHandler._t)("Setting up keys"),
          matrixClient: _MatrixClientPeg.MatrixClientPeg.get(),
          makeRequest,
          aestheticsForStagePhases: {
            [_InteractiveAuthEntryComponents.SSOAuthEntry.LOGIN_TYPE]: dialogAesthetics,
            [_InteractiveAuthEntryComponents.SSOAuthEntry.UNSTABLE_LOGIN_TYPE]: dialogAesthetics
          }
        });

        const [confirmed] = await finished;

        if (!confirmed) {
          throw new Error("Cross-signing key upload auth canceled");
        }
      }
    });
    (0, _defineProperty2.default)(this, "bootstrapCrossSigning", async () => {
      this.setState({
        error: null
      });

      const cli = _MatrixClientPeg.MatrixClientPeg.get();

      try {
        await cli.bootstrapCrossSigning({
          authUploadDeviceSigningKeys: this.doBootstrapUIAuth
        });
        this.props.onFinished(true);
      } catch (e) {
        if (this.props.tokenLogin) {
          // ignore any failures, we are relying on grace period here
          this.props.onFinished(false);
          return;
        }

        this.setState({
          error: e
        });

        _logger.logger.error("Error bootstrapping cross-signing", e);
      }
    });
    (0, _defineProperty2.default)(this, "onCancel", () => {
      this.props.onFinished(false);
    });
    this.state = {
      error: null,
      // Does the server offer a UI auth flow with just m.login.password
      // for /keys/device_signing/upload?
      // If we have an account password in memory, let's simplify and
      // assume it means password auth is also supported for device
      // signing key upload as well. This avoids hitting the server to
      // test auth flows, which may be slow under high load.
      canUploadKeysWithPasswordOnly: props.accountPassword ? true : null,
      accountPassword: props.accountPassword || ""
    };

    if (!this.state.accountPassword) {
      this.queryKeyUploadAuth();
    }
  }

  componentDidMount() {
    this.bootstrapCrossSigning();
  }

  async queryKeyUploadAuth() {
    try {
      await _MatrixClientPeg.MatrixClientPeg.get().uploadDeviceSigningKeys(null, {}); // We should never get here: the server should always require
      // UI auth to upload device signing keys. If we do, we upload
      // no keys which would be a no-op.

      _logger.logger.log("uploadDeviceSigningKeys unexpectedly succeeded without UI auth!");
    } catch (error) {
      if (!error.data || !error.data.flows) {
        _logger.logger.log("uploadDeviceSigningKeys advertised no flows!");

        return;
      }

      const canUploadKeysWithPasswordOnly = error.data.flows.some(f => {
        return f.stages.length === 1 && f.stages[0] === 'm.login.password';
      });
      this.setState({
        canUploadKeysWithPasswordOnly
      });
    }
  }

  render() {
    let content;

    if (this.state.error) {
      content = /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Unable to set up keys")), /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_Dialog_buttons"
      }, /*#__PURE__*/_react.default.createElement(_DialogButtons.default, {
        primaryButton: (0, _languageHandler._t)('Retry'),
        onPrimaryButtonClick: this.bootstrapCrossSigning,
        onCancel: this.onCancel
      })));
    } else {
      content = /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_Spinner.default, null));
    }

    return /*#__PURE__*/_react.default.createElement(_BaseDialog.default, {
      className: "mx_CreateCrossSigningDialog",
      onFinished: this.props.onFinished,
      title: (0, _languageHandler._t)("Setting up keys"),
      hasCancel: false,
      fixedWidth: false
    }, /*#__PURE__*/_react.default.createElement("div", null, content));
  }

}) || _class);
exports.default = CreateCrossSigningDialog;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,