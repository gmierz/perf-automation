"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _reactFocusLock = _interopRequireDefault(require("react-focus-lock"));

var _classnames = _interopRequireDefault(require("classnames"));

var _Keyboard = require("../../../Keyboard");

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _languageHandler = require("../../../languageHandler");

var _MatrixClientContext = _interopRequireDefault(require("../../../contexts/MatrixClientContext"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _dec, _class, _class2, _temp;

let BaseDialog = (
/*
 * Basic container for modal dialogs.
 *
 * Includes a div for the title, and a keypress handler which cancels the
 * dialog on escape.
 */
_dec = (0, _replaceableComponent.replaceableComponent)("views.dialogs.BaseDialog"), _dec(_class = (_temp = _class2 = class BaseDialog extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "matrixClient", void 0);
    (0, _defineProperty2.default)(this, "onKeyDown", e => {
      if (this.props.onKeyDown) {
        this.props.onKeyDown(e);
      }

      if (this.props.hasCancel && e.key === _Keyboard.Key.ESCAPE) {
        e.stopPropagation();
        e.preventDefault();
        this.props.onFinished(false);
      }
    });
    (0, _defineProperty2.default)(this, "onCancelClick", e => {
      this.props.onFinished(false);
    });
    this.matrixClient = _MatrixClientPeg.MatrixClientPeg.get();
  }

  render() {
    let cancelButton;

    if (this.props.hasCancel) {
      cancelButton = /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        onClick: this.onCancelClick,
        className: "mx_Dialog_cancelButton",
        "aria-label": (0, _languageHandler._t)("Close dialog")
      });
    }

    let headerImage;

    if (this.props.headerImage) {
      headerImage = /*#__PURE__*/_react.default.createElement("img", {
        className: "mx_Dialog_titleImage",
        src: this.props.headerImage,
        alt: ""
      });
    }

    return /*#__PURE__*/_react.default.createElement(_MatrixClientContext.default.Provider, {
      value: this.matrixClient
    }, /*#__PURE__*/_react.default.createElement(_reactFocusLock.default, {
      returnFocus: true,
      lockProps: {
        onKeyDown: this.onKeyDown,
        role: "dialog",
        ["aria-labelledby"]: "mx_BaseDialog_title",
        // This should point to a node describing the dialog.
        // If we were about to completely follow this recommendation we'd need to
        // make all the components relying on BaseDialog to be aware of it.
        // So instead we will use the whole content as the description.
        // Description comes first and if the content contains more text,
        // AT users can skip its presentation.
        ["aria-describedby"]: this.props.contentId
      },
      className: (0, _classnames.default)({
        [this.props.className]: true,
        'mx_Dialog_fixedWidth': this.props.fixedWidth
      })
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)('mx_Dialog_header', {
        'mx_Dialog_headerWithButton': !!this.props.headerButton,
        'mx_Dialog_headerWithCancel': !!cancelButton
      })
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)('mx_Dialog_title', this.props.titleClass),
      id: "mx_BaseDialog_title"
    }, headerImage, this.props.title), this.props.headerButton, cancelButton), this.props.children));
  }

}, (0, _defineProperty2.default)(_class2, "defaultProps", {
  hasCancel: true,
  fixedWidth: true
}), _temp)) || _class);
exports.default = BaseDialog;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,