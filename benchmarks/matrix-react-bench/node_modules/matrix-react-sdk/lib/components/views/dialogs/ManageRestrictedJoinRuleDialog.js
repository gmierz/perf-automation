"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _room = require("matrix-js-sdk/src/models/room");

var _languageHandler = require("../../../languageHandler");

var _BaseDialog = _interopRequireDefault(require("./BaseDialog"));

var _SearchBox = _interopRequireDefault(require("../../structures/SearchBox"));

var _SpaceStore = _interopRequireDefault(require("../../../stores/spaces/SpaceStore"));

var _RoomAvatar = _interopRequireDefault(require("../avatars/RoomAvatar"));

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

var _AutoHideScrollbar = _interopRequireDefault(require("../../structures/AutoHideScrollbar"));

var _StyledCheckbox = _interopRequireDefault(require("../elements/StyledCheckbox"));

var _MatrixClientContext = _interopRequireDefault(require("../../../contexts/MatrixClientContext"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
Copyright 2021 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const Entry = ({
  room,
  checked,
  onChange
}) => {
  const localRoom = room instanceof _room.Room;
  let description;

  if (localRoom) {
    description = (0, _languageHandler._t)("%(count)s members", {
      count: room.getJoinedMemberCount()
    });

    const numChildRooms = _SpaceStore.default.instance.getChildRooms(room.roomId).length;

    if (numChildRooms > 0) {
      description += " Â· " + (0, _languageHandler._t)("%(count)s rooms", {
        count: numChildRooms
      });
    }
  }

  return /*#__PURE__*/_react.default.createElement("label", {
    className: "mx_ManageRestrictedJoinRuleDialog_entry"
  }, /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("div", null, localRoom ? /*#__PURE__*/_react.default.createElement(_RoomAvatar.default, {
    room: room,
    height: 20,
    width: 20
  }) : /*#__PURE__*/_react.default.createElement(_RoomAvatar.default, {
    oobData: room,
    height: 20,
    width: 20
  }), /*#__PURE__*/_react.default.createElement("span", {
    className: "mx_ManageRestrictedJoinRuleDialog_entry_name"
  }, room.name)), description && /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_ManageRestrictedJoinRuleDialog_entry_description"
  }, description)), /*#__PURE__*/_react.default.createElement(_StyledCheckbox.default, {
    onChange: onChange ? e => onChange(e.target.checked) : null,
    checked: checked,
    disabled: !onChange
  }));
};

const addAllParents = (set, room) => {
  const cli = room.client;
  const parents = Array.from(_SpaceStore.default.instance.getKnownParents(room.roomId)).map(parentId => cli.getRoom(parentId));
  parents.forEach(parent => {
    if (set.has(parent)) return;
    set.add(parent);
    addAllParents(set, parent);
  });
};

const ManageRestrictedJoinRuleDialog = ({
  room,
  selected = [],
  onFinished
}) => {
  const cli = room.client;
  const [newSelected, setNewSelected] = (0, _react.useState)(new Set(selected));
  const [query, setQuery] = (0, _react.useState)("");
  const lcQuery = query.toLowerCase().trim();
  const [spacesContainingRoom, otherEntries] = (0, _react.useMemo)(() => {
    const parents = new Set();
    addAllParents(parents, room);
    return [Array.from(parents), selected.map(roomId => {
      const room = cli.getRoom(roomId);

      if (!room) {
        return {
          roomId,
          name: roomId
        };
      }

      if (room.getMyMembership() !== "join" || !room.isSpaceRoom()) {
        return room;
      }
    }).filter(Boolean)];
  }, [cli, selected, room]);
  const [filteredSpacesContainingRoom, filteredOtherEntries] = (0, _react.useMemo)(() => [spacesContainingRoom.filter(r => r.name.toLowerCase().includes(lcQuery)), otherEntries.filter(r => r.name.toLowerCase().includes(lcQuery))], [spacesContainingRoom, otherEntries, lcQuery]);

  const onChange = (checked, room) => {
    if (checked) {
      newSelected.add(room.roomId);
    } else {
      newSelected.delete(room.roomId);
    }

    setNewSelected(new Set(newSelected));
  };

  let inviteOnlyWarning;

  if (newSelected.size < 1) {
    inviteOnlyWarning = /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_ManageRestrictedJoinRuleDialog_section_info"
    }, (0, _languageHandler._t)("You're removing all spaces. Access will default to invite only"));
  }

  return /*#__PURE__*/_react.default.createElement(_BaseDialog.default, {
    title: (0, _languageHandler._t)("Select spaces"),
    className: "mx_ManageRestrictedJoinRuleDialog",
    onFinished: onFinished,
    fixedWidth: false
  }, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Decide which spaces can access this room. " + "If a space is selected, its members can find and join <RoomName/>.", {}, {
    RoomName: () => /*#__PURE__*/_react.default.createElement("b", null, room.name)
  })), /*#__PURE__*/_react.default.createElement(_MatrixClientContext.default.Provider, {
    value: cli
  }, /*#__PURE__*/_react.default.createElement(_SearchBox.default, {
    className: "mx_textinput_icon mx_textinput_search",
    placeholder: (0, _languageHandler._t)("Search spaces"),
    onSearch: setQuery,
    autoFocus: true
  }), /*#__PURE__*/_react.default.createElement(_AutoHideScrollbar.default, {
    className: "mx_ManageRestrictedJoinRuleDialog_content"
  }, filteredSpacesContainingRoom.length > 0 ? /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_ManageRestrictedJoinRuleDialog_section"
  }, /*#__PURE__*/_react.default.createElement("h3", null, room.isSpaceRoom() ? (0, _languageHandler._t)("Spaces you know that contain this space") : (0, _languageHandler._t)("Spaces you know that contain this room")), filteredSpacesContainingRoom.map(space => {
    return /*#__PURE__*/_react.default.createElement(Entry, {
      key: space.roomId,
      room: space,
      checked: newSelected.has(space.roomId),
      onChange: checked => {
        onChange(checked, space);
      }
    });
  })) : undefined, filteredOtherEntries.length > 0 ? /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_ManageRestrictedJoinRuleDialog_section"
  }, /*#__PURE__*/_react.default.createElement("h3", null, (0, _languageHandler._t)("Other spaces or rooms you might not know")), /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_ManageRestrictedJoinRuleDialog_section_info"
  }, /*#__PURE__*/_react.default.createElement("div", null, (0, _languageHandler._t)("These are likely ones other room admins are a part of."))), filteredOtherEntries.map(space => {
    return /*#__PURE__*/_react.default.createElement(Entry, {
      key: space.roomId,
      room: space,
      checked: newSelected.has(space.roomId),
      onChange: checked => {
        onChange(checked, space);
      }
    });
  })) : null, filteredSpacesContainingRoom.length + filteredOtherEntries.length < 1 ? /*#__PURE__*/_react.default.createElement("span", {
    className: "mx_ManageRestrictedJoinRuleDialog_noResults"
  }, (0, _languageHandler._t)("No results")) : undefined), /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_ManageRestrictedJoinRuleDialog_footer"
  }, inviteOnlyWarning, /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_ManageRestrictedJoinRuleDialog_footer_buttons"
  }, /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
    kind: "primary_outline",
    onClick: () => onFinished()
  }, (0, _languageHandler._t)("Cancel")), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
    kind: "primary",
    onClick: () => onFinished(Array.from(newSelected))
  }, (0, _languageHandler._t)("Confirm"))))));
};

var _default = ManageRestrictedJoinRuleDialog;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,