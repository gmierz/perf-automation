"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _languageHandler = require("../../../languageHandler");

var _LabelledToggleSwitch = _interopRequireDefault(require("../elements/LabelledToggleSwitch"));

var _WidgetPermissionStore = require("../../../stores/widgets/WidgetPermissionStore");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _BaseDialog = _interopRequireDefault(require("./BaseDialog"));

var _DialogButtons = _interopRequireDefault(require("../elements/DialogButtons"));

var _logger = require("matrix-js-sdk/src/logger");

var _dec, _class;

let WidgetOpenIDPermissionsDialog = (_dec = (0, _replaceableComponent.replaceableComponent)("views.dialogs.WidgetOpenIDPermissionsDialog"), _dec(_class = class WidgetOpenIDPermissionsDialog extends _react.default.PureComponent {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "onAllow", () => {
      this.onPermissionSelection(true);
    });
    (0, _defineProperty2.default)(this, "onDeny", () => {
      this.onPermissionSelection(false);
    });
    (0, _defineProperty2.default)(this, "onRememberSelectionChange", newVal => {
      this.setState({
        rememberSelection: newVal
      });
    });
    this.state = {
      rememberSelection: false
    };
  }

  onPermissionSelection(allowed) {
    if (this.state.rememberSelection) {
      _logger.logger.log(`Remembering ${this.props.widget.id} as allowed=${allowed} for OpenID`);

      _WidgetPermissionStore.WidgetPermissionStore.instance.setOIDCState(this.props.widget, this.props.widgetKind, this.props.inRoomId, allowed ? _WidgetPermissionStore.OIDCState.Allowed : _WidgetPermissionStore.OIDCState.Denied);
    }

    this.props.onFinished(allowed);
  }

  render() {
    return /*#__PURE__*/_react.default.createElement(_BaseDialog.default, {
      className: "mx_WidgetOpenIDPermissionsDialog",
      hasCancel: true,
      onFinished: this.props.onFinished,
      title: (0, _languageHandler._t)("Allow this widget to verify your identity")
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_WidgetOpenIDPermissionsDialog_content"
    }, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("The widget will verify your user ID, but won't be able to perform actions for you:")), /*#__PURE__*/_react.default.createElement("p", {
      className: "text-muted"
    }, this.props.widget.templateUrl.split("?")[0].split("#")[0])), /*#__PURE__*/_react.default.createElement(_DialogButtons.default, {
      primaryButton: (0, _languageHandler._t)("Continue"),
      onPrimaryButtonClick: this.onAllow,
      onCancel: this.onDeny,
      additive: /*#__PURE__*/_react.default.createElement(_LabelledToggleSwitch.default, {
        value: this.state.rememberSelection,
        toggleInFront: true,
        onChange: this.onRememberSelectionChange,
        label: (0, _languageHandler._t)("Remember this")
      })
    }));
  }

}) || _class);
exports.default = WidgetOpenIDPermissionsDialog;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,