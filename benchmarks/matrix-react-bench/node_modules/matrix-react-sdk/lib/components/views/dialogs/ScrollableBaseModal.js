"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _Keyboard = require("../../../Keyboard");

var _MatrixClientContext = _interopRequireDefault(require("../../../contexts/MatrixClientContext"));

var _reactFocusLock = _interopRequireDefault(require("react-focus-lock"));

var _languageHandler = require("../../../languageHandler");

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

/*
Copyright 2021 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/**
 * Scrollable dialog base from Compound (Web Components).
 */
class ScrollableBaseModal extends _react.default.PureComponent {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "onKeyDown", e => {
      if (e.key === _Keyboard.Key.ESCAPE) {
        e.stopPropagation();
        e.preventDefault();
        this.cancel();
      }
    });
    (0, _defineProperty2.default)(this, "onCancel", () => {
      this.cancel();
    });
    (0, _defineProperty2.default)(this, "onSubmit", e => {
      e.stopPropagation();
      e.preventDefault();
      if (!this.state.canSubmit) return; // pretend the submit button was disabled

      this.submit();
    });
  }

  get matrixClient() {
    return _MatrixClientPeg.MatrixClientPeg.get();
  }

  render() {
    return /*#__PURE__*/_react.default.createElement(_MatrixClientContext.default.Provider, {
      value: this.matrixClient
    }, /*#__PURE__*/_react.default.createElement(_reactFocusLock.default, {
      returnFocus: true,
      lockProps: {
        onKeyDown: this.onKeyDown,
        role: "dialog",
        ["aria-labelledby"]: "mx_CompoundDialog_title",
        // Like BaseDialog, we'll just point this at the whole content
        ["aria-describedby"]: "mx_CompoundDialog_content"
      },
      className: "mx_CompoundDialog mx_ScrollableBaseDialog"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_CompoundDialog_header"
    }, /*#__PURE__*/_react.default.createElement("h1", null, this.state.title), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      onClick: this.onCancel,
      className: "mx_CompoundDialog_cancelButton",
      "aria-label": (0, _languageHandler._t)("Close dialog")
    })), /*#__PURE__*/_react.default.createElement("form", {
      onSubmit: this.onSubmit
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_CompoundDialog_content"
    }, this.renderContent()), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_CompoundDialog_footer"
    }, /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      onClick: this.onCancel,
      kind: "primary_outline"
    }, (0, _languageHandler._t)("Cancel")), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      onClick: this.onSubmit,
      kind: "primary",
      disabled: !this.state.canSubmit,
      type: "submit",
      element: "button",
      className: "mx_Dialog_nonDialogButton"
    }, this.state.actionLabel)))));
  }

}

exports.default = ScrollableBaseModal;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,