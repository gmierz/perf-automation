"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _languageHandler = require("../../../languageHandler");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _BaseDialog = _interopRequireDefault(require("./BaseDialog"));

var _dec, _class, _class2, _temp;

let ErrorDialog = (_dec = (0, _replaceableComponent.replaceableComponent)("views.dialogs.ErrorDialog"), _dec(_class = (_temp = _class2 = class ErrorDialog extends _react.default.Component {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "onClick", () => {
      this.props.onFinished(true);
    });
  }

  render() {
    return /*#__PURE__*/_react.default.createElement(_BaseDialog.default, {
      className: "mx_ErrorDialog",
      onFinished: this.props.onFinished,
      title: this.props.title || (0, _languageHandler._t)('Error'),
      headerImage: this.props.headerImage,
      contentId: "mx_Dialog_content"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_Dialog_content",
      id: "mx_Dialog_content"
    }, this.props.description || (0, _languageHandler._t)('An error has occurred.')), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_Dialog_buttons"
    }, /*#__PURE__*/_react.default.createElement("button", {
      className: "mx_Dialog_primary",
      onClick: this.onClick,
      autoFocus: this.props.focus
    }, this.props.button || (0, _languageHandler._t)('OK'))));
  }

}, (0, _defineProperty2.default)(_class2, "defaultProps", {
  focus: true,
  title: null,
  description: null,
  button: null
}), _temp)) || _class);
exports.default = ErrorDialog;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL2RpYWxvZ3MvRXJyb3JEaWFsb2cudHN4Il0sIm5hbWVzIjpbIkVycm9yRGlhbG9nIiwiUmVhY3QiLCJDb21wb25lbnQiLCJwcm9wcyIsIm9uRmluaXNoZWQiLCJyZW5kZXIiLCJ0aXRsZSIsImhlYWRlckltYWdlIiwiZGVzY3JpcHRpb24iLCJvbkNsaWNrIiwiZm9jdXMiLCJidXR0b24iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBMkJBOztBQUNBOztBQUNBOztBQUNBOzs7O0lBZ0JxQkEsVyxXQURwQixnREFBcUIsMkJBQXJCLEMsbUNBQUQsTUFDcUJBLFdBRHJCLFNBQ3lDQyxlQUFNQyxTQUQvQyxDQUN5RTtBQUFBO0FBQUE7QUFBQSxtREFRbkQsTUFBTTtBQUNwQixXQUFLQyxLQUFMLENBQVdDLFVBQVgsQ0FBc0IsSUFBdEI7QUFDSCxLQVZvRTtBQUFBOztBQVk5REMsRUFBQUEsTUFBTSxHQUFHO0FBQ1osd0JBQ0ksNkJBQUMsbUJBQUQ7QUFDSSxNQUFBLFNBQVMsRUFBQyxnQkFEZDtBQUVJLE1BQUEsVUFBVSxFQUFFLEtBQUtGLEtBQUwsQ0FBV0MsVUFGM0I7QUFHSSxNQUFBLEtBQUssRUFBRSxLQUFLRCxLQUFMLENBQVdHLEtBQVgsSUFBb0IseUJBQUcsT0FBSCxDQUgvQjtBQUlJLE1BQUEsV0FBVyxFQUFFLEtBQUtILEtBQUwsQ0FBV0ksV0FKNUI7QUFLSSxNQUFBLFNBQVMsRUFBQztBQUxkLG9CQU9JO0FBQUssTUFBQSxTQUFTLEVBQUMsbUJBQWY7QUFBbUMsTUFBQSxFQUFFLEVBQUM7QUFBdEMsT0FDTSxLQUFLSixLQUFMLENBQVdLLFdBQVgsSUFBMEIseUJBQUcsd0JBQUgsQ0FEaEMsQ0FQSixlQVVJO0FBQUssTUFBQSxTQUFTLEVBQUM7QUFBZixvQkFDSTtBQUFRLE1BQUEsU0FBUyxFQUFDLG1CQUFsQjtBQUFzQyxNQUFBLE9BQU8sRUFBRSxLQUFLQyxPQUFwRDtBQUE2RCxNQUFBLFNBQVMsRUFBRSxLQUFLTixLQUFMLENBQVdPO0FBQW5GLE9BQ00sS0FBS1AsS0FBTCxDQUFXUSxNQUFYLElBQXFCLHlCQUFHLElBQUgsQ0FEM0IsQ0FESixDQVZKLENBREo7QUFrQkg7O0FBL0JvRSxDLHlEQUN4QztBQUN6QkQsRUFBQUEsS0FBSyxFQUFFLElBRGtCO0FBRXpCSixFQUFBQSxLQUFLLEVBQUUsSUFGa0I7QUFHekJFLEVBQUFBLFdBQVcsRUFBRSxJQUhZO0FBSXpCRyxFQUFBQSxNQUFNLEVBQUU7QUFKaUIsQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5Db3B5cmlnaHQgMjAxNSwgMjAxNiBPcGVuTWFya2V0IEx0ZFxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbi8qXG4gKiBVc2FnZTpcbiAqIE1vZGFsLmNyZWF0ZVRyYWNrZWREaWFsb2coJ0FuIElkZW50aWZpZXInLCAnc29tZSBkZXRhaWwnLCBFcnJvckRpYWxvZywge1xuICogICB0aXRsZTogXCJzb21lIHRleHRcIiwgKGRlZmF1bHQ6IFwiRXJyb3JcIilcbiAqICAgZGVzY3JpcHRpb246IFwic29tZSBtb3JlIHRleHRcIixcbiAqICAgYnV0dG9uOiBcIkJ1dHRvbiBUZXh0XCIsXG4gKiAgIG9uRmluaXNoZWQ6IHNvbWVGdW5jdGlvbixcbiAqICAgZm9jdXM6IHRydWV8ZmFsc2UgKGRlZmF1bHQ6IHRydWUpXG4gKiB9KTtcbiAqL1xuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgX3QgfSBmcm9tICcuLi8uLi8uLi9sYW5ndWFnZUhhbmRsZXInO1xuaW1wb3J0IHsgcmVwbGFjZWFibGVDb21wb25lbnQgfSBmcm9tIFwiLi4vLi4vLi4vdXRpbHMvcmVwbGFjZWFibGVDb21wb25lbnRcIjtcbmltcG9ydCBCYXNlRGlhbG9nIGZyb20gXCIuL0Jhc2VEaWFsb2dcIjtcblxuaW50ZXJmYWNlIElQcm9wcyB7XG4gICAgb25GaW5pc2hlZDogKHN1Y2Nlc3M6IGJvb2xlYW4pID0+IHZvaWQ7XG4gICAgdGl0bGU/OiBzdHJpbmc7XG4gICAgZGVzY3JpcHRpb24/OiBSZWFjdC5SZWFjdE5vZGU7XG4gICAgYnV0dG9uPzogc3RyaW5nO1xuICAgIGZvY3VzPzogYm9vbGVhbjtcbiAgICBoZWFkZXJJbWFnZT86IHN0cmluZztcbn1cblxuaW50ZXJmYWNlIElTdGF0ZSB7XG4gICAgb25GaW5pc2hlZDogKHN1Y2Nlc3M6IGJvb2xlYW4pID0+IHZvaWQ7XG59XG5cbkByZXBsYWNlYWJsZUNvbXBvbmVudChcInZpZXdzLmRpYWxvZ3MuRXJyb3JEaWFsb2dcIilcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVycm9yRGlhbG9nIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PElQcm9wcywgSVN0YXRlPiB7XG4gICAgcHVibGljIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgICAgIGZvY3VzOiB0cnVlLFxuICAgICAgICB0aXRsZTogbnVsbCxcbiAgICAgICAgZGVzY3JpcHRpb246IG51bGwsXG4gICAgICAgIGJ1dHRvbjogbnVsbCxcbiAgICB9O1xuXG4gICAgcHJpdmF0ZSBvbkNsaWNrID0gKCkgPT4ge1xuICAgICAgICB0aGlzLnByb3BzLm9uRmluaXNoZWQodHJ1ZSk7XG4gICAgfTtcblxuICAgIHB1YmxpYyByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8QmFzZURpYWxvZ1xuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cIm14X0Vycm9yRGlhbG9nXCJcbiAgICAgICAgICAgICAgICBvbkZpbmlzaGVkPXt0aGlzLnByb3BzLm9uRmluaXNoZWR9XG4gICAgICAgICAgICAgICAgdGl0bGU9e3RoaXMucHJvcHMudGl0bGUgfHwgX3QoJ0Vycm9yJyl9XG4gICAgICAgICAgICAgICAgaGVhZGVySW1hZ2U9e3RoaXMucHJvcHMuaGVhZGVySW1hZ2V9XG4gICAgICAgICAgICAgICAgY29udGVudElkPSdteF9EaWFsb2dfY29udGVudCdcbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm14X0RpYWxvZ19jb250ZW50XCIgaWQ9J214X0RpYWxvZ19jb250ZW50Jz5cbiAgICAgICAgICAgICAgICAgICAgeyB0aGlzLnByb3BzLmRlc2NyaXB0aW9uIHx8IF90KCdBbiBlcnJvciBoYXMgb2NjdXJyZWQuJykgfVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibXhfRGlhbG9nX2J1dHRvbnNcIj5cbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJteF9EaWFsb2dfcHJpbWFyeVwiIG9uQ2xpY2s9e3RoaXMub25DbGlja30gYXV0b0ZvY3VzPXt0aGlzLnByb3BzLmZvY3VzfT5cbiAgICAgICAgICAgICAgICAgICAgICAgIHsgdGhpcy5wcm9wcy5idXR0b24gfHwgX3QoJ09LJykgfVxuICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvQmFzZURpYWxvZz5cbiAgICAgICAgKTtcbiAgICB9XG59XG4iXX0=