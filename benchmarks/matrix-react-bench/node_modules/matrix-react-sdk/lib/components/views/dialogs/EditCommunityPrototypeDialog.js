"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _BaseDialog = _interopRequireDefault(require("./BaseDialog"));

var _languageHandler = require("../../../languageHandler");

var _Field = _interopRequireDefault(require("../elements/Field"));

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _CommunityPrototypeStore = require("../../../stores/CommunityPrototypeStore");

var _FlairStore = _interopRequireDefault(require("../../../stores/FlairStore"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _Media = require("../../../customisations/Media");

var _logger = require("matrix-js-sdk/src/logger");

var _dec, _class;

let EditCommunityPrototypeDialog = ( // XXX: This is a lot of duplication from the create dialog, just in a different shape
_dec = (0, _replaceableComponent.replaceableComponent)("views.dialogs.EditCommunityPrototypeDialog"), _dec(_class = class EditCommunityPrototypeDialog extends _react.default.PureComponent {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "avatarUploadRef", /*#__PURE__*/_react.default.createRef());
    (0, _defineProperty2.default)(this, "onNameChange", ev => {
      this.setState({
        name: ev.target.value
      });
    });
    (0, _defineProperty2.default)(this, "onSubmit", async ev => {
      ev.preventDefault();
      ev.stopPropagation();
      if (this.state.busy) return; // We'll create the community now to see if it's taken, leaving it active in
      // the background for the user to look at while they invite people.

      this.setState({
        busy: true
      });

      try {
        let avatarUrl = this.state.currentAvatarUrl || ""; // must be a string for synapse to accept it

        if (this.state.avatarFile) {
          avatarUrl = await _MatrixClientPeg.MatrixClientPeg.get().uploadContent(this.state.avatarFile);
        }

        await _MatrixClientPeg.MatrixClientPeg.get().setGroupProfile(this.props.communityId, {
          name: this.state.name,
          avatar_url: avatarUrl
        }); // ask the flair store to update the profile too

        await _FlairStore.default.refreshGroupProfile(_MatrixClientPeg.MatrixClientPeg.get(), this.props.communityId); // we did it, so close the dialog

        this.props.onFinished(true);
      } catch (e) {
        _logger.logger.error(e);

        this.setState({
          busy: false,
          error: (0, _languageHandler._t)("There was an error updating your community. The server is unable to process your request.")
        });
      }
    });
    (0, _defineProperty2.default)(this, "onAvatarChanged", e => {
      if (!e.target.files || !e.target.files.length) {
        this.setState({
          avatarFile: null
        });
      } else {
        this.setState({
          busy: true
        });
        const file = e.target.files[0];
        const reader = new FileReader();

        reader.onload = ev => {
          this.setState({
            avatarFile: file,
            busy: false,
            avatarPreview: ev.target.result
          });
        };

        reader.readAsDataURL(file);
      }
    });
    (0, _defineProperty2.default)(this, "onChangeAvatar", () => {
      if (this.avatarUploadRef.current) this.avatarUploadRef.current.click();
    });

    const profile = _CommunityPrototypeStore.CommunityPrototypeStore.instance.getCommunityProfile(props.communityId);

    this.state = {
      name: (profile === null || profile === void 0 ? void 0 : profile.name) || "",
      error: null,
      busy: false,
      avatarFile: null,
      avatarPreview: null,
      currentAvatarUrl: profile === null || profile === void 0 ? void 0 : profile.avatarUrl
    };
  }

  render() {
    let preview = /*#__PURE__*/_react.default.createElement("img", {
      src: this.state.avatarPreview,
      className: "mx_EditCommunityPrototypeDialog_avatar"
    });

    if (!this.state.avatarPreview) {
      if (this.state.currentAvatarUrl) {
        const url = (0, _Media.mediaFromMxc)(this.state.currentAvatarUrl).srcHttp;
        preview = /*#__PURE__*/_react.default.createElement("img", {
          src: url,
          className: "mx_EditCommunityPrototypeDialog_avatar"
        });
      } else {
        preview = /*#__PURE__*/_react.default.createElement("div", {
          className: "mx_EditCommunityPrototypeDialog_placeholderAvatar"
        });
      }
    }

    return /*#__PURE__*/_react.default.createElement(_BaseDialog.default, {
      className: "mx_EditCommunityPrototypeDialog",
      onFinished: this.props.onFinished,
      title: (0, _languageHandler._t)("Update community")
    }, /*#__PURE__*/_react.default.createElement("form", {
      onSubmit: this.onSubmit
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_Dialog_content"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_EditCommunityPrototypeDialog_rowName"
    }, /*#__PURE__*/_react.default.createElement(_Field.default, {
      value: this.state.name,
      onChange: this.onNameChange,
      placeholder: (0, _languageHandler._t)("Enter name"),
      label: (0, _languageHandler._t)("Enter name")
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_EditCommunityPrototypeDialog_rowAvatar"
    }, /*#__PURE__*/_react.default.createElement("input", {
      type: "file",
      style: {
        display: "none"
      },
      ref: this.avatarUploadRef,
      accept: "image/*",
      onChange: this.onAvatarChanged
    }), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      onClick: this.onChangeAvatar,
      className: "mx_EditCommunityPrototypeDialog_avatarContainer"
    }, preview), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_EditCommunityPrototypeDialog_tip"
    }, /*#__PURE__*/_react.default.createElement("b", null, (0, _languageHandler._t)("Add image (optional)")), /*#__PURE__*/_react.default.createElement("span", null, (0, _languageHandler._t)("An image will help people identify your community.")))), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      kind: "primary",
      onClick: this.onSubmit,
      disabled: this.state.busy
    }, (0, _languageHandler._t)("Save")))));
  }

}) || _class);
exports.default = EditCommunityPrototypeDialog;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,