"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _SdkConfig = _interopRequireDefault(require("../../../SdkConfig"));

var _Modal = _interopRequireDefault(require("../../../Modal"));

var _languageHandler = require("../../../languageHandler");

var _submitRageshake = _interopRequireWildcard(require("../../../rageshake/submit-rageshake"));

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _QuestionDialog = _interopRequireDefault(require("./QuestionDialog"));

var _BaseDialog = _interopRequireDefault(require("./BaseDialog"));

var _Field = _interopRequireDefault(require("../elements/Field"));

var _Spinner = _interopRequireDefault(require("../elements/Spinner"));

var _DialogButtons = _interopRequireDefault(require("../elements/DialogButtons"));

var _sentry = require("../../../sentry");

var _dec, _class;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

let BugReportDialog = (_dec = (0, _replaceableComponent.replaceableComponent)("views.dialogs.BugReportDialog"), _dec(_class = class BugReportDialog extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "unmounted", void 0);
    (0, _defineProperty2.default)(this, "onCancel", () => {
      this.props.onFinished(false);
    });
    (0, _defineProperty2.default)(this, "onSubmit", () => {
      if ((!this.state.text || !this.state.text.trim()) && (!this.state.issueUrl || !this.state.issueUrl.trim())) {
        this.setState({
          err: (0, _languageHandler._t)("Please tell us what went wrong or, better, create a GitHub issue that describes the problem.")
        });
        return;
      }

      const userText = (this.state.text.length > 0 ? this.state.text + '\n\n' : '') + 'Issue: ' + (this.state.issueUrl.length > 0 ? this.state.issueUrl : 'No issue link given');
      this.setState({
        busy: true,
        progress: null,
        err: null
      });
      this.sendProgressCallback((0, _languageHandler._t)("Preparing to send logs"));
      (0, _submitRageshake.default)(_SdkConfig.default.get().bug_report_endpoint_url, {
        userText,
        sendLogs: true,
        progressCallback: this.sendProgressCallback,
        label: this.props.label
      }).then(() => {
        if (!this.unmounted) {
          this.props.onFinished(false); // N.B. first param is passed to piwik and so doesn't want i18n

          _Modal.default.createTrackedDialog('Bug report sent', '', _QuestionDialog.default, {
            title: (0, _languageHandler._t)('Logs sent'),
            description: (0, _languageHandler._t)('Thank you!'),
            hasCancelButton: false
          });
        }
      }, err => {
        if (!this.unmounted) {
          this.setState({
            busy: false,
            progress: null,
            err: (0, _languageHandler._t)("Failed to send logs: ") + `${err.message}`
          });
        }
      });
      (0, _sentry.sendSentryReport)(this.state.text, this.state.issueUrl, this.props.error);
    });
    (0, _defineProperty2.default)(this, "onDownload", async () => {
      this.setState({
        downloadBusy: true
      });
      this.downloadProgressCallback((0, _languageHandler._t)("Preparing to download logs"));

      try {
        await (0, _submitRageshake.downloadBugReport)({
          sendLogs: true,
          progressCallback: this.downloadProgressCallback,
          label: this.props.label
        });
        this.setState({
          downloadBusy: false,
          downloadProgress: null
        });
      } catch (err) {
        if (!this.unmounted) {
          this.setState({
            downloadBusy: false,
            downloadProgress: (0, _languageHandler._t)("Failed to send logs: ") + `${err.message}`
          });
        }
      }
    });
    (0, _defineProperty2.default)(this, "onTextChange", ev => {
      this.setState({
        text: ev.currentTarget.value
      });
    });
    (0, _defineProperty2.default)(this, "onIssueUrlChange", ev => {
      this.setState({
        issueUrl: ev.currentTarget.value
      });
    });
    (0, _defineProperty2.default)(this, "sendProgressCallback", progress => {
      if (this.unmounted) {
        return;
      }

      this.setState({
        progress
      });
    });
    (0, _defineProperty2.default)(this, "downloadProgressCallback", downloadProgress => {
      if (this.unmounted) {
        return;
      }

      this.setState({
        downloadProgress
      });
    });
    this.state = {
      sendLogs: true,
      busy: false,
      err: null,
      issueUrl: "",
      text: props.initialText || "",
      progress: null,
      downloadBusy: false,
      downloadProgress: null
    };
    this.unmounted = false;
  }

  componentWillUnmount() {
    this.unmounted = true;
  }

  render() {
    let error = null;

    if (this.state.err) {
      error = /*#__PURE__*/_react.default.createElement("div", {
        className: "error"
      }, this.state.err);
    }

    let progress = null;

    if (this.state.busy) {
      progress = /*#__PURE__*/_react.default.createElement("div", {
        className: "progress"
      }, /*#__PURE__*/_react.default.createElement(_Spinner.default, null), this.state.progress, " ...");
    }

    let warning;

    if (window.Modernizr && Object.values(window.Modernizr).some(support => support === false)) {
      warning = /*#__PURE__*/_react.default.createElement("p", null, /*#__PURE__*/_react.default.createElement("b", null, (0, _languageHandler._t)("Reminder: Your browser is unsupported, so your experience may be unpredictable.")));
    }

    return /*#__PURE__*/_react.default.createElement(_BaseDialog.default, {
      className: "mx_BugReportDialog",
      onFinished: this.onCancel,
      title: (0, _languageHandler._t)('Submit debug logs'),
      contentId: "mx_Dialog_content"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_Dialog_content",
      id: "mx_Dialog_content"
    }, warning, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Debug logs contain application usage data including your " + "username, the IDs or aliases of the rooms or groups you " + "have visited, which UI elements you last interacted with, " + "and the usernames of other users. They do not contain messages.")), /*#__PURE__*/_react.default.createElement("p", null, /*#__PURE__*/_react.default.createElement("b", null, (0, _languageHandler._t)("Before submitting logs, you must <a>create a GitHub issue</a> to describe your problem.", {}, {
      a: sub => /*#__PURE__*/_react.default.createElement("a", {
        target: "_blank",
        href: "https://github.com/vector-im/element-web/issues/new/choose"
      }, sub)
    }))), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_BugReportDialog_download"
    }, /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      onClick: this.onDownload,
      kind: "link",
      disabled: this.state.downloadBusy
    }, (0, _languageHandler._t)("Download logs")), this.state.downloadProgress && /*#__PURE__*/_react.default.createElement("span", null, this.state.downloadProgress, " ...")), /*#__PURE__*/_react.default.createElement(_Field.default, {
      type: "text",
      className: "mx_BugReportDialog_field_input",
      label: (0, _languageHandler._t)("GitHub issue"),
      onChange: this.onIssueUrlChange,
      value: this.state.issueUrl,
      placeholder: "https://github.com/vector-im/element-web/issues/..."
    }), /*#__PURE__*/_react.default.createElement(_Field.default, {
      className: "mx_BugReportDialog_field_input",
      element: "textarea",
      label: (0, _languageHandler._t)("Notes"),
      rows: 5,
      onChange: this.onTextChange,
      value: this.state.text,
      placeholder: (0, _languageHandler._t)("If there is additional context that would help in " + "analysing the issue, such as what you were doing at " + "the time, room IDs, user IDs, etc., " + "please include those things here.")
    }), progress, error), /*#__PURE__*/_react.default.createElement(_DialogButtons.default, {
      primaryButton: (0, _languageHandler._t)("Send logs"),
      onPrimaryButtonClick: this.onSubmit,
      focus: true,
      onCancel: this.onCancel,
      disabled: this.state.busy
    }));
  }

}) || _class);
exports.default = BugReportDialog;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,