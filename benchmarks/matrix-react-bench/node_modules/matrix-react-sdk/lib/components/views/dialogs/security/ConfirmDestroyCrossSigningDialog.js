"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _languageHandler = require("../../../../languageHandler");

var _replaceableComponent = require("../../../../utils/replaceableComponent");

var _BaseDialog = _interopRequireDefault(require("../BaseDialog"));

var _DialogButtons = _interopRequireDefault(require("../../elements/DialogButtons"));

var _dec, _class;

let ConfirmDestroyCrossSigningDialog = (_dec = (0, _replaceableComponent.replaceableComponent)("views.dialogs.security.ConfirmDestroyCrossSigningDialog"), _dec(_class = class ConfirmDestroyCrossSigningDialog extends _react.default.Component {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "onConfirm", () => {
      this.props.onFinished(true);
    });
    (0, _defineProperty2.default)(this, "onDecline", () => {
      this.props.onFinished(false);
    });
  }

  render() {
    return /*#__PURE__*/_react.default.createElement(_BaseDialog.default, {
      className: "mx_ConfirmDestroyCrossSigningDialog",
      hasCancel: true,
      onFinished: this.props.onFinished,
      title: (0, _languageHandler._t)("Destroy cross-signing keys?")
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_ConfirmDestroyCrossSigningDialog_content"
    }, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Deleting cross-signing keys is permanent. " + "Anyone you have verified with will see security alerts. " + "You almost certainly don't want to do this, unless " + "you've lost every device you can cross-sign from."))), /*#__PURE__*/_react.default.createElement(_DialogButtons.default, {
      primaryButton: (0, _languageHandler._t)("Clear cross-signing keys"),
      onPrimaryButtonClick: this.onConfirm,
      primaryButtonClass: "danger",
      cancelButton: (0, _languageHandler._t)("Cancel"),
      onCancel: this.onDecline
    }));
  }

}) || _class);
exports.default = ConfirmDestroyCrossSigningDialog;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL2RpYWxvZ3Mvc2VjdXJpdHkvQ29uZmlybURlc3Ryb3lDcm9zc1NpZ25pbmdEaWFsb2cudHN4Il0sIm5hbWVzIjpbIkNvbmZpcm1EZXN0cm95Q3Jvc3NTaWduaW5nRGlhbG9nIiwiUmVhY3QiLCJDb21wb25lbnQiLCJwcm9wcyIsIm9uRmluaXNoZWQiLCJyZW5kZXIiLCJvbkNvbmZpcm0iLCJvbkRlY2xpbmUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBZ0JBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOzs7O0lBT3FCQSxnQyxXQURwQixnREFBcUIseURBQXJCLEMsZ0JBQUQsTUFDcUJBLGdDQURyQixTQUM4REMsZUFBTUMsU0FEcEUsQ0FDc0Y7QUFBQTtBQUFBO0FBQUEscURBQzlELE1BQVk7QUFDNUIsV0FBS0MsS0FBTCxDQUFXQyxVQUFYLENBQXNCLElBQXRCO0FBQ0gsS0FIaUY7QUFBQSxxREFLOUQsTUFBWTtBQUM1QixXQUFLRCxLQUFMLENBQVdDLFVBQVgsQ0FBc0IsS0FBdEI7QUFDSCxLQVBpRjtBQUFBOztBQVNsRkMsRUFBQUEsTUFBTSxHQUFHO0FBQ0wsd0JBQ0ksNkJBQUMsbUJBQUQ7QUFDSSxNQUFBLFNBQVMsRUFBQyxxQ0FEZDtBQUVJLE1BQUEsU0FBUyxFQUFFLElBRmY7QUFHSSxNQUFBLFVBQVUsRUFBRSxLQUFLRixLQUFMLENBQVdDLFVBSDNCO0FBSUksTUFBQSxLQUFLLEVBQUUseUJBQUcsNkJBQUg7QUFKWCxvQkFNSTtBQUFLLE1BQUEsU0FBUyxFQUFDO0FBQWYsb0JBQ0ksd0NBQ00seUJBQ0UsK0NBQ0EsMERBREEsR0FFQSxxREFGQSxHQUdBLG1EQUpGLENBRE4sQ0FESixDQU5KLGVBZ0JJLDZCQUFDLHNCQUFEO0FBQ0ksTUFBQSxhQUFhLEVBQUUseUJBQUcsMEJBQUgsQ0FEbkI7QUFFSSxNQUFBLG9CQUFvQixFQUFFLEtBQUtFLFNBRi9CO0FBR0ksTUFBQSxrQkFBa0IsRUFBQyxRQUh2QjtBQUlJLE1BQUEsWUFBWSxFQUFFLHlCQUFHLFFBQUgsQ0FKbEI7QUFLSSxNQUFBLFFBQVEsRUFBRSxLQUFLQztBQUxuQixNQWhCSixDQURKO0FBMEJIOztBQXBDaUYsQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5Db3B5cmlnaHQgMjAyMCBUaGUgTWF0cml4Lm9yZyBGb3VuZGF0aW9uIEMuSS5DLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBfdCB9IGZyb20gXCIuLi8uLi8uLi8uLi9sYW5ndWFnZUhhbmRsZXJcIjtcbmltcG9ydCB7IHJlcGxhY2VhYmxlQ29tcG9uZW50IH0gZnJvbSBcIi4uLy4uLy4uLy4uL3V0aWxzL3JlcGxhY2VhYmxlQ29tcG9uZW50XCI7XG5pbXBvcnQgQmFzZURpYWxvZyBmcm9tIFwiLi4vQmFzZURpYWxvZ1wiO1xuaW1wb3J0IERpYWxvZ0J1dHRvbnMgZnJvbSBcIi4uLy4uL2VsZW1lbnRzL0RpYWxvZ0J1dHRvbnNcIjtcblxuaW50ZXJmYWNlIElQcm9wcyB7XG4gICAgb25GaW5pc2hlZDogKHN1Y2Nlc3M6IGJvb2xlYW4pID0+IHZvaWQ7XG59XG5cbkByZXBsYWNlYWJsZUNvbXBvbmVudChcInZpZXdzLmRpYWxvZ3Muc2VjdXJpdHkuQ29uZmlybURlc3Ryb3lDcm9zc1NpZ25pbmdEaWFsb2dcIilcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbmZpcm1EZXN0cm95Q3Jvc3NTaWduaW5nRGlhbG9nIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PElQcm9wcz4ge1xuICAgIHByaXZhdGUgb25Db25maXJtID0gKCk6IHZvaWQgPT4ge1xuICAgICAgICB0aGlzLnByb3BzLm9uRmluaXNoZWQodHJ1ZSk7XG4gICAgfTtcblxuICAgIHByaXZhdGUgb25EZWNsaW5lID0gKCk6IHZvaWQgPT4ge1xuICAgICAgICB0aGlzLnByb3BzLm9uRmluaXNoZWQoZmFsc2UpO1xuICAgIH07XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8QmFzZURpYWxvZ1xuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT0nbXhfQ29uZmlybURlc3Ryb3lDcm9zc1NpZ25pbmdEaWFsb2cnXG4gICAgICAgICAgICAgICAgaGFzQ2FuY2VsPXt0cnVlfVxuICAgICAgICAgICAgICAgIG9uRmluaXNoZWQ9e3RoaXMucHJvcHMub25GaW5pc2hlZH1cbiAgICAgICAgICAgICAgICB0aXRsZT17X3QoXCJEZXN0cm95IGNyb3NzLXNpZ25pbmcga2V5cz9cIil9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J214X0NvbmZpcm1EZXN0cm95Q3Jvc3NTaWduaW5nRGlhbG9nX2NvbnRlbnQnPlxuICAgICAgICAgICAgICAgICAgICA8cD5cbiAgICAgICAgICAgICAgICAgICAgICAgIHsgX3QoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJEZWxldGluZyBjcm9zcy1zaWduaW5nIGtleXMgaXMgcGVybWFuZW50LiBcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJBbnlvbmUgeW91IGhhdmUgdmVyaWZpZWQgd2l0aCB3aWxsIHNlZSBzZWN1cml0eSBhbGVydHMuIFwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIllvdSBhbG1vc3QgY2VydGFpbmx5IGRvbid0IHdhbnQgdG8gZG8gdGhpcywgdW5sZXNzIFwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInlvdSd2ZSBsb3N0IGV2ZXJ5IGRldmljZSB5b3UgY2FuIGNyb3NzLXNpZ24gZnJvbS5cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICkgfVxuICAgICAgICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPERpYWxvZ0J1dHRvbnNcbiAgICAgICAgICAgICAgICAgICAgcHJpbWFyeUJ1dHRvbj17X3QoXCJDbGVhciBjcm9zcy1zaWduaW5nIGtleXNcIil9XG4gICAgICAgICAgICAgICAgICAgIG9uUHJpbWFyeUJ1dHRvbkNsaWNrPXt0aGlzLm9uQ29uZmlybX1cbiAgICAgICAgICAgICAgICAgICAgcHJpbWFyeUJ1dHRvbkNsYXNzPVwiZGFuZ2VyXCJcbiAgICAgICAgICAgICAgICAgICAgY2FuY2VsQnV0dG9uPXtfdChcIkNhbmNlbFwiKX1cbiAgICAgICAgICAgICAgICAgICAgb25DYW5jZWw9e3RoaXMub25EZWNsaW5lfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L0Jhc2VEaWFsb2c+XG4gICAgICAgICk7XG4gICAgfVxufVxuIl19