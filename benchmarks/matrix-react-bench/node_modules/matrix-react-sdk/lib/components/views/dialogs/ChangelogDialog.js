"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _browserRequest = _interopRequireDefault(require("browser-request"));

var _languageHandler = require("../../../languageHandler");

var _QuestionDialog = _interopRequireDefault(require("./QuestionDialog"));

var _Spinner = _interopRequireDefault(require("../elements/Spinner"));

/*
 Copyright 2016 Aviral Dasgupta
Copyright 2019 Michael Telatynski <7t3chguy@gmail.com>

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
const REPOS = ['vector-im/element-web', 'matrix-org/matrix-react-sdk', 'matrix-org/matrix-js-sdk'];

class ChangelogDialog extends _react.default.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  componentDidMount() {
    const version = this.props.newVersion.split('-');
    const version2 = this.props.version.split('-');
    if (version == null || version2 == null) return; // parse versions of form: [vectorversion]-react-[react-sdk-version]-js-[js-sdk-version]

    for (let i = 0; i < REPOS.length; i++) {
      const oldVersion = version2[2 * i];
      const newVersion = version[2 * i];
      const url = `https://riot.im/github/repos/${REPOS[i]}/compare/${oldVersion}...${newVersion}`;
      (0, _browserRequest.default)(url, (err, response, body) => {
        if (response.statusCode < 200 || response.statusCode >= 300) {
          this.setState({
            [REPOS[i]]: response.statusText
          });
          return;
        }

        this.setState({
          [REPOS[i]]: JSON.parse(body).commits
        });
      });
    }
  }

  elementsForCommit(commit) {
    return /*#__PURE__*/_react.default.createElement("li", {
      key: commit.sha,
      className: "mx_ChangelogDialog_li"
    }, /*#__PURE__*/_react.default.createElement("a", {
      href: commit.html_url,
      target: "_blank",
      rel: "noreferrer noopener"
    }, commit.commit.message.split('\n')[0]));
  }

  render() {
    const logs = REPOS.map(repo => {
      let content;

      if (this.state[repo] == null) {
        content = /*#__PURE__*/_react.default.createElement(_Spinner.default, {
          key: repo
        });
      } else if (typeof this.state[repo] === "string") {
        content = (0, _languageHandler._t)("Unable to load commit detail: %(msg)s", {
          msg: this.state[repo]
        });
      } else {
        content = this.state[repo].map(this.elementsForCommit);
      }

      return /*#__PURE__*/_react.default.createElement("div", {
        key: repo
      }, /*#__PURE__*/_react.default.createElement("h2", null, repo), /*#__PURE__*/_react.default.createElement("ul", null, content));
    });

    const content = /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_ChangelogDialog_content"
    }, this.props.version == null || this.props.newVersion == null ? /*#__PURE__*/_react.default.createElement("h2", null, (0, _languageHandler._t)("Unavailable")) : logs);

    return /*#__PURE__*/_react.default.createElement(_QuestionDialog.default, {
      title: (0, _languageHandler._t)("Changelog"),
      description: content,
      button: (0, _languageHandler._t)("Update"),
      onFinished: this.props.onFinished
    });
  }

}

exports.default = ChangelogDialog;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,