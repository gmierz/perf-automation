"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _ConfirmUserActionDialog = _interopRequireDefault(require("./ConfirmUserActionDialog"));

var _SpaceStore = _interopRequireDefault(require("../../../stores/spaces/SpaceStore"));

var _SpaceChildrenPicker = _interopRequireDefault(require("../spaces/SpaceChildrenPicker"));

const _excluded = ["space", "spaceChildFilter", "allLabel", "specificLabel", "noneLabel", "warningMessage", "onFinished"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const ConfirmSpaceUserActionDialog = _ref => {
  let {
    space,
    spaceChildFilter,
    allLabel,
    specificLabel,
    noneLabel,
    warningMessage,
    onFinished
  } = _ref,
      props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  const spaceChildren = (0, _react.useMemo)(() => {
    const children = _SpaceStore.default.instance.getChildren(space.roomId);

    if (spaceChildFilter) {
      return children.filter(spaceChildFilter);
    }

    return children;
  }, [space.roomId, spaceChildFilter]);
  const [roomsToLeave, setRoomsToLeave] = (0, _react.useState)([]);
  const selectedRooms = (0, _react.useMemo)(() => new Set(roomsToLeave), [roomsToLeave]);
  let warning;

  if (warningMessage) {
    warning = /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_ConfirmSpaceUserActionDialog_warning"
    }, warningMessage);
  }

  return /*#__PURE__*/_react.default.createElement(_ConfirmUserActionDialog.default, (0, _extends2.default)({}, props, {
    onFinished: (success, reason) => {
      onFinished(success, reason, roomsToLeave);
    },
    className: "mx_ConfirmSpaceUserActionDialog"
  }), warning, /*#__PURE__*/_react.default.createElement(_SpaceChildrenPicker.default, {
    space: space,
    spaceChildren: spaceChildren,
    selected: selectedRooms,
    allLabel: allLabel,
    specificLabel: specificLabel,
    noneLabel: noneLabel,
    onChange: setRoomsToLeave
  }));
};

var _default = ConfirmSpaceUserActionDialog;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL2RpYWxvZ3MvQ29uZmlybVNwYWNlVXNlckFjdGlvbkRpYWxvZy50c3giXSwibmFtZXMiOlsiQ29uZmlybVNwYWNlVXNlckFjdGlvbkRpYWxvZyIsInNwYWNlIiwic3BhY2VDaGlsZEZpbHRlciIsImFsbExhYmVsIiwic3BlY2lmaWNMYWJlbCIsIm5vbmVMYWJlbCIsIndhcm5pbmdNZXNzYWdlIiwib25GaW5pc2hlZCIsInByb3BzIiwic3BhY2VDaGlsZHJlbiIsImNoaWxkcmVuIiwiU3BhY2VTdG9yZSIsImluc3RhbmNlIiwiZ2V0Q2hpbGRyZW4iLCJyb29tSWQiLCJmaWx0ZXIiLCJyb29tc1RvTGVhdmUiLCJzZXRSb29tc1RvTGVhdmUiLCJzZWxlY3RlZFJvb21zIiwiU2V0Iiwid2FybmluZyIsInN1Y2Nlc3MiLCJyZWFzb24iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFnQkE7O0FBRUE7O0FBQ0E7O0FBRUE7Ozs7Ozs7O0FBYUEsTUFBTUEsNEJBQThDLEdBQUcsUUFTakQ7QUFBQSxNQVRrRDtBQUNwREMsSUFBQUEsS0FEb0Q7QUFFcERDLElBQUFBLGdCQUZvRDtBQUdwREMsSUFBQUEsUUFIb0Q7QUFJcERDLElBQUFBLGFBSm9EO0FBS3BEQyxJQUFBQSxTQUxvRDtBQU1wREMsSUFBQUEsY0FOb0Q7QUFPcERDLElBQUFBO0FBUG9ELEdBU2xEO0FBQUEsTUFEQ0MsS0FDRDtBQUNGLFFBQU1DLGFBQWEsR0FBRyxvQkFBUSxNQUFNO0FBQ2hDLFVBQU1DLFFBQVEsR0FBR0Msb0JBQVdDLFFBQVgsQ0FBb0JDLFdBQXBCLENBQWdDWixLQUFLLENBQUNhLE1BQXRDLENBQWpCOztBQUNBLFFBQUlaLGdCQUFKLEVBQXNCO0FBQ2xCLGFBQU9RLFFBQVEsQ0FBQ0ssTUFBVCxDQUFnQmIsZ0JBQWhCLENBQVA7QUFDSDs7QUFDRCxXQUFPUSxRQUFQO0FBQ0gsR0FOcUIsRUFNbkIsQ0FBQ1QsS0FBSyxDQUFDYSxNQUFQLEVBQWVaLGdCQUFmLENBTm1CLENBQXRCO0FBUUEsUUFBTSxDQUFDYyxZQUFELEVBQWVDLGVBQWYsSUFBa0MscUJBQWlCLEVBQWpCLENBQXhDO0FBQ0EsUUFBTUMsYUFBYSxHQUFHLG9CQUFRLE1BQU0sSUFBSUMsR0FBSixDQUFRSCxZQUFSLENBQWQsRUFBcUMsQ0FBQ0EsWUFBRCxDQUFyQyxDQUF0QjtBQUVBLE1BQUlJLE9BQUo7O0FBQ0EsTUFBSWQsY0FBSixFQUFvQjtBQUNoQmMsSUFBQUEsT0FBTyxnQkFBRztBQUFLLE1BQUEsU0FBUyxFQUFDO0FBQWYsT0FDSmQsY0FESSxDQUFWO0FBR0g7O0FBRUQsc0JBQ0ksNkJBQUMsZ0NBQUQsNkJBQ1FFLEtBRFI7QUFFSSxJQUFBLFVBQVUsRUFBRSxDQUFDYSxPQUFELEVBQW1CQyxNQUFuQixLQUF1QztBQUMvQ2YsTUFBQUEsVUFBVSxDQUFDYyxPQUFELEVBQVVDLE1BQVYsRUFBa0JOLFlBQWxCLENBQVY7QUFDSCxLQUpMO0FBS0ksSUFBQSxTQUFTLEVBQUM7QUFMZCxNQU9NSSxPQVBOLGVBUUksNkJBQUMsNEJBQUQ7QUFDSSxJQUFBLEtBQUssRUFBRW5CLEtBRFg7QUFFSSxJQUFBLGFBQWEsRUFBRVEsYUFGbkI7QUFHSSxJQUFBLFFBQVEsRUFBRVMsYUFIZDtBQUlJLElBQUEsUUFBUSxFQUFFZixRQUpkO0FBS0ksSUFBQSxhQUFhLEVBQUVDLGFBTG5CO0FBTUksSUFBQSxTQUFTLEVBQUVDLFNBTmY7QUFPSSxJQUFBLFFBQVEsRUFBRVk7QUFQZCxJQVJKLENBREo7QUFvQkgsQ0FoREQ7O2VBa0RlakIsNEIiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuQ29weXJpZ2h0IDIwMjEgVGhlIE1hdHJpeC5vcmcgRm91bmRhdGlvbiBDLkkuQy5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50UHJvcHMsIHVzZU1lbW8sIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgQ29uZmlybVVzZXJBY3Rpb25EaWFsb2cgZnJvbSBcIi4vQ29uZmlybVVzZXJBY3Rpb25EaWFsb2dcIjtcbmltcG9ydCBTcGFjZVN0b3JlIGZyb20gXCIuLi8uLi8uLi9zdG9yZXMvc3BhY2VzL1NwYWNlU3RvcmVcIjtcbmltcG9ydCB7IFJvb20gfSBmcm9tIFwibWF0cml4LWpzLXNkay9zcmMvbW9kZWxzL3Jvb21cIjtcbmltcG9ydCBTcGFjZUNoaWxkcmVuUGlja2VyIGZyb20gXCIuLi9zcGFjZXMvU3BhY2VDaGlsZHJlblBpY2tlclwiO1xuXG50eXBlIEJhc2VQcm9wcyA9IENvbXBvbmVudFByb3BzPHR5cGVvZiBDb25maXJtVXNlckFjdGlvbkRpYWxvZz47XG5pbnRlcmZhY2UgSVByb3BzIGV4dGVuZHMgT21pdDxCYXNlUHJvcHMsIFwiZ3JvdXBNZW1iZXJcIiB8IFwibWF0cml4Q2xpZW50XCIgfCBcImNoaWxkcmVuXCIgfCBcIm9uRmluaXNoZWRcIj4ge1xuICAgIHNwYWNlOiBSb29tO1xuICAgIGFsbExhYmVsOiBzdHJpbmc7XG4gICAgc3BlY2lmaWNMYWJlbDogc3RyaW5nO1xuICAgIG5vbmVMYWJlbD86IHN0cmluZztcbiAgICB3YXJuaW5nTWVzc2FnZT86IHN0cmluZztcbiAgICBvbkZpbmlzaGVkKHN1Y2Nlc3M6IGJvb2xlYW4sIHJlYXNvbj86IHN0cmluZywgcm9vbXM/OiBSb29tW10pOiB2b2lkO1xuICAgIHNwYWNlQ2hpbGRGaWx0ZXI/KGNoaWxkOiBSb29tKTogYm9vbGVhbjtcbn1cblxuY29uc3QgQ29uZmlybVNwYWNlVXNlckFjdGlvbkRpYWxvZzogUmVhY3QuRkM8SVByb3BzPiA9ICh7XG4gICAgc3BhY2UsXG4gICAgc3BhY2VDaGlsZEZpbHRlcixcbiAgICBhbGxMYWJlbCxcbiAgICBzcGVjaWZpY0xhYmVsLFxuICAgIG5vbmVMYWJlbCxcbiAgICB3YXJuaW5nTWVzc2FnZSxcbiAgICBvbkZpbmlzaGVkLFxuICAgIC4uLnByb3BzXG59KSA9PiB7XG4gICAgY29uc3Qgc3BhY2VDaGlsZHJlbiA9IHVzZU1lbW8oKCkgPT4ge1xuICAgICAgICBjb25zdCBjaGlsZHJlbiA9IFNwYWNlU3RvcmUuaW5zdGFuY2UuZ2V0Q2hpbGRyZW4oc3BhY2Uucm9vbUlkKTtcbiAgICAgICAgaWYgKHNwYWNlQ2hpbGRGaWx0ZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBjaGlsZHJlbi5maWx0ZXIoc3BhY2VDaGlsZEZpbHRlcik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNoaWxkcmVuO1xuICAgIH0sIFtzcGFjZS5yb29tSWQsIHNwYWNlQ2hpbGRGaWx0ZXJdKTtcblxuICAgIGNvbnN0IFtyb29tc1RvTGVhdmUsIHNldFJvb21zVG9MZWF2ZV0gPSB1c2VTdGF0ZTxSb29tW10+KFtdKTtcbiAgICBjb25zdCBzZWxlY3RlZFJvb21zID0gdXNlTWVtbygoKSA9PiBuZXcgU2V0KHJvb21zVG9MZWF2ZSksIFtyb29tc1RvTGVhdmVdKTtcblxuICAgIGxldCB3YXJuaW5nOiBKU1guRWxlbWVudDtcbiAgICBpZiAod2FybmluZ01lc3NhZ2UpIHtcbiAgICAgICAgd2FybmluZyA9IDxkaXYgY2xhc3NOYW1lPVwibXhfQ29uZmlybVNwYWNlVXNlckFjdGlvbkRpYWxvZ193YXJuaW5nXCI+XG4gICAgICAgICAgICB7IHdhcm5pbmdNZXNzYWdlIH1cbiAgICAgICAgPC9kaXY+O1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICAgIDxDb25maXJtVXNlckFjdGlvbkRpYWxvZ1xuICAgICAgICAgICAgey4uLnByb3BzfVxuICAgICAgICAgICAgb25GaW5pc2hlZD17KHN1Y2Nlc3M6IGJvb2xlYW4sIHJlYXNvbj86IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgICAgIG9uRmluaXNoZWQoc3VjY2VzcywgcmVhc29uLCByb29tc1RvTGVhdmUpO1xuICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIGNsYXNzTmFtZT1cIm14X0NvbmZpcm1TcGFjZVVzZXJBY3Rpb25EaWFsb2dcIlxuICAgICAgICA+XG4gICAgICAgICAgICB7IHdhcm5pbmcgfVxuICAgICAgICAgICAgPFNwYWNlQ2hpbGRyZW5QaWNrZXJcbiAgICAgICAgICAgICAgICBzcGFjZT17c3BhY2V9XG4gICAgICAgICAgICAgICAgc3BhY2VDaGlsZHJlbj17c3BhY2VDaGlsZHJlbn1cbiAgICAgICAgICAgICAgICBzZWxlY3RlZD17c2VsZWN0ZWRSb29tc31cbiAgICAgICAgICAgICAgICBhbGxMYWJlbD17YWxsTGFiZWx9XG4gICAgICAgICAgICAgICAgc3BlY2lmaWNMYWJlbD17c3BlY2lmaWNMYWJlbH1cbiAgICAgICAgICAgICAgICBub25lTGFiZWw9e25vbmVMYWJlbH1cbiAgICAgICAgICAgICAgICBvbkNoYW5nZT17c2V0Um9vbXNUb0xlYXZlfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgPC9Db25maXJtVXNlckFjdGlvbkRpYWxvZz5cbiAgICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgQ29uZmlybVNwYWNlVXNlckFjdGlvbkRpYWxvZztcbiJdfQ==