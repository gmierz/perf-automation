"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _lodash = require("lodash");

var _classnames = _interopRequireDefault(require("classnames"));

var _react = _interopRequireDefault(require("react"));

var sdk = _interopRequireWildcard(require("../../../../index"));

var _MatrixClientPeg = require("../../../../MatrixClientPeg");

var _Field = _interopRequireDefault(require("../../elements/Field"));

var _AccessibleButton = _interopRequireDefault(require("../../elements/AccessibleButton"));

var _languageHandler = require("../../../../languageHandler");

var _SecurityManager = require("../../../../SecurityManager");

var _Modal = _interopRequireDefault(require("../../../../Modal"));

var _logger = require("matrix-js-sdk/src/logger");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
Copyright 2018-2021 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Maximum acceptable size of a key file. It's 59 characters including the spaces we encode,
// so this should be plenty and allow for people putting extra whitespace in the file because
// maybe that's a thing people would do?
const KEY_FILE_MAX_SIZE = 128; // Don't shout at the user that their key is invalid every time they type a key: wait a short time

const VALIDATION_THROTTLE_MS = 200;

/*
 * Access Secure Secret Storage by requesting the user's passphrase.
 */
class AccessSecretStorageDialog extends _react.default.PureComponent {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "fileUpload", /*#__PURE__*/_react.default.createRef());
    (0, _defineProperty2.default)(this, "onCancel", () => {
      if (this.state.resetting) {
        this.setState({
          resetting: false
        });
      }

      this.props.onFinished(false);
    });
    (0, _defineProperty2.default)(this, "onUseRecoveryKeyClick", () => {
      this.setState({
        forceRecoveryKey: true
      });
    });
    (0, _defineProperty2.default)(this, "validateRecoveryKeyOnChange", (0, _lodash.debounce)(async () => {
      await this.validateRecoveryKey();
    }, VALIDATION_THROTTLE_MS));
    (0, _defineProperty2.default)(this, "onRecoveryKeyChange", ev => {
      this.setState({
        recoveryKey: ev.target.value,
        recoveryKeyFileError: null
      }); // also clear the file upload control so that the user can upload the same file
      // the did before (otherwise the onchange wouldn't fire)

      if (this.fileUpload.current) this.fileUpload.current.value = null; // We don't use Field's validation here because a) we want it in a separate place rather
      // than in a tooltip and b) we want it to display feedback based on the uploaded file
      // as well as the text box. Ideally we would refactor Field's validation logic so we could
      // re-use some of it.

      this.validateRecoveryKeyOnChange();
    });
    (0, _defineProperty2.default)(this, "onRecoveryKeyFileChange", async ev => {
      if (ev.target.files.length === 0) return;
      const f = ev.target.files[0];

      if (f.size > KEY_FILE_MAX_SIZE) {
        this.setState({
          recoveryKeyFileError: true,
          recoveryKeyCorrect: false,
          recoveryKeyValid: false
        });
      } else {
        const contents = await f.text(); // test it's within the base58 alphabet. We could be more strict here, eg. require the
        // right number of characters, but it's really just to make sure that what we're reading is
        // text because we'll put it in the text field.

        if (/^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\s]+$/.test(contents)) {
          this.setState({
            recoveryKeyFileError: null,
            recoveryKey: contents.trim()
          });
          await this.validateRecoveryKey();
        } else {
          this.setState({
            recoveryKeyFileError: true,
            recoveryKeyCorrect: false,
            recoveryKeyValid: false,
            recoveryKey: ''
          });
        }
      }
    });
    (0, _defineProperty2.default)(this, "onRecoveryKeyFileUploadClick", () => {
      this.fileUpload.current.click();
    });
    (0, _defineProperty2.default)(this, "onPassPhraseNext", async ev => {
      ev.preventDefault();
      if (this.state.passPhrase.length <= 0) return;
      this.setState({
        keyMatches: null
      });
      const input = {
        passphrase: this.state.passPhrase
      };
      const keyMatches = await this.props.checkPrivateKey(input);

      if (keyMatches) {
        this.props.onFinished(input);
      } else {
        this.setState({
          keyMatches
        });
      }
    });
    (0, _defineProperty2.default)(this, "onRecoveryKeyNext", async ev => {
      ev.preventDefault();
      if (!this.state.recoveryKeyValid) return;
      this.setState({
        keyMatches: null
      });
      const input = {
        recoveryKey: this.state.recoveryKey
      };
      const keyMatches = await this.props.checkPrivateKey(input);

      if (keyMatches) {
        this.props.onFinished(input);
      } else {
        this.setState({
          keyMatches
        });
      }
    });
    (0, _defineProperty2.default)(this, "onPassPhraseChange", ev => {
      this.setState({
        passPhrase: ev.target.value,
        keyMatches: null
      });
    });
    (0, _defineProperty2.default)(this, "onResetAllClick", ev => {
      ev.preventDefault();
      this.setState({
        resetting: true
      });
    });
    (0, _defineProperty2.default)(this, "onConfirmResetAllClick", async () => {
      // Hide ourselves so the user can interact with the reset dialogs.
      // We don't conclude the promise chain (onFinished) yet to avoid confusing
      // any upstream code flows.
      //
      // Note: this will unmount us, so don't call `setState` or anything in the
      // rest of this function.
      _Modal.default.toggleCurrentDialogVisibility();

      try {
        // Force reset secret storage (which resets the key backup)
        await (0, _SecurityManager.accessSecretStorage)(async () => {
          // Now reset cross-signing so everything Just Worksâ„¢ again.
          const cli = _MatrixClientPeg.MatrixClientPeg.get();

          await cli.bootstrapCrossSigning({
            authUploadDeviceSigningKeys: async makeRequest => {
              // XXX: Making this an import breaks the app.
              const InteractiveAuthDialog = sdk.getComponent("views.dialogs.InteractiveAuthDialog");

              const {
                finished
              } = _Modal.default.createTrackedDialog('Cross-signing keys dialog', '', InteractiveAuthDialog, {
                title: (0, _languageHandler._t)("Setting up keys"),
                matrixClient: cli,
                makeRequest
              });

              const [confirmed] = await finished;

              if (!confirmed) {
                throw new Error("Cross-signing key upload auth canceled");
              }
            },
            setupNewCrossSigning: true
          }); // Now we can indicate that the user is done pressing buttons, finally.
          // Upstream flows will detect the new secret storage, key backup, etc and use it.

          this.props.onFinished(true);
        }, true);
      } catch (e) {
        _logger.logger.error(e);

        this.props.onFinished(false);
      }
    });
    this.state = {
      recoveryKey: "",
      recoveryKeyValid: null,
      recoveryKeyCorrect: null,
      recoveryKeyFileError: null,
      forceRecoveryKey: false,
      passPhrase: '',
      keyMatches: null,
      resetting: false
    };
  }

  async validateRecoveryKey() {
    if (this.state.recoveryKey === '') {
      this.setState({
        recoveryKeyValid: null,
        recoveryKeyCorrect: null
      });
      return;
    }

    try {
      const cli = _MatrixClientPeg.MatrixClientPeg.get();

      const decodedKey = cli.keyBackupKeyFromRecoveryKey(this.state.recoveryKey);
      const correct = await cli.checkSecretStorageKey(decodedKey, this.props.keyInfo);
      this.setState({
        recoveryKeyValid: true,
        recoveryKeyCorrect: correct
      });
    } catch (e) {
      this.setState({
        recoveryKeyValid: false,
        recoveryKeyCorrect: false
      });
    }
  }

  getKeyValidationText() {
    if (this.state.recoveryKeyFileError) {
      return (0, _languageHandler._t)("Wrong file type");
    } else if (this.state.recoveryKeyCorrect) {
      return (0, _languageHandler._t)("Looks good!");
    } else if (this.state.recoveryKeyValid) {
      return (0, _languageHandler._t)("Wrong Security Key");
    } else if (this.state.recoveryKeyValid === null) {
      return '';
    } else {
      return (0, _languageHandler._t)("Invalid Security Key");
    }
  }

  render() {
    // Caution: Making these an import will break tests.
    const BaseDialog = sdk.getComponent("views.dialogs.BaseDialog");
    const DialogButtons = sdk.getComponent("views.elements.DialogButtons");
    const hasPassphrase = this.props.keyInfo && this.props.keyInfo.passphrase && this.props.keyInfo.passphrase.salt && this.props.keyInfo.passphrase.iterations;

    const resetButton = /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_AccessSecretStorageDialog_reset"
    }, (0, _languageHandler._t)("Forgotten or lost all recovery methods? <a>Reset all</a>", null, {
      a: sub => /*#__PURE__*/_react.default.createElement("a", {
        href: "",
        onClick: this.onResetAllClick,
        className: "mx_AccessSecretStorageDialog_reset_link"
      }, sub)
    }));

    let content;
    let title;
    let titleClass;

    if (this.state.resetting) {
      title = (0, _languageHandler._t)("Reset everything");
      titleClass = ['mx_AccessSecretStorageDialog_titleWithIcon mx_AccessSecretStorageDialog_resetBadge'];
      content = /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Only do this if you have no other device to complete verification with.")), /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("If you reset everything, you will restart with no trusted sessions, no trusted users, and " + "might not be able to see past messages.")), /*#__PURE__*/_react.default.createElement(DialogButtons, {
        primaryButton: (0, _languageHandler._t)('Reset'),
        onPrimaryButtonClick: this.onConfirmResetAllClick,
        hasCancel: true,
        onCancel: this.onCancel,
        focus: false,
        primaryButtonClass: "danger"
      }));
    } else if (hasPassphrase && !this.state.forceRecoveryKey) {
      const AccessibleButton = sdk.getComponent('elements.AccessibleButton');
      title = (0, _languageHandler._t)("Security Phrase");
      titleClass = ['mx_AccessSecretStorageDialog_titleWithIcon mx_AccessSecretStorageDialog_securePhraseTitle'];
      let keyStatus;

      if (this.state.keyMatches === false) {
        keyStatus = /*#__PURE__*/_react.default.createElement("div", {
          className: "mx_AccessSecretStorageDialog_keyStatus"
        }, "\uD83D\uDC4E ", (0, _languageHandler._t)("Unable to access secret storage. " + "Please verify that you entered the correct Security Phrase."));
      } else {
        keyStatus = /*#__PURE__*/_react.default.createElement("div", {
          className: "mx_AccessSecretStorageDialog_keyStatus"
        });
      }

      content = /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Enter your Security Phrase or <button>use your Security Key</button> to continue.", {}, {
        button: s => /*#__PURE__*/_react.default.createElement(AccessibleButton, {
          className: "mx_linkButton",
          element: "span",
          onClick: this.onUseRecoveryKeyClick
        }, s)
      })), /*#__PURE__*/_react.default.createElement("form", {
        className: "mx_AccessSecretStorageDialog_primaryContainer",
        onSubmit: this.onPassPhraseNext
      }, /*#__PURE__*/_react.default.createElement(_Field.default, {
        id: "mx_passPhraseInput",
        className: "mx_AccessSecretStorageDialog_passPhraseInput",
        type: "password",
        label: (0, _languageHandler._t)("Security Phrase"),
        value: this.state.passPhrase,
        onChange: this.onPassPhraseChange,
        autoFocus: true,
        autoComplete: "new-password"
      }), keyStatus, /*#__PURE__*/_react.default.createElement(DialogButtons, {
        primaryButton: (0, _languageHandler._t)('Continue'),
        onPrimaryButtonClick: this.onPassPhraseNext,
        hasCancel: true,
        onCancel: this.onCancel,
        focus: false,
        primaryDisabled: this.state.passPhrase.length === 0,
        additive: resetButton
      })));
    } else {
      title = (0, _languageHandler._t)("Security Key");
      titleClass = ['mx_AccessSecretStorageDialog_titleWithIcon mx_AccessSecretStorageDialog_secureBackupTitle'];
      const feedbackClasses = (0, _classnames.default)({
        'mx_AccessSecretStorageDialog_recoveryKeyFeedback': true,
        'mx_AccessSecretStorageDialog_recoveryKeyFeedback_valid': this.state.recoveryKeyCorrect === true,
        'mx_AccessSecretStorageDialog_recoveryKeyFeedback_invalid': this.state.recoveryKeyCorrect === false
      });

      const recoveryKeyFeedback = /*#__PURE__*/_react.default.createElement("div", {
        className: feedbackClasses
      }, this.getKeyValidationText());

      content = /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Use your Security Key to continue.")), /*#__PURE__*/_react.default.createElement("form", {
        className: "mx_AccessSecretStorageDialog_primaryContainer",
        onSubmit: this.onRecoveryKeyNext,
        spellCheck: false,
        autoComplete: "off"
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_AccessSecretStorageDialog_recoveryKeyEntry"
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_AccessSecretStorageDialog_recoveryKeyEntry_textInput"
      }, /*#__PURE__*/_react.default.createElement(_Field.default, {
        type: "password",
        label: (0, _languageHandler._t)('Security Key'),
        value: this.state.recoveryKey,
        onChange: this.onRecoveryKeyChange,
        forceValidity: this.state.recoveryKeyCorrect,
        autoComplete: "off"
      })), /*#__PURE__*/_react.default.createElement("span", {
        className: "mx_AccessSecretStorageDialog_recoveryKeyEntry_entryControlSeparatorText"
      }, (0, _languageHandler._t)("or")), /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("input", {
        type: "file",
        className: "mx_AccessSecretStorageDialog_recoveryKeyEntry_fileInput",
        ref: this.fileUpload,
        onChange: this.onRecoveryKeyFileChange
      }), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        kind: "primary",
        onClick: this.onRecoveryKeyFileUploadClick
      }, (0, _languageHandler._t)("Upload")))), recoveryKeyFeedback, /*#__PURE__*/_react.default.createElement(DialogButtons, {
        primaryButton: (0, _languageHandler._t)('Continue'),
        onPrimaryButtonClick: this.onRecoveryKeyNext,
        hasCancel: true,
        cancelButton: (0, _languageHandler._t)("Go Back"),
        cancelButtonClass: "danger",
        onCancel: this.onCancel,
        focus: false,
        primaryDisabled: !this.state.recoveryKeyValid,
        additive: resetButton
      })));
    }

    return /*#__PURE__*/_react.default.createElement(BaseDialog, {
      className: "mx_AccessSecretStorageDialog",
      onFinished: this.props.onFinished,
      title: title,
      titleClass: titleClass
    }, /*#__PURE__*/_react.default.createElement("div", null, content));
  }

}

exports.default = AccessSecretStorageDialog;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,