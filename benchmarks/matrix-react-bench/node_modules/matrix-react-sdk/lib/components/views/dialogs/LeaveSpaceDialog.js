"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _partials = require("matrix-js-sdk/src/@types/partials");

var _languageHandler = require("../../../languageHandler");

var _DialogButtons = _interopRequireDefault(require("../elements/DialogButtons"));

var _BaseDialog = _interopRequireDefault(require("../dialogs/BaseDialog"));

var _SpaceStore = _interopRequireDefault(require("../../../stores/spaces/SpaceStore"));

var _SpaceChildrenPicker = _interopRequireDefault(require("../spaces/SpaceChildrenPicker"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
Copyright 2021 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const isOnlyAdmin = room => {
  const userId = room.client.getUserId();

  if (room.getMember(userId).powerLevelNorm !== 100) {
    return false; // user is not an admin
  }

  return room.getJoinedMembers().every(member => {
    // return true if every other member has a lower power level (we are highest)
    return member.userId === userId || member.powerLevelNorm < 100;
  });
};

const LeaveSpaceDialog = ({
  space,
  onFinished
}) => {
  const spaceChildren = (0, _react.useMemo)(() => _SpaceStore.default.instance.getChildren(space.roomId), [space.roomId]);
  const [roomsToLeave, setRoomsToLeave] = (0, _react.useState)([]);
  const selectedRooms = (0, _react.useMemo)(() => new Set(roomsToLeave), [roomsToLeave]);
  let rejoinWarning;

  if (space.getJoinRule() !== _partials.JoinRule.Public) {
    rejoinWarning = (0, _languageHandler._t)("You won't be able to rejoin unless you are re-invited.");
  }

  let onlyAdminWarning;

  if (isOnlyAdmin(space)) {
    onlyAdminWarning = (0, _languageHandler._t)("You're the only admin of this space. " + "Leaving it will mean no one has control over it.");
  } else {
    const numChildrenOnlyAdminIn = roomsToLeave.filter(isOnlyAdmin).length;

    if (numChildrenOnlyAdminIn > 0) {
      onlyAdminWarning = (0, _languageHandler._t)("You're the only admin of some of the rooms or spaces you wish to leave. " + "Leaving them will leave them without any admins.");
    }
  }

  return /*#__PURE__*/_react.default.createElement(_BaseDialog.default, {
    title: (0, _languageHandler._t)("Leave %(spaceName)s", {
      spaceName: space.name
    }),
    className: "mx_LeaveSpaceDialog",
    contentId: "mx_LeaveSpaceDialog",
    onFinished: () => onFinished(false),
    fixedWidth: false
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_Dialog_content",
    id: "mx_LeaveSpaceDialog"
  }, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("You are about to leave <spaceName/>.", {}, {
    spaceName: () => /*#__PURE__*/_react.default.createElement("b", null, space.name)
  }), "\xA0", rejoinWarning, rejoinWarning && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, "\xA0"), spaceChildren.length > 0 && (0, _languageHandler._t)("Would you like to leave the rooms in this space?")), spaceChildren.length > 0 && /*#__PURE__*/_react.default.createElement(_SpaceChildrenPicker.default, {
    space: space,
    spaceChildren: spaceChildren,
    selected: selectedRooms,
    onChange: setRoomsToLeave,
    noneLabel: (0, _languageHandler._t)("Don't leave any rooms"),
    allLabel: (0, _languageHandler._t)("Leave all rooms"),
    specificLabel: (0, _languageHandler._t)("Leave some rooms")
  }), onlyAdminWarning && /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_LeaveSpaceDialog_section_warning"
  }, onlyAdminWarning)), /*#__PURE__*/_react.default.createElement(_DialogButtons.default, {
    primaryButton: (0, _languageHandler._t)("Leave space"),
    onPrimaryButtonClick: () => onFinished(true, roomsToLeave),
    hasCancel: true,
    onCancel: () => onFinished(false)
  }));
};

var _default = LeaveSpaceDialog;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,