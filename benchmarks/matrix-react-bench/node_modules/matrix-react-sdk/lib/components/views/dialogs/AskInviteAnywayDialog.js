"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _languageHandler = require("../../../languageHandler");

var _SettingsStore = _interopRequireDefault(require("../../../settings/SettingsStore"));

var _SettingLevel = require("../../../settings/SettingLevel");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _BaseDialog = _interopRequireDefault(require("./BaseDialog"));

var _dec, _class;

let AskInviteAnywayDialog = (_dec = (0, _replaceableComponent.replaceableComponent)("views.dialogs.AskInviteAnywayDialog"), _dec(_class = class AskInviteAnywayDialog extends _react.default.Component {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "onInviteClicked", () => {
      this.props.onInviteAnyways();
      this.props.onFinished(true);
    });
    (0, _defineProperty2.default)(this, "onInviteNeverWarnClicked", () => {
      _SettingsStore.default.setValue("promptBeforeInviteUnknownUsers", null, _SettingLevel.SettingLevel.ACCOUNT, false);

      this.props.onInviteAnyways();
      this.props.onFinished(true);
    });
    (0, _defineProperty2.default)(this, "onGiveUpClicked", () => {
      this.props.onGiveUp();
      this.props.onFinished(false);
    });
  }

  render() {
    const errorList = this.props.unknownProfileUsers.map(address => /*#__PURE__*/_react.default.createElement("li", {
      key: address.userId
    }, address.userId, ": ", address.errorText));
    return /*#__PURE__*/_react.default.createElement(_BaseDialog.default, {
      className: "mx_RetryInvitesDialog",
      onFinished: this.onGiveUpClicked,
      title: (0, _languageHandler._t)('The following users may not exist'),
      contentId: "mx_Dialog_content"
    }, /*#__PURE__*/_react.default.createElement("div", {
      id: "mx_Dialog_content"
    }, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Unable to find profiles for the Matrix IDs listed below - " + "would you like to invite them anyway?")), /*#__PURE__*/_react.default.createElement("ul", null, errorList)), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_Dialog_buttons"
    }, /*#__PURE__*/_react.default.createElement("button", {
      onClick: this.onGiveUpClicked
    }, (0, _languageHandler._t)('Close')), /*#__PURE__*/_react.default.createElement("button", {
      onClick: this.onInviteNeverWarnClicked
    }, (0, _languageHandler._t)('Invite anyway and never warn me again')), /*#__PURE__*/_react.default.createElement("button", {
      onClick: this.onInviteClicked,
      autoFocus: true
    }, (0, _languageHandler._t)('Invite anyway'))));
  }

}) || _class);
exports.default = AskInviteAnywayDialog;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL2RpYWxvZ3MvQXNrSW52aXRlQW55d2F5RGlhbG9nLnRzeCJdLCJuYW1lcyI6WyJBc2tJbnZpdGVBbnl3YXlEaWFsb2ciLCJSZWFjdCIsIkNvbXBvbmVudCIsInByb3BzIiwib25JbnZpdGVBbnl3YXlzIiwib25GaW5pc2hlZCIsIlNldHRpbmdzU3RvcmUiLCJzZXRWYWx1ZSIsIlNldHRpbmdMZXZlbCIsIkFDQ09VTlQiLCJvbkdpdmVVcCIsInJlbmRlciIsImVycm9yTGlzdCIsInVua25vd25Qcm9maWxlVXNlcnMiLCJtYXAiLCJhZGRyZXNzIiwidXNlcklkIiwiZXJyb3JUZXh0Iiwib25HaXZlVXBDbGlja2VkIiwib25JbnZpdGVOZXZlcldhcm5DbGlja2VkIiwib25JbnZpdGVDbGlja2VkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQWdCQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7OztJQWFxQkEscUIsV0FEcEIsZ0RBQXFCLHFDQUFyQixDLGdCQUFELE1BQ3FCQSxxQkFEckIsU0FDbURDLGVBQU1DLFNBRHpELENBQzJFO0FBQUE7QUFBQTtBQUFBLDJEQUM3QyxNQUFZO0FBQ2xDLFdBQUtDLEtBQUwsQ0FBV0MsZUFBWDtBQUNBLFdBQUtELEtBQUwsQ0FBV0UsVUFBWCxDQUFzQixJQUF0QjtBQUNILEtBSnNFO0FBQUEsb0VBTXBDLE1BQVk7QUFDM0NDLDZCQUFjQyxRQUFkLENBQXVCLGdDQUF2QixFQUF5RCxJQUF6RCxFQUErREMsMkJBQWFDLE9BQTVFLEVBQXFGLEtBQXJGOztBQUNBLFdBQUtOLEtBQUwsQ0FBV0MsZUFBWDtBQUNBLFdBQUtELEtBQUwsQ0FBV0UsVUFBWCxDQUFzQixJQUF0QjtBQUNILEtBVnNFO0FBQUEsMkRBWTdDLE1BQVk7QUFDbEMsV0FBS0YsS0FBTCxDQUFXTyxRQUFYO0FBQ0EsV0FBS1AsS0FBTCxDQUFXRSxVQUFYLENBQXNCLEtBQXRCO0FBQ0gsS0Fmc0U7QUFBQTs7QUFpQmhFTSxFQUFBQSxNQUFNLEdBQUc7QUFDWixVQUFNQyxTQUFTLEdBQUcsS0FBS1QsS0FBTCxDQUFXVSxtQkFBWCxDQUNiQyxHQURhLENBQ1RDLE9BQU8saUJBQUk7QUFBSSxNQUFBLEdBQUcsRUFBRUEsT0FBTyxDQUFDQztBQUFqQixPQUEyQkQsT0FBTyxDQUFDQyxNQUFuQyxRQUErQ0QsT0FBTyxDQUFDRSxTQUF2RCxDQURGLENBQWxCO0FBR0Esd0JBQ0ksNkJBQUMsbUJBQUQ7QUFBWSxNQUFBLFNBQVMsRUFBQyx1QkFBdEI7QUFDSSxNQUFBLFVBQVUsRUFBRSxLQUFLQyxlQURyQjtBQUVJLE1BQUEsS0FBSyxFQUFFLHlCQUFHLG1DQUFILENBRlg7QUFHSSxNQUFBLFNBQVMsRUFBQztBQUhkLG9CQUtJO0FBQUssTUFBQSxFQUFFLEVBQUM7QUFBUixvQkFDSSx3Q0FBSyx5QkFBRywrREFDSix1Q0FEQyxDQUFMLENBREosZUFHSSx5Q0FDTU4sU0FETixDQUhKLENBTEosZUFhSTtBQUFLLE1BQUEsU0FBUyxFQUFDO0FBQWYsb0JBQ0k7QUFBUSxNQUFBLE9BQU8sRUFBRSxLQUFLTTtBQUF0QixPQUNNLHlCQUFHLE9BQUgsQ0FETixDQURKLGVBSUk7QUFBUSxNQUFBLE9BQU8sRUFBRSxLQUFLQztBQUF0QixPQUNNLHlCQUFHLHVDQUFILENBRE4sQ0FKSixlQU9JO0FBQVEsTUFBQSxPQUFPLEVBQUUsS0FBS0MsZUFBdEI7QUFBdUMsTUFBQSxTQUFTLEVBQUU7QUFBbEQsT0FDTSx5QkFBRyxlQUFILENBRE4sQ0FQSixDQWJKLENBREo7QUEyQkg7O0FBaERzRSxDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbkNvcHlyaWdodCAyMDE5IE5ldyBWZWN0b3IgTHRkXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IF90IH0gZnJvbSAnLi4vLi4vLi4vbGFuZ3VhZ2VIYW5kbGVyJztcbmltcG9ydCBTZXR0aW5nc1N0b3JlIGZyb20gXCIuLi8uLi8uLi9zZXR0aW5ncy9TZXR0aW5nc1N0b3JlXCI7XG5pbXBvcnQgeyBTZXR0aW5nTGV2ZWwgfSBmcm9tIFwiLi4vLi4vLi4vc2V0dGluZ3MvU2V0dGluZ0xldmVsXCI7XG5pbXBvcnQgeyByZXBsYWNlYWJsZUNvbXBvbmVudCB9IGZyb20gXCIuLi8uLi8uLi91dGlscy9yZXBsYWNlYWJsZUNvbXBvbmVudFwiO1xuaW1wb3J0IEJhc2VEaWFsb2cgZnJvbSBcIi4vQmFzZURpYWxvZ1wiO1xuXG5pbnRlcmZhY2UgSVByb3BzIHtcbiAgICB1bmtub3duUHJvZmlsZVVzZXJzOiBBcnJheTx7XG4gICAgICAgIHVzZXJJZDogc3RyaW5nO1xuICAgICAgICBlcnJvclRleHQ6IHN0cmluZztcbiAgICB9PjtcbiAgICBvbkludml0ZUFueXdheXM6ICgpID0+IHZvaWQ7XG4gICAgb25HaXZlVXA6ICgpID0+IHZvaWQ7XG4gICAgb25GaW5pc2hlZDogKHN1Y2Nlc3M6IGJvb2xlYW4pID0+IHZvaWQ7XG59XG5cbkByZXBsYWNlYWJsZUNvbXBvbmVudChcInZpZXdzLmRpYWxvZ3MuQXNrSW52aXRlQW55d2F5RGlhbG9nXCIpXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBc2tJbnZpdGVBbnl3YXlEaWFsb2cgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8SVByb3BzPiB7XG4gICAgcHJpdmF0ZSBvbkludml0ZUNsaWNrZWQgPSAoKTogdm9pZCA9PiB7XG4gICAgICAgIHRoaXMucHJvcHMub25JbnZpdGVBbnl3YXlzKCk7XG4gICAgICAgIHRoaXMucHJvcHMub25GaW5pc2hlZCh0cnVlKTtcbiAgICB9O1xuXG4gICAgcHJpdmF0ZSBvbkludml0ZU5ldmVyV2FybkNsaWNrZWQgPSAoKTogdm9pZCA9PiB7XG4gICAgICAgIFNldHRpbmdzU3RvcmUuc2V0VmFsdWUoXCJwcm9tcHRCZWZvcmVJbnZpdGVVbmtub3duVXNlcnNcIiwgbnVsbCwgU2V0dGluZ0xldmVsLkFDQ09VTlQsIGZhbHNlKTtcbiAgICAgICAgdGhpcy5wcm9wcy5vbkludml0ZUFueXdheXMoKTtcbiAgICAgICAgdGhpcy5wcm9wcy5vbkZpbmlzaGVkKHRydWUpO1xuICAgIH07XG5cbiAgICBwcml2YXRlIG9uR2l2ZVVwQ2xpY2tlZCA9ICgpOiB2b2lkID0+IHtcbiAgICAgICAgdGhpcy5wcm9wcy5vbkdpdmVVcCgpO1xuICAgICAgICB0aGlzLnByb3BzLm9uRmluaXNoZWQoZmFsc2UpO1xuICAgIH07XG5cbiAgICBwdWJsaWMgcmVuZGVyKCkge1xuICAgICAgICBjb25zdCBlcnJvckxpc3QgPSB0aGlzLnByb3BzLnVua25vd25Qcm9maWxlVXNlcnNcbiAgICAgICAgICAgIC5tYXAoYWRkcmVzcyA9PiA8bGkga2V5PXthZGRyZXNzLnVzZXJJZH0+eyBhZGRyZXNzLnVzZXJJZCB9OiB7IGFkZHJlc3MuZXJyb3JUZXh0IH08L2xpPik7XG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxCYXNlRGlhbG9nIGNsYXNzTmFtZT0nbXhfUmV0cnlJbnZpdGVzRGlhbG9nJ1xuICAgICAgICAgICAgICAgIG9uRmluaXNoZWQ9e3RoaXMub25HaXZlVXBDbGlja2VkfVxuICAgICAgICAgICAgICAgIHRpdGxlPXtfdCgnVGhlIGZvbGxvd2luZyB1c2VycyBtYXkgbm90IGV4aXN0Jyl9XG4gICAgICAgICAgICAgICAgY29udGVudElkPSdteF9EaWFsb2dfY29udGVudCdcbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8ZGl2IGlkPSdteF9EaWFsb2dfY29udGVudCc+XG4gICAgICAgICAgICAgICAgICAgIDxwPnsgX3QoXCJVbmFibGUgdG8gZmluZCBwcm9maWxlcyBmb3IgdGhlIE1hdHJpeCBJRHMgbGlzdGVkIGJlbG93IC0gXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJ3b3VsZCB5b3UgbGlrZSB0byBpbnZpdGUgdGhlbSBhbnl3YXk/XCIpIH08L3A+XG4gICAgICAgICAgICAgICAgICAgIDx1bD5cbiAgICAgICAgICAgICAgICAgICAgICAgIHsgZXJyb3JMaXN0IH1cbiAgICAgICAgICAgICAgICAgICAgPC91bD5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibXhfRGlhbG9nX2J1dHRvbnNcIj5cbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXt0aGlzLm9uR2l2ZVVwQ2xpY2tlZH0+XG4gICAgICAgICAgICAgICAgICAgICAgICB7IF90KCdDbG9zZScpIH1cbiAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gb25DbGljaz17dGhpcy5vbkludml0ZU5ldmVyV2FybkNsaWNrZWR9PlxuICAgICAgICAgICAgICAgICAgICAgICAgeyBfdCgnSW52aXRlIGFueXdheSBhbmQgbmV2ZXIgd2FybiBtZSBhZ2FpbicpIH1cbiAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gb25DbGljaz17dGhpcy5vbkludml0ZUNsaWNrZWR9IGF1dG9Gb2N1cz17dHJ1ZX0+XG4gICAgICAgICAgICAgICAgICAgICAgICB7IF90KCdJbnZpdGUgYW55d2F5JykgfVxuICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvQmFzZURpYWxvZz5cbiAgICAgICAgKTtcbiAgICB9XG59XG4iXX0=