"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _languageHandler = require("../../../languageHandler");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _ConfirmRedactDialog = _interopRequireDefault(require("./ConfirmRedactDialog"));

var _ErrorDialog = _interopRequireDefault(require("./ErrorDialog"));

var _BaseDialog = _interopRequireDefault(require("./BaseDialog"));

var _Spinner = _interopRequireDefault(require("../elements/Spinner"));

var _dec, _class;

let ConfirmAndWaitRedactDialog = (
/*
 * A dialog for confirming a redaction.
 * Also shows a spinner (and possible error) while the redaction is ongoing,
 * and only closes the dialog when the redaction is done or failed.
 *
 * This is done to prevent the edit history dialog racing with the redaction:
 * if this dialog closes and the MessageEditHistoryDialog is shown again,
 * it will fetch the relations again, which will race with the ongoing /redact request.
 * which will cause the edit to appear unredacted.
 *
 * To avoid this, we keep the dialog open as long as /redact is in progress.
 */
_dec = (0, _replaceableComponent.replaceableComponent)("views.dialogs.ConfirmAndWaitRedactDialog"), _dec(_class = class ConfirmAndWaitRedactDialog extends _react.default.PureComponent {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "onParentFinished", async proceed => {
      if (proceed) {
        this.setState({
          isRedacting: true
        });

        try {
          await this.props.redact();
          this.props.onFinished(true);
        } catch (error) {
          const code = error.errcode || error.statusCode;

          if (typeof code !== "undefined") {
            this.setState({
              redactionErrorCode: code
            });
          } else {
            this.props.onFinished(true);
          }
        }
      } else {
        this.props.onFinished(false);
      }
    });
    this.state = {
      isRedacting: false,
      redactionErrorCode: null
    };
  }

  render() {
    if (this.state.isRedacting) {
      if (this.state.redactionErrorCode) {
        const code = this.state.redactionErrorCode;
        return /*#__PURE__*/_react.default.createElement(_ErrorDialog.default, {
          onFinished: this.props.onFinished,
          title: (0, _languageHandler._t)('Error'),
          description: (0, _languageHandler._t)('You cannot delete this message. (%(code)s)', {
            code
          })
        });
      } else {
        return /*#__PURE__*/_react.default.createElement(_BaseDialog.default, {
          onFinished: this.props.onFinished,
          hasCancel: false,
          title: (0, _languageHandler._t)("Removingâ€¦")
        }, /*#__PURE__*/_react.default.createElement(_Spinner.default, null));
      }
    } else {
      return /*#__PURE__*/_react.default.createElement(_ConfirmRedactDialog.default, {
        onFinished: this.onParentFinished
      });
    }
  }

}) || _class);
exports.default = ConfirmAndWaitRedactDialog;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL2RpYWxvZ3MvQ29uZmlybUFuZFdhaXRSZWRhY3REaWFsb2cudHN4Il0sIm5hbWVzIjpbIkNvbmZpcm1BbmRXYWl0UmVkYWN0RGlhbG9nIiwiUmVhY3QiLCJQdXJlQ29tcG9uZW50IiwiY29uc3RydWN0b3IiLCJwcm9wcyIsInByb2NlZWQiLCJzZXRTdGF0ZSIsImlzUmVkYWN0aW5nIiwicmVkYWN0Iiwib25GaW5pc2hlZCIsImVycm9yIiwiY29kZSIsImVycmNvZGUiLCJzdGF0dXNDb2RlIiwicmVkYWN0aW9uRXJyb3JDb2RlIiwic3RhdGUiLCJyZW5kZXIiLCJvblBhcmVudEZpbmlzaGVkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQWdCQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7OztJQXlCcUJBLDBCO0FBYnJCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtPQUNDLGdEQUFxQiwwQ0FBckIsQyxnQkFBRCxNQUNxQkEsMEJBRHJCLFNBQ3dEQyxlQUFNQyxhQUQ5RCxDQUM0RjtBQUN4RkMsRUFBQUEsV0FBVyxDQUFDQyxLQUFELEVBQVE7QUFDZixVQUFNQSxLQUFOO0FBRGUsNERBUU8sTUFBT0MsT0FBUCxJQUEyQztBQUNqRSxVQUFJQSxPQUFKLEVBQWE7QUFDVCxhQUFLQyxRQUFMLENBQWM7QUFBRUMsVUFBQUEsV0FBVyxFQUFFO0FBQWYsU0FBZDs7QUFDQSxZQUFJO0FBQ0EsZ0JBQU0sS0FBS0gsS0FBTCxDQUFXSSxNQUFYLEVBQU47QUFDQSxlQUFLSixLQUFMLENBQVdLLFVBQVgsQ0FBc0IsSUFBdEI7QUFDSCxTQUhELENBR0UsT0FBT0MsS0FBUCxFQUFjO0FBQ1osZ0JBQU1DLElBQUksR0FBR0QsS0FBSyxDQUFDRSxPQUFOLElBQWlCRixLQUFLLENBQUNHLFVBQXBDOztBQUNBLGNBQUksT0FBT0YsSUFBUCxLQUFnQixXQUFwQixFQUFpQztBQUM3QixpQkFBS0wsUUFBTCxDQUFjO0FBQUVRLGNBQUFBLGtCQUFrQixFQUFFSDtBQUF0QixhQUFkO0FBQ0gsV0FGRCxNQUVPO0FBQ0gsaUJBQUtQLEtBQUwsQ0FBV0ssVUFBWCxDQUFzQixJQUF0QjtBQUNIO0FBQ0o7QUFDSixPQWJELE1BYU87QUFDSCxhQUFLTCxLQUFMLENBQVdLLFVBQVgsQ0FBc0IsS0FBdEI7QUFDSDtBQUNKLEtBekJrQjtBQUVmLFNBQUtNLEtBQUwsR0FBYTtBQUNUUixNQUFBQSxXQUFXLEVBQUUsS0FESjtBQUVUTyxNQUFBQSxrQkFBa0IsRUFBRTtBQUZYLEtBQWI7QUFJSDs7QUFxQk1FLEVBQUFBLE1BQU0sR0FBRztBQUNaLFFBQUksS0FBS0QsS0FBTCxDQUFXUixXQUFmLEVBQTRCO0FBQ3hCLFVBQUksS0FBS1EsS0FBTCxDQUFXRCxrQkFBZixFQUFtQztBQUMvQixjQUFNSCxJQUFJLEdBQUcsS0FBS0ksS0FBTCxDQUFXRCxrQkFBeEI7QUFDQSw0QkFDSSw2QkFBQyxvQkFBRDtBQUNJLFVBQUEsVUFBVSxFQUFFLEtBQUtWLEtBQUwsQ0FBV0ssVUFEM0I7QUFFSSxVQUFBLEtBQUssRUFBRSx5QkFBRyxPQUFILENBRlg7QUFHSSxVQUFBLFdBQVcsRUFBRSx5QkFBRyw0Q0FBSCxFQUFpRDtBQUFFRSxZQUFBQTtBQUFGLFdBQWpEO0FBSGpCLFVBREo7QUFPSCxPQVRELE1BU087QUFDSCw0QkFDSSw2QkFBQyxtQkFBRDtBQUNJLFVBQUEsVUFBVSxFQUFFLEtBQUtQLEtBQUwsQ0FBV0ssVUFEM0I7QUFFSSxVQUFBLFNBQVMsRUFBRSxLQUZmO0FBR0ksVUFBQSxLQUFLLEVBQUUseUJBQUcsV0FBSDtBQUhYLHdCQUlJLDZCQUFDLGdCQUFELE9BSkosQ0FESjtBQVFIO0FBQ0osS0FwQkQsTUFvQk87QUFDSCwwQkFBTyw2QkFBQyw0QkFBRDtBQUFxQixRQUFBLFVBQVUsRUFBRSxLQUFLUTtBQUF0QyxRQUFQO0FBQ0g7QUFDSjs7QUFwRHVGLEMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuQ29weXJpZ2h0IDIwMTkgVGhlIE1hdHJpeC5vcmcgRm91bmRhdGlvbiBDLkkuQy5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgX3QgfSBmcm9tICcuLi8uLi8uLi9sYW5ndWFnZUhhbmRsZXInO1xuaW1wb3J0IHsgcmVwbGFjZWFibGVDb21wb25lbnQgfSBmcm9tIFwiLi4vLi4vLi4vdXRpbHMvcmVwbGFjZWFibGVDb21wb25lbnRcIjtcbmltcG9ydCBDb25maXJtUmVkYWN0RGlhbG9nIGZyb20gJy4vQ29uZmlybVJlZGFjdERpYWxvZyc7XG5pbXBvcnQgRXJyb3JEaWFsb2cgZnJvbSAnLi9FcnJvckRpYWxvZyc7XG5pbXBvcnQgQmFzZURpYWxvZyBmcm9tIFwiLi9CYXNlRGlhbG9nXCI7XG5pbXBvcnQgU3Bpbm5lciBmcm9tIFwiLi4vZWxlbWVudHMvU3Bpbm5lclwiO1xuXG5pbnRlcmZhY2UgSVByb3BzIHtcbiAgICByZWRhY3Q6ICgpID0+IFByb21pc2U8dm9pZD47XG4gICAgb25GaW5pc2hlZDogKHN1Y2Nlc3M6IGJvb2xlYW4pID0+IHZvaWQ7XG59XG5cbmludGVyZmFjZSBJU3RhdGUge1xuICAgIGlzUmVkYWN0aW5nOiBib29sZWFuO1xuICAgIHJlZGFjdGlvbkVycm9yQ29kZTogc3RyaW5nIHwgbnVtYmVyO1xufVxuXG4vKlxuICogQSBkaWFsb2cgZm9yIGNvbmZpcm1pbmcgYSByZWRhY3Rpb24uXG4gKiBBbHNvIHNob3dzIGEgc3Bpbm5lciAoYW5kIHBvc3NpYmxlIGVycm9yKSB3aGlsZSB0aGUgcmVkYWN0aW9uIGlzIG9uZ29pbmcsXG4gKiBhbmQgb25seSBjbG9zZXMgdGhlIGRpYWxvZyB3aGVuIHRoZSByZWRhY3Rpb24gaXMgZG9uZSBvciBmYWlsZWQuXG4gKlxuICogVGhpcyBpcyBkb25lIHRvIHByZXZlbnQgdGhlIGVkaXQgaGlzdG9yeSBkaWFsb2cgcmFjaW5nIHdpdGggdGhlIHJlZGFjdGlvbjpcbiAqIGlmIHRoaXMgZGlhbG9nIGNsb3NlcyBhbmQgdGhlIE1lc3NhZ2VFZGl0SGlzdG9yeURpYWxvZyBpcyBzaG93biBhZ2FpbixcbiAqIGl0IHdpbGwgZmV0Y2ggdGhlIHJlbGF0aW9ucyBhZ2Fpbiwgd2hpY2ggd2lsbCByYWNlIHdpdGggdGhlIG9uZ29pbmcgL3JlZGFjdCByZXF1ZXN0LlxuICogd2hpY2ggd2lsbCBjYXVzZSB0aGUgZWRpdCB0byBhcHBlYXIgdW5yZWRhY3RlZC5cbiAqXG4gKiBUbyBhdm9pZCB0aGlzLCB3ZSBrZWVwIHRoZSBkaWFsb2cgb3BlbiBhcyBsb25nIGFzIC9yZWRhY3QgaXMgaW4gcHJvZ3Jlc3MuXG4gKi9cbkByZXBsYWNlYWJsZUNvbXBvbmVudChcInZpZXdzLmRpYWxvZ3MuQ29uZmlybUFuZFdhaXRSZWRhY3REaWFsb2dcIilcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbmZpcm1BbmRXYWl0UmVkYWN0RGlhbG9nIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudDxJUHJvcHMsIElTdGF0ZT4ge1xuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIGlzUmVkYWN0aW5nOiBmYWxzZSxcbiAgICAgICAgICAgIHJlZGFjdGlvbkVycm9yQ29kZTogbnVsbCxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBwdWJsaWMgb25QYXJlbnRGaW5pc2hlZCA9IGFzeW5jIChwcm9jZWVkOiBib29sZWFuKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gICAgICAgIGlmIChwcm9jZWVkKSB7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgaXNSZWRhY3Rpbmc6IHRydWUgfSk7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucHJvcHMucmVkYWN0KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5vbkZpbmlzaGVkKHRydWUpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjb2RlID0gZXJyb3IuZXJyY29kZSB8fCBlcnJvci5zdGF0dXNDb2RlO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY29kZSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgcmVkYWN0aW9uRXJyb3JDb2RlOiBjb2RlIH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJvcHMub25GaW5pc2hlZCh0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLm9uRmluaXNoZWQoZmFsc2UpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHB1YmxpYyByZW5kZXIoKSB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmlzUmVkYWN0aW5nKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5zdGF0ZS5yZWRhY3Rpb25FcnJvckNvZGUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjb2RlID0gdGhpcy5zdGF0ZS5yZWRhY3Rpb25FcnJvckNvZGU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgPEVycm9yRGlhbG9nXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkZpbmlzaGVkPXt0aGlzLnByb3BzLm9uRmluaXNoZWR9XG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT17X3QoJ0Vycm9yJyl9XG4gICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbj17X3QoJ1lvdSBjYW5ub3QgZGVsZXRlIHRoaXMgbWVzc2FnZS4gKCUoY29kZSlzKScsIHsgY29kZSB9KX1cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICA8QmFzZURpYWxvZ1xuICAgICAgICAgICAgICAgICAgICAgICAgb25GaW5pc2hlZD17dGhpcy5wcm9wcy5vbkZpbmlzaGVkfVxuICAgICAgICAgICAgICAgICAgICAgICAgaGFzQ2FuY2VsPXtmYWxzZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPXtfdChcIlJlbW92aW5n4oCmXCIpfT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxTcGlubmVyIC8+XG4gICAgICAgICAgICAgICAgICAgIDwvQmFzZURpYWxvZz5cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIDxDb25maXJtUmVkYWN0RGlhbG9nIG9uRmluaXNoZWQ9e3RoaXMub25QYXJlbnRGaW5pc2hlZH0gLz47XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=