"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _BaseDialog = _interopRequireDefault(require("./BaseDialog"));

var _languageHandler = require("../../../languageHandler");

var _Field = _interopRequireDefault(require("../elements/Field"));

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _InfoTooltip = _interopRequireDefault(require("../elements/InfoTooltip"));

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _actions = require("../../../dispatcher/actions");

var _RoomInvite = require("../../../RoomInvite");

var _GroupStore = _interopRequireDefault(require("../../../stores/GroupStore"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _logger = require("matrix-js-sdk/src/logger");

var _dec, _class;

let CreateCommunityPrototypeDialog = (_dec = (0, _replaceableComponent.replaceableComponent)("views.dialogs.CreateCommunityPrototypeDialog"), _dec(_class = class CreateCommunityPrototypeDialog extends _react.default.PureComponent {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "avatarUploadRef", /*#__PURE__*/_react.default.createRef());
    (0, _defineProperty2.default)(this, "onNameChange", ev => {
      const localpart = (ev.target.value || "").toLowerCase().replace(/[^a-z0-9.\-_]/g, '-');
      this.setState({
        name: ev.target.value,
        localpart
      });
    });
    (0, _defineProperty2.default)(this, "onSubmit", async ev => {
      ev.preventDefault();
      ev.stopPropagation();
      if (this.state.busy) return; // We'll create the community now to see if it's taken, leaving it active in
      // the background for the user to look at while they invite people.

      this.setState({
        busy: true
      });

      try {
        let avatarUrl = ''; // must be a string for synapse to accept it

        if (this.state.avatarFile) {
          avatarUrl = await _MatrixClientPeg.MatrixClientPeg.get().uploadContent(this.state.avatarFile);
        }

        const result = await _MatrixClientPeg.MatrixClientPeg.get().createGroup({
          localpart: this.state.localpart,
          profile: {
            name: this.state.name,
            avatar_url: avatarUrl
          }
        }); // Ensure the tag gets selected now that we've created it

        _dispatcher.default.dispatch({
          action: 'deselect_tags'
        }, true);

        _dispatcher.default.dispatch({
          action: 'select_tag',
          tag: result.group_id
        }); // Close our own dialog before moving much further


        this.props.onFinished(true);

        if (result.room_id) {
          // Force the group store to update as it might have missed the general chat
          await _GroupStore.default.refreshGroupRooms(result.group_id);

          _dispatcher.default.dispatch({
            action: _actions.Action.ViewRoom,
            room_id: result.room_id
          });

          (0, _RoomInvite.showCommunityRoomInviteDialog)(result.room_id, this.state.name);
        } else {
          _dispatcher.default.dispatch({
            action: 'view_group',
            group_id: result.group_id,
            group_is_new: true
          });
        }
      } catch (e) {
        _logger.logger.error(e);

        this.setState({
          busy: false,
          error: (0, _languageHandler._t)("There was an error creating your community. The name may be taken or the " + "server is unable to process your request.")
        });
      }
    });
    (0, _defineProperty2.default)(this, "onAvatarChanged", e => {
      if (!e.target.files || !e.target.files.length) {
        this.setState({
          avatarFile: null
        });
      } else {
        this.setState({
          busy: true
        });
        const file = e.target.files[0];
        const reader = new FileReader();

        reader.onload = ev => {
          this.setState({
            avatarFile: file,
            busy: false,
            avatarPreview: ev.target.result
          });
        };

        reader.readAsDataURL(file);
      }
    });
    (0, _defineProperty2.default)(this, "onChangeAvatar", () => {
      if (this.avatarUploadRef.current) this.avatarUploadRef.current.click();
    });
    this.state = {
      name: "",
      localpart: "",
      error: null,
      busy: false,
      avatarFile: null,
      avatarPreview: null
    };
  }

  render() {
    let communityId = null;

    if (this.state.localpart) {
      communityId = /*#__PURE__*/_react.default.createElement("span", {
        className: "mx_CreateCommunityPrototypeDialog_communityId"
      }, (0, _languageHandler._t)("Community ID: +<localpart />:%(domain)s", {
        domain: _MatrixClientPeg.MatrixClientPeg.getHomeserverName()
      }, {
        localpart: () => /*#__PURE__*/_react.default.createElement("u", null, this.state.localpart)
      }), /*#__PURE__*/_react.default.createElement(_InfoTooltip.default, {
        tooltip: (0, _languageHandler._t)("Use this when referencing your community to others. The community ID " + "cannot be changed.")
      }));
    }

    let helpText = /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_CreateCommunityPrototypeDialog_subtext"
    }, (0, _languageHandler._t)("You can change this later if needed."));

    if (this.state.error) {
      const classes = "mx_CreateCommunityPrototypeDialog_subtext mx_CreateCommunityPrototypeDialog_subtext_error";
      helpText = /*#__PURE__*/_react.default.createElement("span", {
        className: classes
      }, this.state.error);
    }

    let preview = /*#__PURE__*/_react.default.createElement("img", {
      src: this.state.avatarPreview,
      className: "mx_CreateCommunityPrototypeDialog_avatar"
    });

    if (!this.state.avatarPreview) {
      preview = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_CreateCommunityPrototypeDialog_placeholderAvatar"
      });
    }

    return /*#__PURE__*/_react.default.createElement(_BaseDialog.default, {
      className: "mx_CreateCommunityPrototypeDialog",
      onFinished: this.props.onFinished,
      title: (0, _languageHandler._t)("What's the name of your community or team?")
    }, /*#__PURE__*/_react.default.createElement("form", {
      onSubmit: this.onSubmit
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_Dialog_content"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_CreateCommunityPrototypeDialog_colName"
    }, /*#__PURE__*/_react.default.createElement(_Field.default, {
      value: this.state.name,
      onChange: this.onNameChange,
      placeholder: (0, _languageHandler._t)("Enter name"),
      label: (0, _languageHandler._t)("Enter name")
    }), helpText, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_CreateCommunityPrototypeDialog_subtext"
    }, "\xA0", communityId), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      kind: "primary",
      onClick: this.onSubmit,
      disabled: this.state.busy
    }, (0, _languageHandler._t)("Create"))), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_CreateCommunityPrototypeDialog_colAvatar"
    }, /*#__PURE__*/_react.default.createElement("input", {
      type: "file",
      style: {
        display: "none"
      },
      ref: this.avatarUploadRef,
      accept: "image/*",
      onChange: this.onAvatarChanged
    }), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      onClick: this.onChangeAvatar,
      className: "mx_CreateCommunityPrototypeDialog_avatarContainer"
    }, preview), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_CreateCommunityPrototypeDialog_tip"
    }, /*#__PURE__*/_react.default.createElement("b", null, (0, _languageHandler._t)("Add image (optional)")), /*#__PURE__*/_react.default.createElement("span", null, (0, _languageHandler._t)("An image will help people identify your community.")))))));
  }

}) || _class);
exports.default = CreateCommunityPrototypeDialog;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,