"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var sdk = _interopRequireWildcard(require("../../../index"));

var _languageHandler = require("../../../languageHandler");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
Copyright 2015, 2016 OpenMarket Ltd
Copyright 2017 New Vector Ltd.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
class QuestionDialog extends _react.default.Component {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "onOk", () => {
      this.props.onFinished(true);
    });
    (0, _defineProperty2.default)(this, "onCancel", () => {
      this.props.onFinished(false);
    });
  }

  render() {
    // Converting these to imports breaks wrench tests
    const BaseDialog = sdk.getComponent('views.dialogs.BaseDialog');
    const DialogButtons = sdk.getComponent('views.elements.DialogButtons');
    let primaryButtonClass = "";

    if (this.props.danger) {
      primaryButtonClass = "danger";
    }

    return /*#__PURE__*/_react.default.createElement(BaseDialog, {
      className: (0, _classnames.default)("mx_QuestionDialog", this.props.className),
      onFinished: this.props.onFinished,
      title: this.props.title,
      contentId: "mx_Dialog_content",
      headerImage: this.props.headerImage,
      hasCancel: this.props.hasCancelButton,
      fixedWidth: this.props.fixedWidth
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_Dialog_content",
      id: "mx_Dialog_content"
    }, this.props.description), /*#__PURE__*/_react.default.createElement(DialogButtons, {
      primaryButton: this.props.button || (0, _languageHandler._t)('OK'),
      primaryButtonClass: primaryButtonClass,
      primaryDisabled: this.props.buttonDisabled,
      cancelButton: this.props.cancelButton,
      hasCancel: this.props.hasCancelButton && !this.props.quitOnly,
      onPrimaryButtonClick: this.onOk,
      focus: this.props.focus,
      onCancel: this.onCancel
    }, this.props.extraButtons));
  }

}

exports.default = QuestionDialog;
(0, _defineProperty2.default)(QuestionDialog, "defaultProps", {
  title: "",
  description: "",
  extraButtons: null,
  focus: true,
  hasCancelButton: true,
  danger: false,
  quitOnly: false
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL2RpYWxvZ3MvUXVlc3Rpb25EaWFsb2cudHN4Il0sIm5hbWVzIjpbIlF1ZXN0aW9uRGlhbG9nIiwiUmVhY3QiLCJDb21wb25lbnQiLCJwcm9wcyIsIm9uRmluaXNoZWQiLCJyZW5kZXIiLCJCYXNlRGlhbG9nIiwic2RrIiwiZ2V0Q29tcG9uZW50IiwiRGlhbG9nQnV0dG9ucyIsInByaW1hcnlCdXR0b25DbGFzcyIsImRhbmdlciIsImNsYXNzTmFtZSIsInRpdGxlIiwiaGVhZGVySW1hZ2UiLCJoYXNDYW5jZWxCdXR0b24iLCJmaXhlZFdpZHRoIiwiZGVzY3JpcHRpb24iLCJidXR0b24iLCJidXR0b25EaXNhYmxlZCIsImNhbmNlbEJ1dHRvbiIsInF1aXRPbmx5Iiwib25PayIsImZvY3VzIiwib25DYW5jZWwiLCJleHRyYUJ1dHRvbnMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBaUJBOztBQUNBOztBQUVBOztBQUNBOzs7Ozs7QUFyQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUF5QmUsTUFBTUEsY0FBTixTQUE2QkMsZUFBTUMsU0FBbkMsQ0FBcUQ7QUFBQTtBQUFBO0FBQUEsZ0RBV2pELE1BQVk7QUFDdkIsV0FBS0MsS0FBTCxDQUFXQyxVQUFYLENBQXNCLElBQXRCO0FBQ0gsS0FiK0Q7QUFBQSxvREFlN0MsTUFBWTtBQUMzQixXQUFLRCxLQUFMLENBQVdDLFVBQVgsQ0FBc0IsS0FBdEI7QUFDSCxLQWpCK0Q7QUFBQTs7QUFtQnpEQyxFQUFBQSxNQUFNLEdBQWdCO0FBQ3pCO0FBQ0EsVUFBTUMsVUFBVSxHQUFHQyxHQUFHLENBQUNDLFlBQUosQ0FBaUIsMEJBQWpCLENBQW5CO0FBQ0EsVUFBTUMsYUFBYSxHQUFHRixHQUFHLENBQUNDLFlBQUosQ0FBaUIsOEJBQWpCLENBQXRCO0FBRUEsUUFBSUUsa0JBQWtCLEdBQUcsRUFBekI7O0FBQ0EsUUFBSSxLQUFLUCxLQUFMLENBQVdRLE1BQWYsRUFBdUI7QUFDbkJELE1BQUFBLGtCQUFrQixHQUFHLFFBQXJCO0FBQ0g7O0FBQ0Qsd0JBQ0ksNkJBQUMsVUFBRDtBQUNJLE1BQUEsU0FBUyxFQUFFLHlCQUFXLG1CQUFYLEVBQWdDLEtBQUtQLEtBQUwsQ0FBV1MsU0FBM0MsQ0FEZjtBQUVJLE1BQUEsVUFBVSxFQUFFLEtBQUtULEtBQUwsQ0FBV0MsVUFGM0I7QUFHSSxNQUFBLEtBQUssRUFBRSxLQUFLRCxLQUFMLENBQVdVLEtBSHRCO0FBSUksTUFBQSxTQUFTLEVBQUMsbUJBSmQ7QUFLSSxNQUFBLFdBQVcsRUFBRSxLQUFLVixLQUFMLENBQVdXLFdBTDVCO0FBTUksTUFBQSxTQUFTLEVBQUUsS0FBS1gsS0FBTCxDQUFXWSxlQU4xQjtBQU9JLE1BQUEsVUFBVSxFQUFFLEtBQUtaLEtBQUwsQ0FBV2E7QUFQM0Isb0JBU0k7QUFBSyxNQUFBLFNBQVMsRUFBQyxtQkFBZjtBQUFtQyxNQUFBLEVBQUUsRUFBQztBQUF0QyxPQUNNLEtBQUtiLEtBQUwsQ0FBV2MsV0FEakIsQ0FUSixlQVlJLDZCQUFDLGFBQUQ7QUFBZSxNQUFBLGFBQWEsRUFBRSxLQUFLZCxLQUFMLENBQVdlLE1BQVgsSUFBcUIseUJBQUcsSUFBSCxDQUFuRDtBQUNJLE1BQUEsa0JBQWtCLEVBQUVSLGtCQUR4QjtBQUVJLE1BQUEsZUFBZSxFQUFFLEtBQUtQLEtBQUwsQ0FBV2dCLGNBRmhDO0FBR0ksTUFBQSxZQUFZLEVBQUUsS0FBS2hCLEtBQUwsQ0FBV2lCLFlBSDdCO0FBSUksTUFBQSxTQUFTLEVBQUUsS0FBS2pCLEtBQUwsQ0FBV1ksZUFBWCxJQUE4QixDQUFDLEtBQUtaLEtBQUwsQ0FBV2tCLFFBSnpEO0FBS0ksTUFBQSxvQkFBb0IsRUFBRSxLQUFLQyxJQUwvQjtBQU1JLE1BQUEsS0FBSyxFQUFFLEtBQUtuQixLQUFMLENBQVdvQixLQU50QjtBQU9JLE1BQUEsUUFBUSxFQUFFLEtBQUtDO0FBUG5CLE9BU00sS0FBS3JCLEtBQUwsQ0FBV3NCLFlBVGpCLENBWkosQ0FESjtBQTBCSDs7QUF0RCtEOzs7OEJBQS9DekIsYyxrQkFDNkI7QUFDMUNhLEVBQUFBLEtBQUssRUFBRSxFQURtQztBQUUxQ0ksRUFBQUEsV0FBVyxFQUFFLEVBRjZCO0FBRzFDUSxFQUFBQSxZQUFZLEVBQUUsSUFINEI7QUFJMUNGLEVBQUFBLEtBQUssRUFBRSxJQUptQztBQUsxQ1IsRUFBQUEsZUFBZSxFQUFFLElBTHlCO0FBTTFDSixFQUFBQSxNQUFNLEVBQUUsS0FOa0M7QUFPMUNVLEVBQUFBLFFBQVEsRUFBRTtBQVBnQyxDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbkNvcHlyaWdodCAyMDE1LCAyMDE2IE9wZW5NYXJrZXQgTHRkXG5Db3B5cmlnaHQgMjAxNyBOZXcgVmVjdG9yIEx0ZC5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSBcImNsYXNzbmFtZXNcIjtcblxuaW1wb3J0ICogYXMgc2RrIGZyb20gJy4uLy4uLy4uL2luZGV4JztcbmltcG9ydCB7IF90IH0gZnJvbSAnLi4vLi4vLi4vbGFuZ3VhZ2VIYW5kbGVyJztcbmltcG9ydCB7IElEaWFsb2dQcm9wcyB9IGZyb20gXCIuL0lEaWFsb2dQcm9wc1wiO1xuXG5pbnRlcmZhY2UgSVByb3BzIGV4dGVuZHMgSURpYWxvZ1Byb3BzIHtcbiAgICB0aXRsZT86IHN0cmluZztcbiAgICBkZXNjcmlwdGlvbj86IFJlYWN0LlJlYWN0Tm9kZTtcbiAgICBleHRyYUJ1dHRvbnM/OiBSZWFjdC5SZWFjdE5vZGU7XG4gICAgYnV0dG9uPzogc3RyaW5nO1xuICAgIGJ1dHRvbkRpc2FibGVkPzogYm9vbGVhbjtcbiAgICBkYW5nZXI/OiBib29sZWFuO1xuICAgIGZvY3VzPzogYm9vbGVhbjtcbiAgICBoZWFkZXJJbWFnZT86IHN0cmluZztcbiAgICBxdWl0T25seT86IGJvb2xlYW47IC8vIHF1aXRPbmx5IGRvZXNuJ3Qgc2hvdyB0aGUgY2FuY2VsIGJ1dHRvbiBqdXN0IHRoZSBxdWl0IFt4XS5cbiAgICBmaXhlZFdpZHRoPzogYm9vbGVhbjtcbiAgICBjbGFzc05hbWU/OiBzdHJpbmc7XG4gICAgaGFzQ2FuY2VsQnV0dG9uPzogYm9vbGVhbjtcbiAgICBjYW5jZWxCdXR0b24/OiBSZWFjdC5SZWFjdE5vZGU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFF1ZXN0aW9uRGlhbG9nIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PElQcm9wcz4ge1xuICAgIHB1YmxpYyBzdGF0aWMgZGVmYXVsdFByb3BzOiBQYXJ0aWFsPElQcm9wcz4gPSB7XG4gICAgICAgIHRpdGxlOiBcIlwiLFxuICAgICAgICBkZXNjcmlwdGlvbjogXCJcIixcbiAgICAgICAgZXh0cmFCdXR0b25zOiBudWxsLFxuICAgICAgICBmb2N1czogdHJ1ZSxcbiAgICAgICAgaGFzQ2FuY2VsQnV0dG9uOiB0cnVlLFxuICAgICAgICBkYW5nZXI6IGZhbHNlLFxuICAgICAgICBxdWl0T25seTogZmFsc2UsXG4gICAgfTtcblxuICAgIHByaXZhdGUgb25PayA9ICgpOiB2b2lkID0+IHtcbiAgICAgICAgdGhpcy5wcm9wcy5vbkZpbmlzaGVkKHRydWUpO1xuICAgIH07XG5cbiAgICBwcml2YXRlIG9uQ2FuY2VsID0gKCk6IHZvaWQgPT4ge1xuICAgICAgICB0aGlzLnByb3BzLm9uRmluaXNoZWQoZmFsc2UpO1xuICAgIH07XG5cbiAgICBwdWJsaWMgcmVuZGVyKCk6IEpTWC5FbGVtZW50IHtcbiAgICAgICAgLy8gQ29udmVydGluZyB0aGVzZSB0byBpbXBvcnRzIGJyZWFrcyB3cmVuY2ggdGVzdHNcbiAgICAgICAgY29uc3QgQmFzZURpYWxvZyA9IHNkay5nZXRDb21wb25lbnQoJ3ZpZXdzLmRpYWxvZ3MuQmFzZURpYWxvZycpO1xuICAgICAgICBjb25zdCBEaWFsb2dCdXR0b25zID0gc2RrLmdldENvbXBvbmVudCgndmlld3MuZWxlbWVudHMuRGlhbG9nQnV0dG9ucycpO1xuXG4gICAgICAgIGxldCBwcmltYXJ5QnV0dG9uQ2xhc3MgPSBcIlwiO1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5kYW5nZXIpIHtcbiAgICAgICAgICAgIHByaW1hcnlCdXR0b25DbGFzcyA9IFwiZGFuZ2VyXCI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxCYXNlRGlhbG9nXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWVzKFwibXhfUXVlc3Rpb25EaWFsb2dcIiwgdGhpcy5wcm9wcy5jbGFzc05hbWUpfVxuICAgICAgICAgICAgICAgIG9uRmluaXNoZWQ9e3RoaXMucHJvcHMub25GaW5pc2hlZH1cbiAgICAgICAgICAgICAgICB0aXRsZT17dGhpcy5wcm9wcy50aXRsZX1cbiAgICAgICAgICAgICAgICBjb250ZW50SWQ9J214X0RpYWxvZ19jb250ZW50J1xuICAgICAgICAgICAgICAgIGhlYWRlckltYWdlPXt0aGlzLnByb3BzLmhlYWRlckltYWdlfVxuICAgICAgICAgICAgICAgIGhhc0NhbmNlbD17dGhpcy5wcm9wcy5oYXNDYW5jZWxCdXR0b259XG4gICAgICAgICAgICAgICAgZml4ZWRXaWR0aD17dGhpcy5wcm9wcy5maXhlZFdpZHRofVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibXhfRGlhbG9nX2NvbnRlbnRcIiBpZD0nbXhfRGlhbG9nX2NvbnRlbnQnPlxuICAgICAgICAgICAgICAgICAgICB7IHRoaXMucHJvcHMuZGVzY3JpcHRpb24gfVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxEaWFsb2dCdXR0b25zIHByaW1hcnlCdXR0b249e3RoaXMucHJvcHMuYnV0dG9uIHx8IF90KCdPSycpfVxuICAgICAgICAgICAgICAgICAgICBwcmltYXJ5QnV0dG9uQ2xhc3M9e3ByaW1hcnlCdXR0b25DbGFzc31cbiAgICAgICAgICAgICAgICAgICAgcHJpbWFyeURpc2FibGVkPXt0aGlzLnByb3BzLmJ1dHRvbkRpc2FibGVkfVxuICAgICAgICAgICAgICAgICAgICBjYW5jZWxCdXR0b249e3RoaXMucHJvcHMuY2FuY2VsQnV0dG9ufVxuICAgICAgICAgICAgICAgICAgICBoYXNDYW5jZWw9e3RoaXMucHJvcHMuaGFzQ2FuY2VsQnV0dG9uICYmICF0aGlzLnByb3BzLnF1aXRPbmx5fVxuICAgICAgICAgICAgICAgICAgICBvblByaW1hcnlCdXR0b25DbGljaz17dGhpcy5vbk9rfVxuICAgICAgICAgICAgICAgICAgICBmb2N1cz17dGhpcy5wcm9wcy5mb2N1c31cbiAgICAgICAgICAgICAgICAgICAgb25DYW5jZWw9e3RoaXMub25DYW5jZWx9XG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICB7IHRoaXMucHJvcHMuZXh0cmFCdXR0b25zIH1cbiAgICAgICAgICAgICAgICA8L0RpYWxvZ0J1dHRvbnM+XG4gICAgICAgICAgICA8L0Jhc2VEaWFsb2c+XG4gICAgICAgICk7XG4gICAgfVxufVxuIl19