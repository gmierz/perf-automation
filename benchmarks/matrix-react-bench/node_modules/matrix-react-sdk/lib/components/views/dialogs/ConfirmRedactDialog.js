"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createRedactEventDialog = createRedactEventDialog;
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _languageHandler = require("../../../languageHandler");

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _Modal = _interopRequireDefault(require("../../../Modal"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _ErrorDialog = _interopRequireDefault(require("./ErrorDialog"));

var _TextInputDialog = _interopRequireDefault(require("./TextInputDialog"));

var _dec, _class;

let ConfirmRedactDialog = (
/*
 * A dialog for confirming a redaction.
 */
_dec = (0, _replaceableComponent.replaceableComponent)("views.dialogs.ConfirmRedactDialog"), _dec(_class = class ConfirmRedactDialog extends _react.default.Component {
  render() {
    return /*#__PURE__*/_react.default.createElement(_TextInputDialog.default, {
      onFinished: this.props.onFinished,
      title: (0, _languageHandler._t)("Confirm Removal"),
      description: (0, _languageHandler._t)("Are you sure you wish to remove (delete) this event? " + "Note that if you delete a room name or topic change, it could undo the change."),
      placeholder: (0, _languageHandler._t)("Reason (optional)"),
      focus: true,
      button: (0, _languageHandler._t)("Remove")
    });
  }

}) || _class);
exports.default = ConfirmRedactDialog;

function createRedactEventDialog({
  mxEvent,
  onCloseDialog = () => {}
}) {
  _Modal.default.createTrackedDialog('Confirm Redact Dialog', '', ConfirmRedactDialog, {
    onFinished: async (proceed, reason) => {
      if (!proceed) return;

      const cli = _MatrixClientPeg.MatrixClientPeg.get();

      try {
        onCloseDialog === null || onCloseDialog === void 0 ? void 0 : onCloseDialog();
        await cli.redactEvent(mxEvent.getRoomId(), mxEvent.getId(), undefined, reason ? {
          reason
        } : {});
      } catch (e) {
        const code = e.errcode || e.statusCode; // only show the dialog if failing for something other than a network error
        // (e.g. no errcode or statusCode) as in that case the redactions end up in the
        // detached queue and we show the room status bar to allow retry

        if (typeof code !== "undefined") {
          // display error message stating you couldn't delete this.
          _Modal.default.createTrackedDialog('You cannot delete this message', '', _ErrorDialog.default, {
            title: (0, _languageHandler._t)('Error'),
            description: (0, _languageHandler._t)('You cannot delete this message. (%(code)s)', {
              code
            })
          });
        }
      }
    }
  }, 'mx_Dialog_confirmredact');
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL2RpYWxvZ3MvQ29uZmlybVJlZGFjdERpYWxvZy50c3giXSwibmFtZXMiOlsiQ29uZmlybVJlZGFjdERpYWxvZyIsIlJlYWN0IiwiQ29tcG9uZW50IiwicmVuZGVyIiwicHJvcHMiLCJvbkZpbmlzaGVkIiwiY3JlYXRlUmVkYWN0RXZlbnREaWFsb2ciLCJteEV2ZW50Iiwib25DbG9zZURpYWxvZyIsIk1vZGFsIiwiY3JlYXRlVHJhY2tlZERpYWxvZyIsInByb2NlZWQiLCJyZWFzb24iLCJjbGkiLCJNYXRyaXhDbGllbnRQZWciLCJnZXQiLCJyZWRhY3RFdmVudCIsImdldFJvb21JZCIsImdldElkIiwidW5kZWZpbmVkIiwiZSIsImNvZGUiLCJlcnJjb2RlIiwic3RhdHVzQ29kZSIsIkVycm9yRGlhbG9nIiwidGl0bGUiLCJkZXNjcmlwdGlvbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQWlCQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7OztJQVVxQkEsbUI7QUFKckI7QUFDQTtBQUNBO09BQ0MsZ0RBQXFCLG1DQUFyQixDLGdCQUFELE1BQ3FCQSxtQkFEckIsU0FDaURDLGVBQU1DLFNBRHZELENBQ3lFO0FBQ3JFQyxFQUFBQSxNQUFNLEdBQUc7QUFDTCx3QkFDSSw2QkFBQyx3QkFBRDtBQUFpQixNQUFBLFVBQVUsRUFBRSxLQUFLQyxLQUFMLENBQVdDLFVBQXhDO0FBQ0ksTUFBQSxLQUFLLEVBQUUseUJBQUcsaUJBQUgsQ0FEWDtBQUVJLE1BQUEsV0FBVyxFQUNQLHlCQUFHLDBEQUNBLGdGQURILENBSFI7QUFLSSxNQUFBLFdBQVcsRUFBRSx5QkFBRyxtQkFBSCxDQUxqQjtBQU1JLE1BQUEsS0FBSyxNQU5UO0FBT0ksTUFBQSxNQUFNLEVBQUUseUJBQUcsUUFBSDtBQVBaLE1BREo7QUFXSDs7QUFib0UsQzs7O0FBZ0JsRSxTQUFTQyx1QkFBVCxDQUFpQztBQUNwQ0MsRUFBQUEsT0FEb0M7QUFFcENDLEVBQUFBLGFBQWEsR0FBRyxNQUFNLENBQUU7QUFGWSxDQUFqQyxFQU1KO0FBQ0NDLGlCQUFNQyxtQkFBTixDQUEwQix1QkFBMUIsRUFBbUQsRUFBbkQsRUFBdURWLG1CQUF2RCxFQUE0RTtBQUN4RUssSUFBQUEsVUFBVSxFQUFFLE9BQU9NLE9BQVAsRUFBeUJDLE1BQXpCLEtBQTZDO0FBQ3JELFVBQUksQ0FBQ0QsT0FBTCxFQUFjOztBQUVkLFlBQU1FLEdBQUcsR0FBR0MsaUNBQWdCQyxHQUFoQixFQUFaOztBQUNBLFVBQUk7QUFDQVAsUUFBQUEsYUFBYSxTQUFiLElBQUFBLGFBQWEsV0FBYixZQUFBQSxhQUFhO0FBQ2IsY0FBTUssR0FBRyxDQUFDRyxXQUFKLENBQ0ZULE9BQU8sQ0FBQ1UsU0FBUixFQURFLEVBRUZWLE9BQU8sQ0FBQ1csS0FBUixFQUZFLEVBR0ZDLFNBSEUsRUFJRlAsTUFBTSxHQUFHO0FBQUVBLFVBQUFBO0FBQUYsU0FBSCxHQUFnQixFQUpwQixDQUFOO0FBTUgsT0FSRCxDQVFFLE9BQU9RLENBQVAsRUFBVTtBQUNSLGNBQU1DLElBQUksR0FBR0QsQ0FBQyxDQUFDRSxPQUFGLElBQWFGLENBQUMsQ0FBQ0csVUFBNUIsQ0FEUSxDQUVSO0FBQ0E7QUFDQTs7QUFDQSxZQUFJLE9BQU9GLElBQVAsS0FBZ0IsV0FBcEIsRUFBaUM7QUFDN0I7QUFDQVoseUJBQU1DLG1CQUFOLENBQTBCLGdDQUExQixFQUE0RCxFQUE1RCxFQUFnRWMsb0JBQWhFLEVBQTZFO0FBQ3pFQyxZQUFBQSxLQUFLLEVBQUUseUJBQUcsT0FBSCxDQURrRTtBQUV6RUMsWUFBQUEsV0FBVyxFQUFFLHlCQUFHLDRDQUFILEVBQWlEO0FBQUVMLGNBQUFBO0FBQUYsYUFBakQ7QUFGNEQsV0FBN0U7QUFJSDtBQUNKO0FBQ0o7QUExQnVFLEdBQTVFLEVBMkJHLHlCQTNCSDtBQTRCSCIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5Db3B5cmlnaHQgMjAxNyBWZWN0b3IgQ3JlYXRpb25zIEx0ZFxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbmltcG9ydCB7IE1hdHJpeEV2ZW50IH0gZnJvbSAnbWF0cml4LWpzLXNkay9zcmMvbW9kZWxzL2V2ZW50JztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBfdCB9IGZyb20gJy4uLy4uLy4uL2xhbmd1YWdlSGFuZGxlcic7XG5pbXBvcnQgeyBNYXRyaXhDbGllbnRQZWcgfSBmcm9tICcuLi8uLi8uLi9NYXRyaXhDbGllbnRQZWcnO1xuaW1wb3J0IE1vZGFsIGZyb20gJy4uLy4uLy4uL01vZGFsJztcbmltcG9ydCB7IHJlcGxhY2VhYmxlQ29tcG9uZW50IH0gZnJvbSBcIi4uLy4uLy4uL3V0aWxzL3JlcGxhY2VhYmxlQ29tcG9uZW50XCI7XG5pbXBvcnQgRXJyb3JEaWFsb2cgZnJvbSAnLi9FcnJvckRpYWxvZyc7XG5pbXBvcnQgVGV4dElucHV0RGlhbG9nIGZyb20gXCIuL1RleHRJbnB1dERpYWxvZ1wiO1xuXG5pbnRlcmZhY2UgSVByb3BzIHtcbiAgICBvbkZpbmlzaGVkOiAoc3VjY2VzczogYm9vbGVhbikgPT4gdm9pZDtcbn1cblxuLypcbiAqIEEgZGlhbG9nIGZvciBjb25maXJtaW5nIGEgcmVkYWN0aW9uLlxuICovXG5AcmVwbGFjZWFibGVDb21wb25lbnQoXCJ2aWV3cy5kaWFsb2dzLkNvbmZpcm1SZWRhY3REaWFsb2dcIilcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbmZpcm1SZWRhY3REaWFsb2cgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8SVByb3BzPiB7XG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPFRleHRJbnB1dERpYWxvZyBvbkZpbmlzaGVkPXt0aGlzLnByb3BzLm9uRmluaXNoZWR9XG4gICAgICAgICAgICAgICAgdGl0bGU9e190KFwiQ29uZmlybSBSZW1vdmFsXCIpfVxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uPXtcbiAgICAgICAgICAgICAgICAgICAgX3QoXCJBcmUgeW91IHN1cmUgeW91IHdpc2ggdG8gcmVtb3ZlIChkZWxldGUpIHRoaXMgZXZlbnQ/IFwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgXCJOb3RlIHRoYXQgaWYgeW91IGRlbGV0ZSBhIHJvb20gbmFtZSBvciB0b3BpYyBjaGFuZ2UsIGl0IGNvdWxkIHVuZG8gdGhlIGNoYW5nZS5cIil9XG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9e190KFwiUmVhc29uIChvcHRpb25hbClcIil9XG4gICAgICAgICAgICAgICAgZm9jdXNcbiAgICAgICAgICAgICAgICBidXR0b249e190KFwiUmVtb3ZlXCIpfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgKTtcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVSZWRhY3RFdmVudERpYWxvZyh7XG4gICAgbXhFdmVudCxcbiAgICBvbkNsb3NlRGlhbG9nID0gKCkgPT4ge30sXG59OiB7XG4gICAgbXhFdmVudDogTWF0cml4RXZlbnQ7XG4gICAgb25DbG9zZURpYWxvZz86ICgpID0+IHZvaWQ7XG59KSB7XG4gICAgTW9kYWwuY3JlYXRlVHJhY2tlZERpYWxvZygnQ29uZmlybSBSZWRhY3QgRGlhbG9nJywgJycsIENvbmZpcm1SZWRhY3REaWFsb2csIHtcbiAgICAgICAgb25GaW5pc2hlZDogYXN5bmMgKHByb2NlZWQ6IGJvb2xlYW4sIHJlYXNvbj86IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgaWYgKCFwcm9jZWVkKSByZXR1cm47XG5cbiAgICAgICAgICAgIGNvbnN0IGNsaSA9IE1hdHJpeENsaWVudFBlZy5nZXQoKTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgb25DbG9zZURpYWxvZz8uKCk7XG4gICAgICAgICAgICAgICAgYXdhaXQgY2xpLnJlZGFjdEV2ZW50KFxuICAgICAgICAgICAgICAgICAgICBteEV2ZW50LmdldFJvb21JZCgpLFxuICAgICAgICAgICAgICAgICAgICBteEV2ZW50LmdldElkKCksXG4gICAgICAgICAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgcmVhc29uID8geyByZWFzb24gfSA6IHt9LFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY29kZSA9IGUuZXJyY29kZSB8fCBlLnN0YXR1c0NvZGU7XG4gICAgICAgICAgICAgICAgLy8gb25seSBzaG93IHRoZSBkaWFsb2cgaWYgZmFpbGluZyBmb3Igc29tZXRoaW5nIG90aGVyIHRoYW4gYSBuZXR3b3JrIGVycm9yXG4gICAgICAgICAgICAgICAgLy8gKGUuZy4gbm8gZXJyY29kZSBvciBzdGF0dXNDb2RlKSBhcyBpbiB0aGF0IGNhc2UgdGhlIHJlZGFjdGlvbnMgZW5kIHVwIGluIHRoZVxuICAgICAgICAgICAgICAgIC8vIGRldGFjaGVkIHF1ZXVlIGFuZCB3ZSBzaG93IHRoZSByb29tIHN0YXR1cyBiYXIgdG8gYWxsb3cgcmV0cnlcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNvZGUgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gZGlzcGxheSBlcnJvciBtZXNzYWdlIHN0YXRpbmcgeW91IGNvdWxkbid0IGRlbGV0ZSB0aGlzLlxuICAgICAgICAgICAgICAgICAgICBNb2RhbC5jcmVhdGVUcmFja2VkRGlhbG9nKCdZb3UgY2Fubm90IGRlbGV0ZSB0aGlzIG1lc3NhZ2UnLCAnJywgRXJyb3JEaWFsb2csIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBfdCgnRXJyb3InKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBfdCgnWW91IGNhbm5vdCBkZWxldGUgdGhpcyBtZXNzYWdlLiAoJShjb2RlKXMpJywgeyBjb2RlIH0pLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgfSwgJ214X0RpYWxvZ19jb25maXJtcmVkYWN0Jyk7XG59XG4iXX0=