"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _languageHandler = require("../../../languageHandler");

var _createRoom = require("../../../createRoom");

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _SdkConfig = _interopRequireDefault(require("../../../SdkConfig"));

var _Markdown = _interopRequireDefault(require("../../../Markdown"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _SettingsStore = _interopRequireDefault(require("../../../settings/SettingsStore"));

var _StyledRadioButton = _interopRequireDefault(require("../elements/StyledRadioButton"));

var _BaseDialog = _interopRequireDefault(require("./BaseDialog"));

var _DialogButtons = _interopRequireDefault(require("../elements/DialogButtons"));

var _Field = _interopRequireDefault(require("../elements/Field"));

var _Spinner = _interopRequireDefault(require("../elements/Spinner"));

var _dec, _class;

const MODERATED_BY_STATE_EVENT_TYPE = ["org.matrix.msc3215.room.moderation.moderated_by"
/**
 * Unprefixed state event. Not ready for prime time.
 *
 * "m.room.moderation.moderated_by"
 */
];
const ABUSE_EVENT_TYPE = "org.matrix.msc3215.abuse.report"; // Standard abuse natures.

var Nature;

(function (Nature) {
  Nature["Disagreement"] = "org.matrix.msc3215.abuse.nature.disagreement";
  Nature["Toxic"] = "org.matrix.msc3215.abuse.nature.toxic";
  Nature["Illegal"] = "org.matrix.msc3215.abuse.nature.illegal";
  Nature["Spam"] = "org.matrix.msc3215.abuse.nature.spam";
  Nature["Other"] = "org.matrix.msc3215.abuse.nature.other";
})(Nature || (Nature = {}));

var NonStandardValue;

(function (NonStandardValue) {
  NonStandardValue["Admin"] = "non-standard.abuse.nature.admin";
})(NonStandardValue || (NonStandardValue = {}));

let ReportEventDialog = (
/*
 * A dialog for reporting an event.
 *
 * The actual content of the dialog will depend on two things:
 *
 * 1. Is `feature_report_to_moderators` enabled?
 * 2. Does the room support moderation as per MSC3215, i.e. is there
 *    a well-formed state event `m.room.moderation.moderated_by`
 *    /`org.matrix.msc3215.room.moderation.moderated_by`?
 */
_dec = (0, _replaceableComponent.replaceableComponent)("views.dialogs.ReportEventDialog"), _dec(_class = class ReportEventDialog extends _react.default.Component {
  // If the room supports moderation, the moderation information.
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "moderation", void 0);
    (0, _defineProperty2.default)(this, "onReasonChange", ({
      target: {
        value: reason
      }
    }) => {
      this.setState({
        reason
      });
    });
    (0, _defineProperty2.default)(this, "onNatureChosen", e => {
      this.setState({
        nature: e.currentTarget.value
      });
    });
    (0, _defineProperty2.default)(this, "onCancel", () => {
      this.props.onFinished(false);
    });
    (0, _defineProperty2.default)(this, "onSubmit", async () => {
      let reason = this.state.reason || "";
      reason = reason.trim();

      if (this.moderation) {
        // This room supports moderation.
        // We need a nature.
        // If the nature is `NATURE.OTHER` or `NON_STANDARD_NATURE.ADMIN`, we also need a `reason`.
        if (!this.state.nature || (this.state.nature == Nature.Other || this.state.nature == NonStandardValue.Admin) && !reason) {
          this.setState({
            err: (0, _languageHandler._t)("Please fill why you're reporting.")
          });
          return;
        }
      } else {
        // This room does not support moderation.
        // We need a `reason`.
        if (!reason) {
          this.setState({
            err: (0, _languageHandler._t)("Please fill why you're reporting.")
          });
          return;
        }
      }

      this.setState({
        busy: true,
        err: null
      });

      try {
        const client = _MatrixClientPeg.MatrixClientPeg.get();

        const ev = this.props.mxEvent;

        if (this.moderation && this.state.nature != NonStandardValue.Admin) {
          const nature = this.state.nature; // Report to moderators through to the dedicated bot,
          // as configured in the room's state events.

          const dmRoomId = await (0, _createRoom.ensureDMExists)(client, this.moderation.moderationBotUserId);
          await client.sendEvent(dmRoomId, ABUSE_EVENT_TYPE, {
            event_id: ev.getId(),
            room_id: ev.getRoomId(),
            moderated_by_id: this.moderation.moderationRoomId,
            nature,
            reporter: client.getUserId(),
            comment: this.state.reason.trim()
          });
        } else {
          // Report to homeserver admin through the dedicated Matrix API.
          await client.reportEvent(ev.getRoomId(), ev.getId(), -100, this.state.reason.trim());
        }

        this.props.onFinished(true);
      } catch (e) {
        this.setState({
          busy: false,
          err: e.message
        });
      }
    });
    let moderatedByRoomId = null;
    let moderatedByUserId = null;

    if (_SettingsStore.default.getValue("feature_report_to_moderators")) {
      // The client supports reporting to moderators.
      // Does the room support it, too?
      // Extract state events to determine whether we should display
      const client = _MatrixClientPeg.MatrixClientPeg.get();

      const room = client.getRoom(props.mxEvent.getRoomId());

      for (const stateEventType of MODERATED_BY_STATE_EVENT_TYPE) {
        const stateEvent = room.currentState.getStateEvents(stateEventType, stateEventType);

        if (!stateEvent) {
          continue;
        }

        if (Array.isArray(stateEvent)) {
          // Internal error.
          throw new TypeError(`getStateEvents(${stateEventType}, ${stateEventType}) ` + "should return at most one state event");
        }

        const event = stateEvent.event;

        if (!("content" in event) || typeof event["content"] != "object") {
          // The room is improperly configured.
          // Display this debug message for the sake of moderators.
          console.debug("Moderation error", "state event", stateEventType, "should have an object field `content`, got", event);
          continue;
        }

        const content = event["content"];

        if (!("room_id" in content) || typeof content["room_id"] != "string") {
          // The room is improperly configured.
          // Display this debug message for the sake of moderators.
          console.debug("Moderation error", "state event", stateEventType, "should have a string field `content.room_id`, got", event);
          continue;
        }

        if (!("user_id" in content) || typeof content["user_id"] != "string") {
          // The room is improperly configured.
          // Display this debug message for the sake of moderators.
          console.debug("Moderation error", "state event", stateEventType, "should have a string field `content.user_id`, got", event);
          continue;
        }

        moderatedByRoomId = content["room_id"];
        moderatedByUserId = content["user_id"];
      }

      if (moderatedByRoomId && moderatedByUserId) {
        // The room supports moderation.
        this.moderation = {
          moderationRoomId: moderatedByRoomId,
          moderationBotUserId: moderatedByUserId
        };
      }
    }

    this.state = {
      // A free-form text describing the abuse.
      reason: "",
      busy: false,
      err: null,
      // If specified, the nature of the abuse, as specified by MSC3215.
      nature: null
    };
  } // The user has written down a freeform description of the abuse.


  render() {
    let error = null;

    if (this.state.err) {
      error = /*#__PURE__*/_react.default.createElement("div", {
        className: "error"
      }, this.state.err);
    }

    let progress = null;

    if (this.state.busy) {
      progress = /*#__PURE__*/_react.default.createElement("div", {
        className: "progress"
      }, /*#__PURE__*/_react.default.createElement(_Spinner.default, null));
    }

    const adminMessageMD = _SdkConfig.default.get().reportEvent && _SdkConfig.default.get().reportEvent.adminMessageMD;

    let adminMessage;

    if (adminMessageMD) {
      const html = new _Markdown.default(adminMessageMD).toHTML({
        externalLinks: true
      });
      adminMessage = /*#__PURE__*/_react.default.createElement("p", {
        dangerouslySetInnerHTML: {
          __html: html
        }
      });
    }

    if (this.moderation) {
      // Display report-to-moderator dialog.
      // We let the user pick a nature.
      const client = _MatrixClientPeg.MatrixClientPeg.get();

      const homeServerName = _SdkConfig.default.get()["validated_server_config"].hsName;

      let subtitle;

      switch (this.state.nature) {
        case Nature.Disagreement:
          subtitle = (0, _languageHandler._t)("What this user is writing is wrong.\n" + "This will be reported to the room moderators.");
          break;

        case Nature.Toxic:
          subtitle = (0, _languageHandler._t)("This user is displaying toxic behaviour, " + "for instance by insulting other users or sharing " + " adult-only content in a family-friendly room " + " or otherwise violating the rules of this room.\n" + "This will be reported to the room moderators.");
          break;

        case Nature.Illegal:
          subtitle = (0, _languageHandler._t)("This user is displaying illegal behaviour, " + "for instance by doxing people or threatening violence.\n" + "This will be reported to the room moderators who may escalate this to legal authorities.");
          break;

        case Nature.Spam:
          subtitle = (0, _languageHandler._t)("This user is spamming the room with ads, links to ads or to propaganda.\n" + "This will be reported to the room moderators.");
          break;

        case NonStandardValue.Admin:
          if (client.isRoomEncrypted(this.props.mxEvent.getRoomId())) {
            subtitle = (0, _languageHandler._t)("This room is dedicated to illegal or toxic content " + "or the moderators fail to moderate illegal or toxic content.\n" + "This will be reported to the administrators of %(homeserver)s. " + "The administrators will NOT be able to read the encrypted content of this room.", {
              homeserver: homeServerName
            });
          } else {
            subtitle = (0, _languageHandler._t)("This room is dedicated to illegal or toxic content " + "or the moderators fail to moderate illegal or toxic content.\n" + " This will be reported to the administrators of %(homeserver)s.", {
              homeserver: homeServerName
            });
          }

          break;

        case Nature.Other:
          subtitle = (0, _languageHandler._t)("Any other reason. Please describe the problem.\n" + "This will be reported to the room moderators.");
          break;

        default:
          subtitle = (0, _languageHandler._t)("Please pick a nature and describe what makes this message abusive.");
          break;
      }

      return /*#__PURE__*/_react.default.createElement(_BaseDialog.default, {
        className: "mx_ReportEventDialog",
        onFinished: this.props.onFinished,
        title: (0, _languageHandler._t)('Report Content'),
        contentId: "mx_ReportEventDialog"
      }, /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_StyledRadioButton.default, {
        name: "nature",
        value: Nature.Disagreement,
        checked: this.state.nature == Nature.Disagreement,
        onChange: this.onNatureChosen
      }, (0, _languageHandler._t)('Disagree')), /*#__PURE__*/_react.default.createElement(_StyledRadioButton.default, {
        name: "nature",
        value: Nature.Toxic,
        checked: this.state.nature == Nature.Toxic,
        onChange: this.onNatureChosen
      }, (0, _languageHandler._t)('Toxic Behaviour')), /*#__PURE__*/_react.default.createElement(_StyledRadioButton.default, {
        name: "nature",
        value: Nature.Illegal,
        checked: this.state.nature == Nature.Illegal,
        onChange: this.onNatureChosen
      }, (0, _languageHandler._t)('Illegal Content')), /*#__PURE__*/_react.default.createElement(_StyledRadioButton.default, {
        name: "nature",
        value: Nature.Spam,
        checked: this.state.nature == Nature.Spam,
        onChange: this.onNatureChosen
      }, (0, _languageHandler._t)('Spam or propaganda')), /*#__PURE__*/_react.default.createElement(_StyledRadioButton.default, {
        name: "nature",
        value: NonStandardValue.Admin,
        checked: this.state.nature == NonStandardValue.Admin,
        onChange: this.onNatureChosen
      }, (0, _languageHandler._t)('Report the entire room')), /*#__PURE__*/_react.default.createElement(_StyledRadioButton.default, {
        name: "nature",
        value: Nature.Other,
        checked: this.state.nature == Nature.Other,
        onChange: this.onNatureChosen
      }, (0, _languageHandler._t)('Other')), /*#__PURE__*/_react.default.createElement("p", null, subtitle), /*#__PURE__*/_react.default.createElement(_Field.default, {
        className: "mx_ReportEventDialog_reason",
        element: "textarea",
        label: (0, _languageHandler._t)("Reason"),
        rows: 5,
        onChange: this.onReasonChange,
        value: this.state.reason,
        disabled: this.state.busy
      }), progress, error), /*#__PURE__*/_react.default.createElement(_DialogButtons.default, {
        primaryButton: (0, _languageHandler._t)("Send report"),
        onPrimaryButtonClick: this.onSubmit,
        focus: true,
        onCancel: this.onCancel,
        disabled: this.state.busy
      }));
    } // Report to homeserver admin.
    // Currently, the API does not support natures.


    return /*#__PURE__*/_react.default.createElement(_BaseDialog.default, {
      className: "mx_ReportEventDialog",
      onFinished: this.props.onFinished,
      title: (0, _languageHandler._t)('Report Content to Your Homeserver Administrator'),
      contentId: "mx_ReportEventDialog"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_ReportEventDialog",
      id: "mx_ReportEventDialog"
    }, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Reporting this message will send its unique 'event ID' to the administrator of " + "your homeserver. If messages in this room are encrypted, your homeserver " + "administrator will not be able to read the message text or view any files " + "or images.")), adminMessage, /*#__PURE__*/_react.default.createElement(_Field.default, {
      className: "mx_ReportEventDialog_reason",
      element: "textarea",
      label: (0, _languageHandler._t)("Reason"),
      rows: 5,
      onChange: this.onReasonChange,
      value: this.state.reason,
      disabled: this.state.busy
    }), progress, error), /*#__PURE__*/_react.default.createElement(_DialogButtons.default, {
      primaryButton: (0, _languageHandler._t)("Send report"),
      onPrimaryButtonClick: this.onSubmit,
      focus: true,
      onCancel: this.onCancel,
      disabled: this.state.busy
    }));
  }

}) || _class);
exports.default = ReportEventDialog;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL2RpYWxvZ3MvUmVwb3J0RXZlbnREaWFsb2cudHN4Il0sIm5hbWVzIjpbIk1PREVSQVRFRF9CWV9TVEFURV9FVkVOVF9UWVBFIiwiQUJVU0VfRVZFTlRfVFlQRSIsIk5hdHVyZSIsIk5vblN0YW5kYXJkVmFsdWUiLCJSZXBvcnRFdmVudERpYWxvZyIsIlJlYWN0IiwiQ29tcG9uZW50IiwiY29uc3RydWN0b3IiLCJwcm9wcyIsInRhcmdldCIsInZhbHVlIiwicmVhc29uIiwic2V0U3RhdGUiLCJlIiwibmF0dXJlIiwiY3VycmVudFRhcmdldCIsIm9uRmluaXNoZWQiLCJzdGF0ZSIsInRyaW0iLCJtb2RlcmF0aW9uIiwiT3RoZXIiLCJBZG1pbiIsImVyciIsImJ1c3kiLCJjbGllbnQiLCJNYXRyaXhDbGllbnRQZWciLCJnZXQiLCJldiIsIm14RXZlbnQiLCJkbVJvb21JZCIsIm1vZGVyYXRpb25Cb3RVc2VySWQiLCJzZW5kRXZlbnQiLCJldmVudF9pZCIsImdldElkIiwicm9vbV9pZCIsImdldFJvb21JZCIsIm1vZGVyYXRlZF9ieV9pZCIsIm1vZGVyYXRpb25Sb29tSWQiLCJyZXBvcnRlciIsImdldFVzZXJJZCIsImNvbW1lbnQiLCJyZXBvcnRFdmVudCIsIm1lc3NhZ2UiLCJtb2RlcmF0ZWRCeVJvb21JZCIsIm1vZGVyYXRlZEJ5VXNlcklkIiwiU2V0dGluZ3NTdG9yZSIsImdldFZhbHVlIiwicm9vbSIsImdldFJvb20iLCJzdGF0ZUV2ZW50VHlwZSIsInN0YXRlRXZlbnQiLCJjdXJyZW50U3RhdGUiLCJnZXRTdGF0ZUV2ZW50cyIsIkFycmF5IiwiaXNBcnJheSIsIlR5cGVFcnJvciIsImV2ZW50IiwiY29uc29sZSIsImRlYnVnIiwiY29udGVudCIsInJlbmRlciIsImVycm9yIiwicHJvZ3Jlc3MiLCJhZG1pbk1lc3NhZ2VNRCIsIlNka0NvbmZpZyIsImFkbWluTWVzc2FnZSIsImh0bWwiLCJNYXJrZG93biIsInRvSFRNTCIsImV4dGVybmFsTGlua3MiLCJfX2h0bWwiLCJob21lU2VydmVyTmFtZSIsImhzTmFtZSIsInN1YnRpdGxlIiwiRGlzYWdyZWVtZW50IiwiVG94aWMiLCJJbGxlZ2FsIiwiU3BhbSIsImlzUm9vbUVuY3J5cHRlZCIsImhvbWVzZXJ2ZXIiLCJvbk5hdHVyZUNob3NlbiIsIm9uUmVhc29uQ2hhbmdlIiwib25TdWJtaXQiLCJvbkNhbmNlbCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFnQkE7O0FBQ0E7O0FBQ0E7O0FBR0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7QUFlQSxNQUFNQSw2QkFBNkIsR0FBRyxDQUNsQztBQUNBO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFOc0MsQ0FBdEM7QUFTQSxNQUFNQyxnQkFBZ0IsR0FBRyxpQ0FBekIsQyxDQUVBOztJQUNLQyxNOztXQUFBQSxNO0FBQUFBLEVBQUFBLE07QUFBQUEsRUFBQUEsTTtBQUFBQSxFQUFBQSxNO0FBQUFBLEVBQUFBLE07QUFBQUEsRUFBQUEsTTtHQUFBQSxNLEtBQUFBLE07O0lBUUFDLGdCOztXQUFBQSxnQjtBQUFBQSxFQUFBQSxnQjtHQUFBQSxnQixLQUFBQSxnQjs7SUEwQmdCQyxpQjtBQVhyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtPQUNDLGdEQUFxQixpQ0FBckIsQyxnQkFBRCxNQUNxQkEsaUJBRHJCLFNBQytDQyxlQUFNQyxTQURyRCxDQUMrRTtBQUMzRTtBQUdBQyxFQUFBQSxXQUFXLENBQUNDLEtBQUQsRUFBZ0I7QUFDdkIsVUFBTUEsS0FBTjtBQUR1QjtBQUFBLDBEQXVFRixDQUFDO0FBQUVDLE1BQUFBLE1BQU0sRUFBRTtBQUFFQyxRQUFBQSxLQUFLLEVBQUVDO0FBQVQ7QUFBVixLQUFELEtBQXlDO0FBQzlELFdBQUtDLFFBQUwsQ0FBYztBQUFFRCxRQUFBQTtBQUFGLE9BQWQ7QUFDSCxLQXpFMEI7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QjtBQUdJLE1BQUEsS0FBSyxFQUFFLHlCQUFHLGlEQUFILENBSFg7QUFJSSxNQUFBLFNBQVMsRUFBQztBQUpkLG9CQU1JO0FBQUssTUFBQSxTQUFTLEVBQUMsc0JBQWY7QUFBc0MsTUFBQSxFQUFFLEVBQUM7QUFBekMsb0JBQ0ksd0NBRVEseUJBQUcsb0ZBQ0MsMkVBREQsR0FFQyw0RUFGRCxHQUdDLFlBSEosQ0FGUixDQURKLEVBU01pRCxZQVROLGVBVUksNkJBQUMsY0FBRDtBQUNJLE1BQUEsU0FBUyxFQUFDLDZCQURkO0FBRUksTUFBQSxPQUFPLEVBQUMsVUFGWjtBQUdJLE1BQUEsS0FBSyxFQUFFLHlCQUFHLFFBQUgsQ0FIWDtBQUlJLE1BQUEsSUFBSSxFQUFFLENBSlY7QUFLSSxNQUFBLFFBQVEsRUFBRSxLQUFLZ0IsY0FMbkI7QUFNSSxNQUFBLEtBQUssRUFBRSxLQUFLaEUsS0FBTCxDQUFXTixNQU50QjtBQU9JLE1BQUEsUUFBUSxFQUFFLEtBQUtNLEtBQUwsQ0FBV007QUFQekIsTUFWSixFQW1CTXVDLFFBbkJOLEVBb0JNRCxLQXBCTixDQU5KLGVBNEJJLDZCQUFDLHNCQUFEO0FBQ0ksTUFBQSxhQUFhLEVBQUUseUJBQUcsYUFBSCxDQURuQjtBQUVJLE1BQUEsb0JBQW9CLEVBQUUsS0FBS3FCLFFBRi9CO0FBR0ksTUFBQSxLQUFLLEVBQUUsSUFIWDtBQUlJLE1BQUEsUUFBUSxFQUFFLEtBQUtDLFFBSm5CO0FBS0ksTUFBQSxRQUFRLEVBQUUsS0FBS2xFLEtBQUwsQ0FBV007QUFMekIsTUE1QkosQ0FESjtBQXNDSDs7QUE3VjBFLEMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuQ29weXJpZ2h0IDIwMTkgTWljaGFlbCBUZWxhdHluc2tpIDw3dDNjaGd1eUBnbWFpbC5jb20+XG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IF90IH0gZnJvbSAnLi4vLi4vLi4vbGFuZ3VhZ2VIYW5kbGVyJztcbmltcG9ydCB7IGVuc3VyZURNRXhpc3RzIH0gZnJvbSBcIi4uLy4uLy4uL2NyZWF0ZVJvb21cIjtcbmltcG9ydCB7IElEaWFsb2dQcm9wcyB9IGZyb20gXCIuL0lEaWFsb2dQcm9wc1wiO1xuaW1wb3J0IHsgTWF0cml4RXZlbnQgfSBmcm9tIFwibWF0cml4LWpzLXNkay9zcmMvbW9kZWxzL2V2ZW50XCI7XG5pbXBvcnQgeyBNYXRyaXhDbGllbnRQZWcgfSBmcm9tIFwiLi4vLi4vLi4vTWF0cml4Q2xpZW50UGVnXCI7XG5pbXBvcnQgU2RrQ29uZmlnIGZyb20gJy4uLy4uLy4uL1Nka0NvbmZpZyc7XG5pbXBvcnQgTWFya2Rvd24gZnJvbSAnLi4vLi4vLi4vTWFya2Rvd24nO1xuaW1wb3J0IHsgcmVwbGFjZWFibGVDb21wb25lbnQgfSBmcm9tIFwiLi4vLi4vLi4vdXRpbHMvcmVwbGFjZWFibGVDb21wb25lbnRcIjtcbmltcG9ydCBTZXR0aW5nc1N0b3JlIGZyb20gXCIuLi8uLi8uLi9zZXR0aW5ncy9TZXR0aW5nc1N0b3JlXCI7XG5pbXBvcnQgU3R5bGVkUmFkaW9CdXR0b24gZnJvbSBcIi4uL2VsZW1lbnRzL1N0eWxlZFJhZGlvQnV0dG9uXCI7XG5pbXBvcnQgQmFzZURpYWxvZyBmcm9tIFwiLi9CYXNlRGlhbG9nXCI7XG5pbXBvcnQgRGlhbG9nQnV0dG9ucyBmcm9tIFwiLi4vZWxlbWVudHMvRGlhbG9nQnV0dG9uc1wiO1xuaW1wb3J0IEZpZWxkIGZyb20gXCIuLi9lbGVtZW50cy9GaWVsZFwiO1xuaW1wb3J0IFNwaW5uZXIgZnJvbSBcIi4uL2VsZW1lbnRzL1NwaW5uZXJcIjtcblxuaW50ZXJmYWNlIElQcm9wcyBleHRlbmRzIElEaWFsb2dQcm9wcyB7XG4gICAgbXhFdmVudDogTWF0cml4RXZlbnQ7XG59XG5cbmludGVyZmFjZSBJU3RhdGUge1xuICAgIC8vIEEgZnJlZS1mb3JtIHRleHQgZGVzY3JpYmluZyB0aGUgYWJ1c2UuXG4gICAgcmVhc29uOiBzdHJpbmc7XG4gICAgYnVzeTogYm9vbGVhbjtcbiAgICBlcnI/OiBzdHJpbmc7XG4gICAgLy8gSWYgd2Uga25vdyBpdCwgdGhlIG5hdHVyZSBvZiB0aGUgYWJ1c2UsIGFzIHNwZWNpZmllZCBieSBNU0MzMjE1LlxuICAgIG5hdHVyZT86IEV4dGVuZGVkTmF0dXJlO1xufVxuXG5jb25zdCBNT0RFUkFURURfQllfU1RBVEVfRVZFTlRfVFlQRSA9IFtcbiAgICBcIm9yZy5tYXRyaXgubXNjMzIxNS5yb29tLm1vZGVyYXRpb24ubW9kZXJhdGVkX2J5XCIsXG4gICAgLyoqXG4gICAgICogVW5wcmVmaXhlZCBzdGF0ZSBldmVudC4gTm90IHJlYWR5IGZvciBwcmltZSB0aW1lLlxuICAgICAqXG4gICAgICogXCJtLnJvb20ubW9kZXJhdGlvbi5tb2RlcmF0ZWRfYnlcIlxuICAgICAqL1xuXTtcblxuY29uc3QgQUJVU0VfRVZFTlRfVFlQRSA9IFwib3JnLm1hdHJpeC5tc2MzMjE1LmFidXNlLnJlcG9ydFwiO1xuXG4vLyBTdGFuZGFyZCBhYnVzZSBuYXR1cmVzLlxuZW51bSBOYXR1cmUge1xuICAgIERpc2FncmVlbWVudCA9IFwib3JnLm1hdHJpeC5tc2MzMjE1LmFidXNlLm5hdHVyZS5kaXNhZ3JlZW1lbnRcIixcbiAgICBUb3hpYyA9IFwib3JnLm1hdHJpeC5tc2MzMjE1LmFidXNlLm5hdHVyZS50b3hpY1wiLFxuICAgIElsbGVnYWwgPSBcIm9yZy5tYXRyaXgubXNjMzIxNS5hYnVzZS5uYXR1cmUuaWxsZWdhbFwiLFxuICAgIFNwYW0gPSBcIm9yZy5tYXRyaXgubXNjMzIxNS5hYnVzZS5uYXR1cmUuc3BhbVwiLFxuICAgIE90aGVyID0gXCJvcmcubWF0cml4Lm1zYzMyMTUuYWJ1c2UubmF0dXJlLm90aGVyXCIsXG59XG5cbmVudW0gTm9uU3RhbmRhcmRWYWx1ZSB7XG4gICAgLy8gTm9uLXN0YW5kYXJkIGFidXNlIG5hdHVyZS5cbiAgICAvLyBJdCBzaG91bGQgbmV2ZXIgbGVhdmUgdGhlIGNsaWVudCAtIHdlIHVzZSBpdCB0byBmYWxsYmFjayB0b1xuICAgIC8vIHNlcnZlci13aWRlIGFidXNlIHJlcG9ydGluZy5cbiAgICBBZG1pbiA9IFwibm9uLXN0YW5kYXJkLmFidXNlLm5hdHVyZS5hZG1pblwiXG59XG5cbnR5cGUgRXh0ZW5kZWROYXR1cmUgPSBOYXR1cmUgfCBOb25TdGFuZGFyZFZhbHVlO1xuXG50eXBlIE1vZGVyYXRpb24gPSB7XG4gICAgLy8gVGhlIGlkIG9mIHRoZSBtb2RlcmF0aW9uIHJvb20uXG4gICAgbW9kZXJhdGlvblJvb21JZDogc3RyaW5nO1xuICAgIC8vIFRoZSBpZCBvZiB0aGUgYm90IGluIGNoYXJnZSBvZiBmb3J3YXJkaW5nIGFidXNlIHJlcG9ydHMgdG8gdGhlIG1vZGVyYXRpb24gcm9vbS5cbiAgICBtb2RlcmF0aW9uQm90VXNlcklkOiBzdHJpbmc7XG59O1xuLypcbiAqIEEgZGlhbG9nIGZvciByZXBvcnRpbmcgYW4gZXZlbnQuXG4gKlxuICogVGhlIGFjdHVhbCBjb250ZW50IG9mIHRoZSBkaWFsb2cgd2lsbCBkZXBlbmQgb24gdHdvIHRoaW5nczpcbiAqXG4gKiAxLiBJcyBgZmVhdHVyZV9yZXBvcnRfdG9fbW9kZXJhdG9yc2AgZW5hYmxlZD9cbiAqIDIuIERvZXMgdGhlIHJvb20gc3VwcG9ydCBtb2RlcmF0aW9uIGFzIHBlciBNU0MzMjE1LCBpLmUuIGlzIHRoZXJlXG4gKiAgICBhIHdlbGwtZm9ybWVkIHN0YXRlIGV2ZW50IGBtLnJvb20ubW9kZXJhdGlvbi5tb2RlcmF0ZWRfYnlgXG4gKiAgICAvYG9yZy5tYXRyaXgubXNjMzIxNS5yb29tLm1vZGVyYXRpb24ubW9kZXJhdGVkX2J5YD9cbiAqL1xuQHJlcGxhY2VhYmxlQ29tcG9uZW50KFwidmlld3MuZGlhbG9ncy5SZXBvcnRFdmVudERpYWxvZ1wiKVxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVwb3J0RXZlbnREaWFsb2cgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8SVByb3BzLCBJU3RhdGU+IHtcbiAgICAvLyBJZiB0aGUgcm9vbSBzdXBwb3J0cyBtb2RlcmF0aW9uLCB0aGUgbW9kZXJhdGlvbiBpbmZvcm1hdGlvbi5cbiAgICBwcml2YXRlIG1vZGVyYXRpb24/OiBNb2RlcmF0aW9uO1xuXG4gICAgY29uc3RydWN0b3IocHJvcHM6IElQcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG5cbiAgICAgICAgbGV0IG1vZGVyYXRlZEJ5Um9vbUlkID0gbnVsbDtcbiAgICAgICAgbGV0IG1vZGVyYXRlZEJ5VXNlcklkID0gbnVsbDtcblxuICAgICAgICBpZiAoU2V0dGluZ3NTdG9yZS5nZXRWYWx1ZShcImZlYXR1cmVfcmVwb3J0X3RvX21vZGVyYXRvcnNcIikpIHtcbiAgICAgICAgICAgIC8vIFRoZSBjbGllbnQgc3VwcG9ydHMgcmVwb3J0aW5nIHRvIG1vZGVyYXRvcnMuXG4gICAgICAgICAgICAvLyBEb2VzIHRoZSByb29tIHN1cHBvcnQgaXQsIHRvbz9cblxuICAgICAgICAgICAgLy8gRXh0cmFjdCBzdGF0ZSBldmVudHMgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgd2Ugc2hvdWxkIGRpc3BsYXlcbiAgICAgICAgICAgIGNvbnN0IGNsaWVudCA9IE1hdHJpeENsaWVudFBlZy5nZXQoKTtcbiAgICAgICAgICAgIGNvbnN0IHJvb20gPSBjbGllbnQuZ2V0Um9vbShwcm9wcy5teEV2ZW50LmdldFJvb21JZCgpKTtcblxuICAgICAgICAgICAgZm9yIChjb25zdCBzdGF0ZUV2ZW50VHlwZSBvZiBNT0RFUkFURURfQllfU1RBVEVfRVZFTlRfVFlQRSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0YXRlRXZlbnQgPSByb29tLmN1cnJlbnRTdGF0ZS5nZXRTdGF0ZUV2ZW50cyhzdGF0ZUV2ZW50VHlwZSwgc3RhdGVFdmVudFR5cGUpO1xuICAgICAgICAgICAgICAgIGlmICghc3RhdGVFdmVudCkge1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoc3RhdGVFdmVudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSW50ZXJuYWwgZXJyb3IuXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYGdldFN0YXRlRXZlbnRzKCR7c3RhdGVFdmVudFR5cGV9LCAke3N0YXRlRXZlbnRUeXBlfSkgYCArXG4gICAgICAgICAgICAgICAgICAgICAgICBcInNob3VsZCByZXR1cm4gYXQgbW9zdCBvbmUgc3RhdGUgZXZlbnRcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IGV2ZW50ID0gc3RhdGVFdmVudC5ldmVudDtcbiAgICAgICAgICAgICAgICBpZiAoIShcImNvbnRlbnRcIiBpbiBldmVudCkgfHwgdHlwZW9mIGV2ZW50W1wiY29udGVudFwiXSAhPSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZSByb29tIGlzIGltcHJvcGVybHkgY29uZmlndXJlZC5cbiAgICAgICAgICAgICAgICAgICAgLy8gRGlzcGxheSB0aGlzIGRlYnVnIG1lc3NhZ2UgZm9yIHRoZSBzYWtlIG9mIG1vZGVyYXRvcnMuXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZGVidWcoXCJNb2RlcmF0aW9uIGVycm9yXCIsIFwic3RhdGUgZXZlbnRcIiwgc3RhdGVFdmVudFR5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBcInNob3VsZCBoYXZlIGFuIG9iamVjdCBmaWVsZCBgY29udGVudGAsIGdvdFwiLCBldmVudCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBjb250ZW50ID0gZXZlbnRbXCJjb250ZW50XCJdO1xuICAgICAgICAgICAgICAgIGlmICghKFwicm9vbV9pZFwiIGluIGNvbnRlbnQpIHx8IHR5cGVvZiBjb250ZW50W1wicm9vbV9pZFwiXSAhPSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZSByb29tIGlzIGltcHJvcGVybHkgY29uZmlndXJlZC5cbiAgICAgICAgICAgICAgICAgICAgLy8gRGlzcGxheSB0aGlzIGRlYnVnIG1lc3NhZ2UgZm9yIHRoZSBzYWtlIG9mIG1vZGVyYXRvcnMuXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZGVidWcoXCJNb2RlcmF0aW9uIGVycm9yXCIsIFwic3RhdGUgZXZlbnRcIiwgc3RhdGVFdmVudFR5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBcInNob3VsZCBoYXZlIGEgc3RyaW5nIGZpZWxkIGBjb250ZW50LnJvb21faWRgLCBnb3RcIiwgZXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCEoXCJ1c2VyX2lkXCIgaW4gY29udGVudCkgfHwgdHlwZW9mIGNvbnRlbnRbXCJ1c2VyX2lkXCJdICE9IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlIHJvb20gaXMgaW1wcm9wZXJseSBjb25maWd1cmVkLlxuICAgICAgICAgICAgICAgICAgICAvLyBEaXNwbGF5IHRoaXMgZGVidWcgbWVzc2FnZSBmb3IgdGhlIHNha2Ugb2YgbW9kZXJhdG9ycy5cbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5kZWJ1ZyhcIk1vZGVyYXRpb24gZXJyb3JcIiwgXCJzdGF0ZSBldmVudFwiLCBzdGF0ZUV2ZW50VHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwic2hvdWxkIGhhdmUgYSBzdHJpbmcgZmllbGQgYGNvbnRlbnQudXNlcl9pZGAsIGdvdFwiLCBldmVudCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBtb2RlcmF0ZWRCeVJvb21JZCA9IGNvbnRlbnRbXCJyb29tX2lkXCJdO1xuICAgICAgICAgICAgICAgIG1vZGVyYXRlZEJ5VXNlcklkID0gY29udGVudFtcInVzZXJfaWRcIl07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChtb2RlcmF0ZWRCeVJvb21JZCAmJiBtb2RlcmF0ZWRCeVVzZXJJZCkge1xuICAgICAgICAgICAgICAgIC8vIFRoZSByb29tIHN1cHBvcnRzIG1vZGVyYXRpb24uXG4gICAgICAgICAgICAgICAgdGhpcy5tb2RlcmF0aW9uID0ge1xuICAgICAgICAgICAgICAgICAgICBtb2RlcmF0aW9uUm9vbUlkOiBtb2RlcmF0ZWRCeVJvb21JZCxcbiAgICAgICAgICAgICAgICAgICAgbW9kZXJhdGlvbkJvdFVzZXJJZDogbW9kZXJhdGVkQnlVc2VySWQsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICAvLyBBIGZyZWUtZm9ybSB0ZXh0IGRlc2NyaWJpbmcgdGhlIGFidXNlLlxuICAgICAgICAgICAgcmVhc29uOiBcIlwiLFxuICAgICAgICAgICAgYnVzeTogZmFsc2UsXG4gICAgICAgICAgICBlcnI6IG51bGwsXG4gICAgICAgICAgICAvLyBJZiBzcGVjaWZpZWQsIHRoZSBuYXR1cmUgb2YgdGhlIGFidXNlLCBhcyBzcGVjaWZpZWQgYnkgTVNDMzIxNS5cbiAgICAgICAgICAgIG5hdHVyZTogbnVsbCxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBUaGUgdXNlciBoYXMgd3JpdHRlbiBkb3duIGEgZnJlZWZvcm0gZGVzY3JpcHRpb24gb2YgdGhlIGFidXNlLlxuICAgIHByaXZhdGUgb25SZWFzb25DaGFuZ2UgPSAoeyB0YXJnZXQ6IHsgdmFsdWU6IHJlYXNvbiB9IH0pOiB2b2lkID0+IHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHJlYXNvbiB9KTtcbiAgICB9O1xuXG4gICAgLy8gVGhlIHVzZXIgaGFzIGNsaWNrZWQgb24gYSBuYXR1cmUuXG4gICAgcHJpdmF0ZSBvbk5hdHVyZUNob3NlbiA9IChlOiBSZWFjdC5Gb3JtRXZlbnQ8SFRNTElucHV0RWxlbWVudD4pOiB2b2lkID0+IHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IG5hdHVyZTogZS5jdXJyZW50VGFyZ2V0LnZhbHVlIGFzIEV4dGVuZGVkTmF0dXJlIH0pO1xuICAgIH07XG5cbiAgICAvLyBUaGUgdXNlciBoYXMgY2xpY2tlZCBcImNhbmNlbFwiLlxuICAgIHByaXZhdGUgb25DYW5jZWwgPSAoKTogdm9pZCA9PiB7XG4gICAgICAgIHRoaXMucHJvcHMub25GaW5pc2hlZChmYWxzZSk7XG4gICAgfTtcblxuICAgIC8vIFRoZSB1c2VyIGhhcyBjbGlja2VkIFwic3VibWl0XCIuXG4gICAgcHJpdmF0ZSBvblN1Ym1pdCA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgbGV0IHJlYXNvbiA9IHRoaXMuc3RhdGUucmVhc29uIHx8IFwiXCI7XG4gICAgICAgIHJlYXNvbiA9IHJlYXNvbi50cmltKCk7XG4gICAgICAgIGlmICh0aGlzLm1vZGVyYXRpb24pIHtcbiAgICAgICAgICAgIC8vIFRoaXMgcm9vbSBzdXBwb3J0cyBtb2RlcmF0aW9uLlxuICAgICAgICAgICAgLy8gV2UgbmVlZCBhIG5hdHVyZS5cbiAgICAgICAgICAgIC8vIElmIHRoZSBuYXR1cmUgaXMgYE5BVFVSRS5PVEhFUmAgb3IgYE5PTl9TVEFOREFSRF9OQVRVUkUuQURNSU5gLCB3ZSBhbHNvIG5lZWQgYSBgcmVhc29uYC5cbiAgICAgICAgICAgIGlmICghdGhpcy5zdGF0ZS5uYXR1cmUgfHxcbiAgICAgICAgICAgICAgICAgICAgKCh0aGlzLnN0YXRlLm5hdHVyZSA9PSBOYXR1cmUuT3RoZXIgfHwgdGhpcy5zdGF0ZS5uYXR1cmUgPT0gTm9uU3RhbmRhcmRWYWx1ZS5BZG1pbilcbiAgICAgICAgICAgICAgICAgICAgICAgICYmICFyZWFzb24pXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgZXJyOiBfdChcIlBsZWFzZSBmaWxsIHdoeSB5b3UncmUgcmVwb3J0aW5nLlwiKSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBUaGlzIHJvb20gZG9lcyBub3Qgc3VwcG9ydCBtb2RlcmF0aW9uLlxuICAgICAgICAgICAgLy8gV2UgbmVlZCBhIGByZWFzb25gLlxuICAgICAgICAgICAgaWYgKCFyZWFzb24pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgZXJyOiBfdChcIlBsZWFzZSBmaWxsIHdoeSB5b3UncmUgcmVwb3J0aW5nLlwiKSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGJ1c3k6IHRydWUsXG4gICAgICAgICAgICBlcnI6IG51bGwsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBjbGllbnQgPSBNYXRyaXhDbGllbnRQZWcuZ2V0KCk7XG4gICAgICAgICAgICBjb25zdCBldiA9IHRoaXMucHJvcHMubXhFdmVudDtcbiAgICAgICAgICAgIGlmICh0aGlzLm1vZGVyYXRpb24gJiYgdGhpcy5zdGF0ZS5uYXR1cmUgIT0gTm9uU3RhbmRhcmRWYWx1ZS5BZG1pbikge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5hdHVyZTogTmF0dXJlID0gdGhpcy5zdGF0ZS5uYXR1cmU7XG5cbiAgICAgICAgICAgICAgICAvLyBSZXBvcnQgdG8gbW9kZXJhdG9ycyB0aHJvdWdoIHRvIHRoZSBkZWRpY2F0ZWQgYm90LFxuICAgICAgICAgICAgICAgIC8vIGFzIGNvbmZpZ3VyZWQgaW4gdGhlIHJvb20ncyBzdGF0ZSBldmVudHMuXG4gICAgICAgICAgICAgICAgY29uc3QgZG1Sb29tSWQgPSBhd2FpdCBlbnN1cmVETUV4aXN0cyhjbGllbnQsIHRoaXMubW9kZXJhdGlvbi5tb2RlcmF0aW9uQm90VXNlcklkKTtcbiAgICAgICAgICAgICAgICBhd2FpdCBjbGllbnQuc2VuZEV2ZW50KGRtUm9vbUlkLCBBQlVTRV9FVkVOVF9UWVBFLCB7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50X2lkOiBldi5nZXRJZCgpLFxuICAgICAgICAgICAgICAgICAgICByb29tX2lkOiBldi5nZXRSb29tSWQoKSxcbiAgICAgICAgICAgICAgICAgICAgbW9kZXJhdGVkX2J5X2lkOiB0aGlzLm1vZGVyYXRpb24ubW9kZXJhdGlvblJvb21JZCxcbiAgICAgICAgICAgICAgICAgICAgbmF0dXJlLFxuICAgICAgICAgICAgICAgICAgICByZXBvcnRlcjogY2xpZW50LmdldFVzZXJJZCgpLFxuICAgICAgICAgICAgICAgICAgICBjb21tZW50OiB0aGlzLnN0YXRlLnJlYXNvbi50cmltKCksXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIFJlcG9ydCB0byBob21lc2VydmVyIGFkbWluIHRocm91Z2ggdGhlIGRlZGljYXRlZCBNYXRyaXggQVBJLlxuICAgICAgICAgICAgICAgIGF3YWl0IGNsaWVudC5yZXBvcnRFdmVudChldi5nZXRSb29tSWQoKSwgZXYuZ2V0SWQoKSwgLTEwMCwgdGhpcy5zdGF0ZS5yZWFzb24udHJpbSgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucHJvcHMub25GaW5pc2hlZCh0cnVlKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgYnVzeTogZmFsc2UsXG4gICAgICAgICAgICAgICAgZXJyOiBlLm1lc3NhZ2UsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGxldCBlcnJvciA9IG51bGw7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmVycikge1xuICAgICAgICAgICAgZXJyb3IgPSA8ZGl2IGNsYXNzTmFtZT1cImVycm9yXCI+XG4gICAgICAgICAgICAgICAgeyB0aGlzLnN0YXRlLmVyciB9XG4gICAgICAgICAgICA8L2Rpdj47XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgcHJvZ3Jlc3MgPSBudWxsO1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS5idXN5KSB7XG4gICAgICAgICAgICBwcm9ncmVzcyA9IChcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInByb2dyZXNzXCI+XG4gICAgICAgICAgICAgICAgICAgIDxTcGlubmVyIC8+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgYWRtaW5NZXNzYWdlTUQgPVxuICAgICAgICAgICAgU2RrQ29uZmlnLmdldCgpLnJlcG9ydEV2ZW50ICYmXG4gICAgICAgICAgICBTZGtDb25maWcuZ2V0KCkucmVwb3J0RXZlbnQuYWRtaW5NZXNzYWdlTUQ7XG4gICAgICAgIGxldCBhZG1pbk1lc3NhZ2U7XG4gICAgICAgIGlmIChhZG1pbk1lc3NhZ2VNRCkge1xuICAgICAgICAgICAgY29uc3QgaHRtbCA9IG5ldyBNYXJrZG93bihhZG1pbk1lc3NhZ2VNRCkudG9IVE1MKHsgZXh0ZXJuYWxMaW5rczogdHJ1ZSB9KTtcbiAgICAgICAgICAgIGFkbWluTWVzc2FnZSA9IDxwIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7IF9faHRtbDogaHRtbCB9fSAvPjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLm1vZGVyYXRpb24pIHtcbiAgICAgICAgICAgIC8vIERpc3BsYXkgcmVwb3J0LXRvLW1vZGVyYXRvciBkaWFsb2cuXG4gICAgICAgICAgICAvLyBXZSBsZXQgdGhlIHVzZXIgcGljayBhIG5hdHVyZS5cbiAgICAgICAgICAgIGNvbnN0IGNsaWVudCA9IE1hdHJpeENsaWVudFBlZy5nZXQoKTtcbiAgICAgICAgICAgIGNvbnN0IGhvbWVTZXJ2ZXJOYW1lID0gU2RrQ29uZmlnLmdldCgpW1widmFsaWRhdGVkX3NlcnZlcl9jb25maWdcIl0uaHNOYW1lO1xuICAgICAgICAgICAgbGV0IHN1YnRpdGxlO1xuICAgICAgICAgICAgc3dpdGNoICh0aGlzLnN0YXRlLm5hdHVyZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgTmF0dXJlLkRpc2FncmVlbWVudDpcbiAgICAgICAgICAgICAgICAgICAgc3VidGl0bGUgPSBfdChcIldoYXQgdGhpcyB1c2VyIGlzIHdyaXRpbmcgaXMgd3JvbmcuXFxuXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJUaGlzIHdpbGwgYmUgcmVwb3J0ZWQgdG8gdGhlIHJvb20gbW9kZXJhdG9ycy5cIik7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgTmF0dXJlLlRveGljOlxuICAgICAgICAgICAgICAgICAgICBzdWJ0aXRsZSA9IF90KFwiVGhpcyB1c2VyIGlzIGRpc3BsYXlpbmcgdG94aWMgYmVoYXZpb3VyLCBcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICBcImZvciBpbnN0YW5jZSBieSBpbnN1bHRpbmcgb3RoZXIgdXNlcnMgb3Igc2hhcmluZyBcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICBcIiBhZHVsdC1vbmx5IGNvbnRlbnQgaW4gYSBmYW1pbHktZnJpZW5kbHkgcm9vbSBcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICBcIiBvciBvdGhlcndpc2UgdmlvbGF0aW5nIHRoZSBydWxlcyBvZiB0aGlzIHJvb20uXFxuXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJUaGlzIHdpbGwgYmUgcmVwb3J0ZWQgdG8gdGhlIHJvb20gbW9kZXJhdG9ycy5cIik7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgTmF0dXJlLklsbGVnYWw6XG4gICAgICAgICAgICAgICAgICAgIHN1YnRpdGxlID0gX3QoXCJUaGlzIHVzZXIgaXMgZGlzcGxheWluZyBpbGxlZ2FsIGJlaGF2aW91ciwgXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJmb3IgaW5zdGFuY2UgYnkgZG94aW5nIHBlb3BsZSBvciB0aHJlYXRlbmluZyB2aW9sZW5jZS5cXG5cIiArXG4gICAgICAgICAgICAgICAgICAgICAgICBcIlRoaXMgd2lsbCBiZSByZXBvcnRlZCB0byB0aGUgcm9vbSBtb2RlcmF0b3JzIHdobyBtYXkgZXNjYWxhdGUgdGhpcyB0byBsZWdhbCBhdXRob3JpdGllcy5cIik7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgTmF0dXJlLlNwYW06XG4gICAgICAgICAgICAgICAgICAgIHN1YnRpdGxlID0gX3QoXCJUaGlzIHVzZXIgaXMgc3BhbW1pbmcgdGhlIHJvb20gd2l0aCBhZHMsIGxpbmtzIHRvIGFkcyBvciB0byBwcm9wYWdhbmRhLlxcblwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiVGhpcyB3aWxsIGJlIHJlcG9ydGVkIHRvIHRoZSByb29tIG1vZGVyYXRvcnMuXCIpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIE5vblN0YW5kYXJkVmFsdWUuQWRtaW46XG4gICAgICAgICAgICAgICAgICAgIGlmIChjbGllbnQuaXNSb29tRW5jcnlwdGVkKHRoaXMucHJvcHMubXhFdmVudC5nZXRSb29tSWQoKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnRpdGxlID0gX3QoXCJUaGlzIHJvb20gaXMgZGVkaWNhdGVkIHRvIGlsbGVnYWwgb3IgdG94aWMgY29udGVudCBcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJvciB0aGUgbW9kZXJhdG9ycyBmYWlsIHRvIG1vZGVyYXRlIGlsbGVnYWwgb3IgdG94aWMgY29udGVudC5cXG5cIiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJUaGlzIHdpbGwgYmUgcmVwb3J0ZWQgdG8gdGhlIGFkbWluaXN0cmF0b3JzIG9mICUoaG9tZXNlcnZlcilzLiBcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJUaGUgYWRtaW5pc3RyYXRvcnMgd2lsbCBOT1QgYmUgYWJsZSB0byByZWFkIHRoZSBlbmNyeXB0ZWQgY29udGVudCBvZiB0aGlzIHJvb20uXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB7IGhvbWVzZXJ2ZXI6IGhvbWVTZXJ2ZXJOYW1lIH0pO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3VidGl0bGUgPSBfdChcIlRoaXMgcm9vbSBpcyBkZWRpY2F0ZWQgdG8gaWxsZWdhbCBvciB0b3hpYyBjb250ZW50IFwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm9yIHRoZSBtb2RlcmF0b3JzIGZhaWwgdG8gbW9kZXJhdGUgaWxsZWdhbCBvciB0b3hpYyBjb250ZW50LlxcblwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIiBUaGlzIHdpbGwgYmUgcmVwb3J0ZWQgdG8gdGhlIGFkbWluaXN0cmF0b3JzIG9mICUoaG9tZXNlcnZlcilzLlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgeyBob21lc2VydmVyOiBob21lU2VydmVyTmFtZSB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIE5hdHVyZS5PdGhlcjpcbiAgICAgICAgICAgICAgICAgICAgc3VidGl0bGUgPSBfdChcIkFueSBvdGhlciByZWFzb24uIFBsZWFzZSBkZXNjcmliZSB0aGUgcHJvYmxlbS5cXG5cIiArXG4gICAgICAgICAgICAgICAgICAgICAgICBcIlRoaXMgd2lsbCBiZSByZXBvcnRlZCB0byB0aGUgcm9vbSBtb2RlcmF0b3JzLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgc3VidGl0bGUgPSBfdChcIlBsZWFzZSBwaWNrIGEgbmF0dXJlIGFuZCBkZXNjcmliZSB3aGF0IG1ha2VzIHRoaXMgbWVzc2FnZSBhYnVzaXZlLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgPEJhc2VEaWFsb2dcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwibXhfUmVwb3J0RXZlbnREaWFsb2dcIlxuICAgICAgICAgICAgICAgICAgICBvbkZpbmlzaGVkPXt0aGlzLnByb3BzLm9uRmluaXNoZWR9XG4gICAgICAgICAgICAgICAgICAgIHRpdGxlPXtfdCgnUmVwb3J0IENvbnRlbnQnKX1cbiAgICAgICAgICAgICAgICAgICAgY29udGVudElkPSdteF9SZXBvcnRFdmVudERpYWxvZydcbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8U3R5bGVkUmFkaW9CdXR0b25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwibmF0dXJlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17TmF0dXJlLkRpc2FncmVlbWVudH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGVja2VkPXt0aGlzLnN0YXRlLm5hdHVyZSA9PSBOYXR1cmUuRGlzYWdyZWVtZW50fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLm9uTmF0dXJlQ2hvc2VufVxuICAgICAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgX3QoJ0Rpc2FncmVlJykgfVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9TdHlsZWRSYWRpb0J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxTdHlsZWRSYWRpb0J1dHRvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJuYXR1cmVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtOYXR1cmUuVG94aWN9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tlZD17dGhpcy5zdGF0ZS5uYXR1cmUgPT0gTmF0dXJlLlRveGljfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLm9uTmF0dXJlQ2hvc2VufVxuICAgICAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgX3QoJ1RveGljIEJlaGF2aW91cicpIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvU3R5bGVkUmFkaW9CdXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICA8U3R5bGVkUmFkaW9CdXR0b25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwibmF0dXJlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17TmF0dXJlLklsbGVnYWx9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tlZD17dGhpcy5zdGF0ZS5uYXR1cmUgPT0gTmF0dXJlLklsbGVnYWx9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMub25OYXR1cmVDaG9zZW59XG4gICAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBfdCgnSWxsZWdhbCBDb250ZW50JykgfVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9TdHlsZWRSYWRpb0J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxTdHlsZWRSYWRpb0J1dHRvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJuYXR1cmVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtOYXR1cmUuU3BhbX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGVja2VkPXt0aGlzLnN0YXRlLm5hdHVyZSA9PSBOYXR1cmUuU3BhbX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5vbk5hdHVyZUNob3Nlbn1cbiAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IF90KCdTcGFtIG9yIHByb3BhZ2FuZGEnKSB9XG4gICAgICAgICAgICAgICAgICAgICAgICA8L1N0eWxlZFJhZGlvQnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFN0eWxlZFJhZGlvQnV0dG9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cIm5hdHVyZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e05vblN0YW5kYXJkVmFsdWUuQWRtaW59XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tlZD17dGhpcy5zdGF0ZS5uYXR1cmUgPT0gTm9uU3RhbmRhcmRWYWx1ZS5BZG1pbn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5vbk5hdHVyZUNob3Nlbn1cbiAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IF90KCdSZXBvcnQgdGhlIGVudGlyZSByb29tJykgfVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9TdHlsZWRSYWRpb0J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxTdHlsZWRSYWRpb0J1dHRvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJuYXR1cmVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtOYXR1cmUuT3RoZXJ9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tlZD17dGhpcy5zdGF0ZS5uYXR1cmUgPT0gTmF0dXJlLk90aGVyfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLm9uTmF0dXJlQ2hvc2VufVxuICAgICAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgX3QoJ090aGVyJykgfVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9TdHlsZWRSYWRpb0J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxwPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgc3VidGl0bGUgfVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgPEZpZWxkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwibXhfUmVwb3J0RXZlbnREaWFsb2dfcmVhc29uXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50PVwidGV4dGFyZWFcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPXtfdChcIlJlYXNvblwiKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3dzPXs1fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLm9uUmVhc29uQ2hhbmdlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLnJlYXNvbn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZD17dGhpcy5zdGF0ZS5idXN5fVxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIHsgcHJvZ3Jlc3MgfVxuICAgICAgICAgICAgICAgICAgICAgICAgeyBlcnJvciB9XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8RGlhbG9nQnV0dG9uc1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJpbWFyeUJ1dHRvbj17X3QoXCJTZW5kIHJlcG9ydFwiKX1cbiAgICAgICAgICAgICAgICAgICAgICAgIG9uUHJpbWFyeUJ1dHRvbkNsaWNrPXt0aGlzLm9uU3VibWl0fVxuICAgICAgICAgICAgICAgICAgICAgICAgZm9jdXM9e3RydWV9XG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNhbmNlbD17dGhpcy5vbkNhbmNlbH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkPXt0aGlzLnN0YXRlLmJ1c3l9XG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPC9CYXNlRGlhbG9nPlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBSZXBvcnQgdG8gaG9tZXNlcnZlciBhZG1pbi5cbiAgICAgICAgLy8gQ3VycmVudGx5LCB0aGUgQVBJIGRvZXMgbm90IHN1cHBvcnQgbmF0dXJlcy5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxCYXNlRGlhbG9nXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwibXhfUmVwb3J0RXZlbnREaWFsb2dcIlxuICAgICAgICAgICAgICAgIG9uRmluaXNoZWQ9e3RoaXMucHJvcHMub25GaW5pc2hlZH1cbiAgICAgICAgICAgICAgICB0aXRsZT17X3QoJ1JlcG9ydCBDb250ZW50IHRvIFlvdXIgSG9tZXNlcnZlciBBZG1pbmlzdHJhdG9yJyl9XG4gICAgICAgICAgICAgICAgY29udGVudElkPSdteF9SZXBvcnRFdmVudERpYWxvZydcbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm14X1JlcG9ydEV2ZW50RGlhbG9nXCIgaWQ9XCJteF9SZXBvcnRFdmVudERpYWxvZ1wiPlxuICAgICAgICAgICAgICAgICAgICA8cD5cbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdChcIlJlcG9ydGluZyB0aGlzIG1lc3NhZ2Ugd2lsbCBzZW5kIGl0cyB1bmlxdWUgJ2V2ZW50IElEJyB0byB0aGUgYWRtaW5pc3RyYXRvciBvZiBcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwieW91ciBob21lc2VydmVyLiBJZiBtZXNzYWdlcyBpbiB0aGlzIHJvb20gYXJlIGVuY3J5cHRlZCwgeW91ciBob21lc2VydmVyIFwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJhZG1pbmlzdHJhdG9yIHdpbGwgbm90IGJlIGFibGUgdG8gcmVhZCB0aGUgbWVzc2FnZSB0ZXh0IG9yIHZpZXcgYW55IGZpbGVzIFwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJvciBpbWFnZXMuXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgICAgICAgICAgeyBhZG1pbk1lc3NhZ2UgfVxuICAgICAgICAgICAgICAgICAgICA8RmllbGRcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cIm14X1JlcG9ydEV2ZW50RGlhbG9nX3JlYXNvblwiXG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50PVwidGV4dGFyZWFcIlxuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw9e190KFwiUmVhc29uXCIpfVxuICAgICAgICAgICAgICAgICAgICAgICAgcm93cz17NX1cbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLm9uUmVhc29uQ2hhbmdlfVxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUucmVhc29ufVxuICAgICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ9e3RoaXMuc3RhdGUuYnVzeX1cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgeyBwcm9ncmVzcyB9XG4gICAgICAgICAgICAgICAgICAgIHsgZXJyb3IgfVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxEaWFsb2dCdXR0b25zXG4gICAgICAgICAgICAgICAgICAgIHByaW1hcnlCdXR0b249e190KFwiU2VuZCByZXBvcnRcIil9XG4gICAgICAgICAgICAgICAgICAgIG9uUHJpbWFyeUJ1dHRvbkNsaWNrPXt0aGlzLm9uU3VibWl0fVxuICAgICAgICAgICAgICAgICAgICBmb2N1cz17dHJ1ZX1cbiAgICAgICAgICAgICAgICAgICAgb25DYW5jZWw9e3RoaXMub25DYW5jZWx9XG4gICAgICAgICAgICAgICAgICAgIGRpc2FibGVkPXt0aGlzLnN0YXRlLmJ1c3l9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvQmFzZURpYWxvZz5cbiAgICAgICAgKTtcbiAgICB9XG59XG4iXX0=