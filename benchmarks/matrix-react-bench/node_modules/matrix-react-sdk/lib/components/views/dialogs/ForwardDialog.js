"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _event = require("matrix-js-sdk/src/models/event");

var _languageHandler = require("../../../languageHandler");

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _useSettings = require("../../../hooks/useSettings");

var _UIFeature = require("../../../settings/UIFeature");

var _Layout = require("../../../settings/enums/Layout");

var _BaseDialog = _interopRequireDefault(require("./BaseDialog"));

var _Avatar = require("../../../Avatar");

var _EventTile = _interopRequireDefault(require("../rooms/EventTile"));

var _SearchBox = _interopRequireDefault(require("../../structures/SearchBox"));

var _DecoratedRoomAvatar = _interopRequireDefault(require("../avatars/DecoratedRoomAvatar"));

var _Tooltip = require("../elements/Tooltip");

var _AccessibleTooltipButton = _interopRequireDefault(require("../elements/AccessibleTooltipButton"));

var _AutoHideScrollbar = _interopRequireDefault(require("../../structures/AutoHideScrollbar"));

var _StaticNotificationState = require("../../../stores/notifications/StaticNotificationState");

var _NotificationBadge = _interopRequireDefault(require("../rooms/NotificationBadge"));

var _RecentAlgorithm = require("../../../stores/room-list/algorithms/tag-sorting/RecentAlgorithm");

var _QueryMatcher = _interopRequireDefault(require("../../../autocomplete/QueryMatcher"));

var _TruncatedList = _interopRequireDefault(require("../elements/TruncatedList"));

var _EntityTile = _interopRequireDefault(require("../rooms/EntityTile"));

var _BaseAvatar = _interopRequireDefault(require("../avatars/BaseAvatar"));

var _SpaceStore = _interopRequireDefault(require("../../../stores/spaces/SpaceStore"));

var _Rooms = require("../../../Rooms");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
Copyright 2021 Robin Townsend <robin@robin.town>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const AVATAR_SIZE = 30;
var SendState;

(function (SendState) {
  SendState[SendState["CanSend"] = 0] = "CanSend";
  SendState[SendState["Sending"] = 1] = "Sending";
  SendState[SendState["Sent"] = 2] = "Sent";
  SendState[SendState["Failed"] = 3] = "Failed";
})(SendState || (SendState = {}));

const Entry = ({
  room,
  event,
  matrixClient: cli,
  onFinished
}) => {
  const [sendState, setSendState] = (0, _react.useState)(SendState.CanSend);

  const jumpToRoom = () => {
    _dispatcher.default.dispatch({
      action: "view_room",
      room_id: room.roomId
    });

    onFinished(true);
  };

  const send = async () => {
    setSendState(SendState.Sending);

    try {
      await cli.sendEvent(room.roomId, event.getType(), event.getContent());
      setSendState(SendState.Sent);
    } catch (e) {
      setSendState(SendState.Failed);
    }
  };

  let className;
  let disabled = false;
  let title;
  let icon;

  if (sendState === SendState.CanSend) {
    className = "mx_ForwardList_canSend";

    if (room.maySendMessage()) {
      title = (0, _languageHandler._t)("Send");
    } else {
      disabled = true;
      title = (0, _languageHandler._t)("You don't have permission to do this");
    }
  } else if (sendState === SendState.Sending) {
    className = "mx_ForwardList_sending";
    disabled = true;
    title = (0, _languageHandler._t)("Sending");
    icon = /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_ForwardList_sendIcon",
      "aria-label": title
    });
  } else if (sendState === SendState.Sent) {
    className = "mx_ForwardList_sent";
    disabled = true;
    title = (0, _languageHandler._t)("Sent");
    icon = /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_ForwardList_sendIcon",
      "aria-label": title
    });
  } else {
    className = "mx_ForwardList_sendFailed";
    disabled = true;
    title = (0, _languageHandler._t)("Failed to send");
    icon = /*#__PURE__*/_react.default.createElement(_NotificationBadge.default, {
      notification: _StaticNotificationState.StaticNotificationState.RED_EXCLAMATION
    });
  }

  const detailsText = (0, _Rooms.roomContextDetailsText)(room);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_ForwardList_entry"
  }, /*#__PURE__*/_react.default.createElement(_AccessibleTooltipButton.default, {
    className: "mx_ForwardList_roomButton",
    onClick: jumpToRoom,
    title: (0, _languageHandler._t)("Open link"),
    yOffset: -20,
    alignment: _Tooltip.Alignment.Top
  }, /*#__PURE__*/_react.default.createElement(_DecoratedRoomAvatar.default, {
    room: room,
    avatarSize: 32
  }), /*#__PURE__*/_react.default.createElement("span", {
    className: "mx_ForwardList_entry_name"
  }, room.name), detailsText && /*#__PURE__*/_react.default.createElement("span", {
    className: "mx_ForwardList_entry_detail"
  }, detailsText)), /*#__PURE__*/_react.default.createElement(_AccessibleTooltipButton.default, {
    kind: sendState === SendState.Failed ? "danger_outline" : "primary_outline",
    className: `mx_ForwardList_sendButton ${className}`,
    onClick: send,
    disabled: disabled,
    title: title,
    yOffset: -20,
    alignment: _Tooltip.Alignment.Top
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_ForwardList_sendLabel"
  }, (0, _languageHandler._t)("Send")), icon));
};

const ForwardDialog = ({
  matrixClient: cli,
  event,
  permalinkCreator,
  onFinished
}) => {
  const userId = cli.getUserId();
  const [profileInfo, setProfileInfo] = (0, _react.useState)({});
  (0, _react.useEffect)(() => {
    cli.getProfileInfo(userId).then(info => setProfileInfo(info));
  }, [cli, userId]); // For the message preview we fake the sender as ourselves

  const mockEvent = new _event.MatrixEvent({
    type: "m.room.message",
    sender: userId,
    content: event.getContent(),
    unsigned: {
      age: 97
    },
    event_id: "$9999999999999999999999999999999999999999999",
    room_id: event.getRoomId()
  });
  mockEvent.sender = {
    name: profileInfo.displayname || userId,
    rawDisplayName: profileInfo.displayname,
    userId,
    getAvatarUrl: (..._) => {
      return (0, _Avatar.avatarUrlForUser)({
        avatarUrl: profileInfo.avatar_url
      }, AVATAR_SIZE, AVATAR_SIZE, "crop");
    },
    getMxcAvatarUrl: () => profileInfo.avatar_url
  };
  const [query, setQuery] = (0, _react.useState)("");
  const lcQuery = query.toLowerCase();
  const spacesEnabled = _SpaceStore.default.spacesEnabled;
  const flairEnabled = (0, _useSettings.useFeatureEnabled)(_UIFeature.UIFeature.Flair);
  const previewLayout = (0, _useSettings.useSettingValue)("layout");
  let rooms = (0, _react.useMemo)(() => (0, _RecentAlgorithm.sortRooms)(cli.getVisibleRooms().filter(room => room.getMyMembership() === "join" && !(spacesEnabled && room.isSpaceRoom()))), [cli, spacesEnabled]);

  if (lcQuery) {
    rooms = new _QueryMatcher.default(rooms, {
      keys: ["name"],
      funcs: [r => [r.getCanonicalAlias(), ...r.getAltAliases()].filter(Boolean)],
      shouldMatchWordsOnly: false
    }).match(lcQuery);
  }

  const [truncateAt, setTruncateAt] = (0, _react.useState)(20);

  function overflowTile(overflowCount, totalCount) {
    const text = (0, _languageHandler._t)("and %(count)s others...", {
      count: overflowCount
    });
    return /*#__PURE__*/_react.default.createElement(_EntityTile.default, {
      className: "mx_EntityTile_ellipsis",
      avatarJsx: /*#__PURE__*/_react.default.createElement(_BaseAvatar.default, {
        url: require("../../../../res/img/ellipsis.svg"),
        name: "...",
        width: 36,
        height: 36
      }),
      name: text,
      presenceState: "online",
      suppressOnHover: true,
      onClick: () => setTruncateAt(totalCount)
    });
  }

  return /*#__PURE__*/_react.default.createElement(_BaseDialog.default, {
    title: (0, _languageHandler._t)("Forward message"),
    className: "mx_ForwardDialog",
    contentId: "mx_ForwardList",
    onFinished: onFinished,
    fixedWidth: false
  }, /*#__PURE__*/_react.default.createElement("h3", null, (0, _languageHandler._t)("Message preview")), /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)("mx_ForwardDialog_preview", {
      "mx_IRCLayout": previewLayout == _Layout.Layout.IRC,
      "mx_GroupLayout": previewLayout == _Layout.Layout.Group
    })
  }, /*#__PURE__*/_react.default.createElement(_EventTile.default, {
    mxEvent: mockEvent,
    layout: previewLayout,
    enableFlair: flairEnabled,
    permalinkCreator: permalinkCreator,
    as: "div"
  })), /*#__PURE__*/_react.default.createElement("hr", null), /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_ForwardList",
    id: "mx_ForwardList"
  }, /*#__PURE__*/_react.default.createElement(_SearchBox.default, {
    className: "mx_textinput_icon mx_textinput_search",
    placeholder: (0, _languageHandler._t)("Search for rooms or people"),
    onSearch: setQuery,
    autoFocus: true
  }), /*#__PURE__*/_react.default.createElement(_AutoHideScrollbar.default, {
    className: "mx_ForwardList_content"
  }, rooms.length > 0 ? /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_ForwardList_results"
  }, /*#__PURE__*/_react.default.createElement(_TruncatedList.default, {
    truncateAt: truncateAt,
    createOverflowElement: overflowTile,
    getChildren: (start, end) => rooms.slice(start, end).map(room => /*#__PURE__*/_react.default.createElement(Entry, {
      key: room.roomId,
      room: room,
      event: event,
      matrixClient: cli,
      onFinished: onFinished
    })),
    getChildCount: () => rooms.length
  })) : /*#__PURE__*/_react.default.createElement("span", {
    className: "mx_ForwardList_noResults"
  }, (0, _languageHandler._t)("No results")))));
};

var _default = ForwardDialog;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,