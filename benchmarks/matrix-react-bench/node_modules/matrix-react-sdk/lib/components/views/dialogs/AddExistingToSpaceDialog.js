"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.defaultSpacesRenderer = exports.defaultRoomsRenderer = exports.defaultDmsRenderer = exports.default = exports.SubspaceSelector = exports.Entry = exports.AddExistingToSpace = void 0;

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _utils = require("matrix-js-sdk/src/utils");

var _event = require("matrix-js-sdk/src/@types/event");

var _languageHandler = require("../../../languageHandler");

var _BaseDialog = _interopRequireDefault(require("./BaseDialog"));

var _Dropdown = _interopRequireDefault(require("../elements/Dropdown"));

var _SearchBox = _interopRequireDefault(require("../../structures/SearchBox"));

var _SpaceStore = _interopRequireDefault(require("../../../stores/spaces/SpaceStore"));

var _RoomAvatar = _interopRequireDefault(require("../avatars/RoomAvatar"));

var _Rooms = require("../../../Rooms");

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

var _AutoHideScrollbar = _interopRequireDefault(require("../../structures/AutoHideScrollbar"));

var _DMRoomMap = _interopRequireDefault(require("../../../utils/DMRoomMap"));

var _Permalinks = require("../../../utils/permalinks/Permalinks");

var _StyledCheckbox = _interopRequireDefault(require("../elements/StyledCheckbox"));

var _MatrixClientContext = _interopRequireDefault(require("../../../contexts/MatrixClientContext"));

var _RecentAlgorithm = require("../../../stores/room-list/algorithms/tag-sorting/RecentAlgorithm");

var _ProgressBar = _interopRequireDefault(require("../elements/ProgressBar"));

var _DecoratedRoomAvatar = _interopRequireDefault(require("../avatars/DecoratedRoomAvatar"));

var _QueryMatcher = _interopRequireDefault(require("../../../autocomplete/QueryMatcher"));

var _TruncatedList = _interopRequireDefault(require("../elements/TruncatedList"));

var _EntityTile = _interopRequireDefault(require("../rooms/EntityTile"));

var _BaseAvatar = _interopRequireDefault(require("../avatars/BaseAvatar"));

var _logger = require("matrix-js-sdk/src/logger");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
Copyright 2021 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const Entry = ({
  room,
  checked,
  onChange
}) => {
  return /*#__PURE__*/_react.default.createElement("label", {
    className: "mx_AddExistingToSpace_entry"
  }, room !== null && room !== void 0 && room.isSpaceRoom() ? /*#__PURE__*/_react.default.createElement(_RoomAvatar.default, {
    room: room,
    height: 32,
    width: 32
  }) : /*#__PURE__*/_react.default.createElement(_DecoratedRoomAvatar.default, {
    room: room,
    avatarSize: 32
  }), /*#__PURE__*/_react.default.createElement("span", {
    className: "mx_AddExistingToSpace_entry_name"
  }, room.name), /*#__PURE__*/_react.default.createElement(_StyledCheckbox.default, {
    onChange: onChange ? e => onChange(e.target.checked) : null,
    checked: checked,
    disabled: !onChange
  }));
};

exports.Entry = Entry;

const AddExistingToSpace = ({
  space,
  footerPrompt,
  emptySelectionButton,
  filterPlaceholder,
  roomsRenderer,
  dmsRenderer,
  spacesRenderer,
  onFinished
}) => {
  const cli = (0, _react.useContext)(_MatrixClientContext.default);
  const visibleRooms = (0, _react.useMemo)(() => cli.getVisibleRooms().filter(r => r.getMyMembership() === "join"), [cli]);
  const [selectedToAdd, setSelectedToAdd] = (0, _react.useState)(new Set());
  const [progress, setProgress] = (0, _react.useState)(null);
  const [error, setError] = (0, _react.useState)(null);
  const [query, setQuery] = (0, _react.useState)("");
  const lcQuery = query.toLowerCase().trim();
  const existingSubspacesSet = (0, _react.useMemo)(() => new Set(_SpaceStore.default.instance.getChildSpaces(space.roomId)), [space]);
  const existingRoomsSet = (0, _react.useMemo)(() => new Set(_SpaceStore.default.instance.getChildRooms(space.roomId)), [space]);
  const [spaces, rooms, dms] = (0, _react.useMemo)(() => {
    let rooms = visibleRooms;

    if (lcQuery) {
      const matcher = new _QueryMatcher.default(visibleRooms, {
        keys: ["name"],
        funcs: [r => [r.getCanonicalAlias(), ...r.getAltAliases()].filter(Boolean)],
        shouldMatchWordsOnly: false
      });
      rooms = matcher.match(lcQuery);
    }

    const joinRule = space.getJoinRule();
    return (0, _RecentAlgorithm.sortRooms)(rooms).reduce((arr, room) => {
      if (room.isSpaceRoom()) {
        if (room !== space && !existingSubspacesSet.has(room)) {
          arr[0].push(room);
        }
      } else if (!existingRoomsSet.has(room)) {
        if (!_DMRoomMap.default.shared().getUserIdForRoomId(room.roomId)) {
          arr[1].push(room);
        } else if (joinRule !== "public") {
          // Only show DMs for non-public spaces as they make very little sense in spaces other than "Just Me" ones.
          arr[2].push(room);
        }
      }

      return arr;
    }, [[], [], []]);
  }, [visibleRooms, space, lcQuery, existingRoomsSet, existingSubspacesSet]);

  const addRooms = async () => {
    setError(null);
    setProgress(0);
    let error;

    for (const room of selectedToAdd) {
      const via = (0, _Permalinks.calculateRoomVia)(room);

      try {
        await _SpaceStore.default.instance.addRoomToSpace(space, room.roomId, via).catch(async e => {
          if (e.errcode === "M_LIMIT_EXCEEDED") {
            await (0, _utils.sleep)(e.data.retry_after_ms);
            return _SpaceStore.default.instance.addRoomToSpace(space, room.roomId, via); // retry
          }

          throw e;
        });
        setProgress(i => i + 1);
      } catch (e) {
        _logger.logger.error("Failed to add rooms to space", e);

        setError(error = e);
        break;
      }
    }

    if (!error) {
      onFinished(true);
    }
  };

  const busy = progress !== null;
  let footer;

  if (error) {
    footer = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("img", {
      src: require("../../../../res/img/element-icons/warning-badge.svg"),
      height: "24",
      width: "24",
      alt: ""
    }), /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_AddExistingToSpaceDialog_error"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_AddExistingToSpaceDialog_errorHeading"
    }, (0, _languageHandler._t)("Not all selected were added")), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_AddExistingToSpaceDialog_errorCaption"
    }, (0, _languageHandler._t)("Try again"))), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      className: "mx_AddExistingToSpaceDialog_retryButton",
      onClick: addRooms
    }, (0, _languageHandler._t)("Retry")));
  } else if (busy) {
    footer = /*#__PURE__*/_react.default.createElement("span", null, /*#__PURE__*/_react.default.createElement(_ProgressBar.default, {
      value: progress,
      max: selectedToAdd.size
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_AddExistingToSpaceDialog_progressText"
    }, (0, _languageHandler._t)("Adding rooms... (%(progress)s out of %(count)s)", {
      count: selectedToAdd.size,
      progress
    })));
  } else {
    let button = emptySelectionButton;

    if (!button || selectedToAdd.size > 0) {
      button = /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        kind: "primary",
        disabled: selectedToAdd.size < 1,
        onClick: addRooms
      }, (0, _languageHandler._t)("Add"));
    }

    footer = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("span", null, footerPrompt), button);
  }

  const onChange = !busy && !error ? (checked, room) => {
    if (checked) {
      selectedToAdd.add(room);
    } else {
      selectedToAdd.delete(room);
    }

    setSelectedToAdd(new Set(selectedToAdd));
  } : null;
  const [truncateAt, setTruncateAt] = (0, _react.useState)(20);

  function overflowTile(overflowCount, totalCount) {
    const text = (0, _languageHandler._t)("and %(count)s others...", {
      count: overflowCount
    });
    return /*#__PURE__*/_react.default.createElement(_EntityTile.default, {
      className: "mx_EntityTile_ellipsis",
      avatarJsx: /*#__PURE__*/_react.default.createElement(_BaseAvatar.default, {
        url: require("../../../../res/img/ellipsis.svg"),
        name: "...",
        width: 36,
        height: 36
      }),
      name: text,
      presenceState: "online",
      suppressOnHover: true,
      onClick: () => setTruncateAt(totalCount)
    });
  }

  let noResults = true;

  if (roomsRenderer && rooms.length > 0 || dmsRenderer && dms.length > 0 || !roomsRenderer && !dmsRenderer && spacesRenderer && spaces.length > 0 // only count spaces when alone
  ) {
    noResults = false;
  }

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_AddExistingToSpace"
  }, /*#__PURE__*/_react.default.createElement(_SearchBox.default, {
    className: "mx_textinput_icon mx_textinput_search",
    placeholder: filterPlaceholder,
    onSearch: setQuery,
    autoFocus: true
  }), /*#__PURE__*/_react.default.createElement(_AutoHideScrollbar.default, {
    className: "mx_AddExistingToSpace_content"
  }, rooms.length > 0 && roomsRenderer ? roomsRenderer(rooms, selectedToAdd, onChange, truncateAt, overflowTile) : undefined, spaces.length > 0 && spacesRenderer ? spacesRenderer(spaces, selectedToAdd, onChange) : null, dms.length > 0 && dmsRenderer ? dmsRenderer(dms, selectedToAdd, onChange) : null, noResults ? /*#__PURE__*/_react.default.createElement("span", {
    className: "mx_AddExistingToSpace_noResults"
  }, (0, _languageHandler._t)("No results")) : undefined), /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_AddExistingToSpace_footer"
  }, footer));
};

exports.AddExistingToSpace = AddExistingToSpace;

const defaultRoomsRenderer = (rooms, selectedToAdd, onChange, truncateAt, overflowTile) => /*#__PURE__*/_react.default.createElement("div", {
  className: "mx_AddExistingToSpace_section"
}, /*#__PURE__*/_react.default.createElement("h3", null, (0, _languageHandler._t)("Rooms")), /*#__PURE__*/_react.default.createElement(_TruncatedList.default, {
  truncateAt: truncateAt,
  createOverflowElement: overflowTile,
  getChildren: (start, end) => rooms.slice(start, end).map(room => /*#__PURE__*/_react.default.createElement(Entry, {
    key: room.roomId,
    room: room,
    checked: selectedToAdd.has(room),
    onChange: onChange ? checked => {
      onChange(checked, room);
    } : null
  })),
  getChildCount: () => rooms.length
}));

exports.defaultRoomsRenderer = defaultRoomsRenderer;

const defaultSpacesRenderer = (spaces, selectedToAdd, onChange) => /*#__PURE__*/_react.default.createElement("div", {
  className: "mx_AddExistingToSpace_section"
}, spaces.map(space => {
  return /*#__PURE__*/_react.default.createElement(Entry, {
    key: space.roomId,
    room: space,
    checked: selectedToAdd.has(space),
    onChange: onChange ? checked => {
      onChange(checked, space);
    } : null
  });
}));

exports.defaultSpacesRenderer = defaultSpacesRenderer;

const defaultDmsRenderer = (dms, selectedToAdd, onChange) => /*#__PURE__*/_react.default.createElement("div", {
  className: "mx_AddExistingToSpace_section"
}, /*#__PURE__*/_react.default.createElement("h3", null, (0, _languageHandler._t)("Direct Messages")), dms.map(room => {
  return /*#__PURE__*/_react.default.createElement(Entry, {
    key: room.roomId,
    room: room,
    checked: selectedToAdd.has(room),
    onChange: onChange ? checked => {
      onChange(checked, room);
    } : null
  });
}));

exports.defaultDmsRenderer = defaultDmsRenderer;

const SubspaceSelector = ({
  title,
  space,
  value,
  onChange
}) => {
  const options = (0, _react.useMemo)(() => {
    return [space, ..._SpaceStore.default.instance.getChildSpaces(space.roomId).filter(space => {
      return space.currentState.maySendStateEvent(_event.EventType.SpaceChild, space.client.credentials.userId);
    })];
  }, [space]);
  let body;

  if (options.length > 1) {
    body = /*#__PURE__*/_react.default.createElement(_Dropdown.default, {
      id: "mx_SpaceSelectDropdown",
      className: "mx_SpaceSelectDropdown",
      onOptionChange: key => {
        onChange(options.find(space => space.roomId === key) || space);
      },
      value: value.roomId,
      label: (0, _languageHandler._t)("Space selection")
    }, options.map(space => {
      const classes = (0, _classnames.default)({
        mx_SubspaceSelector_dropdownOptionActive: space === value
      });
      return /*#__PURE__*/_react.default.createElement("div", {
        key: space.roomId,
        className: classes
      }, /*#__PURE__*/_react.default.createElement(_RoomAvatar.default, {
        room: space,
        width: 24,
        height: 24
      }), space.name || (0, _Rooms.getDisplayAliasForRoom)(space) || space.roomId);
    }));
  } else {
    body = /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SubspaceSelector_onlySpace"
    }, space.name || (0, _Rooms.getDisplayAliasForRoom)(space) || space.roomId);
  }

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_SubspaceSelector"
  }, /*#__PURE__*/_react.default.createElement(_RoomAvatar.default, {
    room: value,
    height: 40,
    width: 40
  }), /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("h1", null, title), body));
};

exports.SubspaceSelector = SubspaceSelector;

const AddExistingToSpaceDialog = ({
  space,
  onCreateRoomClick,
  onAddSubspaceClick,
  onFinished
}) => {
  const [selectedSpace, setSelectedSpace] = (0, _react.useState)(space);
  return /*#__PURE__*/_react.default.createElement(_BaseDialog.default, {
    title: /*#__PURE__*/_react.default.createElement(SubspaceSelector, {
      title: (0, _languageHandler._t)("Add existing rooms"),
      space: space,
      value: selectedSpace,
      onChange: setSelectedSpace
    }),
    className: "mx_AddExistingToSpaceDialog",
    contentId: "mx_AddExistingToSpace",
    onFinished: onFinished,
    fixedWidth: false
  }, /*#__PURE__*/_react.default.createElement(_MatrixClientContext.default.Provider, {
    value: space.client
  }, /*#__PURE__*/_react.default.createElement(AddExistingToSpace, {
    space: space,
    onFinished: onFinished,
    footerPrompt: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", null, (0, _languageHandler._t)("Want to add a new room instead?")), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      kind: "link",
      onClick: () => {
        onCreateRoomClick();
        onFinished();
      }
    }, (0, _languageHandler._t)("Create a new room"))),
    filterPlaceholder: (0, _languageHandler._t)("Search for rooms"),
    roomsRenderer: defaultRoomsRenderer,
    spacesRenderer: () => /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_AddExistingToSpace_section"
    }, /*#__PURE__*/_react.default.createElement("h3", null, (0, _languageHandler._t)("Spaces")), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      kind: "link",
      onClick: () => {
        onAddSubspaceClick();
        onFinished();
      }
    }, (0, _languageHandler._t)("Adding spaces has moved."))),
    dmsRenderer: defaultDmsRenderer
  })));
};

var _default = AddExistingToSpaceDialog;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,