"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.SendCustomEvent = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _SyntaxHighlight = _interopRequireDefault(require("../elements/SyntaxHighlight"));

var _languageHandler = require("../../../languageHandler");

var _Field = _interopRequireDefault(require("../elements/Field"));

var _MatrixClientContext = _interopRequireDefault(require("../../../contexts/MatrixClientContext"));

var _useEventEmitter = require("../../../hooks/useEventEmitter");

var _VerificationRequest = require("matrix-js-sdk/src/crypto/verification/request/VerificationRequest");

var _WidgetStore = _interopRequireDefault(require("../../../stores/WidgetStore"));

var _AsyncStore = require("../../../stores/AsyncStore");

var _Settings = require("../../../settings/Settings");

var _SettingsStore = _interopRequireWildcard(require("../../../settings/SettingsStore"));

var _Modal = _interopRequireDefault(require("../../../Modal"));

var _ErrorDialog = _interopRequireDefault(require("./ErrorDialog"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _BaseDialog = _interopRequireDefault(require("./BaseDialog"));

var _TruncatedList = _interopRequireDefault(require("../elements/TruncatedList"));

var _logger = require("matrix-js-sdk/src/logger");

var _dec, _class;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class GenericEditor extends _react.default.PureComponent {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "onBack", () => {
      if (this.state.message) {
        this.setState({
          message: null
        });
      } else {
        this.props.onBack();
      }
    });
    (0, _defineProperty2.default)(this, "onChange", e => {
      // @ts-ignore: Unsure how to convince TS this is okay when the state
      // type can be extended.
      this.setState({
        [e.target.id]: e.target.type === 'checkbox' ? e.target.checked : e.target.value
      });
    });
  }

  buttons() {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_Dialog_buttons"
    }, /*#__PURE__*/_react.default.createElement("button", {
      onClick: this.onBack
    }, (0, _languageHandler._t)('Back')), !this.state.message && /*#__PURE__*/_react.default.createElement("button", {
      onClick: this.send
    }, (0, _languageHandler._t)('Send')));
  }

  textInput(id, label) {
    return /*#__PURE__*/_react.default.createElement(_Field.default, {
      id: id,
      label: label,
      size: 42,
      autoFocus: true,
      type: "text",
      autoComplete: "on",
      value: this.state[id],
      onChange: this.onChange
    });
  }

}

class SendCustomEvent extends GenericEditor {
  static getLabel() {
    return (0, _languageHandler._t)('Send Custom Event');
  }

  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "send", async () => {
      if (this.state.eventType === '') {
        this.setState({
          message: (0, _languageHandler._t)('You must specify an event type!')
        });
        return;
      }

      let message;

      try {
        const content = JSON.parse(this.state.evContent);
        await this.doSend(content);
        message = (0, _languageHandler._t)('Event sent!');
      } catch (e) {
        message = (0, _languageHandler._t)('Failed to send custom event.') + ' (' + e.toString() + ')';
      }

      this.setState({
        message
      });
    });
    const {
      eventType,
      stateKey,
      evContent
    } = Object.assign({
      eventType: '',
      stateKey: '',
      evContent: '{\n\n}'
    }, this.props.inputs);
    this.state = {
      isStateEvent: Boolean(this.props.forceStateEvent),
      eventType,
      stateKey,
      evContent
    };
  }

  doSend(content) {
    const cli = this.context;

    if (this.state.isStateEvent) {
      return cli.sendStateEvent(this.props.room.roomId, this.state.eventType, content, this.state.stateKey);
    } else {
      return cli.sendEvent(this.props.room.roomId, this.state.eventType, content);
    }
  }

  render() {
    if (this.state.message) {
      return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_Dialog_content"
      }, this.state.message), this.buttons());
    }

    const showTglFlip = !this.state.message && !this.props.forceStateEvent && !this.props.forceGeneralEvent;
    return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_DevTools_content"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_DevTools_eventTypeStateKeyGroup"
    }, this.textInput('eventType', (0, _languageHandler._t)('Event Type')), this.state.isStateEvent && this.textInput('stateKey', (0, _languageHandler._t)('State Key'))), /*#__PURE__*/_react.default.createElement("br", null), /*#__PURE__*/_react.default.createElement(_Field.default, {
      id: "evContent",
      label: (0, _languageHandler._t)("Event Content"),
      type: "text",
      className: "mx_DevTools_textarea",
      autoComplete: "off",
      value: this.state.evContent,
      onChange: this.onChange,
      element: "textarea"
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_Dialog_buttons"
    }, /*#__PURE__*/_react.default.createElement("button", {
      onClick: this.onBack
    }, (0, _languageHandler._t)('Back')), !this.state.message && /*#__PURE__*/_react.default.createElement("button", {
      onClick: this.send
    }, (0, _languageHandler._t)('Send')), showTglFlip && /*#__PURE__*/_react.default.createElement("div", {
      style: {
        float: "right"
      }
    }, /*#__PURE__*/_react.default.createElement("input", {
      id: "isStateEvent",
      className: "mx_DevTools_tgl mx_DevTools_tgl-flip",
      type: "checkbox",
      checked: this.state.isStateEvent,
      onChange: this.onChange
    }), /*#__PURE__*/_react.default.createElement("label", {
      className: "mx_DevTools_tgl-btn",
      "data-tg-off": "Event",
      "data-tg-on": "State Event",
      htmlFor: "isStateEvent"
    }))));
  }

}

exports.SendCustomEvent = SendCustomEvent;
(0, _defineProperty2.default)(SendCustomEvent, "contextType", _MatrixClientContext.default);

class SendAccountData extends GenericEditor {
  static getLabel() {
    return (0, _languageHandler._t)('Send Account Data');
  }

  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "send", async () => {
      if (this.state.eventType === '') {
        this.setState({
          message: (0, _languageHandler._t)('You must specify an event type!')
        });
        return;
      }

      let message;

      try {
        const content = JSON.parse(this.state.evContent);
        await this.doSend(content);
        message = (0, _languageHandler._t)('Event sent!');
      } catch (e) {
        message = (0, _languageHandler._t)('Failed to send custom event.') + ' (' + e.toString() + ')';
      }

      this.setState({
        message
      });
    });
    const {
      eventType,
      evContent
    } = Object.assign({
      eventType: '',
      evContent: '{\n\n}'
    }, this.props.inputs);
    this.state = {
      isRoomAccountData: Boolean(this.props.isRoomAccountData),
      eventType,
      evContent
    };
  }

  doSend(content) {
    const cli = this.context;

    if (this.state.isRoomAccountData) {
      return cli.setRoomAccountData(this.props.room.roomId, this.state.eventType, content);
    }

    return cli.setAccountData(this.state.eventType, content);
  }

  render() {
    if (this.state.message) {
      return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_Dialog_content"
      }, this.state.message), this.buttons());
    }

    return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_DevTools_content"
    }, this.textInput('eventType', (0, _languageHandler._t)('Event Type')), /*#__PURE__*/_react.default.createElement("br", null), /*#__PURE__*/_react.default.createElement(_Field.default, {
      id: "evContent",
      label: (0, _languageHandler._t)("Event Content"),
      type: "text",
      className: "mx_DevTools_textarea",
      autoComplete: "off",
      value: this.state.evContent,
      onChange: this.onChange,
      element: "textarea"
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_Dialog_buttons"
    }, /*#__PURE__*/_react.default.createElement("button", {
      onClick: this.onBack
    }, (0, _languageHandler._t)('Back')), !this.state.message && /*#__PURE__*/_react.default.createElement("button", {
      onClick: this.send
    }, (0, _languageHandler._t)('Send')), !this.state.message && /*#__PURE__*/_react.default.createElement("div", {
      style: {
        float: "right"
      }
    }, /*#__PURE__*/_react.default.createElement("input", {
      id: "isRoomAccountData",
      className: "mx_DevTools_tgl mx_DevTools_tgl-flip",
      type: "checkbox",
      checked: this.state.isRoomAccountData,
      disabled: this.props.forceMode,
      onChange: this.onChange
    }), /*#__PURE__*/_react.default.createElement("label", {
      className: "mx_DevTools_tgl-btn",
      "data-tg-off": "Account Data",
      "data-tg-on": "Room Data",
      htmlFor: "isRoomAccountData"
    }))));
  }

}

(0, _defineProperty2.default)(SendAccountData, "contextType", _MatrixClientContext.default);
const INITIAL_LOAD_TILES = 20;
const LOAD_TILES_STEP_SIZE = 50;

class FilteredList extends _react.default.PureComponent {
  static filterChildren(children, query) {
    if (!query) return children;
    const lcQuery = query.toLowerCase();
    return children.filter(child => child.key.toString().toLowerCase().includes(lcQuery));
  }

  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "showAll", () => {
      this.setState({
        truncateAt: this.state.truncateAt + LOAD_TILES_STEP_SIZE
      });
    });
    (0, _defineProperty2.default)(this, "createOverflowElement", (overflowCount, totalCount) => {
      return /*#__PURE__*/_react.default.createElement("button", {
        className: "mx_DevTools_RoomStateExplorer_button",
        onClick: this.showAll
      }, (0, _languageHandler._t)("and %(count)s others...", {
        count: overflowCount
      }));
    });
    (0, _defineProperty2.default)(this, "onQuery", ev => {
      if (this.props.onChange) this.props.onChange(ev.target.value);
    });
    (0, _defineProperty2.default)(this, "getChildren", (start, end) => {
      return this.state.filteredChildren.slice(start, end);
    });
    (0, _defineProperty2.default)(this, "getChildCount", () => {
      return this.state.filteredChildren.length;
    });
    this.state = {
      filteredChildren: FilteredList.filterChildren(this.props.children, this.props.query),
      truncateAt: INITIAL_LOAD_TILES
    };
  } // TODO: [REACT-WARNING] Replace with appropriate lifecycle event


  UNSAFE_componentWillReceiveProps(nextProps) {
    // eslint-disable-line
    if (this.props.children === nextProps.children && this.props.query === nextProps.query) return;
    this.setState({
      filteredChildren: FilteredList.filterChildren(nextProps.children, nextProps.query),
      truncateAt: INITIAL_LOAD_TILES
    });
  }

  render() {
    return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_Field.default, {
      label: (0, _languageHandler._t)('Filter results'),
      autoFocus: true,
      size: 64,
      type: "text",
      autoComplete: "off",
      value: this.props.query,
      onChange: this.onQuery,
      className: "mx_TextInputDialog_input mx_DevTools_RoomStateExplorer_query" // force re-render so that autoFocus is applied when this component is re-used
      ,
      key: this.props.children[0] ? this.props.children[0].key : ''
    }), /*#__PURE__*/_react.default.createElement(_TruncatedList.default, {
      getChildren: this.getChildren,
      getChildCount: this.getChildCount,
      truncateAt: this.state.truncateAt,
      createOverflowElement: this.createOverflowElement
    }));
  }

}

class RoomStateExplorer extends _react.default.PureComponent {
  static getLabel() {
    return (0, _languageHandler._t)('Explore Room State');
  }

  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "roomStateEvents", void 0);
    (0, _defineProperty2.default)(this, "onBack", () => {
      if (this.state.editing) {
        this.setState({
          editing: false
        });
      } else if (this.state.event) {
        this.setState({
          event: null
        });
      } else if (this.state.eventType) {
        this.setState({
          eventType: null
        });
      } else {
        this.props.onBack();
      }
    });
    (0, _defineProperty2.default)(this, "editEv", () => {
      this.setState({
        editing: true
      });
    });
    (0, _defineProperty2.default)(this, "onQueryEventType", filterEventType => {
      this.setState({
        queryEventType: filterEventType
      });
    });
    (0, _defineProperty2.default)(this, "onQueryStateKey", filterStateKey => {
      this.setState({
        queryStateKey: filterStateKey
      });
    });
    this.roomStateEvents = this.props.room.currentState.events;
    this.state = {
      eventType: null,
      event: null,
      editing: false,
      queryEventType: '',
      queryStateKey: ''
    };
  }

  browseEventType(eventType) {
    return () => {
      this.setState({
        eventType
      });
    };
  }

  onViewSourceClick(event) {
    return () => {
      this.setState({
        event
      });
    };
  }

  render() {
    if (this.state.event) {
      if (this.state.editing) {
        return /*#__PURE__*/_react.default.createElement(SendCustomEvent, {
          room: this.props.room,
          forceStateEvent: true,
          onBack: this.onBack,
          inputs: {
            eventType: this.state.event.getType(),
            evContent: JSON.stringify(this.state.event.getContent(), null, '\t'),
            stateKey: this.state.event.getStateKey()
          }
        });
      }

      return /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_ViewSource"
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_Dialog_content"
      }, /*#__PURE__*/_react.default.createElement(_SyntaxHighlight.default, {
        className: "json"
      }, JSON.stringify(this.state.event.event, null, 2))), /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_Dialog_buttons"
      }, /*#__PURE__*/_react.default.createElement("button", {
        onClick: this.onBack
      }, (0, _languageHandler._t)('Back')), /*#__PURE__*/_react.default.createElement("button", {
        onClick: this.editEv
      }, (0, _languageHandler._t)('Edit'))));
    }

    let list = null;
    const classes = 'mx_DevTools_RoomStateExplorer_button';

    if (this.state.eventType === null) {
      list = /*#__PURE__*/_react.default.createElement(FilteredList, {
        query: this.state.queryEventType,
        onChange: this.onQueryEventType
      }, Array.from(this.roomStateEvents.entries()).map(([eventType, allStateKeys]) => {
        let onClickFn;

        if (allStateKeys.size === 1 && allStateKeys.has("")) {
          onClickFn = this.onViewSourceClick(allStateKeys.get(""));
        } else {
          onClickFn = this.browseEventType(eventType);
        }

        return /*#__PURE__*/_react.default.createElement("button", {
          className: classes,
          key: eventType,
          onClick: onClickFn
        }, eventType);
      }));
    } else {
      const stateGroup = this.roomStateEvents.get(this.state.eventType);
      list = /*#__PURE__*/_react.default.createElement(FilteredList, {
        query: this.state.queryStateKey,
        onChange: this.onQueryStateKey
      }, Array.from(stateGroup.entries()).map(([stateKey, ev]) => {
        return /*#__PURE__*/_react.default.createElement("button", {
          className: classes,
          key: stateKey,
          onClick: this.onViewSourceClick(ev)
        }, stateKey);
      }));
    }

    return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_Dialog_content"
    }, list), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_Dialog_buttons"
    }, /*#__PURE__*/_react.default.createElement("button", {
      onClick: this.onBack
    }, (0, _languageHandler._t)('Back'))));
  }

}

(0, _defineProperty2.default)(RoomStateExplorer, "contextType", _MatrixClientContext.default);

class AccountDataExplorer extends _react.default.PureComponent {
  static getLabel() {
    return (0, _languageHandler._t)('Explore Account Data');
  }

  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "onBack", () => {
      if (this.state.editing) {
        this.setState({
          editing: false
        });
      } else if (this.state.event) {
        this.setState({
          event: null
        });
      } else {
        this.props.onBack();
      }
    });
    (0, _defineProperty2.default)(this, "onChange", e => {
      this.setState({
        [e.target.id]: e.target.type === 'checkbox' ? e.target.checked : e.target.value
      });
    });
    (0, _defineProperty2.default)(this, "editEv", () => {
      this.setState({
        editing: true
      });
    });
    (0, _defineProperty2.default)(this, "onQueryEventType", queryEventType => {
      this.setState({
        queryEventType
      });
    });
    this.state = {
      isRoomAccountData: false,
      event: null,
      editing: false,
      queryEventType: ''
    };
  }

  getData() {
    if (this.state.isRoomAccountData) {
      return this.props.room.accountData;
    }

    return this.context.store.accountData;
  }

  onViewSourceClick(event) {
    return () => {
      this.setState({
        event
      });
    };
  }

  render() {
    if (this.state.event) {
      if (this.state.editing) {
        return /*#__PURE__*/_react.default.createElement(SendAccountData, {
          room: this.props.room,
          isRoomAccountData: this.state.isRoomAccountData,
          onBack: this.onBack,
          inputs: {
            eventType: this.state.event.getType(),
            evContent: JSON.stringify(this.state.event.getContent(), null, '\t')
          },
          forceMode: true
        });
      }

      return /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_ViewSource"
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_DevTools_content"
      }, /*#__PURE__*/_react.default.createElement(_SyntaxHighlight.default, {
        className: "json"
      }, JSON.stringify(this.state.event.event, null, 2))), /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_Dialog_buttons"
      }, /*#__PURE__*/_react.default.createElement("button", {
        onClick: this.onBack
      }, (0, _languageHandler._t)('Back')), /*#__PURE__*/_react.default.createElement("button", {
        onClick: this.editEv
      }, (0, _languageHandler._t)('Edit'))));
    }

    const rows = [];
    const classes = 'mx_DevTools_RoomStateExplorer_button';
    const data = this.getData();
    Object.keys(data).forEach(evType => {
      const ev = data[evType];
      rows.push( /*#__PURE__*/_react.default.createElement("button", {
        className: classes,
        key: evType,
        onClick: this.onViewSourceClick(ev)
      }, evType));
    });
    return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_Dialog_content"
    }, /*#__PURE__*/_react.default.createElement(FilteredList, {
      query: this.state.queryEventType,
      onChange: this.onQueryEventType
    }, rows)), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_Dialog_buttons"
    }, /*#__PURE__*/_react.default.createElement("button", {
      onClick: this.onBack
    }, (0, _languageHandler._t)('Back')), /*#__PURE__*/_react.default.createElement("div", {
      style: {
        float: "right"
      }
    }, /*#__PURE__*/_react.default.createElement("input", {
      id: "isRoomAccountData",
      className: "mx_DevTools_tgl mx_DevTools_tgl-flip",
      type: "checkbox",
      checked: this.state.isRoomAccountData,
      onChange: this.onChange
    }), /*#__PURE__*/_react.default.createElement("label", {
      className: "mx_DevTools_tgl-btn",
      "data-tg-off": "Account Data",
      "data-tg-on": "Room Data",
      htmlFor: "isRoomAccountData"
    }))));
  }

}

(0, _defineProperty2.default)(AccountDataExplorer, "contextType", _MatrixClientContext.default);

class ServersInRoomList extends _react.default.PureComponent {
  static getLabel() {
    return (0, _languageHandler._t)('View Servers in Room');
  }

  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "servers", void 0);
    (0, _defineProperty2.default)(this, "onQuery", query => {
      this.setState({
        query
      });
    });
    const room = this.props.room;
    const servers = new Set();
    room.currentState.getStateEvents("m.room.member").forEach(ev => servers.add(ev.getSender().split(":")[1]));
    this.servers = Array.from(servers).map(s => /*#__PURE__*/_react.default.createElement("button", {
      key: s,
      className: "mx_DevTools_ServersInRoomList_button"
    }, s));
    this.state = {
      query: ''
    };
  }

  render() {
    return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_Dialog_content"
    }, /*#__PURE__*/_react.default.createElement(FilteredList, {
      query: this.state.query,
      onChange: this.onQuery
    }, this.servers)), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_Dialog_buttons"
    }, /*#__PURE__*/_react.default.createElement("button", {
      onClick: this.props.onBack
    }, (0, _languageHandler._t)('Back'))));
  }

}

(0, _defineProperty2.default)(ServersInRoomList, "contextType", _MatrixClientContext.default);
const PHASE_MAP = {
  [_VerificationRequest.PHASE_UNSENT]: "unsent",
  [_VerificationRequest.PHASE_REQUESTED]: "requested",
  [_VerificationRequest.PHASE_READY]: "ready",
  [_VerificationRequest.PHASE_DONE]: "done",
  [_VerificationRequest.PHASE_STARTED]: "started",
  [_VerificationRequest.PHASE_CANCELLED]: "cancelled"
};

const VerificationRequestExplorer = ({
  txnId,
  request
}) => {
  const [, updateState] = (0, _react.useState)();
  const [timeout, setRequestTimeout] = (0, _react.useState)(request.timeout);
  /* Re-render if something changes state */

  (0, _useEventEmitter.useEventEmitter)(request, "change", updateState);
  /* Keep re-rendering if there's a timeout */

  (0, _react.useEffect)(() => {
    if (request.timeout == 0) return;
    /* Note that request.timeout is a getter, so its value changes */

    const id = setInterval(() => {
      setRequestTimeout(request.timeout);
    }, 500);
    return () => {
      clearInterval(id);
    };
  }, [request]);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_DevTools_VerificationRequest"
  }, /*#__PURE__*/_react.default.createElement("dl", null, /*#__PURE__*/_react.default.createElement("dt", null, "Transaction"), /*#__PURE__*/_react.default.createElement("dd", null, txnId), /*#__PURE__*/_react.default.createElement("dt", null, "Phase"), /*#__PURE__*/_react.default.createElement("dd", null, PHASE_MAP[request.phase] || request.phase), /*#__PURE__*/_react.default.createElement("dt", null, "Timeout"), /*#__PURE__*/_react.default.createElement("dd", null, Math.floor(timeout / 1000)), /*#__PURE__*/_react.default.createElement("dt", null, "Methods"), /*#__PURE__*/_react.default.createElement("dd", null, request.methods && request.methods.join(", ")), /*#__PURE__*/_react.default.createElement("dt", null, "requestingUserId"), /*#__PURE__*/_react.default.createElement("dd", null, request.requestingUserId), /*#__PURE__*/_react.default.createElement("dt", null, "observeOnly"), /*#__PURE__*/_react.default.createElement("dd", null, JSON.stringify(request.observeOnly))));
};

class VerificationExplorer extends _react.default.PureComponent {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "onNewRequest", () => {
      this.forceUpdate();
    });
  }

  static getLabel() {
    return (0, _languageHandler._t)("Verification Requests");
  }
  /* Ensure this.context is the cli */


  componentDidMount() {
    const cli = this.context;
    cli.on("crypto.verification.request", this.onNewRequest);
  }

  componentWillUnmount() {
    const cli = this.context;
    cli.off("crypto.verification.request", this.onNewRequest);
  }

  render() {
    const cli = this.context;
    const room = this.props.room;
    const inRoomChannel = cli.crypto.inRoomVerificationRequests;
    const inRoomRequests = (inRoomChannel._requestsByRoomId || new Map()).get(room.roomId) || new Map();
    return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_Dialog_content"
    }, Array.from(inRoomRequests.entries()).reverse().map(([txnId, request]) => /*#__PURE__*/_react.default.createElement(VerificationRequestExplorer, {
      txnId: txnId,
      request: request,
      key: txnId
    }))), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_Dialog_buttons"
    }, /*#__PURE__*/_react.default.createElement("button", {
      onClick: this.props.onBack
    }, (0, _languageHandler._t)("Back"))));
  }

}

(0, _defineProperty2.default)(VerificationExplorer, "contextType", _MatrixClientContext.default);

class WidgetExplorer extends _react.default.Component {
  static getLabel() {
    return (0, _languageHandler._t)("Active Widgets");
  }

  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "onWidgetStoreUpdate", () => {
      this.forceUpdate();
    });
    (0, _defineProperty2.default)(this, "onQueryChange", query => {
      this.setState({
        query
      });
    });
    (0, _defineProperty2.default)(this, "onEditWidget", widget => {
      this.setState({
        editWidget: widget
      });
    });
    (0, _defineProperty2.default)(this, "onBack", () => {
      const widgets = _WidgetStore.default.instance.getApps(this.props.room.roomId);

      if (this.state.editWidget && widgets.includes(this.state.editWidget)) {
        this.setState({
          editWidget: null
        });
      } else {
        this.props.onBack();
      }
    });
    this.state = {
      query: '',
      editWidget: null // set to an IApp when editing

    };
  }

  componentDidMount() {
    _WidgetStore.default.instance.on(_AsyncStore.UPDATE_EVENT, this.onWidgetStoreUpdate);
  }

  componentWillUnmount() {
    _WidgetStore.default.instance.off(_AsyncStore.UPDATE_EVENT, this.onWidgetStoreUpdate);
  }

  render() {
    const room = this.props.room;
    const editWidget = this.state.editWidget;

    const widgets = _WidgetStore.default.instance.getApps(room.roomId);

    if (editWidget && widgets.includes(editWidget)) {
      const allState = Array.from(Array.from(room.currentState.events.values()).map(e => {
        return e.values();
      })).reduce((p, c) => {
        p.push(...c);
        return p;
      }, []);
      const stateEv = allState.find(ev => ev.getId() === editWidget.eventId);

      if (!stateEv) {
        // "should never happen"
        return /*#__PURE__*/_react.default.createElement("div", null, (0, _languageHandler._t)("There was an error finding this widget."), /*#__PURE__*/_react.default.createElement("div", {
          className: "mx_Dialog_buttons"
        }, /*#__PURE__*/_react.default.createElement("button", {
          onClick: this.onBack
        }, (0, _languageHandler._t)("Back"))));
      }

      return /*#__PURE__*/_react.default.createElement(SendCustomEvent, {
        onBack: this.onBack,
        room: room,
        forceStateEvent: true,
        inputs: {
          eventType: stateEv.getType(),
          evContent: JSON.stringify(stateEv.getContent(), null, '\t'),
          stateKey: stateEv.getStateKey()
        }
      });
    }

    return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_Dialog_content"
    }, /*#__PURE__*/_react.default.createElement(FilteredList, {
      query: this.state.query,
      onChange: this.onQueryChange
    }, widgets.map(w => {
      return /*#__PURE__*/_react.default.createElement("button", {
        className: "mx_DevTools_RoomStateExplorer_button",
        key: w.url + w.eventId,
        onClick: () => this.onEditWidget(w)
      }, w.url);
    }))), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_Dialog_buttons"
    }, /*#__PURE__*/_react.default.createElement("button", {
      onClick: this.onBack
    }, (0, _languageHandler._t)("Back"))));
  }

}

class SettingsExplorer extends _react.default.PureComponent {
  static getLabel() {
    return (0, _languageHandler._t)("Settings Explorer");
  }

  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "onQueryChange", ev => {
      this.setState({
        query: ev.target.value
      });
    });
    (0, _defineProperty2.default)(this, "onExplValuesEdit", ev => {
      this.setState({
        explicitValues: ev.target.value
      });
    });
    (0, _defineProperty2.default)(this, "onExplRoomValuesEdit", ev => {
      this.setState({
        explicitRoomValues: ev.target.value
      });
    });
    (0, _defineProperty2.default)(this, "onBack", () => {
      if (this.state.editSetting) {
        this.setState({
          editSetting: null
        });
      } else if (this.state.viewSetting) {
        this.setState({
          viewSetting: null
        });
      } else {
        this.props.onBack();
      }
    });
    (0, _defineProperty2.default)(this, "onViewClick", (ev, settingId) => {
      ev.preventDefault();
      this.setState({
        viewSetting: settingId
      });
    });
    (0, _defineProperty2.default)(this, "onEditClick", (ev, settingId) => {
      ev.preventDefault();
      this.setState({
        editSetting: settingId,
        explicitValues: this.renderExplicitSettingValues(settingId, null),
        explicitRoomValues: this.renderExplicitSettingValues(settingId, this.props.room.roomId)
      });
    });
    (0, _defineProperty2.default)(this, "onSaveClick", async () => {
      try {
        const settingId = this.state.editSetting;
        const parsedExplicit = JSON.parse(this.state.explicitValues);
        const parsedExplicitRoom = JSON.parse(this.state.explicitRoomValues);

        for (const level of Object.keys(parsedExplicit)) {
          _logger.logger.log(`[Devtools] Setting value of ${settingId} at ${level} from user input`);

          try {
            const val = parsedExplicit[level];
            await _SettingsStore.default.setValue(settingId, null, level, val);
          } catch (e) {
            _logger.logger.warn(e);
          }
        }

        const roomId = this.props.room.roomId;

        for (const level of Object.keys(parsedExplicit)) {
          _logger.logger.log(`[Devtools] Setting value of ${settingId} at ${level} in ${roomId} from user input`);

          try {
            const val = parsedExplicitRoom[level];
            await _SettingsStore.default.setValue(settingId, roomId, level, val);
          } catch (e) {
            _logger.logger.warn(e);
          }
        }

        this.setState({
          viewSetting: settingId,
          editSetting: null
        });
      } catch (e) {
        _Modal.default.createTrackedDialog('Devtools - Failed to save settings', '', _ErrorDialog.default, {
          title: (0, _languageHandler._t)("Failed to save settings"),
          description: e.message
        });
      }
    });
    this.state = {
      query: '',
      editSetting: null,
      // set to a setting ID when editing
      viewSetting: null,
      // set to a setting ID when exploring in detail
      explicitValues: null,
      // stringified JSON for edit view
      explicitRoomValues: null // stringified JSON for edit view

    };
  }

  renderSettingValue(val) {
    // Note: we don't .toString() a string because we want JSON.stringify to inject quotes for us
    const toStringTypes = ['boolean', 'number'];

    if (toStringTypes.includes(typeof val)) {
      return val.toString();
    } else {
      return JSON.stringify(val);
    }
  }

  renderExplicitSettingValues(setting, roomId) {
    const vals = {};

    for (const level of _SettingsStore.LEVEL_ORDER) {
      try {
        vals[level] = _SettingsStore.default.getValueAt(level, setting, roomId, true, true);

        if (vals[level] === undefined) {
          vals[level] = null;
        }
      } catch (e) {
        _logger.logger.warn(e);
      }
    }

    return JSON.stringify(vals, null, 4);
  }

  renderCanEditLevel(roomId, level) {
    const canEdit = _SettingsStore.default.canSetValue(this.state.editSetting, roomId, level);

    const className = canEdit ? 'mx_DevTools_SettingsExplorer_mutable' : 'mx_DevTools_SettingsExplorer_immutable';
    return /*#__PURE__*/_react.default.createElement("td", {
      className: className
    }, /*#__PURE__*/_react.default.createElement("code", null, canEdit.toString()));
  }

  render() {
    const room = this.props.room;

    if (!this.state.viewSetting && !this.state.editSetting) {
      // view all settings
      const allSettings = Object.keys(_Settings.SETTINGS).filter(n => this.state.query ? n.toLowerCase().includes(this.state.query.toLowerCase()) : true);
      return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_Dialog_content mx_DevTools_SettingsExplorer"
      }, /*#__PURE__*/_react.default.createElement(_Field.default, {
        label: (0, _languageHandler._t)('Filter results'),
        autoFocus: true,
        size: 64,
        type: "text",
        autoComplete: "off",
        value: this.state.query,
        onChange: this.onQueryChange,
        className: "mx_TextInputDialog_input mx_DevTools_RoomStateExplorer_query"
      }), /*#__PURE__*/_react.default.createElement("table", null, /*#__PURE__*/_react.default.createElement("thead", null, /*#__PURE__*/_react.default.createElement("tr", null, /*#__PURE__*/_react.default.createElement("th", null, (0, _languageHandler._t)("Setting ID")), /*#__PURE__*/_react.default.createElement("th", null, (0, _languageHandler._t)("Value")), /*#__PURE__*/_react.default.createElement("th", null, (0, _languageHandler._t)("Value in this room")))), /*#__PURE__*/_react.default.createElement("tbody", null, allSettings.map(i => /*#__PURE__*/_react.default.createElement("tr", {
        key: i
      }, /*#__PURE__*/_react.default.createElement("td", null, /*#__PURE__*/_react.default.createElement("a", {
        href: "",
        onClick: e => this.onViewClick(e, i)
      }, /*#__PURE__*/_react.default.createElement("code", null, i)), /*#__PURE__*/_react.default.createElement("a", {
        href: "",
        onClick: e => this.onEditClick(e, i),
        className: "mx_DevTools_SettingsExplorer_edit"
      }, "\u270F")), /*#__PURE__*/_react.default.createElement("td", null, /*#__PURE__*/_react.default.createElement("code", null, this.renderSettingValue(_SettingsStore.default.getValue(i)))), /*#__PURE__*/_react.default.createElement("td", null, /*#__PURE__*/_react.default.createElement("code", null, this.renderSettingValue(_SettingsStore.default.getValue(i, room.roomId))))))))), /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_Dialog_buttons"
      }, /*#__PURE__*/_react.default.createElement("button", {
        onClick: this.onBack
      }, (0, _languageHandler._t)("Back"))));
    } else if (this.state.editSetting) {
      return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_Dialog_content mx_DevTools_SettingsExplorer"
      }, /*#__PURE__*/_react.default.createElement("h3", null, (0, _languageHandler._t)("Setting:"), " ", /*#__PURE__*/_react.default.createElement("code", null, this.state.editSetting)), /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_DevTools_SettingsExplorer_warning"
      }, /*#__PURE__*/_react.default.createElement("b", null, (0, _languageHandler._t)("Caution:")), " ", (0, _languageHandler._t)("This UI does NOT check the types of the values. Use at your own risk.")), /*#__PURE__*/_react.default.createElement("div", null, (0, _languageHandler._t)("Setting definition:"), /*#__PURE__*/_react.default.createElement("pre", null, /*#__PURE__*/_react.default.createElement("code", null, JSON.stringify(_Settings.SETTINGS[this.state.editSetting], null, 4)))), /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("table", null, /*#__PURE__*/_react.default.createElement("thead", null, /*#__PURE__*/_react.default.createElement("tr", null, /*#__PURE__*/_react.default.createElement("th", null, (0, _languageHandler._t)("Level")), /*#__PURE__*/_react.default.createElement("th", null, (0, _languageHandler._t)("Settable at global")), /*#__PURE__*/_react.default.createElement("th", null, (0, _languageHandler._t)("Settable at room")))), /*#__PURE__*/_react.default.createElement("tbody", null, _SettingsStore.LEVEL_ORDER.map(lvl => /*#__PURE__*/_react.default.createElement("tr", {
        key: lvl
      }, /*#__PURE__*/_react.default.createElement("td", null, /*#__PURE__*/_react.default.createElement("code", null, lvl)), this.renderCanEditLevel(null, lvl), this.renderCanEditLevel(room.roomId, lvl)))))), /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_Field.default, {
        id: "valExpl",
        label: (0, _languageHandler._t)("Values at explicit levels"),
        type: "text",
        className: "mx_DevTools_textarea",
        element: "textarea",
        autoComplete: "off",
        value: this.state.explicitValues,
        onChange: this.onExplValuesEdit
      })), /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_Field.default, {
        id: "valExpl",
        label: (0, _languageHandler._t)("Values at explicit levels in this room"),
        type: "text",
        className: "mx_DevTools_textarea",
        element: "textarea",
        autoComplete: "off",
        value: this.state.explicitRoomValues,
        onChange: this.onExplRoomValuesEdit
      }))), /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_Dialog_buttons"
      }, /*#__PURE__*/_react.default.createElement("button", {
        onClick: this.onSaveClick
      }, (0, _languageHandler._t)("Save setting values")), /*#__PURE__*/_react.default.createElement("button", {
        onClick: this.onBack
      }, (0, _languageHandler._t)("Back"))));
    } else if (this.state.viewSetting) {
      return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_Dialog_content mx_DevTools_SettingsExplorer"
      }, /*#__PURE__*/_react.default.createElement("h3", null, (0, _languageHandler._t)("Setting:"), " ", /*#__PURE__*/_react.default.createElement("code", null, this.state.viewSetting)), /*#__PURE__*/_react.default.createElement("div", null, (0, _languageHandler._t)("Setting definition:"), /*#__PURE__*/_react.default.createElement("pre", null, /*#__PURE__*/_react.default.createElement("code", null, JSON.stringify(_Settings.SETTINGS[this.state.viewSetting], null, 4)))), /*#__PURE__*/_react.default.createElement("div", null, (0, _languageHandler._t)("Value:"), "\xA0", /*#__PURE__*/_react.default.createElement("code", null, this.renderSettingValue(_SettingsStore.default.getValue(this.state.viewSetting)))), /*#__PURE__*/_react.default.createElement("div", null, (0, _languageHandler._t)("Value in this room:"), "\xA0", /*#__PURE__*/_react.default.createElement("code", null, this.renderSettingValue(_SettingsStore.default.getValue(this.state.viewSetting, room.roomId)))), /*#__PURE__*/_react.default.createElement("div", null, (0, _languageHandler._t)("Values at explicit levels:"), /*#__PURE__*/_react.default.createElement("pre", null, /*#__PURE__*/_react.default.createElement("code", null, this.renderExplicitSettingValues(this.state.viewSetting, null)))), /*#__PURE__*/_react.default.createElement("div", null, (0, _languageHandler._t)("Values at explicit levels in this room:"), /*#__PURE__*/_react.default.createElement("pre", null, /*#__PURE__*/_react.default.createElement("code", null, this.renderExplicitSettingValues(this.state.viewSetting, room.roomId))))), /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_Dialog_buttons"
      }, /*#__PURE__*/_react.default.createElement("button", {
        onClick: e => this.onEditClick(e, this.state.viewSetting)
      }, (0, _languageHandler._t)("Edit Values")), /*#__PURE__*/_react.default.createElement("button", {
        onClick: this.onBack
      }, (0, _languageHandler._t)("Back"))));
    }
  }

}

const Entries = [SendCustomEvent, RoomStateExplorer, SendAccountData, AccountDataExplorer, ServersInRoomList, VerificationExplorer, WidgetExplorer, SettingsExplorer];
let DevtoolsDialog = (_dec = (0, _replaceableComponent.replaceableComponent)("views.dialogs.DevtoolsDialog"), _dec(_class = class DevtoolsDialog extends _react.default.PureComponent {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "onBack", () => {
      this.setState({
        mode: null
      });
    });
    (0, _defineProperty2.default)(this, "onCancel", () => {
      this.props.onFinished(false);
    });
    this.state = {
      mode: null
    };
  }

  setMode(mode) {
    return () => {
      this.setState({
        mode
      });
    };
  }

  render() {
    let body;

    if (this.state.mode) {
      body = /*#__PURE__*/_react.default.createElement(_MatrixClientContext.default.Consumer, null, cli => /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_DevTools_label_left"
      }, this.state.mode.getLabel()), /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_DevTools_label_right"
      }, "Room ID: ", this.props.roomId), /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_DevTools_label_bottom"
      }), /*#__PURE__*/_react.default.createElement(this.state.mode, {
        onBack: this.onBack,
        room: cli.getRoom(this.props.roomId)
      })));
    } else {
      const classes = "mx_DevTools_RoomStateExplorer_button";
      body = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_DevTools_label_left"
      }, (0, _languageHandler._t)('Toolbox')), /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_DevTools_label_right"
      }, "Room ID: ", this.props.roomId), /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_DevTools_label_bottom"
      }), /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_Dialog_content"
      }, Entries.map(Entry => {
        const label = Entry.getLabel();
        const onClick = this.setMode(Entry);
        return /*#__PURE__*/_react.default.createElement("button", {
          className: classes,
          key: label,
          onClick: onClick
        }, label);
      }))), /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_Dialog_buttons"
      }, /*#__PURE__*/_react.default.createElement("button", {
        onClick: this.onCancel
      }, (0, _languageHandler._t)('Cancel'))));
    }

    return /*#__PURE__*/_react.default.createElement(_BaseDialog.default, {
      className: "mx_QuestionDialog",
      onFinished: this.props.onFinished,
      title: (0, _languageHandler._t)('Developer Tools')
    }, body);
  }

}) || _class);
exports.default = DevtoolsDialog;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL2RpYWxvZ3MvRGV2dG9vbHNEaWFsb2cudHN4Il0sIm5hbWVzIjpbIkdlbmVyaWNFZGl0b3IiLCJSZWFjdCIsIlB1cmVDb21wb25lbnQiLCJzdGF0ZSIsIm1lc3NhZ2UiLCJzZXRTdGF0ZSIsInByb3BzIiwib25CYWNrIiwiZSIsInRhcmdldCIsImlkIiwidHlwZSIsImNoZWNrZWQiLCJ2YWx1ZSIsImJ1dHRvbnMiLCJzZW5kIiwidGV4dElucHV0IiwibGFiZWwiLCJvbkNoYW5nZSIsIlNlbmRDdXN0b21FdmVudCIsImdldExhYmVsIiwiY29uc3RydWN0b3IiLCJldmVudFR5cGUiLCJjb250ZW50IiwiSlNPTiIsInBhcnNlIiwiZXZDb250ZW50IiwiZG9TZW5kIiwidG9TdHJpbmciLCJzdGF0ZUtleSIsIk9iamVjdCIsImFzc2lnbiIsImlucHV0cyIsImlzU3RhdGVFdmVudCIsIkJvb2xlYW4iLCJmb3JjZVN0YXRlRXZlbnQiLCJjbGkiLCJjb250ZXh0Iiwic2VuZFN0YXRlRXZlbnQiLCJyb29tIiwicm9vbUlkIiwic2VuZEV2ZW50IiwicmVuZGVyIiwic2hvd1RnbEZsaXAiLCJmb3JjZUdlbmVyYWxFdmVudCIsImZsb2F0IiwiTWF0cml4Q2xpZW50Q29udGV4dCIsIlNlbmRBY2NvdW50RGF0YSIsImlzUm9vbUFjY291bnREYXRhIiwic2V0Um9vbUFjY291bnREYXRhIiwic2V0QWNjb3VudERhdGEiLCJmb3JjZU1vZGUiLCJJTklUSUFMX0xPQURfVElMRVMiLCJMT0FEX1RJTEVTX1NURVBfU0laRSIsIkZpbHRlcmVkTGlzdCIsImZpbHRlckNoaWxkcmVuIiwiY2hpbGRyZW4iLCJxdWVyeSIsImxjUXVlcnkiLCJ0b0xvd2VyQ2FzZSIsImZpbHRlciIsImNoaWxkIiwia2V5IiwiaW5jbHVkZXMiLCJ0cnVuY2F0ZUF0Iiwib3ZlcmZsb3dDb3VudCIsInRvdGFsQ291bnQiLCJzaG93QWxsIiwiY291bnQiLCJldiIsInN0YXJ0IiwiZW5kIiwiZmlsdGVyZWRDaGlsZHJlbiIsInNsaWNlIiwibGVuZ3RoIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJuZXh0UHJvcHMiLCJvblF1ZXJ5IiwiZ2V0Q2hpbGRyZW4iLCJnZXRDaGlsZENvdW50IiwiY3JlYXRlT3ZlcmZsb3dFbGVtZW50IiwiUm9vbVN0YXRlRXhwbG9yZXIiLCJlZGl0aW5nIiwiZXZlbnQiLCJmaWx0ZXJFdmVudFR5cGUiLCJxdWVyeUV2ZW50VHlwZSIsImZpbHRlclN0YXRlS2V5IiwicXVlcnlTdGF0ZUtleSIsInJvb21TdGF0ZUV2ZW50cyIsImN1cnJlbnRTdGF0ZSIsImV2ZW50cyIsImJyb3dzZUV2ZW50VHlwZSIsIm9uVmlld1NvdXJjZUNsaWNrIiwiZ2V0VHlwZSIsInN0cmluZ2lmeSIsImdldENvbnRlbnQiLCJnZXRTdGF0ZUtleSIsImVkaXRFdiIsImxpc3QiLCJjbGFzc2VzIiwib25RdWVyeUV2ZW50VHlwZSIsIkFycmF5IiwiZnJvbSIsImVudHJpZXMiLCJtYXAiLCJhbGxTdGF0ZUtleXMiLCJvbkNsaWNrRm4iLCJzaXplIiwiaGFzIiwiZ2V0Iiwic3RhdGVHcm91cCIsIm9uUXVlcnlTdGF0ZUtleSIsIkFjY291bnREYXRhRXhwbG9yZXIiLCJnZXREYXRhIiwiYWNjb3VudERhdGEiLCJzdG9yZSIsInJvd3MiLCJkYXRhIiwia2V5cyIsImZvckVhY2giLCJldlR5cGUiLCJwdXNoIiwiU2VydmVyc0luUm9vbUxpc3QiLCJzZXJ2ZXJzIiwiU2V0IiwiZ2V0U3RhdGVFdmVudHMiLCJhZGQiLCJnZXRTZW5kZXIiLCJzcGxpdCIsInMiLCJQSEFTRV9NQVAiLCJQSEFTRV9VTlNFTlQiLCJQSEFTRV9SRVFVRVNURUQiLCJQSEFTRV9SRUFEWSIsIlBIQVNFX0RPTkUiLCJQSEFTRV9TVEFSVEVEIiwiUEhBU0VfQ0FOQ0VMTEVEIiwiVmVyaWZpY2F0aW9uUmVxdWVzdEV4cGxvcmVyIiwidHhuSWQiLCJyZXF1ZXN0IiwidXBkYXRlU3RhdGUiLCJ0aW1lb3V0Iiwic2V0UmVxdWVzdFRpbWVvdXQiLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJwaGFzZSIsIk1hdGgiLCJmbG9vciIsIm1ldGhvZHMiLCJqb2luIiwicmVxdWVzdGluZ1VzZXJJZCIsIm9ic2VydmVPbmx5IiwiVmVyaWZpY2F0aW9uRXhwbG9yZXIiLCJmb3JjZVVwZGF0ZSIsImNvbXBvbmVudERpZE1vdW50Iiwib24iLCJvbk5ld1JlcXVlc3QiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsIm9mZiIsImluUm9vbUNoYW5uZWwiLCJjcnlwdG8iLCJpblJvb21WZXJpZmljYXRpb25SZXF1ZXN0cyIsImluUm9vbVJlcXVlc3RzIiwiX3JlcXVlc3RzQnlSb29tSWQiLCJNYXAiLCJyZXZlcnNlIiwiV2lkZ2V0RXhwbG9yZXIiLCJDb21wb25lbnQiLCJ3aWRnZXQiLCJlZGl0V2lkZ2V0Iiwid2lkZ2V0cyIsIldpZGdldFN0b3JlIiwiaW5zdGFuY2UiLCJnZXRBcHBzIiwiVVBEQVRFX0VWRU5UIiwib25XaWRnZXRTdG9yZVVwZGF0ZSIsImFsbFN0YXRlIiwidmFsdWVzIiwicmVkdWNlIiwicCIsImMiLCJzdGF0ZUV2IiwiZmluZCIsImdldElkIiwiZXZlbnRJZCIsIm9uUXVlcnlDaGFuZ2UiLCJ3IiwidXJsIiwib25FZGl0V2lkZ2V0IiwiU2V0dGluZ3NFeHBsb3JlciIsImV4cGxpY2l0VmFsdWVzIiwiZXhwbGljaXRSb29tVmFsdWVzIiwiZWRpdFNldHRpbmciLCJ2aWV3U2V0dGluZyIsInNldHRpbmdJZCIsInByZXZlbnREZWZhdWx0IiwicmVuZGVyRXhwbGljaXRTZXR0aW5nVmFsdWVzIiwicGFyc2VkRXhwbGljaXQiLCJwYXJzZWRFeHBsaWNpdFJvb20iLCJsZXZlbCIsImxvZ2dlciIsImxvZyIsInZhbCIsIlNldHRpbmdzU3RvcmUiLCJzZXRWYWx1ZSIsIndhcm4iLCJNb2RhbCIsImNyZWF0ZVRyYWNrZWREaWFsb2ciLCJFcnJvckRpYWxvZyIsInRpdGxlIiwiZGVzY3JpcHRpb24iLCJyZW5kZXJTZXR0aW5nVmFsdWUiLCJ0b1N0cmluZ1R5cGVzIiwic2V0dGluZyIsInZhbHMiLCJMRVZFTF9PUkRFUiIsImdldFZhbHVlQXQiLCJ1bmRlZmluZWQiLCJyZW5kZXJDYW5FZGl0TGV2ZWwiLCJjYW5FZGl0IiwiY2FuU2V0VmFsdWUiLCJjbGFzc05hbWUiLCJhbGxTZXR0aW5ncyIsIlNFVFRJTkdTIiwibiIsImkiLCJvblZpZXdDbGljayIsIm9uRWRpdENsaWNrIiwiZ2V0VmFsdWUiLCJsdmwiLCJvbkV4cGxWYWx1ZXNFZGl0Iiwib25FeHBsUm9vbVZhbHVlc0VkaXQiLCJvblNhdmVDbGljayIsIkVudHJpZXMiLCJEZXZ0b29sc0RpYWxvZyIsIm1vZGUiLCJvbkZpbmlzaGVkIiwic2V0TW9kZSIsImJvZHkiLCJnZXRSb29tIiwiRW50cnkiLCJvbkNsaWNrIiwib25DYW5jZWwiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBaUJBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUVBOztBQVNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUlBOztBQUNBOztBQUVBOzs7Ozs7OztBQVdBLE1BQWVBLGFBQWYsU0FHVUMsZUFBTUMsYUFIaEIsQ0FHb0M7QUFBQTtBQUFBO0FBQUEsa0RBQ2IsTUFBTTtBQUNyQixVQUFJLEtBQUtDLEtBQUwsQ0FBV0MsT0FBZixFQUF3QjtBQUNwQixhQUFLQyxRQUFMLENBQWM7QUFBRUQsVUFBQUEsT0FBTyxFQUFFO0FBQVgsU0FBZDtBQUNILE9BRkQsTUFFTztBQUNILGFBQUtFLEtBQUwsQ0FBV0MsTUFBWDtBQUNIO0FBQ0osS0FQK0I7QUFBQSxvREFTVkMsQ0FBRCxJQUE0RDtBQUM3RTtBQUNBO0FBQ0EsV0FBS0gsUUFBTCxDQUFjO0FBQUUsU0FBQ0csQ0FBQyxDQUFDQyxNQUFGLENBQVNDLEVBQVYsR0FBZUYsQ0FBQyxDQUFDQyxNQUFGLENBQVNFLElBQVQsS0FBa0IsVUFBbEIsR0FBK0JILENBQUMsQ0FB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QWRHLENBQVA7QUFrQkg7O0FBRUQsd0JBQ0ksNkJBQUMsbUJBQUQ7QUFBWSxNQUFBLFNBQVMsRUFBQyxtQkFBdEI7QUFBMEMsTUFBQSxVQUFVLEVBQUUsS0FBSzVPLEtBQUwsQ0FBV3NPLFVBQWpFO0FBQTZFLE1BQUEsS0FBSyxFQUFFLHlCQUFHLGlCQUFIO0FBQXBGLE9BQ01FLElBRE4sQ0FESjtBQUtIOztBQTlEMkUsQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5Db3B5cmlnaHQgMjAxNyBNaWNoYWVsIFRlbGF0eW5za2kgPDd0M2NoZ3V5QGdtYWlsLmNvbT5cbkNvcHlyaWdodCAyMDE4LTIwMjEgVGhlIE1hdHJpeC5vcmcgRm91bmRhdGlvbiBDLkkuQy5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG5pbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUVmZmVjdCwgQ2hhbmdlRXZlbnQsIE1vdXNlRXZlbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgU3ludGF4SGlnaGxpZ2h0IGZyb20gJy4uL2VsZW1lbnRzL1N5bnRheEhpZ2hsaWdodCc7XG5pbXBvcnQgeyBfdCB9IGZyb20gJy4uLy4uLy4uL2xhbmd1YWdlSGFuZGxlcic7XG5pbXBvcnQgRmllbGQgZnJvbSBcIi4uL2VsZW1lbnRzL0ZpZWxkXCI7XG5pbXBvcnQgTWF0cml4Q2xpZW50Q29udGV4dCBmcm9tIFwiLi4vLi4vLi4vY29udGV4dHMvTWF0cml4Q2xpZW50Q29udGV4dFwiO1xuaW1wb3J0IHsgdXNlRXZlbnRFbWl0dGVyIH0gZnJvbSBcIi4uLy4uLy4uL2hvb2tzL3VzZUV2ZW50RW1pdHRlclwiO1xuXG5pbXBvcnQge1xuICAgIFBIQVNFX1VOU0VOVCxcbiAgICBQSEFTRV9SRVFVRVNURUQsXG4gICAgUEhBU0VfUkVBRFksXG4gICAgUEhBU0VfRE9ORSxcbiAgICBQSEFTRV9TVEFSVEVELFxuICAgIFBIQVNFX0NBTkNFTExFRCxcbiAgICBWZXJpZmljYXRpb25SZXF1ZXN0LFxufSBmcm9tIFwibWF0cml4LWpzLXNkay9zcmMvY3J5cHRvL3ZlcmlmaWNhdGlvbi9yZXF1ZXN0L1ZlcmlmaWNhdGlvblJlcXVlc3RcIjtcbmltcG9ydCBXaWRnZXRTdG9yZSwgeyBJQXBwIH0gZnJvbSBcIi4uLy4uLy4uL3N0b3Jlcy9XaWRnZXRTdG9yZVwiO1xuaW1wb3J0IHsgVVBEQVRFX0VWRU5UIH0gZnJvbSBcIi4uLy4uLy4uL3N0b3Jlcy9Bc3luY1N0b3JlXCI7XG5pbXBvcnQgeyBTRVRUSU5HUyB9IGZyb20gXCIuLi8uLi8uLi9zZXR0aW5ncy9TZXR0aW5nc1wiO1xuaW1wb3J0IFNldHRpbmdzU3RvcmUsIHsgTEVWRUxfT1JERVIgfSBmcm9tIFwiLi4vLi4vLi4vc2V0dGluZ3MvU2V0dGluZ3NTdG9yZVwiO1xuaW1wb3J0IE1vZGFsIGZyb20gXCIuLi8uLi8uLi9Nb2RhbFwiO1xuaW1wb3J0IEVycm9yRGlhbG9nIGZyb20gXCIuL0Vycm9yRGlhbG9nXCI7XG5pbXBvcnQgeyByZXBsYWNlYWJsZUNvbXBvbmVudCB9IGZyb20gXCIuLi8uLi8uLi91dGlscy9yZXBsYWNlYWJsZUNvbXBvbmVudFwiO1xuaW1wb3J0IHsgUm9vbSB9IGZyb20gXCJtYXRyaXgtanMtc2RrL3NyYy9tb2RlbHMvcm9vbVwiO1xuaW1wb3J0IHsgTWF0cml4RXZlbnQgfSBmcm9tIFwibWF0cml4LWpzLXNkay9zcmMvbW9kZWxzL2V2ZW50XCI7XG5pbXBvcnQgeyBTZXR0aW5nTGV2ZWwgfSBmcm9tICcuLi8uLi8uLi9zZXR0aW5ncy9TZXR0aW5nTGV2ZWwnO1xuaW1wb3J0IEJhc2VEaWFsb2cgZnJvbSBcIi4vQmFzZURpYWxvZ1wiO1xuaW1wb3J0IFRydW5jYXRlZExpc3QgZnJvbSBcIi4uL2VsZW1lbnRzL1RydW5jYXRlZExpc3RcIjtcblxuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSBcIm1hdHJpeC1qcy1zZGsvc3JjL2xvZ2dlclwiO1xuXG5pbnRlcmZhY2UgSUdlbmVyaWNFZGl0b3JQcm9wcyB7XG4gICAgb25CYWNrOiAoKSA9PiB2b2lkO1xufVxuXG5pbnRlcmZhY2UgSUdlbmVyaWNFZGl0b3JTdGF0ZSB7XG4gICAgbWVzc2FnZT86IHN0cmluZztcbiAgICBbaW5wdXRJZDogc3RyaW5nXTogYm9vbGVhbiB8IHN0cmluZztcbn1cblxuYWJzdHJhY3QgY2xhc3MgR2VuZXJpY0VkaXRvcjxcbiAgICBQIGV4dGVuZHMgSUdlbmVyaWNFZGl0b3JQcm9wcyA9IElHZW5lcmljRWRpdG9yUHJvcHMsXG4gICAgUyBleHRlbmRzIElHZW5lcmljRWRpdG9yU3RhdGUgPSBJR2VuZXJpY0VkaXRvclN0YXRlLFxuPiBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQ8UCwgUz4ge1xuICAgIHByb3RlY3RlZCBvbkJhY2sgPSAoKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLm1lc3NhZ2UpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBtZXNzYWdlOiBudWxsIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5wcm9wcy5vbkJhY2soKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBwcm90ZWN0ZWQgb25DaGFuZ2UgPSAoZTogQ2hhbmdlRXZlbnQ8SFRNTElucHV0RWxlbWVudCB8IEhUTUxUZXh0QXJlYUVsZW1lbnQ+KSA9PiB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmU6IFVuc3VyZSBob3cgdG8gY29udmluY2UgVFMgdGhpcyBpcyBva2F5IHdoZW4gdGhlIHN0YXRlXG4gICAgICAgIC8vIHR5cGUgY2FuIGJlIGV4dGVuZGVkLlxuICAgICAgICB0aGlzLnNldFN0YXRlKHsgW2UudGFyZ2V0LmlkXTogZS50YXJnZXQudHlwZSA9PT0gJ2NoZWNrYm94JyA/IGUudGFyZ2V0LmNoZWNrZWQgOiBlLnRhcmdldC52YWx1ZSB9KTtcbiAgICB9O1xuXG4gICAgcHJvdGVjdGVkIGFic3RyYWN0IHNlbmQoKTtcblxuICAgIHByb3RlY3RlZCBidXR0b25zKCk6IFJlYWN0LlJlYWN0Tm9kZSB7XG4gICAgICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cIm14X0RpYWxvZ19idXR0b25zXCI+XG4gICAgICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e3RoaXMub25CYWNrfT57IF90KCdCYWNrJykgfTwvYnV0dG9uPlxuICAgICAgICAgICAgeyAhdGhpcy5zdGF0ZS5tZXNzYWdlICYmIDxidXR0b24gb25DbGljaz17dGhpcy5zZW5kfT57IF90KCdTZW5kJykgfTwvYnV0dG9uPiB9XG4gICAgICAgIDwvZGl2PjtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgdGV4dElucHV0KGlkOiBzdHJpbmcsIGxhYmVsOiBzdHJpbmcpOiBSZWFjdC5SZWFjdE5vZGUge1xuICAgICAgICByZXR1cm4gPEZpZWxkXG4gICAgICAgICAgICBpZD17aWR9XG4gICAgICAgICAgICBsYWJlbD17bGFiZWx9XG4gICAgICAgICAgICBzaXplPXs0Mn1cbiAgICAgICAgICAgIGF1dG9Gb2N1cz17dHJ1ZX1cbiAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICAgIGF1dG9Db21wbGV0ZT1cIm9uXCJcbiAgICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlW2lkXSBhcyBzdHJpbmd9XG4gICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5vbkNoYW5nZX1cbiAgICAgICAgLz47XG4gICAgfVxufVxuXG5pbnRlcmZhY2UgSVNlbmRDdXN0b21FdmVudFByb3BzIGV4dGVuZHMgSUdlbmVyaWNFZGl0b3JQcm9wcyB7XG4gICAgcm9vbTogUm9vbTtcbiAgICBmb3JjZVN0YXRlRXZlbnQ/OiBib29sZWFuO1xuICAgIGZvcmNlR2VuZXJhbEV2ZW50PzogYm9vbGVhbjtcbiAgICBpbnB1dHM/OiB7XG4gICAgICAgIGV2ZW50VHlwZT86IHN0cmluZztcbiAgICAgICAgc3RhdGVLZXk/OiBzdHJpbmc7XG4gICAgICAgIGV2Q29udGVudD86IHN0cmluZztcbiAgICB9O1xufVxuXG5pbnRlcmZhY2UgSVNlbmRDdXN0b21FdmVudFN0YXRlIGV4dGVuZHMgSUdlbmVyaWNFZGl0b3JTdGF0ZSB7XG4gICAgaXNTdGF0ZUV2ZW50OiBib29sZWFuO1xuICAgIGV2ZW50VHlwZTogc3RyaW5nO1xuICAgIHN0YXRlS2V5OiBzdHJpbmc7XG4gICAgZXZDb250ZW50OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjbGFzcyBTZW5kQ3VzdG9tRXZlbnQgZXh0ZW5kcyBHZW5lcmljRWRpdG9yPElTZW5kQ3VzdG9tRXZlbnRQcm9wcywgSVNlbmRDdXN0b21FdmVudFN0YXRlPiB7XG4gICAgc3RhdGljIGdldExhYmVsKCkgeyByZXR1cm4gX3QoJ1NlbmQgQ3VzdG9tIEV2ZW50Jyk7IH1cblxuICAgIHN0YXRpYyBjb250ZXh0VHlwZSA9IE1hdHJpeENsaWVudENvbnRleHQ7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG5cbiAgICAgICAgY29uc3QgeyBldmVudFR5cGUsIHN0YXRlS2V5LCBldkNvbnRlbnQgfSA9IE9iamVjdC5hc3NpZ24oe1xuICAgICAgICAgICAgZXZlbnRUeXBlOiAnJyxcbiAgICAgICAgICAgIHN0YXRlS2V5OiAnJyxcbiAgICAgICAgICAgIGV2Q29udGVudDogJ3tcXG5cXG59JyxcbiAgICAgICAgfSwgdGhpcy5wcm9wcy5pbnB1dHMpO1xuXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBpc1N0YXRlRXZlbnQ6IEJvb2xlYW4odGhpcy5wcm9wcy5mb3JjZVN0YXRlRXZlbnQpLFxuXG4gICAgICAgICAgICBldmVudFR5cGUsXG4gICAgICAgICAgICBzdGF0ZUtleSxcbiAgICAgICAgICAgIGV2Q29udGVudCxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGRvU2VuZChjb250ZW50OiBvYmplY3QpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgY29uc3QgY2xpID0gdGhpcy5jb250ZXh0O1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS5pc1N0YXRlRXZlbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBjbGkuc2VuZFN0YXRlRXZlbnQodGhpcy5wcm9wcy5yb29tLnJvb21JZCwgdGhpcy5zdGF0ZS5ldmVudFR5cGUsIGNvbnRlbnQsIHRoaXMuc3RhdGUuc3RhdGVLZXkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGNsaS5zZW5kRXZlbnQodGhpcy5wcm9wcy5yb29tLnJvb21JZCwgdGhpcy5zdGF0ZS5ldmVudFR5cGUsIGNvbnRlbnQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIHNlbmQgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmV2ZW50VHlwZSA9PT0gJycpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBtZXNzYWdlOiBfdCgnWW91IG11c3Qgc3BlY2lmeSBhbiBldmVudCB0eXBlIScpIH0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IG1lc3NhZ2U7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBjb250ZW50ID0gSlNPTi5wYXJzZSh0aGlzLnN0YXRlLmV2Q29udGVudCk7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmRvU2VuZChjb250ZW50KTtcbiAgICAgICAgICAgIG1lc3NhZ2UgPSBfdCgnRXZlbnQgc2VudCEnKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgbWVzc2FnZSA9IF90KCdGYWlsZWQgdG8gc2VuZCBjdXN0b20gZXZlbnQuJykgKyAnICgnICsgZS50b1N0cmluZygpICsgJyknO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBtZXNzYWdlIH0pO1xuICAgIH07XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLm1lc3NhZ2UpIHtcbiAgICAgICAgICAgIHJldHVybiA8ZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibXhfRGlhbG9nX2NvbnRlbnRcIj5cbiAgICAgICAgICAgICAgICAgICAgeyB0aGlzLnN0YXRlLm1lc3NhZ2UgfVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIHsgdGhpcy5idXR0b25zKCkgfVxuICAgICAgICAgICAgPC9kaXY+O1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc2hvd1RnbEZsaXAgPSAhdGhpcy5zdGF0ZS5tZXNzYWdlICYmICF0aGlzLnByb3BzLmZvcmNlU3RhdGVFdmVudCAmJiAhdGhpcy5wcm9wcy5mb3JjZUdlbmVyYWxFdmVudDtcblxuICAgICAgICByZXR1cm4gPGRpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibXhfRGV2VG9vbHNfY29udGVudFwiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibXhfRGV2VG9vbHNfZXZlbnRUeXBlU3RhdGVLZXlHcm91cFwiPlxuICAgICAgICAgICAgICAgICAgICB7IHRoaXMudGV4dElucHV0KCdldmVudFR5cGUnLCBfdCgnRXZlbnQgVHlwZScpKSB9XG4gICAgICAgICAgICAgICAgICAgIHsgdGhpcy5zdGF0ZS5pc1N0YXRlRXZlbnQgJiYgdGhpcy50ZXh0SW5wdXQoJ3N0YXRlS2V5JywgX3QoJ1N0YXRlIEtleScpKSB9XG4gICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICA8YnIgLz5cblxuICAgICAgICAgICAgICAgIDxGaWVsZFxuICAgICAgICAgICAgICAgICAgICBpZD1cImV2Q29udGVudFwiXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsPXtfdChcIkV2ZW50IENvbnRlbnRcIil9XG4gICAgICAgICAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwibXhfRGV2VG9vbHNfdGV4dGFyZWFcIlxuICAgICAgICAgICAgICAgICAgICBhdXRvQ29tcGxldGU9XCJvZmZcIlxuICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS5ldkNvbnRlbnR9XG4gICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLm9uQ2hhbmdlfVxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50PVwidGV4dGFyZWFcIiAvPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm14X0RpYWxvZ19idXR0b25zXCI+XG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXt0aGlzLm9uQmFja30+eyBfdCgnQmFjaycpIH08L2J1dHRvbj5cbiAgICAgICAgICAgICAgICB7ICF0aGlzLnN0YXRlLm1lc3NhZ2UgJiYgPGJ1dHRvbiBvbkNsaWNrPXt0aGlzLnNlbmR9PnsgX3QoJ1NlbmQnKSB9PC9idXR0b24+IH1cbiAgICAgICAgICAgICAgICB7IHNob3dUZ2xGbGlwICYmIDxkaXYgc3R5bGU9e3sgZmxvYXQ6IFwicmlnaHRcIiB9fT5cbiAgICAgICAgICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgICAgICAgICBpZD1cImlzU3RhdGVFdmVudFwiXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJteF9EZXZUb29sc190Z2wgbXhfRGV2VG9vbHNfdGdsLWZsaXBcIlxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cImNoZWNrYm94XCJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrZWQ9e3RoaXMuc3RhdGUuaXNTdGF0ZUV2ZW50fVxuICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMub25DaGFuZ2V9XG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzc05hbWU9XCJteF9EZXZUb29sc190Z2wtYnRuXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdGctb2ZmPVwiRXZlbnRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10Zy1vbj1cIlN0YXRlIEV2ZW50XCJcbiAgICAgICAgICAgICAgICAgICAgICAgIGh0bWxGb3I9XCJpc1N0YXRlRXZlbnRcIlxuICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDwvZGl2PiB9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+O1xuICAgIH1cbn1cblxuaW50ZXJmYWNlIElTZW5kQWNjb3VudERhdGFQcm9wcyBleHRlbmRzIElHZW5lcmljRWRpdG9yUHJvcHMge1xuICAgIHJvb206IFJvb207XG4gICAgaXNSb29tQWNjb3VudERhdGE6IGJvb2xlYW47XG4gICAgZm9yY2VNb2RlOiBib29sZWFuO1xuICAgIGlucHV0cz86IHtcbiAgICAgICAgZXZlbnRUeXBlPzogc3RyaW5nO1xuICAgICAgICBldkNvbnRlbnQ/OiBzdHJpbmc7XG4gICAgfTtcbn1cblxuaW50ZXJmYWNlIElTZW5kQWNjb3VudERhdGFTdGF0ZSBleHRlbmRzIElHZW5lcmljRWRpdG9yU3RhdGUge1xuICAgIGlzUm9vbUFjY291bnREYXRhOiBib29sZWFuO1xuICAgIGV2ZW50VHlwZTogc3RyaW5nO1xuICAgIGV2Q29udGVudDogc3RyaW5nO1xufVxuXG5jbGFzcyBTZW5kQWNjb3VudERhdGEgZXh0ZW5kcyBHZW5lcmljRWRpdG9yPElTZW5kQWNjb3VudERhdGFQcm9wcywgSVNlbmRBY2NvdW50RGF0YVN0YXRlPiB7XG4gICAgc3RhdGljIGdldExhYmVsKCkgeyByZXR1cm4gX3QoJ1NlbmQgQWNjb3VudCBEYXRhJyk7IH1cblxuICAgIHN0YXRpYyBjb250ZXh0VHlwZSA9IE1hdHJpeENsaWVudENvbnRleHQ7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG5cbiAgICAgICAgY29uc3QgeyBldmVudFR5cGUsIGV2Q29udGVudCB9ID0gT2JqZWN0LmFzc2lnbih7XG4gICAgICAgICAgICBldmVudFR5cGU6ICcnLFxuICAgICAgICAgICAgZXZDb250ZW50OiAne1xcblxcbn0nLFxuICAgICAgICB9LCB0aGlzLnByb3BzLmlucHV0cyk7XG5cbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIGlzUm9vbUFjY291bnREYXRhOiBCb29sZWFuKHRoaXMucHJvcHMuaXNSb29tQWNjb3VudERhdGEpLFxuXG4gICAgICAgICAgICBldmVudFR5cGUsXG4gICAgICAgICAgICBldkNvbnRlbnQsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBkb1NlbmQoY29udGVudDogb2JqZWN0KTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IGNsaSA9IHRoaXMuY29udGV4dDtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuaXNSb29tQWNjb3VudERhdGEpIHtcbiAgICAgICAgICAgIHJldHVybiBjbGkuc2V0Um9vbUFjY291bnREYXRhKHRoaXMucHJvcHMucm9vbS5yb29tSWQsIHRoaXMuc3RhdGUuZXZlbnRUeXBlLCBjb250ZW50KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2xpLnNldEFjY291bnREYXRhKHRoaXMuc3RhdGUuZXZlbnRUeXBlLCBjb250ZW50KTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgc2VuZCA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuZXZlbnRUeXBlID09PSAnJykge1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IG1lc3NhZ2U6IF90KCdZb3UgbXVzdCBzcGVjaWZ5IGFuIGV2ZW50IHR5cGUhJykgfSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgbWVzc2FnZTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGNvbnRlbnQgPSBKU09OLnBhcnNlKHRoaXMuc3RhdGUuZXZDb250ZW50KTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuZG9TZW5kKGNvbnRlbnQpO1xuICAgICAgICAgICAgbWVzc2FnZSA9IF90KCdFdmVudCBzZW50IScpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBtZXNzYWdlID0gX3QoJ0ZhaWxlZCB0byBzZW5kIGN1c3RvbSBldmVudC4nKSArICcgKCcgKyBlLnRvU3RyaW5nKCkgKyAnKSc7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IG1lc3NhZ2UgfSk7XG4gICAgfTtcblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUubWVzc2FnZSkge1xuICAgICAgICAgICAgcmV0dXJuIDxkaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJteF9EaWFsb2dfY29udGVudFwiPlxuICAgICAgICAgICAgICAgICAgICB7IHRoaXMuc3RhdGUubWVzc2FnZSB9XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgeyB0aGlzLmJ1dHRvbnMoKSB9XG4gICAgICAgICAgICA8L2Rpdj47XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gPGRpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibXhfRGV2VG9vbHNfY29udGVudFwiPlxuICAgICAgICAgICAgICAgIHsgdGhpcy50ZXh0SW5wdXQoJ2V2ZW50VHlwZScsIF90KCdFdmVudCBUeXBlJykpIH1cbiAgICAgICAgICAgICAgICA8YnIgLz5cblxuICAgICAgICAgICAgICAgIDxGaWVsZFxuICAgICAgICAgICAgICAgICAgICBpZD1cImV2Q29udGVudFwiXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsPXtfdChcIkV2ZW50IENvbnRlbnRcIil9XG4gICAgICAgICAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwibXhfRGV2VG9vbHNfdGV4dGFyZWFcIlxuICAgICAgICAgICAgICAgICAgICBhdXRvQ29tcGxldGU9XCJvZmZcIlxuICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS5ldkNvbnRlbnR9XG4gICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLm9uQ2hhbmdlfVxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50PVwidGV4dGFyZWFcIlxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibXhfRGlhbG9nX2J1dHRvbnNcIj5cbiAgICAgICAgICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e3RoaXMub25CYWNrfT57IF90KCdCYWNrJykgfTwvYnV0dG9uPlxuICAgICAgICAgICAgICAgIHsgIXRoaXMuc3RhdGUubWVzc2FnZSAmJiA8YnV0dG9uIG9uQ2xpY2s9e3RoaXMuc2VuZH0+eyBfdCgnU2VuZCcpIH08L2J1dHRvbj4gfVxuICAgICAgICAgICAgICAgIHsgIXRoaXMuc3RhdGUubWVzc2FnZSAmJiA8ZGl2IHN0eWxlPXt7IGZsb2F0OiBcInJpZ2h0XCIgfX0+XG4gICAgICAgICAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICAgICAgICAgICAgaWQ9XCJpc1Jvb21BY2NvdW50RGF0YVwiXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJteF9EZXZUb29sc190Z2wgbXhfRGV2VG9vbHNfdGdsLWZsaXBcIlxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cImNoZWNrYm94XCJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrZWQ9e3RoaXMuc3RhdGUuaXNSb29tQWNjb3VudERhdGF9XG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZD17dGhpcy5wcm9wcy5mb3JjZU1vZGV9XG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5vbkNoYW5nZX1cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzTmFtZT1cIm14X0RldlRvb2xzX3RnbC1idG5cIlxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10Zy1vZmY9XCJBY2NvdW50IERhdGFcIlxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10Zy1vbj1cIlJvb20gRGF0YVwiXG4gICAgICAgICAgICAgICAgICAgICAgICBodG1sRm9yPVwiaXNSb29tQWNjb3VudERhdGFcIlxuICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDwvZGl2PiB9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+O1xuICAgIH1cbn1cblxuY29uc3QgSU5JVElBTF9MT0FEX1RJTEVTID0gMjA7XG5jb25zdCBMT0FEX1RJTEVTX1NURVBfU0laRSA9IDUwO1xuXG5pbnRlcmZhY2UgSUZpbHRlcmVkTGlzdFByb3BzIHtcbiAgICBjaGlsZHJlbjogUmVhY3QuUmVhY3RFbGVtZW50W107XG4gICAgcXVlcnk6IHN0cmluZztcbiAgICBvbkNoYW5nZTogKHZhbHVlOiBzdHJpbmcpID0+IHZvaWQ7XG59XG5cbmludGVyZmFjZSBJRmlsdGVyZWRMaXN0U3RhdGUge1xuICAgIGZpbHRlcmVkQ2hpbGRyZW46IFJlYWN0LlJlYWN0RWxlbWVudFtdO1xuICAgIHRydW5jYXRlQXQ6IG51bWJlcjtcbn1cblxuY2xhc3MgRmlsdGVyZWRMaXN0IGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudDxJRmlsdGVyZWRMaXN0UHJvcHMsIElGaWx0ZXJlZExpc3RTdGF0ZT4ge1xuICAgIHN0YXRpYyBmaWx0ZXJDaGlsZHJlbihjaGlsZHJlbjogUmVhY3QuUmVhY3RFbGVtZW50W10sIHF1ZXJ5OiBzdHJpbmcpOiBSZWFjdC5SZWFjdEVsZW1lbnRbXSB7XG4gICAgICAgIGlmICghcXVlcnkpIHJldHVybiBjaGlsZHJlbjtcbiAgICAgICAgY29uc3QgbGNRdWVyeSA9IHF1ZXJ5LnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIHJldHVybiBjaGlsZHJlbi5maWx0ZXIoKGNoaWxkKSA9PiBjaGlsZC5rZXkudG9TdHJpbmcoKS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKGxjUXVlcnkpKTtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG5cbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIGZpbHRlcmVkQ2hpbGRyZW46IEZpbHRlcmVkTGlzdC5maWx0ZXJDaGlsZHJlbih0aGlzLnByb3BzLmNoaWxkcmVuLCB0aGlzLnByb3BzLnF1ZXJ5KSxcbiAgICAgICAgICAgIHRydW5jYXRlQXQ6IElOSVRJQUxfTE9BRF9USUxFUyxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBUT0RPOiBbUkVBQ1QtV0FSTklOR10gUmVwbGFjZSB3aXRoIGFwcHJvcHJpYXRlIGxpZmVjeWNsZSBldmVudFxuICAgIFVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgICAgIGlmICh0aGlzLnByb3BzLmNoaWxkcmVuID09PSBuZXh0UHJvcHMuY2hpbGRyZW4gJiYgdGhpcy5wcm9wcy5xdWVyeSA9PT0gbmV4dFByb3BzLnF1ZXJ5KSByZXR1cm47XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgZmlsdGVyZWRDaGlsZHJlbjogRmlsdGVyZWRMaXN0LmZpbHRlckNoaWxkcmVuKG5leHRQcm9wcy5jaGlsZHJlbiwgbmV4dFByb3BzLnF1ZXJ5KSxcbiAgICAgICAgICAgIHRydW5jYXRlQXQ6IElOSVRJQUxfTE9BRF9USUxFUyxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzaG93QWxsID0gKCkgPT4ge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIHRydW5jYXRlQXQ6IHRoaXMuc3RhdGUudHJ1bmNhdGVBdCArIExPQURfVElMRVNfU1RFUF9TSVpFLFxuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgcHJpdmF0ZSBjcmVhdGVPdmVyZmxvd0VsZW1lbnQgPSAob3ZlcmZsb3dDb3VudDogbnVtYmVyLCB0b3RhbENvdW50OiBudW1iZXIpID0+IHtcbiAgICAgICAgcmV0dXJuIDxidXR0b24gY2xhc3NOYW1lPVwibXhfRGV2VG9vbHNfUm9vbVN0YXRlRXhwbG9yZXJfYnV0dG9uXCIgb25DbGljaz17dGhpcy5zaG93QWxsfT5cbiAgICAgICAgICAgIHsgX3QoXCJhbmQgJShjb3VudClzIG90aGVycy4uLlwiLCB7IGNvdW50OiBvdmVyZmxvd0NvdW50IH0pIH1cbiAgICAgICAgPC9idXR0b24+O1xuICAgIH07XG5cbiAgICBwcml2YXRlIG9uUXVlcnkgPSAoZXY6IENoYW5nZUV2ZW50PEhUTUxJbnB1dEVsZW1lbnQ+KSA9PiB7XG4gICAgICAgIGlmICh0aGlzLnByb3BzLm9uQ2hhbmdlKSB0aGlzLnByb3BzLm9uQ2hhbmdlKGV2LnRhcmdldC52YWx1ZSk7XG4gICAgfTtcblxuICAgIHByaXZhdGUgZ2V0Q2hpbGRyZW4gPSAoc3RhcnQ6IG51bWJlciwgZW5kOiBudW1iZXIpOiBSZWFjdC5SZWFjdEVsZW1lbnRbXSA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0YXRlLmZpbHRlcmVkQ2hpbGRyZW4uc2xpY2Uoc3RhcnQsIGVuZCk7XG4gICAgfTtcblxuICAgIHByaXZhdGUgZ2V0Q2hpbGRDb3VudCA9ICgpOiBudW1iZXIgPT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZS5maWx0ZXJlZENoaWxkcmVuLmxlbmd0aDtcbiAgICB9O1xuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gPGRpdj5cbiAgICAgICAgICAgIDxGaWVsZFxuICAgICAgICAgICAgICAgIGxhYmVsPXtfdCgnRmlsdGVyIHJlc3VsdHMnKX1cbiAgICAgICAgICAgICAgICBhdXRvRm9jdXM9e3RydWV9XG4gICAgICAgICAgICAgICAgc2l6ZT17NjR9XG4gICAgICAgICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgICAgIGF1dG9Db21wbGV0ZT1cIm9mZlwiXG4gICAgICAgICAgICAgICAgdmFsdWU9e3RoaXMucHJvcHMucXVlcnl9XG4gICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMub25RdWVyeX1cbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJteF9UZXh0SW5wdXREaWFsb2dfaW5wdXQgbXhfRGV2VG9vbHNfUm9vbVN0YXRlRXhwbG9yZXJfcXVlcnlcIlxuICAgICAgICAgICAgICAgIC8vIGZvcmNlIHJlLXJlbmRlciBzbyB0aGF0IGF1dG9Gb2N1cyBpcyBhcHBsaWVkIHdoZW4gdGhpcyBjb21wb25lbnQgaXMgcmUtdXNlZFxuICAgICAgICAgICAgICAgIGtleT17dGhpcy5wcm9wcy5jaGlsZHJlblswXSA/IHRoaXMucHJvcHMuY2hpbGRyZW5bMF0ua2V5IDogJyd9XG4gICAgICAgICAgICAvPlxuXG4gICAgICAgICAgICA8VHJ1bmNhdGVkTGlzdCBnZXRDaGlsZHJlbj17dGhpcy5nZXRDaGlsZHJlbn1cbiAgICAgICAgICAgICAgICBnZXRDaGlsZENvdW50PXt0aGlzLmdldENoaWxkQ291bnR9XG4gICAgICAgICAgICAgICAgdHJ1bmNhdGVBdD17dGhpcy5zdGF0ZS50cnVuY2F0ZUF0fVxuICAgICAgICAgICAgICAgIGNyZWF0ZU92ZXJmbG93RWxlbWVudD17dGhpcy5jcmVhdGVPdmVyZmxvd0VsZW1lbnR9IC8+XG4gICAgICAgIDwvZGl2PjtcbiAgICB9XG59XG5cbmludGVyZmFjZSBJRXhwbG9yZXJQcm9wcyB7XG4gICAgcm9vbTogUm9vbTtcbiAgICBvbkJhY2s6ICgpID0+IHZvaWQ7XG59XG5cbmludGVyZmFjZSBJUm9vbVN0YXRlRXhwbG9yZXJTdGF0ZSB7XG4gICAgZXZlbnRUeXBlPzogc3RyaW5nO1xuICAgIGV2ZW50PzogTWF0cml4RXZlbnQ7XG4gICAgZWRpdGluZzogYm9vbGVhbjtcbiAgICBxdWVyeUV2ZW50VHlwZTogc3RyaW5nO1xuICAgIHF1ZXJ5U3RhdGVLZXk6IHN0cmluZztcbn1cblxuY2xhc3MgUm9vbVN0YXRlRXhwbG9yZXIgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50PElFeHBsb3JlclByb3BzLCBJUm9vbVN0YXRlRXhwbG9yZXJTdGF0ZT4ge1xuICAgIHN0YXRpYyBnZXRMYWJlbCgpIHsgcmV0dXJuIF90KCdFeHBsb3JlIFJvb20gU3RhdGUnKTsgfVxuXG4gICAgc3RhdGljIGNvbnRleHRUeXBlID0gTWF0cml4Q2xpZW50Q29udGV4dDtcblxuICAgIHByaXZhdGUgcm9vbVN0YXRlRXZlbnRzOiBNYXA8c3RyaW5nLCBNYXA8c3RyaW5nLCBNYXRyaXhFdmVudD4+O1xuXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuXG4gICAgICAgIHRoaXMucm9vbVN0YXRlRXZlbnRzID0gdGhpcy5wcm9wcy5yb29tLmN1cnJlbnRTdGF0ZS5ldmVudHM7XG5cbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIGV2ZW50VHlwZTogbnVsbCxcbiAgICAgICAgICAgIGV2ZW50OiBudWxsLFxuICAgICAgICAgICAgZWRpdGluZzogZmFsc2UsXG5cbiAgICAgICAgICAgIHF1ZXJ5RXZlbnRUeXBlOiAnJyxcbiAgICAgICAgICAgIHF1ZXJ5U3RhdGVLZXk6ICcnLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHByaXZhdGUgYnJvd3NlRXZlbnRUeXBlKGV2ZW50VHlwZTogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgZXZlbnRUeXBlIH0pO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIHByaXZhdGUgb25WaWV3U291cmNlQ2xpY2soZXZlbnQ6IE1hdHJpeEV2ZW50KSB7XG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgZXZlbnQgfSk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvbkJhY2sgPSAoKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmVkaXRpbmcpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBlZGl0aW5nOiBmYWxzZSB9KTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnN0YXRlLmV2ZW50KSB7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgZXZlbnQ6IG51bGwgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5zdGF0ZS5ldmVudFR5cGUpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBldmVudFR5cGU6IG51bGwgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLm9uQmFjaygpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHByaXZhdGUgZWRpdEV2ID0gKCkgPT4ge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHsgZWRpdGluZzogdHJ1ZSB9KTtcbiAgICB9O1xuXG4gICAgcHJpdmF0ZSBvblF1ZXJ5RXZlbnRUeXBlID0gKGZpbHRlckV2ZW50VHlwZTogc3RyaW5nKSA9PiB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBxdWVyeUV2ZW50VHlwZTogZmlsdGVyRXZlbnRUeXBlIH0pO1xuICAgIH07XG5cbiAgICBwcml2YXRlIG9uUXVlcnlTdGF0ZUtleSA9IChmaWx0ZXJTdGF0ZUtleTogc3RyaW5nKSA9PiB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBxdWVyeVN0YXRlS2V5OiBmaWx0ZXJTdGF0ZUtleSB9KTtcbiAgICB9O1xuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS5ldmVudCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuc3RhdGUuZWRpdGluZykge1xuICAgICAgICAgICAgICAgIHJldHVybiA8U2VuZEN1c3RvbUV2ZW50XG4gICAgICAgICAgICAgICAgICAgIHJvb209e3RoaXMucHJvcHMucm9vbX1cbiAgICAgICAgICAgICAgICAgICAgZm9yY2VTdGF0ZUV2ZW50PXt0cnVlfVxuICAgICAgICAgICAgICAgICAgICBvbkJhY2s9e3RoaXMub25CYWNrfVxuICAgICAgICAgICAgICAgICAgICBpbnB1dHM9e3tcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50VHlwZTogdGhpcy5zdGF0ZS5ldmVudC5nZXRUeXBlKCksXG4gICAgICAgICAgICAgICAgICAgICAgICBldkNvbnRlbnQ6IEpTT04uc3RyaW5naWZ5KHRoaXMuc3RhdGUuZXZlbnQuZ2V0Q29udGVudCgpLCBudWxsLCAnXFx0JyksXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZUtleTogdGhpcy5zdGF0ZS5ldmVudC5nZXRTdGF0ZUtleSgpLFxuICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgIC8+O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9XCJteF9WaWV3U291cmNlXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJteF9EaWFsb2dfY29udGVudFwiPlxuICAgICAgICAgICAgICAgICAgICA8U3ludGF4SGlnaGxpZ2h0IGNsYXNzTmFtZT1cImpzb25cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIHsgSlNPTi5zdHJpbmdpZnkodGhpcy5zdGF0ZS5ldmVudC5ldmVudCwgbnVsbCwgMikgfVxuICAgICAgICAgICAgICAgICAgICA8L1N5bnRheEhpZ2hsaWdodD5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm14X0RpYWxvZ19idXR0b25zXCI+XG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gb25DbGljaz17dGhpcy5vbkJhY2t9PnsgX3QoJ0JhY2snKSB9PC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gb25DbGljaz17dGhpcy5lZGl0RXZ9PnsgX3QoJ0VkaXQnKSB9PC9idXR0b24+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj47XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgbGlzdCA9IG51bGw7XG5cbiAgICAgICAgY29uc3QgY2xhc3NlcyA9ICdteF9EZXZUb29sc19Sb29tU3RhdGVFeHBsb3Jlcl9idXR0b24nO1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS5ldmVudFR5cGUgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGxpc3QgPSA8RmlsdGVyZWRMaXN0IHF1ZXJ5PXt0aGlzLnN0YXRlLnF1ZXJ5RXZlbnRUeXBlfSBvbkNoYW5nZT17dGhpcy5vblF1ZXJ5RXZlbnRUeXBlfT5cbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIEFycmF5LmZyb20odGhpcy5yb29tU3RhdGVFdmVudHMuZW50cmllcygpKS5tYXAoKFtldmVudFR5cGUsIGFsbFN0YXRlS2V5c10pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBvbkNsaWNrRm47XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWxsU3RhdGVLZXlzLnNpemUgPT09IDEgJiYgYWxsU3RhdGVLZXlzLmhhcyhcIlwiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2tGbiA9IHRoaXMub25WaWV3U291cmNlQ2xpY2soYWxsU3RhdGVLZXlzLmdldChcIlwiKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2tGbiA9IHRoaXMuYnJvd3NlRXZlbnRUeXBlKGV2ZW50VHlwZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiA8YnV0dG9uIGNsYXNzTmFtZT17Y2xhc3Nlc30ga2V5PXtldmVudFR5cGV9IG9uQ2xpY2s9e29uQ2xpY2tGbn0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBldmVudFR5cGUgfVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+O1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDwvRmlsdGVyZWRMaXN0PjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHN0YXRlR3JvdXAgPSB0aGlzLnJvb21TdGF0ZUV2ZW50cy5nZXQodGhpcy5zdGF0ZS5ldmVudFR5cGUpO1xuXG4gICAgICAgICAgICBsaXN0ID0gPEZpbHRlcmVkTGlzdCBxdWVyeT17dGhpcy5zdGF0ZS5xdWVyeVN0YXRlS2V5fSBvbkNoYW5nZT17dGhpcy5vblF1ZXJ5U3RhdGVLZXl9PlxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgQXJyYXkuZnJvbShzdGF0ZUdyb3VwLmVudHJpZXMoKSkubWFwKChbc3RhdGVLZXksIGV2XSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDxidXR0b24gY2xhc3NOYW1lPXtjbGFzc2VzfSBrZXk9e3N0YXRlS2V5fSBvbkNsaWNrPXt0aGlzLm9uVmlld1NvdXJjZUNsaWNrKGV2KX0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBzdGF0ZUtleSB9XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj47XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgPC9GaWx0ZXJlZExpc3Q+O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIDxkaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm14X0RpYWxvZ19jb250ZW50XCI+XG4gICAgICAgICAgICAgICAgeyBsaXN0IH1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJteF9EaWFsb2dfYnV0dG9uc1wiPlxuICAgICAgICAgICAgICAgIDxidXR0b24gb25DbGljaz17dGhpcy5vbkJhY2t9PnsgX3QoJ0JhY2snKSB9PC9idXR0b24+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+O1xuICAgIH1cbn1cblxuaW50ZXJmYWNlIElBY2NvdW50RGF0YUV4cGxvcmVyU3RhdGUge1xuICAgIFtpbnB1dElkOiBzdHJpbmddOiBib29sZWFuIHwgc3RyaW5nIHwgYW55O1xuICAgIGlzUm9vbUFjY291bnREYXRhOiBib29sZWFuO1xuICAgIGV2ZW50PzogTWF0cml4RXZlbnQ7XG4gICAgZWRpdGluZzogYm9vbGVhbjtcbiAgICBxdWVyeUV2ZW50VHlwZTogc3RyaW5nO1xufVxuXG5jbGFzcyBBY2NvdW50RGF0YUV4cGxvcmVyIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudDxJRXhwbG9yZXJQcm9wcywgSUFjY291bnREYXRhRXhwbG9yZXJTdGF0ZT4ge1xuICAgIHN0YXRpYyBnZXRMYWJlbCgpIHsgcmV0dXJuIF90KCdFeHBsb3JlIEFjY291bnQgRGF0YScpOyB9XG5cbiAgICBzdGF0aWMgY29udGV4dFR5cGUgPSBNYXRyaXhDbGllbnRDb250ZXh0O1xuXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBpc1Jvb21BY2NvdW50RGF0YTogZmFsc2UsXG4gICAgICAgICAgICBldmVudDogbnVsbCxcbiAgICAgICAgICAgIGVkaXRpbmc6IGZhbHNlLFxuXG4gICAgICAgICAgICBxdWVyeUV2ZW50VHlwZTogJycsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXREYXRhKCk6IFJlY29yZDxzdHJpbmcsIE1hdHJpeEV2ZW50PiB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmlzUm9vbUFjY291bnREYXRhKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5yb29tLmFjY291bnREYXRhO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRleHQuc3RvcmUuYWNjb3VudERhdGE7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvblZpZXdTb3VyY2VDbGljayhldmVudDogTWF0cml4RXZlbnQpIHtcbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBldmVudCB9KTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG9uQmFjayA9ICgpID0+IHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuZWRpdGluZykge1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGVkaXRpbmc6IGZhbHNlIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuc3RhdGUuZXZlbnQpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBldmVudDogbnVsbCB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucHJvcHMub25CYWNrKCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcHJpdmF0ZSBvbkNoYW5nZSA9IChlOiBDaGFuZ2VFdmVudDxIVE1MSW5wdXRFbGVtZW50PikgPT4ge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHsgW2UudGFyZ2V0LmlkXTogZS50YXJnZXQudHlwZSA9PT0gJ2NoZWNrYm94JyA/IGUudGFyZ2V0LmNoZWNrZWQgOiBlLnRhcmdldC52YWx1ZSB9KTtcbiAgICB9O1xuXG4gICAgcHJpdmF0ZSBlZGl0RXYgPSAoKSA9PiB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBlZGl0aW5nOiB0cnVlIH0pO1xuICAgIH07XG5cbiAgICBwcml2YXRlIG9uUXVlcnlFdmVudFR5cGUgPSAocXVlcnlFdmVudFR5cGU6IHN0cmluZykgPT4ge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHsgcXVlcnlFdmVudFR5cGUgfSk7XG4gICAgfTtcblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuZXZlbnQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnN0YXRlLmVkaXRpbmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gPFNlbmRBY2NvdW50RGF0YVxuICAgICAgICAgICAgICAgICAgICByb29tPXt0aGlzLnByb3BzLnJvb219XG4gICAgICAgICAgICAgICAgICAgIGlzUm9vbUFjY291bnREYXRhPXt0aGlzLnN0YXRlLmlzUm9vbUFjY291bnREYXRhfVxuICAgICAgICAgICAgICAgICAgICBvbkJhY2s9e3RoaXMub25CYWNrfVxuICAgICAgICAgICAgICAgICAgICBpbnB1dHM9e3tcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50VHlwZTogdGhpcy5zdGF0ZS5ldmVudC5nZXRUeXBlKCksXG4gICAgICAgICAgICAgICAgICAgICAgICBldkNvbnRlbnQ6IEpTT04uc3RyaW5naWZ5KHRoaXMuc3RhdGUuZXZlbnQuZ2V0Q29udGVudCgpLCBudWxsLCAnXFx0JyksXG4gICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgIGZvcmNlTW9kZT17dHJ1ZX1cbiAgICAgICAgICAgICAgICAvPjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPVwibXhfVmlld1NvdXJjZVwiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibXhfRGV2VG9vbHNfY29udGVudFwiPlxuICAgICAgICAgICAgICAgICAgICA8U3ludGF4SGlnaGxpZ2h0IGNsYXNzTmFtZT1cImpzb25cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIHsgSlNPTi5zdHJpbmdpZnkodGhpcy5zdGF0ZS5ldmVudC5ldmVudCwgbnVsbCwgMikgfVxuICAgICAgICAgICAgICAgICAgICA8L1N5bnRheEhpZ2hsaWdodD5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm14X0RpYWxvZ19idXR0b25zXCI+XG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gb25DbGljaz17dGhpcy5vbkJhY2t9PnsgX3QoJ0JhY2snKSB9PC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gb25DbGljaz17dGhpcy5lZGl0RXZ9PnsgX3QoJ0VkaXQnKSB9PC9idXR0b24+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCByb3dzID0gW107XG5cbiAgICAgICAgY29uc3QgY2xhc3NlcyA9ICdteF9EZXZUb29sc19Sb29tU3RhdGVFeHBsb3Jlcl9idXR0b24nO1xuXG4gICAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLmdldERhdGEoKTtcbiAgICAgICAgT2JqZWN0LmtleXMoZGF0YSkuZm9yRWFjaCgoZXZUeXBlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBldiA9IGRhdGFbZXZUeXBlXTtcbiAgICAgICAgICAgIHJvd3MucHVzaCg8YnV0dG9uIGNsYXNzTmFtZT17Y2xhc3Nlc30ga2V5PXtldlR5cGV9IG9uQ2xpY2s9e3RoaXMub25WaWV3U291cmNlQ2xpY2soZXYpfT5cbiAgICAgICAgICAgICAgICB7IGV2VHlwZSB9XG4gICAgICAgICAgICA8L2J1dHRvbj4pO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gPGRpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibXhfRGlhbG9nX2NvbnRlbnRcIj5cbiAgICAgICAgICAgICAgICA8RmlsdGVyZWRMaXN0IHF1ZXJ5PXt0aGlzLnN0YXRlLnF1ZXJ5RXZlbnRUeXBlfSBvbkNoYW5nZT17dGhpcy5vblF1ZXJ5RXZlbnRUeXBlfT5cbiAgICAgICAgICAgICAgICAgICAgeyByb3dzIH1cbiAgICAgICAgICAgICAgICA8L0ZpbHRlcmVkTGlzdD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJteF9EaWFsb2dfYnV0dG9uc1wiPlxuICAgICAgICAgICAgICAgIDxidXR0b24gb25DbGljaz17dGhpcy5vbkJhY2t9PnsgX3QoJ0JhY2snKSB9PC9idXR0b24+XG4gICAgICAgICAgICAgICAgPGRpdiBzdHlsZT17eyBmbG9hdDogXCJyaWdodFwiIH19PlxuICAgICAgICAgICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkPVwiaXNSb29tQWNjb3VudERhdGFcIlxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwibXhfRGV2VG9vbHNfdGdsIG14X0RldlRvb2xzX3RnbC1mbGlwXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJjaGVja2JveFwiXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGVja2VkPXt0aGlzLnN0YXRlLmlzUm9vbUFjY291bnREYXRhfVxuICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMub25DaGFuZ2V9XG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzc05hbWU9XCJteF9EZXZUb29sc190Z2wtYnRuXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdGctb2ZmPVwiQWNjb3VudCBEYXRhXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdGctb249XCJSb29tIERhdGFcIlxuICAgICAgICAgICAgICAgICAgICAgICAgaHRtbEZvcj1cImlzUm9vbUFjY291bnREYXRhXCJcbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj47XG4gICAgfVxufVxuXG5pbnRlcmZhY2UgSVNlcnZlcnNJblJvb21MaXN0U3RhdGUge1xuICAgIHF1ZXJ5OiBzdHJpbmc7XG59XG5cbmNsYXNzIFNlcnZlcnNJblJvb21MaXN0IGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudDxJRXhwbG9yZXJQcm9wcywgSVNlcnZlcnNJblJvb21MaXN0U3RhdGU+IHtcbiAgICBzdGF0aWMgZ2V0TGFiZWwoKSB7IHJldHVybiBfdCgnVmlldyBTZXJ2ZXJzIGluIFJvb20nKTsgfVxuXG4gICAgc3RhdGljIGNvbnRleHRUeXBlID0gTWF0cml4Q2xpZW50Q29udGV4dDtcblxuICAgIHByaXZhdGUgc2VydmVyczogUmVhY3QuUmVhY3RFbGVtZW50W107XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG5cbiAgICAgICAgY29uc3Qgcm9vbSA9IHRoaXMucHJvcHMucm9vbTtcbiAgICAgICAgY29uc3Qgc2VydmVycyA9IG5ldyBTZXQ8c3RyaW5nPigpO1xuICAgICAgICByb29tLmN1cnJlbnRTdGF0ZS5nZXRTdGF0ZUV2ZW50cyhcIm0ucm9vbS5tZW1iZXJcIikuZm9yRWFjaChldiA9PiBzZXJ2ZXJzLmFkZChldi5nZXRTZW5kZXIoKS5zcGxpdChcIjpcIilbMV0pKTtcbiAgICAgICAgdGhpcy5zZXJ2ZXJzID0gQXJyYXkuZnJvbShzZXJ2ZXJzKS5tYXAocyA9PlxuICAgICAgICAgICAgPGJ1dHRvbiBrZXk9e3N9IGNsYXNzTmFtZT1cIm14X0RldlRvb2xzX1NlcnZlcnNJblJvb21MaXN0X2J1dHRvblwiPlxuICAgICAgICAgICAgICAgIHsgcyB9XG4gICAgICAgICAgICA8L2J1dHRvbj4pO1xuXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBxdWVyeTogJycsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvblF1ZXJ5ID0gKHF1ZXJ5OiBzdHJpbmcpID0+IHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHF1ZXJ5IH0pO1xuICAgIH07XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiA8ZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJteF9EaWFsb2dfY29udGVudFwiPlxuICAgICAgICAgICAgICAgIDxGaWx0ZXJlZExpc3QgcXVlcnk9e3RoaXMuc3RhdGUucXVlcnl9IG9uQ2hhbmdlPXt0aGlzLm9uUXVlcnl9PlxuICAgICAgICAgICAgICAgICAgICB7IHRoaXMuc2VydmVycyB9XG4gICAgICAgICAgICAgICAgPC9GaWx0ZXJlZExpc3Q+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibXhfRGlhbG9nX2J1dHRvbnNcIj5cbiAgICAgICAgICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e3RoaXMucHJvcHMub25CYWNrfT57IF90KCdCYWNrJykgfTwvYnV0dG9uPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PjtcbiAgICB9XG59XG5cbmNvbnN0IFBIQVNFX01BUCA9IHtcbiAgICBbUEhBU0VfVU5TRU5UXTogXCJ1bnNlbnRcIixcbiAgICBbUEhBU0VfUkVRVUVTVEVEXTogXCJyZXF1ZXN0ZWRcIixcbiAgICBbUEhBU0VfUkVBRFldOiBcInJlYWR5XCIsXG4gICAgW1BIQVNFX0RPTkVdOiBcImRvbmVcIixcbiAgICBbUEhBU0VfU1RBUlRFRF06IFwic3RhcnRlZFwiLFxuICAgIFtQSEFTRV9DQU5DRUxMRURdOiBcImNhbmNlbGxlZFwiLFxufTtcblxuY29uc3QgVmVyaWZpY2F0aW9uUmVxdWVzdEV4cGxvcmVyOiBSZWFjdC5GQzx7XG4gICAgdHhuSWQ6IHN0cmluZztcbiAgICByZXF1ZXN0OiBWZXJpZmljYXRpb25SZXF1ZXN0O1xufT4gPSAoeyB0eG5JZCwgcmVxdWVzdCB9KSA9PiB7XG4gICAgY29uc3QgWywgdXBkYXRlU3RhdGVdID0gdXNlU3RhdGUoKTtcbiAgICBjb25zdCBbdGltZW91dCwgc2V0UmVxdWVzdFRpbWVvdXRdID0gdXNlU3RhdGUocmVxdWVzdC50aW1lb3V0KTtcblxuICAgIC8qIFJlLXJlbmRlciBpZiBzb21ldGhpbmcgY2hhbmdlcyBzdGF0ZSAqL1xuICAgIHVzZUV2ZW50RW1pdHRlcihyZXF1ZXN0LCBcImNoYW5nZVwiLCB1cGRhdGVTdGF0ZSk7XG5cbiAgICAvKiBLZWVwIHJlLXJlbmRlcmluZyBpZiB0aGVyZSdzIGEgdGltZW91dCAqL1xuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGlmIChyZXF1ZXN0LnRpbWVvdXQgPT0gMCkgcmV0dXJuO1xuXG4gICAgICAgIC8qIE5vdGUgdGhhdCByZXF1ZXN0LnRpbWVvdXQgaXMgYSBnZXR0ZXIsIHNvIGl0cyB2YWx1ZSBjaGFuZ2VzICovXG4gICAgICAgIGNvbnN0IGlkID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICAgICAgc2V0UmVxdWVzdFRpbWVvdXQocmVxdWVzdC50aW1lb3V0KTtcbiAgICAgICAgfSwgNTAwKTtcblxuICAgICAgICByZXR1cm4gKCkgPT4geyBjbGVhckludGVydmFsKGlkKTsgfTtcbiAgICB9LCBbcmVxdWVzdF0pO1xuXG4gICAgcmV0dXJuICg8ZGl2IGNsYXNzTmFtZT1cIm14X0RldlRvb2xzX1ZlcmlmaWNhdGlvblJlcXVlc3RcIj5cbiAgICAgICAgPGRsPlxuICAgICAgICAgICAgPGR0PlRyYW5zYWN0aW9uPC9kdD5cbiAgICAgICAgICAgIDxkZD57IHR4bklkIH08L2RkPlxuICAgICAgICAgICAgPGR0PlBoYXNlPC9kdD5cbiAgICAgICAgICAgIDxkZD57IFBIQVNFX01BUFtyZXF1ZXN0LnBoYXNlXSB8fCByZXF1ZXN0LnBoYXNlIH08L2RkPlxuICAgICAgICAgICAgPGR0PlRpbWVvdXQ8L2R0PlxuICAgICAgICAgICAgPGRkPnsgTWF0aC5mbG9vcih0aW1lb3V0IC8gMTAwMCkgfTwvZGQ+XG4gICAgICAgICAgICA8ZHQ+TWV0aG9kczwvZHQ+XG4gICAgICAgICAgICA8ZGQ+eyByZXF1ZXN0Lm1ldGhvZHMgJiYgcmVxdWVzdC5tZXRob2RzLmpvaW4oXCIsIFwiKSB9PC9kZD5cbiAgICAgICAgICAgIDxkdD5yZXF1ZXN0aW5nVXNlcklkPC9kdD5cbiAgICAgICAgICAgIDxkZD57IHJlcXVlc3QucmVxdWVzdGluZ1VzZXJJZCB9PC9kZD5cbiAgICAgICAgICAgIDxkdD5vYnNlcnZlT25seTwvZHQ+XG4gICAgICAgICAgICA8ZGQ+eyBKU09OLnN0cmluZ2lmeShyZXF1ZXN0Lm9ic2VydmVPbmx5KSB9PC9kZD5cbiAgICAgICAgPC9kbD5cbiAgICA8L2Rpdj4pO1xufTtcblxuY2xhc3MgVmVyaWZpY2F0aW9uRXhwbG9yZXIgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50PElFeHBsb3JlclByb3BzPiB7XG4gICAgc3RhdGljIGdldExhYmVsKCkge1xuICAgICAgICByZXR1cm4gX3QoXCJWZXJpZmljYXRpb24gUmVxdWVzdHNcIik7XG4gICAgfVxuXG4gICAgLyogRW5zdXJlIHRoaXMuY29udGV4dCBpcyB0aGUgY2xpICovXG4gICAgc3RhdGljIGNvbnRleHRUeXBlID0gTWF0cml4Q2xpZW50Q29udGV4dDtcblxuICAgIHByaXZhdGUgb25OZXdSZXF1ZXN0ID0gKCkgPT4ge1xuICAgICAgICB0aGlzLmZvcmNlVXBkYXRlKCk7XG4gICAgfTtcblxuICAgIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgICBjb25zdCBjbGkgPSB0aGlzLmNvbnRleHQ7XG4gICAgICAgIGNsaS5vbihcImNyeXB0by52ZXJpZmljYXRpb24ucmVxdWVzdFwiLCB0aGlzLm9uTmV3UmVxdWVzdCk7XG4gICAgfVxuXG4gICAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICAgIGNvbnN0IGNsaSA9IHRoaXMuY29udGV4dDtcbiAgICAgICAgY2xpLm9mZihcImNyeXB0by52ZXJpZmljYXRpb24ucmVxdWVzdFwiLCB0aGlzLm9uTmV3UmVxdWVzdCk7XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICBjb25zdCBjbGkgPSB0aGlzLmNvbnRleHQ7XG4gICAgICAgIGNvbnN0IHJvb20gPSB0aGlzLnByb3BzLnJvb207XG4gICAgICAgIGNvbnN0IGluUm9vbUNoYW5uZWwgPSBjbGkuY3J5cHRvLmluUm9vbVZlcmlmaWNhdGlvblJlcXVlc3RzO1xuICAgICAgICBjb25zdCBpblJvb21SZXF1ZXN0cyA9IChpblJvb21DaGFubmVsLl9yZXF1ZXN0c0J5Um9vbUlkIHx8IG5ldyBNYXAoKSkuZ2V0KHJvb20ucm9vbUlkKSB8fCBuZXcgTWFwKCk7XG5cbiAgICAgICAgcmV0dXJuICg8ZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJteF9EaWFsb2dfY29udGVudFwiPlxuICAgICAgICAgICAgICAgIHsgQXJyYXkuZnJvbShpblJvb21SZXF1ZXN0cy5lbnRyaWVzKCkpLnJldmVyc2UoKS5tYXAoKFt0eG5JZCwgcmVxdWVzdF0pID0+XG4gICAgICAgICAgICAgICAgICAgIDxWZXJpZmljYXRpb25SZXF1ZXN0RXhwbG9yZXIgdHhuSWQ9e3R4bklkfSByZXF1ZXN0PXtyZXF1ZXN0fSBrZXk9e3R4bklkfSAvPixcbiAgICAgICAgICAgICAgICApIH1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJteF9EaWFsb2dfYnV0dG9uc1wiPlxuICAgICAgICAgICAgICAgIDxidXR0b24gb25DbGljaz17dGhpcy5wcm9wcy5vbkJhY2t9PnsgX3QoXCJCYWNrXCIpIH08L2J1dHRvbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj4pO1xuICAgIH1cbn1cblxuaW50ZXJmYWNlIElXaWRnZXRFeHBsb3JlclN0YXRlIHtcbiAgICBxdWVyeTogc3RyaW5nO1xuICAgIGVkaXRXaWRnZXQ/OiBJQXBwO1xufVxuXG5jbGFzcyBXaWRnZXRFeHBsb3JlciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxJRXhwbG9yZXJQcm9wcywgSVdpZGdldEV4cGxvcmVyU3RhdGU+IHtcbiAgICBzdGF0aWMgZ2V0TGFiZWwoKSB7XG4gICAgICAgIHJldHVybiBfdChcIkFjdGl2ZSBXaWRnZXRzXCIpO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcblxuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgcXVlcnk6ICcnLFxuICAgICAgICAgICAgZWRpdFdpZGdldDogbnVsbCwgLy8gc2V0IHRvIGFuIElBcHAgd2hlbiBlZGl0aW5nXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvbldpZGdldFN0b3JlVXBkYXRlID0gKCkgPT4ge1xuICAgICAgICB0aGlzLmZvcmNlVXBkYXRlKCk7XG4gICAgfTtcblxuICAgIHByaXZhdGUgb25RdWVyeUNoYW5nZSA9IChxdWVyeTogc3RyaW5nKSA9PiB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBxdWVyeSB9KTtcbiAgICB9O1xuXG4gICAgcHJpdmF0ZSBvbkVkaXRXaWRnZXQgPSAod2lkZ2V0OiBJQXBwKSA9PiB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBlZGl0V2lkZ2V0OiB3aWRnZXQgfSk7XG4gICAgfTtcblxuICAgIHByaXZhdGUgb25CYWNrID0gKCkgPT4ge1xuICAgICAgICBjb25zdCB3aWRnZXRzID0gV2lkZ2V0U3RvcmUuaW5zdGFuY2UuZ2V0QXBwcyh0aGlzLnByb3BzLnJvb20ucm9vbUlkKTtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuZWRpdFdpZGdldCAmJiB3aWRnZXRzLmluY2x1ZGVzKHRoaXMuc3RhdGUuZWRpdFdpZGdldCkpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBlZGl0V2lkZ2V0OiBudWxsIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5wcm9wcy5vbkJhY2soKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgICAgV2lkZ2V0U3RvcmUuaW5zdGFuY2Uub24oVVBEQVRFX0VWRU5ULCB0aGlzLm9uV2lkZ2V0U3RvcmVVcGRhdGUpO1xuICAgIH1cblxuICAgIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgICBXaWRnZXRTdG9yZS5pbnN0YW5jZS5vZmYoVVBEQVRFX0VWRU5ULCB0aGlzLm9uV2lkZ2V0U3RvcmVVcGRhdGUpO1xuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3Qgcm9vbSA9IHRoaXMucHJvcHMucm9vbTtcblxuICAgICAgICBjb25zdCBlZGl0V2lkZ2V0ID0gdGhpcy5zdGF0ZS5lZGl0V2lkZ2V0O1xuICAgICAgICBjb25zdCB3aWRnZXRzID0gV2lkZ2V0U3RvcmUuaW5zdGFuY2UuZ2V0QXBwcyhyb29tLnJvb21JZCk7XG4gICAgICAgIGlmIChlZGl0V2lkZ2V0ICYmIHdpZGdldHMuaW5jbHVkZXMoZWRpdFdpZGdldCkpIHtcbiAgICAgICAgICAgIGNvbnN0IGFsbFN0YXRlID0gQXJyYXkuZnJvbShcbiAgICAgICAgICAgICAgICBBcnJheS5mcm9tKHJvb20uY3VycmVudFN0YXRlLmV2ZW50cy52YWx1ZXMoKSkubWFwKChlOiBNYXA8c3RyaW5nLCBNYXRyaXhFdmVudD4pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUudmFsdWVzKCk7XG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICApLnJlZHVjZSgocCwgYykgPT4geyBwLnB1c2goLi4uYyk7IHJldHVybiBwOyB9LCBbXSk7XG4gICAgICAgICAgICBjb25zdCBzdGF0ZUV2ID0gYWxsU3RhdGUuZmluZChldiA9PiBldi5nZXRJZCgpID09PSBlZGl0V2lkZ2V0LmV2ZW50SWQpO1xuICAgICAgICAgICAgaWYgKCFzdGF0ZUV2KSB7IC8vIFwic2hvdWxkIG5ldmVyIGhhcHBlblwiXG4gICAgICAgICAgICAgICAgcmV0dXJuIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgIHsgX3QoXCJUaGVyZSB3YXMgYW4gZXJyb3IgZmluZGluZyB0aGlzIHdpZGdldC5cIikgfVxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm14X0RpYWxvZ19idXR0b25zXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e3RoaXMub25CYWNrfT57IF90KFwiQmFja1wiKSB9PC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiA8U2VuZEN1c3RvbUV2ZW50XG4gICAgICAgICAgICAgICAgb25CYWNrPXt0aGlzLm9uQmFja31cbiAgICAgICAgICAgICAgICByb29tPXtyb29tfVxuICAgICAgICAgICAgICAgIGZvcmNlU3RhdGVFdmVudD17dHJ1ZX1cbiAgICAgICAgICAgICAgICBpbnB1dHM9e3tcbiAgICAgICAgICAgICAgICAgICAgZXZlbnRUeXBlOiBzdGF0ZUV2LmdldFR5cGUoKSxcbiAgICAgICAgICAgICAgICAgICAgZXZDb250ZW50OiBKU09OLnN0cmluZ2lmeShzdGF0ZUV2LmdldENvbnRlbnQoKSwgbnVsbCwgJ1xcdCcpLFxuICAgICAgICAgICAgICAgICAgICBzdGF0ZUtleTogc3RhdGVFdi5nZXRTdGF0ZUtleSgpLFxuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAvPjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAoPGRpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibXhfRGlhbG9nX2NvbnRlbnRcIj5cbiAgICAgICAgICAgICAgICA8RmlsdGVyZWRMaXN0IHF1ZXJ5PXt0aGlzLnN0YXRlLnF1ZXJ5fSBvbkNoYW5nZT17dGhpcy5vblF1ZXJ5Q2hhbmdlfT5cbiAgICAgICAgICAgICAgICAgICAgeyB3aWRnZXRzLm1hcCh3ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiA8YnV0dG9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPSdteF9EZXZUb29sc19Sb29tU3RhdGVFeHBsb3Jlcl9idXR0b24nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5PXt3LnVybCArIHcuZXZlbnRJZH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB0aGlzLm9uRWRpdFdpZGdldCh3KX1cbiAgICAgICAgICAgICAgICAgICAgICAgID57IHcudXJsIH08L2J1dHRvbj47XG4gICAgICAgICAgICAgICAgICAgIH0pIH1cbiAgICAgICAgICAgICAgICA8L0ZpbHRlcmVkTGlzdD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJteF9EaWFsb2dfYnV0dG9uc1wiPlxuICAgICAgICAgICAgICAgIDxidXR0b24gb25DbGljaz17dGhpcy5vbkJhY2t9PnsgX3QoXCJCYWNrXCIpIH08L2J1dHRvbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj4pO1xuICAgIH1cbn1cblxuaW50ZXJmYWNlIElTZXR0aW5nc0V4cGxvcmVyU3RhdGUge1xuICAgIHF1ZXJ5OiBzdHJpbmc7XG4gICAgZWRpdFNldHRpbmc/OiBzdHJpbmc7XG4gICAgdmlld1NldHRpbmc/OiBzdHJpbmc7XG4gICAgZXhwbGljaXRWYWx1ZXM/OiBzdHJpbmc7XG4gICAgZXhwbGljaXRSb29tVmFsdWVzPzogc3RyaW5nO1xuIH1cblxuY2xhc3MgU2V0dGluZ3NFeHBsb3JlciBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQ8SUV4cGxvcmVyUHJvcHMsIElTZXR0aW5nc0V4cGxvcmVyU3RhdGU+IHtcbiAgICBzdGF0aWMgZ2V0TGFiZWwoKSB7XG4gICAgICAgIHJldHVybiBfdChcIlNldHRpbmdzIEV4cGxvcmVyXCIpO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcblxuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgcXVlcnk6ICcnLFxuICAgICAgICAgICAgZWRpdFNldHRpbmc6IG51bGwsIC8vIHNldCB0byBhIHNldHRpbmcgSUQgd2hlbiBlZGl0aW5nXG4gICAgICAgICAgICB2aWV3U2V0dGluZzogbnVsbCwgLy8gc2V0IHRvIGEgc2V0dGluZyBJRCB3aGVuIGV4cGxvcmluZyBpbiBkZXRhaWxcblxuICAgICAgICAgICAgZXhwbGljaXRWYWx1ZXM6IG51bGwsIC8vIHN0cmluZ2lmaWVkIEpTT04gZm9yIGVkaXQgdmlld1xuICAgICAgICAgICAgZXhwbGljaXRSb29tVmFsdWVzOiBudWxsLCAvLyBzdHJpbmdpZmllZCBKU09OIGZvciBlZGl0IHZpZXdcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG9uUXVlcnlDaGFuZ2UgPSAoZXY6IENoYW5nZUV2ZW50PEhUTUxJbnB1dEVsZW1lbnQ+KSA9PiB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBxdWVyeTogZXYudGFyZ2V0LnZhbHVlIH0pO1xuICAgIH07XG5cbiAgICBwcml2YXRlIG9uRXhwbFZhbHVlc0VkaXQgPSAoZXY6IENoYW5nZUV2ZW50PEhUTUxUZXh0QXJlYUVsZW1lbnQ+KSA9PiB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBleHBsaWNpdFZhbHVlczogZXYudGFyZ2V0LnZhbHVlIH0pO1xuICAgIH07XG5cbiAgICBwcml2YXRlIG9uRXhwbFJvb21WYWx1ZXNFZGl0ID0gKGV2OiBDaGFuZ2VFdmVudDxIVE1MVGV4dEFyZWFFbGVtZW50PikgPT4ge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHsgZXhwbGljaXRSb29tVmFsdWVzOiBldi50YXJnZXQudmFsdWUgfSk7XG4gICAgfTtcblxuICAgIHByaXZhdGUgb25CYWNrID0gKCkgPT4ge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS5lZGl0U2V0dGluZykge1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGVkaXRTZXR0aW5nOiBudWxsIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuc3RhdGUudmlld1NldHRpbmcpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyB2aWV3U2V0dGluZzogbnVsbCB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucHJvcHMub25CYWNrKCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcHJpdmF0ZSBvblZpZXdDbGljayA9IChldjogTW91c2VFdmVudCwgc2V0dGluZ0lkOiBzdHJpbmcpID0+IHtcbiAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHZpZXdTZXR0aW5nOiBzZXR0aW5nSWQgfSk7XG4gICAgfTtcblxuICAgIHByaXZhdGUgb25FZGl0Q2xpY2sgPSAoZXY6IE1vdXNlRXZlbnQsIHNldHRpbmdJZDogc3RyaW5nKSA9PiB7XG4gICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgZWRpdFNldHRpbmc6IHNldHRpbmdJZCxcbiAgICAgICAgICAgIGV4cGxpY2l0VmFsdWVzOiB0aGlzLnJlbmRlckV4cGxpY2l0U2V0dGluZ1ZhbHVlcyhzZXR0aW5nSWQsIG51bGwpLFxuICAgICAgICAgICAgZXhwbGljaXRSb29tVmFsdWVzOiB0aGlzLnJlbmRlckV4cGxpY2l0U2V0dGluZ1ZhbHVlcyhzZXR0aW5nSWQsIHRoaXMucHJvcHMucm9vbS5yb29tSWQpLFxuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgcHJpdmF0ZSBvblNhdmVDbGljayA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHNldHRpbmdJZCA9IHRoaXMuc3RhdGUuZWRpdFNldHRpbmc7XG4gICAgICAgICAgICBjb25zdCBwYXJzZWRFeHBsaWNpdCA9IEpTT04ucGFyc2UodGhpcy5zdGF0ZS5leHBsaWNpdFZhbHVlcyk7XG4gICAgICAgICAgICBjb25zdCBwYXJzZWRFeHBsaWNpdFJvb20gPSBKU09OLnBhcnNlKHRoaXMuc3RhdGUuZXhwbGljaXRSb29tVmFsdWVzKTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgbGV2ZWwgb2YgT2JqZWN0LmtleXMocGFyc2VkRXhwbGljaXQpKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLmxvZyhgW0RldnRvb2xzXSBTZXR0aW5nIHZhbHVlIG9mICR7c2V0dGluZ0lkfSBhdCAke2xldmVsfSBmcm9tIHVzZXIgaW5wdXRgKTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWwgPSBwYXJzZWRFeHBsaWNpdFtsZXZlbF07XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IFNldHRpbmdzU3RvcmUuc2V0VmFsdWUoc2V0dGluZ0lkLCBudWxsLCBsZXZlbCBhcyBTZXR0aW5nTGV2ZWwsIHZhbCk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICBsb2dnZXIud2FybihlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCByb29tSWQgPSB0aGlzLnByb3BzLnJvb20ucm9vbUlkO1xuICAgICAgICAgICAgZm9yIChjb25zdCBsZXZlbCBvZiBPYmplY3Qua2V5cyhwYXJzZWRFeHBsaWNpdCkpIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIubG9nKGBbRGV2dG9vbHNdIFNldHRpbmcgdmFsdWUgb2YgJHtzZXR0aW5nSWR9IGF0ICR7bGV2ZWx9IGluICR7cm9vbUlkfSBmcm9tIHVzZXIgaW5wdXRgKTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWwgPSBwYXJzZWRFeHBsaWNpdFJvb21bbGV2ZWxdO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCBTZXR0aW5nc1N0b3JlLnNldFZhbHVlKHNldHRpbmdJZCwgcm9vbUlkLCBsZXZlbCBhcyBTZXR0aW5nTGV2ZWwsIHZhbCk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICBsb2dnZXIud2FybihlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICB2aWV3U2V0dGluZzogc2V0dGluZ0lkLFxuICAgICAgICAgICAgICAgIGVkaXRTZXR0aW5nOiBudWxsLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIE1vZGFsLmNyZWF0ZVRyYWNrZWREaWFsb2coJ0RldnRvb2xzIC0gRmFpbGVkIHRvIHNhdmUgc2V0dGluZ3MnLCAnJywgRXJyb3JEaWFsb2csIHtcbiAgICAgICAgICAgICAgICB0aXRsZTogX3QoXCJGYWlsZWQgdG8gc2F2ZSBzZXR0aW5nc1wiKSxcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogZS5tZXNzYWdlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcHJpdmF0ZSByZW5kZXJTZXR0aW5nVmFsdWUodmFsOiBhbnkpOiBzdHJpbmcge1xuICAgICAgICAvLyBOb3RlOiB3ZSBkb24ndCAudG9TdHJpbmcoKSBhIHN0cmluZyBiZWNhdXNlIHdlIHdhbnQgSlNPTi5zdHJpbmdpZnkgdG8gaW5qZWN0IHF1b3RlcyBmb3IgdXNcbiAgICAgICAgY29uc3QgdG9TdHJpbmdUeXBlcyA9IFsnYm9vbGVhbicsICdudW1iZXInXTtcbiAgICAgICAgaWYgKHRvU3RyaW5nVHlwZXMuaW5jbHVkZXModHlwZW9mKHZhbCkpKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsLnRvU3RyaW5nKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodmFsKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgcmVuZGVyRXhwbGljaXRTZXR0aW5nVmFsdWVzKHNldHRpbmc6IHN0cmluZywgcm9vbUlkOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICBjb25zdCB2YWxzID0ge307XG4gICAgICAgIGZvciAoY29uc3QgbGV2ZWwgb2YgTEVWRUxfT1JERVIpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdmFsc1tsZXZlbF0gPSBTZXR0aW5nc1N0b3JlLmdldFZhbHVlQXQobGV2ZWwsIHNldHRpbmcsIHJvb21JZCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHNbbGV2ZWxdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsc1tsZXZlbF0gPSBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIud2FybihlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodmFscywgbnVsbCwgNCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZW5kZXJDYW5FZGl0TGV2ZWwocm9vbUlkOiBzdHJpbmcsIGxldmVsOiBTZXR0aW5nTGV2ZWwpOiBSZWFjdC5SZWFjdE5vZGUge1xuICAgICAgICBjb25zdCBjYW5FZGl0ID0gU2V0dGluZ3NTdG9yZS5jYW5TZXRWYWx1ZSh0aGlzLnN0YXRlLmVkaXRTZXR0aW5nLCByb29tSWQsIGxldmVsKTtcbiAgICAgICAgY29uc3QgY2xhc3NOYW1lID0gY2FuRWRpdCA/ICdteF9EZXZUb29sc19TZXR0aW5nc0V4cGxvcmVyX211dGFibGUnIDogJ214X0RldlRvb2xzX1NldHRpbmdzRXhwbG9yZXJfaW1tdXRhYmxlJztcbiAgICAgICAgcmV0dXJuIDx0ZCBjbGFzc05hbWU9e2NsYXNzTmFtZX0+PGNvZGU+eyBjYW5FZGl0LnRvU3RyaW5nKCkgfTwvY29kZT48L3RkPjtcbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGNvbnN0IHJvb20gPSB0aGlzLnByb3BzLnJvb207XG5cbiAgICAgICAgaWYgKCF0aGlzLnN0YXRlLnZpZXdTZXR0aW5nICYmICF0aGlzLnN0YXRlLmVkaXRTZXR0aW5nKSB7XG4gICAgICAgICAgICAvLyB2aWV3IGFsbCBzZXR0aW5nc1xuICAgICAgICAgICAgY29uc3QgYWxsU2V0dGluZ3MgPSBPYmplY3Qua2V5cyhTRVRUSU5HUylcbiAgICAgICAgICAgICAgICAuZmlsdGVyKG4gPT4gdGhpcy5zdGF0ZS5xdWVyeSA/IG4udG9Mb3dlckNhc2UoKS5pbmNsdWRlcyh0aGlzLnN0YXRlLnF1ZXJ5LnRvTG93ZXJDYXNlKCkpIDogdHJ1ZSk7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibXhfRGlhbG9nX2NvbnRlbnQgbXhfRGV2VG9vbHNfU2V0dGluZ3NFeHBsb3JlclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPEZpZWxkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw9e190KCdGaWx0ZXIgcmVzdWx0cycpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF1dG9Gb2N1cz17dHJ1ZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplPXs2NH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXV0b0NvbXBsZXRlPVwib2ZmXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS5xdWVyeX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5vblF1ZXJ5Q2hhbmdlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cIm14X1RleHRJbnB1dERpYWxvZ19pbnB1dCBteF9EZXZUb29sc19Sb29tU3RhdGVFeHBsb3Jlcl9xdWVyeVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHRhYmxlPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aGVhZD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPnsgX3QoXCJTZXR0aW5nIElEXCIpIH08L3RoPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPnsgX3QoXCJWYWx1ZVwiKSB9PC90aD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD57IF90KFwiVmFsdWUgaW4gdGhpcyByb29tXCIpIH08L3RoPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IGFsbFNldHRpbmdzLm1hcChpID0+IChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBrZXk9e2l9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cIlwiIG9uQ2xpY2s9eyhlKSA9PiB0aGlzLm9uVmlld0NsaWNrKGUsIGkpfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb2RlPnsgaSB9PC9jb2RlPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmPVwiXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eyhlKSA9PiB0aGlzLm9uRWRpdENsaWNrKGUsIGkpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPSdteF9EZXZUb29sc19TZXR0aW5nc0V4cGxvcmVyX2VkaXQnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg4pyPXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvZGU+eyB0aGlzLnJlbmRlclNldHRpbmdWYWx1ZShTZXR0aW5nc1N0b3JlLmdldFZhbHVlKGkpKSB9PC9jb2RlPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29kZT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgdGhpcy5yZW5kZXJTZXR0aW5nVmFsdWUoU2V0dGluZ3NTdG9yZS5nZXRWYWx1ZShpLCByb29tLnJvb21JZCkpIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9jb2RlPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApKSB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90Ym9keT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGFibGU+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm14X0RpYWxvZ19idXR0b25zXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e3RoaXMub25CYWNrfT57IF90KFwiQmFja1wiKSB9PC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnN0YXRlLmVkaXRTZXR0aW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibXhfRGlhbG9nX2NvbnRlbnQgbXhfRGV2VG9vbHNfU2V0dGluZ3NFeHBsb3JlclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGgzPnsgX3QoXCJTZXR0aW5nOlwiKSB9IDxjb2RlPnsgdGhpcy5zdGF0ZS5lZGl0U2V0dGluZyB9PC9jb2RlPjwvaDM+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdteF9EZXZUb29sc19TZXR0aW5nc0V4cGxvcmVyX3dhcm5pbmcnPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiPnsgX3QoXCJDYXV0aW9uOlwiKSB9PC9iPiB7IF90KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlRoaXMgVUkgZG9lcyBOT1QgY2hlY2sgdGhlIHR5cGVzIG9mIHRoZSB2YWx1ZXMuIFVzZSBhdCB5b3VyIG93biByaXNrLlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICkgfVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBfdChcIlNldHRpbmcgZGVmaW5pdGlvbjpcIikgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwcmU+PGNvZGU+eyBKU09OLnN0cmluZ2lmeShTRVRUSU5HU1t0aGlzLnN0YXRlLmVkaXRTZXR0aW5nXSwgbnVsbCwgNCkgfTwvY29kZT48L3ByZT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0YWJsZT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoZWFkPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD57IF90KFwiTGV2ZWxcIikgfTwvdGg+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPnsgX3QoXCJTZXR0YWJsZSBhdCBnbG9iYWxcIikgfTwvdGg+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPnsgX3QoXCJTZXR0YWJsZSBhdCByb29tXCIpIH08L3RoPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90aGVhZD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBMRVZFTF9PUkRFUi5tYXAobHZsID0+IChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIga2V5PXtsdmx9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+PGNvZGU+eyBsdmwgfTwvY29kZT48L3RkPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IHRoaXMucmVuZGVyQ2FuRWRpdExldmVsKG51bGwsIGx2bCkgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IHRoaXMucmVuZGVyQ2FuRWRpdExldmVsKHJvb20ucm9vbUlkLCBsdmwpIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSkgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGFibGU+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8RmllbGRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9XCJ2YWxFeHBsXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw9e190KFwiVmFsdWVzIGF0IGV4cGxpY2l0IGxldmVsc1wiKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJteF9EZXZUb29sc190ZXh0YXJlYVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQ9XCJ0ZXh0YXJlYVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF1dG9Db21wbGV0ZT1cIm9mZlwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLmV4cGxpY2l0VmFsdWVzfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5vbkV4cGxWYWx1ZXNFZGl0fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8RmllbGRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9XCJ2YWxFeHBsXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw9e190KFwiVmFsdWVzIGF0IGV4cGxpY2l0IGxldmVscyBpbiB0aGlzIHJvb21cIil9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwibXhfRGV2VG9vbHNfdGV4dGFyZWFcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50PVwidGV4dGFyZWFcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdXRvQ29tcGxldGU9XCJvZmZcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS5leHBsaWNpdFJvb21WYWx1ZXN9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLm9uRXhwbFJvb21WYWx1ZXNFZGl0fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJteF9EaWFsb2dfYnV0dG9uc1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXt0aGlzLm9uU2F2ZUNsaWNrfT57IF90KFwiU2F2ZSBzZXR0aW5nIHZhbHVlc1wiKSB9PC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e3RoaXMub25CYWNrfT57IF90KFwiQmFja1wiKSB9PC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnN0YXRlLnZpZXdTZXR0aW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibXhfRGlhbG9nX2NvbnRlbnQgbXhfRGV2VG9vbHNfU2V0dGluZ3NFeHBsb3JlclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGgzPnsgX3QoXCJTZXR0aW5nOlwiKSB9IDxjb2RlPnsgdGhpcy5zdGF0ZS52aWV3U2V0dGluZyB9PC9jb2RlPjwvaDM+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBfdChcIlNldHRpbmcgZGVmaW5pdGlvbjpcIikgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwcmU+PGNvZGU+eyBKU09OLnN0cmluZ2lmeShTRVRUSU5HU1t0aGlzLnN0YXRlLnZpZXdTZXR0aW5nXSwgbnVsbCwgNCkgfTwvY29kZT48L3ByZT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgX3QoXCJWYWx1ZTpcIikgfSZuYnNwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb2RlPnsgdGhpcy5yZW5kZXJTZXR0aW5nVmFsdWUoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNldHRpbmdzU3RvcmUuZ2V0VmFsdWUodGhpcy5zdGF0ZS52aWV3U2V0dGluZyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSB9PC9jb2RlPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBfdChcIlZhbHVlIGluIHRoaXMgcm9vbTpcIikgfSZuYnNwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb2RlPnsgdGhpcy5yZW5kZXJTZXR0aW5nVmFsdWUoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNldHRpbmdzU3RvcmUuZ2V0VmFsdWUodGhpcy5zdGF0ZS52aWV3U2V0dGluZywgcm9vbS5yb29tSWQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICkgfTwvY29kZT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgX3QoXCJWYWx1ZXMgYXQgZXhwbGljaXQgbGV2ZWxzOlwiKSB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHByZT48Y29kZT57IHRoaXMucmVuZGVyRXhwbGljaXRTZXR0aW5nVmFsdWVzKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLnZpZXdTZXR0aW5nLCBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICkgfTwvY29kZT48L3ByZT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgX3QoXCJWYWx1ZXMgYXQgZXhwbGljaXQgbGV2ZWxzIGluIHRoaXMgcm9vbTpcIikgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwcmU+PGNvZGU+eyB0aGlzLnJlbmRlckV4cGxpY2l0U2V0dGluZ1ZhbHVlcyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS52aWV3U2V0dGluZywgcm9vbS5yb29tSWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSB9PC9jb2RlPjwvcHJlPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibXhfRGlhbG9nX2J1dHRvbnNcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gb25DbGljaz17KGUpID0+IHRoaXMub25FZGl0Q2xpY2soZSwgdGhpcy5zdGF0ZS52aWV3U2V0dGluZyl9PntcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdChcIkVkaXQgVmFsdWVzXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICB9PC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e3RoaXMub25CYWNrfT57IF90KFwiQmFja1wiKSB9PC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxudHlwZSBEZXZ0b29sc0RpYWxvZ0VudHJ5ID0gUmVhY3QuSlNYRWxlbWVudENvbnN0cnVjdG9yPGFueT4gJiB7XG4gICAgZ2V0TGFiZWw6ICgpID0+IHN0cmluZztcbn07XG5cbmNvbnN0IEVudHJpZXM6IERldnRvb2xzRGlhbG9nRW50cnlbXSA9IFtcbiAgICBTZW5kQ3VzdG9tRXZlbnQsXG4gICAgUm9vbVN0YXRlRXhwbG9yZXIsXG4gICAgU2VuZEFjY291bnREYXRhLFxuICAgIEFjY291bnREYXRhRXhwbG9yZXIsXG4gICAgU2VydmVyc0luUm9vbUxpc3QsXG4gICAgVmVyaWZpY2F0aW9uRXhwbG9yZXIsXG4gICAgV2lkZ2V0RXhwbG9yZXIsXG4gICAgU2V0dGluZ3NFeHBsb3Jlcixcbl07XG5cbmludGVyZmFjZSBJUHJvcHMge1xuICAgIHJvb21JZDogc3RyaW5nO1xuICAgIG9uRmluaXNoZWQ6IChmaW5pc2hlZDogYm9vbGVhbikgPT4gdm9pZDtcbn1cblxuaW50ZXJmYWNlIElTdGF0ZSB7XG4gICAgbW9kZT86IERldnRvb2xzRGlhbG9nRW50cnk7XG59XG5cbkByZXBsYWNlYWJsZUNvbXBvbmVudChcInZpZXdzLmRpYWxvZ3MuRGV2dG9vbHNEaWFsb2dcIilcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERldnRvb2xzRGlhbG9nIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudDxJUHJvcHMsIElTdGF0ZT4ge1xuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcblxuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgbW9kZTogbnVsbCxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHNldE1vZGUobW9kZTogRGV2dG9vbHNEaWFsb2dFbnRyeSkge1xuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IG1vZGUgfSk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvbkJhY2sgPSAoKSA9PiB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBtb2RlOiBudWxsIH0pO1xuICAgIH07XG5cbiAgICBwcml2YXRlIG9uQ2FuY2VsID0gKCkgPT4ge1xuICAgICAgICB0aGlzLnByb3BzLm9uRmluaXNoZWQoZmFsc2UpO1xuICAgIH07XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGxldCBib2R5O1xuXG4gICAgICAgIGlmICh0aGlzLnN0YXRlLm1vZGUpIHtcbiAgICAgICAgICAgIGJvZHkgPSA8TWF0cml4Q2xpZW50Q29udGV4dC5Db25zdW1lcj5cbiAgICAgICAgICAgICAgICB7IChjbGkpID0+IDxSZWFjdC5GcmFnbWVudD5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJteF9EZXZUb29sc19sYWJlbF9sZWZ0XCI+eyB0aGlzLnN0YXRlLm1vZGUuZ2V0TGFiZWwoKSB9PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibXhfRGV2VG9vbHNfbGFiZWxfcmlnaHRcIj5Sb29tIElEOiB7IHRoaXMucHJvcHMucm9vbUlkIH08L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJteF9EZXZUb29sc19sYWJlbF9ib3R0b21cIiAvPlxuICAgICAgICAgICAgICAgICAgICA8dGhpcy5zdGF0ZS5tb2RlIG9uQmFjaz17dGhpcy5vbkJhY2t9IHJvb209e2NsaS5nZXRSb29tKHRoaXMucHJvcHMucm9vbUlkKX0gLz5cbiAgICAgICAgICAgICAgICA8L1JlYWN0LkZyYWdtZW50PiB9XG4gICAgICAgICAgICA8L01hdHJpeENsaWVudENvbnRleHQuQ29uc3VtZXI+O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgY2xhc3NlcyA9IFwibXhfRGV2VG9vbHNfUm9vbVN0YXRlRXhwbG9yZXJfYnV0dG9uXCI7XG4gICAgICAgICAgICBib2R5ID0gPFJlYWN0LkZyYWdtZW50PlxuICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibXhfRGV2VG9vbHNfbGFiZWxfbGVmdFwiPnsgX3QoJ1Rvb2xib3gnKSB9PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibXhfRGV2VG9vbHNfbGFiZWxfcmlnaHRcIj5Sb29tIElEOiB7IHRoaXMucHJvcHMucm9vbUlkIH08L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJteF9EZXZUb29sc19sYWJlbF9ib3R0b21cIiAvPlxuXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibXhfRGlhbG9nX2NvbnRlbnRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIHsgRW50cmllcy5tYXAoKEVudHJ5KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbGFiZWwgPSBFbnRyeS5nZXRMYWJlbCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG9uQ2xpY2sgPSB0aGlzLnNldE1vZGUoRW50cnkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiA8YnV0dG9uIGNsYXNzTmFtZT17Y2xhc3Nlc30ga2V5PXtsYWJlbH0gb25DbGljaz17b25DbGlja30+eyBsYWJlbCB9PC9idXR0b24+O1xuICAgICAgICAgICAgICAgICAgICAgICAgfSkgfVxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm14X0RpYWxvZ19idXR0b25zXCI+XG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gb25DbGljaz17dGhpcy5vbkNhbmNlbH0+eyBfdCgnQ2FuY2VsJykgfTwvYnV0dG9uPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9SZWFjdC5GcmFnbWVudD47XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPEJhc2VEaWFsb2cgY2xhc3NOYW1lPVwibXhfUXVlc3Rpb25EaWFsb2dcIiBvbkZpbmlzaGVkPXt0aGlzLnByb3BzLm9uRmluaXNoZWR9IHRpdGxlPXtfdCgnRGV2ZWxvcGVyIFRvb2xzJyl9PlxuICAgICAgICAgICAgICAgIHsgYm9keSB9XG4gICAgICAgICAgICA8L0Jhc2VEaWFsb2c+XG4gICAgICAgICk7XG4gICAgfVxufVxuIl19