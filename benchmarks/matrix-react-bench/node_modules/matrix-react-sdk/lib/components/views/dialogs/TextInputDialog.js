"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _Field = _interopRequireDefault(require("../elements/Field"));

var _languageHandler = require("../../../languageHandler");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _BaseDialog = _interopRequireDefault(require("./BaseDialog"));

var _DialogButtons = _interopRequireDefault(require("../elements/DialogButtons"));

var _dec, _class, _class2, _temp;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

let TextInputDialog = (_dec = (0, _replaceableComponent.replaceableComponent)("views.dialogs.TextInputDialog"), _dec(_class = (_temp = _class2 = class TextInputDialog extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "field", /*#__PURE__*/(0, _react.createRef)());
    (0, _defineProperty2.default)(this, "onOk", async ev => {
      ev.preventDefault();

      if (this.props.validator) {
        this.setState({
          busy: true
        });
        await this.field.current.validate({
          allowEmpty: false
        });

        if (!this.field.current.state.valid) {
          this.field.current.focus();
          this.field.current.validate({
            allowEmpty: false,
            focused: true
          });
          this.setState({
            busy: false
          });
          return;
        }
      }

      this.props.onFinished(true, this.state.value);
    });
    (0, _defineProperty2.default)(this, "onCancel", () => {
      this.props.onFinished(false);
    });
    (0, _defineProperty2.default)(this, "onChange", ev => {
      this.setState({
        value: ev.target.value
      });
    });
    (0, _defineProperty2.default)(this, "onValidate", async fieldState => {
      const result = await this.props.validator(fieldState);
      this.setState({
        valid: result.valid
      });
      return result;
    });
    this.state = {
      value: this.props.value,
      busy: false,
      valid: false
    };
  }

  componentDidMount() {
    if (this.props.focus) {
      // Set the cursor at the end of the text input
      // this._field.current.value = this.props.value;
      this.field.current.focus();
    }
  }

  render() {
    return /*#__PURE__*/_react.default.createElement(_BaseDialog.default, {
      className: "mx_TextInputDialog",
      onFinished: this.props.onFinished,
      title: this.props.title,
      fixedWidth: this.props.fixedWidth
    }, /*#__PURE__*/_react.default.createElement("form", {
      onSubmit: this.onOk
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_Dialog_content"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_TextInputDialog_label"
    }, /*#__PURE__*/_react.default.createElement("label", {
      htmlFor: "textinput"
    }, " ", this.props.description, " ")), /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_Field.default, {
      className: "mx_TextInputDialog_input",
      ref: this.field,
      type: "text",
      label: this.props.placeholder,
      value: this.state.value,
      onChange: this.onChange,
      onValidate: this.props.validator ? this.onValidate : undefined
    })))), /*#__PURE__*/_react.default.createElement(_DialogButtons.default, {
      primaryButton: this.state.busy ? (0, _languageHandler._t)(this.props.busyMessage) : this.props.button,
      disabled: this.state.busy,
      onPrimaryButtonClick: this.onOk,
      onCancel: this.onCancel,
      hasCancel: this.props.hasCancel
    }));
  }

}, (0, _defineProperty2.default)(_class2, "defaultProps", {
  title: "",
  value: "",
  description: "",
  busyMessage: (0, _languageHandler._td)("Loading..."),
  focus: true,
  hasCancel: true
}), _temp)) || _class);
exports.default = TextInputDialog;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,