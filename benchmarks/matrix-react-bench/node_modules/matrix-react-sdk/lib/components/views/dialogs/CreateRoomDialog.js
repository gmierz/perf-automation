"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _partials = require("matrix-js-sdk/src/@types/partials");

var _SdkConfig = _interopRequireDefault(require("../../../SdkConfig"));

var _Validation = _interopRequireDefault(require("../elements/Validation"));

var _languageHandler = require("../../../languageHandler");

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _Keyboard = require("../../../Keyboard");

var _createRoom = require("../../../createRoom");

var _CommunityPrototypeStore = require("../../../stores/CommunityPrototypeStore");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _Field = _interopRequireDefault(require("../elements/Field"));

var _RoomAliasField = _interopRequireDefault(require("../elements/RoomAliasField"));

var _LabelledToggleSwitch = _interopRequireDefault(require("../elements/LabelledToggleSwitch"));

var _DialogButtons = _interopRequireDefault(require("../elements/DialogButtons"));

var _BaseDialog = _interopRequireDefault(require("../dialogs/BaseDialog"));

var _SpaceStore = _interopRequireDefault(require("../../../stores/spaces/SpaceStore"));

var _JoinRuleDropdown = _interopRequireDefault(require("../elements/JoinRuleDropdown"));

var _dec, _class, _class2, _temp;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

let CreateRoomDialog = (_dec = (0, _replaceableComponent.replaceableComponent)("views.dialogs.CreateRoomDialog"), _dec(_class = (_temp = _class2 = class CreateRoomDialog extends _react.default.Component {
  constructor(props) {
    var _SpaceStore$instance$;

    super(props);
    (0, _defineProperty2.default)(this, "supportsRestricted", void 0);
    (0, _defineProperty2.default)(this, "nameField", /*#__PURE__*/(0, _react.createRef)());
    (0, _defineProperty2.default)(this, "aliasField", /*#__PURE__*/(0, _react.createRef)());
    (0, _defineProperty2.default)(this, "onKeyDown", event => {
      if (event.key === _Keyboard.Key.ENTER) {
        this.onOk();
        event.preventDefault();
        event.stopPropagation();
      }
    });
    (0, _defineProperty2.default)(this, "onOk", async () => {
      const activeElement = document.activeElement;

      if (activeElement) {
        activeElement.blur();
      }

      await this.nameField.current.validate({
        allowEmpty: false
      });

      if (this.aliasField.current) {
        await this.aliasField.current.validate({
          allowEmpty: false
        });
      } // Validation and state updates are async, so we need to wait for them to complete
      // first. Queue a `setState` callback and wait for it to resolve.


      await new Promise(resolve => this.setState({}, resolve));

      if (this.state.nameIsValid && (!this.aliasField.current || this.aliasField.current.isValid)) {
        this.props.onFinished(true, this.roomCreateOptions());
      } else {
        let field;

        if (!this.state.nameIsValid) {
          field = this.nameField.current;
        } else if (this.aliasField.current && !this.aliasField.current.isValid) {
          field = this.aliasField.current;
        }

        if (field) {
          field.focus();
          field.validate({
            allowEmpty: false,
            focused: true
          });
        }
      }
    });
    (0, _defineProperty2.default)(this, "onCancel", () => {
      this.props.onFinished(false);
    });
    (0, _defineProperty2.default)(this, "onNameChange", ev => {
      this.setState({
        name: ev.target.value
      });
    });
    (0, _defineProperty2.default)(this, "onTopicChange", ev => {
      this.setState({
        topic: ev.target.value
      });
    });
    (0, _defineProperty2.default)(this, "onJoinRuleChange", joinRule => {
      this.setState({
        joinRule
      });
    });
    (0, _defineProperty2.default)(this, "onEncryptedChange", isEncrypted => {
      this.setState({
        isEncrypted
      });
    });
    (0, _defineProperty2.default)(this, "onAliasChange", alias => {
      this.setState({
        alias
      });
    });
    (0, _defineProperty2.default)(this, "onDetailsToggled", ev => {
      this.setState({
        detailsOpen: ev.target.open
      });
    });
    (0, _defineProperty2.default)(this, "onNoFederateChange", noFederate => {
      this.setState({
        noFederate
      });
    });
    (0, _defineProperty2.default)(this, "onNameValidate", async fieldState => {
      const result = await CreateRoomDialog.validateRoomName(fieldState);
      this.setState({
        nameIsValid: result.valid
      });
      return result;
    });
    this.supportsRestricted = this.props.parentSpace && !!((_SpaceStore$instance$ = _SpaceStore.default.instance.restrictedJoinRuleSupport) !== null && _SpaceStore$instance$ !== void 0 && _SpaceStore$instance$.preferred);
    let _joinRule = _partials.JoinRule.Invite;

    if (this.props.defaultPublic) {
      _joinRule = _partials.JoinRule.Public;
    } else if (this.supportsRestricted) {
      _joinRule = _partials.JoinRule.Restricted;
    }

    const config = _SdkConfig.default.get();

    this.state = {
      isPublic: this.props.defaultPublic || false,
      isEncrypted: this.props.defaultEncrypted ?? (0, _createRoom.privateShouldBeEncrypted)(),
      joinRule: _joinRule,
      name: this.props.defaultName || "",
      topic: "",
      alias: "",
      detailsOpen: false,
      noFederate: config.default_federate === false,
      nameIsValid: false,
      canChangeEncryption: true
    };

    _MatrixClientPeg.MatrixClientPeg.get().doesServerForceEncryptionForPreset(_partials.Preset.PrivateChat).then(isForced => this.setState({
      canChangeEncryption: !isForced
    }));
  }

  roomCreateOptions() {
    const opts = {};
    const createOpts = opts.createOpts = {};
    createOpts.name = this.state.name;

    if (this.state.joinRule === _partials.JoinRule.Public) {
      createOpts.visibility = _partials.Visibility.Public;
      createOpts.preset = _partials.Preset.PublicChat;
      opts.guestAccess = false;
      const {
        alias
      } = this.state;
      createOpts.room_alias_name = alias.substr(1, alias.indexOf(":") - 1);
    } else {
      // If we cannot change encryption we pass `true` for safety, the server should automatically do this for us.
      opts.encryption = this.state.canChangeEncryption ? this.state.isEncrypted : true;
    }

    if (this.state.topic) {
      createOpts.topic = this.state.topic;
    }

    if (this.state.noFederate) {
      createOpts.creation_content = {
        'm.federate': false
      };
    }

    if (_CommunityPrototypeStore.CommunityPrototypeStore.instance.getSelectedCommunityId()) {
      opts.associatedWithCommunity = _CommunityPrototypeStore.CommunityPrototypeStore.instance.getSelectedCommunityId();
    }

    opts.parentSpace = this.props.parentSpace;

    if (this.props.parentSpace && this.state.joinRule === _partials.JoinRule.Restricted) {
      opts.joinRule = _partials.JoinRule.Restricted;
    }

    return opts;
  }

  componentDidMount() {
    // move focus to first field when showing dialog
    this.nameField.current.focus();
  }

  componentWillUnmount() {}

  render() {
    let aliasField;

    if (this.state.joinRule === _partials.JoinRule.Public) {
      const domain = _MatrixClientPeg.MatrixClientPeg.get().getDomain();

      aliasField = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_CreateRoomDialog_aliasContainer"
      }, /*#__PURE__*/_react.default.createElement(_RoomAliasField.default, {
        ref: this.aliasField,
        onChange: this.onAliasChange,
        domain: domain,
        value: this.state.alias
      }));
    }

    let publicPrivateLabel;

    if (_CommunityPrototypeStore.CommunityPrototypeStore.instance.getSelectedCommunityId()) {
      publicPrivateLabel = /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Private rooms can be found and joined by invitation only. Public rooms can be " + "found and joined by anyone in this community."));
    } else if (this.state.joinRule === _partials.JoinRule.Restricted) {
      publicPrivateLabel = /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Everyone in <SpaceName/> will be able to find and join this room.", {}, {
        SpaceName: () => /*#__PURE__*/_react.default.createElement("b", null, this.props.parentSpace.name)
      }), "\xA0", (0, _languageHandler._t)("You can change this at any time from room settings."));
    } else if (this.state.joinRule === _partials.JoinRule.Public && this.props.parentSpace) {
      publicPrivateLabel = /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Anyone will be able to find and join this room, not just members of <SpaceName/>.", {}, {
        SpaceName: () => /*#__PURE__*/_react.default.createElement("b", null, this.props.parentSpace.name)
      }), "\xA0", (0, _languageHandler._t)("You can change this at any time from room settings."));
    } else if (this.state.joinRule === _partials.JoinRule.Public) {
      publicPrivateLabel = /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Anyone will be able to find and join this room."), "\xA0", (0, _languageHandler._t)("You can change this at any time from room settings."));
    } else if (this.state.joinRule === _partials.JoinRule.Invite) {
      publicPrivateLabel = /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Only people invited will be able to find and join this room."), "\xA0", (0, _languageHandler._t)("You can change this at any time from room settings."));
    }

    let e2eeSection;

    if (this.state.joinRule !== _partials.JoinRule.Public) {
      let microcopy;

      if ((0, _createRoom.privateShouldBeEncrypted)()) {
        if (this.state.canChangeEncryption) {
          microcopy = (0, _languageHandler._t)("You can't disable this later. Bridges & most bots won't work yet.");
        } else {
          microcopy = (0, _languageHandler._t)("Your server requires encryption to be enabled in private rooms.");
        }
      } else {
        microcopy = (0, _languageHandler._t)("Your server admin has disabled end-to-end encryption by default " + "in private rooms & Direct Messages.");
      }

      e2eeSection = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_LabelledToggleSwitch.default, {
        label: (0, _languageHandler._t)("Enable end-to-end encryption"),
        onChange: this.onEncryptedChange,
        value: this.state.isEncrypted,
        className: "mx_CreateRoomDialog_e2eSwitch" // for end-to-end tests
        ,
        disabled: !this.state.canChangeEncryption
      }), /*#__PURE__*/_react.default.createElement("p", null, microcopy));
    }

    let federateLabel = (0, _languageHandler._t)("You might enable this if the room will only be used for collaborating with internal " + "teams on your homeserver. This cannot be changed later.");

    if (_SdkConfig.default.get().default_federate === false) {
      // We only change the label if the default setting is different to avoid jarring text changes to the
      // user. They will have read the implications of turning this off/on, so no need to rephrase for them.
      federateLabel = (0, _languageHandler._t)("You might disable this if the room will be used for collaborating with external " + "teams who have their own homeserver. This cannot be changed later.");
    }

    let title = (0, _languageHandler._t)("Create a room");

    if (_CommunityPrototypeStore.CommunityPrototypeStore.instance.getSelectedCommunityId()) {
      const name = _CommunityPrototypeStore.CommunityPrototypeStore.instance.getSelectedCommunityName();

      title = (0, _languageHandler._t)("Create a room in %(communityName)s", {
        communityName: name
      });
    } else if (!this.props.parentSpace) {
      title = this.state.joinRule === _partials.JoinRule.Public ? (0, _languageHandler._t)('Create a public room') : (0, _languageHandler._t)('Create a private room');
    }

    return /*#__PURE__*/_react.default.createElement(_BaseDialog.default, {
      className: "mx_CreateRoomDialog",
      onFinished: this.props.onFinished,
      title: title
    }, /*#__PURE__*/_react.default.createElement("form", {
      onSubmit: this.onOk,
      onKeyDown: this.onKeyDown
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_Dialog_content"
    }, /*#__PURE__*/_react.default.createElement(_Field.default, {
      ref: this.nameField,
      label: (0, _languageHandler._t)('Name'),
      onChange: this.onNameChange,
      onValidate: this.onNameValidate,
      value: this.state.name,
      className: "mx_CreateRoomDialog_name"
    }), /*#__PURE__*/_react.default.createElement(_Field.default, {
      label: (0, _languageHandler._t)('Topic (optional)'),
      onChange: this.onTopicChange,
      value: this.state.topic,
      className: "mx_CreateRoomDialog_topic"
    }), /*#__PURE__*/_react.default.createElement(_JoinRuleDropdown.default, {
      label: (0, _languageHandler._t)("Room visibility"),
      labelInvite: (0, _languageHandler._t)("Private room (invite only)"),
      labelPublic: (0, _languageHandler._t)("Public room"),
      labelRestricted: this.supportsRestricted ? (0, _languageHandler._t)("Visible to space members") : undefined,
      value: this.state.joinRule,
      onChange: this.onJoinRuleChange
    }), publicPrivateLabel, e2eeSection, aliasField, /*#__PURE__*/_react.default.createElement("details", {
      onToggle: this.onDetailsToggled,
      className: "mx_CreateRoomDialog_details"
    }, /*#__PURE__*/_react.default.createElement("summary", {
      className: "mx_CreateRoomDialog_details_summary"
    }, this.state.detailsOpen ? (0, _languageHandler._t)('Hide advanced') : (0, _languageHandler._t)('Show advanced')), /*#__PURE__*/_react.default.createElement(_LabelledToggleSwitch.default, {
      label: (0, _languageHandler._t)("Block anyone not part of %(serverName)s from ever joining this room.", {
        serverName: _MatrixClientPeg.MatrixClientPeg.getHomeserverName()
      }),
      onChange: this.onNoFederateChange,
      value: this.state.noFederate
    }), /*#__PURE__*/_react.default.createElement("p", null, federateLabel)))), /*#__PURE__*/_react.default.createElement(_DialogButtons.default, {
      primaryButton: (0, _languageHandler._t)('Create Room'),
      onPrimaryButtonClick: this.onOk,
      onCancel: this.onCancel
    }));
  }

}, (0, _defineProperty2.default)(_class2, "validateRoomName", (0, _Validation.default)({
  rules: [{
    key: "required",
    test: async ({
      value
    }) => !!value,
    invalid: () => (0, _languageHandler._t)("Please enter a name for the room")
  }]
})), _temp)) || _class);
exports.default = CreateRoomDialog;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,