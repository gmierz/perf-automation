"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _MatrixClientPeg = require("../../../../MatrixClientPeg");

var _client = require("matrix-js-sdk/src/client");

var _languageHandler = require("../../../../languageHandler");

var _SecurityManager = require("../../../../SecurityManager");

var sdk = _interopRequireWildcard(require("../../../../index"));

var _logger = require("matrix-js-sdk/src/logger");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
Copyright 2018, 2019 New Vector Ltd
Copyright 2020 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
var RestoreType;

(function (RestoreType) {
  RestoreType["Passphrase"] = "passphrase";
  RestoreType["RecoveryKey"] = "recovery_key";
  RestoreType["SecretStorage"] = "secret_storage";
})(RestoreType || (RestoreType = {}));

var ProgressState;

(function (ProgressState) {
  ProgressState["PreFetch"] = "prefetch";
  ProgressState["Fetch"] = "fetch";
  ProgressState["LoadKeys"] = "load_keys";
})(ProgressState || (ProgressState = {}));

/*
 * Dialog for restoring e2e keys from a backup and the user's recovery key
 */
class RestoreKeyBackupDialog extends _react.default.PureComponent {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "onCancel", () => {
      this.props.onFinished(false);
    });
    (0, _defineProperty2.default)(this, "onDone", () => {
      this.props.onFinished(true);
    });
    (0, _defineProperty2.default)(this, "onUseRecoveryKeyClick", () => {
      this.setState({
        forceRecoveryKey: true
      });
    });
    (0, _defineProperty2.default)(this, "progressCallback", data => {
      this.setState({
        progress: data
      });
    });
    (0, _defineProperty2.default)(this, "onResetRecoveryClick", () => {
      this.props.onFinished(false);
      (0, _SecurityManager.accessSecretStorage)(async () => {},
      /* forceReset = */
      true);
    });
    (0, _defineProperty2.default)(this, "onRecoveryKeyChange", e => {
      this.setState({
        recoveryKey: e.target.value,
        recoveryKeyValid: _MatrixClientPeg.MatrixClientPeg.get().isValidRecoveryKey(e.target.value)
      });
    });
    (0, _defineProperty2.default)(this, "onPassPhraseNext", async () => {
      this.setState({
        loading: true,
        restoreError: null,
        restoreType: RestoreType.Passphrase
      });

      try {
        // We do still restore the key backup: we must ensure that the key backup key
        // is the right one and restoring it is currently the only way we can do this.
        const recoverInfo = await _MatrixClientPeg.MatrixClientPeg.get().restoreKeyBackupWithPassword(this.state.passPhrase, undefined, undefined, this.state.backupInfo, {
          progressCallback: this.progressCallback
        });

        if (this.props.keyCallback) {
          const key = await _MatrixClientPeg.MatrixClientPeg.get().keyBackupKeyFromPassword(this.state.passPhrase, this.state.backupInfo);
          this.props.keyCallback(key);
        }

        if (!this.props.showSummary) {
          this.props.onFinished(true);
          return;
        }

        this.setState({
          loading: false,
          recoverInfo
        });
      } catch (e) {
        _logger.logger.log("Error restoring backup", e);

        this.setState({
          loading: false,
          restoreError: e
        });
      }
    });
    (0, _defineProperty2.default)(this, "onRecoveryKeyNext", async () => {
      if (!this.state.recoveryKeyValid) return;
      this.setState({
        loading: true,
        restoreError: null,
        restoreType: RestoreType.RecoveryKey
      });

      try {
        const recoverInfo = await _MatrixClientPeg.MatrixClientPeg.get().restoreKeyBackupWithRecoveryKey(this.state.recoveryKey, undefined, undefined, this.state.backupInfo, {
          progressCallback: this.progressCallback
        });

        if (this.props.keyCallback) {
          const key = _MatrixClientPeg.MatrixClientPeg.get().keyBackupKeyFromRecoveryKey(this.state.recoveryKey);

          this.props.keyCallback(key);
        }

        if (!this.props.showSummary) {
          this.props.onFinished(true);
          return;
        }

        this.setState({
          loading: false,
          recoverInfo
        });
      } catch (e) {
        _logger.logger.log("Error restoring backup", e);

        this.setState({
          loading: false,
          restoreError: e
        });
      }
    });
    (0, _defineProperty2.default)(this, "onPassPhraseChange", e => {
      this.setState({
        passPhrase: e.target.value
      });
    });
    this.state = {
      backupInfo: null,
      backupKeyStored: null,
      loading: false,
      loadError: null,
      restoreError: null,
      recoveryKey: "",
      recoverInfo: null,
      recoveryKeyValid: false,
      forceRecoveryKey: false,
      passPhrase: '',
      restoreType: null,
      progress: {
        stage: ProgressState.PreFetch
      }
    };
  }

  componentDidMount() {
    this.loadBackupStatus();
  }

  async restoreWithSecretStorage() {
    this.setState({
      loading: true,
      restoreError: null,
      restoreType: RestoreType.SecretStorage
    });

    try {
      // `accessSecretStorage` may prompt for storage access as needed.
      await (0, _SecurityManager.accessSecretStorage)(async () => {
        await _MatrixClientPeg.MatrixClientPeg.get().restoreKeyBackupWithSecretStorage(this.state.backupInfo, undefined, undefined, {
          progressCallback: this.progressCallback
        });
      });
      this.setState({
        loading: false
      });
    } catch (e) {
      _logger.logger.log("Error restoring backup", e);

      this.setState({
        restoreError: e,
        loading: false
      });
    }
  }

  async restoreWithCachedKey(backupInfo) {
    if (!backupInfo) return false;

    try {
      const recoverInfo = await _MatrixClientPeg.MatrixClientPeg.get().restoreKeyBackupWithCache(undefined,
      /* targetRoomId */
      undefined,
      /* targetSessionId */
      backupInfo, {
        progressCallback: this.progressCallback
      });
      this.setState({
        recoverInfo
      });
      return true;
    } catch (e) {
      _logger.logger.log("restoreWithCachedKey failed:", e);

      return false;
    }
  }

  async loadBackupStatus() {
    this.setState({
      loading: true,
      loadError: null
    });

    try {
      const cli = _MatrixClientPeg.MatrixClientPeg.get();

      const backupInfo = await cli.getKeyBackupVersion();
      const has4S = await cli.hasSecretStorageKey();
      const backupKeyStored = has4S && (await cli.isKeyBackupKeyStored());
      this.setState({
        backupInfo,
        backupKeyStored
      });
      const gotCache = await this.restoreWithCachedKey(backupInfo);

      if (gotCache) {
        _logger.logger.log("RestoreKeyBackupDialog: found cached backup key");

        this.setState({
          loading: false
        });
        return;
      } // If the backup key is stored, we can proceed directly to restore.


      if (backupKeyStored) {
        return this.restoreWithSecretStorage();
      }

      this.setState({
        loadError: null,
        loading: false
      });
    } catch (e) {
      _logger.logger.log("Error loading backup status", e);

      this.setState({
        loadError: e,
        loading: false
      });
    }
  }

  render() {
    // FIXME: Making these into imports will break tests
    const DialogButtons = sdk.getComponent('views.elements.DialogButtons');
    const AccessibleButton = sdk.getComponent('elements.AccessibleButton');
    const BaseDialog = sdk.getComponent('views.dialogs.BaseDialog');
    const Spinner = sdk.getComponent("elements.Spinner");
    const backupHasPassphrase = this.state.backupInfo && this.state.backupInfo.auth_data && this.state.backupInfo.auth_data.private_key_salt && this.state.backupInfo.auth_data.private_key_iterations;
    let content;
    let title;

    if (this.state.loading) {
      title = (0, _languageHandler._t)("Restoring keys from backup");
      let details;

      if (this.state.progress.stage === ProgressState.Fetch) {
        details = (0, _languageHandler._t)("Fetching keys from server...");
      } else if (this.state.progress.stage === ProgressState.LoadKeys) {
        const {
          total,
          successes,
          failures
        } = this.state.progress;
        details = (0, _languageHandler._t)("%(completed)s of %(total)s keys restored", {
          total,
          completed: successes + failures
        });
      } else if (this.state.progress.stage === ProgressState.PreFetch) {
        details = (0, _languageHandler._t)("Fetching keys from server...");
      }

      content = /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("div", null, details), /*#__PURE__*/_react.default.createElement(Spinner, null));
    } else if (this.state.loadError) {
      title = (0, _languageHandler._t)("Error");
      content = (0, _languageHandler._t)("Unable to load backup status");
    } else if (this.state.restoreError) {
      if (this.state.restoreError.errcode === _client.MatrixClient.RESTORE_BACKUP_ERROR_BAD_KEY) {
        if (this.state.restoreType === RestoreType.RecoveryKey) {
          title = (0, _languageHandler._t)("Security Key mismatch");
          content = /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Backup could not be decrypted with this Security Key: " + "please verify that you entered the correct Security Key.")));
        } else {
          title = (0, _languageHandler._t)("Incorrect Security Phrase");
          content = /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Backup could not be decrypted with this Security Phrase: " + "please verify that you entered the correct Security Phrase.")));
        }
      } else {
        title = (0, _languageHandler._t)("Error");
        content = (0, _languageHandler._t)("Unable to restore backup");
      }
    } else if (this.state.backupInfo === null) {
      title = (0, _languageHandler._t)("Error");
      content = (0, _languageHandler._t)("No backup found!");
    } else if (this.state.recoverInfo) {
      title = (0, _languageHandler._t)("Keys restored");
      let failedToDecrypt;

      if (this.state.recoverInfo.total > this.state.recoverInfo.imported) {
        failedToDecrypt = /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Failed to decrypt %(failedCount)s sessions!", {
          failedCount: this.state.recoverInfo.total - this.state.recoverInfo.imported
        }));
      }

      content = /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Successfully restored %(sessionCount)s keys", {
        sessionCount: this.state.recoverInfo.imported
      })), failedToDecrypt, /*#__PURE__*/_react.default.createElement(DialogButtons, {
        primaryButton: (0, _languageHandler._t)('OK'),
        onPrimaryButtonClick: this.onDone,
        hasCancel: false,
        focus: true
      }));
    } else if (backupHasPassphrase && !this.state.forceRecoveryKey) {
      title = (0, _languageHandler._t)("Enter Security Phrase");
      content = /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("<b>Warning</b>: you should only set up key backup " + "from a trusted computer.", {}, {
        b: sub => /*#__PURE__*/_react.default.createElement("b", null, sub)
      })), /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Access your secure message history and set up secure " + "messaging by entering your Security Phrase.")), /*#__PURE__*/_react.default.createElement("form", {
        className: "mx_RestoreKeyBackupDialog_primaryContainer"
      }, /*#__PURE__*/_react.default.createElement("input", {
        type: "password",
        className: "mx_RestoreKeyBackupDialog_passPhraseInput",
        onChange: this.onPassPhraseChange,
        value: this.state.passPhrase,
        autoFocus: true
      }), /*#__PURE__*/_react.default.createElement(DialogButtons, {
        primaryButton: (0, _languageHandler._t)('Next'),
        onPrimaryButtonClick: this.onPassPhraseNext,
        primaryIsSubmit: true,
        hasCancel: true,
        onCancel: this.onCancel,
        focus: false
      })), (0, _languageHandler._t)("If you've forgotten your Security Phrase you can " + "<button1>use your Security Key</button1> or " + "<button2>set up new recovery options</button2>", {}, {
        button1: s => /*#__PURE__*/_react.default.createElement(AccessibleButton, {
          className: "mx_linkButton",
          element: "span",
          onClick: this.onUseRecoveryKeyClick
        }, s),
        button2: s => /*#__PURE__*/_react.default.createElement(AccessibleButton, {
          className: "mx_linkButton",
          element: "span",
          onClick: this.onResetRecoveryClick
        }, s)
      }));
    } else {
      title = (0, _languageHandler._t)("Enter Security Key");
      let keyStatus;

      if (this.state.recoveryKey.length === 0) {
        keyStatus = /*#__PURE__*/_react.default.createElement("div", {
          className: "mx_RestoreKeyBackupDialog_keyStatus"
        });
      } else if (this.state.recoveryKeyValid) {
        keyStatus = /*#__PURE__*/_react.default.createElement("div", {
          className: "mx_RestoreKeyBackupDialog_keyStatus"
        }, "\uD83D\uDC4D ", (0, _languageHandler._t)("This looks like a valid Security Key!"));
      } else {
        keyStatus = /*#__PURE__*/_react.default.createElement("div", {
          className: "mx_RestoreKeyBackupDialog_keyStatus"
        }, "\uD83D\uDC4E ", (0, _languageHandler._t)("Not a valid Security Key"));
      }

      content = /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("<b>Warning</b>: You should only set up key backup " + "from a trusted computer.", {}, {
        b: sub => /*#__PURE__*/_react.default.createElement("b", null, sub)
      })), /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Access your secure message history and set up secure " + "messaging by entering your Security Key.")), /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_RestoreKeyBackupDialog_primaryContainer"
      }, /*#__PURE__*/_react.default.createElement("input", {
        className: "mx_RestoreKeyBackupDialog_recoveryKeyInput",
        onChange: this.onRecoveryKeyChange,
        value: this.state.recoveryKey,
        autoFocus: true
      }), keyStatus, /*#__PURE__*/_react.default.createElement(DialogButtons, {
        primaryButton: (0, _languageHandler._t)('Next'),
        onPrimaryButtonClick: this.onRecoveryKeyNext,
        hasCancel: true,
        onCancel: this.onCancel,
        focus: false,
        primaryDisabled: !this.state.recoveryKeyValid
      })), (0, _languageHandler._t)("If you've forgotten your Security Key you can " + "<button>set up new recovery options</button>", {}, {
        button: s => /*#__PURE__*/_react.default.createElement(AccessibleButton, {
          className: "mx_linkButton",
          element: "span",
          onClick: this.onResetRecoveryClick
        }, s)
      }));
    }

    return /*#__PURE__*/_react.default.createElement(BaseDialog, {
      className: "mx_RestoreKeyBackupDialog",
      onFinished: this.props.onFinished,
      title: title
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_RestoreKeyBackupDialog_content"
    }, content));
  }

}

exports.default = RestoreKeyBackupDialog;
(0, _defineProperty2.default)(RestoreKeyBackupDialog, "defaultProps", {
  showSummary: true
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL2RpYWxvZ3Mvc2VjdXJpdHkvUmVzdG9yZUtleUJhY2t1cERpYWxvZy50c3giXSwibmFtZXMiOlsiUmVzdG9yZVR5cGUiLCJQcm9ncmVzc1N0YXRlIiwiUmVzdG9yZUtleUJhY2t1cERpYWxvZyIsIlJlYWN0IiwiUHVyZUNvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwicHJvcHMiLCJvbkZpbmlzaGVkIiwic2V0U3RhdGUiLCJmb3JjZVJlY292ZXJ5S2V5IiwiZGF0YSIsInByb2dyZXNzIiwiZSIsInJlY292ZXJ5S2V5IiwidGFyZ2V0IiwidmFsdWUiLCJyZWNvdmVyeUtleVZhbGlkIiwiTWF0cml4Q2xpZW50UGVnIiwiZ2V0IiwiaXNWYWxpZFJlY292ZXJ5S2V5IiwibG9hZGluZyIsInJlc3RvcmVFcnJvciIsInJlc3RvcmVUeXBlIiwiUGFzc3BocmFzZSIsInJlY292ZXJJbmZvIiwicmVzdG9yZUtleUJhY2t1cFdpdGhQYXNzd29yZCIsInN0YXRlIiwicGFzc1BocmFzZSIsInVuZGVmaW5lZCIsImJhY2t1cEluZm8iLCJwcm9ncmVzc0NhbGxiYWNrIiwia2V5Q2FsbGJhY2siLCJrZXkiLCJrZXlCYWNrdXBLZXlGcm9tUGFzc3dvcmQiLCJzaG93U3VtbWFyeSIsImxvZ2dlciIsImxvZyIsIlJlY292ZXJ5S2V5IiwicmVzdG9yZUtleUJhY2t1cFdpdGhSZWNvdmVyeUtleSIsImtleUJhY2t1cEtleUZyb21SZWNvdmVyeUtleSIsImJhY2t1cEtleVN0b3JlZCIsImxvYWRFcnJvciIsInN0YWdlIiwiUHJlRmV0Y2giLCJjb21wb25lbnREaWRNb3VudCIsImxvYWRCYWNrdXBTdGF0dXMiLCJyZXN0b3JlV2l0aFNlY3JldFN0b3JhZ2UiLCJTZWNyZXRTdG9yYWdlIiwicmVzdG9yZUtleUJhY2t1cFdpdGhTZWNyZXRTdG9yYWdlIiwicmVzdG9yZVdpdGhDYWNoZWRLZXkiLCJyZXN0b3JlS2V5QmFja3VwV2l0aENhY2hlIiwiY2xpIiwiZ2V0S2V5QmFja3VwVmVyc2lvbiIsImhhczRTIiwiaGFzU2VjcmV0U3RvcmFnZUtleSIsImlzS2V5QmFja3VwS2V5U3RvcmVkIiwiZ290Q2FjaGUiLCJyZW5kZXIiLCJEaWFsb2dCdXR0b25zIiwic2RrIiwiZ2V0Q29tcG9uZW50IiwiQWNjZXNzaWJsZUJ1dHRvbiIsIkJhc2VEaWFsb2ciLCJTcGlubmVyIiwiYmFja3VwSGFzUGFzc3BocmFzZSIsImF1dGhfZGF0YSIsInByaXZhdGVfa2V5X3NhbHQiLCJwcml2YXRlX2tleV9pdGVyYXRpb25zIiwiY29udGVudCIsInRpdGxlIiwiZGV0YWlscyIsIkZldGNoIiwiTG9hZEtleXMiLCJ0b3RhbCIsInN1Y2Nlc3NlcyIsImZhaWx1cmVzIiwiY29tcGxldGVkIiwiZXJyY29kZSIsIk1hdHJpeENsaWVudCIsIlJFU1RPUkVfQkFDS1VQX0VSUk9SX0JBRF9LRVkiLCJmYWlsZWRUb0RlY3J5cHQiLCJpbXBvcnRlZCIsImZhaWxlZENvdW50Iiwic2Vzc2lvbkNvdW50Iiwib25Eb25lIiwiYiIsInN1YiIsIm9uUGFzc1BocmFzZUNoYW5nZSIsIm9uUGFzc1BocmFzZU5leHQiLCJvbkNhbmNlbCIsImJ1dHRvbjEiLCJzIiwib25Vc2VSZWNvdmVyeUtleUNsaWNrIiwiYnV0dG9uMiIsIm9uUmVzZXRSZWNvdmVyeUNsaWNrIiwia2V5U3RhdHVzIiwibGVuZ3RoIiwib25SZWNvdmVyeUtleUNoYW5nZSIsIm9uUmVjb3ZlcnlLZXlOZXh0IiwiYnV0dG9uIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQWlCQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFHQTs7QUFFQTs7Ozs7O0FBMUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0lBYUtBLFc7O1dBQUFBLFc7QUFBQUEsRUFBQUEsVztBQUFBQSxFQUFBQSxXO0FBQUFBLEVBQUFBLFc7R0FB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LGlCQUFJLDZCQUFDLGdCQUFEO0FBQWtCLFVBQUEsU0FBUyxFQUFDLGVBQTVCO0FBQ1QsVUFBQSxPQUFPLEVBQUMsTUFEQztBQUVULFVBQUEsT0FBTyxFQUFFLEtBQUtHO0FBRkwsV0FJUEgsQ0FKTztBQURqQixPQUpGLENBMUJJLENBQVY7QUF3Q0g7O0FBRUQsd0JBQ0ksNkJBQUMsVUFBRDtBQUFZLE1BQUEsU0FBUyxFQUFDLDJCQUF0QjtBQUNJLE1BQUEsVUFBVSxFQUFFLEtBQUtyRixLQUFMLENBQVdDLFVBRDNCO0FBRUksTUFBQSxLQUFLLEVBQUU4RDtBQUZYLG9CQUlJO0FBQUssTUFBQSxTQUFTLEVBQUM7QUFBZixPQUNNRCxPQUROLENBSkosQ0FESjtBQVVIOztBQXBhbUY7Ozs4QkFBbkVsRSxzQixrQkFDSztBQUNsQmdDLEVBQUFBLFdBQVcsRUFBRTtBQURLLEMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuQ29weXJpZ2h0IDIwMTgsIDIwMTkgTmV3IFZlY3RvciBMdGRcbkNvcHlyaWdodCAyMDIwIFRoZSBNYXRyaXgub3JnIEZvdW5kYXRpb24gQy5JLkMuXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IE1hdHJpeENsaWVudFBlZyB9IGZyb20gJy4uLy4uLy4uLy4uL01hdHJpeENsaWVudFBlZyc7XG5pbXBvcnQgeyBNYXRyaXhDbGllbnQgfSBmcm9tICdtYXRyaXgtanMtc2RrL3NyYy9jbGllbnQnO1xuaW1wb3J0IHsgX3QgfSBmcm9tICcuLi8uLi8uLi8uLi9sYW5ndWFnZUhhbmRsZXInO1xuaW1wb3J0IHsgYWNjZXNzU2VjcmV0U3RvcmFnZSB9IGZyb20gJy4uLy4uLy4uLy4uL1NlY3VyaXR5TWFuYWdlcic7XG5pbXBvcnQgeyBJS2V5QmFja3VwSW5mbywgSUtleUJhY2t1cFJlc3RvcmVSZXN1bHQgfSBmcm9tIFwibWF0cml4LWpzLXNkay9zcmMvY3J5cHRvL2tleWJhY2t1cFwiO1xuaW1wb3J0IHsgSVNlY3JldFN0b3JhZ2VLZXlJbmZvIH0gZnJvbSBcIm1hdHJpeC1qcy1zZGsvc3JjL2NyeXB0by9hcGlcIjtcbmltcG9ydCAqIGFzIHNkayBmcm9tICcuLi8uLi8uLi8uLi9pbmRleCc7XG5pbXBvcnQgeyBJRGlhbG9nUHJvcHMgfSBmcm9tIFwiLi4vSURpYWxvZ1Byb3BzXCI7XG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tIFwibWF0cml4LWpzLXNkay9zcmMvbG9nZ2VyXCI7XG5cbmVudW0gUmVzdG9yZVR5cGUge1xuICAgIFBhc3NwaHJhc2UgPSBcInBhc3NwaHJhc2VcIixcbiAgICBSZWNvdmVyeUtleSA9IFwicmVjb3Zlcnlfa2V5XCIsXG4gICAgU2VjcmV0U3RvcmFnZSA9IFwic2VjcmV0X3N0b3JhZ2VcIlxufVxuXG5lbnVtIFByb2dyZXNzU3RhdGUge1xuICAgIFByZUZldGNoID0gXCJwcmVmZXRjaFwiLFxuICAgIEZldGNoID0gXCJmZXRjaFwiLFxuICAgIExvYWRLZXlzID0gXCJsb2FkX2tleXNcIixcblxufVxuXG5pbnRlcmZhY2UgSVByb3BzIGV4dGVuZHMgSURpYWxvZ1Byb3BzIHtcbiAgICAvLyBpZiBmYWxzZSwgd2lsbCBjbG9zZSB0aGUgZGlhbG9nIGFzIHNvb24gYXMgdGhlIHJlc3RvcmUgY29tcGxldGVzIHN1Y2Nlc2Z1bGx5XG4gICAgLy8gZGVmYXVsdDogdHJ1ZVxuICAgIHNob3dTdW1tYXJ5PzogYm9vbGVhbjtcbiAgICAvLyBJZiBzcGVjaWZpZWQsIGdhdGhlciB0aGUga2V5IGZyb20gdGhlIHVzZXIgYnV0IHRoZW4gY2FsbCB0aGUgZnVuY3Rpb24gd2l0aCB0aGUgYmFja3VwXG4gICAgLy8ga2V5IHJhdGhlciB0aGFuIGFjdHVhbGx5IChuZWNlc3NhcmlseSkgcmVzdG9yaW5nIHRoZSBiYWNrdXAuXG4gICAga2V5Q2FsbGJhY2s/OiAoa2V5OiBVaW50OEFycmF5KSA9PiB2b2lkO1xufVxuXG5pbnRlcmZhY2UgSVN0YXRlIHtcbiAgICBiYWNrdXBJbmZvOiBJS2V5QmFja3VwSW5mbztcbiAgICBiYWNrdXBLZXlTdG9yZWQ6IFJlY29yZDxzdHJpbmcsIElTZWNyZXRTdG9yYWdlS2V5SW5mbz47XG4gICAgbG9hZGluZzogYm9vbGVhbjtcbiAgICBsb2FkRXJyb3I6IHN0cmluZztcbiAgICByZXN0b3JlRXJyb3I6IHtcbiAgICAgICAgZXJyY29kZTogc3RyaW5nO1xuICAgIH07XG4gICAgcmVjb3ZlcnlLZXk6IHN0cmluZztcbiAgICByZWNvdmVySW5mbzogSUtleUJhY2t1cFJlc3RvcmVSZXN1bHQ7XG4gICAgcmVjb3ZlcnlLZXlWYWxpZDogYm9vbGVhbjtcbiAgICBmb3JjZVJlY292ZXJ5S2V5OiBib29sZWFuO1xuICAgIHBhc3NQaHJhc2U6IHN0cmluZztcbiAgICByZXN0b3JlVHlwZTogUmVzdG9yZVR5cGU7XG4gICAgcHJvZ3Jlc3M6IHtcbiAgICAgICAgc3RhZ2U6IFByb2dyZXNzU3RhdGU7XG4gICAgICAgIHRvdGFsPzogbnVtYmVyO1xuICAgICAgICBzdWNjZXNzZXM/OiBudW1iZXI7XG4gICAgICAgIGZhaWx1cmVzPzogbnVtYmVyO1xuICAgIH07XG59XG5cbi8qXG4gKiBEaWFsb2cgZm9yIHJlc3RvcmluZyBlMmUga2V5cyBmcm9tIGEgYmFja3VwIGFuZCB0aGUgdXNlcidzIHJlY292ZXJ5IGtleVxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZXN0b3JlS2V5QmFja3VwRGlhbG9nIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudDxJUHJvcHMsIElTdGF0ZT4ge1xuICAgIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgICAgIHNob3dTdW1tYXJ5OiB0cnVlLFxuICAgIH07XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBiYWNrdXBJbmZvOiBudWxsLFxuICAgICAgICAgICAgYmFja3VwS2V5U3RvcmVkOiBudWxsLFxuICAgICAgICAgICAgbG9hZGluZzogZmFsc2UsXG4gICAgICAgICAgICBsb2FkRXJyb3I6IG51bGwsXG4gICAgICAgICAgICByZXN0b3JlRXJyb3I6IG51bGwsXG4gICAgICAgICAgICByZWNvdmVyeUtleTogXCJcIixcbiAgICAgICAgICAgIHJlY292ZXJJbmZvOiBudWxsLFxuICAgICAgICAgICAgcmVjb3ZlcnlLZXlWYWxpZDogZmFsc2UsXG4gICAgICAgICAgICBmb3JjZVJlY292ZXJ5S2V5OiBmYWxzZSxcbiAgICAgICAgICAgIHBhc3NQaHJhc2U6ICcnLFxuICAgICAgICAgICAgcmVzdG9yZVR5cGU6IG51bGwsXG4gICAgICAgICAgICBwcm9ncmVzczogeyBzdGFnZTogUHJvZ3Jlc3NTdGF0ZS5QcmVGZXRjaCB9LFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHB1YmxpYyBjb21wb25lbnREaWRNb3VudCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5sb2FkQmFja3VwU3RhdHVzKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvbkNhbmNlbCA9ICgpOiB2b2lkID0+IHtcbiAgICAgICAgdGhpcy5wcm9wcy5vbkZpbmlzaGVkKGZhbHNlKTtcbiAgICB9O1xuXG4gICAgcHJpdmF0ZSBvbkRvbmUgPSAoKTogdm9pZCA9PiB7XG4gICAgICAgIHRoaXMucHJvcHMub25GaW5pc2hlZCh0cnVlKTtcbiAgICB9O1xuXG4gICAgcHJpdmF0ZSBvblVzZVJlY292ZXJ5S2V5Q2xpY2sgPSAoKTogdm9pZCA9PiB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgZm9yY2VSZWNvdmVyeUtleTogdHJ1ZSxcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIHByaXZhdGUgcHJvZ3Jlc3NDYWxsYmFjayA9IChkYXRhKTogdm9pZCA9PiB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgcHJvZ3Jlc3M6IGRhdGEsXG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBwcml2YXRlIG9uUmVzZXRSZWNvdmVyeUNsaWNrID0gKCk6IHZvaWQgPT4ge1xuICAgICAgICB0aGlzLnByb3BzLm9uRmluaXNoZWQoZmFsc2UpO1xuICAgICAgICBhY2Nlc3NTZWNyZXRTdG9yYWdlKGFzeW5jICgpID0+IHt9LCAvKiBmb3JjZVJlc2V0ID0gKi8gdHJ1ZSk7XG4gICAgfTtcblxuICAgIHByaXZhdGUgb25SZWNvdmVyeUtleUNoYW5nZSA9IChlKTogdm9pZCA9PiB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgcmVjb3ZlcnlLZXk6IGUudGFyZ2V0LnZhbHVlLFxuICAgICAgICAgICAgcmVjb3ZlcnlLZXlWYWxpZDogTWF0cml4Q2xpZW50UGVnLmdldCgpLmlzVmFsaWRSZWNvdmVyeUtleShlLnRhcmdldC52YWx1ZSksXG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBwcml2YXRlIG9uUGFzc1BocmFzZU5leHQgPSBhc3luYyAoKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgbG9hZGluZzogdHJ1ZSxcbiAgICAgICAgICAgIHJlc3RvcmVFcnJvcjogbnVsbCxcbiAgICAgICAgICAgIHJlc3RvcmVUeXBlOiBSZXN0b3JlVHlwZS5QYXNzcGhyYXNlLFxuICAgICAgICB9KTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdlIGRvIHN0aWxsIHJlc3RvcmUgdGhlIGtleSBiYWNrdXA6IHdlIG11c3QgZW5zdXJlIHRoYXQgdGhlIGtleSBiYWNrdXAga2V5XG4gICAgICAgICAgICAvLyBpcyB0aGUgcmlnaHQgb25lIGFuZCByZXN0b3JpbmcgaXQgaXMgY3VycmVudGx5IHRoZSBvbmx5IHdheSB3ZSBjYW4gZG8gdGhpcy5cbiAgICAgICAgICAgIGNvbnN0IHJlY292ZXJJbmZvID0gYXdhaXQgTWF0cml4Q2xpZW50UGVnLmdldCgpLnJlc3RvcmVLZXlCYWNrdXBXaXRoUGFzc3dvcmQoXG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5wYXNzUGhyYXNlLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdGhpcy5zdGF0ZS5iYWNrdXBJbmZvLFxuICAgICAgICAgICAgICAgIHsgcHJvZ3Jlc3NDYWxsYmFjazogdGhpcy5wcm9ncmVzc0NhbGxiYWNrIH0sXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMua2V5Q2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICBjb25zdCBrZXkgPSBhd2FpdCBNYXRyaXhDbGllbnRQZWcuZ2V0KCkua2V5QmFja3VwS2V5RnJvbVBhc3N3b3JkKFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLnBhc3NQaHJhc2UsIHRoaXMuc3RhdGUuYmFja3VwSW5mbyxcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHRoaXMucHJvcHMua2V5Q2FsbGJhY2soa2V5KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCF0aGlzLnByb3BzLnNob3dTdW1tYXJ5KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5vbkZpbmlzaGVkKHRydWUpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgIGxvYWRpbmc6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHJlY292ZXJJbmZvLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGxvZ2dlci5sb2coXCJFcnJvciByZXN0b3JpbmcgYmFja3VwXCIsIGUpO1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgbG9hZGluZzogZmFsc2UsXG4gICAgICAgICAgICAgICAgcmVzdG9yZUVycm9yOiBlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcHJpdmF0ZSBvblJlY292ZXJ5S2V5TmV4dCA9IGFzeW5jICgpOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgICAgICAgaWYgKCF0aGlzLnN0YXRlLnJlY292ZXJ5S2V5VmFsaWQpIHJldHVybjtcblxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGxvYWRpbmc6IHRydWUsXG4gICAgICAgICAgICByZXN0b3JlRXJyb3I6IG51bGwsXG4gICAgICAgICAgICByZXN0b3JlVHlwZTogUmVzdG9yZVR5cGUuUmVjb3ZlcnlLZXksXG4gICAgICAgIH0pO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcmVjb3ZlckluZm8gPSBhd2FpdCBNYXRyaXhDbGllbnRQZWcuZ2V0KCkucmVzdG9yZUtleUJhY2t1cFdpdGhSZWNvdmVyeUtleShcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLnJlY292ZXJ5S2V5LCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdGhpcy5zdGF0ZS5iYWNrdXBJbmZvLFxuICAgICAgICAgICAgICAgIHsgcHJvZ3Jlc3NDYWxsYmFjazogdGhpcy5wcm9ncmVzc0NhbGxiYWNrIH0sXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMua2V5Q2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICBjb25zdCBrZXkgPSBNYXRyaXhDbGllbnRQZWcuZ2V0KCkua2V5QmFja3VwS2V5RnJvbVJlY292ZXJ5S2V5KHRoaXMuc3RhdGUucmVjb3ZlcnlLZXkpO1xuICAgICAgICAgICAgICAgIHRoaXMucHJvcHMua2V5Q2FsbGJhY2soa2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghdGhpcy5wcm9wcy5zaG93U3VtbWFyeSkge1xuICAgICAgICAgICAgICAgIHRoaXMucHJvcHMub25GaW5pc2hlZCh0cnVlKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICBsb2FkaW5nOiBmYWxzZSxcbiAgICAgICAgICAgICAgICByZWNvdmVySW5mbyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBsb2dnZXIubG9nKFwiRXJyb3IgcmVzdG9yaW5nIGJhY2t1cFwiLCBlKTtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgIGxvYWRpbmc6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHJlc3RvcmVFcnJvcjogZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHByaXZhdGUgb25QYXNzUGhyYXNlQ2hhbmdlID0gKGUpOiB2b2lkID0+IHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBwYXNzUGhyYXNlOiBlLnRhcmdldC52YWx1ZSxcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIHByaXZhdGUgYXN5bmMgcmVzdG9yZVdpdGhTZWNyZXRTdG9yYWdlKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGxvYWRpbmc6IHRydWUsXG4gICAgICAgICAgICByZXN0b3JlRXJyb3I6IG51bGwsXG4gICAgICAgICAgICByZXN0b3JlVHlwZTogUmVzdG9yZVR5cGUuU2VjcmV0U3RvcmFnZSxcbiAgICAgICAgfSk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBgYWNjZXNzU2VjcmV0U3RvcmFnZWAgbWF5IHByb21wdCBmb3Igc3RvcmFnZSBhY2Nlc3MgYXMgbmVlZGVkLlxuICAgICAgICAgICAgYXdhaXQgYWNjZXNzU2VjcmV0U3RvcmFnZShhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgYXdhaXQgTWF0cml4Q2xpZW50UGVnLmdldCgpLnJlc3RvcmVLZXlCYWNrdXBXaXRoU2VjcmV0U3RvcmFnZShcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5iYWNrdXBJbmZvLCB1bmRlZmluZWQsIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgeyBwcm9ncmVzc0NhbGxiYWNrOiB0aGlzLnByb2dyZXNzQ2FsbGJhY2sgfSxcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICBsb2FkaW5nOiBmYWxzZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBsb2dnZXIubG9nKFwiRXJyb3IgcmVzdG9yaW5nIGJhY2t1cFwiLCBlKTtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgIHJlc3RvcmVFcnJvcjogZSxcbiAgICAgICAgICAgICAgICBsb2FkaW5nOiBmYWxzZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyByZXN0b3JlV2l0aENhY2hlZEtleShiYWNrdXBJbmZvKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgICAgIGlmICghYmFja3VwSW5mbykgcmV0dXJuIGZhbHNlO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcmVjb3ZlckluZm8gPSBhd2FpdCBNYXRyaXhDbGllbnRQZWcuZ2V0KCkucmVzdG9yZUtleUJhY2t1cFdpdGhDYWNoZShcbiAgICAgICAgICAgICAgICB1bmRlZmluZWQsIC8qIHRhcmdldFJvb21JZCAqL1xuICAgICAgICAgICAgICAgIHVuZGVmaW5lZCwgLyogdGFyZ2V0U2Vzc2lvbklkICovXG4gICAgICAgICAgICAgICAgYmFja3VwSW5mbyxcbiAgICAgICAgICAgICAgICB7IHByb2dyZXNzQ2FsbGJhY2s6IHRoaXMucHJvZ3Jlc3NDYWxsYmFjayB9LFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgIHJlY292ZXJJbmZvLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgbG9nZ2VyLmxvZyhcInJlc3RvcmVXaXRoQ2FjaGVkS2V5IGZhaWxlZDpcIiwgZSk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIGxvYWRCYWNrdXBTdGF0dXMoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgbG9hZGluZzogdHJ1ZSxcbiAgICAgICAgICAgIGxvYWRFcnJvcjogbnVsbCxcbiAgICAgICAgfSk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBjbGkgPSBNYXRyaXhDbGllbnRQZWcuZ2V0KCk7XG4gICAgICAgICAgICBjb25zdCBiYWNrdXBJbmZvID0gYXdhaXQgY2xpLmdldEtleUJhY2t1cFZlcnNpb24oKTtcbiAgICAgICAgICAgIGNvbnN0IGhhczRTID0gYXdhaXQgY2xpLmhhc1NlY3JldFN0b3JhZ2VLZXkoKTtcbiAgICAgICAgICAgIGNvbnN0IGJhY2t1cEtleVN0b3JlZCA9IGhhczRTICYmIChhd2FpdCBjbGkuaXNLZXlCYWNrdXBLZXlTdG9yZWQoKSk7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICBiYWNrdXBJbmZvLFxuICAgICAgICAgICAgICAgIGJhY2t1cEtleVN0b3JlZCxcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBjb25zdCBnb3RDYWNoZSA9IGF3YWl0IHRoaXMucmVzdG9yZVdpdGhDYWNoZWRLZXkoYmFja3VwSW5mbyk7XG4gICAgICAgICAgICBpZiAoZ290Q2FjaGUpIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIubG9nKFwiUmVzdG9yZUtleUJhY2t1cERpYWxvZzogZm91bmQgY2FjaGVkIGJhY2t1cCBrZXlcIik7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIGxvYWRpbmc6IGZhbHNlLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSWYgdGhlIGJhY2t1cCBrZXkgaXMgc3RvcmVkLCB3ZSBjYW4gcHJvY2VlZCBkaXJlY3RseSB0byByZXN0b3JlLlxuICAgICAgICAgICAgaWYgKGJhY2t1cEtleVN0b3JlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnJlc3RvcmVXaXRoU2VjcmV0U3RvcmFnZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICBsb2FkRXJyb3I6IG51bGwsXG4gICAgICAgICAgICAgICAgbG9hZGluZzogZmFsc2UsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgbG9nZ2VyLmxvZyhcIkVycm9yIGxvYWRpbmcgYmFja3VwIHN0YXR1c1wiLCBlKTtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgIGxvYWRFcnJvcjogZSxcbiAgICAgICAgICAgICAgICBsb2FkaW5nOiBmYWxzZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIHJlbmRlcigpOiBKU1guRWxlbWVudCB7XG4gICAgICAgIC8vIEZJWE1FOiBNYWtpbmcgdGhlc2UgaW50byBpbXBvcnRzIHdpbGwgYnJlYWsgdGVzdHNcbiAgICAgICAgY29uc3QgRGlhbG9nQnV0dG9ucyA9IHNkay5nZXRDb21wb25lbnQoJ3ZpZXdzLmVsZW1lbnRzLkRpYWxvZ0J1dHRvbnMnKTtcbiAgICAgICAgY29uc3QgQWNjZXNzaWJsZUJ1dHRvbiA9IHNkay5nZXRDb21wb25lbnQoJ2VsZW1lbnRzLkFjY2Vzc2libGVCdXR0b24nKTtcbiAgICAgICAgY29uc3QgQmFzZURpYWxvZyA9IHNkay5nZXRDb21wb25lbnQoJ3ZpZXdzLmRpYWxvZ3MuQmFzZURpYWxvZycpO1xuICAgICAgICBjb25zdCBTcGlubmVyID0gc2RrLmdldENvbXBvbmVudChcImVsZW1lbnRzLlNwaW5uZXJcIik7XG5cbiAgICAgICAgY29uc3QgYmFja3VwSGFzUGFzc3BocmFzZSA9IChcbiAgICAgICAgICAgIHRoaXMuc3RhdGUuYmFja3VwSW5mbyAmJlxuICAgICAgICAgICAgdGhpcy5zdGF0ZS5iYWNrdXBJbmZvLmF1dGhfZGF0YSAmJlxuICAgICAgICAgICAgdGhpcy5zdGF0ZS5iYWNrdXBJbmZvLmF1dGhfZGF0YS5wcml2YXRlX2tleV9zYWx0ICYmXG4gICAgICAgICAgICB0aGlzLnN0YXRlLmJhY2t1cEluZm8uYXV0aF9kYXRhLnByaXZhdGVfa2V5X2l0ZXJhdGlvbnNcbiAgICAgICAgKTtcblxuICAgICAgICBsZXQgY29udGVudDtcbiAgICAgICAgbGV0IHRpdGxlO1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS5sb2FkaW5nKSB7XG4gICAgICAgICAgICB0aXRsZSA9IF90KFwiUmVzdG9yaW5nIGtleXMgZnJvbSBiYWNrdXBcIik7XG4gICAgICAgICAgICBsZXQgZGV0YWlscztcbiAgICAgICAgICAgIGlmICh0aGlzLnN0YXRlLnByb2dyZXNzLnN0YWdlID09PSBQcm9ncmVzc1N0YXRlLkZldGNoKSB7XG4gICAgICAgICAgICAgICAgZGV0YWlscyA9IF90KFwiRmV0Y2hpbmcga2V5cyBmcm9tIHNlcnZlci4uLlwiKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5zdGF0ZS5wcm9ncmVzcy5zdGFnZSA9PT0gUHJvZ3Jlc3NTdGF0ZS5Mb2FkS2V5cykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgdG90YWwsIHN1Y2Nlc3NlcywgZmFpbHVyZXMgfSA9IHRoaXMuc3RhdGUucHJvZ3Jlc3M7XG4gICAgICAgICAgICAgICAgZGV0YWlscyA9IF90KFwiJShjb21wbGV0ZWQpcyBvZiAlKHRvdGFsKXMga2V5cyByZXN0b3JlZFwiLCB7IHRvdGFsLCBjb21wbGV0ZWQ6IHN1Y2Nlc3NlcyArIGZhaWx1cmVzIH0pO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnN0YXRlLnByb2dyZXNzLnN0YWdlID09PSBQcm9ncmVzc1N0YXRlLlByZUZldGNoKSB7XG4gICAgICAgICAgICAgICAgZGV0YWlscyA9IF90KFwiRmV0Y2hpbmcga2V5cyBmcm9tIHNlcnZlci4uLlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnRlbnQgPSA8ZGl2PlxuICAgICAgICAgICAgICAgIDxkaXY+eyBkZXRhaWxzIH08L2Rpdj5cbiAgICAgICAgICAgICAgICA8U3Bpbm5lciAvPlxuICAgICAgICAgICAgPC9kaXY+O1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuc3RhdGUubG9hZEVycm9yKSB7XG4gICAgICAgICAgICB0aXRsZSA9IF90KFwiRXJyb3JcIik7XG4gICAgICAgICAgICBjb250ZW50ID0gX3QoXCJVbmFibGUgdG8gbG9hZCBiYWNrdXAgc3RhdHVzXCIpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuc3RhdGUucmVzdG9yZUVycm9yKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5zdGF0ZS5yZXN0b3JlRXJyb3IuZXJyY29kZSA9PT0gTWF0cml4Q2xpZW50LlJFU1RPUkVfQkFDS1VQX0VSUk9SX0JBRF9LRVkpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zdGF0ZS5yZXN0b3JlVHlwZSA9PT0gUmVzdG9yZVR5cGUuUmVjb3ZlcnlLZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGl0bGUgPSBfdChcIlNlY3VyaXR5IEtleSBtaXNtYXRjaFwiKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGVudCA9IDxkaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8cD57IF90KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiQmFja3VwIGNvdWxkIG5vdCBiZSBkZWNyeXB0ZWQgd2l0aCB0aGlzIFNlY3VyaXR5IEtleTogXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwicGxlYXNlIHZlcmlmeSB0aGF0IHlvdSBlbnRlcmVkIHRoZSBjb3JyZWN0IFNlY3VyaXR5IEtleS5cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICkgfTwvcD5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+O1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRpdGxlID0gX3QoXCJJbmNvcnJlY3QgU2VjdXJpdHkgUGhyYXNlXCIpO1xuICAgICAgICAgICAgICAgICAgICBjb250ZW50ID0gPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxwPnsgX3QoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJCYWNrdXAgY291bGQgbm90IGJlIGRlY3J5cHRlZCB3aXRoIHRoaXMgU2VjdXJpdHkgUGhyYXNlOiBcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJwbGVhc2UgdmVyaWZ5IHRoYXQgeW91IGVudGVyZWQgdGhlIGNvcnJlY3QgU2VjdXJpdHkgUGhyYXNlLlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgKSB9PC9wPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aXRsZSA9IF90KFwiRXJyb3JcIik7XG4gICAgICAgICAgICAgICAgY29udGVudCA9IF90KFwiVW5hYmxlIHRvIHJlc3RvcmUgYmFja3VwXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuc3RhdGUuYmFja3VwSW5mbyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdGl0bGUgPSBfdChcIkVycm9yXCIpO1xuICAgICAgICAgICAgY29udGVudCA9IF90KFwiTm8gYmFja3VwIGZvdW5kIVwiKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnN0YXRlLnJlY292ZXJJbmZvKSB7XG4gICAgICAgICAgICB0aXRsZSA9IF90KFwiS2V5cyByZXN0b3JlZFwiKTtcbiAgICAgICAgICAgIGxldCBmYWlsZWRUb0RlY3J5cHQ7XG4gICAgICAgICAgICBpZiAodGhpcy5zdGF0ZS5yZWNvdmVySW5mby50b3RhbCA+IHRoaXMuc3RhdGUucmVjb3ZlckluZm8uaW1wb3J0ZWQpIHtcbiAgICAgICAgICAgICAgICBmYWlsZWRUb0RlY3J5cHQgPSA8cD57IF90KFxuICAgICAgICAgICAgICAgICAgICBcIkZhaWxlZCB0byBkZWNyeXB0ICUoZmFpbGVkQ291bnQpcyBzZXNzaW9ucyFcIixcbiAgICAgICAgICAgICAgICAgICAgeyBmYWlsZWRDb3VudDogdGhpcy5zdGF0ZS5yZWNvdmVySW5mby50b3RhbCAtIHRoaXMuc3RhdGUucmVjb3ZlckluZm8uaW1wb3J0ZWQgfSxcbiAgICAgICAgICAgICAgICApIH08L3A+O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29udGVudCA9IDxkaXY+XG4gICAgICAgICAgICAgICAgPHA+eyBfdChcIlN1Y2Nlc3NmdWxseSByZXN0b3JlZCAlKHNlc3Npb25Db3VudClzIGtleXNcIiwgeyBzZXNzaW9uQ291bnQ6IHRoaXMuc3RhdGUucmVjb3ZlckluZm8uaW1wb3J0ZWQgfSkgfTwvcD5cbiAgICAgICAgICAgICAgICB7IGZhaWxlZFRvRGVjcnlwdCB9XG4gICAgICAgICAgICAgICAgPERpYWxvZ0J1dHRvbnMgcHJpbWFyeUJ1dHRvbj17X3QoJ09LJyl9XG4gICAgICAgICAgICAgICAgICAgIG9uUHJpbWFyeUJ1dHRvbkNsaWNrPXt0aGlzLm9uRG9uZX1cbiAgICAgICAgICAgICAgICAgICAgaGFzQ2FuY2VsPXtmYWxzZX1cbiAgICAgICAgICAgICAgICAgICAgZm9jdXM9e3RydWV9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvZGl2PjtcbiAgICAgICAgfSBlbHNlIGlmIChiYWNrdXBIYXNQYXNzcGhyYXNlICYmICF0aGlzLnN0YXRlLmZvcmNlUmVjb3ZlcnlLZXkpIHtcbiAgICAgICAgICAgIHRpdGxlID0gX3QoXCJFbnRlciBTZWN1cml0eSBQaHJhc2VcIik7XG4gICAgICAgICAgICBjb250ZW50ID0gPGRpdj5cbiAgICAgICAgICAgICAgICA8cD57IF90KFxuICAgICAgICAgICAgICAgICAgICBcIjxiPldhcm5pbmc8L2I+OiB5b3Ugc2hvdWxkIG9ubHkgc2V0IHVwIGtleSBiYWNrdXAgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcImZyb20gYSB0cnVzdGVkIGNvbXB1dGVyLlwiLCB7fSxcbiAgICAgICAgICAgICAgICAgICAgeyBiOiBzdWIgPT4gPGI+eyBzdWIgfTwvYj4gfSxcbiAgICAgICAgICAgICAgICApIH08L3A+XG4gICAgICAgICAgICAgICAgPHA+eyBfdChcbiAgICAgICAgICAgICAgICAgICAgXCJBY2Nlc3MgeW91ciBzZWN1cmUgbWVzc2FnZSBoaXN0b3J5IGFuZCBzZXQgdXAgc2VjdXJlIFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJtZXNzYWdpbmcgYnkgZW50ZXJpbmcgeW91ciBTZWN1cml0eSBQaHJhc2UuXCIsXG4gICAgICAgICAgICAgICAgKSB9PC9wPlxuXG4gICAgICAgICAgICAgICAgPGZvcm0gY2xhc3NOYW1lPVwibXhfUmVzdG9yZUtleUJhY2t1cERpYWxvZ19wcmltYXJ5Q29udGFpbmVyXCI+XG4gICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwicGFzc3dvcmRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwibXhfUmVzdG9yZUtleUJhY2t1cERpYWxvZ19wYXNzUGhyYXNlSW5wdXRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMub25QYXNzUGhyYXNlQ2hhbmdlfVxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUucGFzc1BocmFzZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIGF1dG9Gb2N1cz17dHJ1ZX1cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgPERpYWxvZ0J1dHRvbnNcbiAgICAgICAgICAgICAgICAgICAgICAgIHByaW1hcnlCdXR0b249e190KCdOZXh0Jyl9XG4gICAgICAgICAgICAgICAgICAgICAgICBvblByaW1hcnlCdXR0b25DbGljaz17dGhpcy5vblBhc3NQaHJhc2VOZXh0fVxuICAgICAgICAgICAgICAgICAgICAgICAgcHJpbWFyeUlzU3VibWl0PXt0cnVlfVxuICAgICAgICAgICAgICAgICAgICAgICAgaGFzQ2FuY2VsPXt0cnVlfVxuICAgICAgICAgICAgICAgICAgICAgICAgb25DYW5jZWw9e3RoaXMub25DYW5jZWx9XG4gICAgICAgICAgICAgICAgICAgICAgICBmb2N1cz17ZmFsc2V9XG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPC9mb3JtPlxuICAgICAgICAgICAgICAgIHsgX3QoXG4gICAgICAgICAgICAgICAgICAgIFwiSWYgeW91J3ZlIGZvcmdvdHRlbiB5b3VyIFNlY3VyaXR5IFBocmFzZSB5b3UgY2FuIFwiK1xuICAgICAgICAgICAgICAgICAgICBcIjxidXR0b24xPnVzZSB5b3VyIFNlY3VyaXR5IEtleTwvYnV0dG9uMT4gb3IgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIjxidXR0b24yPnNldCB1cCBuZXcgcmVjb3Zlcnkgb3B0aW9uczwvYnV0dG9uMj5cIixcbiAgICAgICAgICAgICAgICAgICAge30sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbjE6IHMgPT4gPEFjY2Vzc2libGVCdXR0b25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJteF9saW5rQnV0dG9uXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50PVwic3BhblwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5vblVzZVJlY292ZXJ5S2V5Q2xpY2t9XG4gICAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBzIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvQWNjZXNzaWJsZUJ1dHRvbj4sXG4gICAgICAgICAgICAgICAgICAgICAgICBidXR0b24yOiBzID0+IDxBY2Nlc3NpYmxlQnV0dG9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwibXhfbGlua0J1dHRvblwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudD1cInNwYW5cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMub25SZXNldFJlY292ZXJ5Q2xpY2t9XG4gICAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBzIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvQWNjZXNzaWJsZUJ1dHRvbj4sXG4gICAgICAgICAgICAgICAgICAgIH0pIH1cbiAgICAgICAgICAgIDwvZGl2PjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRpdGxlID0gX3QoXCJFbnRlciBTZWN1cml0eSBLZXlcIik7XG5cbiAgICAgICAgICAgIGxldCBrZXlTdGF0dXM7XG4gICAgICAgICAgICBpZiAodGhpcy5zdGF0ZS5yZWNvdmVyeUtleS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICBrZXlTdGF0dXMgPSA8ZGl2IGNsYXNzTmFtZT1cIm14X1Jlc3RvcmVLZXlCYWNrdXBEaWFsb2dfa2V5U3RhdHVzXCIgLz47XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuc3RhdGUucmVjb3ZlcnlLZXlWYWxpZCkge1xuICAgICAgICAgICAgICAgIGtleVN0YXR1cyA9IDxkaXYgY2xhc3NOYW1lPVwibXhfUmVzdG9yZUtleUJhY2t1cERpYWxvZ19rZXlTdGF0dXNcIj5cbiAgICAgICAgICAgICAgICAgICAgeyBcIlxcdUQ4M0RcXHVEQzREIFwiIH17IF90KFwiVGhpcyBsb29rcyBsaWtlIGEgdmFsaWQgU2VjdXJpdHkgS2V5IVwiKSB9XG4gICAgICAgICAgICAgICAgPC9kaXY+O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBrZXlTdGF0dXMgPSA8ZGl2IGNsYXNzTmFtZT1cIm14X1Jlc3RvcmVLZXlCYWNrdXBEaWFsb2dfa2V5U3RhdHVzXCI+XG4gICAgICAgICAgICAgICAgICAgIHsgXCJcXHVEODNEXFx1REM0RSBcIiB9eyBfdChcIk5vdCBhIHZhbGlkIFNlY3VyaXR5IEtleVwiKSB9XG4gICAgICAgICAgICAgICAgPC9kaXY+O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb250ZW50ID0gPGRpdj5cbiAgICAgICAgICAgICAgICA8cD57IF90KFxuICAgICAgICAgICAgICAgICAgICBcIjxiPldhcm5pbmc8L2I+OiBZb3Ugc2hvdWxkIG9ubHkgc2V0IHVwIGtleSBiYWNrdXAgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcImZyb20gYSB0cnVzdGVkIGNvbXB1dGVyLlwiLCB7fSxcbiAgICAgICAgICAgICAgICAgICAgeyBiOiBzdWIgPT4gPGI+eyBzdWIgfTwvYj4gfSxcbiAgICAgICAgICAgICAgICApIH08L3A+XG4gICAgICAgICAgICAgICAgPHA+eyBfdChcbiAgICAgICAgICAgICAgICAgICAgXCJBY2Nlc3MgeW91ciBzZWN1cmUgbWVzc2FnZSBoaXN0b3J5IGFuZCBzZXQgdXAgc2VjdXJlIFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJtZXNzYWdpbmcgYnkgZW50ZXJpbmcgeW91ciBTZWN1cml0eSBLZXkuXCIsXG4gICAgICAgICAgICAgICAgKSB9PC9wPlxuXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJteF9SZXN0b3JlS2V5QmFja3VwRGlhbG9nX3ByaW1hcnlDb250YWluZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzTmFtZT1cIm14X1Jlc3RvcmVLZXlCYWNrdXBEaWFsb2dfcmVjb3ZlcnlLZXlJbnB1dFwiXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5vblJlY292ZXJ5S2V5Q2hhbmdlfVxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUucmVjb3ZlcnlLZXl9XG4gICAgICAgICAgICAgICAgICAgICAgICBhdXRvRm9jdXM9e3RydWV9XG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgIHsga2V5U3RhdHVzIH1cbiAgICAgICAgICAgICAgICAgICAgPERpYWxvZ0J1dHRvbnMgcHJpbWFyeUJ1dHRvbj17X3QoJ05leHQnKX1cbiAgICAgICAgICAgICAgICAgICAgICAgIG9uUHJpbWFyeUJ1dHRvbkNsaWNrPXt0aGlzLm9uUmVjb3ZlcnlLZXlOZXh0fVxuICAgICAgICAgICAgICAgICAgICAgICAgaGFzQ2FuY2VsPXt0cnVlfVxuICAgICAgICAgICAgICAgICAgICAgICAgb25DYW5jZWw9e3RoaXMub25DYW5jZWx9XG4gICAgICAgICAgICAgICAgICAgICAgICBmb2N1cz17ZmFsc2V9XG4gICAgICAgICAgICAgICAgICAgICAgICBwcmltYXJ5RGlzYWJsZWQ9eyF0aGlzLnN0YXRlLnJlY292ZXJ5S2V5VmFsaWR9XG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgeyBfdChcbiAgICAgICAgICAgICAgICAgICAgXCJJZiB5b3UndmUgZm9yZ290dGVuIHlvdXIgU2VjdXJpdHkgS2V5IHlvdSBjYW4gXCIrXG4gICAgICAgICAgICAgICAgICAgIFwiPGJ1dHRvbj5zZXQgdXAgbmV3IHJlY292ZXJ5IG9wdGlvbnM8L2J1dHRvbj5cIixcbiAgICAgICAgICAgICAgICAgICAge30sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbjogcyA9PiA8QWNjZXNzaWJsZUJ1dHRvbiBjbGFzc05hbWU9XCJteF9saW5rQnV0dG9uXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50PVwic3BhblwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5vblJlc2V0UmVjb3ZlcnlDbGlja31cbiAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IHMgfVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9BY2Nlc3NpYmxlQnV0dG9uPixcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICApIH1cbiAgICAgICAgICAgIDwvZGl2PjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8QmFzZURpYWxvZyBjbGFzc05hbWU9J214X1Jlc3RvcmVLZXlCYWNrdXBEaWFsb2cnXG4gICAgICAgICAgICAgICAgb25GaW5pc2hlZD17dGhpcy5wcm9wcy5vbkZpbmlzaGVkfVxuICAgICAgICAgICAgICAgIHRpdGxlPXt0aXRsZX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nbXhfUmVzdG9yZUtleUJhY2t1cERpYWxvZ19jb250ZW50Jz5cbiAgICAgICAgICAgICAgICAgICAgeyBjb250ZW50IH1cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvQmFzZURpYWxvZz5cbiAgICAgICAgKTtcbiAgICB9XG59XG4iXX0=