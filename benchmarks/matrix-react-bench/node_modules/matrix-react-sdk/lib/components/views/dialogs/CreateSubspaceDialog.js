"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _partials = require("matrix-js-sdk/src/@types/partials");

var _languageHandler = require("../../../languageHandler");

var _BaseDialog = _interopRequireDefault(require("./BaseDialog"));

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

var _MatrixClientContext = _interopRequireDefault(require("../../../contexts/MatrixClientContext"));

var _BetaCard = require("../beta/BetaCard");

var _SpaceStore = _interopRequireDefault(require("../../../stores/spaces/SpaceStore"));

var _SpaceCreateMenu = require("../spaces/SpaceCreateMenu");

var _AddExistingToSpaceDialog = require("./AddExistingToSpaceDialog");

var _JoinRuleDropdown = _interopRequireDefault(require("../elements/JoinRuleDropdown"));

var _logger = require("matrix-js-sdk/src/logger");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
Copyright 2021 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const CreateSubspaceDialog = ({
  space,
  onAddExistingSpaceClick,
  onFinished
}) => {
  var _SpaceStore$instance$;

  const [parentSpace, setParentSpace] = (0, _react.useState)(space);
  const [busy, setBusy] = (0, _react.useState)(false);
  const [name, setName] = (0, _react.useState)("");
  const spaceNameField = (0, _react.useRef)();
  const [alias, setAlias] = (0, _react.useState)("");
  const spaceAliasField = (0, _react.useRef)();
  const [avatar, setAvatar] = (0, _react.useState)(null);
  const [topic, setTopic] = (0, _react.useState)("");
  const supportsRestricted = !!((_SpaceStore$instance$ = _SpaceStore.default.instance.restrictedJoinRuleSupport) !== null && _SpaceStore$instance$ !== void 0 && _SpaceStore$instance$.preferred);
  const spaceJoinRule = space.getJoinRule();
  let defaultJoinRule = _partials.JoinRule.Invite;

  if (spaceJoinRule === _partials.JoinRule.Public) {
    defaultJoinRule = _partials.JoinRule.Public;
  } else if (supportsRestricted) {
    defaultJoinRule = _partials.JoinRule.Restricted;
  }

  const [joinRule, setJoinRule] = (0, _react.useState)(defaultJoinRule);

  const onCreateSubspaceClick = async e => {
    e.preventDefault();
    if (busy) return;
    setBusy(true); // require & validate the space name field

    if (!(await spaceNameField.current.validate({
      allowEmpty: false
    }))) {
      spaceNameField.current.focus();
      spaceNameField.current.validate({
        allowEmpty: false,
        focused: true
      });
      setBusy(false);
      return;
    } // validate the space name alias field but do not require it


    if (joinRule === _partials.JoinRule.Public && !(await spaceAliasField.current.validate({
      allowEmpty: true
    }))) {
      spaceAliasField.current.focus();
      spaceAliasField.current.validate({
        allowEmpty: true,
        focused: true
      });
      setBusy(false);
      return;
    }

    try {
      await (0, _SpaceCreateMenu.createSpace)(name, joinRule === _partials.JoinRule.Public, alias, topic, avatar, {}, {
        parentSpace,
        joinRule
      });
      onFinished(true);
    } catch (e) {
      _logger.logger.error(e);
    }
  };

  let joinRuleMicrocopy;

  if (joinRule === _partials.JoinRule.Restricted) {
    joinRuleMicrocopy = /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Anyone in <SpaceName/> will be able to find and join.", {}, {
      SpaceName: () => /*#__PURE__*/_react.default.createElement("b", null, parentSpace.name)
    }));
  } else if (joinRule === _partials.JoinRule.Public) {
    joinRuleMicrocopy = /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Anyone will be able to find and join this space, not just members of <SpaceName/>.", {}, {
      SpaceName: () => /*#__PURE__*/_react.default.createElement("b", null, parentSpace.name)
    }));
  } else if (joinRule === _partials.JoinRule.Invite) {
    joinRuleMicrocopy = /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Only people invited will be able to find and join this space."));
  }

  return /*#__PURE__*/_react.default.createElement(_BaseDialog.default, {
    title: /*#__PURE__*/_react.default.createElement(_AddExistingToSpaceDialog.SubspaceSelector, {
      title: (0, _languageHandler._t)("Create a space"),
      space: space,
      value: parentSpace,
      onChange: setParentSpace
    }),
    className: "mx_CreateSubspaceDialog",
    contentId: "mx_CreateSubspaceDialog",
    onFinished: onFinished,
    fixedWidth: false
  }, /*#__PURE__*/_react.default.createElement(_MatrixClientContext.default.Provider, {
    value: space.client
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_CreateSubspaceDialog_content"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_CreateSubspaceDialog_betaNotice"
  }, /*#__PURE__*/_react.default.createElement(_BetaCard.BetaPill, null), (0, _languageHandler._t)("Add a space to a space you manage.")), /*#__PURE__*/_react.default.createElement(_SpaceCreateMenu.SpaceCreateForm, {
    busy: busy,
    onSubmit: onCreateSubspaceClick,
    setAvatar: setAvatar,
    name: name,
    setName: setName,
    nameFieldRef: spaceNameField,
    topic: topic,
    setTopic: setTopic,
    alias: alias,
    setAlias: setAlias,
    showAliasField: joinRule === _partials.JoinRule.Public,
    aliasFieldRef: spaceAliasField
  }, /*#__PURE__*/_react.default.createElement(_JoinRuleDropdown.default, {
    label: (0, _languageHandler._t)("Space visibility"),
    labelInvite: (0, _languageHandler._t)("Private space (invite only)"),
    labelPublic: (0, _languageHandler._t)("Public space"),
    labelRestricted: supportsRestricted ? (0, _languageHandler._t)("Visible to space members") : undefined,
    width: 478,
    value: joinRule,
    onChange: setJoinRule
  }), joinRuleMicrocopy)), /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_CreateSubspaceDialog_footer"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_CreateSubspaceDialog_footer_prompt"
  }, /*#__PURE__*/_react.default.createElement("div", null, (0, _languageHandler._t)("Want to add an existing space instead?")), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
    kind: "link",
    onClick: () => {
      onAddExistingSpaceClick();
      onFinished();
    }
  }, (0, _languageHandler._t)("Add existing space"))), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
    kind: "primary_outline",
    disabled: busy,
    onClick: () => onFinished(false)
  }, (0, _languageHandler._t)("Cancel")), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
    kind: "primary",
    disabled: busy,
    onClick: onCreateSubspaceClick
  }, busy ? (0, _languageHandler._t)("Adding...") : (0, _languageHandler._t)("Add")))));
};

var _default = CreateSubspaceDialog;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,