"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _languageHandler = require("../../../languageHandler");

var _filesize = _interopRequireDefault(require("filesize"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _blobs = require("../../../utils/blobs");

var _BaseDialog = _interopRequireDefault(require("./BaseDialog"));

var _DialogButtons = _interopRequireDefault(require("../elements/DialogButtons"));

var _dec, _class, _class2, _temp;

let UploadConfirmDialog = (_dec = (0, _replaceableComponent.replaceableComponent)("views.dialogs.UploadConfirmDialog"), _dec(_class = (_temp = _class2 = class UploadConfirmDialog extends _react.default.Component {
  constructor(props) {
    super(props); // Create a fresh `Blob` for previewing (even though `File` already is
    // one) so we can adjust the MIME type if needed.

    (0, _defineProperty2.default)(this, "objectUrl", void 0);
    (0, _defineProperty2.default)(this, "mimeType", void 0);
    (0, _defineProperty2.default)(this, "onCancelClick", () => {
      this.props.onFinished(false);
    });
    (0, _defineProperty2.default)(this, "onUploadClick", () => {
      this.props.onFinished(true);
    });
    (0, _defineProperty2.default)(this, "onUploadAllClick", () => {
      this.props.onFinished(true, true);
    });
    this.mimeType = (0, _blobs.getBlobSafeMimeType)(props.file.type);
    const blob = new Blob([props.file], {
      type: this.mimeType
    });
    this.objectUrl = URL.createObjectURL(blob);
  }

  componentWillUnmount() {
    if (this.objectUrl) URL.revokeObjectURL(this.objectUrl);
  }

  render() {
    let title;

    if (this.props.totalFiles > 1 && this.props.currentIndex !== undefined) {
      title = (0, _languageHandler._t)("Upload files (%(current)s of %(total)s)", {
        current: this.props.currentIndex + 1,
        total: this.props.totalFiles
      });
    } else {
      title = (0, _languageHandler._t)('Upload files');
    }

    let preview;

    if (this.mimeType.startsWith('image/')) {
      preview = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_UploadConfirmDialog_previewOuter"
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_UploadConfirmDialog_previewInner"
      }, /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("img", {
        className: "mx_UploadConfirmDialog_imagePreview",
        src: this.objectUrl
      })), /*#__PURE__*/_react.default.createElement("div", null, this.props.file.name, " (", (0, _filesize.default)(this.props.file.size), ")")));
    } else {
      preview = /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("img", {
        className: "mx_UploadConfirmDialog_fileIcon",
        src: require("../../../../res/img/feather-customised/files.svg")
      }), this.props.file.name, " (", (0, _filesize.default)(this.props.file.size), ")"));
    }

    let uploadAllButton;

    if (this.props.currentIndex + 1 < this.props.totalFiles) {
      uploadAllButton = /*#__PURE__*/_react.default.createElement("button", {
        onClick: this.onUploadAllClick
      }, (0, _languageHandler._t)("Upload all"));
    }

    return /*#__PURE__*/_react.default.createElement(_BaseDialog.default, {
      className: "mx_UploadConfirmDialog",
      fixedWidth: false,
      onFinished: this.onCancelClick,
      title: title,
      contentId: "mx_Dialog_content"
    }, /*#__PURE__*/_react.default.createElement("div", {
      id: "mx_Dialog_content"
    }, preview), /*#__PURE__*/_react.default.createElement(_DialogButtons.default, {
      primaryButton: (0, _languageHandler._t)('Upload'),
      hasCancel: false,
      onPrimaryButtonClick: this.onUploadClick,
      focus: true
    }, uploadAllButton));
  }

}, (0, _defineProperty2.default)(_class2, "defaultProps", {
  totalFiles: 1
}), _temp)) || _class);
exports.default = UploadConfirmDialog;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,