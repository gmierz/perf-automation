"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _IntegrationManagers = require("../../../integrations/IntegrationManagers");

var _Terms = require("../../../Terms");

var _classnames = _interopRequireDefault(require("classnames"));

var ScalarMessaging = _interopRequireWildcard(require("../../../ScalarMessaging"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

var _IntegrationManager = _interopRequireDefault(require("../settings/IntegrationManager"));

var _logger = require("matrix-js-sdk/src/logger");

var _dec, _class;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

let TabbedIntegrationManagerDialog = (_dec = (0, _replaceableComponent.replaceableComponent)("views.dialogs.TabbedIntegrationManagerDialog"), _dec(_class = class TabbedIntegrationManagerDialog extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "openManager", async (i, force = false) => {
      if (i === this.state.currentIndex && !force) return;
      const manager = this.state.managers[i];
      const client = manager.getScalarClient();
      this.setState({
        busy: true,
        currentIndex: i,
        currentLoading: true,
        currentConnected: false,
        currentScalarClient: client
      });
      ScalarMessaging.setOpenManagerUrl(manager.uiUrl);
      client.setTermsInteractionCallback((policyInfo, agreedUrls) => {
        // To avoid visual glitching of two modals stacking briefly, we customise the
        // terms dialog sizing when it will appear for the integration manager so that
        // it gets the same basic size as the IM's own modal.
        return (0, _Terms.dialogTermsInteractionCallback)(policyInfo, agreedUrls, 'mx_TermsDialog_forIntegrationManager');
      });

      try {
        await client.connect();

        if (!client.hasCredentials()) {
          this.setState({
            busy: false,
            currentLoading: false,
            currentConnected: false
          });
        } else {
          this.setState({
            busy: false,
            currentLoading: false,
            currentConnected: true
          });
        }
      } catch (e) {
        if (e instanceof _Terms.TermsNotSignedError) {
          return;
        }

        _logger.logger.error(e);

        this.setState({
          busy: false,
          currentLoading: false,
          currentConnected: false
        });
      }
    });
    this.state = {
      managers: _IntegrationManagers.IntegrationManagers.sharedInstance().getOrderedManagers(),
      busy: true,
      currentIndex: 0,
      currentConnected: false,
      currentLoading: true,
      currentScalarClient: null
    };
  }

  componentDidMount() {
    this.openManager(0, true);
  }

  renderTabs() {
    return this.state.managers.map((m, i) => {
      const classes = (0, _classnames.default)({
        'mx_TabbedIntegrationManagerDialog_tab': true,
        'mx_TabbedIntegrationManagerDialog_currentTab': this.state.currentIndex === i
      });
      return /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        className: classes,
        onClick: () => this.openManager(i),
        key: `tab_${i}`,
        disabled: this.state.busy
      }, m.name);
    });
  }

  renderTab() {
    let uiUrl = null;

    if (this.state.currentScalarClient) {
      uiUrl = this.state.currentScalarClient.getScalarInterfaceUrlForRoom(this.props.room, this.props.screen, this.props.integrationId);
    }

    return /*#__PURE__*/_react.default.createElement(_IntegrationManager.default, {
      loading: this.state.currentLoading,
      connected: this.state.currentConnected,
      url: uiUrl,
      onFinished: () => {
        /* no-op */
      }
    });
  }

  render() {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_TabbedIntegrationManagerDialog_container"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_TabbedIntegrationManagerDialog_tabs"
    }, this.renderTabs()), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_TabbedIntegrationManagerDialog_currentManager"
    }, this.renderTab()));
  }

}) || _class);
exports.default = TabbedIntegrationManagerDialog;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,