"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _Modal = _interopRequireDefault(require("../../../Modal"));

var _languageHandler = require("../../../languageHandler");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _RoomUpgrade = require("../../../utils/RoomUpgrade");

var _BaseDialog = _interopRequireDefault(require("./BaseDialog"));

var _ErrorDialog = _interopRequireDefault(require("./ErrorDialog"));

var _DialogButtons = _interopRequireDefault(require("../elements/DialogButtons"));

var _Spinner = _interopRequireDefault(require("../elements/Spinner"));

var _dec, _class;

let RoomUpgradeDialog = (_dec = (0, _replaceableComponent.replaceableComponent)("views.dialogs.RoomUpgradeDialog"), _dec(_class = class RoomUpgradeDialog extends _react.default.Component {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "targetVersion", void 0);
    (0, _defineProperty2.default)(this, "state", {
      busy: true
    });
    (0, _defineProperty2.default)(this, "onCancelClick", () => {
      this.props.onFinished(false);
    });
    (0, _defineProperty2.default)(this, "onUpgradeClick", () => {
      this.setState({
        busy: true
      });
      (0, _RoomUpgrade.upgradeRoom)(this.props.room, this.targetVersion, false, false).then(() => {
        this.props.onFinished(true);
      }).catch(err => {
        _Modal.default.createTrackedDialog('Failed to upgrade room', '', _ErrorDialog.default, {
          title: (0, _languageHandler._t)("Failed to upgrade room"),
          description: err && err.message ? err.message : (0, _languageHandler._t)("The room upgrade could not be completed")
        });
      }).finally(() => {
        this.setState({
          busy: false
        });
      });
    });
  }

  async componentDidMount() {
    const recommended = await this.props.room.getRecommendedVersion();
    this.targetVersion = recommended.version;
    this.setState({
      busy: false
    });
  }

  render() {
    let buttons;

    if (this.state.busy) {
      buttons = /*#__PURE__*/_react.default.createElement(_Spinner.default, null);
    } else {
      buttons = /*#__PURE__*/_react.default.createElement(_DialogButtons.default, {
        primaryButton: (0, _languageHandler._t)('Upgrade this room to version %(version)s', {
          version: this.targetVersion
        }),
        primaryButtonClass: "danger",
        hasCancel: true,
        onPrimaryButtonClick: this.onUpgradeClick,
        onCancel: this.onCancelClick
      });
    }

    return /*#__PURE__*/_react.default.createElement(_BaseDialog.default, {
      className: "mx_RoomUpgradeDialog",
      onFinished: this.props.onFinished,
      title: (0, _languageHandler._t)("Upgrade Room Version"),
      contentId: "mx_Dialog_content",
      hasCancel: true
    }, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Upgrading this room requires closing down the current " + "instance of the room and creating a new room in its place. " + "To give room members the best possible experience, we will:")), /*#__PURE__*/_react.default.createElement("ol", null, /*#__PURE__*/_react.default.createElement("li", null, (0, _languageHandler._t)("Create a new room with the same name, description and avatar")), /*#__PURE__*/_react.default.createElement("li", null, (0, _languageHandler._t)("Update any local room aliases to point to the new room")), /*#__PURE__*/_react.default.createElement("li", null, (0, _languageHandler._t)("Stop users from speaking in the old version of the room, " + "and post a message advising users to move to the new room")), /*#__PURE__*/_react.default.createElement("li", null, (0, _languageHandler._t)("Put a link back to the old room at the start of the new room " + "so people can see old messages"))), buttons);
  }

}) || _class);
exports.default = RoomUpgradeDialog;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,