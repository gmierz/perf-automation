"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _SetupEncryptionBody = _interopRequireDefault(require("../../../structures/auth/SetupEncryptionBody"));

var _BaseDialog = _interopRequireDefault(require("../BaseDialog"));

var _languageHandler = require("../../../../languageHandler");

var _SetupEncryptionStore = require("../../../../stores/SetupEncryptionStore");

var _replaceableComponent = require("../../../../utils/replaceableComponent");

var _dec, _class;

function iconFromPhase(phase) {
  if (phase === _SetupEncryptionStore.Phase.Done) {
    return require("../../../../../res/img/e2e/verified.svg");
  } else {
    return require("../../../../../res/img/e2e/warning.svg");
  }
}

let SetupEncryptionDialog = (_dec = (0, _replaceableComponent.replaceableComponent)("views.dialogs.security.SetupEncryptionDialog"), _dec(_class = class SetupEncryptionDialog extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "store", void 0);
    (0, _defineProperty2.default)(this, "onStoreUpdate", () => {
      this.setState({
        icon: iconFromPhase(this.store.phase)
      });
    });
    this.store = _SetupEncryptionStore.SetupEncryptionStore.sharedInstance();
    this.state = {
      icon: iconFromPhase(this.store.phase)
    };
  }

  componentDidMount() {
    this.store.on("update", this.onStoreUpdate);
  }

  componentWillUnmount() {
    this.store.removeListener("update", this.onStoreUpdate);
  }

  render() {
    return /*#__PURE__*/_react.default.createElement(_BaseDialog.default, {
      headerImage: this.state.icon,
      onFinished: this.props.onFinished,
      title: (0, _languageHandler._t)("Verify this session")
    }, /*#__PURE__*/_react.default.createElement(_SetupEncryptionBody.default, {
      onFinished: this.props.onFinished
    }));
  }

}) || _class);
exports.default = SetupEncryptionDialog;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL2RpYWxvZ3Mvc2VjdXJpdHkvU2V0dXBFbmNyeXB0aW9uRGlhbG9nLnRzeCJdLCJuYW1lcyI6WyJpY29uRnJvbVBoYXNlIiwicGhhc2UiLCJQaGFzZSIsIkRvbmUiLCJyZXF1aXJlIiwiU2V0dXBFbmNyeXB0aW9uRGlhbG9nIiwiUmVhY3QiLCJDb21wb25lbnQiLCJjb25zdHJ1Y3RvciIsInByb3BzIiwic2V0U3RhdGUiLCJpY29uIiwic3RvcmUiLCJTZXR1cEVuY3J5cHRpb25TdG9yZSIsInNoYXJlZEluc3RhbmNlIiwic3RhdGUiLCJjb21wb25lbnREaWRNb3VudCIsIm9uIiwib25TdG9yZVVwZGF0ZSIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwicmVtb3ZlTGlzdGVuZXIiLCJyZW5kZXIiLCJvbkZpbmlzaGVkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQWdCQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7OztBQUdBLFNBQVNBLGFBQVQsQ0FBdUJDLEtBQXZCLEVBQXFDO0FBQ2pDLE1BQUlBLEtBQUssS0FBS0MsNEJBQU1DLElBQXBCLEVBQTBCO0FBQ3RCLFdBQU9DLE9BQU8sQ0FBQyx5Q0FBRCxDQUFkO0FBQ0gsR0FGRCxNQUVPO0FBQ0gsV0FBT0EsT0FBTyxDQUFDLHdDQUFELENBQWQ7QUFDSDtBQUNKOztJQVFvQkMscUIsV0FEcEIsZ0RBQXFCLDhDQUFyQixDLGdCQUFELE1BQ3FCQSxxQkFEckIsU0FDbURDLGVBQU1DLFNBRHpELENBQ21GO0FBRy9FQyxFQUFBQSxXQUFXLENBQUNDLEtBQUQsRUFBZ0I7QUFDdkIsVUFBTUEsS0FBTjtBQUR1QjtBQUFBLHlEQWVILE1BQVk7QUFDaEMsV0FBS0MsUUFBTCxDQUFjO0FBQUVDLFFBQUFBLElBQUksRUFBRVgsYUFBYSxDQUFDLEtBQUtZLEtBQUwsQ0FBV1gsS0FBWjtBQUFyQixPQUFkO0FBQ0gsS0FqQjBCO0FBR3ZCLFNBQUtXLEtBQUwsR0FBYUMsMkNBQXFCQyxjQUFyQixFQUFiO0FBQ0EsU0FBS0MsS0FBTCxHQUFhO0FBQUVKLE1BQUFBLElBQUksRUFBRVgsYUFBYSxDQUFDLEtBQUtZLEtBQUwsQ0FBV1gsS0FBWjtBQUFyQixLQUFiO0FBQ0g7O0FBRU1lLEVBQUFBLGlCQUFpQixHQUFHO0FBQ3ZCLFNBQUtKLEtBQUwsQ0FBV0ssRUFBWCxDQUFjLFFBQWQsRUFBd0IsS0FBS0MsYUFBN0I7QUFDSDs7QUFFTUMsRUFBQUEsb0JBQW9CLEdBQUc7QUFDMUIsU0FBS1AsS0FBTCxDQUFXUSxjQUFYLENBQTBCLFFBQTFCLEVBQW9DLEtBQUtGLGFBQXpDO0FBQ0g7O0FBTU1HLEVBQUFBLE1BQU0sR0FBRztBQUNaLHdCQUFPLDZCQUFDLG1CQUFEO0FBQ0gsTUFBQSxXQUFXLEVBQUUsS0FBS04sS0FBTCxDQUFXSixJQURyQjtBQUVILE1BQUEsVUFBVSxFQUFFLEtBQUtGLEtBQUwsQ0FBV2EsVUFGcEI7QUFHSCxNQUFBLEtBQUssRUFBRSx5QkFBRyxxQkFBSDtBQUhKLG9CQUtILDZCQUFDLDRCQUFEO0FBQXFCLE1BQUEsVUFBVSxFQUFFLEtBQUtiLEtBQUwsQ0FBV2E7QUFBNUMsTUFMRyxDQUFQO0FBT0g7O0FBOUI4RSxDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbkNvcHlyaWdodCAyMDIwIFRoZSBNYXRyaXgub3JnIEZvdW5kYXRpb24gQy5JLkMuXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBTZXR1cEVuY3J5cHRpb25Cb2R5IGZyb20gJy4uLy4uLy4uL3N0cnVjdHVyZXMvYXV0aC9TZXR1cEVuY3J5cHRpb25Cb2R5JztcbmltcG9ydCBCYXNlRGlhbG9nIGZyb20gJy4uL0Jhc2VEaWFsb2cnO1xuaW1wb3J0IHsgX3QgfSBmcm9tICcuLi8uLi8uLi8uLi9sYW5ndWFnZUhhbmRsZXInO1xuaW1wb3J0IHsgU2V0dXBFbmNyeXB0aW9uU3RvcmUsIFBoYXNlIH0gZnJvbSAnLi4vLi4vLi4vLi4vc3RvcmVzL1NldHVwRW5jcnlwdGlvblN0b3JlJztcbmltcG9ydCB7IHJlcGxhY2VhYmxlQ29tcG9uZW50IH0gZnJvbSBcIi4uLy4uLy4uLy4uL3V0aWxzL3JlcGxhY2VhYmxlQ29tcG9uZW50XCI7XG5pbXBvcnQgeyBJRGlhbG9nUHJvcHMgfSBmcm9tIFwiLi4vSURpYWxvZ1Byb3BzXCI7XG5cbmZ1bmN0aW9uIGljb25Gcm9tUGhhc2UocGhhc2U6IFBoYXNlKSB7XG4gICAgaWYgKHBoYXNlID09PSBQaGFzZS5Eb25lKSB7XG4gICAgICAgIHJldHVybiByZXF1aXJlKFwiLi4vLi4vLi4vLi4vLi4vcmVzL2ltZy9lMmUvdmVyaWZpZWQuc3ZnXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiByZXF1aXJlKFwiLi4vLi4vLi4vLi4vLi4vcmVzL2ltZy9lMmUvd2FybmluZy5zdmdcIik7XG4gICAgfVxufVxuXG5pbnRlcmZhY2UgSVByb3BzIGV4dGVuZHMgSURpYWxvZ1Byb3BzIHt9XG5pbnRlcmZhY2UgSVN0YXRlIHtcbiAgICBpY29uOiBzdHJpbmc7XG59XG5cbkByZXBsYWNlYWJsZUNvbXBvbmVudChcInZpZXdzLmRpYWxvZ3Muc2VjdXJpdHkuU2V0dXBFbmNyeXB0aW9uRGlhbG9nXCIpXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZXR1cEVuY3J5cHRpb25EaWFsb2cgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8SVByb3BzLCBJU3RhdGU+IHtcbiAgICBwcml2YXRlIHN0b3JlOiBTZXR1cEVuY3J5cHRpb25TdG9yZTtcblxuICAgIGNvbnN0cnVjdG9yKHByb3BzOiBJUHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuXG4gICAgICAgIHRoaXMuc3RvcmUgPSBTZXR1cEVuY3J5cHRpb25TdG9yZS5zaGFyZWRJbnN0YW5jZSgpO1xuICAgICAgICB0aGlzLnN0YXRlID0geyBpY29uOiBpY29uRnJvbVBoYXNlKHRoaXMuc3RvcmUucGhhc2UpIH07XG4gICAgfVxuXG4gICAgcHVibGljIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgICB0aGlzLnN0b3JlLm9uKFwidXBkYXRlXCIsIHRoaXMub25TdG9yZVVwZGF0ZSk7XG4gICAgfVxuXG4gICAgcHVibGljIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgICB0aGlzLnN0b3JlLnJlbW92ZUxpc3RlbmVyKFwidXBkYXRlXCIsIHRoaXMub25TdG9yZVVwZGF0ZSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvblN0b3JlVXBkYXRlID0gKCk6IHZvaWQgPT4ge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHsgaWNvbjogaWNvbkZyb21QaGFzZSh0aGlzLnN0b3JlLnBoYXNlKSB9KTtcbiAgICB9O1xuXG4gICAgcHVibGljIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIDxCYXNlRGlhbG9nXG4gICAgICAgICAgICBoZWFkZXJJbWFnZT17dGhpcy5zdGF0ZS5pY29ufVxuICAgICAgICAgICAgb25GaW5pc2hlZD17dGhpcy5wcm9wcy5vbkZpbmlzaGVkfVxuICAgICAgICAgICAgdGl0bGU9e190KFwiVmVyaWZ5IHRoaXMgc2Vzc2lvblwiKX1cbiAgICAgICAgPlxuICAgICAgICAgICAgPFNldHVwRW5jcnlwdGlvbkJvZHkgb25GaW5pc2hlZD17dGhpcy5wcm9wcy5vbkZpbmlzaGVkfSAvPlxuICAgICAgICA8L0Jhc2VEaWFsb2c+O1xuICAgIH1cbn1cbiJdfQ==