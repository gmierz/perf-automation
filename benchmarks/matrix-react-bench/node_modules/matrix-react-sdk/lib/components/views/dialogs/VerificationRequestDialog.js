"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _languageHandler = require("../../../languageHandler");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _BaseDialog = _interopRequireDefault(require("./BaseDialog"));

var _EncryptionPanel = _interopRequireDefault(require("../right_panel/EncryptionPanel"));

var _dec, _class;

let VerificationRequestDialog = (_dec = (0, _replaceableComponent.replaceableComponent)("views.dialogs.VerificationRequestDialog"), _dec(_class = class VerificationRequestDialog extends _react.default.Component {
  constructor(props) {
    super(props);
    this.state = {
      verificationRequest: this.props.verificationRequest
    };

    if (this.props.verificationRequestPromise) {
      this.props.verificationRequestPromise.then(r => {
        this.setState({
          verificationRequest: r
        });
      });
    }
  }

  render() {
    const request = this.state.verificationRequest;
    const otherUserId = request && request.otherUserId;

    const member = this.props.member || otherUserId && _MatrixClientPeg.MatrixClientPeg.get().getUser(otherUserId);

    const title = request && request.isSelfVerification ? (0, _languageHandler._t)("Verify other login") : (0, _languageHandler._t)("Verification Request");
    return /*#__PURE__*/_react.default.createElement(_BaseDialog.default, {
      className: "mx_InfoDialog",
      onFinished: this.props.onFinished,
      contentId: "mx_Dialog_content",
      title: title,
      hasCancel: true
    }, /*#__PURE__*/_react.default.createElement(_EncryptionPanel.default, {
      layout: "dialog",
      verificationRequest: this.props.verificationRequest,
      verificationRequestPromise: this.props.verificationRequestPromise,
      onClose: this.props.onFinished,
      member: member,
      isRoomEncrypted: false
    }));
  }

}) || _class);
exports.default = VerificationRequestDialog;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL2RpYWxvZ3MvVmVyaWZpY2F0aW9uUmVxdWVzdERpYWxvZy50c3giXSwibmFtZXMiOlsiVmVyaWZpY2F0aW9uUmVxdWVzdERpYWxvZyIsIlJlYWN0IiwiQ29tcG9uZW50IiwiY29uc3RydWN0b3IiLCJwcm9wcyIsInN0YXRlIiwidmVyaWZpY2F0aW9uUmVxdWVzdCIsInZlcmlmaWNhdGlvblJlcXVlc3RQcm9taXNlIiwidGhlbiIsInIiLCJzZXRTdGF0ZSIsInJlbmRlciIsInJlcXVlc3QiLCJvdGhlclVzZXJJZCIsIm1lbWJlciIsIk1hdHJpeENsaWVudFBlZyIsImdldCIsImdldFVzZXIiLCJ0aXRsZSIsImlzU2VsZlZlcmlmaWNhdGlvbiIsIm9uRmluaXNoZWQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQWdCQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQTs7QUFDQTs7OztJQWVxQkEseUIsV0FEcEIsZ0RBQXFCLHlDQUFyQixDLGdCQUFELE1BQ3FCQSx5QkFEckIsU0FDdURDLGVBQU1DLFNBRDdELENBQ3VGO0FBQ25GQyxFQUFBQSxXQUFXLENBQUNDLEtBQUQsRUFBUTtBQUNmLFVBQU1BLEtBQU47QUFDQSxTQUFLQyxLQUFMLEdBQWE7QUFDVEMsTUFBQUEsbUJBQW1CLEVBQUUsS0FBS0YsS0FBTCxDQUFXRTtBQUR2QixLQUFiOztBQUdBLFFBQUksS0FBS0YsS0FBTCxDQUFXRywwQkFBZixFQUEyQztBQUN2QyxXQUFLSCxLQUFMLENBQVdHLDBCQUFYLENBQXNDQyxJQUF0QyxDQUEyQ0MsQ0FBQyxJQUFJO0FBQzVDLGFBQUtDLFFBQUwsQ0FBYztBQUFFSixVQUFBQSxtQkFBbUIsRUFBRUc7QUFBdkIsU0FBZDtBQUNILE9BRkQ7QUFHSDtBQUNKOztBQUVERSxFQUFBQSxNQUFNLEdBQUc7QUFDTCxVQUFNQyxPQUFPLEdBQUcsS0FBS1AsS0FBTCxDQUFXQyxtQkFBM0I7QUFDQSxVQUFNTyxXQUFXLEdBQUdELE9BQU8sSUFBSUEsT0FBTyxDQUFDQyxXQUF2Qzs7QUFDQSxVQUFNQyxNQUFNLEdBQUcsS0FBS1YsS0FBTCxDQUFXVSxNQUFYLElBQ1hELFdBQVcsSUFBSUUsaUNBQWdCQyxHQUFoQixHQUFzQkMsT0FBdEIsQ0FBOEJKLFdBQTlCLENBRG5COztBQUVBLFVBQU1LLEtBQUssR0FBR04sT0FBTyxJQUFJQSxPQUFPLENBQUNPLGtCQUFuQixHQUNWLHlCQUFHLG9CQUFILENBRFUsR0FDaUIseUJBQUcsc0JBQUgsQ0FEL0I7QUFHQSx3QkFBTyw2QkFBQyxtQkFBRDtBQUNILE1BQUEsU0FBUyxFQUFDLGVBRFA7QUFFSCxNQUFBLFVBQVUsRUFBRSxLQUFLZixLQUFMLENBQVdnQixVQUZwQjtBQUdILE1BQUEsU0FBUyxFQUFDLG1CQUhQO0FBSUgsTUFBQSxLQUFLLEVBQUVGLEtBSko7QUFLSCxNQUFBLFNBQVMsRUFBRTtBQUxSLG9CQU9ILDZCQUFDLHdCQUFEO0FBQ0ksTUFBQSxNQUFNLEVBQUMsUUFEWDtBQUVJLE1BQUEsbUJBQW1CLEVBQUUsS0FBS2QsS0FBTCxDQUFXRSxtQkFGcEM7QUFHSSxNQUFBLDBCQUEwQixFQUFFLEtBQUtGLEtBQUwsQ0FBV0csMEJBSDNDO0FBSUksTUFBQSxPQUFPLEVBQUUsS0FBS0gsS0FBTCxDQUFXZ0IsVUFKeEI7QUFLSSxNQUFBLE1BQU0sRUFBRU4sTUFMWjtBQU1JLE1BQUEsZUFBZSxFQUFFO0FBTnJCLE1BUEcsQ0FBUDtBQWdCSDs7QUFyQ2tGLEMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuQ29weXJpZ2h0IDIwMjAtMjAyMSBUaGUgTWF0cml4Lm9yZyBGb3VuZGF0aW9uIEMuSS5DLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBNYXRyaXhDbGllbnRQZWcgfSBmcm9tICcuLi8uLi8uLi9NYXRyaXhDbGllbnRQZWcnO1xuaW1wb3J0IHsgX3QgfSBmcm9tICcuLi8uLi8uLi9sYW5ndWFnZUhhbmRsZXInO1xuaW1wb3J0IHsgcmVwbGFjZWFibGVDb21wb25lbnQgfSBmcm9tIFwiLi4vLi4vLi4vdXRpbHMvcmVwbGFjZWFibGVDb21wb25lbnRcIjtcbmltcG9ydCB7IFZlcmlmaWNhdGlvblJlcXVlc3QgfSBmcm9tIFwibWF0cml4LWpzLXNkay9zcmMvY3J5cHRvL3ZlcmlmaWNhdGlvbi9yZXF1ZXN0L1ZlcmlmaWNhdGlvblJlcXVlc3RcIjtcbmltcG9ydCBCYXNlRGlhbG9nIGZyb20gXCIuL0Jhc2VEaWFsb2dcIjtcbmltcG9ydCBFbmNyeXB0aW9uUGFuZWwgZnJvbSBcIi4uL3JpZ2h0X3BhbmVsL0VuY3J5cHRpb25QYW5lbFwiO1xuaW1wb3J0IHsgVXNlciB9IGZyb20gJ21hdHJpeC1qcy1zZGsvc3JjL21vZGVscy91c2VyJztcblxuaW50ZXJmYWNlIElQcm9wcyB7XG4gICAgdmVyaWZpY2F0aW9uUmVxdWVzdDogVmVyaWZpY2F0aW9uUmVxdWVzdDtcbiAgICB2ZXJpZmljYXRpb25SZXF1ZXN0UHJvbWlzZTogUHJvbWlzZTxWZXJpZmljYXRpb25SZXF1ZXN0PjtcbiAgICBvbkZpbmlzaGVkOiAoKSA9PiB2b2lkO1xuICAgIG1lbWJlcjogVXNlcjtcbn1cblxuaW50ZXJmYWNlIElTdGF0ZSB7XG4gICAgdmVyaWZpY2F0aW9uUmVxdWVzdDogVmVyaWZpY2F0aW9uUmVxdWVzdDtcbn1cblxuQHJlcGxhY2VhYmxlQ29tcG9uZW50KFwidmlld3MuZGlhbG9ncy5WZXJpZmljYXRpb25SZXF1ZXN0RGlhbG9nXCIpXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBWZXJpZmljYXRpb25SZXF1ZXN0RGlhbG9nIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PElQcm9wcywgSVN0YXRlPiB7XG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgdmVyaWZpY2F0aW9uUmVxdWVzdDogdGhpcy5wcm9wcy52ZXJpZmljYXRpb25SZXF1ZXN0LFxuICAgICAgICB9O1xuICAgICAgICBpZiAodGhpcy5wcm9wcy52ZXJpZmljYXRpb25SZXF1ZXN0UHJvbWlzZSkge1xuICAgICAgICAgICAgdGhpcy5wcm9wcy52ZXJpZmljYXRpb25SZXF1ZXN0UHJvbWlzZS50aGVuKHIgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyB2ZXJpZmljYXRpb25SZXF1ZXN0OiByIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGNvbnN0IHJlcXVlc3QgPSB0aGlzLnN0YXRlLnZlcmlmaWNhdGlvblJlcXVlc3Q7XG4gICAgICAgIGNvbnN0IG90aGVyVXNlcklkID0gcmVxdWVzdCAmJiByZXF1ZXN0Lm90aGVyVXNlcklkO1xuICAgICAgICBjb25zdCBtZW1iZXIgPSB0aGlzLnByb3BzLm1lbWJlciB8fFxuICAgICAgICAgICAgb3RoZXJVc2VySWQgJiYgTWF0cml4Q2xpZW50UGVnLmdldCgpLmdldFVzZXIob3RoZXJVc2VySWQpO1xuICAgICAgICBjb25zdCB0aXRsZSA9IHJlcXVlc3QgJiYgcmVxdWVzdC5pc1NlbGZWZXJpZmljYXRpb24gP1xuICAgICAgICAgICAgX3QoXCJWZXJpZnkgb3RoZXIgbG9naW5cIikgOiBfdChcIlZlcmlmaWNhdGlvbiBSZXF1ZXN0XCIpO1xuXG4gICAgICAgIHJldHVybiA8QmFzZURpYWxvZ1xuICAgICAgICAgICAgY2xhc3NOYW1lPVwibXhfSW5mb0RpYWxvZ1wiXG4gICAgICAgICAgICBvbkZpbmlzaGVkPXt0aGlzLnByb3BzLm9uRmluaXNoZWR9XG4gICAgICAgICAgICBjb250ZW50SWQ9XCJteF9EaWFsb2dfY29udGVudFwiXG4gICAgICAgICAgICB0aXRsZT17dGl0bGV9XG4gICAgICAgICAgICBoYXNDYW5jZWw9e3RydWV9XG4gICAgICAgID5cbiAgICAgICAgICAgIDxFbmNyeXB0aW9uUGFuZWxcbiAgICAgICAgICAgICAgICBsYXlvdXQ9XCJkaWFsb2dcIlxuICAgICAgICAgICAgICAgIHZlcmlmaWNhdGlvblJlcXVlc3Q9e3RoaXMucHJvcHMudmVyaWZpY2F0aW9uUmVxdWVzdH1cbiAgICAgICAgICAgICAgICB2ZXJpZmljYXRpb25SZXF1ZXN0UHJvbWlzZT17dGhpcy5wcm9wcy52ZXJpZmljYXRpb25SZXF1ZXN0UHJvbWlzZX1cbiAgICAgICAgICAgICAgICBvbkNsb3NlPXt0aGlzLnByb3BzLm9uRmluaXNoZWR9XG4gICAgICAgICAgICAgICAgbWVtYmVyPXttZW1iZXJ9XG4gICAgICAgICAgICAgICAgaXNSb29tRW5jcnlwdGVkPXtmYWxzZX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgIDwvQmFzZURpYWxvZz47XG4gICAgfVxufVxuIl19