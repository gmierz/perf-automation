"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _url = _interopRequireDefault(require("url"));

var _react = _interopRequireDefault(require("react"));

var _languageHandler = require("../../../languageHandler");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _serviceTypes = require("matrix-js-sdk/src/service-types");

var _DialogButtons = _interopRequireDefault(require("../elements/DialogButtons"));

var _BaseDialog = _interopRequireDefault(require("./BaseDialog"));

var _dec, _class;

class TermsCheckbox extends _react.default.PureComponent {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "onChange", ev => {
      this.props.onChange(this.props.url, ev.currentTarget.checked);
    });
  }

  render() {
    return /*#__PURE__*/_react.default.createElement("input", {
      type: "checkbox",
      onChange: this.onChange,
      checked: this.props.checked
    });
  }

}

let TermsDialog = (_dec = (0, _replaceableComponent.replaceableComponent)("views.dialogs.TermsDialog"), _dec(_class = class TermsDialog extends _react.default.PureComponent {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "onCancelClick", () => {
      this.props.onFinished(false);
    });
    (0, _defineProperty2.default)(this, "onNextClick", () => {
      this.props.onFinished(true, Object.keys(this.state.agreedUrls).filter(url => this.state.agreedUrls[url]));
    });
    (0, _defineProperty2.default)(this, "onTermsCheckboxChange", (url, checked) => {
      this.setState({
        agreedUrls: Object.assign({}, this.state.agreedUrls, {
          [url]: checked
        })
      });
    });
    this.state = {
      // url -> boolean
      agreedUrls: {}
    };

    for (const url of props.agreedUrls) {
      this.state.agreedUrls[url] = true;
    }
  }

  nameForServiceType(serviceType, host) {
    switch (serviceType) {
      case _serviceTypes.SERVICE_TYPES.IS:
        return /*#__PURE__*/_react.default.createElement("div", null, (0, _languageHandler._t)("Identity server"), /*#__PURE__*/_react.default.createElement("br", null), "(", host, ")");

      case _serviceTypes.SERVICE_TYPES.IM:
        return /*#__PURE__*/_react.default.createElement("div", null, (0, _languageHandler._t)("Integration manager"), /*#__PURE__*/_react.default.createElement("br", null), "(", host, ")");
    }
  }

  summaryForServiceType(serviceType) {
    switch (serviceType) {
      case _serviceTypes.SERVICE_TYPES.IS:
        return /*#__PURE__*/_react.default.createElement("div", null, (0, _languageHandler._t)("Find others by phone or email"), /*#__PURE__*/_react.default.createElement("br", null), (0, _languageHandler._t)("Be found by phone or email"));

      case _serviceTypes.SERVICE_TYPES.IM:
        return /*#__PURE__*/_react.default.createElement("div", null, (0, _languageHandler._t)("Use bots, bridges, widgets and sticker packs"));
    }
  }

  render() {
    const rows = [];

    for (const policiesAndService of this.props.policiesAndServicePairs) {
      const parsedBaseUrl = _url.default.parse(policiesAndService.service.baseUrl);

      const policyValues = Object.values(policiesAndService.policies);

      for (let i = 0; i < policyValues.length; ++i) {
        const termDoc = policyValues[i];
        const termsLang = (0, _languageHandler.pickBestLanguage)(Object.keys(termDoc).filter(k => k !== 'version'));
        let serviceName;
        let summary;

        if (i === 0) {
          serviceName = this.nameForServiceType(policiesAndService.service.serviceType, parsedBaseUrl.host);
          summary = this.summaryForServiceType(policiesAndService.service.serviceType);
        }

        rows.push( /*#__PURE__*/_react.default.createElement("tr", {
          key: termDoc[termsLang].url
        }, /*#__PURE__*/_react.default.createElement("td", {
          className: "mx_TermsDialog_service"
        }, serviceName), /*#__PURE__*/_react.default.createElement("td", {
          className: "mx_TermsDialog_summary"
        }, summary), /*#__PURE__*/_react.default.createElement("td", null, termDoc[termsLang].name, /*#__PURE__*/_react.default.createElement("a", {
          rel: "noreferrer noopener",
          target: "_blank",
          href: termDoc[termsLang].url
        }, /*#__PURE__*/_react.default.createElement("span", {
          className: "mx_TermsDialog_link"
        }))), /*#__PURE__*/_react.default.createElement("td", null, /*#__PURE__*/_react.default.createElement(TermsCheckbox, {
          url: termDoc[termsLang].url,
          onChange: this.onTermsCheckboxChange,
          checked: Boolean(this.state.agreedUrls[termDoc[termsLang].url])
        }))));
      }
    } // if all the documents for at least one service have been checked, we can enable
    // the submit button


    let enableSubmit = false;

    for (const policiesAndService of this.props.policiesAndServicePairs) {
      let docsAgreedForService = 0;

      for (const terms of Object.values(policiesAndService.policies)) {
        let docAgreed = false;

        for (const lang of Object.keys(terms)) {
          if (lang === 'version') continue;

          if (this.state.agreedUrls[terms[lang].url]) {
            docAgreed = true;
            break;
          }
        }

        if (docAgreed) {
          ++docsAgreedForService;
        }
      }

      if (docsAgreedForService === Object.keys(policiesAndService.policies).length) {
        enableSubmit = true;
        break;
      }
    }

    return /*#__PURE__*/_react.default.createElement(_BaseDialog.default, {
      fixedWidth: false,
      onFinished: this.onCancelClick,
      title: (0, _languageHandler._t)("Terms of Service"),
      contentId: "mx_Dialog_content",
      hasCancel: false
    }, /*#__PURE__*/_react.default.createElement("div", {
      id: "mx_Dialog_content"
    }, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("To continue you need to accept the terms of this service.")), /*#__PURE__*/_react.default.createElement("table", {
      className: "mx_TermsDialog_termsTable"
    }, /*#__PURE__*/_react.default.createElement("tbody", null, /*#__PURE__*/_react.default.createElement("tr", {
      className: "mx_TermsDialog_termsTableHeader"
    }, /*#__PURE__*/_react.default.createElement("th", null, (0, _languageHandler._t)("Service")), /*#__PURE__*/_react.default.createElement("th", null, (0, _languageHandler._t)("Summary")), /*#__PURE__*/_react.default.createElement("th", null, (0, _languageHandler._t)("Document")), /*#__PURE__*/_react.default.createElement("th", null, (0, _languageHandler._t)("Accept"))), rows))), /*#__PURE__*/_react.default.createElement(_DialogButtons.default, {
      primaryButton: (0, _languageHandler._t)('Next'),
      hasCancel: true,
      onCancel: this.onCancelClick,
      onPrimaryButtonClick: this.onNextClick,
      primaryDisabled: !enableSubmit
    }));
  }

}) || _class);
exports.default = TermsDialog;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,