"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var Email = _interopRequireWildcard(require("../../../email"));

var _AddThreepid = _interopRequireDefault(require("../../../AddThreepid"));

var _languageHandler = require("../../../languageHandler");

var _Modal = _interopRequireDefault(require("../../../Modal"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _Spinner = _interopRequireDefault(require("../elements/Spinner"));

var _ErrorDialog = _interopRequireDefault(require("./ErrorDialog"));

var _QuestionDialog = _interopRequireDefault(require("./QuestionDialog"));

var _BaseDialog = _interopRequireDefault(require("./BaseDialog"));

var _EditableText = _interopRequireDefault(require("../elements/EditableText"));

var _logger = require("matrix-js-sdk/src/logger");

var _dec, _class;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

let SetEmailDialog = (
/*
 * Prompt the user to set an email address.
 *
 * On success, `onFinished(true)` is called.
 */
_dec = (0, _replaceableComponent.replaceableComponent)("views.dialogs.SetEmailDialog"), _dec(_class = class SetEmailDialog extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "addThreepid", void 0);
    (0, _defineProperty2.default)(this, "onEmailAddressChanged", value => {
      this.setState({
        emailAddress: value
      });
    });
    (0, _defineProperty2.default)(this, "onSubmit", () => {
      const emailAddress = this.state.emailAddress;

      if (!Email.looksValid(emailAddress)) {
        _Modal.default.createTrackedDialog('Invalid Email Address', '', _ErrorDialog.default, {
          title: (0, _languageHandler._t)("Invalid Email Address"),
          description: (0, _languageHandler._t)("This doesn't appear to be a valid email address")
        });

        return;
      }

      this.addThreepid = new _AddThreepid.default();
      this.addThreepid.addEmailAddress(emailAddress).then(() => {
        _Modal.default.createTrackedDialog('Verification Pending', '', _QuestionDialog.default, {
          title: (0, _languageHandler._t)("Verification Pending"),
          description: (0, _languageHandler._t)("Please check your email and click on the link it contains. Once this " + "is done, click continue."),
          button: (0, _languageHandler._t)('Continue'),
          onFinished: this.onEmailDialogFinished
        });
      }, err => {
        this.setState({
          emailBusy: false
        });

        _logger.logger.error("Unable to add email address " + emailAddress + " " + err);

        _Modal.default.createTrackedDialog('Unable to add email address', '', _ErrorDialog.default, {
          title: (0, _languageHandler._t)("Unable to add email address"),
          description: err && err.message ? err.message : (0, _languageHandler._t)("Operation failed")
        });
      });
      this.setState({
        emailBusy: true
      });
    });
    (0, _defineProperty2.default)(this, "onCancelled", () => {
      this.props.onFinished(false);
    });
    (0, _defineProperty2.default)(this, "onEmailDialogFinished", ok => {
      if (ok) {
        this.verifyEmailAddress();
      } else {
        this.setState({
          emailBusy: false
        });
      }
    });
    this.state = {
      emailAddress: '',
      emailBusy: false
    };
  }

  verifyEmailAddress() {
    this.addThreepid.checkEmailLinkClicked().then(() => {
      this.props.onFinished(true);
    }, err => {
      this.setState({
        emailBusy: false
      });

      if (err.errcode == 'M_THREEPID_AUTH_FAILED') {
        const message = (0, _languageHandler._t)("Unable to verify email address.") + " " + (0, _languageHandler._t)("Please check your email and click on the link it contains. Once this is done, click continue.");

        _Modal.default.createTrackedDialog('Verification Pending', '3pid Auth Failed', _QuestionDialog.default, {
          title: (0, _languageHandler._t)("Verification Pending"),
          description: message,
          button: (0, _languageHandler._t)('Continue'),
          onFinished: this.onEmailDialogFinished
        });
      } else {
        _logger.logger.error("Unable to verify email address: " + err);

        _Modal.default.createTrackedDialog('Unable to verify email address', '', _ErrorDialog.default, {
          title: (0, _languageHandler._t)("Unable to verify email address."),
          description: err && err.message ? err.message : (0, _languageHandler._t)("Operation failed")
        });
      }
    });
  }

  render() {
    const emailInput = this.state.emailBusy ? /*#__PURE__*/_react.default.createElement(_Spinner.default, null) : /*#__PURE__*/_react.default.createElement(_EditableText.default, {
      initialValue: this.state.emailAddress,
      className: "mx_SetEmailDialog_email_input",
      placeholder: (0, _languageHandler._t)("Email address"),
      placeholderClassName: "mx_SetEmailDialog_email_input_placeholder",
      blurToCancel: false,
      onValueChanged: this.onEmailAddressChanged
    });
    return /*#__PURE__*/_react.default.createElement(_BaseDialog.default, {
      className: "mx_SetEmailDialog",
      onFinished: this.onCancelled,
      title: this.props.title,
      contentId: "mx_Dialog_content"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_Dialog_content"
    }, /*#__PURE__*/_react.default.createElement("p", {
      id: "mx_Dialog_content"
    }, (0, _languageHandler._t)('This will allow you to reset your password and receive notifications.')), emailInput), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_Dialog_buttons"
    }, /*#__PURE__*/_react.default.createElement("input", {
      className: "mx_Dialog_primary",
      type: "submit",
      value: (0, _languageHandler._t)("Continue"),
      onClick: this.onSubmit
    }), /*#__PURE__*/_react.default.createElement("input", {
      type: "submit",
      value: (0, _languageHandler._t)("Skip"),
      onClick: this.onCancelled
    })));
  }

}) || _class);
exports.default = SetEmailDialog;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,