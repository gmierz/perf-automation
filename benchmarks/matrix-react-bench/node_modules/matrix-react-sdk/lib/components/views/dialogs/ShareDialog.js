"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var React = _interopRequireWildcard(require("react"));

var PropTypes = _interopRequireWildcard(require("prop-types"));

var _room = require("matrix-js-sdk/src/models/room");

var _user = require("matrix-js-sdk/src/models/user");

var _group = require("matrix-js-sdk/src/models/group");

var _roomMember = require("matrix-js-sdk/src/models/room-member");

var _event = require("matrix-js-sdk/src/models/event");

var _languageHandler = require("../../../languageHandler");

var _QRCode = _interopRequireDefault(require("../elements/QRCode"));

var _Permalinks = require("../../../utils/permalinks/Permalinks");

var ContextMenu = _interopRequireWildcard(require("../../structures/ContextMenu"));

var _strings = require("../../../utils/strings");

var _StyledCheckbox = _interopRequireDefault(require("../elements/StyledCheckbox"));

var _AccessibleTooltipButton = _interopRequireDefault(require("../elements/AccessibleTooltipButton"));

var _SettingsStore = _interopRequireDefault(require("../../../settings/SettingsStore"));

var _UIFeature = require("../../../settings/UIFeature");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _BaseDialog = _interopRequireDefault(require("./BaseDialog"));

var _GenericTextContextMenu = _interopRequireDefault(require("../context_menus/GenericTextContextMenu"));

var _dec, _class, _class2, _temp;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const socials = [{
  name: 'Facebook',
  img: require("../../../../res/img/social/facebook.png"),
  url: url => `https://www.facebook.com/sharer/sharer.php?u=${url}`
}, {
  name: 'Twitter',
  img: require("../../../../res/img/social/twitter-2.png"),
  url: url => `https://twitter.com/home?status=${url}`
},
/* // icon missing
 name: 'Google Plus',
 img: 'img/social/',
 url: (url) => `https://plus.google.com/share?url=${url}`,
},*/
{
  name: 'LinkedIn',
  img: require("../../../../res/img/social/linkedin.png"),
  url: url => `https://www.linkedin.com/shareArticle?mini=true&url=${url}`
}, {
  name: 'Reddit',
  img: require("../../../../res/img/social/reddit.png"),
  url: url => `http://www.reddit.com/submit?url=${url}`
}, {
  name: 'email',
  img: require("../../../../res/img/social/email-1.png"),
  url: url => `mailto:?body=${url}`
}];
let ShareDialog = (_dec = (0, _replaceableComponent.replaceableComponent)("views.dialogs.ShareDialog"), _dec(_class = (_temp = _class2 = class ShareDialog extends React.PureComponent {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "closeCopiedTooltip", void 0);
    this.onCopyClick = this.onCopyClick.bind(this);
    this.onLinkSpecificEventCheckboxClick = this.onLinkSpecificEventCheckboxClick.bind(this);
    let permalinkCreator = null;

    if (props.target instanceof _room.Room) {
      permalinkCreator = new _Permalinks.RoomPermalinkCreator(props.target);
      permalinkCreator.load();
    }

    this.state = {
      // MatrixEvent defaults to share linkSpecificEvent
      linkSpecificEvent: this.props.target instanceof _event.MatrixEvent,
      permalinkCreator
    };
  }

  static onLinkClick(e) {
    e.preventDefault();
    (0, _strings.selectText)(e.target);
  }

  async onCopyClick(e) {
    e.preventDefault();
    const target = e.target; // copy target before we go async and React throws it away

    const successful = await (0, _strings.copyPlaintext)(this.getUrl());
    const buttonRect = target.getBoundingClientRect();
    const {
      close
    } = ContextMenu.createMenu(_GenericTextContextMenu.default, _objectSpread(_objectSpread({}, (0, ContextMenu.toRightOf)(buttonRect, 2)), {}, {
      message: successful ? (0, _languageHandler._t)('Copied!') : (0, _languageHandler._t)('Failed to copy')
    })); // Drop a reference to this close handler for componentWillUnmount

    this.closeCopiedTooltip = target.onmouseleave = close;
  }

  onLinkSpecificEventCheckboxClick() {
    this.setState({
      linkSpecificEvent: !this.state.linkSpecificEvent
    });
  }

  componentWillUnmount() {
    // if the Copied tooltip is open then get rid of it, there are ways to close the modal which wouldn't close
    // the tooltip otherwise, such as pressing Escape or clicking X really quickly
    if (this.closeCopiedTooltip) this.closeCopiedTooltip();
  }

  getUrl() {
    let matrixToUrl;

    if (this.props.target instanceof _room.Room) {
      if (this.state.linkSpecificEvent) {
        const events = this.props.target.getLiveTimeline().getEvents();
        matrixToUrl = this.state.permalinkCreator.forEvent(events[events.length - 1].getId());
      } else {
        matrixToUrl = this.state.permalinkCreator.forShareableRoom();
      }
    } else if (this.props.target instanceof _user.User || this.props.target instanceof _roomMember.RoomMember) {
      matrixToUrl = (0, _Permalinks.makeUserPermalink)(this.props.target.userId);
    } else if (this.props.target instanceof _group.Group) {
      matrixToUrl = (0, _Permalinks.makeGroupPermalink)(this.props.target.groupId);
    } else if (this.props.target instanceof _event.MatrixEvent) {
      if (this.state.linkSpecificEvent) {
        matrixToUrl = this.props.permalinkCreator.forEvent(this.props.target.getId());
      } else {
        matrixToUrl = this.props.permalinkCreator.forShareableRoom();
      }
    }

    return matrixToUrl;
  }

  render() {
    let title;
    let checkbox;

    if (this.props.target instanceof _room.Room) {
      title = (0, _languageHandler._t)('Share Room');
      const events = this.props.target.getLiveTimeline().getEvents();

      if (events.length > 0) {
        checkbox = /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(_StyledCheckbox.default, {
          checked: this.state.linkSpecificEvent,
          onChange: this.onLinkSpecificEventCheckboxClick
        }, (0, _languageHandler._t)('Link to most recent message')));
      }
    } else if (this.props.target instanceof _user.User || this.props.target instanceof _roomMember.RoomMember) {
      title = (0, _languageHandler._t)('Share User');
    } else if (this.props.target instanceof _group.Group) {
      title = (0, _languageHandler._t)('Share Community');
    } else if (this.props.target instanceof _event.MatrixEvent) {
      title = (0, _languageHandler._t)('Share Room Message');
      checkbox = /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(_StyledCheckbox.default, {
        checked: this.state.linkSpecificEvent,
        onClick: this.onLinkSpecificEventCheckboxClick
      }, (0, _languageHandler._t)('Link to selected message')));
    }

    const matrixToUrl = this.getUrl();
    const encodedUrl = encodeURIComponent(matrixToUrl);

    const showQrCode = _SettingsStore.default.getValue(_UIFeature.UIFeature.ShareQRCode);

    const showSocials = _SettingsStore.default.getValue(_UIFeature.UIFeature.ShareSocial);

    let qrSocialSection;

    if (showQrCode || showSocials) {
      qrSocialSection = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("hr", null), /*#__PURE__*/React.createElement("div", {
        className: "mx_ShareDialog_split"
      }, showQrCode && /*#__PURE__*/React.createElement("div", {
        className: "mx_ShareDialog_qrcode_container"
      }, /*#__PURE__*/React.createElement(_QRCode.default, {
        data: matrixToUrl,
        width: 256
      })), showSocials && /*#__PURE__*/React.createElement("div", {
        className: "mx_ShareDialog_social_container"
      }, socials.map(social => /*#__PURE__*/React.createElement("a", {
        rel: "noreferrer noopener",
        target: "_blank",
        key: social.name,
        title: social.name,
        href: social.url(encodedUrl),
        className: "mx_ShareDialog_social_icon"
      }, /*#__PURE__*/React.createElement("img", {
        src: social.img,
        alt: social.name,
        height: 64,
        width: 64
      }))))));
    }

    return /*#__PURE__*/React.createElement(_BaseDialog.default, {
      title: title,
      className: "mx_ShareDialog",
      contentId: "mx_Dialog_content",
      onFinished: this.props.onFinished
    }, /*#__PURE__*/React.createElement("div", {
      className: "mx_ShareDialog_content"
    }, /*#__PURE__*/React.createElement("div", {
      className: "mx_ShareDialog_matrixto"
    }, /*#__PURE__*/React.createElement("a", {
      href: matrixToUrl,
      onClick: ShareDialog.onLinkClick,
      className: "mx_ShareDialog_matrixto_link"
    }, matrixToUrl), /*#__PURE__*/React.createElement(_AccessibleTooltipButton.default, {
      title: (0, _languageHandler._t)("Copy"),
      onClick: this.onCopyClick,
      className: "mx_ShareDialog_matrixto_copy"
    })), checkbox, qrSocialSection));
  }

}, (0, _defineProperty2.default)(_class2, "propTypes", {
  onFinished: PropTypes.func.isRequired,
  target: PropTypes.oneOfType([PropTypes.instanceOf(_room.Room), PropTypes.instanceOf(_user.User), PropTypes.instanceOf(_group.Group), PropTypes.instanceOf(_roomMember.RoomMember), PropTypes.instanceOf(_event.MatrixEvent)]).isRequired
}), _temp)) || _class);
exports.default = ShareDialog;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,