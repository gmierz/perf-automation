"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.CreateEventField = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _partials = require("matrix-js-sdk/src/@types/partials");

var _event = require("matrix-js-sdk/src/@types/event");

var _languageHandler = require("../../../languageHandler");

var _BaseDialog = _interopRequireDefault(require("./BaseDialog"));

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

var _SpaceCreateMenu = require("../spaces/SpaceCreateMenu");

var _JoinRuleDropdown = _interopRequireDefault(require("../elements/JoinRuleDropdown"));

var _GroupStore = require("../../../stores/GroupStore");

var _Permalinks = require("../../../utils/permalinks/Permalinks");

var _useAsyncMemo = require("../../../hooks/useAsyncMemo");

var _Spinner = _interopRequireDefault(require("../elements/Spinner"));

var _Media = require("../../../customisations/Media");

var _SpaceStore = _interopRequireDefault(require("../../../stores/spaces/SpaceStore"));

var _Modal = _interopRequireDefault(require("../../../Modal"));

var _InfoDialog = _interopRequireDefault(require("./InfoDialog"));

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _actions = require("../../../dispatcher/actions");

var _UserSettingsDialog = require("./UserSettingsDialog");

var _TagOrderActions = _interopRequireDefault(require("../../../actions/TagOrderActions"));

var _RoomInvite = require("../../../RoomInvite");

var _ProgressBar = _interopRequireDefault(require("../elements/ProgressBar"));

var _logger = require("matrix-js-sdk/src/logger");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const CreateEventField = "io.element.migrated_from_community";
exports.CreateEventField = CreateEventField;

/* eslint-enable camelcase */
var Progress;

(function (Progress) {
  Progress[Progress["NotStarted"] = 0] = "NotStarted";
  Progress[Progress["ValidatingInputs"] = 1] = "ValidatingInputs";
  Progress[Progress["FetchingData"] = 2] = "FetchingData";
  Progress[Progress["CreatingSpace"] = 3] = "CreatingSpace";
  Progress[Progress["InvitingUsers"] = 4] = "InvitingUsers";
})(Progress || (Progress = {}));

const CreateSpaceFromCommunityDialog = ({
  matrixClient: cli,
  groupId,
  onFinished
}) => {
  const [loading, setLoading] = (0, _react.useState)(true);
  const [error, setError] = (0, _react.useState)(null);
  const [progress, setProgress] = (0, _react.useState)(Progress.NotStarted);
  const [numInvites, setNumInvites] = (0, _react.useState)(0);
  const busy = progress > 0;
  const [avatar, setAvatar] = (0, _react.useState)(null); // undefined means to remove avatar

  const [name, setName] = (0, _react.useState)("");
  const spaceNameField = (0, _react.useRef)();
  const [alias, setAlias] = (0, _react.useState)("#" + groupId.substring(1, groupId.indexOf(":")) + ":" + cli.getDomain());
  const spaceAliasField = (0, _react.useRef)();
  const [topic, setTopic] = (0, _react.useState)("");
  const [joinRule, setJoinRule] = (0, _react.useState)(_partials.JoinRule.Public);
  const groupSummary = (0, _useAsyncMemo.useAsyncMemo)(() => cli.getGroupSummary(groupId), [groupId]);
  (0, _react.useEffect)(() => {
    if (groupSummary) {
      setName(groupSummary.profile.name || "");
      setTopic(groupSummary.profile.short_description || "");
      setJoinRule(groupSummary.profile.is_openly_joinable ? _partials.JoinRule.Public : _partials.JoinRule.Invite);
      setLoading(false);
    }
  }, [groupSummary]);

  if (loading) {
    return /*#__PURE__*/_react.default.createElement(_Spinner.default, null);
  }

  const onCreateSpaceClick = async e => {
    e.preventDefault();
    if (busy) return;
    setError(null);
    setProgress(Progress.ValidatingInputs); // require & validate the space name field

    if (!(await spaceNameField.current.validate({
      allowEmpty: false
    }))) {
      setProgress(0);
      spaceNameField.current.focus();
      spaceNameField.current.validate({
        allowEmpty: false,
        focused: true
      });
      return;
    } // validate the space name alias field but do not require it


    if (joinRule === _partials.JoinRule.Public && !(await spaceAliasField.current.validate({
      allowEmpty: true
    }))) {
      setProgress(0);
      spaceAliasField.current.focus();
      spaceAliasField.current.validate({
        allowEmpty: true,
        focused: true
      });
      return;
    }

    try {
      setProgress(Progress.FetchingData);
      const [rooms, members, invitedMembers] = await Promise.all([cli.getGroupRooms(groupId).then(_GroupStore.parseRoomsResponse), cli.getGroupUsers(groupId).then(_GroupStore.parseMembersResponse), cli.getGroupInvitedUsers(groupId).then(_GroupStore.parseMembersResponse)]);
      setNumInvites(members.length + invitedMembers.length);
      const viaMap = new Map();

      for (const {
        roomId,
        canonicalAlias
      } of rooms) {
        var _viaMap$get;

        const room = cli.getRoom(roomId);

        if (room) {
          viaMap.set(roomId, (0, _Permalinks.calculateRoomVia)(room));
        } else if (canonicalAlias) {
          try {
            const {
              servers
            } = await cli.getRoomIdForAlias(canonicalAlias);
            viaMap.set(roomId, servers);
          } catch (e) {
            _logger.logger.warn("Failed to resolve alias during community migration", e);
          }
        }

        if (!((_viaMap$get = viaMap.get(roomId)) !== null && _viaMap$get !== void 0 && _viaMap$get.length)) {
          // XXX: lets guess the via, this might end up being incorrect.
          const str = canonicalAlias || roomId;
          viaMap.set(roomId, [str.substring(1, str.indexOf(":"))]);
        }
      }

      setProgress(Progress.CreatingSpace);
      const spaceAvatar = avatar !== undefined ? avatar : groupSummary.profile.avatar_url;
      const roomId = await (0, _SpaceCreateMenu.createSpace)(name, joinRule === _partials.JoinRule.Public, alias, topic, spaceAvatar, {
        creation_content: {
          [CreateEventField]: groupId
        },
        initial_state: rooms.map(({
          roomId
        }) => ({
          type: _event.EventType.SpaceChild,
          state_key: roomId,
          content: {
            via: viaMap.get(roomId) || []
          }
        })) // we do not specify the inviters here because Synapse applies a limit and this may cause it to trip

      }, {
        andView: false
      });
      setProgress(Progress.InvitingUsers);
      const userIds = [...members, ...invitedMembers].map(m => m.userId).filter(m => m !== cli.getUserId());
      await (0, _RoomInvite.inviteUsersToRoom)(roomId, userIds, () => setProgress(p => p + 1)); // eagerly remove it from the community panel

      _dispatcher.default.dispatch(_TagOrderActions.default.removeTag(cli, groupId)); // don't bother awaiting this, as we don't hugely care if it fails


      cli.setGroupProfile(groupId, _objectSpread(_objectSpread({}, groupSummary.profile), {}, {
        long_description: `<a href="${(0, _Permalinks.makeRoomPermalink)(roomId)}"><h1>` + (0, _languageHandler._t)("This community has been upgraded into a Space") + `</h1></a><br />` + groupSummary.profile.long_description
      })).catch(e => {
        _logger.logger.warn("Failed to update community profile during migration", e);
      });
      onFinished(roomId);

      const onSpaceClick = () => {
        _dispatcher.default.dispatch({
          action: "view_room",
          room_id: roomId
        });
      };

      const onPreferencesClick = () => {
        _dispatcher.default.dispatch({
          action: _actions.Action.ViewUserSettings,
          initialTabId: _UserSettingsDialog.UserTab.Preferences
        });
      };

      let spacesDisabledCopy;

      if (!_SpaceStore.default.spacesEnabled) {
        spacesDisabledCopy = (0, _languageHandler._t)("To view Spaces, hide communities in <a>Preferences</a>", {}, {
          a: sub => /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
            onClick: onPreferencesClick,
            kind: "link"
          }, sub)
        });
      }

      _Modal.default.createDialog(_InfoDialog.default, {
        title: (0, _languageHandler._t)("Space created"),
        description: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
          className: "mx_CreateSpaceFromCommunityDialog_SuccessInfoDialog_checkmark"
        }), /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("<SpaceName/> has been made and everyone who was a part of the community has " + "been invited to it.", {}, {
          SpaceName: () => /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
            onClick: onSpaceClick,
            kind: "link"
          }, name)
        }), "\xA0", spacesDisabledCopy), /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("To create a Space from another community, just pick the community in Preferences."))),
        button: (0, _languageHandler._t)("Preferences"),
        onFinished: openPreferences => {
          if (openPreferences) {
            onPreferencesClick();
          }
        }
      }, "mx_CreateSpaceFromCommunityDialog_SuccessInfoDialog");
    } catch (e) {
      _logger.logger.error(e);

      setError(e);
    }

    setProgress(Progress.NotStarted);
  };

  let footer;

  if (error) {
    footer = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("img", {
      src: require("../../../../res/img/element-icons/warning-badge.svg"),
      height: "24",
      width: "24",
      alt: ""
    }), /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_CreateSpaceFromCommunityDialog_error"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_CreateSpaceFromCommunityDialog_errorHeading"
    }, (0, _languageHandler._t)("Failed to migrate community")), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_CreateSpaceFromCommunityDialog_errorCaption"
    }, (0, _languageHandler._t)("Try again"))), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      className: "mx_CreateSpaceFromCommunityDialog_retryButton",
      onClick: onCreateSpaceClick
    }, (0, _languageHandler._t)("Retry")));
  } else if (busy) {
    let description;

    switch (progress) {
      case Progress.ValidatingInputs:
      case Progress.FetchingData:
        description = (0, _languageHandler._t)("Fetching data...");
        break;

      case Progress.CreatingSpace:
        description = (0, _languageHandler._t)("Creating Space...");
        break;

      case Progress.InvitingUsers:
      default:
        description = (0, _languageHandler._t)("Adding rooms... (%(progress)s out of %(count)s)", {
          count: numInvites,
          progress
        });
        break;
    }

    footer = /*#__PURE__*/_react.default.createElement("span", null, /*#__PURE__*/_react.default.createElement(_ProgressBar.default, {
      value: progress > Progress.FetchingData ? progress : 0,
      max: numInvites + Progress.InvitingUsers
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_CreateSpaceFromCommunityDialog_progressText"
    }, description));
  } else {
    footer = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      kind: "primary_outline",
      onClick: () => onFinished()
    }, (0, _languageHandler._t)("Cancel")), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      kind: "primary",
      onClick: onCreateSpaceClick
    }, (0, _languageHandler._t)("Create Space")));
  }

  return /*#__PURE__*/_react.default.createElement(_BaseDialog.default, {
    title: (0, _languageHandler._t)("Create Space from community"),
    className: "mx_CreateSpaceFromCommunityDialog",
    onFinished: onFinished,
    fixedWidth: false
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_CreateSpaceFromCommunityDialog_content"
  }, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("A link to the Space will be put in your community description."), "\xA0", (0, _languageHandler._t)("All rooms will be added and all community members will be invited.")), /*#__PURE__*/_react.default.createElement("p", {
    className: "mx_CreateSpaceFromCommunityDialog_flairNotice"
  }, (0, _languageHandler._t)("Flair won't be available in Spaces for the foreseeable future.")), /*#__PURE__*/_react.default.createElement(_SpaceCreateMenu.SpaceCreateForm, {
    busy: busy,
    onSubmit: onCreateSpaceClick,
    avatarUrl: groupSummary.profile.avatar_url ? (0, _Media.mediaFromMxc)(groupSummary.profile.avatar_url).getThumbnailOfSourceHttp(80, 80, "crop") : undefined,
    setAvatar: setAvatar,
    name: name,
    setName: setName,
    nameFieldRef: spaceNameField,
    topic: topic,
    setTopic: setTopic,
    alias: alias,
    setAlias: setAlias,
    showAliasField: joinRule === _partials.JoinRule.Public,
    aliasFieldRef: spaceAliasField
  }, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("This description will be shown to people when they view your space")), /*#__PURE__*/_react.default.createElement(_JoinRuleDropdown.default, {
    label: (0, _languageHandler._t)("Space visibility"),
    labelInvite: (0, _languageHandler._t)("Private space (invite only)"),
    labelPublic: (0, _languageHandler._t)("Public space"),
    value: joinRule,
    onChange: setJoinRule
  }), /*#__PURE__*/_react.default.createElement("p", null, joinRule === _partials.JoinRule.Public ? (0, _languageHandler._t)("Open space for anyone, best for communities") : (0, _languageHandler._t)("Invite only, best for yourself or teams")), joinRule !== _partials.JoinRule.Public && /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_CreateSpaceFromCommunityDialog_nonPublicSpacer"
  }))), /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_CreateSpaceFromCommunityDialog_footer"
  }, footer));
};

var _default = CreateSpaceFromCommunityDialog;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,