"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _QuestionDialog = _interopRequireDefault(require("./QuestionDialog"));

var _languageHandler = require("../../../languageHandler");

var _Field = _interopRequireDefault(require("../elements/Field"));

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

var _CountlyAnalytics = _interopRequireDefault(require("../../../CountlyAnalytics"));

var _SdkConfig = _interopRequireDefault(require("../../../SdkConfig"));

var _Modal = _interopRequireDefault(require("../../../Modal"));

var _BugReportDialog = _interopRequireDefault(require("./BugReportDialog"));

var _InfoDialog = _interopRequireDefault(require("./InfoDialog"));

var _StyledRadioGroup = _interopRequireDefault(require("../elements/StyledRadioGroup"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
Copyright 2018 New Vector Ltd

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const existingIssuesUrl = "https://github.com/vector-im/element-web/issues" + "?q=is%3Aopen+is%3Aissue+sort%3Areactions-%2B1-desc";
const newIssueUrl = "https://github.com/vector-im/element-web/issues/new/choose";

const FeedbackDialog = props => {
  const [rating, setRating] = (0, _react.useState)();
  const [comment, setComment] = (0, _react.useState)("");

  const onDebugLogsLinkClick = () => {
    props.onFinished();

    _Modal.default.createTrackedDialog('Bug Report Dialog', '', _BugReportDialog.default, {});
  };

  const hasFeedback = _CountlyAnalytics.default.instance.canEnable();

  const onFinished = sendFeedback => {
    if (hasFeedback && sendFeedback) {
      _CountlyAnalytics.default.instance.reportFeedback(rating, comment);

      _Modal.default.createTrackedDialog('Feedback sent', '', _InfoDialog.default, {
        title: (0, _languageHandler._t)('Feedback sent'),
        description: (0, _languageHandler._t)('Thank you!')
      });
    }

    props.onFinished();
  };

  const brand = _SdkConfig.default.get().brand;

  let countlyFeedbackSection;

  if (hasFeedback) {
    countlyFeedbackSection = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("hr", null), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_FeedbackDialog_section mx_FeedbackDialog_rateApp"
    }, /*#__PURE__*/_react.default.createElement("h3", null, (0, _languageHandler._t)("Rate %(brand)s", {
      brand
    })), /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Tell us below how you feel about %(brand)s so far.", {
      brand
    })), /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Please go into as much detail as you like, so we can track down the problem.")), /*#__PURE__*/_react.default.createElement(_StyledRadioGroup.default, {
      name: "feedbackRating",
      value: String(rating),
      onChange: r => setRating(parseInt(r, 10)),
      definitions: [{
        value: "1",
        label: "😠"
      }, {
        value: "2",
        label: "😞"
      }, {
        value: "3",
        label: "😑"
      }, {
        value: "4",
        label: "😄"
      }, {
        value: "5",
        label: "😍"
      }]
    }), /*#__PURE__*/_react.default.createElement(_Field.default, {
      id: "feedbackComment",
      label: (0, _languageHandler._t)("Add comment"),
      placeholder: (0, _languageHandler._t)("Comment"),
      type: "text",
      autoComplete: "off",
      value: comment,
      element: "textarea",
      onChange: ev => {
        setComment(ev.target.value);
      }
    })));
  }

  let subheading;

  if (hasFeedback) {
    subheading = /*#__PURE__*/_react.default.createElement("h2", null, (0, _languageHandler._t)("There are two ways you can provide feedback and help us improve %(brand)s.", {
      brand
    }));
  }

  let bugReports = null;

  if (_SdkConfig.default.get().bug_report_endpoint_url) {
    bugReports = /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("PRO TIP: If you start a bug, please submit <debugLogsLink>debug logs</debugLogsLink> " + "to help us track down the problem.", {}, {
      debugLogsLink: sub => /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        kind: "link",
        onClick: onDebugLogsLinkClick
      }, sub)
    }));
  }

  return /*#__PURE__*/_react.default.createElement(_QuestionDialog.default, {
    className: "mx_FeedbackDialog",
    hasCancelButton: !!hasFeedback,
    title: (0, _languageHandler._t)("Feedback"),
    description: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, subheading, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_FeedbackDialog_section mx_FeedbackDialog_reportBug"
    }, /*#__PURE__*/_react.default.createElement("h3", null, (0, _languageHandler._t)("Report a bug")), /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Please view <existingIssuesLink>existing bugs on Github</existingIssuesLink> first. " + "No match? <newIssueLink>Start a new one</newIssueLink>.", {}, {
      existingIssuesLink: sub => {
        return /*#__PURE__*/_react.default.createElement("a", {
          target: "_blank",
          rel: "noreferrer noopener",
          href: existingIssuesUrl
        }, sub);
      },
      newIssueLink: sub => {
        return /*#__PURE__*/_react.default.createElement("a", {
          target: "_blank",
          rel: "noreferrer noopener",
          href: newIssueUrl
        }, sub);
      }
    })), bugReports), countlyFeedbackSection),
    button: hasFeedback ? (0, _languageHandler._t)("Send feedback") : (0, _languageHandler._t)("Go back"),
    buttonDisabled: hasFeedback && !rating,
    onFinished: onFinished
  });
};

var _default = FeedbackDialog;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,