"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _BaseDialog = _interopRequireDefault(require("./BaseDialog"));

var _languageHandler = require("../../../languageHandler");

var _matrixWidgetApi = require("matrix-widget-api");

var _objects = require("../../../utils/objects");

var _StyledCheckbox = _interopRequireDefault(require("../elements/StyledCheckbox"));

var _DialogButtons = _interopRequireDefault(require("../elements/DialogButtons"));

var _LabelledToggleSwitch = _interopRequireDefault(require("../elements/LabelledToggleSwitch"));

var _CapabilityText = require("../../../widgets/CapabilityText");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _utils = require("matrix-js-sdk/src/utils");

var _dec, _class;

let WidgetCapabilitiesPromptDialog = (_dec = (0, _replaceableComponent.replaceableComponent)("views.dialogs.WidgetCapabilitiesPromptDialog"), _dec(_class = class WidgetCapabilitiesPromptDialog extends _react.default.PureComponent {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "eventPermissionsMap", new Map());
    (0, _defineProperty2.default)(this, "onToggle", capability => {
      const newStates = (0, _objects.objectShallowClone)(this.state.booleanStates);
      newStates[capability] = !newStates[capability];
      this.setState({
        booleanStates: newStates
      });
    });
    (0, _defineProperty2.default)(this, "onRememberSelectionChange", newVal => {
      this.setState({
        rememberSelection: newVal
      });
    });
    (0, _defineProperty2.default)(this, "onSubmit", async ev => {
      this.closeAndTryRemember(Object.entries(this.state.booleanStates).filter(([_, isSelected]) => isSelected).map(([cap]) => cap));
    });
    (0, _defineProperty2.default)(this, "onReject", async ev => {
      this.closeAndTryRemember([]); // nothing was approved
    });

    const parsedEvents = _matrixWidgetApi.WidgetEventCapability.findEventCapabilities(this.props.requestedCapabilities);

    parsedEvents.forEach(e => this.eventPermissionsMap.set(e.raw, e));
    const states = {};
    this.props.requestedCapabilities.forEach(c => states[c] = true);
    this.state = {
      booleanStates: states,
      rememberSelection: true
    };
  }

  closeAndTryRemember(approved) {
    this.props.onFinished({
      approved,
      remember: this.state.rememberSelection
    });
  }

  render() {
    // We specifically order the timeline capabilities down to the bottom. The capability text
    // generation cares strongly about this.
    const orderedCapabilities = Object.entries(this.state.booleanStates).sort(([capA], [capB]) => {
      const isTimelineA = (0, _matrixWidgetApi.isTimelineCapability)(capA);
      const isTimelineB = (0, _matrixWidgetApi.isTimelineCapability)(capB);
      if (!isTimelineA && !isTimelineB) return (0, _utils.lexicographicCompare)(capA, capB);
      if (isTimelineA && !isTimelineB) return 1;
      if (!isTimelineA && isTimelineB) return -1;
      if (isTimelineA && isTimelineB) return (0, _utils.lexicographicCompare)(capA, capB);
      return 0;
    });
    const checkboxRows = orderedCapabilities.map(([cap, isChecked], i) => {
      const text = _CapabilityText.CapabilityText.for(cap, this.props.widgetKind);

      const byline = text.byline ? /*#__PURE__*/_react.default.createElement("span", {
        className: "mx_WidgetCapabilitiesPromptDialog_byline"
      }, text.byline) : null;
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_WidgetCapabilitiesPromptDialog_cap",
        key: cap + i
      }, /*#__PURE__*/_react.default.createElement(_StyledCheckbox.default, {
        checked: isChecked,
        onChange: () => this.onToggle(cap)
      }, text.primary), byline);
    });
    return /*#__PURE__*/_react.default.createElement(_BaseDialog.default, {
      className: "mx_WidgetCapabilitiesPromptDialog",
      onFinished: this.props.onFinished,
      title: (0, _languageHandler._t)("Approve widget permissions")
    }, /*#__PURE__*/_react.default.createElement("form", {
      onSubmit: this.onSubmit
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_Dialog_content"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "text-muted"
    }, (0, _languageHandler._t)("This widget would like to:")), checkboxRows, /*#__PURE__*/_react.default.createElement(_DialogButtons.default, {
      primaryButton: (0, _languageHandler._t)("Approve"),
      cancelButton: (0, _languageHandler._t)("Decline All"),
      onPrimaryButtonClick: this.onSubmit,
      onCancel: this.onReject,
      additive: /*#__PURE__*/_react.default.createElement(_LabelledToggleSwitch.default, {
        value: this.state.rememberSelection,
        toggleInFront: true,
        onChange: this.onRememberSelectionChange,
        label: (0, _languageHandler._t)("Remember my selection for this widget")
      })
    }))));
  }

}) || _class);
exports.default = WidgetCapabilitiesPromptDialog;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL2RpYWxvZ3MvV2lkZ2V0Q2FwYWJpbGl0aWVzUHJvbXB0RGlhbG9nLnRzeCJdLCJuYW1lcyI6WyJXaWRnZXRDYXBhYmlsaXRpZXNQcm9tcHREaWFsb2ciLCJSZWFjdCIsIlB1cmVDb21wb25lbnQiLCJjb25zdHJ1Y3RvciIsInByb3BzIiwiTWFwIiwiY2FwYWJpbGl0eSIsIm5ld1N0YXRlcyIsInN0YXRlIiwiYm9vbGVhblN0YXRlcyIsInNldFN0YXRlIiwibmV3VmFsIiwicmVtZW1iZXJTZWxlY3Rpb24iLCJldiIsImNsb3NlQW5kVHJ5UmVtZW1iZXIiLCJPYmplY3QiLCJlbnRyaWVzIiwiZmlsdGVyIiwiXyIsImlzU2VsZWN0ZWQiLCJtYXAiLCJjYXAiLCJwYXJzZWRFdmVudHMiLCJXaWRnZXRFdmVudENhcGFiaWxpdHkiLCJmaW5kRXZlbnRDYXBhYmlsaXRpZXMiLCJyZXF1ZXN0ZWRDYXBhYmlsaXRpZXMiLCJmb3JFYWNoIiwiZSIsImV2ZW50UGVybWlzc2lvbnNNYXAiLCJzZXQiLCJyYXciLCJzdGF0ZXMiLCJjIiwiYXBwcm92ZWQiLCJvbkZpbmlzaGVkIiwicmVtZW1iZXIiLCJyZW5kZXIiLCJvcmRlcmVkQ2FwYWJpbGl0aWVzIiwic29ydCIsImNhcEEiLCJjYXBCIiwiaXNUaW1lbGluZUEiLCJpc1RpbWVsaW5lQiIsImNoZWNrYm94Um93cyIsImlzQ2hlY2tlZCIsImkiLCJ0ZXh0IiwiQ2FwYWJpbGl0eVRleHQiLCJmb3IiLCJ3aWRnZXRLaW5kIiwiYnlsaW5lIiwib25Ub2dnbGUiLCJwcmltYXJ5Iiwib25TdWJtaXQiLCJvblJlamVjdCIsIm9uUmVtZW1iZXJTZWxlY3Rpb25DaGFuZ2UiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBZ0JBOztBQUNBOztBQUNBOztBQUVBOztBQU9BOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOzs7O0lBbUJxQkEsOEIsV0FEcEIsZ0RB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QUFHLFNBQUgsQ0FEbkI7QUFFSSxNQUFBLFlBQVksRUFBRSx5QkFBRyxhQUFILENBRmxCO0FBR0ksTUFBQSxvQkFBb0IsRUFBRSxLQUFLVSxRQUgvQjtBQUlJLE1BQUEsUUFBUSxFQUFFLEtBQUtDLFFBSm5CO0FBS0ksTUFBQSxRQUFRLGVBQ0osNkJBQUMsNkJBQUQ7QUFDSSxRQUFBLEtBQUssRUFBRSxLQUFLOUMsS0FBTCxDQUFXSSxpQkFEdEI7QUFFSSxRQUFBLGFBQWEsRUFBRSxJQUZuQjtBQUdJLFFBQUEsUUFBUSxFQUFFLEtBQUsyQyx5QkFIbkI7QUFJSSxRQUFBLEtBQUssRUFBRSx5QkFBRyx1Q0FBSDtBQUpYO0FBTlIsTUFISixDQURKLENBTEosQ0FESjtBQTBCSDs7QUFuRzJGLEMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuQ29weXJpZ2h0IDIwMjAgLSAyMDIxIFRoZSBNYXRyaXgub3JnIEZvdW5kYXRpb24gQy5JLkMuXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBCYXNlRGlhbG9nIGZyb20gXCIuL0Jhc2VEaWFsb2dcIjtcbmltcG9ydCB7IF90IH0gZnJvbSBcIi4uLy4uLy4uL2xhbmd1YWdlSGFuZGxlclwiO1xuaW1wb3J0IHsgSURpYWxvZ1Byb3BzIH0gZnJvbSBcIi4vSURpYWxvZ1Byb3BzXCI7XG5pbXBvcnQge1xuICAgIENhcGFiaWxpdHksXG4gICAgaXNUaW1lbGluZUNhcGFiaWxpdHksXG4gICAgV2lkZ2V0LFxuICAgIFdpZGdldEV2ZW50Q2FwYWJpbGl0eSxcbiAgICBXaWRnZXRLaW5kLFxufSBmcm9tIFwibWF0cml4LXdpZGdldC1hcGlcIjtcbmltcG9ydCB7IG9iamVjdFNoYWxsb3dDbG9uZSB9IGZyb20gXCIuLi8uLi8uLi91dGlscy9vYmplY3RzXCI7XG5pbXBvcnQgU3R5bGVkQ2hlY2tib3ggZnJvbSBcIi4uL2VsZW1lbnRzL1N0eWxlZENoZWNrYm94XCI7XG5pbXBvcnQgRGlhbG9nQnV0dG9ucyBmcm9tIFwiLi4vZWxlbWVudHMvRGlhbG9nQnV0dG9uc1wiO1xuaW1wb3J0IExhYmVsbGVkVG9nZ2xlU3dpdGNoIGZyb20gXCIuLi9lbGVtZW50cy9MYWJlbGxlZFRvZ2dsZVN3aXRjaFwiO1xuaW1wb3J0IHsgQ2FwYWJpbGl0eVRleHQgfSBmcm9tIFwiLi4vLi4vLi4vd2lkZ2V0cy9DYXBhYmlsaXR5VGV4dFwiO1xuaW1wb3J0IHsgcmVwbGFjZWFibGVDb21wb25lbnQgfSBmcm9tIFwiLi4vLi4vLi4vdXRpbHMvcmVwbGFjZWFibGVDb21wb25lbnRcIjtcbmltcG9ydCB7IGxleGljb2dyYXBoaWNDb21wYXJlIH0gZnJvbSBcIm1hdHJpeC1qcy1zZGsvc3JjL3V0aWxzXCI7XG5cbmludGVyZmFjZSBJUHJvcHMgZXh0ZW5kcyBJRGlhbG9nUHJvcHMge1xuICAgIHJlcXVlc3RlZENhcGFiaWxpdGllczogU2V0PENhcGFiaWxpdHk+O1xuICAgIHdpZGdldDogV2lkZ2V0O1xuICAgIHdpZGdldEtpbmQ6IFdpZGdldEtpbmQ7IC8vIFRPRE86IFJlZmFjdG9yIGludG8gdGhlIFdpZGdldCBjbGFzc1xufVxuXG5pbnRlcmZhY2UgSUJvb2xlYW5TdGF0ZXMge1xuICAgIC8vIEB0cy1pZ25vcmUgLSBUUyB3YW50cyBhIHN0cmluZyBrZXksIGJ1dCB3ZSBrbm93IGJldHRlclxuICAgIFtjYXBhYmlsaXR5OiBDYXBhYmlsaXR5XTogYm9vbGVhbjtcbn1cblxuaW50ZXJmYWNlIElTdGF0ZSB7XG4gICAgYm9vbGVhblN0YXRlczogSUJvb2xlYW5TdGF0ZXM7XG4gICAgcmVtZW1iZXJTZWxlY3Rpb246IGJvb2xlYW47XG59XG5cbkByZXBsYWNlYWJsZUNvbXBvbmVudChcInZpZXdzLmRpYWxvZ3MuV2lkZ2V0Q2FwYWJpbGl0aWVzUHJvbXB0RGlhbG9nXCIpXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBXaWRnZXRDYXBhYmlsaXRpZXNQcm9tcHREaWFsb2cgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50PElQcm9wcywgSVN0YXRlPiB7XG4gICAgcHJpdmF0ZSBldmVudFBlcm1pc3Npb25zTWFwID0gbmV3IE1hcDxDYXBhYmlsaXR5LCBXaWRnZXRFdmVudENhcGFiaWxpdHk+KCk7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm9wczogSVByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcblxuICAgICAgICBjb25zdCBwYXJzZWRFdmVudHMgPSBXaWRnZXRFdmVudENhcGFiaWxpdHkuZmluZEV2ZW50Q2FwYWJpbGl0aWVzKHRoaXMucHJvcHMucmVxdWVzdGVkQ2FwYWJpbGl0aWVzKTtcbiAgICAgICAgcGFyc2VkRXZlbnRzLmZvckVhY2goZSA9PiB0aGlzLmV2ZW50UGVybWlzc2lvbnNNYXAuc2V0KGUucmF3LCBlKSk7XG5cbiAgICAgICAgY29uc3Qgc3RhdGVzOiBJQm9vbGVhblN0YXRlcyA9IHt9O1xuICAgICAgICB0aGlzLnByb3BzLnJlcXVlc3RlZENhcGFiaWxpdGllcy5mb3JFYWNoKGMgPT4gc3RhdGVzW2NdID0gdHJ1ZSk7XG5cbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIGJvb2xlYW5TdGF0ZXM6IHN0YXRlcyxcbiAgICAgICAgICAgIHJlbWVtYmVyU2VsZWN0aW9uOiB0cnVlLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHByaXZhdGUgb25Ub2dnbGUgPSAoY2FwYWJpbGl0eTogQ2FwYWJpbGl0eSkgPT4ge1xuICAgICAgICBjb25zdCBuZXdTdGF0ZXMgPSBvYmplY3RTaGFsbG93Q2xvbmUodGhpcy5zdGF0ZS5ib29sZWFuU3RhdGVzKTtcbiAgICAgICAgbmV3U3RhdGVzW2NhcGFiaWxpdHldID0gIW5ld1N0YXRlc1tjYXBhYmlsaXR5XTtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGJvb2xlYW5TdGF0ZXM6IG5ld1N0YXRlcyB9KTtcbiAgICB9O1xuXG4gICAgcHJpdmF0ZSBvblJlbWVtYmVyU2VsZWN0aW9uQ2hhbmdlID0gKG5ld1ZhbDogYm9vbGVhbikgPT4ge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHsgcmVtZW1iZXJTZWxlY3Rpb246IG5ld1ZhbCB9KTtcbiAgICB9O1xuXG4gICAgcHJpdmF0ZSBvblN1Ym1pdCA9IGFzeW5jIChldikgPT4ge1xuICAgICAgICB0aGlzLmNsb3NlQW5kVHJ5UmVtZW1iZXIoT2JqZWN0LmVudHJpZXModGhpcy5zdGF0ZS5ib29sZWFuU3RhdGVzKVxuICAgICAgICAgICAgLmZpbHRlcigoW18sIGlzU2VsZWN0ZWRdKSA9PiBpc1NlbGVjdGVkKVxuICAgICAgICAgICAgLm1hcCgoW2NhcF0pID0+IGNhcCkpO1xuICAgIH07XG5cbiAgICBwcml2YXRlIG9uUmVqZWN0ID0gYXN5bmMgKGV2KSA9PiB7XG4gICAgICAgIHRoaXMuY2xvc2VBbmRUcnlSZW1lbWJlcihbXSk7IC8vIG5vdGhpbmcgd2FzIGFwcHJvdmVkXG4gICAgfTtcblxuICAgIHByaXZhdGUgY2xvc2VBbmRUcnlSZW1lbWJlcihhcHByb3ZlZDogQ2FwYWJpbGl0eVtdKSB7XG4gICAgICAgIHRoaXMucHJvcHMub25GaW5pc2hlZCh7IGFwcHJvdmVkLCByZW1lbWJlcjogdGhpcy5zdGF0ZS5yZW1lbWJlclNlbGVjdGlvbiB9KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcmVuZGVyKCkge1xuICAgICAgICAvLyBXZSBzcGVjaWZpY2FsbHkgb3JkZXIgdGhlIHRpbWVsaW5lIGNhcGFiaWxpdGllcyBkb3duIHRvIHRoZSBib3R0b20uIFRoZSBjYXBhYmlsaXR5IHRleHRcbiAgICAgICAgLy8gZ2VuZXJhdGlvbiBjYXJlcyBzdHJvbmdseSBhYm91dCB0aGlzLlxuICAgICAgICBjb25zdCBvcmRlcmVkQ2FwYWJpbGl0aWVzID0gT2JqZWN0LmVudHJpZXModGhpcy5zdGF0ZS5ib29sZWFuU3RhdGVzKS5zb3J0KChbY2FwQV0sIFtjYXBCXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgaXNUaW1lbGluZUEgPSBpc1RpbWVsaW5lQ2FwYWJpbGl0eShjYXBBKTtcbiAgICAgICAgICAgIGNvbnN0IGlzVGltZWxpbmVCID0gaXNUaW1lbGluZUNhcGFiaWxpdHkoY2FwQik7XG5cbiAgICAgICAgICAgIGlmICghaXNUaW1lbGluZUEgJiYgIWlzVGltZWxpbmVCKSByZXR1cm4gbGV4aWNvZ3JhcGhpY0NvbXBhcmUoY2FwQSwgY2FwQik7XG4gICAgICAgICAgICBpZiAoaXNUaW1lbGluZUEgJiYgIWlzVGltZWxpbmVCKSByZXR1cm4gMTtcbiAgICAgICAgICAgIGlmICghaXNUaW1lbGluZUEgJiYgaXNUaW1lbGluZUIpIHJldHVybiAtMTtcbiAgICAgICAgICAgIGlmIChpc1RpbWVsaW5lQSAmJiBpc1RpbWVsaW5lQikgcmV0dXJuIGxleGljb2dyYXBoaWNDb21wYXJlKGNhcEEsIGNhcEIpO1xuXG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGNoZWNrYm94Um93cyA9IG9yZGVyZWRDYXBhYmlsaXRpZXMubWFwKChbY2FwLCBpc0NoZWNrZWRdLCBpKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB0ZXh0ID0gQ2FwYWJpbGl0eVRleHQuZm9yKGNhcCwgdGhpcy5wcm9wcy53aWRnZXRLaW5kKTtcbiAgICAgICAgICAgIGNvbnN0IGJ5bGluZSA9IHRleHQuYnlsaW5lXG4gICAgICAgICAgICAgICAgPyA8c3BhbiBjbGFzc05hbWU9XCJteF9XaWRnZXRDYXBhYmlsaXRpZXNQcm9tcHREaWFsb2dfYnlsaW5lXCI+eyB0ZXh0LmJ5bGluZSB9PC9zcGFuPlxuICAgICAgICAgICAgICAgIDogbnVsbDtcblxuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm14X1dpZGdldENhcGFiaWxpdGllc1Byb21wdERpYWxvZ19jYXBcIiBrZXk9e2NhcCArIGl9PlxuICAgICAgICAgICAgICAgICAgICA8U3R5bGVkQ2hlY2tib3hcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrZWQ9e2lzQ2hlY2tlZH1cbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXsoKSA9PiB0aGlzLm9uVG9nZ2xlKGNhcCl9XG4gICAgICAgICAgICAgICAgICAgID57IHRleHQucHJpbWFyeSB9PC9TdHlsZWRDaGVja2JveD5cbiAgICAgICAgICAgICAgICAgICAgeyBieWxpbmUgfVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxCYXNlRGlhbG9nXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwibXhfV2lkZ2V0Q2FwYWJpbGl0aWVzUHJvbXB0RGlhbG9nXCJcbiAgICAgICAgICAgICAgICBvbkZpbmlzaGVkPXt0aGlzLnByb3BzLm9uRmluaXNoZWR9XG4gICAgICAgICAgICAgICAgdGl0bGU9e190KFwiQXBwcm92ZSB3aWRnZXQgcGVybWlzc2lvbnNcIil9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPGZvcm0gb25TdWJtaXQ9e3RoaXMub25TdWJtaXR9PlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm14X0RpYWxvZ19jb250ZW50XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRleHQtbXV0ZWRcIj57IF90KFwiVGhpcyB3aWRnZXQgd291bGQgbGlrZSB0bzpcIikgfTwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgeyBjaGVja2JveFJvd3MgfVxuICAgICAgICAgICAgICAgICAgICAgICAgPERpYWxvZ0J1dHRvbnNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmltYXJ5QnV0dG9uPXtfdChcIkFwcHJvdmVcIil9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FuY2VsQnV0dG9uPXtfdChcIkRlY2xpbmUgQWxsXCIpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uUHJpbWFyeUJ1dHRvbkNsaWNrPXt0aGlzLm9uU3VibWl0fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2FuY2VsPXt0aGlzLm9uUmVqZWN0fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZGl0aXZlPXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPExhYmVsbGVkVG9nZ2xlU3dpdGNoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS5yZW1lbWJlclNlbGVjdGlvbn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvZ2dsZUluRnJvbnQ9e3RydWV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5vblJlbWVtYmVyU2VsZWN0aW9uQ2hhbmdlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw9e190KFwiUmVtZW1iZXIgbXkgc2VsZWN0aW9uIGZvciB0aGlzIHdpZGdldFwiKX0gLz59XG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Zvcm0+XG4gICAgICAgICAgICA8L0Jhc2VEaWFsb2c+XG4gICAgICAgICk7XG4gICAgfVxufVxuIl19