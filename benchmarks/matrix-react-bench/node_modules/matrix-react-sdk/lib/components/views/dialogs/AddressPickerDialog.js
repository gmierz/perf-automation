"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _utils = require("matrix-js-sdk/src/utils");

var _languageHandler = require("../../../languageHandler");

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _UserAddress = require("../../../UserAddress");

var _GroupStore = _interopRequireDefault(require("../../../stores/GroupStore"));

var Email = _interopRequireWildcard(require("../../../email"));

var _IdentityAuthClient = _interopRequireDefault(require("../../../IdentityAuthClient"));

var _IdentityServerUtils = require("../../../utils/IdentityServerUtils");

var _UrlUtils = require("../../../utils/UrlUtils");

var _Keyboard = require("../../../Keyboard");

var _actions = require("../../../dispatcher/actions");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _AddressSelector = _interopRequireDefault(require("../elements/AddressSelector"));

var _AddressTile = _interopRequireDefault(require("../elements/AddressTile"));

var _BaseDialog = _interopRequireDefault(require("./BaseDialog"));

var _DialogButtons = _interopRequireDefault(require("../elements/DialogButtons"));

var _logger = require("matrix-js-sdk/src/logger");

var _dec, _class, _class2, _temp;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const TRUNCATE_QUERY_LIST = 40;
const QUERY_USER_DIRECTORY_DEBOUNCE_MS = 200;
const addressTypeName = {
  'mx-user-id': (0, _languageHandler._td)("Matrix ID"),
  'mx-room-id': (0, _languageHandler._td)("Matrix Room ID"),
  'email': (0, _languageHandler._td)("email address")
};
let AddressPickerDialog = (_dec = (0, _replaceableComponent.replaceableComponent)("views.dialogs.AddressPickerDialog"), _dec(_class = (_temp = _class2 = class AddressPickerDialog extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "textinput", /*#__PURE__*/(0, _react.createRef)());
    (0, _defineProperty2.default)(this, "addressSelector", /*#__PURE__*/(0, _react.createRef)());
    (0, _defineProperty2.default)(this, "queryChangedDebouncer", void 0);
    (0, _defineProperty2.default)(this, "cancelThreepidLookup", void 0);
    (0, _defineProperty2.default)(this, "onButtonClick", () => {
      let selectedList = this.state.selectedList.slice(); // Check the text input field to see if user has an unconverted address
      // If there is and it's valid add it to the local selectedList

      if (this.textinput.current.value !== '') {
        selectedList = this.addAddressesToList([this.textinput.current.value]);
        if (selectedList === null) return;
      }

      this.props.onFinished(true, selectedList);
    });
    (0, _defineProperty2.default)(this, "onCancel", () => {
      this.props.onFinished(false);
    });
    (0, _defineProperty2.default)(this, "onKeyDown", e => {
      const textInput = this.textinput.current ? this.textinput.current.value : undefined;

      if (e.key === _Keyboard.Key.ESCAPE) {
        e.stopPropagation();
        e.preventDefault();
        this.props.onFinished(false);
      } else if (e.key === _Keyboard.Key.ARROW_UP) {
        e.stopPropagation();
        e.preventDefault();
        if (this.addressSelector.current) this.addressSelector.current.moveSelectionUp();
      } else if (e.key === _Keyboard.Key.ARROW_DOWN) {
        e.stopPropagation();
        e.preventDefault();
        if (this.addressSelector.current) this.addressSelector.current.moveSelectionDown();
      } else if (this.state.suggestedList.length > 0 && [_Keyboard.Key.COMMA, _Keyboard.Key.ENTER, _Keyboard.Key.TAB].includes(e.key)) {
        e.stopPropagation();
        e.preventDefault();
        if (this.addressSelector.current) this.addressSelector.current.chooseSelection();
      } else if (textInput.length === 0 && this.state.selectedList.length && e.key === _Keyboard.Key.BACKSPACE) {
        e.stopPropagation();
        e.preventDefault();
        this.onDismissed(this.state.selectedList.length - 1)();
      } else if (e.key === _Keyboard.Key.ENTER) {
        e.stopPropagation();
        e.preventDefault();

        if (textInput === '') {
          // if there's nothing in the input box, submit the form
          this.onButtonClick();
        } else {
          this.addAddressesToList([textInput]);
        }
      } else if (textInput && (e.key === _Keyboard.Key.COMMA || e.key === _Keyboard.Key.TAB)) {
        e.stopPropagation();
        e.preventDefault();
        this.addAddressesToList([textInput]);
      }
    });
    (0, _defineProperty2.default)(this, "onQueryChanged", ev => {
      const query = ev.target.value;

      if (this.queryChangedDebouncer) {
        clearTimeout(this.queryChangedDebouncer);
      } // Only do search if there is something to search


      if (query.length > 0 && query !== '@' && query.length >= 2) {
        this.queryChangedDebouncer = setTimeout(() => {
          if (this.props.pickerType === 'user') {
            if (this.props.groupId) {
              this.doNaiveGroupSearch(query);
            } else if (this.state.serverSupportsUserDirectory) {
              this.doUserDirectorySearch(query);
            } else {
              this.doLocalSearch(query);
            }
          } else if (this.props.pickerType === 'room') {
            if (this.props.groupId) {
              this.doNaiveGroupRoomSearch(query);
            } else {
              this.doRoomSearch(query);
            }
          } else {
            _logger.logger.error('Unknown pickerType', this.props.pickerType);
          }
        }, QUERY_USER_DIRECTORY_DEBOUNCE_MS);
      } else {
        this.setState({
          suggestedList: [],
          query: "",
          searchError: null
        });
      }
    });
    (0, _defineProperty2.default)(this, "onDismissed", index => () => {
      const selectedList = this.state.selectedList.slice();
      selectedList.splice(index, 1);
      this.setState({
        selectedList,
        suggestedList: [],
        query: ""
      });
      if (this.cancelThreepidLookup) this.cancelThreepidLookup();
    });
    (0, _defineProperty2.default)(this, "onSelected", index => {
      const selectedList = this.state.selectedList.slice();
      selectedList.push(this.getFilteredSuggestions()[index]);
      this.setState({
        selectedList,
        suggestedList: [],
        query: ""
      });
      if (this.cancelThreepidLookup) this.cancelThreepidLookup();
    });
    (0, _defineProperty2.default)(this, "onPaste", e => {
      // Prevent the text being pasted into the textarea
      e.preventDefault();
      const text = e.clipboardData.getData("text"); // Process it as a list of addresses to add instead

      this.addAddressesToList(text.split(/[\s,]+/));
    });
    (0, _defineProperty2.default)(this, "onUseDefaultIdentityServerClick", e => {
      e.preventDefault(); // Update the IS in account data. Actually using it may trigger terms.
      // eslint-disable-next-line react-hooks/rules-of-hooks

      (0, _IdentityServerUtils.useDefaultIdentityServer)(); // Add email as a valid address type.

      const {
        validAddressTypes
      } = this.state;
      validAddressTypes.push(_UserAddress.AddressType.Email);
      this.setState({
        validAddressTypes
      });
    });
    (0, _defineProperty2.default)(this, "onManageSettingsClick", e => {
      e.preventDefault();

      _dispatcher.default.fire(_actions.Action.ViewUserSettings);

      this.onCancel();
    });
    let _validAddressTypes = this.props.validAddressTypes; // Remove email from validAddressTypes if no IS is configured. It may be added at a later stage by the user

    if (!_MatrixClientPeg.MatrixClientPeg.get().getIdentityServerUrl() && _validAddressTypes.includes(_UserAddress.AddressType.Email)) {
      _validAddressTypes = _validAddressTypes.filter(type => type !== _UserAddress.AddressType.Email);
    }

    this.state = {
      invalidAddressError: false,
      selectedList: [],
      busy: false,
      searchError: null,
      serverSupportsUserDirectory: true,
      query: "",
      suggestedList: [],
      validAddressTypes: _validAddressTypes
    };
  }

  componentDidMount() {
    if (this.props.focus) {
      // Set the cursor at the end of the text input
      this.textinput.current.value = this.props.value;
    }
  }

  getPlaceholder() {
    const {
      placeholder
    } = this.props;

    if (typeof placeholder === "string") {
      return placeholder;
    } // Otherwise it's a function, as checked by prop types.


    return placeholder(this.state.validAddressTypes);
  }

  doNaiveGroupSearch(query) {
    const lowerCaseQuery = query.toLowerCase();
    this.setState({
      busy: true,
      query,
      searchError: null
    });

    _MatrixClientPeg.MatrixClientPeg.get().getGroupUsers(this.props.groupId).then(resp => {
      const results = [];
      resp.chunk.forEach(u => {
        const userIdMatch = u.user_id.toLowerCase().includes(lowerCaseQuery);
        const displayNameMatch = (u.displayname || '').toLowerCase().includes(lowerCaseQuery);

        if (!(userIdMatch || displayNameMatch)) {
          return;
        }

        results.push({
          user_id: u.user_id,
          avatar_url: u.avatar_url,
          display_name: u.displayname
        });
      });
      this.processResults(results, query);
    }).catch(err => {
      _logger.logger.error('Error whilst searching group rooms: ', err);

      this.setState({
        searchError: err.errcode ? err.message : (0, _languageHandler._t)('Something went wrong!')
      });
    }).then(() => {
      this.setState({
        busy: false
      });
    });
  }

  doNaiveGroupRoomSearch(query) {
    const lowerCaseQuery = query.toLowerCase();
    const results = [];

    _GroupStore.default.getGroupRooms(this.props.groupId).forEach(r => {
      const nameMatch = (r.name || '').toLowerCase().includes(lowerCaseQuery);
      const topicMatch = (r.topic || '').toLowerCase().includes(lowerCaseQuery);
      const aliasMatch = (r.canonical_alias || '').toLowerCase().includes(lowerCaseQuery);

      if (!(nameMatch || topicMatch || aliasMatch)) {
        return;
      }

      results.push({
        room_id: r.room_id,
        avatar_url: r.avatar_url,
        name: r.name || r.canonical_alias
      });
    });

    this.processResults(results, query);
    this.setState({
      busy: false
    });
  }

  doRoomSearch(query) {
    const lowerCaseQuery = query.toLowerCase();

    const rooms = _MatrixClientPeg.MatrixClientPeg.get().getRooms();

    const results = [];
    rooms.forEach(room => {
      let rank = Infinity;
      const nameEvent = room.currentState.getStateEvents('m.room.name', '');
      const name = nameEvent ? nameEvent.getContent().name : '';
      const canonicalAlias = room.getCanonicalAlias();
      const aliasEvents = room.currentState.getStateEvents('m.room.aliases');
      const aliases = aliasEvents.map(ev => ev.getContent().aliases).reduce((a, b) => {
        return a.concat(b);
      }, []);
      const nameMatch = (name || '').toLowerCase().includes(lowerCaseQuery);
      let aliasMatch = false;
      let shortestMatchingAliasLength = Infinity;
      aliases.forEach(alias => {
        if ((alias || '').toLowerCase().includes(lowerCaseQuery)) {
          aliasMatch = true;

          if (shortestMatchingAliasLength > alias.length) {
            shortestMatchingAliasLength = alias.length;
          }
        }
      });

      if (!(nameMatch || aliasMatch)) {
        return;
      }

      if (aliasMatch) {
        // A shorter matching alias will give a better rank
        rank = shortestMatchingAliasLength;
      }

      const avatarEvent = room.currentState.getStateEvents('m.room.avatar', '');
      const avatarUrl = avatarEvent ? avatarEvent.getContent().url : undefined;
      results.push({
        rank,
        room_id: room.roomId,
        avatar_url: avatarUrl,
        name: name || canonicalAlias || aliases[0] || (0, _languageHandler._t)('Unnamed Room')
      });
    }); // Sort by rank ascending (a high rank being less relevant)

    const sortedResults = results.sort((a, b) => {
      return a.rank - b.rank;
    });
    this.processResults(sortedResults, query);
    this.setState({
      busy: false
    });
  }

  doUserDirectorySearch(query) {
    this.setState({
      busy: true,
      query,
      searchError: null
    });

    _MatrixClientPeg.MatrixClientPeg.get().searchUserDirectory({
      term: query
    }).then(resp => {
      // The query might have changed since we sent the request, so ignore
      // responses for anything other than the latest query.
      if (this.state.query !== query) {
        return;
      }

      this.processResults(resp.results, query);
    }).catch(err => {
      _logger.logger.error('Error whilst searching user directory: ', err);

      this.setState({
        searchError: err.errcode ? err.message : (0, _languageHandler._t)('Something went wrong!')
      });

      if (err.errcode === 'M_UNRECOGNIZED') {
        this.setState({
          serverSupportsUserDirectory: false
        }); // Do a local search immediately

        this.doLocalSearch(query);
      }
    }).then(() => {
      this.setState({
        busy: false
      });
    });
  }

  doLocalSearch(query) {
    this.setState({
      query,
      searchError: null
    });
    const queryLowercase = query.toLowerCase();
    const results = [];

    _MatrixClientPeg.MatrixClientPeg.get().getUsers().forEach(user => {
      if (user.userId.toLowerCase().indexOf(queryLowercase) === -1 && user.displayName.toLowerCase().indexOf(queryLowercase) === -1) {
        return;
      } // Put results in the format of the new API


      results.push({
        user_id: user.userId,
        display_name: user.displayName,
        avatar_url: user.avatarUrl
      });
    });

    this.processResults(results, query);
  }

  processResults(results, query) {
    const suggestedList = [];
    results.forEach(result => {
      if (result.room_id) {
        const client = _MatrixClientPeg.MatrixClientPeg.get();

        const room = client.getRoom(result.room_id);

        if (room) {
          const tombstone = room.currentState.getStateEvents('m.room.tombstone', '');

          if (tombstone && tombstone.getContent() && tombstone.getContent()["replacement_room"]) {
            const replacementRoom = client.getRoom(tombstone.getContent()["replacement_room"]); // Skip rooms with tombstones where we are also aware of the replacement room.

            if (replacementRoom) return;
          }
        }

        suggestedList.push({
          addressType: 'mx-room-id',
          address: result.room_id,
          displayName: result.name,
          avatarMxc: result.avatar_url,
          isKnown: true
        });
        return;
      }

      if (!this.props.includeSelf && result.user_id === _MatrixClientPeg.MatrixClientPeg.get().credentials.userId) {
        return;
      } // Return objects, structure of which is defined
      // by UserAddressType


      suggestedList.push({
        addressType: 'mx-user-id',
        address: result.user_id,
        displayName: result.display_name,
        avatarMxc: result.avatar_url,
        isKnown: true
      });
    }); // If the query is a valid address, add an entry for that
    // This is important, otherwise there's no way to invite
    // a perfectly valid address if there are close matches.

    const addrType = (0, _UserAddress.getAddressType)(query);

    if (this.state.validAddressTypes.includes(addrType)) {
      if (addrType === 'email' && !Email.looksValid(query)) {
        this.setState({
          searchError: (0, _languageHandler._t)("That doesn't look like a valid email address")
        });
        return;
      }

      suggestedList.unshift({
        addressType: addrType,
        address: query,
        isKnown: false
      });
      if (this.cancelThreepidLookup) this.cancelThreepidLookup();

      if (addrType === 'email') {
        this.lookupThreepid(addrType, query);
      }
    }

    this.setState({
      suggestedList,
      invalidAddressError: false
    }, () => {
      if (this.addressSelector.current) this.addressSelector.current.moveSelectionTop();
    });
  }

  addAddressesToList(addressTexts) {
    const selectedList = this.state.selectedList.slice();
    let hasError = false;
    addressTexts.forEach(addressText => {
      addressText = addressText.trim();
      const addrType = (0, _UserAddress.getAddressType)(addressText);
      const addrObj = {
        addressType: addrType,
        address: addressText,
        isKnown: false
      };

      if (!this.state.validAddressTypes.includes(addrType)) {
        hasError = true;
      } else if (addrType === 'mx-user-id') {
        const user = _MatrixClientPeg.MatrixClientPeg.get().getUser(addrObj.address);

        if (user) {
          addrObj.displayName = user.displayName;
          addrObj.avatarMxc = user.avatarUrl;
          addrObj.isKnown = true;
        }
      } else if (addrType === 'mx-room-id') {
        const room = _MatrixClientPeg.MatrixClientPeg.get().getRoom(addrObj.address);

        if (room) {
          addrObj.displayName = room.name;
          addrObj.isKnown = true;
        }
      }

      selectedList.push(addrObj);
    });
    this.setState({
      selectedList,
      suggestedList: [],
      query: "",
      invalidAddressError: hasError ? true : this.state.invalidAddressError
    });
    if (this.cancelThreepidLookup) this.cancelThreepidLookup();
    return hasError ? null : selectedList;
  }

  async lookupThreepid(medium, address) {
    let cancelled = false; // Note that we can't safely remove this after we're done
    // because we don't know that it's the same one, so we just
    // leave it: it's replacing the old one each time so it's
    // not like they leak.

    this.cancelThreepidLookup = function () {
      cancelled = true;
    }; // wait a bit to let the user finish typing


    await (0, _utils.sleep)(500);
    if (cancelled) return null;

    try {
      const authClient = new _IdentityAuthClient.default();
      const identityAccessToken = await authClient.getAccessToken();
      if (cancelled) return null;
      const lookup = await _MatrixClientPeg.MatrixClientPeg.get().lookupThreePid(medium, address, undefined
      /* callback */
      , identityAccessToken);
      if (cancelled || lookup === null || !lookup.mxid) return null;
      const profile = await _MatrixClientPeg.MatrixClientPeg.get().getProfileInfo(lookup.mxid);
      if (cancelled || profile === null) return null;
      this.setState({
        suggestedList: [{
          // a UserAddressType
          addressType: medium,
          address: address,
          displayName: profile.displayname,
          avatarMxc: profile.avatar_url,
          isKnown: true
        }]
      });
    } catch (e) {
      _logger.logger.error(e);

      this.setState({
        searchError: (0, _languageHandler._t)('Something went wrong!')
      });
    }
  }

  getFilteredSuggestions() {
    // map addressType => set of addresses to avoid O(n*m) operation
    const selectedAddresses = {};
    this.state.selectedList.forEach(({
      address,
      addressType
    }) => {
      if (!selectedAddresses[addressType]) selectedAddresses[addressType] = new Set();
      selectedAddresses[addressType].add(address);
    }); // Filter out any addresses in the above already selected addresses (matching both type and address)

    return this.state.suggestedList.filter(({
      address,
      addressType
    }) => {
      return !(selectedAddresses[addressType] && selectedAddresses[addressType].has(address));
    });
  }

  render() {
    let inputLabel;

    if (this.props.description) {
      inputLabel = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_AddressPickerDialog_label"
      }, /*#__PURE__*/_react.default.createElement("label", {
        htmlFor: "textinput"
      }, this.props.description));
    }

    const query = []; // create the invite list

    if (this.state.selectedList.length > 0) {
      for (let i = 0; i < this.state.selectedList.length; i++) {
        query.push( /*#__PURE__*/_react.default.createElement(_AddressTile.default, {
          key: i,
          address: this.state.selectedList[i],
          canDismiss: true,
          onDismissed: this.onDismissed(i),
          showAddress: this.props.pickerType === 'user'
        }));
      }
    } // Add the query at the end


    query.push( /*#__PURE__*/_react.default.createElement("textarea", {
      key: this.state.selectedList.length,
      onPaste: this.onPaste,
      rows: 1,
      id: "textinput",
      ref: this.textinput,
      className: "mx_AddressPickerDialog_input",
      onChange: this.onQueryChanged,
      placeholder: this.getPlaceholder(),
      defaultValue: this.props.value,
      autoFocus: this.props.focus
    }));
    const filteredSuggestedList = this.getFilteredSuggestions();
    let error;
    let addressSelector;

    if (this.state.invalidAddressError) {
      const validTypeDescriptions = this.state.validAddressTypes.map(t => (0, _languageHandler._t)(addressTypeName[t]));
      error = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_AddressPickerDialog_error"
      }, (0, _languageHandler._t)("You have entered an invalid address."), /*#__PURE__*/_react.default.createElement("br", null), (0, _languageHandler._t)("Try using one of the following valid address types: %(validTypesList)s.", {
        validTypesList: validTypeDescriptions.join(", ")
      }));
    } else if (this.state.searchError) {
      error = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_AddressPickerDialog_error"
      }, this.state.searchError);
    } else if (this.state.query.length > 0 && filteredSuggestedList.length === 0 && !this.state.busy) {
      error = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_AddressPickerDialog_error"
      }, (0, _languageHandler._t)("No results"));
    } else {
      addressSelector = /*#__PURE__*/_react.default.createElement(_AddressSelector.default, {
        ref: this.addressSelector,
        addressList: filteredSuggestedList,
        showAddress: this.props.pickerType === 'user',
        onSelected: this.onSelected,
        truncateAt: TRUNCATE_QUERY_LIST
      });
    }

    let identityServer; // If picker cannot currently accept e-mail but should be able to

    if (this.props.pickerType === 'user' && !this.state.validAddressTypes.includes(_UserAddress.AddressType.Email) && this.props.validAddressTypes.includes(_UserAddress.AddressType.Email)) {
      const defaultIdentityServerUrl = (0, _IdentityServerUtils.getDefaultIdentityServerUrl)();

      if (defaultIdentityServerUrl) {
        identityServer = /*#__PURE__*/_react.default.createElement("div", {
          className: "mx_AddressPickerDialog_identityServer"
        }, (0, _languageHandler._t)("Use an identity server to invite by email. " + "<default>Use the default (%(defaultIdentityServerName)s)</default> " + "or manage in <settings>Settings</settings>.", {
          defaultIdentityServerName: (0, _UrlUtils.abbreviateUrl)(defaultIdentityServerUrl)
        }, {
          default: sub => /*#__PURE__*/_react.default.createElement("a", {
            href: "#",
            onClick: this.onUseDefaultIdentityServerClick
          }, sub),
          settings: sub => /*#__PURE__*/_react.default.createElement("a", {
            href: "#",
            onClick: this.onManageSettingsClick
          }, sub)
        }));
      } else {
        identityServer = /*#__PURE__*/_react.default.createElement("div", {
          className: "mx_AddressPickerDialog_identityServer"
        }, (0, _languageHandler._t)("Use an identity server to invite by email. " + "Manage in <settings>Settings</settings>.", {}, {
          settings: sub => /*#__PURE__*/_react.default.createElement("a", {
            href: "#",
            onClick: this.onManageSettingsClick
          }, sub)
        }));
      }
    }

    return /*#__PURE__*/_react.default.createElement(_BaseDialog.default, {
      className: "mx_AddressPickerDialog",
      onKeyDown: this.onKeyDown,
      onFinished: this.props.onFinished,
      title: this.props.title
    }, inputLabel, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_Dialog_content"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_AddressPickerDialog_inputContainer"
    }, query), error, addressSelector, this.props.extraNode, identityServer), /*#__PURE__*/_react.default.createElement(_DialogButtons.default, {
      primaryButton: this.props.button,
      onPrimaryButtonClick: this.onButtonClick,
      onCancel: this.onCancel
    }));
  }

}, (0, _defineProperty2.default)(_class2, "defaultProps", {
  value: "",
  focus: true,
  validAddressTypes: _UserAddress.addressTypes,
  pickerType: 'user',
  includeSelf: false
}), _temp)) || _class);
exports.default = AddressPickerDialog;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,