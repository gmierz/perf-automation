"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _languageHandler = require("../../../languageHandler");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _Media = require("../../../customisations/Media");

var _MemberAvatar = _interopRequireDefault(require("../avatars/MemberAvatar"));

var _BaseAvatar = _interopRequireDefault(require("../avatars/BaseAvatar"));

var _BaseDialog = _interopRequireDefault(require("./BaseDialog"));

var _DialogButtons = _interopRequireDefault(require("../elements/DialogButtons"));

var _Field = _interopRequireDefault(require("../elements/Field"));

var _dec, _class, _class2, _temp;

let ConfirmUserActionDialog = (
/*
 * A dialog for confirming an operation on another user.
 * Takes a user ID and a verb, displays the target user prominently
 * such that it should be easy to confirm that the operation is being
 * performed on the right person, and displays the operation prominently
 * to make it obvious what is going to happen.
 * Also tweaks the style for 'dangerous' actions (albeit only with colour)
 */
_dec = (0, _replaceableComponent.replaceableComponent)("views.dialogs.ConfirmUserActionDialog"), _dec(_class = (_temp = _class2 = class ConfirmUserActionDialog extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "onOk", ev => {
      ev.preventDefault();
      this.props.onFinished(true, this.state.reason);
    });
    (0, _defineProperty2.default)(this, "onCancel", () => {
      this.props.onFinished(false);
    });
    (0, _defineProperty2.default)(this, "onReasonChange", ev => {
      this.setState({
        reason: ev.target.value
      });
    });
    this.state = {
      reason: ""
    };
  }

  render() {
    const confirmButtonClass = this.props.danger ? 'danger' : '';
    let reasonBox;

    if (this.props.askReason) {
      reasonBox = /*#__PURE__*/_react.default.createElement("form", {
        onSubmit: this.onOk
      }, /*#__PURE__*/_react.default.createElement(_Field.default, {
        type: "text",
        onChange: this.onReasonChange,
        value: this.state.reason,
        className: "mx_ConfirmUserActionDialog_reasonField",
        label: (0, _languageHandler._t)("Reason"),
        autoFocus: true
      }));
    }

    let avatar;
    let name;
    let userId;

    if (this.props.member) {
      avatar = /*#__PURE__*/_react.default.createElement(_MemberAvatar.default, {
        member: this.props.member,
        width: 48,
        height: 48
      });
      name = this.props.member.name;
      userId = this.props.member.userId;
    } else {
      const httpAvatarUrl = this.props.groupMember.avatarUrl ? (0, _Media.mediaFromMxc)(this.props.groupMember.avatarUrl).getSquareThumbnailHttp(48) : null;
      name = this.props.groupMember.displayname || this.props.groupMember.userId;
      userId = this.props.groupMember.userId;
      avatar = /*#__PURE__*/_react.default.createElement(_BaseAvatar.default, {
        name: name,
        url: httpAvatarUrl,
        width: 48,
        height: 48
      });
    }

    return /*#__PURE__*/_react.default.createElement(_BaseDialog.default, {
      className: (0, _classnames.default)("mx_ConfirmUserActionDialog", this.props.className),
      onFinished: this.props.onFinished,
      title: this.props.title,
      contentId: "mx_Dialog_content"
    }, /*#__PURE__*/_react.default.createElement("div", {
      id: "mx_Dialog_content",
      className: "mx_Dialog_content"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_ConfirmUserActionDialog_user"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_ConfirmUserActionDialog_avatar"
    }, avatar), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_ConfirmUserActionDialog_name"
    }, name), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_ConfirmUserActionDialog_userId"
    }, userId)), reasonBox, this.props.children), /*#__PURE__*/_react.default.createElement(_DialogButtons.default, {
      primaryButton: this.props.action,
      onPrimaryButtonClick: this.onOk,
      primaryButtonClass: confirmButtonClass,
      focus: !this.props.askReason,
      onCancel: this.onCancel
    }));
  }

}, (0, _defineProperty2.default)(_class2, "defaultProps", {
  danger: false,
  askReason: false
}), _temp)) || _class);
exports.default = ConfirmUserActionDialog;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,