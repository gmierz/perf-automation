"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _languageHandler = require("../../../languageHandler");

var _DateUtils = require("../../../DateUtils");

var _SettingsStore = _interopRequireDefault(require("../../../settings/SettingsStore"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _BaseDialog = _interopRequireDefault(require("./BaseDialog"));

var _ScrollPanel = _interopRequireDefault(require("../../structures/ScrollPanel"));

var _Spinner = _interopRequireDefault(require("../elements/Spinner"));

var _EditHistoryMessage = _interopRequireDefault(require("../messages/EditHistoryMessage"));

var _DateSeparator = _interopRequireDefault(require("../messages/DateSeparator"));

var _event = require("matrix-js-sdk/src/@types/event");

var _utils = require("matrix-js-sdk/src/utils");

var _logger = require("matrix-js-sdk/src/logger");

var _dec, _class;

let MessageEditHistoryDialog = (_dec = (0, _replaceableComponent.replaceableComponent)("views.dialogs.MessageEditHistoryDialog"), _dec(_class = class MessageEditHistoryDialog extends _react.default.PureComponent {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "loadMoreEdits", async backwards => {
      if (backwards || !this.state.nextBatch && !this.state.isLoading) {
        // bail out on backwards as we only paginate in one direction
        return false;
      }

      const opts = {
        from: this.state.nextBatch
      };
      const roomId = this.props.mxEvent.getRoomId();
      const eventId = this.props.mxEvent.getId();

      const client = _MatrixClientPeg.MatrixClientPeg.get();

      const {
        resolve,
        reject,
        promise
      } = (0, _utils.defer)();
      let result;

      try {
        result = await client.relations(roomId, eventId, _event.RelationType.Replace, _event.EventType.RoomMessage, opts);
      } catch (error) {
        // log if the server returned an error
        if (error.errcode) {
          _logger.logger.error("fetching /relations failed with error", error);
        }

        this.setState({
          error
        }, () => reject(error));
        return promise;
      }

      const newEvents = result.events;
      this.locallyRedactEventsIfNeeded(newEvents);
      this.setState({
        originalEvent: this.state.originalEvent || result.originalEvent,
        events: this.state.events.concat(newEvents),
        nextBatch: result.nextBatch,
        isLoading: false
      }, () => {
        const hasMoreResults = !!this.state.nextBatch;
        resolve(hasMoreResults);
      });
      return promise;
    });
    this.state = {
      originalEvent: null,
      error: null,
      events: [],
      nextBatch: null,
      isLoading: true,
      isTwelveHour: _SettingsStore.default.getValue("showTwelveHourTimestamps")
    };
  }

  locallyRedactEventsIfNeeded(newEvents) {
    const roomId = this.props.mxEvent.getRoomId();

    const client = _MatrixClientPeg.MatrixClientPeg.get();

    const room = client.getRoom(roomId);
    const pendingEvents = room.getPendingEvents();

    for (const e of newEvents) {
      const pendingRedaction = pendingEvents.find(pe => {
        return pe.getType() === "m.room.redaction" && pe.getAssociatedId() === e.getId();
      });

      if (pendingRedaction) {
        e.markLocallyRedacted(pendingRedaction);
      }
    }
  }

  componentDidMount() {
    this.loadMoreEdits();
  }

  renderEdits() {
    const nodes = [];
    let lastEvent;
    let allEvents = this.state.events; // append original event when we've done last pagination

    if (this.state.originalEvent && !this.state.nextBatch) {
      allEvents = allEvents.concat(this.state.originalEvent);
    }

    const baseEventId = this.props.mxEvent.getId();
    allEvents.forEach((e, i) => {
      if (!lastEvent || (0, _DateUtils.wantsDateSeparator)(lastEvent.getDate(), e.getDate())) {
        nodes.push( /*#__PURE__*/_react.default.createElement("li", {
          key: e.getTs() + "~"
        }, /*#__PURE__*/_react.default.createElement(_DateSeparator.default, {
          ts: e.getTs()
        })));
      }

      const isBaseEvent = e.getId() === baseEventId;
      nodes.push( /*#__PURE__*/_react.default.createElement(_EditHistoryMessage.default, {
        key: e.getId(),
        previousEdit: !isBaseEvent ? allEvents[i + 1] : null,
        isBaseEvent: isBaseEvent,
        mxEvent: e,
        isTwelveHour: this.state.isTwelveHour
      }));
      lastEvent = e;
    });
    return nodes;
  }

  render() {
    let content;

    if (this.state.error) {
      const {
        error
      } = this.state;

      if (error.errcode === "M_UNRECOGNIZED") {
        content = /*#__PURE__*/_react.default.createElement("p", {
          className: "mx_MessageEditHistoryDialog_error"
        }, (0, _languageHandler._t)("Your homeserver doesn't seem to support this feature."));
      } else if (error.errcode) {
        // some kind of error from the homeserver
        content = /*#__PURE__*/_react.default.createElement("p", {
          className: "mx_MessageEditHistoryDialog_error"
        }, (0, _languageHandler._t)("Something went wrong!"));
      } else {
        content = /*#__PURE__*/_react.default.createElement("p", {
          className: "mx_MessageEditHistoryDialog_error"
        }, (0, _languageHandler._t)("Cannot reach homeserver"), /*#__PURE__*/_react.default.createElement("br", null), (0, _languageHandler._t)("Ensure you have a stable internet connection, or get in touch with the server admin"));
      }
    } else if (this.state.isLoading) {
      content = /*#__PURE__*/_react.default.createElement(_Spinner.default, null);
    } else {
      content = /*#__PURE__*/_react.default.createElement(_ScrollPanel.default, {
        className: "mx_MessageEditHistoryDialog_scrollPanel",
        onFillRequest: this.loadMoreEdits,
        stickyBottom: false,
        startAtBottom: false
      }, /*#__PURE__*/_react.default.createElement("ul", {
        className: "mx_MessageEditHistoryDialog_edits"
      }, this.renderEdits()));
    }

    return /*#__PURE__*/_react.default.createElement(_BaseDialog.default, {
      className: "mx_MessageEditHistoryDialog",
      hasCancel: true,
      onFinished: this.props.onFinished,
      title: (0, _languageHandler._t)("Message edits")
    }, content);
  }

}) || _class);
exports.default = MessageEditHistoryDialog;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,