"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _languageHandler = require("../../../languageHandler");

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _BaseDialog = _interopRequireDefault(require("./BaseDialog"));

var _Spinner = _interopRequireDefault(require("../elements/Spinner"));

var _dec, _class;

let CreateGroupDialog = (_dec = (0, _replaceableComponent.replaceableComponent)("views.dialogs.CreateGroupDialog"), _dec(_class = class CreateGroupDialog extends _react.default.Component {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "state", {
      groupName: '',
      groupId: '',
      groupIdError: '',
      creating: false,
      createError: null
    });
    (0, _defineProperty2.default)(this, "onGroupNameChange", e => {
      this.setState({
        groupName: e.currentTarget.value
      });
    });
    (0, _defineProperty2.default)(this, "onGroupIdChange", e => {
      this.setState({
        groupId: e.currentTarget.value
      });
    });
    (0, _defineProperty2.default)(this, "onGroupIdBlur", () => {
      this.checkGroupId();
    });
    (0, _defineProperty2.default)(this, "onFormSubmit", e => {
      e.preventDefault();
      if (this.checkGroupId()) return;
      const profile = {};

      if (this.state.groupName !== '') {
        profile.name = this.state.groupName;
      }

      this.setState({
        creating: true
      });

      _MatrixClientPeg.MatrixClientPeg.get().createGroup({
        localpart: this.state.groupId,
        profile: profile
      }).then(result => {
        _dispatcher.default.dispatch({
          action: 'view_group',
          group_id: result.group_id,
          group_is_new: true
        });

        this.props.onFinished(true);
      }).catch(e => {
        this.setState({
          createError: e
        });
      }).finally(() => {
        this.setState({
          creating: false
        });
      });
    });
    (0, _defineProperty2.default)(this, "onCancel", () => {
      this.props.onFinished(false);
    });
  }

  checkGroupId() {
    let error = null;

    if (!this.state.groupId) {
      error = (0, _languageHandler._t)("Community IDs cannot be empty.");
    } else if (!/^[a-z0-9=_\-./]*$/.test(this.state.groupId)) {
      error = (0, _languageHandler._t)("Community IDs may only contain characters a-z, 0-9, or '=_-./'");
    }

    this.setState({
      groupIdError: error,
      // Reset createError to get rid of now stale error message
      createError: null
    });
    return error;
  }

  render() {
    if (this.state.creating) {
      return /*#__PURE__*/_react.default.createElement(_Spinner.default, null);
    }

    let createErrorNode;

    if (this.state.createError) {
      // XXX: We should catch errcodes and give sensible i18ned messages for them,
      // rather than displaying what the server gives us, but synapse doesn't give
      // any yet.
      createErrorNode = /*#__PURE__*/_react.default.createElement("div", {
        className: "error",
        role: "alert"
      }, /*#__PURE__*/_react.default.createElement("div", null, (0, _languageHandler._t)('Something went wrong whilst creating your community')), /*#__PURE__*/_react.default.createElement("div", null, this.state.createError.message));
    }

    return /*#__PURE__*/_react.default.createElement(_BaseDialog.default, {
      className: "mx_CreateGroupDialog",
      onFinished: this.props.onFinished,
      title: (0, _languageHandler._t)('Create Community')
    }, /*#__PURE__*/_react.default.createElement("form", {
      onSubmit: this.onFormSubmit
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_Dialog_content"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_CreateGroupDialog_inputRow"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_CreateGroupDialog_label"
    }, /*#__PURE__*/_react.default.createElement("label", {
      htmlFor: "groupname"
    }, (0, _languageHandler._t)('Community Name'))), /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("input", {
      id: "groupname",
      className: "mx_CreateGroupDialog_input",
      autoFocus: true,
      size: 64,
      placeholder: (0, _languageHandler._t)('Example'),
      onChange: this.onGroupNameChange,
      value: this.state.groupName
    }))), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_CreateGroupDialog_inputRow"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_CreateGroupDialog_label"
    }, /*#__PURE__*/_react.default.createElement("label", {
      htmlFor: "groupid"
    }, (0, _languageHandler._t)('Community ID'))), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_CreateGroupDialog_input_group"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_CreateGroupDialog_prefix"
    }, "+"), /*#__PURE__*/_react.default.createElement("input", {
      id: "groupid",
      className: "mx_CreateGroupDialog_input mx_CreateGroupDialog_input_hasPrefixAndSuffix",
      size: 32,
      placeholder: (0, _languageHandler._t)('example'),
      onChange: this.onGroupIdChange,
      onBlur: this.onGroupIdBlur,
      value: this.state.groupId
    }), /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_CreateGroupDialog_suffix"
    }, ":", _MatrixClientPeg.MatrixClientPeg.get().getDomain()))), /*#__PURE__*/_react.default.createElement("div", {
      className: "error"
    }, this.state.groupIdError), createErrorNode), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_Dialog_buttons"
    }, /*#__PURE__*/_react.default.createElement("input", {
      type: "submit",
      value: (0, _languageHandler._t)('Create'),
      className: "mx_Dialog_primary"
    }), /*#__PURE__*/_react.default.createElement("button", {
      onClick: this.onCancel
    }, (0, _languageHandler._t)("Cancel")))));
  }

}) || _class);
exports.default = CreateGroupDialog;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,