"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _Analytics = _interopRequireDefault(require("../../../Analytics"));

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var Lifecycle = _interopRequireWildcard(require("../../../Lifecycle"));

var _languageHandler = require("../../../languageHandler");

var _InteractiveAuth = _interopRequireWildcard(require("../../structures/InteractiveAuth"));

var _InteractiveAuthEntryComponents = require("../auth/InteractiveAuthEntryComponents");

var _StyledCheckbox = _interopRequireDefault(require("../elements/StyledCheckbox"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _BaseDialog = _interopRequireDefault(require("./BaseDialog"));

var _logger = require("matrix-js-sdk/src/logger");

var _dec, _class;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

let DeactivateAccountDialog = (_dec = (0, _replaceableComponent.replaceableComponent)("views.dialogs.DeactivateAccountDialog"), _dec(_class = class DeactivateAccountDialog extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "onStagePhaseChange", (stage, phase) => {
      const dialogAesthetics = {
        [_InteractiveAuthEntryComponents.SSOAuthEntry.PHASE_PREAUTH]: {
          body: (0, _languageHandler._t)("Confirm your account deactivation by using Single Sign On to prove your identity."),
          continueText: (0, _languageHandler._t)("Single Sign On"),
          continueKind: "danger"
        },
        [_InteractiveAuthEntryComponents.SSOAuthEntry.PHASE_POSTAUTH]: {
          body: (0, _languageHandler._t)("Are you sure you want to deactivate your account? This is irreversible."),
          continueText: (0, _languageHandler._t)("Confirm account deactivation"),
          continueKind: "danger"
        }
      }; // This is the same as aestheticsForStagePhases in InteractiveAuthDialog minus the `title`

      const DEACTIVATE_AESTHETICS = {
        [_InteractiveAuthEntryComponents.SSOAuthEntry.LOGIN_TYPE]: dialogAesthetics,
        [_InteractiveAuthEntryComponents.SSOAuthEntry.UNSTABLE_LOGIN_TYPE]: dialogAesthetics,
        [_InteractiveAuthEntryComponents.PasswordAuthEntry.LOGIN_TYPE]: {
          [_InteractiveAuthEntryComponents.DEFAULT_PHASE]: {
            body: (0, _languageHandler._t)("To continue, please enter your password:")
          }
        }
      };
      const aesthetics = DEACTIVATE_AESTHETICS[stage];
      let bodyText = null;
      let continueText = null;
      let continueKind = null;

      if (aesthetics) {
        const phaseAesthetics = aesthetics[phase];
        if (phaseAesthetics && phaseAesthetics.body) bodyText = phaseAesthetics.body;
        if (phaseAesthetics && phaseAesthetics.continueText) continueText = phaseAesthetics.continueText;
        if (phaseAesthetics && phaseAesthetics.continueKind) continueKind = phaseAesthetics.continueKind;
      }

      this.setState({
        bodyText,
        continueText,
        continueKind
      });
    });
    (0, _defineProperty2.default)(this, "onUIAuthFinished", (success, result) => {
      if (success) return; // great! makeRequest() will be called too.

      if (result === _InteractiveAuth.ERROR_USER_CANCELLED) {
        this.onCancel();
        return;
      }

      _logger.logger.error("Error during UI Auth:", {
        result
      });

      this.setState({
        errStr: (0, _languageHandler._t)("There was a problem communicating with the server. Please try again.")
      });
    });
    (0, _defineProperty2.default)(this, "onUIAuthComplete", auth => {
      // XXX: this should be returning a promise to maintain the state inside the state machine correct
      // but given that a deactivation is followed by a local logout and all object instances being thrown away
      // this isn't done.
      _MatrixClientPeg.MatrixClientPeg.get().deactivateAccount(auth, this.state.shouldErase).then(r => {
        // Deactivation worked - logout & close this dialog
        _Analytics.default.trackEvent('Account', 'Deactivate Account');

        Lifecycle.onLoggedOut();
        this.props.onFinished(true);
      }).catch(e => {
        _logger.logger.error(e);

        this.setState({
          errStr: (0, _languageHandler._t)("There was a problem communicating with the server. Please try again.")
        });
      });
    });
    (0, _defineProperty2.default)(this, "onEraseFieldChange", ev => {
      this.setState({
        shouldErase: ev.currentTarget.checked,
        // Disable the auth form because we're going to have to reinitialize the auth
        // information. We do this because we can't modify the parameters in the UIA
        // session, and the user will have selected something which changes the request.
        // Therefore, we throw away the last auth session and try a new one.
        authEnabled: false
      }); // As mentioned above, set up for auth again to get updated UIA session info

      this.initAuth(
      /* shouldErase= */
      ev.currentTarget.checked);
    });
    this.state = {
      shouldErase: false,
      errStr: null,
      authData: null,
      // for UIA
      authEnabled: true,
      // see usages for information
      // A few strings that are passed to InteractiveAuth for design or are displayed
      // next to the InteractiveAuth component.
      bodyText: null,
      continueText: null,
      continueKind: null
    };
    this.initAuth(
    /* shouldErase= */
    false);
  }

  onCancel() {
    this.props.onFinished(false);
  }

  initAuth(shouldErase) {
    _MatrixClientPeg.MatrixClientPeg.get().deactivateAccount(null, shouldErase).then(r => {
      // If we got here, oops. The server didn't require any auth.
      // Our application lifecycle will catch the error and do the logout bits.
      // We'll try to log something in an vain attempt to record what happened (storage
      // is also obliterated on logout).
      _logger.logger.warn("User's account got deactivated without confirmation: Server had no auth");

      this.setState({
        errStr: (0, _languageHandler._t)("Server did not require any authentication")
      });
    }).catch(e => {
      if (e && e.httpStatus === 401 && e.data) {
        // Valid UIA response
        this.setState({
          authData: e.data,
          authEnabled: true
        });
      } else {
        this.setState({
          errStr: (0, _languageHandler._t)("Server did not return valid authentication information.")
        });
      }
    });
  }

  render() {
    let error = null;

    if (this.state.errStr) {
      error = /*#__PURE__*/_react.default.createElement("div", {
        className: "error"
      }, this.state.errStr);
    }

    let auth = /*#__PURE__*/_react.default.createElement("div", null, (0, _languageHandler._t)("Loading..."));

    if (this.state.authData && this.state.authEnabled) {
      auth = /*#__PURE__*/_react.default.createElement("div", null, this.state.bodyText, /*#__PURE__*/_react.default.createElement(_InteractiveAuth.default, {
        matrixClient: _MatrixClientPeg.MatrixClientPeg.get(),
        authData: this.state.authData // XXX: onUIAuthComplete breaches the expected method contract, it gets away with it because it
        // knows the entire app is about to die as a result of the account deactivation.
        ,
        makeRequest: this.onUIAuthComplete,
        onAuthFinished: this.onUIAuthFinished,
        onStagePhaseChange: this.onStagePhaseChange,
        continueText: this.state.continueText,
        continueKind: this.state.continueKind
      }));
    } // this is on purpose not a <form /> to prevent Enter triggering submission, to further prevent accidents


    return /*#__PURE__*/_react.default.createElement(_BaseDialog.default, {
      className: "mx_DeactivateAccountDialog",
      onFinished: this.props.onFinished,
      titleClass: "danger",
      title: (0, _languageHandler._t)("Deactivate Account")
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_Dialog_content"
    }, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("This will make your account permanently unusable. " + "You will not be able to log in, and no one will be able to re-register the same " + "user ID. " + "This will cause your account to leave all rooms it is participating in, and it " + "will remove your account details from your identity server. " + "<b>This action is irreversible.</b>", {}, {
      b: sub => /*#__PURE__*/_react.default.createElement("b", null, " ", sub, " ")
    })), /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Deactivating your account <b>does not by default cause us to forget messages you " + "have sent.</b> " + "If you would like us to forget your messages, please tick the box below.", {}, {
      b: sub => /*#__PURE__*/_react.default.createElement("b", null, " ", sub, " ")
    })), /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Message visibility in Matrix is similar to email. " + "Our forgetting your messages means that messages you have sent will not be shared " + "with any new or unregistered users, but registered users who already have access " + "to these messages will still have access to their copy.")), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_DeactivateAccountDialog_input_section"
    }, /*#__PURE__*/_react.default.createElement("p", null, /*#__PURE__*/_react.default.createElement(_StyledCheckbox.default, {
      checked: this.state.shouldErase,
      onChange: this.onEraseFieldChange
    }, (0, _languageHandler._t)("Please forget all messages I have sent when my account is deactivated " + "(<b>Warning:</b> this will cause future users to see an incomplete view " + "of conversations)", {}, {
      b: sub => /*#__PURE__*/_react.default.createElement("b", null, sub)
    }))), error, auth)));
  }

}) || _class);
exports.default = DeactivateAccountDialog;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,