"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _Modal = _interopRequireDefault(require("../../../Modal"));

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _languageHandler = require("../../../languageHandler");

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _RestoreKeyBackupDialog = _interopRequireDefault(require("./security/RestoreKeyBackupDialog"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _logger = require("matrix-js-sdk/src/logger");

var _QuestionDialog = _interopRequireDefault(require("./QuestionDialog"));

var _BaseDialog = _interopRequireDefault(require("./BaseDialog"));

var _Spinner = _interopRequireDefault(require("../elements/Spinner"));

var _DialogButtons = _interopRequireDefault(require("../elements/DialogButtons"));

var _dec, _class, _class2, _temp;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

let LogoutDialog = (_dec = (0, _replaceableComponent.replaceableComponent)("views.dialogs.LogoutDialog"), _dec(_class = (_temp = _class2 = class LogoutDialog extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "onSettingsLinkClick", () => {
      // close dialog
      this.props.onFinished(true);
    });
    (0, _defineProperty2.default)(this, "onExportE2eKeysClicked", () => {
      _Modal.default.createTrackedDialogAsync('Export E2E Keys', '', Promise.resolve().then(() => _interopRequireWildcard(require('../../../async-components/views/dialogs/security/ExportE2eKeysDialog'))), {
        matrixClient: _MatrixClientPeg.MatrixClientPeg.get()
      });
    });
    (0, _defineProperty2.default)(this, "onFinished", confirmed => {
      if (confirmed) {
        _dispatcher.default.dispatch({
          action: 'logout'
        });
      } // close dialog


      this.props.onFinished(confirmed);
    });
    (0, _defineProperty2.default)(this, "onSetRecoveryMethodClick", () => {
      if (this.state.backupInfo) {
        // A key backup exists for this account, but the creating device is not
        // verified, so restore the backup which will give us the keys from it and
        // allow us to trust it (ie. upload keys to it)
        _Modal.default.createTrackedDialog('Restore Backup', '', _RestoreKeyBackupDialog.default, null, null,
        /* priority = */
        false,
        /* static = */
        true);
      } else {
        _Modal.default.createTrackedDialogAsync("Key Backup", "Key Backup", Promise.resolve().then(() => _interopRequireWildcard(require("../../../async-components/views/dialogs/security/CreateKeyBackupDialog"))), null, null,
        /* priority = */
        false,
        /* static = */
        true);
      } // close dialog


      this.props.onFinished(true);
    });
    (0, _defineProperty2.default)(this, "onLogoutConfirm", () => {
      _dispatcher.default.dispatch({
        action: 'logout'
      }); // close dialog


      this.props.onFinished(true);
    });

    const cli = _MatrixClientPeg.MatrixClientPeg.get();

    const shouldLoadBackupStatus = cli.isCryptoEnabled() && !cli.getKeyBackupEnabled();
    this.state = {
      shouldLoadBackupStatus: shouldLoadBackupStatus,
      loading: shouldLoadBackupStatus,
      backupInfo: null,
      error: null
    };

    if (shouldLoadBackupStatus) {
      this.loadBackupStatus();
    }
  }

  async loadBackupStatus() {
    try {
      const backupInfo = await _MatrixClientPeg.MatrixClientPeg.get().getKeyBackupVersion();
      this.setState({
        loading: false,
        backupInfo
      });
    } catch (e) {
      _logger.logger.log("Unable to fetch key backup status", e);

      this.setState({
        loading: false,
        error: e
      });
    }
  }

  render() {
    if (this.state.shouldLoadBackupStatus) {
      const description = /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Encrypted messages are secured with end-to-end encryption. " + "Only you and the recipient(s) have the keys to read these messages.")), /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Back up your keys before signing out to avoid losing them.")));

      let dialogContent;

      if (this.state.loading) {
        dialogContent = /*#__PURE__*/_react.default.createElement(_Spinner.default, null);
      } else {
        let setupButtonCaption;

        if (this.state.backupInfo) {
          setupButtonCaption = (0, _languageHandler._t)("Connect this session to Key Backup");
        } else {
          // if there's an error fetching the backup info, we'll just assume there's
          // no backup for the purpose of the button caption
          setupButtonCaption = (0, _languageHandler._t)("Start using Key Backup");
        }

        dialogContent = /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("div", {
          className: "mx_Dialog_content",
          id: "mx_Dialog_content"
        }, description), /*#__PURE__*/_react.default.createElement(_DialogButtons.default, {
          primaryButton: setupButtonCaption,
          hasCancel: false,
          onPrimaryButtonClick: this.onSetRecoveryMethodClick,
          focus: true
        }, /*#__PURE__*/_react.default.createElement("button", {
          onClick: this.onLogoutConfirm
        }, (0, _languageHandler._t)("I don't want my encrypted messages"))), /*#__PURE__*/_react.default.createElement("details", null, /*#__PURE__*/_react.default.createElement("summary", null, (0, _languageHandler._t)("Advanced")), /*#__PURE__*/_react.default.createElement("p", null, /*#__PURE__*/_react.default.createElement("button", {
          onClick: this.onExportE2eKeysClicked
        }, (0, _languageHandler._t)("Manually export keys")))));
      } // Not quite a standard question dialog as the primary button cancels
      // the action and does something else instead, whilst non-default button
      // confirms the action.


      return /*#__PURE__*/_react.default.createElement(_BaseDialog.default, {
        title: (0, _languageHandler._t)("You'll lose access to your encrypted messages"),
        contentId: "mx_Dialog_content",
        hasCancel: true,
        onFinished: this.onFinished
      }, dialogContent);
    } else {
      return /*#__PURE__*/_react.default.createElement(_QuestionDialog.default, {
        hasCancelButton: true,
        title: (0, _languageHandler._t)("Sign out"),
        description: (0, _languageHandler._t)("Are you sure you want to sign out?"),
        button: (0, _languageHandler._t)("Sign out"),
        onFinished: this.onFinished
      });
    }
  }

}, (0, _defineProperty2.default)(_class2, "defaultProps", {
  onFinished: function () {}
}), _temp)) || _class);
exports.default = LogoutDialog;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,