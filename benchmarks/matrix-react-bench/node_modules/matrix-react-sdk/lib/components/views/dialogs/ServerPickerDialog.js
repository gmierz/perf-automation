"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _autodiscovery = require("matrix-js-sdk/src/autodiscovery");

var _AutoDiscoveryUtils = _interopRequireDefault(require("../../../utils/AutoDiscoveryUtils"));

var _BaseDialog = _interopRequireDefault(require("./BaseDialog"));

var _languageHandler = require("../../../languageHandler");

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

var _SdkConfig = _interopRequireDefault(require("../../../SdkConfig"));

var _Field = _interopRequireDefault(require("../elements/Field"));

var _StyledRadioButton = _interopRequireDefault(require("../elements/StyledRadioButton"));

var _TextWithTooltip = _interopRequireDefault(require("../elements/TextWithTooltip"));

var _Validation = _interopRequireDefault(require("../elements/Validation"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _logger = require("matrix-js-sdk/src/logger");

var _dec, _class;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

let ServerPickerDialog = (_dec = (0, _replaceableComponent.replaceableComponent)("views.dialogs.ServerPickerDialog"), _dec(_class = class ServerPickerDialog extends _react.default.PureComponent {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "defaultServer", void 0);
    (0, _defineProperty2.default)(this, "fieldRef", /*#__PURE__*/(0, _react.createRef)());
    (0, _defineProperty2.default)(this, "validatedConf", void 0);
    (0, _defineProperty2.default)(this, "onDefaultChosen", () => {
      this.setState({
        defaultChosen: true
      });
    });
    (0, _defineProperty2.default)(this, "onOtherChosen", () => {
      this.setState({
        defaultChosen: false
      });
    });
    (0, _defineProperty2.default)(this, "onHomeserverChange", ev => {
      this.setState({
        otherHomeserver: ev.target.value
      });
    });
    (0, _defineProperty2.default)(this, "validate", (0, _Validation.default)({
      deriveData: async ({
        value
      }) => {
        let hsUrl = value.trim(); // trim to account for random whitespace
        // if the URL has no protocol, try validate it as a serverName via well-known

        if (!hsUrl.includes("://")) {
          try {
            const discoveryResult = await _autodiscovery.AutoDiscovery.findClientConfig(hsUrl);
            this.validatedConf = _AutoDiscoveryUtils.default.buildValidatedConfigFromDiscovery(hsUrl, discoveryResult);
            return {}; // we have a validated config, we don't need to try the other paths
          } catch (e) {
            _logger.logger.error(`Attempted ${hsUrl} as a server_name but it failed`, e);
          }
        } // if we got to this stage then either the well-known failed or the URL had a protocol specified,
        // so validate statically only. If the URL has no protocol, default to https.


        if (!hsUrl.includes("://")) {
          hsUrl = "https://" + hsUrl;
        }

        try {
          this.validatedConf = await _AutoDiscoveryUtils.default.validateServerConfigWithStaticUrls(hsUrl);
          return {};
        } catch (e) {
          _logger.logger.error(e);

          const stateForError = _AutoDiscoveryUtils.default.authComponentStateForError(e);

          if (stateForError.serverErrorIsFatal) {
            let error = (0, _languageHandler._t)("Unable to validate homeserver");

            if (e.translatedMessage) {
              error = e.translatedMessage;
            }

            return {
              error
            };
          } // try to carry on anyway


          try {
            this.validatedConf = await _AutoDiscoveryUtils.default.validateServerConfigWithStaticUrls(hsUrl, null, true);
            return {};
          } catch (e) {
            _logger.logger.error(e);

            return {
              error: (0, _languageHandler._t)("Invalid URL")
            };
          }
        }
      },
      rules: [{
        key: "required",
        test: ({
          value,
          allowEmpty
        }) => allowEmpty || !!value,
        invalid: () => (0, _languageHandler._t)("Specify a homeserver")
      }, {
        key: "valid",
        test: async function ({
          value
        }, {
          error
        }) {
          if (!value) return true;
          return !error;
        },
        invalid: function ({
          error
        }) {
          return error;
        }
      }]
    }));
    (0, _defineProperty2.default)(this, "onHomeserverValidate", fieldState => this.validate(fieldState));
    (0, _defineProperty2.default)(this, "onSubmit", async ev => {
      ev.preventDefault();
      const valid = await this.fieldRef.current.validate({
        allowEmpty: false
      });

      if (!valid && !this.state.defaultChosen) {
        this.fieldRef.current.focus();
        this.fieldRef.current.validate({
          allowEmpty: false,
          focused: true
        });
        return;
      }

      this.props.onFinished(this.state.defaultChosen ? this.defaultServer : this.validatedConf);
    });

    const config = _SdkConfig.default.get();

    this.defaultServer = config["validated_server_config"];
    const {
      serverConfig
    } = this.props;
    let otherHomeserver = "";

    if (!serverConfig.isDefault) {
      if (serverConfig.isNameResolvable && serverConfig.hsName) {
        otherHomeserver = serverConfig.hsName;
      } else {
        otherHomeserver = serverConfig.hsUrl;
      }
    }

    this.state = {
      defaultChosen: serverConfig.isDefault,
      otherHomeserver
    };
  }

  render() {
    let text;

    if (this.defaultServer.hsName === "matrix.org") {
      text = (0, _languageHandler._t)("Matrix.org is the biggest public homeserver in the world, so it's a good place for many.");
    }

    let defaultServerName = this.defaultServer.hsName;

    if (this.defaultServer.hsNameIsDifferent) {
      defaultServerName = /*#__PURE__*/_react.default.createElement(_TextWithTooltip.default, {
        class: "mx_Login_underlinedServerName",
        tooltip: this.defaultServer.hsUrl
      }, this.defaultServer.hsName);
    }

    return /*#__PURE__*/_react.default.createElement(_BaseDialog.default, {
      title: this.props.title || (0, _languageHandler._t)("Sign into your homeserver"),
      className: "mx_ServerPickerDialog",
      contentId: "mx_ServerPickerDialog",
      onFinished: this.props.onFinished,
      fixedWidth: false,
      hasCancel: true
    }, /*#__PURE__*/_react.default.createElement("form", {
      className: "mx_Dialog_content",
      id: "mx_ServerPickerDialog",
      onSubmit: this.onSubmit
    }, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("We call the places where you can host your account 'homeservers'."), " ", text), /*#__PURE__*/_react.default.createElement(_StyledRadioButton.default, {
      name: "defaultChosen",
      value: "true",
      checked: this.state.defaultChosen,
      onChange: this.onDefaultChosen
    }, defaultServerName), /*#__PURE__*/_react.default.createElement(_StyledRadioButton.default, {
      name: "defaultChosen",
      value: "false",
      className: "mx_ServerPickerDialog_otherHomeserverRadio",
      checked: !this.state.defaultChosen,
      onChange: this.onOtherChosen,
      childrenInLabel: false
    }, /*#__PURE__*/_react.default.createElement(_Field.default, {
      type: "text",
      className: "mx_ServerPickerDialog_otherHomeserver",
      label: (0, _languageHandler._t)("Other homeserver"),
      onChange: this.onHomeserverChange,
      onFocus: this.onOtherChosen,
      ref: this.fieldRef,
      onValidate: this.onHomeserverValidate,
      value: this.state.otherHomeserver,
      validateOnChange: false,
      validateOnFocus: false,
      id: "mx_homeserverInput"
    })), /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Use your preferred Matrix homeserver if you have one, or host your own.")), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      className: "mx_ServerPickerDialog_continue",
      kind: "primary",
      onClick: this.onSubmit
    }, (0, _languageHandler._t)("Continue")), /*#__PURE__*/_react.default.createElement("h4", null, (0, _languageHandler._t)("Learn more")), /*#__PURE__*/_react.default.createElement("a", {
      href: "https://matrix.org/faq/#what-is-a-homeserver%3F",
      target: "_blank",
      rel: "noreferrer noopener"
    }, (0, _languageHandler._t)("About homeservers"))));
  }

}) || _class);
exports.default = ServerPickerDialog;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL2RpYWxvZ3MvU2VydmVyUGlja2VyRGlhbG9nLnRzeCJdLCJuYW1lcyI6WyJTZXJ2ZXJQaWNrZXJEaWFsb2ciLCJSZWFjdCIsIlB1cmVDb21wb25lbnQiLCJjb25zdHJ1Y3RvciIsInByb3BzIiwic2V0U3RhdGUiLCJkZWZhdWx0Q2hvc2VuIiwiZXYiLCJvdGhlckhvbWVzZXJ2ZXIiLCJ0YXJnZXQiLCJ2YWx1ZSIsImRlcml2ZURhdGEiLCJoc1VybCIsInRyaW0iLCJpbmNsdWRlcyIsImRpc2NvdmVyeVJlc3VsdCIsIkF1dG9EaXNjb3ZlcnkiLCJmaW5kQ2xpZW50Q29uZmlnIiwidmFsaWRhdGVkQ29uZiIsIkF1dG9EaXNjb3ZlcnlVdGlscyIsImJ1aWxkVmFsaWRhdGVkQ29uZmlnRnJvbURpc2NvdmVyeSIsImUiLCJsb2dnZXIiLCJlcnJvciIsInZhbGlkYXRlU2VydmVyQ29uZmlnV2l0aFN0YXRpY1VybHMiLCJzdGF0ZUZvckVycm9yIiwiYXV0aENvbXBvbmVudFN0YXRlRm9yRXJyb3IiLCJzZXJ2ZXJFcnJvcklzRmF0YWwiLCJ0cmFuc2xhdGVkTWVzc2FnZSIsInJ1bGVzIiwia2V5IiwidGVzdCIsImFsbG93RW1wdHkiLCJpbnZhbGlkIiwiZmllbGRTdGF0ZSIsInZhbGlkYXRlIiwicHJldmVudERlZmF1bHQiLCJ2YWxpZCIsImZpZWxkUmVmIiwiY3VycmVudCIsInN0YXRlIiwiZm9jdXMiLCJmb2N1c2VkIiwib25GaW5pc2hlZCIsImRlZmF1bHRTZXJ2ZXIiLCJjb25maWciLCJTZGtDb25maWciLCJnZXQiLCJzZXJ2ZXJDb25maWciLCJpc0RlZmF1bHQiLCJpc05hbWVSZXNvbHZhYmxlIiwiaHNOYW1lIiwicmVuZGVyIiwidGV4dCIsImRlZmF1bHRTZXJ2ZXJOYW1lIiwiaHNOYW1lSXNEaWZmZXJlbnQiLCJ0aXRsZSIsIm9uU3VibWl0Iiwib25EZWZhdWx0Q2hvc2VuIiwib25PdGhlckNob3Nl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QURUO0FBRUksTUFBQSxTQUFTLEVBQUMsdUNBRmQ7QUFHSSxNQUFBLEtBQUssRUFBRSx5QkFBRyxrQkFBSCxDQUhYO0FBSUksTUFBQSxRQUFRLEVBQUUsS0FBS0Msa0JBSm5CO0FBS0ksTUFBQSxPQUFPLEVBQUUsS0FBS0QsYUFMbEI7QUFNSSxNQUFBLEdBQUcsRUFBRSxLQUFLckIsUUFOZDtBQU9JLE1BQUEsVUFBVSxFQUFFLEtBQUt1QixvQkFQckI7QUFRSSxNQUFBLEtBQUssRUFBRSxLQUFLckIsS0FBTCxDQUFXaEMsZUFSdEI7QUFTSSxNQUFBLGdCQUFnQixFQUFFLEtBVHRCO0FBVUksTUFBQSxlQUFlLEVBQUUsS0FWckI7QUFXSSxNQUFBLEVBQUUsRUFBQztBQVhQLE1BUkosQ0FkSixlQW9DSSx3Q0FDTSx5QkFBRyx5RUFBSCxDQUROLENBcENKLGVBd0NJLDZCQUFDLHlCQUFEO0FBQWtCLE1BQUEsU0FBUyxFQUFDLGdDQUE1QjtBQUE2RCxNQUFBLElBQUksRUFBQyxTQUFsRTtBQUE0RSxNQUFBLE9BQU8sRUFBRSxLQUFLaUQ7QUFBMUYsT0FDTSx5QkFBRyxVQUFILENBRE4sQ0F4Q0osZUE0Q0kseUNBQU0seUJBQUcsWUFBSCxDQUFOLENBNUNKLGVBNkNJO0FBQUcsTUFBQSxJQUFJLEVBQUMsaURBQVI7QUFBMEQsTUFBQSxNQUFNLEVBQUMsUUFBakU7QUFBMEUsTUFBQSxHQUFHLEVBQUM7QUFBOUUsT0FDTSx5QkFBRyxtQkFBSCxDQUROLENBN0NKLENBUkcsQ0FBUDtBQTBESDs7QUFuTStFLEMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuQ29weXJpZ2h0IDIwMjAtMjAyMSBUaGUgTWF0cml4Lm9yZyBGb3VuZGF0aW9uIEMuSS5DLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbmltcG9ydCBSZWFjdCwgeyBjcmVhdGVSZWYgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IEF1dG9EaXNjb3ZlcnkgfSBmcm9tIFwibWF0cml4LWpzLXNkay9zcmMvYXV0b2Rpc2NvdmVyeVwiO1xuXG5pbXBvcnQgQXV0b0Rpc2NvdmVyeVV0aWxzLCB7IFZhbGlkYXRlZFNlcnZlckNvbmZpZyB9IGZyb20gXCIuLi8uLi8uLi91dGlscy9BdXRvRGlzY292ZXJ5VXRpbHNcIjtcbmltcG9ydCBCYXNlRGlhbG9nIGZyb20gJy4vQmFzZURpYWxvZyc7XG5pbXBvcnQgeyBfdCB9IGZyb20gJy4uLy4uLy4uL2xhbmd1YWdlSGFuZGxlcic7XG5pbXBvcnQgQWNjZXNzaWJsZUJ1dHRvbiBmcm9tIFwiLi4vZWxlbWVudHMvQWNjZXNzaWJsZUJ1dHRvblwiO1xuaW1wb3J0IFNka0NvbmZpZyBmcm9tIFwiLi4vLi4vLi4vU2RrQ29uZmlnXCI7XG5pbXBvcnQgRmllbGQgZnJvbSBcIi4uL2VsZW1lbnRzL0ZpZWxkXCI7XG5pbXBvcnQgU3R5bGVkUmFkaW9CdXR0b24gZnJvbSBcIi4uL2VsZW1lbnRzL1N0eWxlZFJhZGlvQnV0dG9uXCI7XG5pbXBvcnQgVGV4dFdpdGhUb29sdGlwIGZyb20gXCIuLi9lbGVtZW50cy9UZXh0V2l0aFRvb2x0aXBcIjtcbmltcG9ydCB3aXRoVmFsaWRhdGlvbiwgeyBJRmllbGRTdGF0ZSB9IGZyb20gXCIuLi9lbGVtZW50cy9WYWxpZGF0aW9uXCI7XG5pbXBvcnQgeyByZXBsYWNlYWJsZUNvbXBvbmVudCB9IGZyb20gXCIuLi8uLi8uLi91dGlscy9yZXBsYWNlYWJsZUNvbXBvbmVudFwiO1xuXG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tIFwibWF0cml4LWpzLXNkay9zcmMvbG9nZ2VyXCI7XG5cbmludGVyZmFjZSBJUHJvcHMge1xuICAgIHRpdGxlPzogc3RyaW5nO1xuICAgIHNlcnZlckNvbmZpZzogVmFsaWRhdGVkU2VydmVyQ29uZmlnO1xuICAgIG9uRmluaXNoZWQoY29uZmlnPzogVmFsaWRhdGVkU2VydmVyQ29uZmlnKTogdm9pZDtcbn1cblxuaW50ZXJmYWNlIElTdGF0ZSB7XG4gICAgZGVmYXVsdENob3NlbjogYm9vbGVhbjtcbiAgICBvdGhlckhvbWVzZXJ2ZXI6IHN0cmluZztcbn1cblxuQHJlcGxhY2VhYmxlQ29tcG9uZW50KFwidmlld3MuZGlhbG9ncy5TZXJ2ZXJQaWNrZXJEaWFsb2dcIilcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlcnZlclBpY2tlckRpYWxvZyBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQ8SVByb3BzLCBJU3RhdGU+IHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGRlZmF1bHRTZXJ2ZXI6IFZhbGlkYXRlZFNlcnZlckNvbmZpZztcbiAgICBwcml2YXRlIHJlYWRvbmx5IGZpZWxkUmVmID0gY3JlYXRlUmVmPEZpZWxkPigpO1xuICAgIHByaXZhdGUgdmFsaWRhdGVkQ29uZjogVmFsaWRhdGVkU2VydmVyQ29uZmlnO1xuXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuXG4gICAgICAgIGNvbnN0IGNvbmZpZyA9IFNka0NvbmZpZy5nZXQoKTtcbiAgICAgICAgdGhpcy5kZWZhdWx0U2VydmVyID0gY29uZmlnW1widmFsaWRhdGVkX3NlcnZlcl9jb25maWdcIl0gYXMgVmFsaWRhdGVkU2VydmVyQ29uZmlnO1xuICAgICAgICBjb25zdCB7IHNlcnZlckNvbmZpZyB9ID0gdGhpcy5wcm9wcztcblxuICAgICAgICBsZXQgb3RoZXJIb21lc2VydmVyID0gXCJcIjtcbiAgICAgICAgaWYgKCFzZXJ2ZXJDb25maWcuaXNEZWZhdWx0KSB7XG4gICAgICAgICAgICBpZiAoc2VydmVyQ29uZmlnLmlzTmFtZVJlc29sdmFibGUgJiYgc2VydmVyQ29uZmlnLmhzTmFtZSkge1xuICAgICAgICAgICAgICAgIG90aGVySG9tZXNlcnZlciA9IHNlcnZlckNvbmZpZy5oc05hbWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG90aGVySG9tZXNlcnZlciA9IHNlcnZlckNvbmZpZy5oc1VybDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBkZWZhdWx0Q2hvc2VuOiBzZXJ2ZXJDb25maWcuaXNEZWZhdWx0LFxuICAgICAgICAgICAgb3RoZXJIb21lc2VydmVyLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHByaXZhdGUgb25EZWZhdWx0Q2hvc2VuID0gKCkgPT4ge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHsgZGVmYXVsdENob3NlbjogdHJ1ZSB9KTtcbiAgICB9O1xuXG4gICAgcHJpdmF0ZSBvbk90aGVyQ2hvc2VuID0gKCkgPT4ge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHsgZGVmYXVsdENob3NlbjogZmFsc2UgfSk7XG4gICAgfTtcblxuICAgIHByaXZhdGUgb25Ib21lc2VydmVyQ2hhbmdlID0gKGV2KSA9PiB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBvdGhlckhvbWVzZXJ2ZXI6IGV2LnRhcmdldC52YWx1ZSB9KTtcbiAgICB9O1xuXG4gICAgLy8gVE9ETzogRG8gd2Ugd2FudCB0byBzdXBwb3J0IC53ZWxsLWtub3duIGxvb2t1cHMgaGVyZT9cbiAgICAvLyBJZiBmb3Igc29tZSByZWFzb24gc29tZW9uZSBlbnRlcnMgXCJtYXRyaXgub3JnXCIgZm9yIGEgVVJMLCB3ZSBjb3VsZCBkbyBhIGxvb2t1cCB0b1xuICAgIC8vIGZpbmQgdGhlaXIgaG9tZXNlcnZlciB3aXRob3V0IGRlbWFuZGluZyB0aGV5IHVzZSBcImh0dHBzOi8vbWF0cml4Lm9yZ1wiXG4gICAgcHJpdmF0ZSB2YWxpZGF0ZSA9IHdpdGhWYWxpZGF0aW9uPHRoaXMsIHsgZXJyb3I/OiBzdHJpbmcgfT4oe1xuICAgICAgICBkZXJpdmVEYXRhOiBhc3luYyAoeyB2YWx1ZSB9KSA9PiB7XG4gICAgICAgICAgICBsZXQgaHNVcmwgPSB2YWx1ZS50cmltKCk7IC8vIHRyaW0gdG8gYWNjb3VudCBmb3IgcmFuZG9tIHdoaXRlc3BhY2VcblxuICAgICAgICAgICAgLy8gaWYgdGhlIFVSTCBoYXMgbm8gcHJvdG9jb2wsIHRyeSB2YWxpZGF0ZSBpdCBhcyBhIHNlcnZlck5hbWUgdmlhIHdlbGwta25vd25cbiAgICAgICAgICAgIGlmICghaHNVcmwuaW5jbHVkZXMoXCI6Ly9cIikpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBkaXNjb3ZlcnlSZXN1bHQgPSBhd2FpdCBBdXRvRGlzY292ZXJ5LmZpbmRDbGllbnRDb25maWcoaHNVcmwpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnZhbGlkYXRlZENvbmYgPSBBdXRvRGlzY292ZXJ5VXRpbHMuYnVpbGRWYWxpZGF0ZWRDb25maWdGcm9tRGlzY292ZXJ5KGhzVXJsLCBkaXNjb3ZlcnlSZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge307IC8vIHdlIGhhdmUgYSB2YWxpZGF0ZWQgY29uZmlnLCB3ZSBkb24ndCBuZWVkIHRvIHRyeSB0aGUgb3RoZXIgcGF0aHNcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcihgQXR0ZW1wdGVkICR7aHNVcmx9IGFzIGEgc2VydmVyX25hbWUgYnV0IGl0IGZhaWxlZGAsIGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gaWYgd2UgZ290IHRvIHRoaXMgc3RhZ2UgdGhlbiBlaXRoZXIgdGhlIHdlbGwta25vd24gZmFpbGVkIG9yIHRoZSBVUkwgaGFkIGEgcHJvdG9jb2wgc3BlY2lmaWVkLFxuICAgICAgICAgICAgLy8gc28gdmFsaWRhdGUgc3RhdGljYWxseSBvbmx5LiBJZiB0aGUgVVJMIGhhcyBubyBwcm90b2NvbCwgZGVmYXVsdCB0byBodHRwcy5cbiAgICAgICAgICAgIGlmICghaHNVcmwuaW5jbHVkZXMoXCI6Ly9cIikpIHtcbiAgICAgICAgICAgICAgICBoc1VybCA9IFwiaHR0cHM6Ly9cIiArIGhzVXJsO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHRoaXMudmFsaWRhdGVkQ29uZiA9IGF3YWl0IEF1dG9EaXNjb3ZlcnlVdGlscy52YWxpZGF0ZVNlcnZlckNvbmZpZ1dpdGhTdGF0aWNVcmxzKGhzVXJsKTtcbiAgICAgICAgICAgICAgICByZXR1cm4ge307XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKGUpO1xuXG4gICAgICAgICAgICAgICAgY29uc3Qgc3RhdGVGb3JFcnJvciA9IEF1dG9EaXNjb3ZlcnlVdGlscy5hdXRoQ29tcG9uZW50U3RhdGVGb3JFcnJvcihlKTtcbiAgICAgICAgICAgICAgICBpZiAoc3RhdGVGb3JFcnJvci5zZXJ2ZXJFcnJvcklzRmF0YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGVycm9yID0gX3QoXCJVbmFibGUgdG8gdmFsaWRhdGUgaG9tZXNlcnZlclwiKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUudHJhbnNsYXRlZE1lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yID0gZS50cmFuc2xhdGVkTWVzc2FnZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBlcnJvciB9O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIHRyeSB0byBjYXJyeSBvbiBhbnl3YXlcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnZhbGlkYXRlZENvbmYgPSBhd2FpdCBBdXRvRGlzY292ZXJ5VXRpbHMudmFsaWRhdGVTZXJ2ZXJDb25maWdXaXRoU3RhdGljVXJscyhoc1VybCwgbnVsbCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcihlKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgZXJyb3I6IF90KFwiSW52YWxpZCBVUkxcIikgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHJ1bGVzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAga2V5OiBcInJlcXVpcmVkXCIsXG4gICAgICAgICAgICAgICAgdGVzdDogKHsgdmFsdWUsIGFsbG93RW1wdHkgfSkgPT4gYWxsb3dFbXB0eSB8fCAhIXZhbHVlLFxuICAgICAgICAgICAgICAgIGludmFsaWQ6ICgpID0+IF90KFwiU3BlY2lmeSBhIGhvbWVzZXJ2ZXJcIiksXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAga2V5OiBcInZhbGlkXCIsXG4gICAgICAgICAgICAgICAgdGVzdDogYXN5bmMgZnVuY3Rpb24oeyB2YWx1ZSB9LCB7IGVycm9yIH0pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF2YWx1ZSkgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAhZXJyb3I7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBpbnZhbGlkOiBmdW5jdGlvbih7IGVycm9yIH0pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgIH0pO1xuXG4gICAgcHJpdmF0ZSBvbkhvbWVzZXJ2ZXJWYWxpZGF0ZSA9IChmaWVsZFN0YXRlOiBJRmllbGRTdGF0ZSkgPT4gdGhpcy52YWxpZGF0ZShmaWVsZFN0YXRlKTtcblxuICAgIHByaXZhdGUgb25TdWJtaXQgPSBhc3luYyAoZXYpID0+IHtcbiAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICBjb25zdCB2YWxpZCA9IGF3YWl0IHRoaXMuZmllbGRSZWYuY3VycmVudC52YWxpZGF0ZSh7IGFsbG93RW1wdHk6IGZhbHNlIH0pO1xuXG4gICAgICAgIGlmICghdmFsaWQgJiYgIXRoaXMuc3RhdGUuZGVmYXVsdENob3Nlbikge1xuICAgICAgICAgICAgdGhpcy5maWVsZFJlZi5jdXJyZW50LmZvY3VzKCk7XG4gICAgICAgICAgICB0aGlzLmZpZWxkUmVmLmN1cnJlbnQudmFsaWRhdGUoeyBhbGxvd0VtcHR5OiBmYWxzZSwgZm9jdXNlZDogdHJ1ZSB9KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucHJvcHMub25GaW5pc2hlZCh0aGlzLnN0YXRlLmRlZmF1bHRDaG9zZW4gPyB0aGlzLmRlZmF1bHRTZXJ2ZXIgOiB0aGlzLnZhbGlkYXRlZENvbmYpO1xuICAgIH07XG5cbiAgICBwdWJsaWMgcmVuZGVyKCkge1xuICAgICAgICBsZXQgdGV4dDtcbiAgICAgICAgaWYgKHRoaXMuZGVmYXVsdFNlcnZlci5oc05hbWUgPT09IFwibWF0cml4Lm9yZ1wiKSB7XG4gICAgICAgICAgICB0ZXh0ID0gX3QoXCJNYXRyaXgub3JnIGlzIHRoZSBiaWdnZXN0IHB1YmxpYyBob21lc2VydmVyIGluIHRoZSB3b3JsZCwgc28gaXQncyBhIGdvb2QgcGxhY2UgZm9yIG1hbnkuXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGRlZmF1bHRTZXJ2ZXJOYW1lOiBSZWFjdC5SZWFjdE5vZGUgPSB0aGlzLmRlZmF1bHRTZXJ2ZXIuaHNOYW1lO1xuICAgICAgICBpZiAodGhpcy5kZWZhdWx0U2VydmVyLmhzTmFtZUlzRGlmZmVyZW50KSB7XG4gICAgICAgICAgICBkZWZhdWx0U2VydmVyTmFtZSA9IChcbiAgICAgICAgICAgICAgICA8VGV4dFdpdGhUb29sdGlwIGNsYXNzPVwibXhfTG9naW5fdW5kZXJsaW5lZFNlcnZlck5hbWVcIiB0b29sdGlwPXt0aGlzLmRlZmF1bHRTZXJ2ZXIuaHNVcmx9PlxuICAgICAgICAgICAgICAgICAgICB7IHRoaXMuZGVmYXVsdFNlcnZlci5oc05hbWUgfVxuICAgICAgICAgICAgICAgIDwvVGV4dFdpdGhUb29sdGlwPlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiA8QmFzZURpYWxvZ1xuICAgICAgICAgICAgdGl0bGU9e3RoaXMucHJvcHMudGl0bGUgfHwgX3QoXCJTaWduIGludG8geW91ciBob21lc2VydmVyXCIpfVxuICAgICAgICAgICAgY2xhc3NOYW1lPVwibXhfU2VydmVyUGlja2VyRGlhbG9nXCJcbiAgICAgICAgICAgIGNvbnRlbnRJZD1cIm14X1NlcnZlclBpY2tlckRpYWxvZ1wiXG4gICAgICAgICAgICBvbkZpbmlzaGVkPXt0aGlzLnByb3BzLm9uRmluaXNoZWR9XG4gICAgICAgICAgICBmaXhlZFdpZHRoPXtmYWxzZX1cbiAgICAgICAgICAgIGhhc0NhbmNlbD17dHJ1ZX1cbiAgICAgICAgPlxuICAgICAgICAgICAgPGZvcm0gY2xhc3NOYW1lPVwibXhfRGlhbG9nX2NvbnRlbnRcIiBpZD1cIm14X1NlcnZlclBpY2tlckRpYWxvZ1wiIG9uU3VibWl0PXt0aGlzLm9uU3VibWl0fT5cbiAgICAgICAgICAgICAgICA8cD5cbiAgICAgICAgICAgICAgICAgICAgeyBfdChcIldlIGNhbGwgdGhlIHBsYWNlcyB3aGVyZSB5b3UgY2FuIGhvc3QgeW91ciBhY2NvdW50ICdob21lc2VydmVycycuXCIpIH0geyB0ZXh0IH1cbiAgICAgICAgICAgICAgICA8L3A+XG5cbiAgICAgICAgICAgICAgICA8U3R5bGVkUmFkaW9CdXR0b25cbiAgICAgICAgICAgICAgICAgICAgbmFtZT1cImRlZmF1bHRDaG9zZW5cIlxuICAgICAgICAgICAgICAgICAgICB2YWx1ZT1cInRydWVcIlxuICAgICAgICAgICAgICAgICAgICBjaGVja2VkPXt0aGlzLnN0YXRlLmRlZmF1bHRDaG9zZW59XG4gICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLm9uRGVmYXVsdENob3Nlbn1cbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgIHsgZGVmYXVsdFNlcnZlck5hbWUgfVxuICAgICAgICAgICAgICAgIDwvU3R5bGVkUmFkaW9CdXR0b24+XG5cbiAgICAgICAgICAgICAgICA8U3R5bGVkUmFkaW9CdXR0b25cbiAgICAgICAgICAgICAgICAgICAgbmFtZT1cImRlZmF1bHRDaG9zZW5cIlxuICAgICAgICAgICAgICAgICAgICB2YWx1ZT1cImZhbHNlXCJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwibXhfU2VydmVyUGlja2VyRGlhbG9nX290aGVySG9tZXNlcnZlclJhZGlvXCJcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tlZD17IXRoaXMuc3RhdGUuZGVmYXVsdENob3Nlbn1cbiAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMub25PdGhlckNob3Nlbn1cbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW5JbkxhYmVsPXtmYWxzZX1cbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgIDxGaWVsZFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwibXhfU2VydmVyUGlja2VyRGlhbG9nX290aGVySG9tZXNlcnZlclwiXG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbD17X3QoXCJPdGhlciBob21lc2VydmVyXCIpfVxuICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMub25Ib21lc2VydmVyQ2hhbmdlfVxuICAgICAgICAgICAgICAgICAgICAgICAgb25Gb2N1cz17dGhpcy5vbk90aGVyQ2hvc2VufVxuICAgICAgICAgICAgICAgICAgICAgICAgcmVmPXt0aGlzLmZpZWxkUmVmfVxuICAgICAgICAgICAgICAgICAgICAgICAgb25WYWxpZGF0ZT17dGhpcy5vbkhvbWVzZXJ2ZXJWYWxpZGF0ZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLm90aGVySG9tZXNlcnZlcn1cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRlT25DaGFuZ2U9e2ZhbHNlfVxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGVPbkZvY3VzPXtmYWxzZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlkPVwibXhfaG9tZXNlcnZlcklucHV0XCJcbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8L1N0eWxlZFJhZGlvQnV0dG9uPlxuICAgICAgICAgICAgICAgIDxwPlxuICAgICAgICAgICAgICAgICAgICB7IF90KFwiVXNlIHlvdXIgcHJlZmVycmVkIE1hdHJpeCBob21lc2VydmVyIGlmIHlvdSBoYXZlIG9uZSwgb3IgaG9zdCB5b3VyIG93bi5cIikgfVxuICAgICAgICAgICAgICAgIDwvcD5cblxuICAgICAgICAgICAgICAgIDxBY2Nlc3NpYmxlQnV0dG9uIGNsYXNzTmFtZT1cIm14X1NlcnZlclBpY2tlckRpYWxvZ19jb250aW51ZVwiIGtpbmQ9XCJwcmltYXJ5XCIgb25DbGljaz17dGhpcy5vblN1Ym1pdH0+XG4gICAgICAgICAgICAgICAgICAgIHsgX3QoXCJDb250aW51ZVwiKSB9XG4gICAgICAgICAgICAgICAgPC9BY2Nlc3NpYmxlQnV0dG9uPlxuXG4gICAgICAgICAgICAgICAgPGg0PnsgX3QoXCJMZWFybiBtb3JlXCIpIH08L2g0PlxuICAgICAgICAgICAgICAgIDxhIGhyZWY9XCJodHRwczovL21hdHJpeC5vcmcvZmFxLyN3aGF0LWlzLWEtaG9tZXNlcnZlciUzRlwiIHRhcmdldD1cIl9ibGFua1wiIHJlbD1cIm5vcmVmZXJyZXIgbm9vcGVuZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgeyBfdChcIkFib3V0IGhvbWVzZXJ2ZXJzXCIpIH1cbiAgICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICA8L2Zvcm0+XG4gICAgICAgIDwvQmFzZURpYWxvZz47XG4gICAgfVxufVxuIl19