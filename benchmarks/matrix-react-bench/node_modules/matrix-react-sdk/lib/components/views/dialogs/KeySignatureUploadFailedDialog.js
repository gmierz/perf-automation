"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _languageHandler = require("../../../languageHandler");

var _SdkConfig = _interopRequireDefault(require("../../../SdkConfig"));

var _BaseDialog = _interopRequireDefault(require("./BaseDialog"));

var _DialogButtons = _interopRequireDefault(require("../elements/DialogButtons"));

var _Spinner = _interopRequireDefault(require("../elements/Spinner"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
Copyright 2020 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const KeySignatureUploadFailedDialog = ({
  failures,
  source,
  continuation,
  onFinished
}) => {
  const RETRIES = 2;
  const [retry, setRetry] = (0, _react.useState)(RETRIES);
  const [cancelled, setCancelled] = (0, _react.useState)(false);
  const [retrying, setRetrying] = (0, _react.useState)(false);
  const [success, setSuccess] = (0, _react.useState)(false);
  const onCancel = (0, _react.useRef)(onFinished);
  const causes = new Map([["_afterCrossSigningLocalKeyChange", (0, _languageHandler._t)("a new master key signature")], ["checkOwnCrossSigningTrust", (0, _languageHandler._t)("a new cross-signing key signature")], ["setDeviceVerification", (0, _languageHandler._t)("a device cross-signing signature")]]);
  const defaultCause = (0, _languageHandler._t)("a key signature");
  const onRetry = (0, _react.useCallback)(async () => {
    try {
      setRetrying(true);
      const cancel = new Promise((resolve, reject) => {
        onCancel.current = reject;
      }).finally(() => {
        setCancelled(true);
      });
      await Promise.race([continuation(), cancel]);
      setSuccess(true);
    } catch (e) {
      setRetry(r => r - 1);
    } finally {
      onCancel.current = onFinished;
      setRetrying(false);
    }
  }, [continuation, onFinished]);
  let body;

  if (!success && !cancelled && continuation && retry > 0) {
    const reason = causes.get(source) || defaultCause;

    const brand = _SdkConfig.default.get().brand;

    body = /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("%(brand)s encountered an error during upload of:", {
      brand
    })), /*#__PURE__*/_react.default.createElement("p", null, reason), retrying && /*#__PURE__*/_react.default.createElement(_Spinner.default, null), /*#__PURE__*/_react.default.createElement("pre", null, JSON.stringify(failures, null, 2)), /*#__PURE__*/_react.default.createElement(_DialogButtons.default, {
      primaryButton: "Retry",
      hasCancel: true,
      onPrimaryButtonClick: onRetry,
      onCancel: onCancel.current,
      primaryDisabled: retrying
    }));
  } else {
    body = /*#__PURE__*/_react.default.createElement("div", null, success ? /*#__PURE__*/_react.default.createElement("span", null, (0, _languageHandler._t)("Upload completed")) : cancelled ? /*#__PURE__*/_react.default.createElement("span", null, (0, _languageHandler._t)("Cancelled signature upload")) : /*#__PURE__*/_react.default.createElement("span", null, (0, _languageHandler._t)("Unable to upload")), /*#__PURE__*/_react.default.createElement(_DialogButtons.default, {
      primaryButton: (0, _languageHandler._t)("OK"),
      hasCancel: false,
      onPrimaryButtonClick: onFinished
    }));
  }

  return /*#__PURE__*/_react.default.createElement(_BaseDialog.default, {
    title: success ? (0, _languageHandler._t)("Signature upload success") : (0, _languageHandler._t)("Signature upload failed"),
    fixedWidth: false,
    onFinished: () => {}
  }, body);
};

var _default = KeySignatureUploadFailedDialog;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,