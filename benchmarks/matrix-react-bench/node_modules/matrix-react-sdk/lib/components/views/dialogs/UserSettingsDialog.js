"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.UserTab = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _TabbedView = _interopRequireWildcard(require("../../structures/TabbedView"));

var _languageHandler = require("../../../languageHandler");

var _GeneralUserSettingsTab = _interopRequireDefault(require("../settings/tabs/user/GeneralUserSettingsTab"));

var _SettingsStore = _interopRequireDefault(require("../../../settings/SettingsStore"));

var _LabsUserSettingsTab = _interopRequireDefault(require("../settings/tabs/user/LabsUserSettingsTab"));

var _AppearanceUserSettingsTab = _interopRequireDefault(require("../settings/tabs/user/AppearanceUserSettingsTab"));

var _SecurityUserSettingsTab = _interopRequireDefault(require("../settings/tabs/user/SecurityUserSettingsTab"));

var _NotificationUserSettingsTab = _interopRequireDefault(require("../settings/tabs/user/NotificationUserSettingsTab"));

var _PreferencesUserSettingsTab = _interopRequireDefault(require("../settings/tabs/user/PreferencesUserSettingsTab"));

var _VoiceUserSettingsTab = _interopRequireDefault(require("../settings/tabs/user/VoiceUserSettingsTab"));

var _HelpUserSettingsTab = _interopRequireDefault(require("../settings/tabs/user/HelpUserSettingsTab"));

var _FlairUserSettingsTab = _interopRequireDefault(require("../settings/tabs/user/FlairUserSettingsTab"));

var _SdkConfig = _interopRequireDefault(require("../../../SdkConfig"));

var _MjolnirUserSettingsTab = _interopRequireDefault(require("../settings/tabs/user/MjolnirUserSettingsTab"));

var _UIFeature = require("../../../settings/UIFeature");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _BaseDialog = _interopRequireDefault(require("./BaseDialog"));

var _SidebarUserSettingsTab = _interopRequireDefault(require("../settings/tabs/user/SidebarUserSettingsTab"));

var _dec, _class;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

let UserTab;
exports.UserTab = UserTab;

(function (UserTab) {
  UserTab["General"] = "USER_GENERAL_TAB";
  UserTab["Appearance"] = "USER_APPEARANCE_TAB";
  UserTab["Flair"] = "USER_FLAIR_TAB";
  UserTab["Notifications"] = "USER_NOTIFICATIONS_TAB";
  UserTab["Preferences"] = "USER_PREFERENCES_TAB";
  UserTab["Sidebar"] = "USER_SIDEBAR_TAB";
  UserTab["Voice"] = "USER_VOICE_TAB";
  UserTab["Security"] = "USER_SECURITY_TAB";
  UserTab["Labs"] = "USER_LABS_TAB";
  UserTab["Mjolnir"] = "USER_MJOLNIR_TAB";
  UserTab["Help"] = "USER_HELP_TAB";
})(UserTab || (exports.UserTab = UserTab = {}));

let UserSettingsDialog = (_dec = (0, _replaceableComponent.replaceableComponent)("views.dialogs.UserSettingsDialog"), _dec(_class = class UserSettingsDialog extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "mjolnirWatcher", void 0);
    (0, _defineProperty2.default)(this, "mjolnirChanged", (settingName, roomId, atLevel, newValue) => {
      // We can cheat because we know what levels a feature is tracked at, and how it is tracked
      this.setState({
        mjolnirEnabled: newValue
      });
    });
    this.state = {
      mjolnirEnabled: _SettingsStore.default.getValue("feature_mjolnir")
    };
  }

  componentDidMount() {
    this.mjolnirWatcher = _SettingsStore.default.watchSetting("feature_mjolnir", null, this.mjolnirChanged);
  }

  componentWillUnmount() {
    _SettingsStore.default.unwatchSetting(this.mjolnirWatcher);
  }

  getTabs() {
    const tabs = [];
    tabs.push(new _TabbedView.Tab(UserTab.General, (0, _languageHandler._td)("General"), "mx_UserSettingsDialog_settingsIcon", /*#__PURE__*/_react.default.createElement(_GeneralUserSettingsTab.default, {
      closeSettingsFn: this.props.onFinished
    })));
    tabs.push(new _TabbedView.Tab(UserTab.Appearance, (0, _languageHandler._td)("Appearance"), "mx_UserSettingsDialog_appearanceIcon", /*#__PURE__*/_react.default.createElement(_AppearanceUserSettingsTab.default, null)));

    if (_SettingsStore.default.getValue(_UIFeature.UIFeature.Flair)) {
      tabs.push(new _TabbedView.Tab(UserTab.Flair, (0, _languageHandler._td)("Flair"), "mx_UserSettingsDialog_flairIcon", /*#__PURE__*/_react.default.createElement(_FlairUserSettingsTab.default, null)));
    }

    tabs.push(new _TabbedView.Tab(UserTab.Notifications, (0, _languageHandler._td)("Notifications"), "mx_UserSettingsDialog_bellIcon", /*#__PURE__*/_react.default.createElement(_NotificationUserSettingsTab.default, null)));
    tabs.push(new _TabbedView.Tab(UserTab.Preferences, (0, _languageHandler._td)("Preferences"), "mx_UserSettingsDialog_preferencesIcon", /*#__PURE__*/_react.default.createElement(_PreferencesUserSettingsTab.default, {
      closeSettingsFn: this.props.onFinished
    })));

    if (_SettingsStore.default.getValue("feature_spaces_metaspaces")) {
      tabs.push(new _TabbedView.Tab(UserTab.Sidebar, (0, _languageHandler._td)("Sidebar"), "mx_UserSettingsDialog_sidebarIcon", /*#__PURE__*/_react.default.createElement(_SidebarUserSettingsTab.default, null)));
    }

    if (_SettingsStore.default.getValue(_UIFeature.UIFeature.Voip)) {
      tabs.push(new _TabbedView.Tab(UserTab.Voice, (0, _languageHandler._td)("Voice & Video"), "mx_UserSettingsDialog_voiceIcon", /*#__PURE__*/_react.default.createElement(_VoiceUserSettingsTab.default, null)));
    }

    tabs.push(new _TabbedView.Tab(UserTab.Security, (0, _languageHandler._td)("Security & Privacy"), "mx_UserSettingsDialog_securityIcon", /*#__PURE__*/_react.default.createElement(_SecurityUserSettingsTab.default, {
      closeSettingsFn: this.props.onFinished
    }))); // Show the Labs tab if enabled or if there are any active betas

    if (_SdkConfig.default.get()['showLabsSettings'] || _SettingsStore.default.getFeatureSettingNames().some(k => _SettingsStore.default.getBetaInfo(k))) {
      tabs.push(new _TabbedView.Tab(UserTab.Labs, (0, _languageHandler._td)("Labs"), "mx_UserSettingsDialog_labsIcon", /*#__PURE__*/_react.default.createElement(_LabsUserSettingsTab.default, null)));
    }

    if (this.state.mjolnirEnabled) {
      tabs.push(new _TabbedView.Tab(UserTab.Mjolnir, (0, _languageHandler._td)("Ignored users"), "mx_UserSettingsDialog_mjolnirIcon", /*#__PURE__*/_react.default.createElement(_MjolnirUserSettingsTab.default, null)));
    }

    tabs.push(new _TabbedView.Tab(UserTab.Help, (0, _languageHandler._td)("Help & About"), "mx_UserSettingsDialog_helpIcon", /*#__PURE__*/_react.default.createElement(_HelpUserSettingsTab.default, {
      closeSettingsFn: () => this.props.onFinished(true)
    })));
    return tabs;
  }

  render() {
    return /*#__PURE__*/_react.default.createElement(_BaseDialog.default, {
      className: "mx_UserSettingsDialog",
      hasCancel: true,
      onFinished: this.props.onFinished,
      title: (0, _languageHandler._t)("Settings")
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsDialog_content"
    }, /*#__PURE__*/_react.default.createElement(_TabbedView.default, {
      tabs: this.getTabs(),
      initialTabId: this.props.initialTabId
    })));
  }

}) || _class);
exports.default = UserSettingsDialog;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,