"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _SdkConfig = _interopRequireDefault(require("../../../SdkConfig"));

var _Modal = _interopRequireDefault(require("../../../Modal"));

var _languageHandler = require("../../../languageHandler");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _QuestionDialog = _interopRequireDefault(require("./QuestionDialog"));

var _BugReportDialog = _interopRequireDefault(require("./BugReportDialog"));

var _BaseDialog = _interopRequireDefault(require("./BaseDialog"));

var _DialogButtons = _interopRequireDefault(require("../elements/DialogButtons"));

var _dec, _class;

let SessionRestoreErrorDialog = (_dec = (0, _replaceableComponent.replaceableComponent)("views.dialogs.SessionRestoreErrorDialog"), _dec(_class = class SessionRestoreErrorDialog extends _react.default.Component {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "sendBugReport", () => {
      _Modal.default.createTrackedDialog('Session Restore Error', 'Send Bug Report Dialog', _BugReportDialog.default, {
        error: this.props.error
      });
    });
    (0, _defineProperty2.default)(this, "onClearStorageClick", () => {
      _Modal.default.createTrackedDialog('Session Restore Confirm Logout', '', _QuestionDialog.default, {
        title: (0, _languageHandler._t)("Sign out"),
        description: /*#__PURE__*/_react.default.createElement("div", null, (0, _languageHandler._t)("Sign out and remove encryption keys?")),
        button: (0, _languageHandler._t)("Sign out"),
        danger: true,
        onFinished: this.props.onFinished
      });
    });
    (0, _defineProperty2.default)(this, "onRefreshClick", () => {
      // Is this likely to help? Probably not, but giving only one button
      // that clears your storage seems awful.
      window.location.reload();
    });
  }

  render() {
    const brand = _SdkConfig.default.get().brand;

    const clearStorageButton = /*#__PURE__*/_react.default.createElement("button", {
      onClick: this.onClearStorageClick,
      className: "danger"
    }, (0, _languageHandler._t)("Clear Storage and Sign Out"));

    let dialogButtons;

    if (_SdkConfig.default.get().bug_report_endpoint_url) {
      dialogButtons = /*#__PURE__*/_react.default.createElement(_DialogButtons.default, {
        primaryButton: (0, _languageHandler._t)("Send Logs"),
        onPrimaryButtonClick: this.sendBugReport,
        focus: true,
        hasCancel: false
      }, clearStorageButton);
    } else {
      dialogButtons = /*#__PURE__*/_react.default.createElement(_DialogButtons.default, {
        primaryButton: (0, _languageHandler._t)("Refresh"),
        onPrimaryButtonClick: this.onRefreshClick,
        focus: true,
        hasCancel: false
      }, clearStorageButton);
    }

    return /*#__PURE__*/_react.default.createElement(_BaseDialog.default, {
      className: "mx_ErrorDialog",
      onFinished: this.props.onFinished,
      title: (0, _languageHandler._t)('Unable to restore session'),
      contentId: "mx_Dialog_content",
      hasCancel: false
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_Dialog_content",
      id: "mx_Dialog_content"
    }, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("We encountered an error trying to restore your previous session.")), /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("If you have previously used a more recent version of %(brand)s, your session " + "may be incompatible with this version. Close this window and return " + "to the more recent version.", {
      brand
    })), /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Clearing your browser's storage may fix the problem, but will sign you " + "out and cause any encrypted chat history to become unreadable."))), dialogButtons);
  }

}) || _class);
exports.default = SessionRestoreErrorDialog;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,