"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _BaseDialog = _interopRequireDefault(require("./BaseDialog"));

var _languageHandler = require("../../../languageHandler");

var _Field = _interopRequireDefault(require("../elements/Field"));

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _arrays = require("../../../utils/arrays");

var _SdkConfig = _interopRequireDefault(require("../../../SdkConfig"));

var _InviteDialog = _interopRequireDefault(require("./InviteDialog"));

var _BaseAvatar = _interopRequireDefault(require("../avatars/BaseAvatar"));

var _RoomInvite = require("../../../RoomInvite");

var _StyledCheckbox = _interopRequireDefault(require("../elements/StyledCheckbox"));

var _Modal = _interopRequireDefault(require("../../../Modal"));

var _ErrorDialog = _interopRequireDefault(require("./ErrorDialog"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _Media = require("../../../customisations/Media");

var _logger = require("matrix-js-sdk/src/logger");

var _dec, _class;

let CommunityPrototypeInviteDialog = (_dec = (0, _replaceableComponent.replaceableComponent)("views.dialogs.CommunityPrototypeInviteDialog"), _dec(_class = class CommunityPrototypeInviteDialog extends _react.default.PureComponent {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "onSubmit", async ev => {
      ev.preventDefault();
      ev.stopPropagation();
      this.setState({
        busy: true
      });

      try {
        const targets = [...this.state.emailTargets, ...this.state.userTargets];
        const result = await (0, _RoomInvite.inviteMultipleToRoom)(this.props.roomId, targets);

        const room = _MatrixClientPeg.MatrixClientPeg.get().getRoom(this.props.roomId);

        const success = (0, _RoomInvite.showAnyInviteErrors)(result.states, room, result.inviter);

        if (success) {
          this.props.onFinished(true);
        } else {
          this.setState({
            busy: false
          });
        }
      } catch (e) {
        this.setState({
          busy: false
        });

        _logger.logger.error(e);

        _Modal.default.createTrackedDialog('Failed to invite', '', _ErrorDialog.default, {
          title: (0, _languageHandler._t)("Failed to invite"),
          description: e && e.message ? e.message : (0, _languageHandler._t)("Operation failed")
        });
      }
    });
    (0, _defineProperty2.default)(this, "onAddressChange", (ev, index) => {
      const targets = (0, _arrays.arrayFastClone)(this.state.emailTargets);

      if (index >= targets.length) {
        targets.push(ev.target.value);
      } else {
        targets[index] = ev.target.value;
      }

      this.setState({
        emailTargets: targets
      });
    });
    (0, _defineProperty2.default)(this, "onAddressBlur", index => {
      const targets = (0, _arrays.arrayFastClone)(this.state.emailTargets);
      if (index >= targets.length) return; // not important

      if (targets[index].trim() === "") {
        targets.splice(index, 1);
        this.setState({
          emailTargets: targets
        });
      }
    });
    (0, _defineProperty2.default)(this, "onShowPeopleClick", () => {
      this.setState({
        showPeople: !this.state.showPeople
      });
    });
    (0, _defineProperty2.default)(this, "setPersonToggle", (person, selected) => {
      const targets = (0, _arrays.arrayFastClone)(this.state.userTargets);

      if (selected && !targets.includes(person.userId)) {
        targets.push(person.userId);
      } else if (!selected && targets.includes(person.userId)) {
        targets.splice(targets.indexOf(person.userId), 1);
      }

      this.setState({
        userTargets: targets
      });
    });
    (0, _defineProperty2.default)(this, "onShowMorePeople", () => {
      this.setState({
        numPeople: this.state.numPeople + 5
      }); // arbitrary increase
    });
    this.state = {
      emailTargets: [],
      userTargets: [],
      showPeople: false,
      people: this.buildSuggestions(),
      numPeople: 5,
      // arbitrary default
      busy: false
    };
  }

  buildSuggestions() {
    const alreadyInvited = new Set([_MatrixClientPeg.MatrixClientPeg.get().getUserId(), _SdkConfig.default.get()['welcomeUserId']]);

    if (this.props.roomId) {
      const room = _MatrixClientPeg.MatrixClientPeg.get().getRoom(this.props.roomId);

      if (!room) throw new Error("Room ID given to InviteDialog does not look like a room");
      room.getMembersWithMembership('invite').forEach(m => alreadyInvited.add(m.userId));
      room.getMembersWithMembership('join').forEach(m => alreadyInvited.add(m.userId)); // add banned users, so we don't try to invite them

      room.getMembersWithMembership('ban').forEach(m => alreadyInvited.add(m.userId));
    }

    return _InviteDialog.default.buildRecents(alreadyInvited);
  }

  renderPerson(person, key) {
    const avatarSize = 36;
    let avatarUrl = null;

    if (person.user.getMxcAvatarUrl()) {
      avatarUrl = (0, _Media.mediaFromMxc)(person.user.getMxcAvatarUrl()).getSquareThumbnailHttp(avatarSize);
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_CommunityPrototypeInviteDialog_person",
      key: key
    }, /*#__PURE__*/_react.default.createElement(_BaseAvatar.default, {
      url: avatarUrl,
      name: person.user.name,
      idName: person.user.userId,
      width: avatarSize,
      height: avatarSize
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_CommunityPrototypeInviteDialog_personIdentifiers"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_CommunityPrototypeInviteDialog_personName"
    }, person.user.name), /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_CommunityPrototypeInviteDialog_personId"
    }, person.userId)), /*#__PURE__*/_react.default.createElement(_StyledCheckbox.default, {
      onChange: e => this.setPersonToggle(person, e.target.checked)
    }));
  }

  render() {
    const emailAddresses = [];
    this.state.emailTargets.forEach((address, i) => {
      emailAddresses.push( /*#__PURE__*/_react.default.createElement(_Field.default, {
        key: i,
        value: address,
        onChange: e => this.onAddressChange(e, i),
        label: (0, _languageHandler._t)("Email address"),
        placeholder: (0, _languageHandler._t)("Email address"),
        onBlur: () => this.onAddressBlur(i)
      }));
    }); // Push a clean input

    emailAddresses.push( /*#__PURE__*/_react.default.createElement(_Field.default, {
      key: emailAddresses.length,
      value: "",
      onChange: e => this.onAddressChange(e, emailAddresses.length),
      label: emailAddresses.length > 0 ? (0, _languageHandler._t)("Add another email") : (0, _languageHandler._t)("Email address"),
      placeholder: emailAddresses.length > 0 ? (0, _languageHandler._t)("Add another email") : (0, _languageHandler._t)("Email address")
    }));
    let peopleIntro = null;
    const people = [];

    if (this.state.showPeople) {
      const humansToPresent = this.state.people.slice(0, this.state.numPeople);
      humansToPresent.forEach((person, i) => {
        people.push(this.renderPerson(person, i));
      });

      if (humansToPresent.length < this.state.people.length) {
        people.push( /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
          onClick: this.onShowMorePeople,
          kind: "link",
          key: "more",
          className: "mx_CommunityPrototypeInviteDialog_morePeople"
        }, (0, _languageHandler._t)("Show more")));
      }
    }

    if (this.state.people.length > 0) {
      peopleIntro = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_CommunityPrototypeInviteDialog_people"
      }, /*#__PURE__*/_react.default.createElement("span", null, (0, _languageHandler._t)("People you know on %(brand)s", {
        brand: _SdkConfig.default.get().brand
      })), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        onClick: this.onShowPeopleClick
      }, this.state.showPeople ? (0, _languageHandler._t)("Hide") : (0, _languageHandler._t)("Show")));
    }

    let buttonText = (0, _languageHandler._t)("Skip");
    const targetCount = this.state.userTargets.length + this.state.emailTargets.length;

    if (targetCount > 0) {
      buttonText = (0, _languageHandler._t)("Send %(count)s invites", {
        count: targetCount
      });
    }

    return /*#__PURE__*/_react.default.createElement(_BaseDialog.default, {
      className: "mx_CommunityPrototypeInviteDialog",
      onFinished: this.props.onFinished,
      title: (0, _languageHandler._t)("Invite people to join %(communityName)s", {
        communityName: this.props.communityName
      })
    }, /*#__PURE__*/_react.default.createElement("form", {
      onSubmit: this.onSubmit
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_Dialog_content"
    }, emailAddresses, peopleIntro, people, /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      kind: "primary",
      onClick: this.onSubmit,
      disabled: this.state.busy,
      className: "mx_CommunityPrototypeInviteDialog_primaryButton"
    }, buttonText))));
  }

}) || _class);
exports.default = CommunityPrototypeInviteDialog;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,