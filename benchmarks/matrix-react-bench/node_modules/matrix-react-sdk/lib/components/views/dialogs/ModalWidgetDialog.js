"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var React = _interopRequireWildcard(require("react"));

var _BaseDialog = _interopRequireDefault(require("./BaseDialog"));

var _languageHandler = require("../../../languageHandler");

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

var _matrixWidgetApi = require("matrix-widget-api");

var _StopGapWidgetDriver = require("../../../stores/widgets/StopGapWidgetDriver");

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _OwnProfileStore = require("../../../stores/OwnProfileStore");

var _arrays = require("../../../utils/arrays");

var _StopGapWidget = require("../../../stores/widgets/StopGapWidget");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _identifiers = require("../../../identifiers");

var _SettingsStore = _interopRequireDefault(require("../../../settings/SettingsStore"));

var _dec, _class;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const MAX_BUTTONS = 3;
let ModalWidgetDialog = (_dec = (0, _replaceableComponent.replaceableComponent)("views.dialogs.ModalWidgetDialog"), _dec(_class = class ModalWidgetDialog extends React.PureComponent {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "widget", void 0);
    (0, _defineProperty2.default)(this, "possibleButtons", void 0);
    (0, _defineProperty2.default)(this, "appFrame", /*#__PURE__*/React.createRef());
    (0, _defineProperty2.default)(this, "state", {
      disabledButtonIds: (this.props.widgetDefinition.buttons || []).filter(b => b.disabled).map(b => b.id)
    });
    (0, _defineProperty2.default)(this, "onReady", () => {
      this.state.messaging.sendWidgetConfig(this.props.widgetDefinition);
    });
    (0, _defineProperty2.default)(this, "onLoad", () => {
      this.state.messaging.once("ready", this.onReady);
      this.state.messaging.on(`action:${_matrixWidgetApi.WidgetApiFromWidgetAction.CloseModalWidget}`, this.onWidgetClose);
      this.state.messaging.on(`action:${_matrixWidgetApi.WidgetApiFromWidgetAction.SetModalButtonEnabled}`, this.onButtonEnableToggle);
    });
    (0, _defineProperty2.default)(this, "onWidgetClose", ev => {
      this.props.onFinished(true, ev.detail.data);
    });
    (0, _defineProperty2.default)(this, "onButtonEnableToggle", ev => {
      ev.preventDefault();
      const isClose = ev.detail.data.button === _matrixWidgetApi.BuiltInModalButtonID.Close;

      if (isClose || !this.possibleButtons.includes(ev.detail.data.button)) {
        return this.state.messaging.transport.reply(ev.detail, {
          error: {
            message: "Invalid button"
          }
        });
      }

      let buttonIds;

      if (ev.detail.data.enabled) {
        buttonIds = (0, _arrays.arrayFastClone)(this.state.disabledButtonIds).filter(i => i !== ev.detail.data.button);
      } else {
        // use a set to swap the operation to avoid memory leaky arrays.
        const tempSet = new Set(this.state.disabledButtonIds);
        tempSet.add(ev.detail.data.button);
        buttonIds = Array.from(tempSet);
      }

      this.setState({
        disabledButtonIds: buttonIds
      });
      this.state.messaging.transport.reply(ev.detail, {});
    });
    this.widget = new _StopGapWidget.ElementWidget(_objectSpread(_objectSpread({}, this.props.widgetDefinition), {}, {
      creatorUserId: _MatrixClientPeg.MatrixClientPeg.get().getUserId(),
      id: `modal_${this.props.sourceWidgetId}`
    }));
    this.possibleButtons = (this.props.widgetDefinition.buttons || []).map(b => b.id);
  }

  componentDidMount() {
    const driver = new _StopGapWidgetDriver.StopGapWidgetDriver([], this.widget, _matrixWidgetApi.WidgetKind.Modal);
    const messaging = new _matrixWidgetApi.ClientWidgetApi(this.widget, this.appFrame.current, driver);
    this.setState({
      messaging
    });
  }

  componentWillUnmount() {
    this.state.messaging.off("ready", this.onReady);
    this.state.messaging.off(`action:${_matrixWidgetApi.WidgetApiFromWidgetAction.CloseModalWidget}`, this.onWidgetClose);
    this.state.messaging.stop();
  }

  render() {
    const templated = this.widget.getCompleteUrl({
      widgetRoomId: this.props.widgetRoomId,
      currentUserId: _MatrixClientPeg.MatrixClientPeg.get().getUserId(),
      userDisplayName: _OwnProfileStore.OwnProfileStore.instance.displayName,
      userHttpAvatarUrl: _OwnProfileStore.OwnProfileStore.instance.getHttpAvatarUrl(),
      clientId: _identifiers.ELEMENT_CLIENT_ID,
      clientTheme: _SettingsStore.default.getValue("theme"),
      clientLanguage: (0, _languageHandler.getUserLanguage)()
    });
    const parsed = new URL(templated); // Add in some legacy support sprinkles (for non-popout widgets)
    // TODO: Replace these with proper widget params
    // See https://github.com/matrix-org/matrix-doc/pull/1958/files#r405714833

    parsed.searchParams.set('widgetId', this.widget.id);
    parsed.searchParams.set('parentUrl', window.location.href.split('#', 2)[0]); // Replace the encoded dollar signs back to dollar signs. They have no special meaning
    // in HTTP, but URL parsers encode them anyways.

    const widgetUrl = parsed.toString().replace(/%24/g, '$');
    let buttons;

    if (this.props.widgetDefinition.buttons) {
      // show first button rightmost for a more natural specification
      buttons = this.props.widgetDefinition.buttons.slice(0, MAX_BUTTONS).reverse().map(def => {
        let kind = "secondary";

        switch (def.kind) {
          case _matrixWidgetApi.ModalButtonKind.Primary:
            kind = "primary";
            break;

          case _matrixWidgetApi.ModalButtonKind.Secondary:
            kind = "primary_outline";
            break;

          case _matrixWidgetApi.ModalButtonKind.Danger:
            kind = "danger";
            break;
        }

        const onClick = () => {
          this.state.messaging.notifyModalWidgetButtonClicked(def.id);
        };

        const isDisabled = this.state.disabledButtonIds.includes(def.id);
        return /*#__PURE__*/React.createElement(_AccessibleButton.default, {
          key: def.id,
          kind: kind,
          onClick: onClick,
          disabled: isDisabled
        }, def.label);
      });
    }

    return /*#__PURE__*/React.createElement(_BaseDialog.default, {
      title: this.props.widgetDefinition.name || (0, _languageHandler._t)("Modal Widget"),
      className: "mx_ModalWidgetDialog",
      contentId: "mx_Dialog_content",
      onFinished: this.props.onFinished
    }, /*#__PURE__*/React.createElement("div", {
      className: "mx_ModalWidgetDialog_warning"
    }, /*#__PURE__*/React.createElement("img", {
      src: require("../../../../res/img/element-icons/warning-badge.svg"),
      height: "16",
      width: "16",
      alt: ""
    }), (0, _languageHandler._t)("Data on this screen is shared with %(widgetDomain)s", {
      widgetDomain: parsed.hostname
    })), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("iframe", {
      ref: this.appFrame,
      sandbox: "allow-forms allow-scripts allow-same-origin",
      src: widgetUrl,
      onLoad: this.onLoad
    })), /*#__PURE__*/React.createElement("div", {
      className: "mx_ModalWidgetDialog_buttons"
    }, buttons));
  }

}) || _class);
exports.default = ModalWidgetDialog;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,