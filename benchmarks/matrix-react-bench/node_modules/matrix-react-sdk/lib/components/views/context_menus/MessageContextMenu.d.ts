import React from 'react';
import { EventStatus, MatrixEvent } from 'matrix-js-sdk/src/models/event';
import { RoomPermalinkCreator } from "../../../utils/permalinks/Permalinks";
import { IPosition, ChevronFace } from '../../structures/ContextMenu';
import RoomContext from '../../../contexts/RoomContext';
export declare function canCancel(eventStatus: EventStatus): boolean;
export interface IEventTileOps {
    isWidgetHidden(): boolean;
    unhideWidget(): void;
}
export interface IOperableEventTile {
    getEventTileOps(): IEventTileOps;
}
interface IProps extends IPosition {
    chevronFace: ChevronFace;
    mxEvent: MatrixEvent;
    eventTileOps?: IEventTileOps;
    permalinkCreator?: RoomPermalinkCreator;
    collapseReplyChain?(): void;
    onFinished(): void;
    onCloseDialog?(): void;
}
interface IState {
    canRedact: boolean;
    canPin: boolean;
}
export default class MessageContextMenu extends React.Component<IProps, IState> {
    static contextType: React.Context<import("../../structures/RoomView").IRoomState>;
    context: React.ContextType<typeof RoomContext>;
    state: {
        canRedact: boolean;
        canPin: boolean;
    };
    componentDidMount(): void;
    componentWillUnmount(): void;
    private checkPermissions;
    private isPinned;
    private onResendReactionsClick;
    private onReportEventClick;
    private onViewSourceClick;
    private onRedactClick;
    private onForwardClick;
    private onPinClick;
    private closeMenu;
    private onUnhidePreviewClick;
    private onQuoteClick;
    private onPermalinkClick;
    private onCollapseReplyChainClick;
    private getReactions;
    private getPendingReactions;
    private getUnsentReactions;
    private viewInRoom;
    render(): JSX.Element;
}
export {};
