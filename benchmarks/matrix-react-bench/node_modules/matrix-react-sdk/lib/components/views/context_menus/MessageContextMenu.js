"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.canCancel = canCancel;
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _event = require("matrix-js-sdk/src/models/event");

var _event2 = require("matrix-js-sdk/src/@types/event");

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _languageHandler = require("../../../languageHandler");

var _Modal = _interopRequireDefault(require("../../../Modal"));

var _Resend = _interopRequireDefault(require("../../../Resend"));

var _SettingsStore = _interopRequireDefault(require("../../../settings/SettingsStore"));

var _HtmlUtils = require("../../../HtmlUtils");

var _EventUtils = require("../../../utils/EventUtils");

var _IconizedContextMenu = _interopRequireWildcard(require("./IconizedContextMenu"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _PinnedMessagesCard = require("../right_panel/PinnedMessagesCard");

var _ForwardDialog = _interopRequireDefault(require("../dialogs/ForwardDialog"));

var _actions = require("../../../dispatcher/actions");

var _ReportEventDialog = _interopRequireDefault(require("../dialogs/ReportEventDialog"));

var _ViewSource = _interopRequireDefault(require("../../structures/ViewSource"));

var _ConfirmRedactDialog = require("../dialogs/ConfirmRedactDialog");

var _ShareDialog = _interopRequireDefault(require("../dialogs/ShareDialog"));

var _RoomContext = _interopRequireWildcard(require("../../../contexts/RoomContext"));

var _WidgetLayoutStore = require("../../../stores/widgets/WidgetLayoutStore");

var _dec, _class, _class2, _temp;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function canCancel(eventStatus) {
  return eventStatus === _event.EventStatus.QUEUED || eventStatus === _event.EventStatus.NOT_SENT;
}

let MessageContextMenu = (_dec = (0, _replaceableComponent.replaceableComponent)("views.context_menus.MessageContextMenu"), _dec(_class = (_temp = _class2 = class MessageContextMenu extends _react.default.Component {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "context", void 0);
    (0, _defineProperty2.default)(this, "state", {
      canRedact: false,
      canPin: false
    });
    (0, _defineProperty2.default)(this, "checkPermissions", () => {
      const cli = _MatrixClientPeg.MatrixClientPeg.get();

      const room = cli.getRoom(this.props.mxEvent.getRoomId()); // We explicitly decline to show the redact option on ACL events as it has a potential
      // to obliterate the room - https://github.com/matrix-org/synapse/issues/4042
      // Similarly for encryption events, since redacting them "breaks everything"

      const canRedact = room.currentState.maySendRedactionForEvent(this.props.mxEvent, cli.credentials.userId) && this.props.mxEvent.getType() !== _event2.EventType.RoomServerAcl && this.props.mxEvent.getType() !== _event2.EventType.RoomEncryption;

      let canPin = room.currentState.mayClientSendStateEvent(_event2.EventType.RoomPinnedEvents, cli); // HACK: Intentionally say we can't pin if the user doesn't want to use the functionality

      if (!_SettingsStore.default.getValue("feature_pinning")) canPin = false;
      this.setState({
        canRedact,
        canPin
      });
    });
    (0, _defineProperty2.default)(this, "onResendReactionsClick", () => {
      for (const reaction of this.getUnsentReactions()) {
        _Resend.default.resend(reaction);
      }

      this.closeMenu();
    });
    (0, _defineProperty2.default)(this, "onReportEventClick", () => {
      _Modal.default.createTrackedDialog('Report Event', '', _ReportEventDialog.default, {
        mxEvent: this.props.mxEvent
      }, 'mx_Dialog_reportEvent');

      this.closeMenu();
    });
    (0, _defineProperty2.default)(this, "onViewSourceClick", () => {
      _Modal.default.createTrackedDialog('View Event Source', '', _ViewSource.default, {
        mxEvent: this.props.mxEvent
      }, 'mx_Dialog_viewsource');

      this.closeMenu();
    });
    (0, _defineProperty2.default)(this, "onRedactClick", () => {
      const {
        mxEvent,
        onCloseDialog
      } = this.props;
      (0, _ConfirmRedactDialog.createRedactEventDialog)({
        mxEvent,
        onCloseDialog
      });
      this.closeMenu();
    });
    (0, _defineProperty2.default)(this, "onForwardClick", () => {
      _Modal.default.createTrackedDialog('Forward Message', '', _ForwardDialog.default, {
        matrixClient: _MatrixClientPeg.MatrixClientPeg.get(),
        event: this.props.mxEvent,
        permalinkCreator: this.props.permalinkCreator
      });

      this.closeMenu();
    });
    (0, _defineProperty2.default)(this, "onPinClick", () => {
      var _room$currentState, _room$currentState$ge;

      const cli = _MatrixClientPeg.MatrixClientPeg.get();

      const room = cli.getRoom(this.props.mxEvent.getRoomId());
      const eventId = this.props.mxEvent.getId();
      const pinnedIds = (room === null || room === void 0 ? void 0 : (_room$currentState = room.currentState) === null || _room$currentState === void 0 ? void 0 : (_room$currentState$ge = _room$currentState.getStateEvents(_event2.EventType.RoomPinnedEvents, "")) === null || _room$currentState$ge === void 0 ? void 0 : _room$currentState$ge.getContent().pinned) || [];

      if (pinnedIds.includes(eventId)) {
        pinnedIds.splice(pinnedIds.indexOf(eventId), 1);
      } else {
        var _room$getAccountData, _room$getAccountData$;

        pinnedIds.push(eventId);
        cli.setRoomAccountData(room.roomId, _PinnedMessagesCard.ReadPinsEventId, {
          event_ids: [...(((_room$getAccountData = room.getAccountData(_PinnedMessagesCard.ReadPinsEventId)) === null || _room$getAccountData === void 0 ? void 0 : (_room$getAccountData$ = _room$getAccountData.getContent()) === null || _room$getAccountData$ === void 0 ? void 0 : _room$getAccountData$.event_ids) || []), eventId]
        });
      }

      cli.sendStateEvent(this.props.mxEvent.getRoomId(), _event2.EventType.RoomPinnedEvents, {
        pinned: pinnedIds
      }, "");
      this.closeMenu();
    });
    (0, _defineProperty2.default)(this, "closeMenu", () => {
      this.props.onFinished();
    });
    (0, _defineProperty2.default)(this, "onUnhidePreviewClick", () => {
      var _this$props$eventTile;

      (_this$props$eventTile = this.props.eventTileOps) === null || _this$props$eventTile === void 0 ? void 0 : _this$props$eventTile.unhideWidget();
      this.closeMenu();
    });
    (0, _defineProperty2.default)(this, "onQuoteClick", () => {
      _dispatcher.default.dispatch({
        action: _actions.Action.ComposerInsert,
        event: this.props.mxEvent,
        timelineRenderingType: this.context.timelineRenderingType
      });

      this.closeMenu();
    });
    (0, _defineProperty2.default)(this, "onPermalinkClick", e => {
      e.preventDefault();

      _Modal.default.createTrackedDialog('share room message dialog', '', _ShareDialog.default, {
        target: this.props.mxEvent,
        permalinkCreator: this.props.permalinkCreator
      });

      this.closeMenu();
    });
    (0, _defineProperty2.default)(this, "onCollapseReplyChainClick", () => {
      this.props.collapseReplyChain();
      this.closeMenu();
    });
    (0, _defineProperty2.default)(this, "viewInRoom", () => {
      _dispatcher.default.dispatch({
        action: _actions.Action.ViewRoom,
        event_id: this.props.mxEvent.getId(),
        highlighted: true,
        room_id: this.props.mxEvent.getRoomId()
      });

      this.closeMenu();
    });
  }

  componentDidMount() {
    _MatrixClientPeg.MatrixClientPeg.get().on('RoomMember.powerLevel', this.checkPermissions);

    this.checkPermissions();
  }

  componentWillUnmount() {
    const cli = _MatrixClientPeg.MatrixClientPeg.get();

    if (cli) {
      cli.removeListener('RoomMember.powerLevel', this.checkPermissions);
    }
  }

  isPinned() {
    const room = _MatrixClientPeg.MatrixClientPeg.get().getRoom(this.props.mxEvent.getRoomId());

    const pinnedEvent = room.currentState.getStateEvents(_event2.EventType.RoomPinnedEvents, '');
    if (!pinnedEvent) return false;
    const content = pinnedEvent.getContent();
    return content.pinned && Array.isArray(content.pinned) && content.pinned.includes(this.props.mxEvent.getId());
  }

  getReactions(filter) {
    const cli = _MatrixClientPeg.MatrixClientPeg.get();

    const room = cli.getRoom(this.props.mxEvent.getRoomId());
    const eventId = this.props.mxEvent.getId();
    return room.getPendingEvents().filter(e => {
      const relation = e.getRelation();
      return (relation === null || relation === void 0 ? void 0 : relation.rel_type) === _event2.RelationType.Annotation && relation.event_id === eventId && filter(e);
    });
  }

  getPendingReactions() {
    return this.getReactions(e => canCancel(e.status));
  }

  getUnsentReactions() {
    return this.getReactions(e => e.status === _event.EventStatus.NOT_SENT);
  }

  render() {
    var _this$props$mxEvent, _this$props$mxEvent$g;

    const cli = _MatrixClientPeg.MatrixClientPeg.get();

    const me = cli.getUserId();
    const mxEvent = this.props.mxEvent;
    const eventStatus = mxEvent.status;
    const unsentReactionsCount = this.getUnsentReactions().length;
    let resendReactionsButton;
    let redactButton;
    let forwardButton;
    let pinButton;
    let unhidePreviewButton;
    let externalURLButton;
    let quoteButton;
    let collapseReplyChain;
    let redactItemList; // status is SENT before remote-echo, null after

    const isSent = !eventStatus || eventStatus === _event.EventStatus.SENT;

    if (!mxEvent.isRedacted()) {
      if (unsentReactionsCount !== 0) {
        resendReactionsButton = /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
          iconClassName: "mx_MessageContextMenu_iconResend",
          label: (0, _languageHandler._t)('Resend %(unsentCount)s reaction(s)', {
            unsentCount: unsentReactionsCount
          }),
          onClick: this.onResendReactionsClick
        });
      }
    }

    if (isSent && this.state.canRedact) {
      redactButton = /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
        iconClassName: "mx_MessageContextMenu_iconRedact",
        label: (0, _languageHandler._t)("Remove"),
        onClick: this.onRedactClick
      });
    }

    if ((0, _EventUtils.isContentActionable)(mxEvent)) {
      forwardButton = /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
        iconClassName: "mx_MessageContextMenu_iconForward",
        label: (0, _languageHandler._t)("Forward"),
        onClick: this.onForwardClick
      });

      if (this.state.canPin) {
        pinButton = /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
          iconClassName: "mx_MessageContextMenu_iconPin",
          label: this.isPinned() ? (0, _languageHandler._t)('Unpin') : (0, _languageHandler._t)('Pin'),
          onClick: this.onPinClick
        });
      }
    }

    const viewSourceButton = /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
      iconClassName: "mx_MessageContextMenu_iconSource",
      label: (0, _languageHandler._t)("View source"),
      onClick: this.onViewSourceClick
    });

    if (this.props.eventTileOps) {
      if (this.props.eventTileOps.isWidgetHidden()) {
        unhidePreviewButton = /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
          iconClassName: "mx_MessageContextMenu_iconUnhidePreview",
          label: (0, _languageHandler._t)("Show preview"),
          onClick: this.onUnhidePreviewClick
        });
      }
    }

    let permalink;

    if (this.props.permalinkCreator) {
      permalink = this.props.permalinkCreator.forEvent(this.props.mxEvent.getId());
    }

    const permalinkButton = /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
      iconClassName: "mx_MessageContextMenu_iconPermalink",
      onClick: this.onPermalinkClick,
      label: (0, _languageHandler._t)('Share'),
      element: "a",
      href: permalink,
      target: "_blank",
      rel: "noreferrer noopener"
    });

    if (this.props.eventTileOps) {
      // this event is rendered using TextualBody
      quoteButton = /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
        iconClassName: "mx_MessageContextMenu_iconQuote",
        label: (0, _languageHandler._t)("Quote"),
        onClick: this.onQuoteClick
      });
    } // Bridges can provide a 'external_url' to link back to the source.


    if (typeof mxEvent.getContent().external_url === "string" && (0, _HtmlUtils.isUrlPermitted)(mxEvent.getContent().external_url)) {
      externalURLButton = /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
        iconClassName: "mx_MessageContextMenu_iconLink",
        onClick: this.closeMenu,
        label: (0, _languageHandler._t)('Source URL'),
        element: "a",
        target: "_blank",
        rel: "noreferrer noopener",
        href: mxEvent.getContent().external_url
      });
    }

    if (this.props.collapseReplyChain) {
      collapseReplyChain = /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
        iconClassName: "mx_MessageContextMenu_iconCollapse",
        label: (0, _languageHandler._t)("Collapse reply thread"),
        onClick: this.onCollapseReplyChainClick
      });
    }

    let reportEventButton;

    if (mxEvent.getSender() !== me) {
      reportEventButton = /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
        iconClassName: "mx_MessageContextMenu_iconReport",
        label: (0, _languageHandler._t)("Report"),
        onClick: this.onReportEventClick
      });
    }

    const {
      timelineRenderingType
    } = this.context;
    const isThread = timelineRenderingType === _RoomContext.TimelineRenderingType.Thread || timelineRenderingType === _RoomContext.TimelineRenderingType.ThreadsList;
    const isThreadRootEvent = isThread && ((_this$props$mxEvent = this.props.mxEvent) === null || _this$props$mxEvent === void 0 ? void 0 : (_this$props$mxEvent$g = _this$props$mxEvent.getThread()) === null || _this$props$mxEvent$g === void 0 ? void 0 : _this$props$mxEvent$g.rootEvent) === this.props.mxEvent;
    const isMainSplitTimelineShown = !_WidgetLayoutStore.WidgetLayoutStore.instance.hasMaximisedWidget(_MatrixClientPeg.MatrixClientPeg.get().getRoom(mxEvent.getRoomId()));

    const commonItemsList = /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOptionList, null, isThreadRootEvent && isMainSplitTimelineShown && /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
      iconClassName: "mx_MessageContextMenu_iconViewInRoom",
      label: (0, _languageHandler._t)("View in room"),
      onClick: this.viewInRoom
    }), quoteButton, forwardButton, pinButton, permalinkButton, reportEventButton, externalURLButton, unhidePreviewButton, viewSourceButton, resendReactionsButton, collapseReplyChain);

    if (redactButton) {
      redactItemList = /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOptionList, {
        red: true
      }, redactButton);
    }

    return /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.default, (0, _extends2.default)({}, this.props, {
      className: "mx_MessageContextMenu",
      compact: true
    }), commonItemsList, redactItemList);
  }

}, (0, _defineProperty2.default)(_class2, "contextType", _RoomContext.default), _temp)) || _class);
exports.default = MessageContextMenu;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,