"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireWildcard(require("react"));

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _actions = require("../../../dispatcher/actions");

var _strings = require("../../../utils/strings");

var _ContextMenu = require("../../structures/ContextMenu");

var _languageHandler = require("../../../languageHandler");

var _IconizedContextMenu = _interopRequireWildcard(require("./IconizedContextMenu"));

var _WidgetLayoutStore = require("../../../stores/widgets/WidgetLayoutStore");

var _MatrixClientPeg = require("../../../MatrixClientPeg");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
Copyright 2021 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const contextMenuBelow = elementRect => {
  // align the context menu's icons with the icon which opened the context menu
  const left = elementRect.left + window.pageXOffset + elementRect.width;
  const top = elementRect.bottom + window.pageYOffset;
  const chevronFace = _ContextMenu.ChevronFace.None;
  return {
    left,
    top,
    chevronFace
  };
};

const ThreadListContextMenu = ({
  mxEvent,
  permalinkCreator,
  onMenuToggle
}) => {
  const [optionsPosition, setOptionsPosition] = (0, _react.useState)(null);
  const closeThreadOptions = (0, _react.useCallback)(() => {
    setOptionsPosition(null);
  }, []);
  const viewInRoom = (0, _react.useCallback)(evt => {
    evt.preventDefault();
    evt.stopPropagation();

    _dispatcher.default.dispatch({
      action: _actions.Action.ViewRoom,
      event_id: mxEvent.getId(),
      highlighted: true,
      room_id: mxEvent.getRoomId()
    });

    closeThreadOptions();
  }, [mxEvent, closeThreadOptions]);
  const copyLinkToThread = (0, _react.useCallback)(async evt => {
    evt.preventDefault();
    evt.stopPropagation();
    const matrixToUrl = permalinkCreator.forEvent(mxEvent.getId());
    await (0, _strings.copyPlaintext)(matrixToUrl);
    closeThreadOptions();
  }, [mxEvent, closeThreadOptions, permalinkCreator]);
  const toggleOptionsMenu = (0, _react.useCallback)(ev => {
    if (!!optionsPosition) {
      closeThreadOptions();
    } else {
      const position = ev.currentTarget.getBoundingClientRect();
      setOptionsPosition(position);
    }
  }, [closeThreadOptions, optionsPosition]);
  (0, _react.useEffect)(() => {
    if (onMenuToggle) {
      onMenuToggle(!!optionsPosition);
    }
  }, [optionsPosition, onMenuToggle]);
  const isMainSplitTimelineShown = !_WidgetLayoutStore.WidgetLayoutStore.instance.hasMaximisedWidget(_MatrixClientPeg.MatrixClientPeg.get().getRoom(mxEvent.getRoomId()));
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_ContextMenu.ContextMenuTooltipButton, {
    className: "mx_MessageActionBar_maskButton mx_MessageActionBar_optionsButton",
    onClick: toggleOptionsMenu,
    title: (0, _languageHandler._t)("Thread options"),
    isExpanded: !!optionsPosition
  }), !!optionsPosition && /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.default, (0, _extends2.default)({
    onFinished: closeThreadOptions,
    className: "mx_RoomTile_contextMenu",
    compact: true,
    rightAligned: true
  }, contextMenuBelow(optionsPosition)), /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOptionList, null, isMainSplitTimelineShown && /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
    onClick: e => viewInRoom(e),
    label: (0, _languageHandler._t)("View in room"),
    iconClassName: "mx_ThreadPanel_viewInRoom"
  }), /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
    onClick: e => copyLinkToThread(e),
    label: (0, _languageHandler._t)("Copy link to thread"),
    iconClassName: "mx_ThreadPanel_copyLinkToThread"
  }))));
};

var _default = ThreadListContextMenu;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,