"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _logger = require("matrix-js-sdk/src/logger");

var _IconizedContextMenu = _interopRequireWildcard(require("./IconizedContextMenu"));

var _languageHandler = require("../../../languageHandler");

var _MatrixClientContext = _interopRequireDefault(require("../../../contexts/MatrixClientContext"));

var _models = require("../../../stores/room-list/models");

var _RoomListStore = _interopRequireWildcard(require("../../../stores/room-list/RoomListStore"));

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _RoomListActions = _interopRequireDefault(require("../../../actions/RoomListActions"));

var _Keyboard = require("../../../Keyboard");

var _EchoChamber = require("../../../stores/local-echo/EchoChamber");

var _RoomNotifs = require("../../../RoomNotifs");

var _Modal = _interopRequireDefault(require("../../../Modal"));

var _ExportDialog = _interopRequireDefault(require("../dialogs/ExportDialog"));

var _RoomSummaryCard = require("../right_panel/RoomSummaryCard");

var _RoomViewStore = _interopRequireDefault(require("../../../stores/RoomViewStore"));

var _actions = require("../../../dispatcher/actions");

var _RightPanelStorePhases = require("../../../stores/RightPanelStorePhases");

var _RoomSettingsDialog = require("../dialogs/RoomSettingsDialog");

var _useEventEmitter = require("../../../hooks/useEventEmitter");

const _excluded = ["room", "onFinished"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const RoomContextMenu = _ref => {
  let {
    room,
    onFinished
  } = _ref,
      props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  const cli = (0, _react.useContext)(_MatrixClientContext.default);
  const roomTags = (0, _useEventEmitter.useEventEmitterState)(_RoomListStore.default.instance, _RoomListStore.LISTS_UPDATE_EVENT, () => _RoomListStore.default.instance.getTagsForRoom(room));
  let leaveOption;

  if (roomTags.includes(_models.DefaultTagID.Archived)) {
    const onForgetRoomClick = ev => {
      ev.preventDefault();
      ev.stopPropagation();

      _dispatcher.default.dispatch({
        action: "forget_room",
        room_id: room.roomId
      });

      onFinished();
    };

    leaveOption = /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
      iconClassName: "mx_RoomTile_iconSignOut",
      label: (0, _languageHandler._t)("Forget"),
      className: "mx_IconizedContextMenu_option_red",
      onClick: onForgetRoomClick
    });
  } else {
    const onLeaveRoomClick = ev => {
      ev.preventDefault();
      ev.stopPropagation();

      _dispatcher.default.dispatch({
        action: "leave_room",
        room_id: room.roomId
      });

      onFinished();
    };

    leaveOption = /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
      onClick: onLeaveRoomClick,
      label: (0, _languageHandler._t)("Leave"),
      className: "mx_IconizedContextMenu_option_red",
      iconClassName: "mx_RoomTile_iconSignOut"
    });
  }

  let inviteOption;

  if (room.canInvite(cli.getUserId())) {
    const onInviteClick = ev => {
      ev.preventDefault();
      ev.stopPropagation();

      _dispatcher.default.dispatch({
        action: "view_invite",
        roomId: room.roomId
      });

      onFinished();
    };

    inviteOption = /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
      onClick: onInviteClick,
      label: (0, _languageHandler._t)("Invite"),
      iconClassName: "mx_RoomTile_iconInvite"
    });
  }

  let favouriteOption;
  let lowPriorityOption;
  let notificationOption;

  if (room.getMyMembership() === "join") {
    const isFavorite = roomTags.includes(_models.DefaultTagID.Favourite);
    favouriteOption = /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuCheckbox, {
      onClick: e => onTagRoom(e, _models.DefaultTagID.Favourite),
      active: isFavorite,
      label: isFavorite ? (0, _languageHandler._t)("Favourited") : (0, _languageHandler._t)("Favourite"),
      iconClassName: "mx_RoomTile_iconStar"
    });
    const isLowPriority = roomTags.includes(_models.DefaultTagID.LowPriority);
    lowPriorityOption = /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuCheckbox, {
      onClick: e => onTagRoom(e, _models.DefaultTagID.LowPriority),
      active: isLowPriority,
      label: (0, _languageHandler._t)("Low priority"),
      iconClassName: "mx_RoomTile_iconArrowDown"
    });

    const echoChamber = _EchoChamber.EchoChamber.forRoom(room);

    let notificationLabel;
    let iconClassName;

    switch (echoChamber.notificationVolume) {
      case _RoomNotifs.RoomNotifState.AllMessages:
        notificationLabel = (0, _languageHandler._t)("Default");
        iconClassName = "mx_RoomTile_iconNotificationsDefault";
        break;

      case _RoomNotifs.RoomNotifState.AllMessagesLoud:
        notificationLabel = (0, _languageHandler._t)("All messages");
        iconClassName = "mx_RoomTile_iconNotificationsAllMessages";
        break;

      case _RoomNotifs.RoomNotifState.MentionsOnly:
        notificationLabel = (0, _languageHandler._t)("Mentions only");
        iconClassName = "mx_RoomTile_iconNotificationsMentionsKeywords";
        break;

      case _RoomNotifs.RoomNotifState.Mute:
        notificationLabel = (0, _languageHandler._t)("Mute");
        iconClassName = "mx_RoomTile_iconNotificationsNone";
        break;
    }

    notificationOption = /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
      onClick: ev => {
        ev.preventDefault();
        ev.stopPropagation();

        _dispatcher.default.dispatch({
          action: "open_room_settings",
          room_id: room.roomId,
          initial_tab_id: _RoomSettingsDialog.ROOM_NOTIFICATIONS_TAB
        });

        onFinished();
      },
      label: (0, _languageHandler._t)("Notifications"),
      iconClassName: iconClassName
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_IconizedContextMenu_sublabel"
    }, notificationLabel));
  }

  const onTagRoom = (ev, tagId) => {
    ev.preventDefault();
    ev.stopPropagation();

    if (tagId === _models.DefaultTagID.Favourite || tagId === _models.DefaultTagID.LowPriority) {
      const inverseTag = tagId === _models.DefaultTagID.Favourite ? _models.DefaultTagID.LowPriority : _models.DefaultTagID.Favourite;

      const isApplied = _RoomListStore.default.instance.getTagsForRoom(room).includes(tagId);

      const removeTag = isApplied ? tagId : inverseTag;
      const addTag = isApplied ? null : tagId;

      _dispatcher.default.dispatch(_RoomListActions.default.tagRoom(cli, room, removeTag, addTag, undefined, 0));
    } else {
      _logger.logger.warn(`Unexpected tag ${tagId} applied to ${room.roomId}`);
    }

    if (ev.key === _Keyboard.Key.ENTER) {
      // Implements https://www.w3.org/TR/wai-aria-practices/#keyboard-interaction-12
      onFinished();
    }
  };

  const ensureViewingRoom = () => {
    if (_RoomViewStore.default.getRoomId() === room.roomId) return;

    _dispatcher.default.dispatch({
      action: "view_room",
      room_id: room.roomId
    }, true);
  };

  return /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.default, (0, _extends2.default)({}, props, {
    onFinished: onFinished,
    className: "mx_RoomTile_contextMenu",
    compact: true
  }), /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOptionList, null, inviteOption, notificationOption, favouriteOption, /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
    onClick: ev => {
      ev.preventDefault();
      ev.stopPropagation();
      ensureViewingRoom();
      (0, _RoomSummaryCard.onRoomMembersClick)(false);
      onFinished();
    },
    label: (0, _languageHandler._t)("People"),
    iconClassName: "mx_RoomTile_iconPeople"
  }, /*#__PURE__*/_react.default.createElement("span", {
    className: "mx_IconizedContextMenu_sublabel"
  }, room.getJoinedMemberCount())), /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
    onClick: ev => {
      ev.preventDefault();
      ev.stopPropagation();
      ensureViewingRoom();
      (0, _RoomSummaryCard.onRoomFilesClick)(false);
      onFinished();
    },
    label: (0, _languageHandler._t)("Files"),
    iconClassName: "mx_RoomTile_iconFiles"
  }), /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
    onClick: ev => {
      ev.preventDefault();
      ev.stopPropagation();
      ensureViewingRoom();

      _dispatcher.default.dispatch({
        action: _actions.Action.SetRightPanelPhase,
        phase: _RightPanelStorePhases.RightPanelPhases.RoomSummary,
        allowClose: false
      });

      onFinished();
    },
    label: (0, _languageHandler._t)("Widgets"),
    iconClassName: "mx_RoomTile_iconWidgets"
  }), lowPriorityOption, /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
    onClick: ev => {
      ev.preventDefault();
      ev.stopPropagation();

      _dispatcher.default.dispatch({
        action: "copy_room",
        room_id: room.roomId
      });

      onFinished();
    },
    label: (0, _languageHandler._t)("Copy link"),
    iconClassName: "mx_RoomTile_iconCopyLink"
  }), /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
    onClick: ev => {
      ev.preventDefault();
      ev.stopPropagation();

      _dispatcher.default.dispatch({
        action: "open_room_settings",
        room_id: room.roomId
      });

      onFinished();
    },
    label: (0, _languageHandler._t)("Settings"),
    iconClassName: "mx_RoomTile_iconSettings"
  }), /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
    onClick: ev => {
      ev.preventDefault();
      ev.stopPropagation();

      _Modal.default.createTrackedDialog('Export room dialog', '', _ExportDialog.default, {
        room
      });

      onFinished();
    },
    label: (0, _languageHandler._t)("Export chat"),
    iconClassName: "mx_RoomTile_iconExport"
  }), leaveOption));
};

var _default = RoomContextMenu;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,