"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _languageHandler = require("../../../languageHandler");

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _Spinner = _interopRequireDefault(require("../elements/Spinner"));

var _dec, _class;

let StatusMessageContextMenu = (_dec = (0, _replaceableComponent.replaceableComponent)("views.context_menus.StatusMessageContextMenu"), _dec(_class = class StatusMessageContextMenu extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "onStatusMessageCommitted", () => {
      // The `User` object has observed a status message change.
      this.setState({
        message: this.comittedStatusMessage,
        waiting: false
      });
    });
    (0, _defineProperty2.default)(this, "onClearClick", () => {
      _MatrixClientPeg.MatrixClientPeg.get()._unstable_setStatusMessage("");

      this.setState({
        waiting: true
      });
    });
    (0, _defineProperty2.default)(this, "onSubmit", e => {
      e.preventDefault();

      _MatrixClientPeg.MatrixClientPeg.get()._unstable_setStatusMessage(this.state.message);

      this.setState({
        waiting: true
      });
    });
    (0, _defineProperty2.default)(this, "onStatusChange", e => {
      // The input field's value was changed.
      this.setState({
        message: e.target.value
      });
    });
    this.state = {
      message: this.comittedStatusMessage,
      waiting: false
    };
  }

  componentDidMount() {
    const {
      user
    } = this.props;

    if (!user) {
      return;
    }

    user.on("User._unstable_statusMessage", this.onStatusMessageCommitted);
  }

  componentWillUnmount() {
    const {
      user
    } = this.props;

    if (!user) {
      return;
    }

    user.removeListener("User._unstable_statusMessage", this.onStatusMessageCommitted);
  }

  get comittedStatusMessage() {
    return this.props.user ? this.props.user.unstable_statusMessage : "";
  }

  render() {
    let actionButton;

    if (this.comittedStatusMessage) {
      if (this.state.message === this.comittedStatusMessage) {
        actionButton = /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
          className: "mx_StatusMessageContextMenu_clear",
          onClick: this.onClearClick
        }, /*#__PURE__*/_react.default.createElement("span", null, (0, _languageHandler._t)("Clear status")));
      } else {
        actionButton = /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
          className: "mx_StatusMessageContextMenu_submit",
          onClick: this.onSubmit
        }, /*#__PURE__*/_react.default.createElement("span", null, (0, _languageHandler._t)("Update status")));
      }
    } else {
      actionButton = /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        className: "mx_StatusMessageContextMenu_submit",
        disabled: !this.state.message,
        onClick: this.onSubmit
      }, /*#__PURE__*/_react.default.createElement("span", null, (0, _languageHandler._t)("Set status")));
    }

    let spinner = null;

    if (this.state.waiting) {
      spinner = /*#__PURE__*/_react.default.createElement(_Spinner.default, {
        w: 24,
        h: 24
      });
    }

    const form = /*#__PURE__*/_react.default.createElement("form", {
      className: "mx_StatusMessageContextMenu_form",
      autoComplete: "off",
      onSubmit: this.onSubmit
    }, /*#__PURE__*/_react.default.createElement("input", {
      type: "text",
      className: "mx_StatusMessageContextMenu_message",
      key: "message",
      placeholder: (0, _languageHandler._t)("Set a new status..."),
      autoFocus: true,
      maxLength: 60,
      value: this.state.message,
      onChange: this.onStatusChange
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_StatusMessageContextMenu_actionContainer"
    }, actionButton, spinner));

    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_StatusMessageContextMenu"
    }, form);
  }

}) || _class);
exports.default = StatusMessageContextMenu;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,