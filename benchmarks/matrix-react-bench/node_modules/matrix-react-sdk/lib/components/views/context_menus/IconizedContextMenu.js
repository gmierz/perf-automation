"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.IconizedContextMenuRadio = exports.IconizedContextMenuOptionList = exports.IconizedContextMenuOption = exports.IconizedContextMenuCheckbox = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _ContextMenu = _interopRequireWildcard(require("../../structures/ContextMenu"));

const _excluded = ["label", "iconClassName", "active", "className"],
      _excluded2 = ["label", "iconClassName", "active", "className"],
      _excluded3 = ["label", "iconClassName", "children"],
      _excluded4 = ["className", "children", "compact"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const IconizedContextMenuRadio = _ref => {
  let {
    label,
    iconClassName,
    active,
    className
  } = _ref,
      props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  return /*#__PURE__*/_react.default.createElement(_ContextMenu.MenuItemRadio, (0, _extends2.default)({}, props, {
    className: (0, _classnames.default)(className, {
      mx_IconizedContextMenu_active: active
    }),
    active: active,
    label: label
  }), /*#__PURE__*/_react.default.createElement("span", {
    className: (0, _classnames.default)("mx_IconizedContextMenu_icon", iconClassName)
  }), /*#__PURE__*/_react.default.createElement("span", {
    className: "mx_IconizedContextMenu_label"
  }, label), active && /*#__PURE__*/_react.default.createElement("span", {
    className: "mx_IconizedContextMenu_icon mx_IconizedContextMenu_checked"
  }));
};

exports.IconizedContextMenuRadio = IconizedContextMenuRadio;

const IconizedContextMenuCheckbox = _ref2 => {
  let {
    label,
    iconClassName,
    active,
    className
  } = _ref2,
      props = (0, _objectWithoutProperties2.default)(_ref2, _excluded2);
  return /*#__PURE__*/_react.default.createElement(_ContextMenu.MenuItemCheckbox, (0, _extends2.default)({}, props, {
    className: (0, _classnames.default)(className, {
      mx_IconizedContextMenu_active: active
    }),
    active: active,
    label: label
  }), /*#__PURE__*/_react.default.createElement("span", {
    className: (0, _classnames.default)("mx_IconizedContextMenu_icon", iconClassName)
  }), /*#__PURE__*/_react.default.createElement("span", {
    className: "mx_IconizedContextMenu_label"
  }, label), /*#__PURE__*/_react.default.createElement("span", {
    className: (0, _classnames.default)("mx_IconizedContextMenu_icon", {
      mx_IconizedContextMenu_checked: active,
      mx_IconizedContextMenu_unchecked: !active
    })
  }));
};

exports.IconizedContextMenuCheckbox = IconizedContextMenuCheckbox;

const IconizedContextMenuOption = _ref3 => {
  let {
    label,
    iconClassName,
    children
  } = _ref3,
      props = (0, _objectWithoutProperties2.default)(_ref3, _excluded3);
  return /*#__PURE__*/_react.default.createElement(_ContextMenu.MenuItem, (0, _extends2.default)({}, props, {
    label: label
  }), iconClassName && /*#__PURE__*/_react.default.createElement("span", {
    className: (0, _classnames.default)("mx_IconizedContextMenu_icon", iconClassName)
  }), /*#__PURE__*/_react.default.createElement("span", {
    className: "mx_IconizedContextMenu_label"
  }, label), children);
};

exports.IconizedContextMenuOption = IconizedContextMenuOption;

const IconizedContextMenuOptionList = ({
  first,
  red,
  className,
  children
}) => {
  const classes = (0, _classnames.default)("mx_IconizedContextMenu_optionList", className, {
    mx_IconizedContextMenu_optionList_notFirst: !first,
    mx_IconizedContextMenu_optionList_red: red
  });
  return /*#__PURE__*/_react.default.createElement("div", {
    className: classes
  }, children);
};

exports.IconizedContextMenuOptionList = IconizedContextMenuOptionList;

const IconizedContextMenu = _ref4 => {
  let {
    className,
    children,
    compact
  } = _ref4,
      props = (0, _objectWithoutProperties2.default)(_ref4, _excluded4);
  const classes = (0, _classnames.default)("mx_IconizedContextMenu", className, {
    mx_IconizedContextMenu_compact: compact
  });
  return /*#__PURE__*/_react.default.createElement(_ContextMenu.default, (0, _extends2.default)({
    chevronFace: _ContextMenu.ChevronFace.None
  }, props), /*#__PURE__*/_react.default.createElement("div", {
    className: classes
  }, children));
};

var _default = IconizedContextMenu;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,