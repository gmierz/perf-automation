"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _event = require("matrix-js-sdk/src/@types/event");

var _IconizedContextMenu = _interopRequireWildcard(require("./IconizedContextMenu"));

var _languageHandler = require("../../../languageHandler");

var _space = require("../../../utils/space");

var _MatrixClientContext = _interopRequireDefault(require("../../../contexts/MatrixClientContext"));

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _RoomViewStore = _interopRequireDefault(require("../../../stores/RoomViewStore"));

var _actions = require("../../../dispatcher/actions");

var _RightPanelStorePhases = require("../../../stores/RightPanelStorePhases");

var _BetaCard = require("../beta/BetaCard");

var _SettingsStore = _interopRequireDefault(require("../../../settings/SettingsStore"));

const _excluded = ["space", "onFinished"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const SpaceContextMenu = _ref => {
  let {
    space,
    onFinished
  } = _ref,
      props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  const cli = (0, _react.useContext)(_MatrixClientContext.default);
  const userId = cli.getUserId();
  let inviteOption;

  if (space.getJoinRule() === "public" || space.canInvite(userId)) {
    const onInviteClick = ev => {
      ev.preventDefault();
      ev.stopPropagation();
      (0, _space.showSpaceInvite)(space);
      onFinished();
    };

    inviteOption = /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
      className: "mx_SpacePanel_contextMenu_inviteButton",
      iconClassName: "mx_SpacePanel_iconInvite",
      label: (0, _languageHandler._t)("Invite people"),
      onClick: onInviteClick
    });
  }

  let settingsOption;
  let leaveSection;

  if ((0, _space.shouldShowSpaceSettings)(space)) {
    const onSettingsClick = ev => {
      ev.preventDefault();
      ev.stopPropagation();
      (0, _space.showSpaceSettings)(space);
      onFinished();
    };

    settingsOption = /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
      iconClassName: "mx_SpacePanel_iconSettings",
      label: (0, _languageHandler._t)("Settings"),
      onClick: onSettingsClick
    });
  } else {
    const onLeaveClick = ev => {
      ev.preventDefault();
      ev.stopPropagation();
      (0, _space.leaveSpace)(space);
      onFinished();
    };

    leaveSection = /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOptionList, {
      red: true,
      first: true
    }, /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
      iconClassName: "mx_SpacePanel_iconLeave",
      label: (0, _languageHandler._t)("Leave space"),
      onClick: onLeaveClick
    }));
  }

  let devtoolsSection;

  if (_SettingsStore.default.getValue("developerMode")) {
    const onViewTimelineClick = ev => {
      ev.preventDefault();
      ev.stopPropagation();

      _dispatcher.default.dispatch({
        action: _actions.Action.ViewRoom,
        room_id: space.roomId,
        forceTimeline: true
      });

      onFinished();
    };

    devtoolsSection = /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOptionList, {
      first: true
    }, /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
      iconClassName: "mx_SpacePanel_iconSettings",
      label: (0, _languageHandler._t)("See room timeline (devtools)"),
      onClick: onViewTimelineClick
    }));
  }

  const canAddRooms = space.currentState.maySendStateEvent(_event.EventType.SpaceChild, userId);
  let newRoomSection;

  if (space.currentState.maySendStateEvent(_event.EventType.SpaceChild, userId)) {
    const onNewRoomClick = ev => {
      ev.preventDefault();
      ev.stopPropagation();
      (0, _space.showCreateNewRoom)(space);
      onFinished();
    };

    const onAddExistingRoomClick = ev => {
      ev.preventDefault();
      ev.stopPropagation();
      (0, _space.showAddExistingRooms)(space);
      onFinished();
    };

    const onNewSubspaceClick = ev => {
      ev.preventDefault();
      ev.stopPropagation();
      (0, _space.showCreateNewSubspace)(space);
      onFinished();
    };

    newRoomSection = /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOptionList, {
      first: true
    }, /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
      iconClassName: "mx_SpacePanel_iconPlus",
      label: (0, _languageHandler._t)("Create new room"),
      onClick: onNewRoomClick
    }), /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
      iconClassName: "mx_SpacePanel_iconHash",
      label: (0, _languageHandler._t)("Add existing room"),
      onClick: onAddExistingRoomClick
    }), /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
      iconClassName: "mx_SpacePanel_iconPlus",
      label: (0, _languageHandler._t)("Add space"),
      onClick: onNewSubspaceClick
    }, /*#__PURE__*/_react.default.createElement(_BetaCard.BetaPill, null)));
  }

  const onMembersClick = ev => {
    ev.preventDefault();
    ev.stopPropagation();

    if (!_RoomViewStore.default.getRoomId()) {
      _dispatcher.default.dispatch({
        action: "view_room",
        room_id: space.roomId
      }, true);
    }

    _dispatcher.default.dispatch({
      action: _actions.Action.SetRightPanelPhase,
      phase: _RightPanelStorePhases.RightPanelPhases.SpaceMemberList,
      refireParams: {
        space
      }
    });

    onFinished();
  };

  const onExploreRoomsClick = ev => {
    ev.preventDefault();
    ev.stopPropagation();

    _dispatcher.default.dispatch({
      action: "view_room",
      room_id: space.roomId
    });

    onFinished();
  };

  return /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.default, (0, _extends2.default)({}, props, {
    onFinished: onFinished,
    className: "mx_SpacePanel_contextMenu",
    compact: true
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_SpacePanel_contextMenu_header"
  }, space.name), /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOptionList, {
    first: true
  }, inviteOption, /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
    iconClassName: "mx_SpacePanel_iconMembers",
    label: (0, _languageHandler._t)("Members"),
    onClick: onMembersClick
  }), settingsOption, /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
    iconClassName: "mx_SpacePanel_iconExplore",
    label: canAddRooms ? (0, _languageHandler._t)("Manage & explore rooms") : (0, _languageHandler._t)("Explore rooms"),
    onClick: onExploreRoomsClick
  })), newRoomSection, leaveSection, devtoolsSection);
};

var _default = SpaceContextMenu;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL2NvbnRleHRfbWVudXMvU3BhY2VDb250ZXh0TWVudS50c3giXSwibmFtZXMiOlsiU3BhY2VDb250ZXh0TWVudSIsInNwYWNlIiwib25GaW5pc2hlZCIsInByb3BzIiwiY2xpIiwiTWF0cml4Q2xpZW50Q29udGV4dCIsInVzZXJJZCIsImdldFVzZXJJZCIsImludml0ZU9wdGlvbiIsImdldEpvaW5SdWxlIiwiY2FuSW52aXRlIiwib25JbnZpdGVDbGljayIsImV2IiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJzZXR0aW5nc09wdGlvbiIsImxlYXZlU2VjdGlvbiIsIm9uU2V0dGluZ3NDbGljayIsIm9uTGVhdmVDbGljayIsImRldnRvb2xzU2VjdGlvbiIsIlNldHRpbmdzU3RvcmUiLCJnZXRWYWx1ZSIsIm9uVmlld1RpbWVsaW5lQ2xpY2siLCJkZWZhdWx0RGlzcGF0Y2hlciIsImRpc3BhdGNoIiwiYWN0aW9uIiwiQWN0aW9uIiwiVmlld1Jvb20iLCJyb29tX2lkIiwicm9vbUlkIiwiZm9yY2VUaW1lbGluZSIsImNhbkFkZFJvb21zIiwiY3VycmVudFN0YXRlIiwibWF5U2VuZFN0YXRlRXZlbnQiLCJFdmVudFR5cGUiLCJTcGFjZUNoaWxkIiwibmV3Um9vbVNlY3Rpb24iLCJvbk5ld1Jvb21DbGljayIsIm9uQWRkRXhpc3RpbmdSb29tQ2xpY2siLCJvbk5ld1N1YnNwYWNlQ2xpY2siLCJvbk1lbWJlcnNDbGljayIsIlJvb21WaWV3U3RvcmUiLCJnZXRSb29tSWQiLCJTZXRSaWdodFBhbmVsUGhhc2UiLCJwaGFzZSIsIlJpZ2h0UGFuZWxQaGFzZXMiLCJTcGFjZU1lbWJlckxpc3QiLCJyZWZpcmVQYXJhbXMiLCJvbkV4cGxvcmVSb29tc0NsaWNrIiwibmFtZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQWdCQTs7QUFFQTs7QUFLQTs7QUFDQTs7QUFDQTs7QUFTQTs7QUFF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QUFHSCxJQUFBLFNBQVMsRUFBQywyQkFIUDtBQUlILElBQUEsT0FBTztBQUpKLG1CQU1IO0FBQUssSUFBQSxTQUFTLEVBQUM7QUFBZixLQUNNRCxLQUFLLENBQUNnRCxJQURaLENBTkcsZUFTSCw2QkFBQyxrREFBRDtBQUErQixJQUFBLEtBQUs7QUFBcEMsS0FDTXpDLFlBRE4sZUFFSSw2QkFBQyw4Q0FBRDtBQUNJLElBQUEsYUFBYSxFQUFDLDJCQURsQjtBQUVJLElBQUEsS0FBSyxFQUFFLHlCQUFHLFNBQUgsQ0FGWDtBQUdJLElBQUEsT0FBTyxFQUFFZ0M7QUFIYixJQUZKLEVBT016QixjQVBOLGVBUUksNkJBQUMsOENBQUQ7QUFDSSxJQUFBLGFBQWEsRUFBQywyQkFEbEI7QUFFSSxJQUFBLEtBQUssRUFBRWdCLFdBQVcsR0FBRyx5QkFBRyx3QkFBSCxDQUFILEdBQWtDLHlCQUFHLGVBQUgsQ0FGeEQ7QUFHSSxJQUFBLE9BQU8sRUFBRWlCO0FBSGIsSUFSSixDQVRHLEVBdUJEWixjQXZCQyxFQXdCRHBCLFlBeEJDLEVBeUJERyxlQXpCQyxDQUFQO0FBMkJILENBN0xEOztlQStMZW5CLGdCIiwic291cmNlc0NvbnRlbnQiOlsiLypcbkNvcHlyaWdodCAyMDIxIFRoZSBNYXRyaXgub3JnIEZvdW5kYXRpb24gQy5JLkMuXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuaW1wb3J0IFJlYWN0LCB7IHVzZUNvbnRleHQgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IFJvb20gfSBmcm9tIFwibWF0cml4LWpzLXNkay9zcmMvbW9kZWxzL3Jvb21cIjtcbmltcG9ydCB7IEV2ZW50VHlwZSB9IGZyb20gXCJtYXRyaXgtanMtc2RrL3NyYy9AdHlwZXMvZXZlbnRcIjtcblxuaW1wb3J0IHtcbiAgICBJUHJvcHMgYXMgSUNvbnRleHRNZW51UHJvcHMsXG59IGZyb20gXCIuLi8uLi9zdHJ1Y3R1cmVzL0NvbnRleHRNZW51XCI7XG5pbXBvcnQgSWNvbml6ZWRDb250ZXh0TWVudSwgeyBJY29uaXplZENvbnRleHRNZW51T3B0aW9uLCBJY29uaXplZENvbnRleHRNZW51T3B0aW9uTGlzdCB9IGZyb20gXCIuL0ljb25pemVkQ29udGV4dE1lbnVcIjtcbmltcG9ydCB7IF90IH0gZnJvbSBcIi4uLy4uLy4uL2xhbmd1YWdlSGFuZGxlclwiO1xuaW1wb3J0IHtcbiAgICBsZWF2ZVNwYWNlLFxuICAgIHNob3VsZFNob3dTcGFjZVNldHRpbmdzLFxuICAgIHNob3dBZGRFeGlzdGluZ1Jvb21zLFxuICAgIHNob3dDcmVhdGVOZXdSb29tLFxuICAgIHNob3dDcmVhdGVOZXdTdWJzcGFjZSxcbiAgICBzaG93U3BhY2VJbnZpdGUsXG4gICAgc2hvd1NwYWNlU2V0dGluZ3MsXG59IGZyb20gXCIuLi8uLi8uLi91dGlscy9zcGFjZVwiO1xuaW1wb3J0IE1hdHJpeENsaWVudENvbnRleHQgZnJvbSBcIi4uLy4uLy4uL2NvbnRleHRzL01hdHJpeENsaWVudENvbnRleHRcIjtcbmltcG9ydCB7IEJ1dHRvbkV2ZW50IH0gZnJvbSBcIi4uL2VsZW1lbnRzL0FjY2Vzc2libGVCdXR0b25cIjtcbmltcG9ydCBkZWZhdWx0RGlzcGF0Y2hlciBmcm9tIFwiLi4vLi4vLi4vZGlzcGF0Y2hlci9kaXNwYXRjaGVyXCI7XG5pbXBvcnQgUm9vbVZpZXdTdG9yZSBmcm9tIFwiLi4vLi4vLi4vc3RvcmVzL1Jvb21WaWV3U3RvcmVcIjtcbmltcG9ydCB7IFNldFJpZ2h0UGFuZWxQaGFzZVBheWxvYWQgfSBmcm9tIFwiLi4vLi4vLi4vZGlzcGF0Y2hlci9wYXlsb2Fkcy9TZXRSaWdodFBhbmVsUGhhc2VQYXlsb2FkXCI7XG5pbXBvcnQgeyBBY3Rpb24gfSBmcm9tIFwiLi4vLi4vLi4vZGlzcGF0Y2hlci9hY3Rpb25zXCI7XG5pbXBvcnQgeyBSaWdodFBhbmVsUGhhc2VzIH0gZnJvbSBcIi4uLy4uLy4uL3N0b3Jlcy9SaWdodFBhbmVsU3RvcmVQaGFzZXNcIjtcbmltcG9ydCB7IEJldGFQaWxsIH0gZnJvbSBcIi4uL2JldGEvQmV0YUNhcmRcIjtcbmltcG9ydCBTZXR0aW5nc1N0b3JlIGZyb20gXCIuLi8uLi8uLi9zZXR0aW5ncy9TZXR0aW5nc1N0b3JlXCI7XG5cbmludGVyZmFjZSBJUHJvcHMgZXh0ZW5kcyBJQ29udGV4dE1lbnVQcm9wcyB7XG4gICAgc3BhY2U6IFJvb207XG59XG5cbmNvbnN0IFNwYWNlQ29udGV4dE1lbnUgPSAoeyBzcGFjZSwgb25GaW5pc2hlZCwgLi4ucHJvcHMgfTogSVByb3BzKSA9PiB7XG4gICAgY29uc3QgY2xpID0gdXNlQ29udGV4dChNYXRyaXhDbGllbnRDb250ZXh0KTtcbiAgICBjb25zdCB1c2VySWQgPSBjbGkuZ2V0VXNlcklkKCk7XG5cbiAgICBsZXQgaW52aXRlT3B0aW9uO1xuICAgIGlmIChzcGFjZS5nZXRKb2luUnVsZSgpID09PSBcInB1YmxpY1wiIHx8IHNwYWNlLmNhbkludml0ZSh1c2VySWQpKSB7XG4gICAgICAgIGNvbnN0IG9uSW52aXRlQ2xpY2sgPSAoZXY6IEJ1dHRvbkV2ZW50KSA9PiB7XG4gICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICAgICAgICAgIHNob3dTcGFjZUludml0ZShzcGFjZSk7XG4gICAgICAgICAgICBvbkZpbmlzaGVkKCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgaW52aXRlT3B0aW9uID0gKFxuICAgICAgICAgICAgPEljb25pemVkQ29udGV4dE1lbnVPcHRpb25cbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJteF9TcGFjZVBhbmVsX2NvbnRleHRNZW51X2ludml0ZUJ1dHRvblwiXG4gICAgICAgICAgICAgICAgaWNvbkNsYXNzTmFtZT1cIm14X1NwYWNlUGFuZWxfaWNvbkludml0ZVwiXG4gICAgICAgICAgICAgICAgbGFiZWw9e190KFwiSW52aXRlIHBlb3BsZVwiKX1cbiAgICAgICAgICAgICAgICBvbkNsaWNrPXtvbkludml0ZUNsaWNrfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBsZXQgc2V0dGluZ3NPcHRpb247XG4gICAgbGV0IGxlYXZlU2VjdGlvbjtcbiAgICBpZiAoc2hvdWxkU2hvd1NwYWNlU2V0dGluZ3Moc3BhY2UpKSB7XG4gICAgICAgIGNvbnN0IG9uU2V0dGluZ3NDbGljayA9IChldjogQnV0dG9uRXZlbnQpID0+IHtcbiAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICAgICAgICAgc2hvd1NwYWNlU2V0dGluZ3Moc3BhY2UpO1xuICAgICAgICAgICAgb25GaW5pc2hlZCgpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHNldHRpbmdzT3B0aW9uID0gKFxuICAgICAgICAgICAgPEljb25pemVkQ29udGV4dE1lbnVPcHRpb25cbiAgICAgICAgICAgICAgICBpY29uQ2xhc3NOYW1lPVwibXhfU3BhY2VQYW5lbF9pY29uU2V0dGluZ3NcIlxuICAgICAgICAgICAgICAgIGxhYmVsPXtfdChcIlNldHRpbmdzXCIpfVxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9e29uU2V0dGluZ3NDbGlja31cbiAgICAgICAgICAgIC8+XG4gICAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3Qgb25MZWF2ZUNsaWNrID0gKGV2OiBCdXR0b25FdmVudCkgPT4ge1xuICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgICAgICAgICBsZWF2ZVNwYWNlKHNwYWNlKTtcbiAgICAgICAgICAgIG9uRmluaXNoZWQoKTtcbiAgICAgICAgfTtcblxuICAgICAgICBsZWF2ZVNlY3Rpb24gPSA8SWNvbml6ZWRDb250ZXh0TWVudU9wdGlvbkxpc3QgcmVkIGZpcnN0PlxuICAgICAgICAgICAgPEljb25pemVkQ29udGV4dE1lbnVPcHRpb25cbiAgICAgICAgICAgICAgICBpY29uQ2xhc3NOYW1lPVwibXhfU3BhY2VQYW5lbF9pY29uTGVhdmVcIlxuICAgICAgICAgICAgICAgIGxhYmVsPXtfdChcIkxlYXZlIHNwYWNlXCIpfVxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9e29uTGVhdmVDbGlja31cbiAgICAgICAgICAgIC8+XG4gICAgICAgIDwvSWNvbml6ZWRDb250ZXh0TWVudU9wdGlvbkxpc3Q+O1xuICAgIH1cblxuICAgIGxldCBkZXZ0b29sc1NlY3Rpb247XG4gICAgaWYgKFNldHRpbmdzU3RvcmUuZ2V0VmFsdWUoXCJkZXZlbG9wZXJNb2RlXCIpKSB7XG4gICAgICAgIGNvbnN0IG9uVmlld1RpbWVsaW5lQ2xpY2sgPSAoZXY6IEJ1dHRvbkV2ZW50KSA9PiB7XG4gICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICAgICAgICAgIGRlZmF1bHREaXNwYXRjaGVyLmRpc3BhdGNoKHtcbiAgICAgICAgICAgICAgICBhY3Rpb246IEFjdGlvbi5WaWV3Um9vbSxcbiAgICAgICAgICAgICAgICByb29tX2lkOiBzcGFjZS5yb29tSWQsXG4gICAgICAgICAgICAgICAgZm9yY2VUaW1lbGluZTogdHJ1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgb25GaW5pc2hlZCgpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGRldnRvb2xzU2VjdGlvbiA9IDxJY29uaXplZENvbnRleHRNZW51T3B0aW9uTGlzdCBmaXJzdD5cbiAgICAgICAgICAgIDxJY29uaXplZENvbnRleHRNZW51T3B0aW9uXG4gICAgICAgICAgICAgICAgaWNvbkNsYXNzTmFtZT1cIm14X1NwYWNlUGFuZWxfaWNvblNldHRpbmdzXCJcbiAgICAgICAgICAgICAgICBsYWJlbD17X3QoXCJTZWUgcm9vbSB0aW1lbGluZSAoZGV2dG9vbHMpXCIpfVxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9e29uVmlld1RpbWVsaW5lQ2xpY2t9XG4gICAgICAgICAgICAvPlxuICAgICAgICA8L0ljb25pemVkQ29udGV4dE1lbnVPcHRpb25MaXN0PjtcbiAgICB9XG5cbiAgICBjb25zdCBjYW5BZGRSb29tcyA9IHNwYWNlLmN1cnJlbnRTdGF0ZS5tYXlTZW5kU3RhdGVFdmVudChFdmVudFR5cGUuU3BhY2VDaGlsZCwgdXNlcklkKTtcblxuICAgIGxldCBuZXdSb29tU2VjdGlvbjtcbiAgICBpZiAoc3BhY2UuY3VycmVudFN0YXRlLm1heVNlbmRTdGF0ZUV2ZW50KEV2ZW50VHlwZS5TcGFjZUNoaWxkLCB1c2VySWQpKSB7XG4gICAgICAgIGNvbnN0IG9uTmV3Um9vbUNsaWNrID0gKGV2OiBCdXR0b25FdmVudCkgPT4ge1xuICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgICAgICAgICBzaG93Q3JlYXRlTmV3Um9vbShzcGFjZSk7XG4gICAgICAgICAgICBvbkZpbmlzaGVkKCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3Qgb25BZGRFeGlzdGluZ1Jvb21DbGljayA9IChldjogQnV0dG9uRXZlbnQpID0+IHtcbiAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICAgICAgICAgc2hvd0FkZEV4aXN0aW5nUm9vbXMoc3BhY2UpO1xuICAgICAgICAgICAgb25GaW5pc2hlZCgpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IG9uTmV3U3Vic3BhY2VDbGljayA9IChldjogQnV0dG9uRXZlbnQpID0+IHtcbiAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICAgICAgICAgc2hvd0NyZWF0ZU5ld1N1YnNwYWNlKHNwYWNlKTtcbiAgICAgICAgICAgIG9uRmluaXNoZWQoKTtcbiAgICAgICAgfTtcblxuICAgICAgICBuZXdSb29tU2VjdGlvbiA9IDxJY29uaXplZENvbnRleHRNZW51T3B0aW9uTGlzdCBmaXJzdD5cbiAgICAgICAgICAgIDxJY29uaXplZENvbnRleHRNZW51T3B0aW9uXG4gICAgICAgICAgICAgICAgaWNvbkNsYXNzTmFtZT1cIm14X1NwYWNlUGFuZWxfaWNvblBsdXNcIlxuICAgICAgICAgICAgICAgIGxhYmVsPXtfdChcIkNyZWF0ZSBuZXcgcm9vbVwiKX1cbiAgICAgICAgICAgICAgICBvbkNsaWNrPXtvbk5ld1Jvb21DbGlja31cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8SWNvbml6ZWRDb250ZXh0TWVudU9wdGlvblxuICAgICAgICAgICAgICAgIGljb25DbGFzc05hbWU9XCJteF9TcGFjZVBhbmVsX2ljb25IYXNoXCJcbiAgICAgICAgICAgICAgICBsYWJlbD17X3QoXCJBZGQgZXhpc3Rpbmcgcm9vbVwiKX1cbiAgICAgICAgICAgICAgICBvbkNsaWNrPXtvbkFkZEV4aXN0aW5nUm9vbUNsaWNrfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxJY29uaXplZENvbnRleHRNZW51T3B0aW9uXG4gICAgICAgICAgICAgICAgaWNvbkNsYXNzTmFtZT1cIm14X1NwYWNlUGFuZWxfaWNvblBsdXNcIlxuICAgICAgICAgICAgICAgIGxhYmVsPXtfdChcIkFkZCBzcGFjZVwiKX1cbiAgICAgICAgICAgICAgICBvbkNsaWNrPXtvbk5ld1N1YnNwYWNlQ2xpY2t9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPEJldGFQaWxsIC8+XG4gICAgICAgICAgICA8L0ljb25pemVkQ29udGV4dE1lbnVPcHRpb24+XG4gICAgICAgIDwvSWNvbml6ZWRDb250ZXh0TWVudU9wdGlvbkxpc3Q+O1xuICAgIH1cblxuICAgIGNvbnN0IG9uTWVtYmVyc0NsaWNrID0gKGV2OiBCdXR0b25FdmVudCkgPT4ge1xuICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICAgICBpZiAoIVJvb21WaWV3U3RvcmUuZ2V0Um9vbUlkKCkpIHtcbiAgICAgICAgICAgIGRlZmF1bHREaXNwYXRjaGVyLmRpc3BhdGNoKHtcbiAgICAgICAgICAgICAgICBhY3Rpb246IFwidmlld19yb29tXCIsXG4gICAgICAgICAgICAgICAgcm9vbV9pZDogc3BhY2Uucm9vbUlkLFxuICAgICAgICAgICAgfSwgdHJ1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBkZWZhdWx0RGlzcGF0Y2hlci5kaXNwYXRjaDxTZXRSaWdodFBhbmVsUGhhc2VQYXlsb2FkPih7XG4gICAgICAgICAgICBhY3Rpb246IEFjdGlvbi5TZXRSaWdodFBhbmVsUGhhc2UsXG4gICAgICAgICAgICBwaGFzZTogUmlnaHRQYW5lbFBoYXNlcy5TcGFjZU1lbWJlckxpc3QsXG4gICAgICAgICAgICByZWZpcmVQYXJhbXM6IHsgc3BhY2UgfSxcbiAgICAgICAgfSk7XG4gICAgICAgIG9uRmluaXNoZWQoKTtcbiAgICB9O1xuXG4gICAgY29uc3Qgb25FeHBsb3JlUm9vbXNDbGljayA9IChldjogQnV0dG9uRXZlbnQpID0+IHtcbiAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICAgICAgZGVmYXVsdERpc3BhdGNoZXIuZGlzcGF0Y2goe1xuICAgICAgICAgICAgYWN0aW9uOiBcInZpZXdfcm9vbVwiLFxuICAgICAgICAgICAgcm9vbV9pZDogc3BhY2Uucm9vbUlkLFxuICAgICAgICB9KTtcbiAgICAgICAgb25GaW5pc2hlZCgpO1xuICAgIH07XG5cbiAgICByZXR1cm4gPEljb25pemVkQ29udGV4dE1lbnVcbiAgICAgICAgey4uLnByb3BzfVxuICAgICAgICBvbkZpbmlzaGVkPXtvbkZpbmlzaGVkfVxuICAgICAgICBjbGFzc05hbWU9XCJteF9TcGFjZVBhbmVsX2NvbnRleHRNZW51XCJcbiAgICAgICAgY29tcGFjdFxuICAgID5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJteF9TcGFjZVBhbmVsX2NvbnRleHRNZW51X2hlYWRlclwiPlxuICAgICAgICAgICAgeyBzcGFjZS5uYW1lIH1cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxJY29uaXplZENvbnRleHRNZW51T3B0aW9uTGlzdCBmaXJzdD5cbiAgICAgICAgICAgIHsgaW52aXRlT3B0aW9uIH1cbiAgICAgICAgICAgIDxJY29uaXplZENvbnRleHRNZW51T3B0aW9uXG4gICAgICAgICAgICAgICAgaWNvbkNsYXNzTmFtZT1cIm14X1NwYWNlUGFuZWxfaWNvbk1lbWJlcnNcIlxuICAgICAgICAgICAgICAgIGxhYmVsPXtfdChcIk1lbWJlcnNcIil9XG4gICAgICAgICAgICAgICAgb25DbGljaz17b25NZW1iZXJzQ2xpY2t9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgeyBzZXR0aW5nc09wdGlvbiB9XG4gICAgICAgICAgICA8SWNvbml6ZWRDb250ZXh0TWVudU9wdGlvblxuICAgICAgICAgICAgICAgIGljb25DbGFzc05hbWU9XCJteF9TcGFjZVBhbmVsX2ljb25FeHBsb3JlXCJcbiAgICAgICAgICAgICAgICBsYWJlbD17Y2FuQWRkUm9vbXMgPyBfdChcIk1hbmFnZSAmIGV4cGxvcmUgcm9vbXNcIikgOiBfdChcIkV4cGxvcmUgcm9vbXNcIil9XG4gICAgICAgICAgICAgICAgb25DbGljaz17b25FeHBsb3JlUm9vbXNDbGlja31cbiAgICAgICAgICAgIC8+XG4gICAgICAgIDwvSWNvbml6ZWRDb250ZXh0TWVudU9wdGlvbkxpc3Q+XG4gICAgICAgIHsgbmV3Um9vbVNlY3Rpb24gfVxuICAgICAgICB7IGxlYXZlU2VjdGlvbiB9XG4gICAgICAgIHsgZGV2dG9vbHNTZWN0aW9uIH1cbiAgICA8L0ljb25pemVkQ29udGV4dE1lbnU+O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgU3BhY2VDb250ZXh0TWVudTtcblxuIl19