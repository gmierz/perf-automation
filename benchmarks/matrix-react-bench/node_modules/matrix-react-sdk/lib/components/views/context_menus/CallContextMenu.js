"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _languageHandler = require("../../../languageHandler");

var _ContextMenu = _interopRequireWildcard(require("../../structures/ContextMenu"));

var _CallHandler = _interopRequireDefault(require("../../../CallHandler"));

var _InviteDialog = _interopRequireWildcard(require("../dialogs/InviteDialog"));

var _Modal = _interopRequireDefault(require("../../../Modal"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _dec, _class, _class2, _temp;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

let CallContextMenu = (_dec = (0, _replaceableComponent.replaceableComponent)("views.context_menus.CallContextMenu"), _dec(_class = (_temp = _class2 = class CallContextMenu extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "onHoldClick", () => {
      this.props.call.setRemoteOnHold(true);
      this.props.onFinished();
    });
    (0, _defineProperty2.default)(this, "onUnholdClick", () => {
      _CallHandler.default.sharedInstance().setActiveCallRoomId(this.props.call.roomId);

      this.props.onFinished();
    });
    (0, _defineProperty2.default)(this, "onTransferClick", () => {
      _Modal.default.createTrackedDialog('Transfer Call', '', _InviteDialog.default, {
        kind: _InviteDialog.KIND_CALL_TRANSFER,
        call: this.props.call
      },
      /*className=*/
      "mx_InviteDialog_transferWrapper",
      /*isPriority=*/
      false,
      /*isStatic=*/
      true);

      this.props.onFinished();
    });
  }

  render() {
    const holdUnholdCaption = this.props.call.isRemoteOnHold() ? (0, _languageHandler._t)("Resume") : (0, _languageHandler._t)("Hold");
    const handler = this.props.call.isRemoteOnHold() ? this.onUnholdClick : this.onHoldClick;
    let transferItem;

    if (this.props.call.opponentCanBeTransferred()) {
      transferItem = /*#__PURE__*/_react.default.createElement(_ContextMenu.MenuItem, {
        className: "mx_CallContextMenu_item",
        onClick: this.onTransferClick
      }, (0, _languageHandler._t)("Transfer"));
    }

    return /*#__PURE__*/_react.default.createElement(_ContextMenu.default, this.props, /*#__PURE__*/_react.default.createElement(_ContextMenu.MenuItem, {
      className: "mx_CallContextMenu_item",
      onClick: handler
    }, holdUnholdCaption), transferItem);
  }

}, (0, _defineProperty2.default)(_class2, "propTypes", {
  // js-sdk User object. Not required because it might not exist.
  user: _propTypes.default.object
}), _temp)) || _class);
exports.default = CallContextMenu;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL2NvbnRleHRfbWVudXMvQ2FsbENvbnRleHRNZW51LnRzeCJdLCJuYW1lcyI6WyJDYWxsQ29udGV4dE1lbnUiLCJSZWFjdCIsIkNvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwicHJvcHMiLCJjYWxsIiwic2V0UmVtb3RlT25Ib2xkIiwib25GaW5pc2hlZCIsIkNhbGxIYW5kbGVyIiwic2hhcmVkSW5zdGFuY2UiLCJzZXRBY3RpdmVDYWxsUm9vbUlkIiwicm9vbUlkIiwiTW9kYWwiLCJjcmVhdGVUcmFja2VkRGlhbG9nIiwiSW52aXRlRGlhbG9nIiwia2luZCIsIktJTkRfQ0FMTF9UUkFOU0ZFUiIsInJlbmRlciIsImhvbGRVbmhvbGRDYXB0aW9uIiwiaXNSZW1vdGVPbkhvbGQiLCJoYW5kbGVyIiwib25VbmhvbGRDbGljayIsIm9uSG9sZENsaWNrIiwidHJhbnNmZXJJdGVtIiwib3Bwb25lbnRDYW5CZVRyYW5zZmVycmVkIiwib25UcmFuc2ZlckNsaWNrIiwidXNlciIsIlByb3BUeXBlcyIsIm9iamVjdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFnQkE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7Ozs7O0lBT3FCQSxlLFdBRHBCLGdEQUFxQixxQ0FBckIsQyxtQ0FBRCxNQUNxQkEsZUFEckIsU0FDNkNDLGVBQU1DLFNBRG5ELENBQ3FFO0FBTWpFQyxFQUFBQSxXQUFXLENBQUNDLEtBQUQsRUFBUTtBQUNmLFVBQU1BLEtBQU47QUFEZSx1REFJTCxNQUFNO0FBQ2hCLFdBQUtBLEtBQUwsQ0FBV0MsSUFBWCxDQUFnQkMsZUFBaEIsQ0FBZ0MsSUFBaEM7QUFDQSxXQUFLRixLQUFMLENBQVdHLFVBQVg7QUFDSCxLQVBrQjtBQUFBLHlEQVNILE1BQU07QUFDbEJDLDJCQUFZQyxjQUFaLEdBQTZCQyxtQkFBN0IsQ0FBaUQsS0FBS04sS0FBTCxDQUFXQyxJQUFYLENBQWdCTSxNQUFqRTs7QUFFQSxXQUFLUCxLQUFMLENBQVdHLFVBQVg7QUFDSCxLQWJrQjtBQUFBLDJEQWVELE1BQU07QUFDcEJLLHFCQUFNQyxtQkFBTixDQUNJLGVBREosRUFDcUIsRUFEckIsRUFDeUJDLHFCQUR6QixFQUN1QztBQUFFQyxRQUFBQSxJQUFJLEVBQUVDLGdDQUFSO0FBQTRCWCxRQUFBQSxJQUFJLEVBQUUsS0FBS0QsS0FBTCxDQUFXQztBQUE3QyxPQUR2QztBQUVJO0FBQWMsdUNBRmxCO0FBRXFEO0FBQWUsV0FGcEU7QUFFMkU7QUFBYSxVQUZ4Rjs7QUFJQSxXQUFLRCxLQUFMLENBQVdHLFVBQVg7QUFDSCxLQXJCa0I7QUFFbEI7O0FBcUJEVSxFQUFBQSxNQUFNLEdBQUc7QUFDTCxVQUFNQyxpQkFBaUIsR0FBRyxLQUFLZCxLQUFMLENBQVdDLElBQVgsQ0FBZ0JjLGNBQWhCLEtBQW1DLHlCQUFHLFFBQUgsQ0FBbkMsR0FBa0QseUJBQUcsTUFBSCxDQUE1RTtBQUNBLFVBQU1DLE9BQU8sR0FBRyxLQUFLaEIsS0FBTCxDQUFXQyxJQUFYLENBQWdCYyxjQUFoQixLQUFtQyxLQUFLRSxhQUF4QyxHQUF3RCxLQUFLQyxXQUE3RTtBQUVBLFFBQUlDLFlBQUo7O0FBQ0EsUUFBSSxLQUFLbkIsS0FBTCxDQUFXQyxJQUFYLENBQWdCbUIsd0JBQWhCLEVBQUosRUFBZ0Q7QUFDNUNELE1BQUFBLFlBQVksZ0JBQUcsNkJBQUMscUJBQUQ7QUFBVSxRQUFBLFNBQVMsRUFBQyx5QkFBcEI7QUFBOEMsUUFBQSxPQUFPLEVBQUUsS0FBS0U7QUFBNUQsU0FDVCx5QkFBRyxVQUFILENBRFMsQ0FBZjtBQUdIOztBQUVELHdCQUFPLDZCQUFDLG9CQUFELEVBQWlCLEtBQUtyQixLQUF0QixlQUNILDZCQUFDLHFCQUFEO0FBQVUsTUFBQSxTQUFTLEVBQUMseUJBQXBCO0FBQThDLE1BQUEsT0FBTyxFQUFFZ0I7QUFBdkQsT0FDTUYsaUJBRE4sQ0FERyxFQUlESyxZQUpDLENBQVA7QUFNSDs7QUE5Q2dFLEMsc0RBQzlDO0FBQ2Y7QUFDQUcsRUFBQUEsSUFBSSxFQUFFQyxtQkFBVUM7QUFGRCxDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbkNvcHlyaWdodCAyMDIwIE5ldyBWZWN0b3IgTHRkXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBfdCB9IGZyb20gJy4uLy4uLy4uL2xhbmd1YWdlSGFuZGxlcic7XG5pbXBvcnQgQ29udGV4dE1lbnUsIHsgSVByb3BzIGFzIElDb250ZXh0TWVudVByb3BzLCBNZW51SXRlbSB9IGZyb20gJy4uLy4uL3N0cnVjdHVyZXMvQ29udGV4dE1lbnUnO1xuaW1wb3J0IHsgTWF0cml4Q2FsbCB9IGZyb20gJ21hdHJpeC1qcy1zZGsvc3JjL3dlYnJ0Yy9jYWxsJztcbmltcG9ydCBDYWxsSGFuZGxlciBmcm9tICcuLi8uLi8uLi9DYWxsSGFuZGxlcic7XG5pbXBvcnQgSW52aXRlRGlhbG9nLCB7IEtJTkRfQ0FMTF9UUkFOU0ZFUiB9IGZyb20gJy4uL2RpYWxvZ3MvSW52aXRlRGlhbG9nJztcbmltcG9ydCBNb2RhbCBmcm9tICcuLi8uLi8uLi9Nb2RhbCc7XG5pbXBvcnQgeyByZXBsYWNlYWJsZUNvbXBvbmVudCB9IGZyb20gXCIuLi8uLi8uLi91dGlscy9yZXBsYWNlYWJsZUNvbXBvbmVudFwiO1xuXG5pbnRlcmZhY2UgSVByb3BzIGV4dGVuZHMgSUNvbnRleHRNZW51UHJvcHMge1xuICAgIGNhbGw6IE1hdHJpeENhbGw7XG59XG5cbkByZXBsYWNlYWJsZUNvbXBvbmVudChcInZpZXdzLmNvbnRleHRfbWVudXMuQ2FsbENvbnRleHRNZW51XCIpXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDYWxsQ29udGV4dE1lbnUgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8SVByb3BzPiB7XG4gICAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICAgICAgLy8ganMtc2RrIFVzZXIgb2JqZWN0LiBOb3QgcmVxdWlyZWQgYmVjYXVzZSBpdCBtaWdodCBub3QgZXhpc3QuXG4gICAgICAgIHVzZXI6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgfTtcblxuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcbiAgICB9XG5cbiAgICBvbkhvbGRDbGljayA9ICgpID0+IHtcbiAgICAgICAgdGhpcy5wcm9wcy5jYWxsLnNldFJlbW90ZU9uSG9sZCh0cnVlKTtcbiAgICAgICAgdGhpcy5wcm9wcy5vbkZpbmlzaGVkKCk7XG4gICAgfTtcblxuICAgIG9uVW5ob2xkQ2xpY2sgPSAoKSA9PiB7XG4gICAgICAgIENhbGxIYW5kbGVyLnNoYXJlZEluc3RhbmNlKCkuc2V0QWN0aXZlQ2FsbFJvb21JZCh0aGlzLnByb3BzLmNhbGwucm9vbUlkKTtcblxuICAgICAgICB0aGlzLnByb3BzLm9uRmluaXNoZWQoKTtcbiAgICB9O1xuXG4gICAgb25UcmFuc2ZlckNsaWNrID0gKCkgPT4ge1xuICAgICAgICBNb2RhbC5jcmVhdGVUcmFja2VkRGlhbG9nKFxuICAgICAgICAgICAgJ1RyYW5zZmVyIENhbGwnLCAnJywgSW52aXRlRGlhbG9nLCB7IGtpbmQ6IEtJTkRfQ0FMTF9UUkFOU0ZFUiwgY2FsbDogdGhpcy5wcm9wcy5jYWxsIH0sXG4gICAgICAgICAgICAvKmNsYXNzTmFtZT0qL1wibXhfSW52aXRlRGlhbG9nX3RyYW5zZmVyV3JhcHBlclwiLCAvKmlzUHJpb3JpdHk9Ki9mYWxzZSwgLyppc1N0YXRpYz0qL3RydWUsXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMucHJvcHMub25GaW5pc2hlZCgpO1xuICAgIH07XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGNvbnN0IGhvbGRVbmhvbGRDYXB0aW9uID0gdGhpcy5wcm9wcy5jYWxsLmlzUmVtb3RlT25Ib2xkKCkgPyBfdChcIlJlc3VtZVwiKSA6IF90KFwiSG9sZFwiKTtcbiAgICAgICAgY29uc3QgaGFuZGxlciA9IHRoaXMucHJvcHMuY2FsbC5pc1JlbW90ZU9uSG9sZCgpID8gdGhpcy5vblVuaG9sZENsaWNrIDogdGhpcy5vbkhvbGRDbGljaztcblxuICAgICAgICBsZXQgdHJhbnNmZXJJdGVtO1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5jYWxsLm9wcG9uZW50Q2FuQmVUcmFuc2ZlcnJlZCgpKSB7XG4gICAgICAgICAgICB0cmFuc2Zlckl0ZW0gPSA8TWVudUl0ZW0gY2xhc3NOYW1lPVwibXhfQ2FsbENvbnRleHRNZW51X2l0ZW1cIiBvbkNsaWNrPXt0aGlzLm9uVHJhbnNmZXJDbGlja30+XG4gICAgICAgICAgICAgICAgeyBfdChcIlRyYW5zZmVyXCIpIH1cbiAgICAgICAgICAgIDwvTWVudUl0ZW0+O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIDxDb250ZXh0TWVudSB7Li4udGhpcy5wcm9wc30+XG4gICAgICAgICAgICA8TWVudUl0ZW0gY2xhc3NOYW1lPVwibXhfQ2FsbENvbnRleHRNZW51X2l0ZW1cIiBvbkNsaWNrPXtoYW5kbGVyfT5cbiAgICAgICAgICAgICAgICB7IGhvbGRVbmhvbGRDYXB0aW9uIH1cbiAgICAgICAgICAgIDwvTWVudUl0ZW0+XG4gICAgICAgICAgICB7IHRyYW5zZmVySXRlbSB9XG4gICAgICAgIDwvQ29udGV4dE1lbnU+O1xuICAgIH1cbn1cbiJdfQ==