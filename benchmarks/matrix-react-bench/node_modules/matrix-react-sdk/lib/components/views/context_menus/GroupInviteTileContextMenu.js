"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var sdk = _interopRequireWildcard(require("../../../index"));

var _languageHandler = require("../../../languageHandler");

var _Modal = _interopRequireDefault(require("../../../Modal"));

var _group = require("matrix-js-sdk/src/models/group");

var _GroupStore = _interopRequireDefault(require("../../../stores/GroupStore"));

var _ContextMenu = require("../../structures/ContextMenu");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _logger = require("matrix-js-sdk/src/logger");

var _dec, _class, _class2, _temp;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

let GroupInviteTileContextMenu = (_dec = (0, _replaceableComponent.replaceableComponent)("views.context_menus.GroupInviteTileContextMenu"), _dec(_class = (_temp = _class2 = class GroupInviteTileContextMenu extends _react.default.Component {
  constructor(props) {
    super(props);
    this._onClickReject = this._onClickReject.bind(this);
  }

  componentDidMount() {
    this._unmounted = false;
  }

  componentWillUnmount() {
    this._unmounted = true;
  }

  _onClickReject() {
    const QuestionDialog = sdk.getComponent('dialogs.QuestionDialog');

    _Modal.default.createTrackedDialog('Reject community invite', '', QuestionDialog, {
      title: (0, _languageHandler._t)('Reject invitation'),
      description: (0, _languageHandler._t)('Are you sure you want to reject the invitation?'),
      onFinished: async shouldLeave => {
        if (!shouldLeave) return; // FIXME: controller shouldn't be loading a view :(

        const Loader = sdk.getComponent("elements.Spinner");

        const modal = _Modal.default.createDialog(Loader, null, 'mx_Dialog_spinner');

        try {
          await _GroupStore.default.leaveGroup(this.props.group.groupId);
        } catch (e) {
          _logger.logger.error("Error rejecting community invite: ", e);

          const ErrorDialog = sdk.getComponent("dialogs.ErrorDialog");

          _Modal.default.createTrackedDialog('Error rejecting invite', '', ErrorDialog, {
            title: (0, _languageHandler._t)("Error"),
            description: (0, _languageHandler._t)("Unable to reject invite")
          });
        } finally {
          modal.close();
        }
      }
    }); // Close the context menu


    if (this.props.onFinished) {
      this.props.onFinished();
    }
  }

  render() {
    return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_ContextMenu.MenuItem, {
      className: "mx_RoomTileContextMenu_leave",
      onClick: this._onClickReject
    }, /*#__PURE__*/_react.default.createElement("img", {
      className: "mx_RoomTileContextMenu_tag_icon",
      src: require("../../../../res/img/icon_context_delete.svg"),
      width: "15",
      height: "15",
      alt: ""
    }), (0, _languageHandler._t)('Reject')));
  }

}, (0, _defineProperty2.default)(_class2, "propTypes", {
  group: _propTypes.default.instanceOf(_group.Group).isRequired,

  /* callback called when the menu is dismissed */
  onFinished: _propTypes.default.func
}), _temp)) || _class);
exports.default = GroupInviteTileContextMenu;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL2NvbnRleHRfbWVudXMvR3JvdXBJbnZpdGVUaWxlQ29udGV4dE1lbnUuanMiXSwibmFtZXMiOlsiR3JvdXBJbnZpdGVUaWxlQ29udGV4dE1lbnUiLCJSZWFjdCIsIkNvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwicHJvcHMiLCJfb25DbGlja1JlamVjdCIsImJpbmQiLCJjb21wb25lbnREaWRNb3VudCIsIl91bm1vdW50ZWQiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsIlF1ZXN0aW9uRGlhbG9nIiwic2RrIiwiZ2V0Q29tcG9uZW50IiwiTW9kYWwiLCJjcmVhdGVUcmFja2VkRGlhbG9nIiwidGl0bGUiLCJkZXNjcmlwdGlvbiIsIm9uRmluaXNoZWQiLCJzaG91bGRMZWF2ZSIsIkxvYWRlciIsIm1vZGFsIiwiY3JlYXRlRGlhbG9nIiwiR3JvdXBTdG9yZSIsImxlYXZlR3JvdXAiLCJncm91cCIsImdyb3VwSWQiLCJlIiwibG9nZ2VyIiwiZXJyb3IiLCJFcnJvckRpYWxvZyIsImNsb3NlIiwicmVuZGVyIiwicmVxdWlyZSIsIlByb3BUeXBlcyIsImluc3RhbmNlT2YiLCJHcm91cCIsImlzUmVxdWlyZWQiLCJmdW5jIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQWlCQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQTs7Ozs7Ozs7SUFHcUJBLDBCLFdBRHBCLGdEQUFxQixnREFBckIsQyxtQ0FBRCxNQUNxQkEsMEJBRHJCLFNBQ3dEQyxlQUFNQyxTQUQ5RCxDQUN3RTtBQU9wRUMsRUFBQUEsV0FBVyxDQUFDQyxLQUFELEVBQVE7QUFDZixVQUFNQSxLQUFOO0FBRUEsU0FBS0MsY0FBTCxHQUFzQixLQUFLQSxjQUFMLENBQW9CQyxJQUFwQixDQUF5QixJQUF6QixDQUF0QjtBQUNIOztBQUVEQyxFQUFBQSxpQkFBaUIsR0FBRztBQUNoQixTQUFLQyxVQUFMLEdBQWtCLEtBQWxCO0FBQ0g7O0FBRURDLEVBQUFBLG9CQUFvQixHQUFHO0FBQ25CLFNBQUtELFVBQUwsR0FBa0IsSUFBbEI7QUFDSDs7QUFFREgsRUFBQUEsY0FBYyxHQUFHO0FBQ2IsVUFBTUssY0FBYyxHQUFHQyxHQUFHLENBQUNDLFlBQUosQ0FBaUIsd0JBQWpCLENBQXZCOztBQUNBQyxtQkFBTUMsbUJBQU4sQ0FBMEIseUJBQTFCLEVBQXFELEVBQXJELEVBQXlESixjQUF6RCxFQUF5RTtBQUNyRUssTUFBQUEsS0FBSyxFQUFFLHlCQUFHLG1CQUFILENBRDhEO0FBRXJFQyxNQUFBQSxXQUFXLEVBQUUseUJBQUcsaURBQUgsQ0FGd0Q7QUFHckVDLE1BQUFBLFVBQVUsRUFBRSxNQUFPQyxXQUFQLElBQXVCO0FBQy9CLFlBQUksQ0FBQ0EsV0FBTCxFQUFrQixPQURhLENBRy9COztBQUNBLGNBQU1DLE1BQU0sR0FBR1IsR0FBRyxDQUFDQyxZQUFKLENBQWlCLGtCQUFqQixDQUFmOztBQUNBLGNBQU1RLEtBQUssR0FBR1AsZUFBTVEsWUFBTixDQUFtQkYsTUFBbkIsRUFBMkIsSUFBM0IsRUFBaUMsbUJBQWpDLENBQWQ7O0FBRUEsWUFBSTtBQUNBLGdCQUFNRyxvQkFBV0MsVUFBWCxDQUFzQixLQUFLbkIsS0FBTCxDQUFXb0IsS0FBWCxDQUFpQkMsT0FBdkMsQ0FBTjtBQUNILFNBRkQsQ0FFRSxPQUFPQyxDQUFQLEVBQVU7QUFDUkMseUJBQU9DLEtBQVAsQ0FBYSxvQ0FBYixFQUFtREYsQ0FBbkQ7O0FBQ0EsZ0JBQU1HLFdBQVcsR0FBR2xCLEdBQUcsQ0FBQ0MsWUFBSixDQUFpQixxQkFBakIsQ0FBcEI7O0FBQ0FDLHlCQUFNQyxtQkFBTixDQUEwQix3QkFBMUIsRUFBb0QsRUFBcEQsRUFBd0RlLFdBQXhELEVBQXFFO0FBQ2pFZCxZQUFBQSxLQUFLLEVBQUUseUJBQUcsT0FBSCxDQUQwRDtBQUVqRUMsWUFBQUEsV0FBVyxFQUFFLHlCQUFHLHlCQUFIO0FBRm9ELFdBQXJFO0FBSUgsU0FURCxTQVNVO0FBQ05JLFVBQUFBLEtBQUssQ0FBQ1UsS0FBTjtBQUNIO0FBQ0o7QUF0Qm9FLEtBQXpFLEVBRmEsQ0EyQmI7OztBQUNBLFFBQUksS0FBSzFCLEtBQUwsQ0FBV2EsVUFBZixFQUEyQjtBQUN2QixXQUFLYixLQUFMLENBQVdhLFVBQVg7QUFDSDtBQUNKOztBQUVEYyxFQUFBQSxNQUFNLEdBQUc7QUFDTCx3QkFBTyx1REFDSCw2QkFBQyxxQkFBRDtBQUFVLE1BQUEsU0FBUyxFQUFDLDhCQUFwQjtBQUFtRCxNQUFBLE9BQU8sRUFBRSxLQUFLMUI7QUFBakUsb0JBQ0k7QUFBSyxNQUFBLFNBQVMsRUFBQyxpQ0FBZjtBQUFpRCxNQUFBLEdBQUcsRUFBRTJCLE9BQU8sQ0FBQyw2Q0FBRCxDQUE3RDtBQUE4RyxNQUFBLEtBQUssRUFBQyxJQUFwSDtBQUF5SCxNQUFBLE1BQU0sRUFBQyxJQUFoSTtBQUFxSSxNQUFBLEdBQUcsRUFBQztBQUF6SSxNQURKLEVBRU0seUJBQUcsUUFBSCxDQUZOLENBREcsQ0FBUDtBQU1IOztBQTdEbUUsQyxzREFDakQ7QUFDZlIsRUFBQUEsS0FBSyxFQUFFUyxtQkFBVUMsVUFBVixDQUFxQkMsWUFBckIsRUFBNEJDLFVBRHBCOztBQUVmO0FBQ0FuQixFQUFBQSxVQUFVLEVBQUVnQixtQkFBVUk7QUFIUCxDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbkNvcHlyaWdodCAyMDE4IFZlY3RvciBDcmVhdGlvbnMgTHRkXG5Db3B5cmlnaHQgMjAxOSBUaGUgTWF0cml4Lm9yZyBGb3VuZGF0aW9uIEMuSS5DLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0ICogYXMgc2RrIGZyb20gJy4uLy4uLy4uL2luZGV4JztcbmltcG9ydCB7IF90IH0gZnJvbSAnLi4vLi4vLi4vbGFuZ3VhZ2VIYW5kbGVyJztcbmltcG9ydCBNb2RhbCBmcm9tICcuLi8uLi8uLi9Nb2RhbCc7XG5pbXBvcnQgeyBHcm91cCB9IGZyb20gJ21hdHJpeC1qcy1zZGsvc3JjL21vZGVscy9ncm91cCc7XG5pbXBvcnQgR3JvdXBTdG9yZSBmcm9tIFwiLi4vLi4vLi4vc3RvcmVzL0dyb3VwU3RvcmVcIjtcbmltcG9ydCB7IE1lbnVJdGVtIH0gZnJvbSBcIi4uLy4uL3N0cnVjdHVyZXMvQ29udGV4dE1lbnVcIjtcbmltcG9ydCB7IHJlcGxhY2VhYmxlQ29tcG9uZW50IH0gZnJvbSBcIi4uLy4uLy4uL3V0aWxzL3JlcGxhY2VhYmxlQ29tcG9uZW50XCI7XG5cbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gXCJtYXRyaXgtanMtc2RrL3NyYy9sb2dnZXJcIjtcblxuQHJlcGxhY2VhYmxlQ29tcG9uZW50KFwidmlld3MuY29udGV4dF9tZW51cy5Hcm91cEludml0ZVRpbGVDb250ZXh0TWVudVwiKVxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR3JvdXBJbnZpdGVUaWxlQ29udGV4dE1lbnUgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICAgIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgICAgIGdyb3VwOiBQcm9wVHlwZXMuaW5zdGFuY2VPZihHcm91cCkuaXNSZXF1aXJlZCxcbiAgICAgICAgLyogY2FsbGJhY2sgY2FsbGVkIHdoZW4gdGhlIG1lbnUgaXMgZGlzbWlzc2VkICovXG4gICAgICAgIG9uRmluaXNoZWQ6IFByb3BUeXBlcy5mdW5jLFxuICAgIH07XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG5cbiAgICAgICAgdGhpcy5fb25DbGlja1JlamVjdCA9IHRoaXMuX29uQ2xpY2tSZWplY3QuYmluZCh0aGlzKTtcbiAgICB9XG5cbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgICAgdGhpcy5fdW5tb3VudGVkID0gZmFsc2U7XG4gICAgfVxuXG4gICAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICAgIHRoaXMuX3VubW91bnRlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgX29uQ2xpY2tSZWplY3QoKSB7XG4gICAgICAgIGNvbnN0IFF1ZXN0aW9uRGlhbG9nID0gc2RrLmdldENvbXBvbmVudCgnZGlhbG9ncy5RdWVzdGlvbkRpYWxvZycpO1xuICAgICAgICBNb2RhbC5jcmVhdGVUcmFja2VkRGlhbG9nKCdSZWplY3QgY29tbXVuaXR5IGludml0ZScsICcnLCBRdWVzdGlvbkRpYWxvZywge1xuICAgICAgICAgICAgdGl0bGU6IF90KCdSZWplY3QgaW52aXRhdGlvbicpLFxuICAgICAgICAgICAgZGVzY3JpcHRpb246IF90KCdBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gcmVqZWN0IHRoZSBpbnZpdGF0aW9uPycpLFxuICAgICAgICAgICAgb25GaW5pc2hlZDogYXN5bmMgKHNob3VsZExlYXZlKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFzaG91bGRMZWF2ZSkgcmV0dXJuO1xuXG4gICAgICAgICAgICAgICAgLy8gRklYTUU6IGNvbnRyb2xsZXIgc2hvdWxkbid0IGJlIGxvYWRpbmcgYSB2aWV3IDooXG4gICAgICAgICAgICAgICAgY29uc3QgTG9hZGVyID0gc2RrLmdldENvbXBvbmVudChcImVsZW1lbnRzLlNwaW5uZXJcIik7XG4gICAgICAgICAgICAgICAgY29uc3QgbW9kYWwgPSBNb2RhbC5jcmVhdGVEaWFsb2coTG9hZGVyLCBudWxsLCAnbXhfRGlhbG9nX3NwaW5uZXInKTtcblxuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IEdyb3VwU3RvcmUubGVhdmVHcm91cCh0aGlzLnByb3BzLmdyb3VwLmdyb3VwSWQpO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKFwiRXJyb3IgcmVqZWN0aW5nIGNvbW11bml0eSBpbnZpdGU6IFwiLCBlKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgRXJyb3JEaWFsb2cgPSBzZGsuZ2V0Q29tcG9uZW50KFwiZGlhbG9ncy5FcnJvckRpYWxvZ1wiKTtcbiAgICAgICAgICAgICAgICAgICAgTW9kYWwuY3JlYXRlVHJhY2tlZERpYWxvZygnRXJyb3IgcmVqZWN0aW5nIGludml0ZScsICcnLCBFcnJvckRpYWxvZywge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IF90KFwiRXJyb3JcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogX3QoXCJVbmFibGUgdG8gcmVqZWN0IGludml0ZVwiKSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgbW9kYWwuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBDbG9zZSB0aGUgY29udGV4dCBtZW51XG4gICAgICAgIGlmICh0aGlzLnByb3BzLm9uRmluaXNoZWQpIHtcbiAgICAgICAgICAgIHRoaXMucHJvcHMub25GaW5pc2hlZCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gPGRpdj5cbiAgICAgICAgICAgIDxNZW51SXRlbSBjbGFzc05hbWU9XCJteF9Sb29tVGlsZUNvbnRleHRNZW51X2xlYXZlXCIgb25DbGljaz17dGhpcy5fb25DbGlja1JlamVjdH0+XG4gICAgICAgICAgICAgICAgPGltZyBjbGFzc05hbWU9XCJteF9Sb29tVGlsZUNvbnRleHRNZW51X3RhZ19pY29uXCIgc3JjPXtyZXF1aXJlKFwiLi4vLi4vLi4vLi4vcmVzL2ltZy9pY29uX2NvbnRleHRfZGVsZXRlLnN2Z1wiKX0gd2lkdGg9XCIxNVwiIGhlaWdodD1cIjE1XCIgYWx0PVwiXCIgLz5cbiAgICAgICAgICAgICAgICB7IF90KCdSZWplY3QnKSB9XG4gICAgICAgICAgICA8L01lbnVJdGVtPlxuICAgICAgICA8L2Rpdj47XG4gICAgfVxufVxuIl19