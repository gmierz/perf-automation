"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var React = _interopRequireWildcard(require("react"));

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

var _ContextMenu = _interopRequireDefault(require("../../structures/ContextMenu"));

var _Field = _interopRequireDefault(require("../elements/Field"));

var _DialPad = _interopRequireDefault(require("../voip/DialPad"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _dec, _class;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

let DialpadContextMenu = (_dec = (0, _replaceableComponent.replaceableComponent)("views.context_menus.DialpadContextMenu"), _dec(_class = class DialpadContextMenu extends React.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "numberEntryFieldRef", /*#__PURE__*/(0, React.createRef)());
    (0, _defineProperty2.default)(this, "onDigitPress", (digit, ev) => {
      this.props.call.sendDtmfDigit(digit);
      this.setState({
        value: this.state.value + digit
      }); // Keep the number field focused so that keyboard entry is still available
      // However, don't focus if this wasn't the result of directly clicking on the button,
      // i.e someone using keyboard navigation.

      if (ev.type === "click") {
        var _this$numberEntryFiel;

        (_this$numberEntryFiel = this.numberEntryFieldRef.current) === null || _this$numberEntryFiel === void 0 ? void 0 : _this$numberEntryFiel.focus();
      }
    });
    (0, _defineProperty2.default)(this, "onCancelClick", () => {
      this.props.onFinished();
    });
    (0, _defineProperty2.default)(this, "onKeyDown", ev => {
      // Prevent Backspace and Delete keys from functioning in the entry field
      if (ev.code === "Backspace" || ev.code === "Delete") {
        ev.preventDefault();
      }
    });
    (0, _defineProperty2.default)(this, "onChange", ev => {
      this.setState({
        value: ev.target.value
      });
    });
    this.state = {
      value: ''
    };
  }

  render() {
    return /*#__PURE__*/React.createElement(_ContextMenu.default, this.props, /*#__PURE__*/React.createElement("div", {
      className: "mx_DialPadContextMenuWrapper"
    }, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(_AccessibleButton.default, {
      className: "mx_DialPadContextMenu_cancel",
      onClick: this.onCancelClick
    })), /*#__PURE__*/React.createElement("div", {
      className: "mx_DialPadContextMenu_header"
    }, /*#__PURE__*/React.createElement(_Field.default, {
      ref: this.numberEntryFieldRef,
      className: "mx_DialPadContextMenu_dialled",
      value: this.state.value,
      autoFocus: true,
      onKeyDown: this.onKeyDown,
      onChange: this.onChange
    })), /*#__PURE__*/React.createElement("div", {
      className: "mx_DialPadContextMenu_dialPad"
    }, /*#__PURE__*/React.createElement(_DialPad.default, {
      onDigitPress: this.onDigitPress,
      hasDial: false
    }))));
  }

}) || _class);
exports.default = DialpadContextMenu;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL2NvbnRleHRfbWVudXMvRGlhbHBhZENvbnRleHRNZW51LnRzeCJdLCJuYW1lcyI6WyJEaWFscGFkQ29udGV4dE1lbnUiLCJSZWFjdCIsIkNvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwicHJvcHMiLCJkaWdpdCIsImV2IiwiY2FsbCIsInNlbmREdG1mRGlnaXQiLCJzZXRTdGF0ZSIsInZhbHVlIiwic3RhdGUiLCJ0eXBlIiwibnVtYmVyRW50cnlGaWVsZFJlZiIsImN1cnJlbnQiLCJmb2N1cyIsIm9uRmluaXNoZWQiLCJjb2RlIiwicHJldmVudERlZmF1bHQiLCJ0YXJnZXQiLCJyZW5kZXIiLCJvbkNhbmNlbENsaWNrIiwib25LZXlEb3duIiwib25DaGFuZ2UiLCJvbkRpZ2l0UHJlc3MiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBZ0JBOztBQUVBOztBQUNBOztBQUVBOztBQUNBOztBQUNBOzs7Ozs7OztJQVdxQkEsa0IsV0FEcEIsZ0RBQXFCLHdDQUFyQixDLGdCQUFELE1BQ3FCQSxrQkFEckIsU0FDZ0RDLEtBQUssQ0FBQ0MsU0FEdEQsQ0FDZ0Y7QUFHNUVDLEVBQUFBLFdBQVcsQ0FBQ0MsS0FBRCxFQUFRO0FBQ2YsVUFBTUEsS0FBTjtBQURlLDRFQUZtQyxzQkFFbkM7QUFBQSx3REFRSixDQUFDQyxLQUFELEVBQWdCQyxFQUFoQixLQUFvQztBQUMvQyxXQUFLRixLQUFMLENBQVdHLElBQVgsQ0FBZ0JDLGFBQWhCLENBQThCSCxLQUE5QjtBQUNBLFdBQUtJLFFBQUwsQ0FBYztBQUFFQyxRQUFBQSxLQUFLLEVBQUUsS0FBS0MsS0FBTCxDQUFXRCxLQUFYLEdBQW1CTDtBQUE1QixPQUFkLEVBRitDLENBSS9DO0FBQ0E7QUFDQTs7QUFDQSxVQUFJQyxFQUFFLENBQUNNLElBQUgsS0FBWSxPQUFoQixFQUF5QjtBQUFBOztBQUNyQixzQ0FBS0MsbUJBQUwsQ0FBeUJDLE9BQXpCLGdGQUFrQ0MsS0FBbEM7QUFDSDtBQUNKLEtBbEJrQjtBQUFBLHlEQW9CSCxNQUFNO0FBQ2xCLFdBQUtYLEtBQUwsQ0FBV1ksVUFBWDtBQUNILEtBdEJrQjtBQUFBLHFEQXdCTlYsRUFBRCxJQUFRO0FBQ2hCO0FBQ0EsVUFBSUEsRUFBRSxDQUFDVyxJQUFILEtBQVksV0FBWixJQUEyQlgsRUFBRSxDQUFDVyxJQUFILEtBQVksUUFBM0MsRUFBcUQ7QUFDakRYLFFBQUFBLEVBQUUsQ0FBQ1ksY0FBSDtBQUNIO0FBQ0osS0E3QmtCO0FBQUEsb0RBK0JQWixFQUFELElBQVE7QUFDZixXQUFLRyxRQUFMLENBQWM7QUFBRUMsUUFBQUEsS0FBSyxFQUFFSixFQUFFLENBQUNhLE1BQUgsQ0FBVVQ7QUFBbkIsT0FBZDtBQUNILEtBakNrQjtBQUdmLFNBQUtDLEtBQUwsR0FBYTtBQUNURCxNQUFBQSxLQUFLLEVBQUU7QUFERSxLQUFiO0FBR0g7O0FBNkJEVSxFQUFBQSxNQUFNLEdBQUc7QUFDTCx3QkFBTyxvQkFBQyxvQkFBRCxFQUFpQixLQUFLaEIsS0FBdEIsZUFDSDtBQUFLLE1BQUEsU0FBUyxFQUFDO0FBQWYsb0JBQ0ksOENBQ0ksb0JBQUMseUJBQUQ7QUFBa0IsTUFBQSxTQUFTLEVBQUMsOEJBQTVCO0FBQTJELE1BQUEsT0FBTyxFQUFFLEtBQUtpQjtBQUF6RSxNQURKLENBREosZUFJSTtBQUFLLE1BQUEsU0FBUyxFQUFDO0FBQWYsb0JBQ0ksb0JBQUMsY0FBRDtBQUNJLE1BQUEsR0FBRyxFQUFFLEtBQUtSLG1CQURkO0FBRUksTUFBQSxTQUFTLEVBQUMsK0JBRmQ7QUFHSSxNQUFBLEtBQUssRUFBRSxLQUFLRixLQUFMLENBQVdELEtBSHRCO0FBSUksTUFBQSxTQUFTLEVBQUUsSUFKZjtBQUtJLE1BQUEsU0FBUyxFQUFFLEtBQUtZLFNBTHBCO0FBTUksTUFBQSxRQUFRLEVBQUUsS0FBS0M7QUFObkIsTUFESixDQUpKLGVBY0k7QUFBSyxNQUFBLFNBQVMsRUFBQztBQUFmLG9CQUNJLG9CQUFDLGdCQUFEO0FBQVMsTUFBQSxZQUFZLEVBQUUsS0FBS0MsWUFBNUI7QUFBMEMsTUFBQSxPQUFPLEVBQUU7QUFBbkQsTUFESixDQWRKLENBREcsQ0FBUDtBQW9CSDs7QUEzRDJFLEMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuQ29weXJpZ2h0IDIwMjEgVGhlIE1hdHJpeC5vcmcgRm91bmRhdGlvbiBDLkkuQy5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IGNyZWF0ZVJlZiB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IEFjY2Vzc2libGVCdXR0b24sIHsgQnV0dG9uRXZlbnQgfSBmcm9tIFwiLi4vZWxlbWVudHMvQWNjZXNzaWJsZUJ1dHRvblwiO1xuaW1wb3J0IENvbnRleHRNZW51LCB7IElQcm9wcyBhcyBJQ29udGV4dE1lbnVQcm9wcyB9IGZyb20gJy4uLy4uL3N0cnVjdHVyZXMvQ29udGV4dE1lbnUnO1xuaW1wb3J0IHsgTWF0cml4Q2FsbCB9IGZyb20gJ21hdHJpeC1qcy1zZGsvc3JjL3dlYnJ0Yy9jYWxsJztcbmltcG9ydCBGaWVsZCBmcm9tIFwiLi4vZWxlbWVudHMvRmllbGRcIjtcbmltcG9ydCBEaWFsUGFkIGZyb20gJy4uL3ZvaXAvRGlhbFBhZCc7XG5pbXBvcnQgeyByZXBsYWNlYWJsZUNvbXBvbmVudCB9IGZyb20gXCIuLi8uLi8uLi91dGlscy9yZXBsYWNlYWJsZUNvbXBvbmVudFwiO1xuXG5pbnRlcmZhY2UgSVByb3BzIGV4dGVuZHMgSUNvbnRleHRNZW51UHJvcHMge1xuICAgIGNhbGw6IE1hdHJpeENhbGw7XG59XG5cbmludGVyZmFjZSBJU3RhdGUge1xuICAgIHZhbHVlOiBzdHJpbmc7XG59XG5cbkByZXBsYWNlYWJsZUNvbXBvbmVudChcInZpZXdzLmNvbnRleHRfbWVudXMuRGlhbHBhZENvbnRleHRNZW51XCIpXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEaWFscGFkQ29udGV4dE1lbnUgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8SVByb3BzLCBJU3RhdGU+IHtcbiAgICBwcml2YXRlIG51bWJlckVudHJ5RmllbGRSZWY6IFJlYWN0LlJlZk9iamVjdDxGaWVsZD4gPSBjcmVhdGVSZWYoKTtcblxuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcblxuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgdmFsdWU6ICcnLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIG9uRGlnaXRQcmVzcyA9IChkaWdpdDogc3RyaW5nLCBldjogQnV0dG9uRXZlbnQpID0+IHtcbiAgICAgICAgdGhpcy5wcm9wcy5jYWxsLnNlbmREdG1mRGlnaXQoZGlnaXQpO1xuICAgICAgICB0aGlzLnNldFN0YXRlKHsgdmFsdWU6IHRoaXMuc3RhdGUudmFsdWUgKyBkaWdpdCB9KTtcblxuICAgICAgICAvLyBLZWVwIHRoZSBudW1iZXIgZmllbGQgZm9jdXNlZCBzbyB0aGF0IGtleWJvYXJkIGVudHJ5IGlzIHN0aWxsIGF2YWlsYWJsZVxuICAgICAgICAvLyBIb3dldmVyLCBkb24ndCBmb2N1cyBpZiB0aGlzIHdhc24ndCB0aGUgcmVzdWx0IG9mIGRpcmVjdGx5IGNsaWNraW5nIG9uIHRoZSBidXR0b24sXG4gICAgICAgIC8vIGkuZSBzb21lb25lIHVzaW5nIGtleWJvYXJkIG5hdmlnYXRpb24uXG4gICAgICAgIGlmIChldi50eXBlID09PSBcImNsaWNrXCIpIHtcbiAgICAgICAgICAgIHRoaXMubnVtYmVyRW50cnlGaWVsZFJlZi5jdXJyZW50Py5mb2N1cygpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIG9uQ2FuY2VsQ2xpY2sgPSAoKSA9PiB7XG4gICAgICAgIHRoaXMucHJvcHMub25GaW5pc2hlZCgpO1xuICAgIH07XG5cbiAgICBvbktleURvd24gPSAoZXYpID0+IHtcbiAgICAgICAgLy8gUHJldmVudCBCYWNrc3BhY2UgYW5kIERlbGV0ZSBrZXlzIGZyb20gZnVuY3Rpb25pbmcgaW4gdGhlIGVudHJ5IGZpZWxkXG4gICAgICAgIGlmIChldi5jb2RlID09PSBcIkJhY2tzcGFjZVwiIHx8IGV2LmNvZGUgPT09IFwiRGVsZXRlXCIpIHtcbiAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgb25DaGFuZ2UgPSAoZXYpID0+IHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHZhbHVlOiBldi50YXJnZXQudmFsdWUgfSk7XG4gICAgfTtcblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIDxDb250ZXh0TWVudSB7Li4udGhpcy5wcm9wc30+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm14X0RpYWxQYWRDb250ZXh0TWVudVdyYXBwZXJcIj5cbiAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICA8QWNjZXNzaWJsZUJ1dHRvbiBjbGFzc05hbWU9XCJteF9EaWFsUGFkQ29udGV4dE1lbnVfY2FuY2VsXCIgb25DbGljaz17dGhpcy5vbkNhbmNlbENsaWNrfSAvPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibXhfRGlhbFBhZENvbnRleHRNZW51X2hlYWRlclwiPlxuICAgICAgICAgICAgICAgICAgICA8RmllbGRcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZj17dGhpcy5udW1iZXJFbnRyeUZpZWxkUmVmfVxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwibXhfRGlhbFBhZENvbnRleHRNZW51X2RpYWxsZWRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUudmFsdWV9XG4gICAgICAgICAgICAgICAgICAgICAgICBhdXRvRm9jdXM9e3RydWV9XG4gICAgICAgICAgICAgICAgICAgICAgICBvbktleURvd249e3RoaXMub25LZXlEb3dufVxuICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMub25DaGFuZ2V9XG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJteF9EaWFsUGFkQ29udGV4dE1lbnVfZGlhbFBhZFwiPlxuICAgICAgICAgICAgICAgICAgICA8RGlhbFBhZCBvbkRpZ2l0UHJlc3M9e3RoaXMub25EaWdpdFByZXNzfSBoYXNEaWFsPXtmYWxzZX0gLz5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L0NvbnRleHRNZW51PjtcbiAgICB9XG59XG4iXX0=