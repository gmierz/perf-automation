"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _EmojiPicker = _interopRequireDefault(require("./EmojiPicker"));

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _actions = require("../../../dispatcher/actions");

var _dec, _class;

let ReactionPicker = (_dec = (0, _replaceableComponent.replaceableComponent)("views.emojipicker.ReactionPicker"), _dec(_class = class ReactionPicker extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "onReactionsChange", () => {
      this.setState({
        selectedEmojis: new Set(Object.keys(this.getReactions()))
      });
    });
    (0, _defineProperty2.default)(this, "onChoose", reaction => {
      this.componentWillUnmount();
      this.props.onFinished();
      const myReactions = this.getReactions();

      if (myReactions.hasOwnProperty(reaction)) {
        _MatrixClientPeg.MatrixClientPeg.get().redactEvent(this.props.mxEvent.getRoomId(), myReactions[reaction]);

        _dispatcher.default.fire(_actions.Action.FocusAComposer); // Tell the emoji picker not to bump this in the more frequently used list.


        return false;
      } else {
        _MatrixClientPeg.MatrixClientPeg.get().sendEvent(this.props.mxEvent.getRoomId(), "m.reaction", {
          "m.relates_to": {
            "rel_type": "m.annotation",
            "event_id": this.props.mxEvent.getId(),
            "key": reaction
          }
        });

        _dispatcher.default.dispatch({
          action: "message_sent"
        });

        _dispatcher.default.fire(_actions.Action.FocusAComposer);

        return true;
      }
    });
    this.state = {
      selectedEmojis: new Set(Object.keys(this.getReactions()))
    };
    this.addListeners();
  }

  componentDidUpdate(prevProps) {
    if (prevProps.reactions !== this.props.reactions) {
      this.addListeners();
      this.onReactionsChange();
    }
  }

  addListeners() {
    if (this.props.reactions) {
      this.props.reactions.on("Relations.add", this.onReactionsChange);
      this.props.reactions.on("Relations.remove", this.onReactionsChange);
      this.props.reactions.on("Relations.redaction", this.onReactionsChange);
    }
  }

  componentWillUnmount() {
    if (this.props.reactions) {
      this.props.reactions.removeListener("Relations.add", this.onReactionsChange);
      this.props.reactions.removeListener("Relations.remove", this.onReactionsChange);
      this.props.reactions.removeListener("Relations.redaction", this.onReactionsChange);
    }
  }

  getReactions() {
    if (!this.props.reactions) {
      return {};
    }

    const userId = _MatrixClientPeg.MatrixClientPeg.get().getUserId();

    const myAnnotations = this.props.reactions.getAnnotationsBySender()[userId] || [];
    return Object.fromEntries([...myAnnotations].filter(event => !event.isRedacted()).map(event => [event.getRelation().key, event.getId()]));
  }

  render() {
    return /*#__PURE__*/_react.default.createElement(_EmojiPicker.default, {
      onChoose: this.onChoose,
      selectedEmojis: this.state.selectedEmojis,
      showQuickReactions: true
    });
  }

}) || _class);
var _default = ReactionPicker;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,