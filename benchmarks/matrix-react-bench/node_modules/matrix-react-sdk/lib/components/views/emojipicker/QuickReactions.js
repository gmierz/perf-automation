"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _languageHandler = require("../../../languageHandler");

var _emoji = require("../../../emoji");

var _Emoji = _interopRequireDefault(require("./Emoji"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _dec, _class;

// We use the variation-selector Heart in Quick Reactions for some reason
const QUICK_REACTIONS = ["👍", "👎", "😄", "🎉", "😕", "❤️", "🚀", "👀"].map(emoji => {
  const data = (0, _emoji.getEmojiFromUnicode)(emoji);

  if (!data) {
    throw new Error(`Emoji ${emoji} doesn't exist in emojibase`);
  }

  return data;
});
let QuickReactions = (_dec = (0, _replaceableComponent.replaceableComponent)("views.emojipicker.QuickReactions"), _dec(_class = class QuickReactions extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "onMouseEnter", emoji => {
      this.setState({
        hover: emoji
      });
    });
    (0, _defineProperty2.default)(this, "onMouseLeave", () => {
      this.setState({
        hover: null
      });
    });
    this.state = {
      hover: null
    };
  }

  render() {
    return /*#__PURE__*/_react.default.createElement("section", {
      className: "mx_EmojiPicker_footer mx_EmojiPicker_quick mx_EmojiPicker_category"
    }, /*#__PURE__*/_react.default.createElement("h2", {
      className: "mx_EmojiPicker_quick_header mx_EmojiPicker_category_label"
    }, !this.state.hover ? (0, _languageHandler._t)("Quick Reactions") : /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_EmojiPicker_name"
    }, this.state.hover.annotation), /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_EmojiPicker_shortcode"
    }, this.state.hover.shortcodes[0]))), /*#__PURE__*/_react.default.createElement("ul", {
      className: "mx_EmojiPicker_list",
      "aria-label": (0, _languageHandler._t)("Quick Reactions")
    }, QUICK_REACTIONS.map(emoji => /*#__PURE__*/_react.default.createElement(_Emoji.default, {
      key: emoji.hexcode,
      emoji: emoji,
      onClick: this.props.onClick,
      onMouseEnter: this.onMouseEnter,
      onMouseLeave: this.onMouseLeave,
      selectedEmojis: this.props.selectedEmojis
    }))));
  }

}) || _class);
var _default = QuickReactions;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL2Vtb2ppcGlja2VyL1F1aWNrUmVhY3Rpb25zLnRzeCJdLCJuYW1lcyI6WyJRVUlDS19SRUFDVElPTlMiLCJtYXAiLCJlbW9qaSIsImRhdGEiLCJFcnJvciIsIlF1aWNrUmVhY3Rpb25zIiwiUmVhY3QiLCJDb21wb25lbnQiLCJjb25zdHJ1Y3RvciIsInByb3BzIiwic2V0U3RhdGUiLCJob3ZlciIsInN0YXRlIiwicmVuZGVyIiwiYW5ub3RhdGlvbiIsInNob3J0Y29kZXMiLCJoZXhjb2RlIiwib25DbGljayIsIm9uTW91c2VFbnRlciIsIm9uTW91c2VMZWF2ZSIsInNlbGVjdGVkRW1vamlzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQWlCQTs7QUFFQTs7QUFDQTs7QUFDQTs7QUFDQTs7OztBQUVBO0FBQ0EsTUFBTUEsZUFBZSxHQUFHLENBQUMsSUFBRCxFQUFPLElBQVAsRUFBYSxJQUFiLEVBQW1CLElBQW5CLEVBQXlCLElBQXpCLEVBQStCLElBQS9CLEVBQXFDLElBQXJDLEVBQTJDLElBQTNDLEVBQWlEQyxHQUFqRCxDQUFxREMsS0FBSyxJQUFJO0FBQ2xGLFFBQU1DLElBQUksR0FBRyxnQ0FBb0JELEtBQXBCLENBQWI7O0FBQ0EsTUFBSSxDQUFDQyxJQUFMLEVBQVc7QUFDUCxVQUFNLElBQUlDLEtBQUosQ0FBVyxTQUFRRixLQUFNLDZCQUF6QixDQUFOO0FBQ0g7O0FBQ0QsU0FBT0MsSUFBUDtBQUNILENBTnVCLENBQXhCO0lBa0JNRSxjLFdBREwsZ0RBQXFCLGtDQUFyQixDLGdCQUFELE1BQ01BLGNBRE4sU0FDNkJDLGVBQU1DLFNBRG5DLENBQzZEO0FBQ3pEQyxFQUFBQSxXQUFXLENBQUNDLEtBQUQsRUFBUTtBQUNmLFVBQU1BLEtBQU47QUFEZSx3REFPS1AsS0FBRCxJQUFtQjtBQUN0QyxXQUFLUSxRQUFMLENBQWM7QUFDVkMsUUFBQUEsS0FBSyxFQUFFVDtBQURHLE9BQWQ7QUFHSCxLQVhrQjtBQUFBLHdEQWFJLE1BQU07QUFDekIsV0FBS1EsUUFBTCxDQUFjO0FBQ1ZDLFFBQUFBLEtBQUssRUFBRTtBQURHLE9BQWQ7QUFHSCxLQWpCa0I7QUFFZixTQUFLQyxLQUFMLEdBQWE7QUFDVEQsTUFBQUEsS0FBSyxFQUFFO0FBREUsS0FBYjtBQUdIOztBQWNERSxFQUFBQSxNQUFNLEdBQUc7QUFDTCx3QkFDSTtBQUFTLE1BQUEsU0FBUyxFQUFDO0FBQW5CLG9CQUNJO0FBQUksTUFBQSxTQUFTLEVBQUM7QUFBZCxPQUNNLENBQUMsS0FBS0QsS0FBTCxDQUFXRCxLQUFaLEdBQ0kseUJBQUcsaUJBQUgsQ0FESixnQkFFSSw2QkFBQyxjQUFELENBQU8sUUFBUCxxQkFDRTtBQUFNLE1BQUEsU0FBUyxFQUFDO0FBQWhCLE9BQXdDLEtBQUtDLEtBQUwsQ0FBV0QsS0FBWCxDQUFpQkcsVUFBekQsQ0FERixlQUVFO0FBQU0sTUFBQSxTQUFTLEVBQUM7QUFBaEIsT0FBNkMsS0FBS0YsS0FBTCxDQUFXRCxLQUFYLENBQWlCSSxVQUFqQixDQUE0QixDQUE1QixDQUE3QyxDQUZGLENBSFYsQ0FESixlQVVJO0FBQUksTUFBQSxTQUFTLEVBQUMscUJBQWQ7QUFBb0Msb0JBQVkseUJBQUcsaUJBQUg7QUFBaEQsT0FDTWYsZUFBZSxDQUFDQyxHQUFoQixDQUFvQkMsS0FBSyxpQkFDdkIsNkJBQUMsY0FBRDtBQUNJLE1BQUEsR0FBRyxFQUFFQSxLQUFLLENBQUNjLE9BRGY7QUFFSSxNQUFBLEtBQUssRUFBRWQsS0FGWDtBQUdJLE1BQUEsT0FBTyxFQUFFLEtBQUtPLEtBQUwsQ0FBV1EsT0FIeEI7QUFJSSxNQUFBLFlBQVksRUFBRSxLQUFLQyxZQUp2QjtBQUtJLE1BQUEsWUFBWSxFQUFFLEtBQUtDLFlBTHZCO0FBTUksTUFBQSxjQUFjLEVBQUUsS0FBS1YsS0FBTCxDQUFXVztBQU4vQixNQURGLENBRE4sQ0FWSixDQURKO0FBeUJIOztBQTlDd0QsQztlQWlEOUNmLGMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuQ29weXJpZ2h0IDIwMTkgVHVsaXIgQXNva2FuIDx0dWxpckBtYXVuaXVtLm5ldD5cbkNvcHlyaWdodCAyMDIwIFRoZSBNYXRyaXgub3JnIEZvdW5kYXRpb24gQy5JLkMuXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgX3QgfSBmcm9tICcuLi8uLi8uLi9sYW5ndWFnZUhhbmRsZXInO1xuaW1wb3J0IHsgZ2V0RW1vamlGcm9tVW5pY29kZSwgSUVtb2ppIH0gZnJvbSBcIi4uLy4uLy4uL2Vtb2ppXCI7XG5pbXBvcnQgRW1vamkgZnJvbSBcIi4vRW1vamlcIjtcbmltcG9ydCB7IHJlcGxhY2VhYmxlQ29tcG9uZW50IH0gZnJvbSBcIi4uLy4uLy4uL3V0aWxzL3JlcGxhY2VhYmxlQ29tcG9uZW50XCI7XG5cbi8vIFdlIHVzZSB0aGUgdmFyaWF0aW9uLXNlbGVjdG9yIEhlYXJ0IGluIFF1aWNrIFJlYWN0aW9ucyBmb3Igc29tZSByZWFzb25cbmNvbnN0IFFVSUNLX1JFQUNUSU9OUyA9IFtcIvCfkY1cIiwgXCLwn5GOXCIsIFwi8J+YhFwiLCBcIvCfjolcIiwgXCLwn5iVXCIsIFwi4p2k77iPXCIsIFwi8J+agFwiLCBcIvCfkYBcIl0ubWFwKGVtb2ppID0+IHtcbiAgICBjb25zdCBkYXRhID0gZ2V0RW1vamlGcm9tVW5pY29kZShlbW9qaSk7XG4gICAgaWYgKCFkYXRhKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgRW1vamkgJHtlbW9qaX0gZG9lc24ndCBleGlzdCBpbiBlbW9qaWJhc2VgKTtcbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG59KTtcblxuaW50ZXJmYWNlIElQcm9wcyB7XG4gICAgc2VsZWN0ZWRFbW9qaXM/OiBTZXQ8c3RyaW5nPjtcbiAgICBvbkNsaWNrKGVtb2ppOiBJRW1vamkpOiB2b2lkO1xufVxuXG5pbnRlcmZhY2UgSVN0YXRlIHtcbiAgICBob3Zlcj86IElFbW9qaTtcbn1cblxuQHJlcGxhY2VhYmxlQ29tcG9uZW50KFwidmlld3MuZW1vamlwaWNrZXIuUXVpY2tSZWFjdGlvbnNcIilcbmNsYXNzIFF1aWNrUmVhY3Rpb25zIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PElQcm9wcywgSVN0YXRlPiB7XG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgaG92ZXI6IG51bGwsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvbk1vdXNlRW50ZXIgPSAoZW1vamk6IElFbW9qaSkgPT4ge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGhvdmVyOiBlbW9qaSxcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIHByaXZhdGUgb25Nb3VzZUxlYXZlID0gKCkgPT4ge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGhvdmVyOiBudWxsLFxuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPVwibXhfRW1vamlQaWNrZXJfZm9vdGVyIG14X0Vtb2ppUGlja2VyX3F1aWNrIG14X0Vtb2ppUGlja2VyX2NhdGVnb3J5XCI+XG4gICAgICAgICAgICAgICAgPGgyIGNsYXNzTmFtZT1cIm14X0Vtb2ppUGlja2VyX3F1aWNrX2hlYWRlciBteF9FbW9qaVBpY2tlcl9jYXRlZ29yeV9sYWJlbFwiPlxuICAgICAgICAgICAgICAgICAgICB7ICF0aGlzLnN0YXRlLmhvdmVyXG4gICAgICAgICAgICAgICAgICAgICAgICA/IF90KFwiUXVpY2sgUmVhY3Rpb25zXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IDxSZWFjdC5GcmFnbWVudD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJteF9FbW9qaVBpY2tlcl9uYW1lXCI+eyB0aGlzLnN0YXRlLmhvdmVyLmFubm90YXRpb24gfTwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJteF9FbW9qaVBpY2tlcl9zaG9ydGNvZGVcIj57IHRoaXMuc3RhdGUuaG92ZXIuc2hvcnRjb2Rlc1swXSB9PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIDwvaDI+XG4gICAgICAgICAgICAgICAgPHVsIGNsYXNzTmFtZT1cIm14X0Vtb2ppUGlja2VyX2xpc3RcIiBhcmlhLWxhYmVsPXtfdChcIlF1aWNrIFJlYWN0aW9uc1wiKX0+XG4gICAgICAgICAgICAgICAgICAgIHsgUVVJQ0tfUkVBQ1RJT05TLm1hcChlbW9qaSA9PiAoKFxuICAgICAgICAgICAgICAgICAgICAgICAgPEVtb2ppXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5PXtlbW9qaS5oZXhjb2RlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVtb2ppPXtlbW9qaX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLnByb3BzLm9uQ2xpY2t9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25Nb3VzZUVudGVyPXt0aGlzLm9uTW91c2VFbnRlcn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbk1vdXNlTGVhdmU9e3RoaXMub25Nb3VzZUxlYXZlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkRW1vamlzPXt0aGlzLnByb3BzLnNlbGVjdGVkRW1vamlzfVxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgKSkpIH1cbiAgICAgICAgICAgICAgICA8L3VsPlxuICAgICAgICAgICAgPC9zZWN0aW9uPlxuICAgICAgICApO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgUXVpY2tSZWFjdGlvbnM7XG4iXX0=