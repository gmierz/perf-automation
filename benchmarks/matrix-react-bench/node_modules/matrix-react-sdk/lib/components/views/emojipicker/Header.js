"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _languageHandler = require("../../../languageHandler");

var _Keyboard = require("../../../Keyboard");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _dec, _class;

let Header = (_dec = (0, _replaceableComponent.replaceableComponent)("views.emojipicker.Header"), _dec(_class = class Header extends _react.default.PureComponent {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "onKeyDown", ev => {
      let handled = true;

      switch (ev.key) {
        case _Keyboard.Key.ARROW_LEFT:
          this.changeCategoryRelative(-1);
          break;

        case _Keyboard.Key.ARROW_RIGHT:
          this.changeCategoryRelative(1);
          break;

        case _Keyboard.Key.HOME:
          this.changeCategoryAbsolute(0);
          break;

        case _Keyboard.Key.END:
          this.changeCategoryAbsolute(this.props.categories.length - 1, -1);
          break;

        default:
          handled = false;
      }

      if (handled) {
        ev.preventDefault();
        ev.stopPropagation();
      }
    });
  }

  findNearestEnabled(index, delta) {
    index += this.props.categories.length;
    const cats = [...this.props.categories, ...this.props.categories, ...this.props.categories];

    while (index < cats.length && index >= 0) {
      if (cats[index].enabled) return index % this.props.categories.length;
      index += delta > 0 ? 1 : -1;
    }
  }

  changeCategoryRelative(delta) {
    const current = this.props.categories.findIndex(c => c.visible);
    this.changeCategoryAbsolute(current + delta, delta);
  }

  changeCategoryAbsolute(index, delta = 1) {
    const category = this.props.categories[this.findNearestEnabled(index, delta)];

    if (category) {
      this.props.onAnchorClick(category.id);
      category.ref.current.focus();
    }
  } // Implements ARIA Tabs with Automatic Activation pattern
  // https://www.w3.org/TR/wai-aria-practices/examples/tabs/tabs-1/tabs.html


  render() {
    return /*#__PURE__*/_react.default.createElement("nav", {
      className: "mx_EmojiPicker_header",
      role: "tablist",
      "aria-label": (0, _languageHandler._t)("Categories"),
      onKeyDown: this.onKeyDown
    }, this.props.categories.map(category => {
      const classes = (0, _classnames.default)(`mx_EmojiPicker_anchor mx_EmojiPicker_anchor_${category.id}`, {
        mx_EmojiPicker_anchor_visible: category.visible
      }); // Properties of this button are also modified by EmojiPicker's updateVisibility in DOM.

      return /*#__PURE__*/_react.default.createElement("button", {
        disabled: !category.enabled,
        key: category.id,
        ref: category.ref,
        className: classes,
        onClick: () => this.props.onAnchorClick(category.id),
        title: category.name,
        role: "tab",
        tabIndex: category.visible ? 0 : -1 // roving
        ,
        "aria-selected": category.visible,
        "aria-controls": `mx_EmojiPicker_category_${category.id}`
      });
    }));
  }

}) || _class);
var _default = Header;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,