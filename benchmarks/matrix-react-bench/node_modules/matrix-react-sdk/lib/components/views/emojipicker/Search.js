"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _languageHandler = require("../../../languageHandler");

var _Keyboard = require("../../../Keyboard");

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _dec, _class;

let Search = (_dec = (0, _replaceableComponent.replaceableComponent)("views.emojipicker.Search"), _dec(_class = class Search extends _react.default.PureComponent {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "inputRef", /*#__PURE__*/_react.default.createRef());
    (0, _defineProperty2.default)(this, "onKeyDown", ev => {
      if (ev.key === _Keyboard.Key.ENTER) {
        this.props.onEnter();
        ev.stopPropagation();
        ev.preventDefault();
      }
    });
  }

  componentDidMount() {
    // For some reason, neither the autoFocus nor just calling focus() here worked, so here's a setTimeout
    setTimeout(() => this.inputRef.current.focus(), 0);
  }

  render() {
    let rightButton;

    if (this.props.query) {
      rightButton = /*#__PURE__*/_react.default.createElement("button", {
        onClick: () => this.props.onChange(""),
        className: "mx_EmojiPicker_search_icon mx_EmojiPicker_search_clear",
        title: (0, _languageHandler._t)("Cancel search")
      });
    } else {
      rightButton = /*#__PURE__*/_react.default.createElement("span", {
        className: "mx_EmojiPicker_search_icon"
      });
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_EmojiPicker_search"
    }, /*#__PURE__*/_react.default.createElement("input", {
      autoFocus: true,
      type: "text",
      placeholder: "Search",
      value: this.props.query,
      onChange: ev => this.props.onChange(ev.target.value),
      onKeyDown: this.onKeyDown,
      ref: this.inputRef
    }), rightButton);
  }

}) || _class);
var _default = Search;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL2Vtb2ppcGlja2VyL1NlYXJjaC50c3giXSwibmFtZXMiOlsiU2VhcmNoIiwiUmVhY3QiLCJQdXJlQ29tcG9uZW50IiwiY3JlYXRlUmVmIiwiZXYiLCJrZXkiLCJLZXkiLCJFTlRFUiIsInByb3BzIiwib25FbnRlciIsInN0b3BQcm9wYWdhdGlvbiIsInByZXZlbnREZWZhdWx0IiwiY29tcG9uZW50RGlkTW91bnQiLCJzZXRUaW1lb3V0IiwiaW5wdXRSZWYiLCJjdXJyZW50IiwiZm9jdXMiLCJyZW5kZXIiLCJyaWdodEJ1dHRvbiIsInF1ZXJ5Iiwib25DaGFuZ2UiLCJ0YXJnZXQiLCJ2YWx1ZSIsIm9uS2V5RG93biJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFpQkE7O0FBRUE7O0FBQ0E7O0FBQ0E7Ozs7SUFTTUEsTSxXQURMLGdEQUFxQiwwQkFBckIsQyxnQkFBRCxNQUNNQSxNQUROLFNBQ3FCQyxlQUFNQyxhQUQzQixDQUNpRDtBQUFBO0FBQUE7QUFBQSxpRUFDMUJELGVBQU1FLFNBQU4sRUFEMEI7QUFBQSxxREFReEJDLEVBQUQsSUFBNkI7QUFDN0MsVUFBSUEsRUFBRSxDQUFDQyxHQUFILEtBQVdDLGNBQUlDLEtBQW5CLEVBQTBCO0FBQ3RCLGFBQUtDLEtBQUwsQ0FBV0MsT0FBWDtBQUNBTCxRQUFBQSxFQUFFLENBQUNNLGVBQUg7QUFDQU4sUUFBQUEsRUFBRSxDQUFDTyxjQUFIO0FBQ0g7QUFDSixLQWQ0QztBQUFBOztBQUc3Q0MsRUFBQUEsaUJBQWlCLEdBQUc7QUFDaEI7QUFDQUMsSUFBQUEsVUFBVSxDQUFDLE1BQU0sS0FBS0MsUUFBTCxDQUFjQyxPQUFkLENBQXNCQyxLQUF0QixFQUFQLEVBQXNDLENBQXRDLENBQVY7QUFDSDs7QUFVREMsRUFBQUEsTUFBTSxHQUFHO0FBQ0wsUUFBSUMsV0FBSjs7QUFDQSxRQUFJLEtBQUtWLEtBQUwsQ0FBV1csS0FBZixFQUFzQjtBQUNsQkQsTUFBQUEsV0FBVyxnQkFDUDtBQUNJLFFBQUEsT0FBTyxFQUFFLE1BQU0sS0FBS1YsS0FBTCxDQUFXWSxRQUFYLENBQW9CLEVBQXBCLENBRG5CO0FBRUksUUFBQSxTQUFTLEVBQUMsd0RBRmQ7QUFHSSxRQUFBLEtBQUssRUFBRSx5QkFBRyxlQUFIO0FBSFgsUUFESjtBQU9ILEtBUkQsTUFRTztBQUNIRixNQUFBQSxXQUFXLGdCQUFHO0FBQU0sUUFBQSxTQUFTLEVBQUM7QUFBaEIsUUFBZDtBQUNIOztBQUVELHdCQUNJO0FBQUssTUFBQSxTQUFTLEVBQUM7QUFBZixvQkFDSTtBQUNJLE1BQUEsU0FBUyxNQURiO0FBRUksTUFBQSxJQUFJLEVBQUMsTUFGVDtBQUdJLE1BQUEsV0FBVyxFQUFDLFFBSGhCO0FBSUksTUFBQSxLQUFLLEVBQUUsS0FBS1YsS0FBTCxDQUFXVyxLQUp0QjtBQUtJLE1BQUEsUUFBUSxFQUFFZixFQUFFLElBQUksS0FBS0ksS0FBTCxDQUFXWSxRQUFYLENBQW9CaEIsRUFBRSxDQUFDaUIsTUFBSCxDQUFVQyxLQUE5QixDQUxwQjtBQU1JLE1BQUEsU0FBUyxFQUFFLEtBQUtDLFNBTnBCO0FBT0ksTUFBQSxHQUFHLEVBQUUsS0FBS1Q7QUFQZCxNQURKLEVBVU1JLFdBVk4sQ0FESjtBQWNIOztBQTVDNEMsQztlQStDbENsQixNIiwic291cmNlc0NvbnRlbnQiOlsiLypcbkNvcHlyaWdodCAyMDE5IFR1bGlyIEFzb2thbiA8dHVsaXJAbWF1bml1bS5uZXQ+XG5Db3B5cmlnaHQgMjAyMCBUaGUgTWF0cml4Lm9yZyBGb3VuZGF0aW9uIEMuSS5DLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IF90IH0gZnJvbSAnLi4vLi4vLi4vbGFuZ3VhZ2VIYW5kbGVyJztcbmltcG9ydCB7IEtleSB9IGZyb20gXCIuLi8uLi8uLi9LZXlib2FyZFwiO1xuaW1wb3J0IHsgcmVwbGFjZWFibGVDb21wb25lbnQgfSBmcm9tIFwiLi4vLi4vLi4vdXRpbHMvcmVwbGFjZWFibGVDb21wb25lbnRcIjtcblxuaW50ZXJmYWNlIElQcm9wcyB7XG4gICAgcXVlcnk6IHN0cmluZztcbiAgICBvbkNoYW5nZSh2YWx1ZTogc3RyaW5nKTogdm9pZDtcbiAgICBvbkVudGVyKCk6IHZvaWQ7XG59XG5cbkByZXBsYWNlYWJsZUNvbXBvbmVudChcInZpZXdzLmVtb2ppcGlja2VyLlNlYXJjaFwiKVxuY2xhc3MgU2VhcmNoIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudDxJUHJvcHM+IHtcbiAgICBwcml2YXRlIGlucHV0UmVmID0gUmVhY3QuY3JlYXRlUmVmPEhUTUxJbnB1dEVsZW1lbnQ+KCk7XG5cbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgICAgLy8gRm9yIHNvbWUgcmVhc29uLCBuZWl0aGVyIHRoZSBhdXRvRm9jdXMgbm9yIGp1c3QgY2FsbGluZyBmb2N1cygpIGhlcmUgd29ya2VkLCBzbyBoZXJlJ3MgYSBzZXRUaW1lb3V0XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5pbnB1dFJlZi5jdXJyZW50LmZvY3VzKCksIDApO1xuICAgIH1cblxuICAgIHByaXZhdGUgb25LZXlEb3duID0gKGV2OiBSZWFjdC5LZXlib2FyZEV2ZW50KSA9PiB7XG4gICAgICAgIGlmIChldi5rZXkgPT09IEtleS5FTlRFUikge1xuICAgICAgICAgICAgdGhpcy5wcm9wcy5vbkVudGVyKCk7XG4gICAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICBsZXQgcmlnaHRCdXR0b247XG4gICAgICAgIGlmICh0aGlzLnByb3BzLnF1ZXJ5KSB7XG4gICAgICAgICAgICByaWdodEJ1dHRvbiA9IChcbiAgICAgICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHRoaXMucHJvcHMub25DaGFuZ2UoXCJcIil9XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cIm14X0Vtb2ppUGlja2VyX3NlYXJjaF9pY29uIG14X0Vtb2ppUGlja2VyX3NlYXJjaF9jbGVhclwiXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlPXtfdChcIkNhbmNlbCBzZWFyY2hcIil9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByaWdodEJ1dHRvbiA9IDxzcGFuIGNsYXNzTmFtZT1cIm14X0Vtb2ppUGlja2VyX3NlYXJjaF9pY29uXCIgLz47XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJteF9FbW9qaVBpY2tlcl9zZWFyY2hcIj5cbiAgICAgICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICAgICAgYXV0b0ZvY3VzXG4gICAgICAgICAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJTZWFyY2hcIlxuICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5wcm9wcy5xdWVyeX1cbiAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2V2ID0+IHRoaXMucHJvcHMub25DaGFuZ2UoZXYudGFyZ2V0LnZhbHVlKX1cbiAgICAgICAgICAgICAgICAgICAgb25LZXlEb3duPXt0aGlzLm9uS2V5RG93bn1cbiAgICAgICAgICAgICAgICAgICAgcmVmPXt0aGlzLmlucHV0UmVmfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgeyByaWdodEJ1dHRvbiB9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNlYXJjaDtcbiJdfQ==