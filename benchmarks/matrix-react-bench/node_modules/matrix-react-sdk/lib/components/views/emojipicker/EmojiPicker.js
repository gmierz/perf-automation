"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.EMOJI_HEIGHT = exports.EMOJIS_PER_ROW = exports.CATEGORY_HEADER_HEIGHT = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _languageHandler = require("../../../languageHandler");

var recent = _interopRequireWildcard(require("../../../emojipicker/recent"));

var _emoji = require("../../../emoji");

var _AutoHideScrollbar = _interopRequireDefault(require("../../structures/AutoHideScrollbar"));

var _Header = _interopRequireDefault(require("./Header"));

var _Search = _interopRequireDefault(require("./Search"));

var _Preview = _interopRequireDefault(require("./Preview"));

var _QuickReactions = _interopRequireDefault(require("./QuickReactions"));

var _Category = _interopRequireDefault(require("./Category"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _dec, _class;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const CATEGORY_HEADER_HEIGHT = 20;
exports.CATEGORY_HEADER_HEIGHT = CATEGORY_HEADER_HEIGHT;
const EMOJI_HEIGHT = 35;
exports.EMOJI_HEIGHT = EMOJI_HEIGHT;
const EMOJIS_PER_ROW = 8;
exports.EMOJIS_PER_ROW = EMOJIS_PER_ROW;
const ZERO_WIDTH_JOINER = "\u200D";
let EmojiPicker = (_dec = (0, _replaceableComponent.replaceableComponent)("views.emojipicker.EmojiPicker"), _dec(_class = class EmojiPicker extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "recentlyUsed", void 0);
    (0, _defineProperty2.default)(this, "memoizedDataByCategory", void 0);
    (0, _defineProperty2.default)(this, "categories", void 0);
    (0, _defineProperty2.default)(this, "bodyRef", /*#__PURE__*/_react.default.createRef());
    (0, _defineProperty2.default)(this, "onScroll", () => {
      const body = this.bodyRef.current;
      this.setState({
        scrollTop: body.scrollTop,
        viewportHeight: body.clientHeight
      });
      this.updateVisibility();
    });
    (0, _defineProperty2.default)(this, "updateVisibility", () => {
      const body = this.bodyRef.current;
      const rect = body.getBoundingClientRect();

      for (const cat of this.categories) {
        const elem = body.querySelector(`[data-category-id="${cat.id}"]`);

        if (!elem) {
          cat.visible = false;
          cat.ref.current.classList.remove("mx_EmojiPicker_anchor_visible");
          continue;
        }

        const elemRect = elem.getBoundingClientRect();
        const y = elemRect.y - rect.y;
        const yEnd = elemRect.y + elemRect.height - rect.y;
        cat.visible = y < rect.height && yEnd > 0; // We update this here instead of through React to avoid re-render on scroll.

        if (cat.visible) {
          cat.ref.current.classList.add("mx_EmojiPicker_anchor_visible");
          cat.ref.current.setAttribute("aria-selected", "true");
          cat.ref.current.setAttribute("tabindex", "0");
        } else {
          cat.ref.current.classList.remove("mx_EmojiPicker_anchor_visible");
          cat.ref.current.setAttribute("aria-selected", "false");
          cat.ref.current.setAttribute("tabindex", "-1");
        }
      }
    });
    (0, _defineProperty2.default)(this, "scrollToCategory", category => {
      this.bodyRef.current.querySelector(`[data-category-id="${category}"]`).scrollIntoView();
    });
    (0, _defineProperty2.default)(this, "onChangeFilter", filter => {
      const lcFilter = filter.toLowerCase().trim(); // filter is case insensitive

      for (const cat of this.categories) {
        let emojis; // If the new filter string includes the old filter string, we don't have to re-filter the whole dataset.

        if (lcFilter.includes(this.state.filter)) {
          emojis = this.memoizedDataByCategory[cat.id];
        } else {
          emojis = cat.id === "recent" ? this.recentlyUsed : _emoji.DATA_BY_CATEGORY[cat.id];
        }

        emojis = emojis.filter(emoji => this.emojiMatchesFilter(emoji, lcFilter));
        this.memoizedDataByCategory[cat.id] = emojis;
        cat.enabled = emojis.length > 0; // The setState below doesn't re-render the header and we already have the refs for updateVisibility, so...

        cat.ref.current.disabled = !cat.enabled;
      }

      this.setState({
        filter
      }); // Header underlines need to be updated, but updating requires knowing
      // where the categories are, so we wait for a tick.

      setTimeout(this.updateVisibility, 0);
    });
    (0, _defineProperty2.default)(this, "emojiMatchesFilter", (emoji, filter) => {
      var _emoji$emoticon;

      return emoji.annotation.toLowerCase().includes(filter) || ((_emoji$emoticon = emoji.emoticon) === null || _emoji$emoticon === void 0 ? void 0 : _emoji$emoticon.toLowerCase().includes(filter)) || emoji.shortcodes.some(x => x.toLowerCase().includes(filter)) || emoji.unicode.split(ZERO_WIDTH_JOINER).includes(filter);
    });
    (0, _defineProperty2.default)(this, "onEnterFilter", () => {
      const btn = this.bodyRef.current.querySelector(".mx_EmojiPicker_item");

      if (btn) {
        btn.click();
      }
    });
    (0, _defineProperty2.default)(this, "onHoverEmoji", emoji => {
      this.setState({
        previewEmoji: emoji
      });
    });
    (0, _defineProperty2.default)(this, "onHoverEmojiEnd", emoji => {
      this.setState({
        previewEmoji: null
      });
    });
    (0, _defineProperty2.default)(this, "onClickEmoji", emoji => {
      if (this.props.onChoose(emoji.unicode) !== false) {
        recent.add(emoji.unicode);
      }
    });
    this.state = {
      filter: "",
      previewEmoji: null,
      scrollTop: 0,
      viewportHeight: 280
    }; // Convert recent emoji characters to emoji data, removing unknowns and duplicates

    this.recentlyUsed = Array.from(new Set(recent.get().map(_emoji.getEmojiFromUnicode).filter(Boolean)));
    this.memoizedDataByCategory = _objectSpread({
      recent: this.recentlyUsed
    }, _emoji.DATA_BY_CATEGORY);
    this.categories = [{
      id: "recent",
      name: (0, _languageHandler._t)("Frequently Used"),
      enabled: this.recentlyUsed.length > 0,
      visible: this.recentlyUsed.length > 0,
      ref: /*#__PURE__*/_react.default.createRef()
    }, {
      id: "people",
      name: (0, _languageHandler._t)("Smileys & People"),
      enabled: true,
      visible: true,
      ref: /*#__PURE__*/_react.default.createRef()
    }, {
      id: "nature",
      name: (0, _languageHandler._t)("Animals & Nature"),
      enabled: true,
      visible: false,
      ref: /*#__PURE__*/_react.default.createRef()
    }, {
      id: "foods",
      name: (0, _languageHandler._t)("Food & Drink"),
      enabled: true,
      visible: false,
      ref: /*#__PURE__*/_react.default.createRef()
    }, {
      id: "activity",
      name: (0, _languageHandler._t)("Activities"),
      enabled: true,
      visible: false,
      ref: /*#__PURE__*/_react.default.createRef()
    }, {
      id: "places",
      name: (0, _languageHandler._t)("Travel & Places"),
      enabled: true,
      visible: false,
      ref: /*#__PURE__*/_react.default.createRef()
    }, {
      id: "objects",
      name: (0, _languageHandler._t)("Objects"),
      enabled: true,
      visible: false,
      ref: /*#__PURE__*/_react.default.createRef()
    }, {
      id: "symbols",
      name: (0, _languageHandler._t)("Symbols"),
      enabled: true,
      visible: false,
      ref: /*#__PURE__*/_react.default.createRef()
    }, {
      id: "flags",
      name: (0, _languageHandler._t)("Flags"),
      enabled: true,
      visible: false,
      ref: /*#__PURE__*/_react.default.createRef()
    }];
  }

  static categoryHeightForEmojiCount(count) {
    if (count === 0) {
      return 0;
    }

    return CATEGORY_HEADER_HEIGHT + Math.ceil(count / EMOJIS_PER_ROW) * EMOJI_HEIGHT;
  }

  render() {
    let heightBefore = 0;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_EmojiPicker"
    }, /*#__PURE__*/_react.default.createElement(_Header.default, {
      categories: this.categories,
      onAnchorClick: this.scrollToCategory
    }), /*#__PURE__*/_react.default.createElement(_Search.default, {
      query: this.state.filter,
      onChange: this.onChangeFilter,
      onEnter: this.onEnterFilter
    }), /*#__PURE__*/_react.default.createElement(_AutoHideScrollbar.default, {
      className: "mx_EmojiPicker_body",
      wrappedRef: ref => {
        // @ts-ignore - AutoHideScrollbar should accept a RefObject or fall back to its own instead
        this.bodyRef.current = ref;
      },
      onScroll: this.onScroll
    }, this.categories.map(category => {
      const emojis = this.memoizedDataByCategory[category.id];

      const categoryElement = /*#__PURE__*/_react.default.createElement(_Category.default, {
        key: category.id,
        id: category.id,
        name: category.name,
        heightBefore: heightBefore,
        viewportHeight: this.state.viewportHeight,
        scrollTop: this.state.scrollTop,
        emojis: emojis,
        onClick: this.onClickEmoji,
        onMouseEnter: this.onHoverEmoji,
        onMouseLeave: this.onHoverEmojiEnd,
        selectedEmojis: this.props.selectedEmojis
      });

      const height = EmojiPicker.categoryHeightForEmojiCount(emojis.length);
      heightBefore += height;
      return categoryElement;
    })), this.state.previewEmoji || !this.props.showQuickReactions ? /*#__PURE__*/_react.default.createElement(_Preview.default, {
      emoji: this.state.previewEmoji
    }) : /*#__PURE__*/_react.default.createElement(_QuickReactions.default, {
      onClick: this.onClickEmoji,
      selectedEmojis: this.props.selectedEmojis
    }));
  }

}) || _class);
var _default = EmojiPicker;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,