"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _languageHandler = require("../../../languageHandler");

var _objects = require("../../../utils/objects");

var _StyledCheckbox = _interopRequireDefault(require("../elements/StyledCheckbox"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

var _dec, _class;

let InlineTermsAgreement = (_dec = (0, _replaceableComponent.replaceableComponent)("views.terms.InlineTermsAgreement"), _dec(_class = class InlineTermsAgreement extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "togglePolicy", index => {
      const policies = (0, _objects.objectClone)(this.state.policies);
      policies[index].checked = !policies[index].checked;
      this.setState({
        policies
      });
    });
    (0, _defineProperty2.default)(this, "onContinue", () => {
      const hasUnchecked = !!this.state.policies.some(p => !p.checked);
      if (hasUnchecked) return;
      this.setState({
        busy: true
      });
      this.props.onFinished(this.state.policies.map(p => p.url));
    });
    this.state = {
      policies: [],
      busy: false
    };
  }

  componentDidMount() {
    // Build all the terms the user needs to accept
    const policies = []; // { checked, url, name }

    for (const servicePolicies of this.props.policiesAndServicePairs) {
      const availablePolicies = Object.values(servicePolicies.policies);

      for (const policy of availablePolicies) {
        const language = (0, _languageHandler.pickBestLanguage)(Object.keys(policy).filter(p => p !== 'version'));
        const renderablePolicy = {
          checked: false,
          url: policy[language].url,
          name: policy[language].name
        };
        policies.push(renderablePolicy);
      }
    }

    this.setState({
      policies
    });
  }

  renderCheckboxes() {
    const rendered = [];

    for (let i = 0; i < this.state.policies.length; i++) {
      const policy = this.state.policies[i];
      const introText = (0, _languageHandler._t)("Accept <policyLink /> to continue:", {}, {
        policyLink: () => {
          return /*#__PURE__*/_react.default.createElement("a", {
            href: policy.url,
            rel: "noreferrer noopener",
            target: "_blank"
          }, policy.name, /*#__PURE__*/_react.default.createElement("span", {
            className: "mx_InlineTermsAgreement_link"
          }));
        }
      });
      rendered.push( /*#__PURE__*/_react.default.createElement("div", {
        key: i,
        className: "mx_InlineTermsAgreement_cbContainer"
      }, /*#__PURE__*/_react.default.createElement("div", null, introText), /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_InlineTermsAgreement_checkbox"
      }, /*#__PURE__*/_react.default.createElement(_StyledCheckbox.default, {
        onChange: () => this.togglePolicy(i),
        checked: policy.checked
      }, (0, _languageHandler._t)("Accept")))));
    }

    return rendered;
  }

  render() {
    const hasUnchecked = !!this.state.policies.some(p => !p.checked);
    return /*#__PURE__*/_react.default.createElement("div", null, this.props.introElement, this.renderCheckboxes(), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      onClick: this.onContinue,
      disabled: hasUnchecked || this.state.busy,
      kind: "primary_sm"
    }, (0, _languageHandler._t)("Continue")));
  }

}) || _class);
exports.default = InlineTermsAgreement;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL3Rlcm1zL0lubGluZVRlcm1zQWdyZWVtZW50LnRzeCJdLCJuYW1lcyI6WyJJbmxpbmVUZXJtc0FncmVlbWVudCIsIlJlYWN0IiwiQ29tcG9uZW50IiwiY29uc3RydWN0b3IiLCJwcm9wcyIsImluZGV4IiwicG9saWNpZXMiLCJzdGF0ZSIsImNoZWNrZWQiLCJzZXRTdGF0ZSIsImhhc1VuY2hlY2tlZCIsInNvbWUiLCJwIiwiYnVzeSIsIm9uRmluaXNoZWQiLCJtYXAiLCJ1cmwiLCJjb21wb25lbnREaWRNb3VudCIsInNlcnZpY2VQb2xpY2llcyIsInBvbGljaWVzQW5kU2VydmljZVBhaXJzIiwiYXZhaWxhYmxlUG9saWNpZXMiLCJPYmplY3QiLCJ2YWx1ZXMiLCJwb2xpY3kiLCJsYW5ndWFnZSIsImtleXMiLCJmaWx0ZXIiLCJyZW5kZXJhYmxlUG9saWN5IiwibmFtZSIsInB1c2giLCJyZW5kZXJDaGVja2JveGVzIiwicmVuZGVyZWQiLCJpIiwibGVuZ3RoIiwiaW50cm9UZXh0IiwicG9saWN5TGluayIsInRvZ2dsZVBvbGljeSIsInJlbmRlciIsImludHJvRWxlbWVudCIsIm9uQ29udGludWUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBZ0JBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOzs7O0lBcUJxQkEsb0IsV0FEcEIsZ0RBQXFCLGtDQUFyQixDLGdCQUFELE1BQ3FCQSxvQkFEckIsU0FDa0RDLGVBQU1DLFNBRHhELENBQ2tGO0FBQzlFQyxFQUFBQSxXQUFXLENBQUNDLEtBQUQsRUFBZ0I7QUFDdkIsVUFBTUEsS0FBTjtBQUR1Qix3REEyQkhDLEtBQUQsSUFBeUI7QUFDNUMsWUFBTUMsUUFBUSxHQUFHLDBCQUFZLEtBQUtDLEtBQUwsQ0FBV0QsUUFBdkIsQ0FBakI7QUFDQUEsTUFBQUEsUUFBUSxDQUFDRCxLQUFELENBQVIsQ0FBZ0JHLE9BQWhCLEdBQTBCLENBQUNGLFFBQVEs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RUFBRSxNQUFNLEtBQUtFLFlBQUwsQ0FBa0JKLENBQWxCLENBQWhDO0FBQXNELFFBQUEsT0FBTyxFQUFFVCxNQUFNLENBQUNmO0FBQXRFLFNBQ00seUJBQUcsUUFBSCxDQUROLENBREosQ0FGSixDQURKO0FBVUg7O0FBQ0QsV0FBT3VCLFFBQVA7QUFDSDs7QUFFTU0sRUFBQUEsTUFBTSxHQUFvQjtBQUM3QixVQUFNM0IsWUFBWSxHQUFHLENBQUMsQ0FBQyxLQUFLSCxLQUFMLENBQVdELFFBQVgsQ0FBb0JLLElBQXBCLENBQXlCQyxDQUFDLElBQUksQ0FBQ0EsQ0FBQyxDQUFDSixPQUFqQyxDQUF2QjtBQUVBLHdCQUNJLDBDQUNNLEtBQUtKLEtBQUwsQ0FBV2tDLFlBRGpCLEVBRU0sS0FBS1IsZ0JBQUwsRUFGTixlQUdJLDZCQUFDLHlCQUFEO0FBQ0ksTUFBQSxPQUFPLEVBQUUsS0FBS1MsVUFEbEI7QUFFSSxNQUFBLFFBQVEsRUFBRTdCLFlBQVksSUFBSSxLQUFLSCxLQUFMLENBQVdNLElBRnpDO0FBR0ksTUFBQSxJQUFJLEVBQUM7QUFIVCxPQUtNLHlCQUFHLFVBQUgsQ0FMTixDQUhKLENBREo7QUFhSDs7QUF4RjZFLEMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuQ29weXJpZ2h0IDIwMTkgVGhlIE1hdHJpeC5vcmcgRm91bmRhdGlvbiBDLkkuQy5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBfdCwgcGlja0Jlc3RMYW5ndWFnZSB9IGZyb20gXCIuLi8uLi8uLi9sYW5ndWFnZUhhbmRsZXJcIjtcbmltcG9ydCB7IG9iamVjdENsb25lIH0gZnJvbSBcIi4uLy4uLy4uL3V0aWxzL29iamVjdHNcIjtcbmltcG9ydCBTdHlsZWRDaGVja2JveCBmcm9tIFwiLi4vZWxlbWVudHMvU3R5bGVkQ2hlY2tib3hcIjtcbmltcG9ydCB7IHJlcGxhY2VhYmxlQ29tcG9uZW50IH0gZnJvbSBcIi4uLy4uLy4uL3V0aWxzL3JlcGxhY2VhYmxlQ29tcG9uZW50XCI7XG5pbXBvcnQgQWNjZXNzaWJsZUJ1dHRvbiBmcm9tIFwiLi4vZWxlbWVudHMvQWNjZXNzaWJsZUJ1dHRvblwiO1xuXG5pbnRlcmZhY2UgSVByb3BzIHtcbiAgICBwb2xpY2llc0FuZFNlcnZpY2VQYWlyczogYW55W107XG4gICAgb25GaW5pc2hlZDogKHN0cmluZykgPT4gdm9pZDtcbiAgICBhZ3JlZWRVcmxzOiBzdHJpbmdbXTsgLy8gYXJyYXkgb2YgVVJMcyB0aGUgdXNlciBoYXMgYWNjZXB0ZWRcbiAgICBpbnRyb0VsZW1lbnQ6IFJlYWN0LlJlYWN0Tm9kZTtcbn1cblxuaW50ZXJmYWNlIElTdGF0ZSB7XG4gICAgcG9saWNpZXM6IFBvbGljeVtdO1xuICAgIGJ1c3k6IGJvb2xlYW47XG59XG5cbmludGVyZmFjZSBQb2xpY3kge1xuICAgIGNoZWNrZWQ6IGJvb2xlYW47XG4gICAgdXJsOiBzdHJpbmc7XG4gICAgbmFtZTogc3RyaW5nO1xufVxuXG5AcmVwbGFjZWFibGVDb21wb25lbnQoXCJ2aWV3cy50ZXJtcy5JbmxpbmVUZXJtc0FncmVlbWVudFwiKVxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSW5saW5lVGVybXNBZ3JlZW1lbnQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8SVByb3BzLCBJU3RhdGU+IHtcbiAgICBjb25zdHJ1Y3Rvcihwcm9wczogSVByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIHBvbGljaWVzOiBbXSxcbiAgICAgICAgICAgIGJ1c3k6IGZhbHNlLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHB1YmxpYyBjb21wb25lbnREaWRNb3VudCgpOiB2b2lkIHtcbiAgICAgICAgLy8gQnVpbGQgYWxsIHRoZSB0ZXJtcyB0aGUgdXNlciBuZWVkcyB0byBhY2NlcHRcbiAgICAgICAgY29uc3QgcG9saWNpZXMgPSBbXTsgLy8geyBjaGVja2VkLCB1cmwsIG5hbWUgfVxuICAgICAgICBmb3IgKGNvbnN0IHNlcnZpY2VQb2xpY2llcyBvZiB0aGlzLnByb3BzLnBvbGljaWVzQW5kU2VydmljZVBhaXJzKSB7XG4gICAgICAgICAgICBjb25zdCBhdmFpbGFibGVQb2xpY2llcyA9IE9iamVjdC52YWx1ZXMoc2VydmljZVBvbGljaWVzLnBvbGljaWVzKTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgcG9saWN5IG9mIGF2YWlsYWJsZVBvbGljaWVzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbGFuZ3VhZ2UgPSBwaWNrQmVzdExhbmd1YWdlKE9iamVjdC5rZXlzKHBvbGljeSkuZmlsdGVyKHAgPT4gcCAhPT0gJ3ZlcnNpb24nKSk7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVuZGVyYWJsZVBvbGljeTogUG9saWN5ID0ge1xuICAgICAgICAgICAgICAgICAgICBjaGVja2VkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBwb2xpY3lbbGFuZ3VhZ2VdLnVybCxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogcG9saWN5W2xhbmd1YWdlXS5uYW1lLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcG9saWNpZXMucHVzaChyZW5kZXJhYmxlUG9saWN5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBwb2xpY2llcyB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHRvZ2dsZVBvbGljeSA9IChpbmRleDogbnVtYmVyKTogdm9pZCA9PiB7XG4gICAgICAgIGNvbnN0IHBvbGljaWVzID0gb2JqZWN0Q2xvbmUodGhpcy5zdGF0ZS5wb2xpY2llcyk7XG4gICAgICAgIHBvbGljaWVzW2luZGV4XS5jaGVja2VkID0gIXBvbGljaWVzW2luZGV4XS5jaGVja2VkO1xuICAgICAgICB0aGlzLnNldFN0YXRlKHsgcG9saWNpZXMgfSk7XG4gICAgfTtcblxuICAgIHByaXZhdGUgb25Db250aW51ZSA9ICgpOiB2b2lkID0+IHtcbiAgICAgICAgY29uc3QgaGFzVW5jaGVja2VkID0gISF0aGlzLnN0YXRlLnBvbGljaWVzLnNvbWUocCA9PiAhcC5jaGVja2VkKTtcbiAgICAgICAgaWYgKGhhc1VuY2hlY2tlZCkgcmV0dXJuO1xuXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBidXN5OiB0cnVlIH0pO1xuICAgICAgICB0aGlzLnByb3BzLm9uRmluaXNoZWQodGhpcy5zdGF0ZS5wb2xpY2llcy5tYXAocCA9PiBwLnVybCkpO1xuICAgIH07XG5cbiAgICBwcml2YXRlIHJlbmRlckNoZWNrYm94ZXMoKTogUmVhY3QuUmVhY3ROb2RlW10ge1xuICAgICAgICBjb25zdCByZW5kZXJlZCA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuc3RhdGUucG9saWNpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHBvbGljeSA9IHRoaXMuc3RhdGUucG9saWNpZXNbaV07XG4gICAgICAgICAgICBjb25zdCBpbnRyb1RleHQgPSBfdChcbiAgICAgICAgICAgICAgICBcIkFjY2VwdCA8cG9saWN5TGluayAvPiB0byBjb250aW51ZTpcIiwge30sIHtcbiAgICAgICAgICAgICAgICAgICAgcG9saWN5TGluazogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPXtwb2xpY3kudXJsfSByZWw9J25vcmVmZXJyZXIgbm9vcGVuZXInIHRhcmdldD0nX2JsYW5rJz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBwb2xpY3kubmFtZSB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT0nbXhfSW5saW5lVGVybXNBZ3JlZW1lbnRfbGluaycgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgcmVuZGVyZWQucHVzaChcbiAgICAgICAgICAgICAgICA8ZGl2IGtleT17aX0gY2xhc3NOYW1lPSdteF9JbmxpbmVUZXJtc0FncmVlbWVudF9jYkNvbnRhaW5lcic+XG4gICAgICAgICAgICAgICAgICAgIDxkaXY+eyBpbnRyb1RleHQgfTwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nbXhfSW5saW5lVGVybXNBZ3JlZW1lbnRfY2hlY2tib3gnPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFN0eWxlZENoZWNrYm94IG9uQ2hhbmdlPXsoKSA9PiB0aGlzLnRvZ2dsZVBvbGljeShpKX0gY2hlY2tlZD17cG9saWN5LmNoZWNrZWR9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgX3QoXCJBY2NlcHRcIikgfVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9TdHlsZWRDaGVja2JveD5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+LFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVuZGVyZWQ7XG4gICAgfVxuXG4gICAgcHVibGljIHJlbmRlcigpOiBSZWFjdC5SZWFjdE5vZGUge1xuICAgICAgICBjb25zdCBoYXNVbmNoZWNrZWQgPSAhIXRoaXMuc3RhdGUucG9saWNpZXMuc29tZShwID0+ICFwLmNoZWNrZWQpO1xuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgIHsgdGhpcy5wcm9wcy5pbnRyb0VsZW1lbnQgfVxuICAgICAgICAgICAgICAgIHsgdGhpcy5yZW5kZXJDaGVja2JveGVzKCkgfVxuICAgICAgICAgICAgICAgIDxBY2Nlc3NpYmxlQnV0dG9uXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMub25Db250aW51ZX1cbiAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ9e2hhc1VuY2hlY2tlZCB8fCB0aGlzLnN0YXRlLmJ1c3l9XG4gICAgICAgICAgICAgICAgICAgIGtpbmQ9XCJwcmltYXJ5X3NtXCJcbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgIHsgX3QoXCJDb250aW51ZVwiKSB9XG4gICAgICAgICAgICAgICAgPC9BY2Nlc3NpYmxlQnV0dG9uPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgfVxufVxuIl19