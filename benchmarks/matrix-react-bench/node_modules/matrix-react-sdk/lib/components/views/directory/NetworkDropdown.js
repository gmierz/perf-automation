"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ALL_ROOMS = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireWildcard(require("react"));

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _DirectoryUtils = require("../../../utils/DirectoryUtils");

var _ContextMenu = _interopRequireWildcard(require("../../structures/ContextMenu"));

var _languageHandler = require("../../../languageHandler");

var _SdkConfig = _interopRequireDefault(require("../../../SdkConfig"));

var _useSettings = require("../../../hooks/useSettings");

var _Modal = _interopRequireDefault(require("../../../Modal"));

var _SettingsStore = _interopRequireDefault(require("../../../settings/SettingsStore"));

var _Validation = _interopRequireDefault(require("../elements/Validation"));

var _SettingLevel = require("../../../settings/SettingLevel");

var _TextInputDialog = _interopRequireDefault(require("../dialogs/TextInputDialog"));

var _QuestionDialog = _interopRequireDefault(require("../dialogs/QuestionDialog"));

var _UIStore = _interopRequireDefault(require("../../../stores/UIStore"));

var _strings = require("../../../utils/strings");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
Copyright 2019 Michael Telatynski <7t3chguy@gmail.com>
Copyright 2016, 2020 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// XXX: We would ideally use a symbol here but we can't since we save this value to localStorage
const ALL_ROOMS = "ALL_ROOMS";
exports.ALL_ROOMS = ALL_ROOMS;
const SETTING_NAME = "room_directory_servers";

const inPlaceOf = elementRect => ({
  right: _UIStore.default.instance.windowWidth - elementRect.right,
  top: elementRect.top,
  chevronOffset: 0,
  chevronFace: _ContextMenu.ChevronFace.None
});

const validServer = (0, _Validation.default)({
  deriveData: async ({
    value
  }) => {
    try {
      // check if we can successfully load this server's room directory
      await _MatrixClientPeg.MatrixClientPeg.get().publicRooms({
        limit: 1,
        server: value
      });
      return {};
    } catch (error) {
      return {
        error
      };
    }
  },
  rules: [{
    key: "required",
    test: async ({
      value
    }) => !!value,
    invalid: () => (0, _languageHandler._t)("Enter a server name")
  }, {
    key: "available",
    final: true,
    test: async (_, {
      error
    }) => !error,
    valid: () => (0, _languageHandler._t)("Looks good"),
    invalid: ({
      error
    }) => error.errcode === "M_FORBIDDEN" ? (0, _languageHandler._t)("You are not allowed to view this server's rooms list") : (0, _languageHandler._t)("Can't find this server or its room list")
  }]
});

// This dropdown sources homeservers from three places:
// + your currently connected homeserver
// + homeservers in config.json["roomDirectory"]
// + homeservers in SettingsStore["room_directory_servers"]
// if a server exists in multiple, only keep the top-most entry.
const NetworkDropdown = ({
  onOptionChange,
  protocols = {},
  selectedServerName,
  selectedInstanceId
}) => {
  const [menuDisplayed, handle, openMenu, closeMenu] = (0, _ContextMenu.useContextMenu)();

  const _userDefinedServers = (0, _useSettings.useSettingValue)(SETTING_NAME);

  const [userDefinedServers, _setUserDefinedServers] = (0, _react.useState)(_userDefinedServers);

  const handlerFactory = (server, instanceId) => {
    return () => {
      onOptionChange(server, instanceId);
      closeMenu();
    };
  };

  const setUserDefinedServers = servers => {
    _setUserDefinedServers(servers);

    _SettingsStore.default.setValue(SETTING_NAME, null, _SettingLevel.SettingLevel.ACCOUNT, servers);
  }; // keep local echo up to date with external changes


  (0, _react.useEffect)(() => {
    _setUserDefinedServers(_userDefinedServers);
  }, [_userDefinedServers]); // we either show the button or the dropdown in its place.

  let content;

  if (menuDisplayed) {
    const config = _SdkConfig.default.get();

    const roomDirectory = config.roomDirectory || {};

    const hsName = _MatrixClientPeg.MatrixClientPeg.getHomeserverName();

    const configServers = new Set(roomDirectory.servers); // configured servers take preference over user-defined ones, if one occurs in both ignore the latter one.

    const removableServers = new Set(userDefinedServers.filter(s => !configServers.has(s) && s !== hsName));
    const servers = [// we always show our connected HS, this takes precedence over it being configured or user-defined
    hsName, ...Array.from(configServers).filter(s => s !== hsName).sort(), ...Array.from(removableServers).sort()]; // For our own HS, we can use the instance_ids given in the third party protocols
    // response to get the server to filter the room list by network for us.
    // We can't get thirdparty protocols for remote server yet though, so for those
    // we can only show the default room list.

    const options = servers.map(server => {
      const serverSelected = server === selectedServerName;
      const entries = [];
      const protocolsList = server === hsName ? Object.values(protocols) : [];

      if (protocolsList.length > 0) {
        // add a fake protocol with ALL_ROOMS
        protocolsList.push({
          instances: [{
            fields: [],
            network_id: "",
            instance_id: ALL_ROOMS,
            desc: (0, _languageHandler._t)("All rooms")
          }],
          location_fields: [],
          user_fields: [],
          field_types: {},
          icon: ""
        });
      }

      protocolsList.forEach(({
        instances = []
      }) => {
        [...instances].sort((b, a) => {
          return (0, _strings.compare)(a.desc, b.desc);
        }).forEach(({
          desc,
          instance_id: instanceId
        }) => {
          entries.push( /*#__PURE__*/_react.default.createElement(_ContextMenu.MenuItemRadio, {
            key: String(instanceId),
            active: serverSelected && instanceId === selectedInstanceId,
            onClick: handlerFactory(server, instanceId),
            label: desc,
            className: "mx_NetworkDropdown_server_network"
          }, desc));
        });
      });
      let subtitle;

      if (server === hsName) {
        subtitle = /*#__PURE__*/_react.default.createElement("div", {
          className: "mx_NetworkDropdown_server_subtitle"
        }, (0, _languageHandler._t)("Your server"));
      }

      let removeButton;

      if (removableServers.has(server)) {
        const onClick = async () => {
          closeMenu();

          const {
            finished
          } = _Modal.default.createTrackedDialog("Network Dropdown", "Remove server", _QuestionDialog.default, {
            title: (0, _languageHandler._t)("Are you sure?"),
            description: (0, _languageHandler._t)("Are you sure you want to remove <b>%(serverName)s</b>", {
              serverName: server
            }, {
              b: serverName => /*#__PURE__*/_react.default.createElement("b", null, serverName)
            }),
            button: (0, _languageHandler._t)("Remove"),
            fixedWidth: false
          }, "mx_NetworkDropdown_dialog");

          const [ok] = await finished;
          if (!ok) return; // delete from setting

          setUserDefinedServers(servers.filter(s => s !== server)); // the selected server is being removed, reset to our HS

          if (serverSelected) {
            onOptionChange(hsName, undefined);
          }
        };

        removeButton = /*#__PURE__*/_react.default.createElement(_ContextMenu.MenuItem, {
          onClick: onClick,
          label: (0, _languageHandler._t)("Remove server")
        });
      } // ARIA: in actual fact the entire menu is one large radio group but for better screen reader support
      // we use group to notate server wrongly.


      return /*#__PURE__*/_react.default.createElement(_ContextMenu.MenuGroup, {
        label: server,
        className: "mx_NetworkDropdown_server",
        key: server
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_NetworkDropdown_server_title"
      }, server, removeButton), subtitle, /*#__PURE__*/_react.default.createElement(_ContextMenu.MenuItemRadio, {
        active: serverSelected && !selectedInstanceId,
        onClick: handlerFactory(server, undefined),
        label: (0, _languageHandler._t)("Matrix"),
        className: "mx_NetworkDropdown_server_network"
      }, (0, _languageHandler._t)("Matrix")), entries);
    });

    const onClick = async () => {
      closeMenu();

      const {
        finished
      } = _Modal.default.createTrackedDialog("Network Dropdown", "Add a new server", _TextInputDialog.default, {
        title: (0, _languageHandler._t)("Add a new server"),
        description: (0, _languageHandler._t)("Enter the name of a new server you want to explore."),
        button: (0, _languageHandler._t)("Add"),
        hasCancel: false,
        placeholder: (0, _languageHandler._t)("Server name"),
        validator: validServer,
        fixedWidth: false
      }, "mx_NetworkDropdown_dialog");

      const [ok, newServer] = await finished;
      if (!ok) return;

      if (!userDefinedServers.includes(newServer)) {
        setUserDefinedServers([...userDefinedServers, newServer]);
      }

      onOptionChange(newServer); // change filter to the new server
    };

    const buttonRect = handle.current.getBoundingClientRect();
    content = /*#__PURE__*/_react.default.createElement(_ContextMenu.default, (0, _extends2.default)({}, inPlaceOf(buttonRect), {
      onFinished: closeMenu,
      focusLock: true
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_NetworkDropdown_menu"
    }, options, /*#__PURE__*/_react.default.createElement(_ContextMenu.MenuItem, {
      className: "mx_NetworkDropdown_server_add",
      label: undefined,
      onClick: onClick
    }, (0, _languageHandler._t)("Add a new server..."))));
  } else {
    let currentValue;

    if (selectedInstanceId === ALL_ROOMS) {
      currentValue = (0, _languageHandler._t)("All rooms");
    } else if (selectedInstanceId) {
      const instance = (0, _DirectoryUtils.instanceForInstanceId)(protocols, selectedInstanceId);
      currentValue = (0, _languageHandler._t)("%(networkName)s rooms", {
        networkName: instance.desc
      });
    } else {
      currentValue = (0, _languageHandler._t)("Matrix rooms");
    }

    content = /*#__PURE__*/_react.default.createElement(_ContextMenu.ContextMenuButton, {
      className: "mx_NetworkDropdown_handle",
      onClick: openMenu,
      isExpanded: menuDisplayed
    }, /*#__PURE__*/_react.default.createElement("span", null, currentValue), " ", /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_NetworkDropdown_handle_server"
    }, "(", selectedServerName, ")"));
  }

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_NetworkDropdown",
    ref: handle
  }, content);
};

var _default = NetworkDropdown;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,