"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _reactBeautifulDnd = require("react-beautiful-dnd");

var _classnames = _interopRequireDefault(require("classnames"));

var _languageHandler = require("../../../languageHandler");

var _ContextMenu = require("../../structures/ContextMenu");

var _SpaceCreateMenu = _interopRequireDefault(require("./SpaceCreateMenu"));

var _SpaceTreeLevel = require("./SpaceTreeLevel");

var _AccessibleTooltipButton = _interopRequireDefault(require("../elements/AccessibleTooltipButton"));

var _useEventEmitter = require("../../../hooks/useEventEmitter");

var _SpaceStore = _interopRequireDefault(require("../../../stores/spaces/SpaceStore"));

var _spaces = require("../../../stores/spaces");

var _AutoHideScrollbar = _interopRequireDefault(require("../../structures/AutoHideScrollbar"));

var _RovingTabIndex = require("../../../accessibility/RovingTabIndex");

var _RoomNotificationStateStore = require("../../../stores/notifications/RoomNotificationStateStore");

var _IconizedContextMenu = _interopRequireWildcard(require("../context_menus/IconizedContextMenu"));

var _SettingsStore = _interopRequireDefault(require("../../../settings/SettingsStore"));

var _SettingLevel = require("../../../settings/SettingLevel");

var _UIStore = _interopRequireDefault(require("../../../stores/UIStore"));

var _QuickSettingsButton = _interopRequireDefault(require("./QuickSettingsButton"));

var _useSettings = require("../../../hooks/useSettings");

const _excluded = ["onFinished"],
      _excluded2 = ["selected", "isPanelCollapsed"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const useSpaces = () => {
  const invites = (0, _useEventEmitter.useEventEmitterState)(_SpaceStore.default.instance, _spaces.UPDATE_INVITED_SPACES, () => {
    return _SpaceStore.default.instance.invitedSpaces;
  });
  const [metaSpaces, actualSpaces] = (0, _useEventEmitter.useEventEmitterState)(_SpaceStore.default.instance, _spaces.UPDATE_TOP_LEVEL_SPACES, () => [_SpaceStore.default.instance.enabledMetaSpaces, _SpaceStore.default.instance.spacePanelSpaces]);
  const activeSpace = (0, _useEventEmitter.useEventEmitterState)(_SpaceStore.default.instance, _spaces.UPDATE_SELECTED_SPACE, () => {
    return _SpaceStore.default.instance.activeSpace;
  });
  return [invites, metaSpaces, actualSpaces, activeSpace];
};

const HomeButtonContextMenu = _ref => {
  let {
    onFinished
  } = _ref,
      props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  const allRoomsInHome = (0, _useEventEmitter.useEventEmitterState)(_SpaceStore.default.instance, _spaces.UPDATE_HOME_BEHAVIOUR, () => {
    return _SpaceStore.default.instance.allRoomsInHome;
  });
  return /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.default, (0, _extends2.default)({}, props, {
    onFinished: onFinished,
    className: "mx_SpacePanel_contextMenu",
    compact: true
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_SpacePanel_contextMenu_header"
  }, (0, _languageHandler._t)("Home")), /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOptionList, {
    first: true
  }, /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuCheckbox, {
    iconClassName: "mx_SpacePanel_noIcon",
    label: (0, _languageHandler._t)("Show all rooms"),
    active: allRoomsInHome,
    onClick: () => {
      _SettingsStore.default.setValue("Spaces.allRoomsInHome", null, _SettingLevel.SettingLevel.ACCOUNT, !allRoomsInHome);
    }
  })));
};

const MetaSpaceButton = _ref2 => {
  let {
    selected,
    isPanelCollapsed
  } = _ref2,
      props = (0, _objectWithoutProperties2.default)(_ref2, _excluded2);
  return /*#__PURE__*/_react.default.createElement("li", {
    className: (0, _classnames.default)("mx_SpaceItem", {
      "collapsed": isPanelCollapsed
    }),
    role: "treeitem"
  }, /*#__PURE__*/_react.default.createElement(_SpaceTreeLevel.SpaceButton, (0, _extends2.default)({}, props, {
    selected: selected,
    isNarrow: isPanelCollapsed
  })));
};

const HomeButton = ({
  selected,
  isPanelCollapsed
}) => {
  const allRoomsInHome = (0, _useEventEmitter.useEventEmitterState)(_SpaceStore.default.instance, _spaces.UPDATE_HOME_BEHAVIOUR, () => {
    return _SpaceStore.default.instance.allRoomsInHome;
  });
  return /*#__PURE__*/_react.default.createElement(MetaSpaceButton, {
    spaceKey: _spaces.MetaSpace.Home,
    className: "mx_SpaceButton_home",
    selected: selected,
    isPanelCollapsed: isPanelCollapsed,
    label: allRoomsInHome ? (0, _languageHandler._t)("All rooms") : (0, _languageHandler._t)("Home"),
    notificationState: allRoomsInHome ? _RoomNotificationStateStore.RoomNotificationStateStore.instance.globalState : _SpaceStore.default.instance.getNotificationState(_spaces.MetaSpace.Home),
    ContextMenuComponent: HomeButtonContextMenu,
    contextMenuTooltip: (0, _languageHandler._t)("Options")
  });
};

const FavouritesButton = ({
  selected,
  isPanelCollapsed
}) => {
  return /*#__PURE__*/_react.default.createElement(MetaSpaceButton, {
    spaceKey: _spaces.MetaSpace.Favourites,
    className: "mx_SpaceButton_favourites",
    selected: selected,
    isPanelCollapsed: isPanelCollapsed,
    label: (0, _languageHandler._t)("Favourites"),
    notificationState: _SpaceStore.default.instance.getNotificationState(_spaces.MetaSpace.Favourites)
  });
};

const PeopleButton = ({
  selected,
  isPanelCollapsed
}) => {
  return /*#__PURE__*/_react.default.createElement(MetaSpaceButton, {
    spaceKey: _spaces.MetaSpace.People,
    className: "mx_SpaceButton_people",
    selected: selected,
    isPanelCollapsed: isPanelCollapsed,
    label: (0, _languageHandler._t)("People"),
    notificationState: _SpaceStore.default.instance.getNotificationState(_spaces.MetaSpace.People)
  });
};

const OrphansButton = ({
  selected,
  isPanelCollapsed
}) => {
  return /*#__PURE__*/_react.default.createElement(MetaSpaceButton, {
    spaceKey: _spaces.MetaSpace.Orphans,
    className: "mx_SpaceButton_orphans",
    selected: selected,
    isPanelCollapsed: isPanelCollapsed,
    label: (0, _languageHandler._t)("Other rooms"),
    notificationState: _SpaceStore.default.instance.getNotificationState(_spaces.MetaSpace.Orphans)
  });
};

const CreateSpaceButton = ({
  isPanelCollapsed,
  setPanelCollapsed
}) => {
  // We don't need the handle as we position the menu in a constant location
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  const [menuDisplayed, handle, openMenu, closeMenu] = (0, _ContextMenu.useContextMenu)();
  (0, _react.useEffect)(() => {
    if (!isPanelCollapsed && menuDisplayed) {
      closeMenu();
    }
  }, [isPanelCollapsed]); // eslint-disable-line react-hooks/exhaustive-deps

  let contextMenu = null;

  if (menuDisplayed) {
    contextMenu = /*#__PURE__*/_react.default.createElement(_SpaceCreateMenu.default, {
      onFinished: closeMenu
    });
  }

  const onNewClick = menuDisplayed ? closeMenu : () => {
    // persist that the user has interacted with this, use it to dismiss the beta dot
    localStorage.setItem("mx_seenSpaces", "1");
    if (!isPanelCollapsed) setPanelCollapsed(true);
    openMenu();
  };
  let betaDot;

  if (!localStorage.getItem("mx_seenSpaces") && !_SpaceStore.default.instance.spacePanelSpaces.length) {
    betaDot = /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_BetaDot"
    });
  }

  return /*#__PURE__*/_react.default.createElement("li", {
    className: (0, _classnames.default)("mx_SpaceItem mx_SpaceItem_new", {
      "collapsed": isPanelCollapsed
    }),
    role: "treeitem"
  }, /*#__PURE__*/_react.default.createElement(_SpaceTreeLevel.SpaceButton, {
    className: (0, _classnames.default)("mx_SpaceButton_new", {
      mx_SpaceButton_newCancel: menuDisplayed
    }),
    label: menuDisplayed ? (0, _languageHandler._t)("Cancel") : (0, _languageHandler._t)("Create a space"),
    onClick: onNewClick,
    isNarrow: isPanelCollapsed
  }), betaDot, contextMenu);
};

const metaSpaceComponentMap = {
  [_spaces.MetaSpace.Home]: HomeButton,
  [_spaces.MetaSpace.Favourites]: FavouritesButton,
  [_spaces.MetaSpace.People]: PeopleButton,
  [_spaces.MetaSpace.Orphans]: OrphansButton
}; // Optimisation based on https://github.com/atlassian/react-beautiful-dnd/blob/master/docs/api/droppable.md#recommended-droppable--performance-optimisation

const InnerSpacePanel = /*#__PURE__*/_react.default.memo(({
  children,
  isPanelCollapsed,
  setPanelCollapsed
}) => {
  const [invites, metaSpaces, actualSpaces, activeSpace] = useSpaces();
  const activeSpaces = activeSpace ? [activeSpace] : [];
  const metaSpacesSection = metaSpaces.map(key => {
    const Component = metaSpaceComponentMap[key];
    return /*#__PURE__*/_react.default.createElement(Component, {
      key: key,
      selected: activeSpace === key,
      isPanelCollapsed: isPanelCollapsed
    });
  });
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_SpaceTreeLevel"
  }, metaSpacesSection, invites.map(s => /*#__PURE__*/_react.default.createElement(_SpaceTreeLevel.SpaceItem, {
    key: s.roomId,
    space: s,
    activeSpaces: activeSpaces,
    isPanelCollapsed: isPanelCollapsed,
    onExpand: () => setPanelCollapsed(false)
  })), actualSpaces.map((s, i) => /*#__PURE__*/_react.default.createElement(_reactBeautifulDnd.Draggable, {
    key: s.roomId,
    draggableId: s.roomId,
    index: i
  }, (provided, snapshot) => /*#__PURE__*/_react.default.createElement(_SpaceTreeLevel.SpaceItem, (0, _extends2.default)({}, provided.draggableProps, {
    dragHandleProps: provided.dragHandleProps,
    key: s.roomId,
    innerRef: provided.innerRef,
    className: snapshot.isDragging ? "mx_SpaceItem_dragging" : undefined,
    space: s,
    activeSpaces: activeSpaces,
    isPanelCollapsed: isPanelCollapsed,
    onExpand: () => setPanelCollapsed(false)
  })))), children, /*#__PURE__*/_react.default.createElement(CreateSpaceButton, {
    isPanelCollapsed: isPanelCollapsed,
    setPanelCollapsed: setPanelCollapsed
  }));
});

const SpacePanel = () => {
  const metaSpacesEnabled = (0, _useSettings.useSettingValue)("feature_spaces_metaspaces");
  const [isPanelCollapsed, setPanelCollapsed] = (0, _react.useState)(true);
  const ref = (0, _react.useRef)();
  (0, _react.useLayoutEffect)(() => {
    _UIStore.default.instance.trackElementDimensions("SpacePanel", ref.current);

    return () => _UIStore.default.instance.stopTrackingElementDimensions("SpacePanel");
  }, []);
  return /*#__PURE__*/_react.default.createElement(_reactBeautifulDnd.DragDropContext, {
    onDragEnd: result => {
      if (!result.destination) return; // dropped outside the list

      _SpaceStore.default.instance.moveRootSpace(result.source.index, result.destination.index);
    }
  }, /*#__PURE__*/_react.default.createElement(_RovingTabIndex.RovingTabIndexProvider, {
    handleHomeEnd: true,
    handleUpDown: true
  }, ({
    onKeyDownHandler
  }) => /*#__PURE__*/_react.default.createElement("ul", {
    className: (0, _classnames.default)("mx_SpacePanel", {
      collapsed: isPanelCollapsed
    }),
    onKeyDown: onKeyDownHandler,
    role: "tree",
    "aria-label": (0, _languageHandler._t)("Spaces"),
    ref: ref
  }, /*#__PURE__*/_react.default.createElement(_reactBeautifulDnd.Droppable, {
    droppableId: "top-level-spaces"
  }, (provided, snapshot) => /*#__PURE__*/_react.default.createElement(_AutoHideScrollbar.default, (0, _extends2.default)({}, provided.droppableProps, {
    wrappedRef: provided.innerRef,
    className: "mx_SpacePanel_spaceTreeWrapper",
    style: snapshot.isDraggingOver ? {
      pointerEvents: "none"
    } : undefined
  }), /*#__PURE__*/_react.default.createElement(InnerSpacePanel, {
    isPanelCollapsed: isPanelCollapsed,
    setPanelCollapsed: setPanelCollapsed
  }, provided.placeholder))), /*#__PURE__*/_react.default.createElement(_AccessibleTooltipButton.default, {
    className: (0, _classnames.default)("mx_SpacePanel_toggleCollapse", {
      expanded: !isPanelCollapsed
    }),
    onClick: () => setPanelCollapsed(!isPanelCollapsed),
    title: isPanelCollapsed ? (0, _languageHandler._t)("Expand space panel") : (0, _languageHandler._t)("Collapse space panel"),
    forceHide: !isPanelCollapsed
  }, !isPanelCollapsed ? (0, _languageHandler._t)("Collapse") : null), metaSpacesEnabled && /*#__PURE__*/_react.default.createElement(_QuickSettingsButton.default, {
    isPanelCollapsed: isPanelCollapsed
  }))));
};

var _default = SpacePanel;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,