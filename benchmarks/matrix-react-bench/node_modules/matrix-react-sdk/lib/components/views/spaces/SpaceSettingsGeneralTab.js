"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _event = require("matrix-js-sdk/src/@types/event");

var _languageHandler = require("../../../languageHandler");

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

var _SpaceBasicSettings = _interopRequireDefault(require("./SpaceBasicSettings"));

var _Avatar = require("../../../Avatar");

var _RoomTopic = require("../elements/RoomTopic");

var _space = require("../../../utils/space");

var _logger = require("matrix-js-sdk/src/logger");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
Copyright 2021 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const SpaceSettingsGeneralTab = ({
  matrixClient: cli,
  space,
  onFinished
}) => {
  const [busy, setBusy] = (0, _react.useState)(false);
  const [error, setError] = (0, _react.useState)("");
  const userId = cli.getUserId();
  const [newAvatar, setNewAvatar] = (0, _react.useState)(null); // undefined means to remove avatar

  const canSetAvatar = space.currentState.maySendStateEvent(_event.EventType.RoomAvatar, userId);
  const avatarChanged = newAvatar !== null;
  const [name, setName] = (0, _react.useState)(space.name);
  const canSetName = space.currentState.maySendStateEvent(_event.EventType.RoomName, userId);
  const nameChanged = name !== space.name;
  const currentTopic = (0, _RoomTopic.getTopic)(space);
  const [topic, setTopic] = (0, _react.useState)(currentTopic);
  const canSetTopic = space.currentState.maySendStateEvent(_event.EventType.RoomTopic, userId);
  const topicChanged = topic !== currentTopic;

  const onCancel = () => {
    setNewAvatar(null);
    setName(space.name);
    setTopic(currentTopic);
  };

  const onSave = async () => {
    setBusy(true);
    const promises = [];

    if (avatarChanged) {
      if (newAvatar) {
        promises.push(cli.sendStateEvent(space.roomId, _event.EventType.RoomAvatar, {
          url: await cli.uploadContent(newAvatar)
        }, ""));
      } else {
        promises.push(cli.sendStateEvent(space.roomId, _event.EventType.RoomAvatar, {}, ""));
      }
    }

    if (nameChanged) {
      promises.push(cli.setRoomName(space.roomId, name));
    }

    if (topicChanged) {
      promises.push(cli.setRoomTopic(space.roomId, topic));
    }

    const results = await Promise.allSettled(promises);
    setBusy(false);
    const failures = results.filter(r => r.status === "rejected");

    if (failures.length > 0) {
      _logger.logger.error("Failed to save space settings: ", failures);

      setError((0, _languageHandler._t)("Failed to save space settings."));
    }
  };

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_SettingsTab"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_SettingsTab_heading"
  }, (0, _languageHandler._t)("General")), /*#__PURE__*/_react.default.createElement("div", null, (0, _languageHandler._t)("Edit settings relating to your space.")), error && /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_SpaceRoomView_errorText"
  }, error), /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_SettingsTab_section"
  }, /*#__PURE__*/_react.default.createElement(_SpaceBasicSettings.default, {
    avatarUrl: (0, _Avatar.avatarUrlForRoom)(space, 80, 80, "crop"),
    avatarDisabled: busy || !canSetAvatar,
    setAvatar: setNewAvatar,
    name: name,
    nameDisabled: busy || !canSetName,
    setName: setName,
    topic: topic,
    topicDisabled: busy || !canSetTopic,
    setTopic: setTopic
  }), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
    onClick: onCancel,
    disabled: busy || !(avatarChanged || nameChanged || topicChanged),
    kind: "link"
  }, (0, _languageHandler._t)("Cancel")), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
    onClick: onSave,
    disabled: busy,
    kind: "primary"
  }, busy ? (0, _languageHandler._t)("Saving...") : (0, _languageHandler._t)("Save Changes"))), /*#__PURE__*/_react.default.createElement("span", {
    className: "mx_SettingsTab_subheading"
  }, (0, _languageHandler._t)("Leave Space")), /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_SettingsTab_section mx_SettingsTab_subsectionText"
  }, /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
    kind: "danger",
    onClick: () => {
      (0, _space.leaveSpace)(space);
    }
  }, (0, _languageHandler._t)("Leave Space"))));
};

var _default = SpaceSettingsGeneralTab;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,