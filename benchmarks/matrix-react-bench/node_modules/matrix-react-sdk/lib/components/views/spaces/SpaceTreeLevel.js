"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.SpaceItem = exports.SpaceButton = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _RoomAvatar = _interopRequireDefault(require("../avatars/RoomAvatar"));

var _SpaceStore = _interopRequireDefault(require("../../../stores/spaces/SpaceStore"));

var _SpaceTreeLevelLayoutStore = _interopRequireDefault(require("../../../stores/spaces/SpaceTreeLevelLayoutStore"));

var _NotificationBadge = _interopRequireDefault(require("../rooms/NotificationBadge"));

var _languageHandler = require("../../../languageHandler");

var _ContextMenuTooltipButton = require("../../../accessibility/context_menu/ContextMenuTooltipButton");

var _ContextMenu = require("../../structures/ContextMenu");

var _MatrixClientContext = _interopRequireDefault(require("../../../contexts/MatrixClientContext"));

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

var _StaticNotificationState = require("../../../stores/notifications/StaticNotificationState");

var _NotificationColor = require("../../../stores/notifications/NotificationColor");

var _KeyBindingsManager = require("../../../KeyBindingsManager");

var _SpaceContextMenu = _interopRequireDefault(require("../context_menus/SpaceContextMenu"));

var _AccessibleTooltipButton = _interopRequireDefault(require("../elements/AccessibleTooltipButton"));

var _RovingTabIndex = require("../../../accessibility/RovingTabIndex");

const _excluded = ["space", "spaceKey", "className", "selected", "label", "contextMenuTooltip", "notificationState", "avatarSize", "isNarrow", "children", "ContextMenuComponent"],
      _excluded2 = ["space", "activeSpaces", "isNested", "isPanelCollapsed", "onExpand", "parents", "innerRef", "dragHandleProps"],
      _excluded3 = ["tabIndex"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const SpaceButton = _ref => {
  let {
    space,
    spaceKey,
    className,
    selected,
    label,
    contextMenuTooltip,
    notificationState,
    avatarSize,
    isNarrow,
    children,
    ContextMenuComponent
  } = _ref,
      props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  const [menuDisplayed, ref, openMenu, closeMenu] = (0, _ContextMenu.useContextMenu)();
  const [onFocus, isActive, handle] = (0, _RovingTabIndex.useRovingTabIndex)(ref);
  const tabIndex = isActive ? 0 : -1;

  let avatar = /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_SpaceButton_avatarPlaceholder"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_SpaceButton_icon"
  }));

  if (space) {
    avatar = /*#__PURE__*/_react.default.createElement(_RoomAvatar.default, {
      width: avatarSize,
      height: avatarSize,
      room: space
    });
  }

  let notifBadge;

  if (notificationState) {
    let ariaLabel = (0, _languageHandler._t)("Jump to first unread room.");

    if ((space === null || space === void 0 ? void 0 : space.getMyMembership()) === "invite") {
      ariaLabel = (0, _languageHandler._t)("Jump to first invite.");
    }

    notifBadge = /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SpacePanel_badgeContainer"
    }, /*#__PURE__*/_react.default.createElement(_NotificationBadge.default, {
      onClick: () => _SpaceStore.default.instance.setActiveRoomInSpace(spaceKey ?? space.roomId),
      forceCount: false,
      notification: notificationState,
      "aria-label": ariaLabel,
      tabIndex: tabIndex,
      showUnsentTooltip: true
    }));
  }

  let contextMenu;

  if (menuDisplayed && ContextMenuComponent) {
    var _handle$current;

    contextMenu = /*#__PURE__*/_react.default.createElement(ContextMenuComponent, (0, _extends2.default)({}, (0, _ContextMenu.toRightOf)((_handle$current = handle.current) === null || _handle$current === void 0 ? void 0 : _handle$current.getBoundingClientRect(), 0), {
      space: space,
      onFinished: closeMenu
    }));
  }

  return /*#__PURE__*/_react.default.createElement(_AccessibleTooltipButton.default, (0, _extends2.default)({}, props, {
    className: (0, _classnames.default)("mx_SpaceButton", className, {
      mx_SpaceButton_active: selected,
      mx_SpaceButton_hasMenuOpen: menuDisplayed,
      mx_SpaceButton_narrow: isNarrow
    }),
    title: label,
    onClick: spaceKey ? () => _SpaceStore.default.instance.setActiveSpace(spaceKey) : props.onClick,
    onContextMenu: openMenu,
    forceHide: !isNarrow || menuDisplayed,
    inputRef: handle,
    tabIndex: tabIndex,
    onFocus: onFocus
  }), children, /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_SpaceButton_selectionWrapper"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_SpaceButton_avatarWrapper"
  }, avatar, notifBadge), !isNarrow && /*#__PURE__*/_react.default.createElement("span", {
    className: "mx_SpaceButton_name"
  }, label), ContextMenuComponent && /*#__PURE__*/_react.default.createElement(_ContextMenuTooltipButton.ContextMenuTooltipButton, {
    className: "mx_SpaceButton_menuButton",
    onClick: openMenu,
    title: contextMenuTooltip,
    isExpanded: menuDisplayed
  }), contextMenu));
};

exports.SpaceButton = SpaceButton;

class SpaceItem extends _react.default.PureComponent {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "buttonRef", /*#__PURE__*/(0, _react.createRef)());
    (0, _defineProperty2.default)(this, "onSpaceUpdate", () => {
      this.setState({
        childSpaces: this.childSpaces
      });
    });
    (0, _defineProperty2.default)(this, "toggleCollapse", evt => {
      if (this.props.onExpand && this.isCollapsed) {
        this.props.onExpand();
      }

      const newCollapsedState = !this.isCollapsed;

      _SpaceTreeLevelLayoutStore.default.instance.setSpaceCollapsedState(this.props.space.roomId, this.props.parents, newCollapsedState);

      this.setState({
        collapsed: newCollapsedState
      }); // don't bubble up so encapsulating button for space
      // doesn't get triggered

      evt.stopPropagation();
    });
    (0, _defineProperty2.default)(this, "onKeyDown", ev => {
      var _this$state$childSpac;

      let handled = true;
      const action = (0, _KeyBindingsManager.getKeyBindingsManager)().getRoomListAction(ev);
      const hasChildren = (_this$state$childSpac = this.state.childSpaces) === null || _this$state$childSpac === void 0 ? void 0 : _this$state$childSpac.length;

      switch (action) {
        case _KeyBindingsManager.RoomListAction.CollapseSection:
          if (hasChildren && !this.isCollapsed) {
            this.toggleCollapse(ev);
          } else {
            var _this$buttonRef, _this$buttonRef$curre, _this$buttonRef$curre2;

            const parentItem = (_this$buttonRef = this.buttonRef) === null || _this$buttonRef === void 0 ? void 0 : (_this$buttonRef$curre = _this$buttonRef.current) === null || _this$buttonRef$curre === void 0 ? void 0 : (_this$buttonRef$curre2 = _this$buttonRef$curre.parentElement) === null || _this$buttonRef$curre2 === void 0 ? void 0 : _this$buttonRef$curre2.parentElement;
            const parentButton = parentItem === null || parentItem === void 0 ? void 0 : parentItem.previousElementSibling;
            parentButton === null || parentButton === void 0 ? void 0 : parentButton.focus();
          }

          break;

        case _KeyBindingsManager.RoomListAction.ExpandSection:
          if (hasChildren) {
            if (this.isCollapsed) {
              this.toggleCollapse(ev);
            } else {
              var _this$buttonRef2, _this$buttonRef2$curr, _firstSpaceItemChild$;

              const childLevel = (_this$buttonRef2 = this.buttonRef) === null || _this$buttonRef2 === void 0 ? void 0 : (_this$buttonRef2$curr = _this$buttonRef2.current) === null || _this$buttonRef2$curr === void 0 ? void 0 : _this$buttonRef2$curr.nextElementSibling;
              const firstSpaceItemChild = childLevel === null || childLevel === void 0 ? void 0 : childLevel.querySelector(".mx_SpaceItem");
              firstSpaceItemChild === null || firstSpaceItemChild === void 0 ? void 0 : (_firstSpaceItemChild$ = firstSpaceItemChild.querySelector(".mx_SpaceButton")) === null || _firstSpaceItemChild$ === void 0 ? void 0 : _firstSpaceItemChild$.focus();
            }
          }

          break;

        default:
          handled = false;
      }

      if (handled) {
        ev.stopPropagation();
        ev.preventDefault();
      }
    });
    (0, _defineProperty2.default)(this, "onClick", ev => {
      ev.preventDefault();
      ev.stopPropagation();

      _SpaceStore.default.instance.setActiveSpace(this.props.space.roomId);
    });

    const collapsed = _SpaceTreeLevelLayoutStore.default.instance.getSpaceCollapsedState(props.space.roomId, this.props.parents, !props.isNested // default to collapsed for root items
    );

    this.state = {
      collapsed: collapsed,
      childSpaces: this.childSpaces
    };

    _SpaceStore.default.instance.on(this.props.space.roomId, this.onSpaceUpdate);
  }

  componentWillUnmount() {
    _SpaceStore.default.instance.off(this.props.space.roomId, this.onSpaceUpdate);
  }

  get childSpaces() {
    return _SpaceStore.default.instance.getChildSpaces(this.props.space.roomId).filter(s => {
      var _this$props$parents;

      return !((_this$props$parents = this.props.parents) !== null && _this$props$parents !== void 0 && _this$props$parents.has(s.roomId));
    });
  }

  get isCollapsed() {
    return this.state.collapsed || this.props.isPanelCollapsed;
  }

  render() {
    var _this$state$childSpac2, _this$state$childSpac3;

    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    const _this$props = this.props,
          {
      space,
      activeSpaces,
      isNested,
      isPanelCollapsed,
      onExpand,
      parents,
      innerRef,
      dragHandleProps
    } = _this$props,
          otherProps = (0, _objectWithoutProperties2.default)(_this$props, _excluded2);
    const collapsed = this.isCollapsed;
    const itemClasses = (0, _classnames.default)(this.props.className, {
      "mx_SpaceItem": true,
      "mx_SpaceItem_narrow": isPanelCollapsed,
      "collapsed": collapsed,
      "hasSubSpaces": (_this$state$childSpac2 = this.state.childSpaces) === null || _this$state$childSpac2 === void 0 ? void 0 : _this$state$childSpac2.length
    });
    const isInvite = space.getMyMembership() === "invite";
    const notificationState = isInvite ? _StaticNotificationState.StaticNotificationState.forSymbol("!", _NotificationColor.NotificationColor.Red) : _SpaceStore.default.instance.getNotificationState(space.roomId);
    const hasChildren = (_this$state$childSpac3 = this.state.childSpaces) === null || _this$state$childSpac3 === void 0 ? void 0 : _this$state$childSpac3.length;
    let childItems;

    if (hasChildren && !collapsed) {
      childItems = /*#__PURE__*/_react.default.createElement(SpaceTreeLevel, {
        spaces: this.state.childSpaces,
        activeSpaces: activeSpaces,
        isNested: true,
        parents: new Set(parents).add(space.roomId)
      });
    }

    const toggleCollapseButton = hasChildren ? /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      className: "mx_SpaceButton_toggleCollapse",
      onClick: this.toggleCollapse,
      tabIndex: -1,
      "aria-label": collapsed ? (0, _languageHandler._t)("Expand") : (0, _languageHandler._t)("Collapse")
    }) : null; // eslint-disable-next-line @typescript-eslint/no-unused-vars

    const _ref2 = dragHandleProps || {},
          {
      tabIndex
    } = _ref2,
          restDragHandleProps = (0, _objectWithoutProperties2.default)(_ref2, _excluded3);

    return /*#__PURE__*/_react.default.createElement("li", (0, _extends2.default)({}, otherProps, {
      className: itemClasses,
      ref: innerRef,
      "aria-expanded": hasChildren ? !collapsed : undefined,
      role: "treeitem"
    }), /*#__PURE__*/_react.default.createElement(SpaceButton, (0, _extends2.default)({}, restDragHandleProps, {
      space: space,
      className: isInvite ? "mx_SpaceButton_invite" : undefined,
      selected: activeSpaces.includes(space.roomId),
      label: space.name,
      contextMenuTooltip: (0, _languageHandler._t)("Space options"),
      notificationState: notificationState,
      isNarrow: isPanelCollapsed,
      avatarSize: isNested ? 24 : 32,
      onClick: this.onClick,
      onKeyDown: this.onKeyDown,
      ContextMenuComponent: this.props.space.getMyMembership() === "join" ? _SpaceContextMenu.default : undefined
    }), toggleCollapseButton), childItems);
  }

}

exports.SpaceItem = SpaceItem;
(0, _defineProperty2.default)(SpaceItem, "contextType", _MatrixClientContext.default);

const SpaceTreeLevel = ({
  spaces,
  activeSpaces,
  isNested,
  parents
}) => {
  return /*#__PURE__*/_react.default.createElement("ul", {
    className: "mx_SpaceTreeLevel",
    role: "group"
  }, spaces.map(s => {
    return /*#__PURE__*/_react.default.createElement(SpaceItem, {
      key: s.roomId,
      activeSpaces: activeSpaces,
      space: s,
      isNested: isNested,
      parents: parents
    });
  }));
};

var _default = SpaceTreeLevel;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL3NwYWNlcy9TcGFjZVRyZWVMZXZlbC50c3giXSwibmFtZXMiOlsiU3BhY2VCdXR0b24iLCJzcGFjZSIsInNwYWNlS2V5IiwiY2xhc3NOYW1lIiwic2VsZWN0ZWQiLCJsYWJlbCIsImNvbnRleHRNZW51VG9vbHRpcCIsIm5vdGlmaWNhdGlvblN0YXRlIiwiYXZhdGFyU2l6ZSIsImlzTmFycm93IiwiY2hpbGRyZW4iLCJDb250ZXh0TWVudUNvbXBvbmVudCIsInByb3BzIiwibWVudURpc3BsYXllZCIsInJlZiIsIm9wZW5NZW51IiwiY2xvc2VNZW51Iiwib25Gb2N1cyIsImlzQWN0aXZlIiwiaGFuZGxlIiwidGFiSW5kZXgiLCJhdmF0YXIiLCJub3RpZkJhZGdlIiwiYXJpYUxhYmVsIiwiZ2V0TXlNZW1iZXJzaGlwIiwiU3BhY2VTdG9yZSIsImluc3RhbmNlIiwic2V0QWN0aXZlUm9vbUluU3BhY2UiLCJyb29tSWQiLCJjb250ZXh0TWVudSIsImN1cnJlbnQiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJteF9TcGFjZUJ1dHRvbl9hY3RpdmUiLCJteF9TcGFjZUJ1dHRvbl9oYXNNZW51T3BlbiIsIm14X1NwYWNlQnV0dG9uX25hcnJvdyIsInNldEFjdGl2ZVNwYWNlIiwib25DbGljayIsIlNwYWNlSXRlbSIsIlJlYWN0IiwiUHVyZUNvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwic2V0U3RhdGUiLCJjaGlsZFNwYWNlcyIsImV2dCIsIm9uRXhwYW5kIiwiaXNDb2xsYXBzZWQiLCJuZXdDb2xsYXBzZWRTdGF0ZSIsIlNwYWNlVHJlZUxldmVsTGF5b3V0U3RvcmUiLCJzZXRTcGFjZUNvbGxhcHNlZFN0YXRlIiwicGFyZW50cyIsImNvbGxhcHNlZCIsInN0b3BQcm9wYWdhdGlvbiIsImV2IiwiaGFuZGxlZCIsImFjdGlvbiIsImdldFJvb21MaXN0QWN0aW9uIiwiaGFzQ2hpbGRyZW4iLCJzdGF0ZSIsImxlbmd0aCIsIlJvb21MaXN0QWN0aW9uIiwiQ29sbGFwc2VTZWN0aW9uIiwidG9nZ2xlQ29sbGFwc2UiLCJwYXJlbnRJdGVtIiwiYnV0dG9uUmVmIiwicGFyZW50RWxlbWVudCIsInBhcmVudEJ1dHRvbiIsInByZXZpb3VzRWxlbWVudFNpYmxpbmciLCJmb2N1cyIsIkV4cGFuZFNlY3Rpb24iLCJjaGlsZExldmVsIiwibmV4dEVsZW1lbnRTaWJsaW5nIiwiZmlyc3RTcGFjZUl0ZW1DaGlsZCIsInF1ZXJ5U2VsZWN0b3IiLCJwcmV2ZW50RGVmYXVsdCIsImdldFNwYWNlQ29sbGFwc2VkU3RhdGUiLCJpc05lc3RlZCIsIm9uIiwib25TcGFjZVVwZGF0ZSIsImNvbXBvbmVudFdpbGxVbm1vdW50Iiwib2ZmIiwiZ2V0Q2hpbGRTcGFjZXMiLCJmaWx0ZXIiLCJzIiwiaGFzIiwiaXNQYW5lbENvbGxhcHNlZCIsInJlbmRlciIsImFjdGl2ZVNwYWNlcyIsImlubmVyUmVmIiwiZHJhZ0hhbmRsZVByb3BzIiwib3RoZXJQcm9wcyIsIml0ZW1DbGFzc2VzIiwiaXNJbnZpdGUiLCJTdGF0aWNOb3RpZmljYXRpb25TdGF0ZSIsImZvclN5bWJvbCIsIk5vdGlmaWNhdGlvbkNvbG9yIiwiUmVkIiwiZ2V0Tm90aWZpY2F0aW9uU3RhdGUiLCJjaGlsZEl0ZW1zIiwiU2V0IiwiYWRkIiwidG9nZ2xlQ29sbGFwc2VCdXR0b24iLCJyZXN0RHJhZ0hhbmRsZVByb3BzIiwidW5kZWZpbmVkIiwiaW5jbHVkZXMiLCJuYW1lIiwib25LZXlEb3duIiwiU3BhY2VDb250ZXh0TWVudSIsIk1hdHJpeENsaWVudENvbnRleHQiLCJTcGFjZVRyZWVMZXZlbCIsInNwYWNlcyIsIm1hcCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBZ0JBOztBQU9BOztBQUdBOztBQUNBOztBQUVBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUVBOztBQUNBOztBQUVBOzs7Ozs7Ozs7O0FBZ0JP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QyxtQkFBZDtBQUFrQyxJQUFBLElBQUksRUFBQztBQUF2QyxLQUNENEQsTUFBTSxDQUFDQyxHQUFQLENBQVc1QixDQUFDLElBQUk7QUFDZCx3QkFBUSw2QkFBQyxTQUFEO0FBQ0osTUFBQSxHQUFHLEVBQUVBLENBQUMsQ0FBQ3RELE1BREg7QUFFSixNQUFBLFlBQVksRUFBRTBELFlBRlY7QUFHSixNQUFBLEtBQUssRUFBRUosQ0FISDtBQUlKLE1BQUEsUUFBUSxFQUFFUCxRQUpOO0FBS0osTUFBQSxPQUFPLEVBQUUxQjtBQUxMLE1BQVI7QUFPSCxHQVJDLENBREMsQ0FBUDtBQVdILENBakJEOztlQW1CZTJELGMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuQ29weXJpZ2h0IDIwMjEgVGhlIE1hdHJpeC5vcmcgRm91bmRhdGlvbiBDLkkuQy5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG5pbXBvcnQgUmVhY3QsIHtcbiAgICBjcmVhdGVSZWYsXG4gICAgSW5wdXRIVE1MQXR0cmlidXRlcyxcbiAgICBMZWdhY3lSZWYsXG4gICAgQ29tcG9uZW50UHJvcHMsXG4gICAgQ29tcG9uZW50VHlwZSxcbn0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tIFwiY2xhc3NuYW1lc1wiO1xuaW1wb3J0IHsgUm9vbSB9IGZyb20gXCJtYXRyaXgtanMtc2RrL3NyYy9tb2RlbHMvcm9vbVwiO1xuXG5pbXBvcnQgUm9vbUF2YXRhciBmcm9tIFwiLi4vYXZhdGFycy9Sb29tQXZhdGFyXCI7XG5pbXBvcnQgU3BhY2VTdG9yZSBmcm9tIFwiLi4vLi4vLi4vc3RvcmVzL3NwYWNlcy9TcGFjZVN0b3JlXCI7XG5pbXBvcnQgeyBTcGFjZUtleSB9IGZyb20gXCIuLi8uLi8uLi9zdG9yZXMvc3BhY2VzXCI7XG5pbXBvcnQgU3BhY2VUcmVlTGV2ZWxMYXlvdXRTdG9yZSBmcm9tIFwiLi4vLi4vLi4vc3RvcmVzL3NwYWNlcy9TcGFjZVRyZWVMZXZlbExheW91dFN0b3JlXCI7XG5pbXBvcnQgTm90aWZpY2F0aW9uQmFkZ2UgZnJvbSBcIi4uL3Jvb21zL05vdGlmaWNhdGlvbkJhZGdlXCI7XG5pbXBvcnQgeyBfdCB9IGZyb20gXCIuLi8uLi8uLi9sYW5ndWFnZUhhbmRsZXJcIjtcbmltcG9ydCB7IENvbnRleHRNZW51VG9vbHRpcEJ1dHRvbiB9IGZyb20gXCIuLi8uLi8uLi9hY2Nlc3NpYmlsaXR5L2NvbnRleHRfbWVudS9Db250ZXh0TWVudVRvb2x0aXBCdXR0b25cIjtcbmltcG9ydCB7IHRvUmlnaHRPZiwgdXNlQ29udGV4dE1lbnUgfSBmcm9tIFwiLi4vLi4vc3RydWN0dXJlcy9Db250ZXh0TWVudVwiO1xuaW1wb3J0IE1hdHJpeENsaWVudENvbnRleHQgZnJvbSBcIi4uLy4uLy4uL2NvbnRleHRzL01hdHJpeENsaWVudENvbnRleHRcIjtcbmltcG9ydCBBY2Nlc3NpYmxlQnV0dG9uLCB7IEJ1dHRvbkV2ZW50IH0gZnJvbSBcIi4uL2VsZW1lbnRzL0FjY2Vzc2libGVCdXR0b25cIjtcbmltcG9ydCB7IFN0YXRpY05vdGlmaWNhdGlvblN0YXRlIH0gZnJvbSBcIi4uLy4uLy4uL3N0b3Jlcy9ub3RpZmljYXRpb25zL1N0YXRpY05vdGlmaWNhdGlvblN0YXRlXCI7XG5pbXBvcnQgeyBOb3RpZmljYXRpb25Db2xvciB9IGZyb20gXCIuLi8uLi8uLi9zdG9yZXMvbm90aWZpY2F0aW9ucy9Ob3RpZmljYXRpb25Db2xvclwiO1xuaW1wb3J0IHsgZ2V0S2V5QmluZGluZ3NNYW5hZ2VyLCBSb29tTGlzdEFjdGlvbiB9IGZyb20gXCIuLi8uLi8uLi9LZXlCaW5kaW5nc01hbmFnZXJcIjtcbmltcG9ydCB7IE5vdGlmaWNhdGlvblN0YXRlIH0gZnJvbSBcIi4uLy4uLy4uL3N0b3Jlcy9ub3RpZmljYXRpb25zL05vdGlmaWNhdGlvblN0YXRlXCI7XG5pbXBvcnQgU3BhY2VDb250ZXh0TWVudSBmcm9tIFwiLi4vY29udGV4dF9tZW51cy9TcGFjZUNvbnRleHRNZW51XCI7XG5pbXBvcnQgQWNjZXNzaWJsZVRvb2x0aXBCdXR0b24gZnJvbSBcIi4uL2VsZW1lbnRzL0FjY2Vzc2libGVUb29sdGlwQnV0dG9uXCI7XG5pbXBvcnQgeyBEcmFnZ2FibGVQcm92aWRlZERyYWdIYW5kbGVQcm9wcyB9IGZyb20gXCJyZWFjdC1iZWF1dGlmdWwtZG5kXCI7XG5pbXBvcnQgeyB1c2VSb3ZpbmdUYWJJbmRleCB9IGZyb20gXCIuLi8uLi8uLi9hY2Nlc3NpYmlsaXR5L1JvdmluZ1RhYkluZGV4XCI7XG5cbmludGVyZmFjZSBJQnV0dG9uUHJvcHMgZXh0ZW5kcyBPbWl0PENvbXBvbmVudFByb3BzPHR5cGVvZiBBY2Nlc3NpYmxlVG9vbHRpcEJ1dHRvbj4sIFwidGl0bGVcIiB8IFwib25DbGlja1wiPiB7XG4gICAgc3BhY2U/OiBSb29tO1xuICAgIHNwYWNlS2V5PzogU3BhY2VLZXk7XG4gICAgY2xhc3NOYW1lPzogc3RyaW5nO1xuICAgIHNlbGVjdGVkPzogYm9vbGVhbjtcbiAgICBsYWJlbDogc3RyaW5nO1xuICAgIGNvbnRleHRNZW51VG9vbHRpcD86IHN0cmluZztcbiAgICBub3RpZmljYXRpb25TdGF0ZT86IE5vdGlmaWNhdGlvblN0YXRlO1xuICAgIGlzTmFycm93PzogYm9vbGVhbjtcbiAgICBhdmF0YXJTaXplPzogbnVtYmVyO1xuICAgIENvbnRleHRNZW51Q29tcG9uZW50PzogQ29tcG9uZW50VHlwZTxDb21wb25lbnRQcm9wczx0eXBlb2YgU3BhY2VDb250ZXh0TWVudT4+O1xuICAgIG9uQ2xpY2s/KGV2PzogQnV0dG9uRXZlbnQpOiB2b2lkO1xufVxuXG5leHBvcnQgY29uc3QgU3BhY2VCdXR0b246IFJlYWN0LkZDPElCdXR0b25Qcm9wcz4gPSAoe1xuICAgIHNwYWNlLFxuICAgIHNwYWNlS2V5LFxuICAgIGNsYXNzTmFtZSxcbiAgICBzZWxlY3RlZCxcbiAgICBsYWJlbCxcbiAgICBjb250ZXh0TWVudVRvb2x0aXAsXG4gICAgbm90aWZpY2F0aW9uU3RhdGUsXG4gICAgYXZhdGFyU2l6ZSxcbiAgICBpc05hcnJvdyxcbiAgICBjaGlsZHJlbixcbiAgICBDb250ZXh0TWVudUNvbXBvbmVudCxcbiAgICAuLi5wcm9wc1xufSkgPT4ge1xuICAgIGNvbnN0IFttZW51RGlzcGxheWVkLCByZWYsIG9wZW5NZW51LCBjbG9zZU1lbnVdID0gdXNlQ29udGV4dE1lbnU8SFRNTEVsZW1lbnQ+KCk7XG4gICAgY29uc3QgW29uRm9jdXMsIGlzQWN0aXZlLCBoYW5kbGVdID0gdXNlUm92aW5nVGFiSW5kZXgocmVmKTtcbiAgICBjb25zdCB0YWJJbmRleCA9IGlzQWN0aXZlID8gMCA6IC0xO1xuXG4gICAgbGV0IGF2YXRhciA9IDxkaXYgY2xhc3NOYW1lPVwibXhfU3BhY2VCdXR0b25fYXZhdGFyUGxhY2Vob2xkZXJcIj48ZGl2IGNsYXNzTmFtZT1cIm14X1NwYWNlQnV0dG9uX2ljb25cIiAvPjwvZGl2PjtcbiAgICBpZiAoc3BhY2UpIHtcbiAgICAgICAgYXZhdGFyID0gPFJvb21BdmF0YXIgd2lkdGg9e2F2YXRhclNpemV9IGhlaWdodD17YXZhdGFyU2l6ZX0gcm9vbT17c3BhY2V9IC8+O1xuICAgIH1cblxuICAgIGxldCBub3RpZkJhZGdlO1xuICAgIGlmIChub3RpZmljYXRpb25TdGF0ZSkge1xuICAgICAgICBsZXQgYXJpYUxhYmVsID0gX3QoXCJKdW1wIHRvIGZpcnN0IHVucmVhZCByb29tLlwiKTtcbiAgICAgICAgaWYgKHNwYWNlPy5nZXRNeU1lbWJlcnNoaXAoKSA9PT0gXCJpbnZpdGVcIikge1xuICAgICAgICAgICAgYXJpYUxhYmVsID0gX3QoXCJKdW1wIHRvIGZpcnN0IGludml0ZS5cIik7XG4gICAgICAgIH1cblxuICAgICAgICBub3RpZkJhZGdlID0gPGRpdiBjbGFzc05hbWU9XCJteF9TcGFjZVBhbmVsX2JhZGdlQ29udGFpbmVyXCI+XG4gICAgICAgICAgICA8Tm90aWZpY2F0aW9uQmFkZ2VcbiAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBTcGFjZVN0b3JlLmluc3RhbmNlLnNldEFjdGl2ZVJvb21JblNwYWNlKHNwYWNlS2V5ID8/IHNwYWNlLnJvb21JZCl9XG4gICAgICAgICAgICAgICAgZm9yY2VDb3VudD17ZmFsc2V9XG4gICAgICAgICAgICAgICAgbm90aWZpY2F0aW9uPXtub3RpZmljYXRpb25TdGF0ZX1cbiAgICAgICAgICAgICAgICBhcmlhLWxhYmVsPXthcmlhTGFiZWx9XG4gICAgICAgICAgICAgICAgdGFiSW5kZXg9e3RhYkluZGV4fVxuICAgICAgICAgICAgICAgIHNob3dVbnNlbnRUb29sdGlwPXt0cnVlfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgPC9kaXY+O1xuICAgIH1cblxuICAgIGxldCBjb250ZXh0TWVudTogSlNYLkVsZW1lbnQ7XG4gICAgaWYgKG1lbnVEaXNwbGF5ZWQgJiYgQ29udGV4dE1lbnVDb21wb25lbnQpIHtcbiAgICAgICAgY29udGV4dE1lbnUgPSA8Q29udGV4dE1lbnVDb21wb25lbnRcbiAgICAgICAgICAgIHsuLi50b1JpZ2h0T2YoaGFuZGxlLmN1cnJlbnQ/LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLCAwKX1cbiAgICAgICAgICAgIHNwYWNlPXtzcGFjZX1cbiAgICAgICAgICAgIG9uRmluaXNoZWQ9e2Nsb3NlTWVudX1cbiAgICAgICAgLz47XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPEFjY2Vzc2libGVUb29sdGlwQnV0dG9uXG4gICAgICAgICAgICB7Li4ucHJvcHN9XG4gICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZXMoXCJteF9TcGFjZUJ1dHRvblwiLCBjbGFzc05hbWUsIHtcbiAgICAgICAgICAgICAgICBteF9TcGFjZUJ1dHRvbl9hY3RpdmU6IHNlbGVjdGVkLFxuICAgICAgICAgICAgICAgIG14X1NwYWNlQnV0dG9uX2hhc01lbnVPcGVuOiBtZW51RGlzcGxheWVkLFxuICAgICAgICAgICAgICAgIG14X1NwYWNlQnV0dG9uX25hcnJvdzogaXNOYXJyb3csXG4gICAgICAgICAgICB9KX1cbiAgICAgICAgICAgIHRpdGxlPXtsYWJlbH1cbiAgICAgICAgICAgIG9uQ2xpY2s9e3NwYWNlS2V5ID8gKCkgPT4gU3BhY2VTdG9yZS5pbnN0YW5jZS5zZXRBY3RpdmVTcGFjZShzcGFjZUtleSkgOiBwcm9wcy5vbkNsaWNrfVxuICAgICAgICAgICAgb25Db250ZXh0TWVudT17b3Blbk1lbnV9XG4gICAgICAgICAgICBmb3JjZUhpZGU9eyFpc05hcnJvdyB8fCBtZW51RGlzcGxheWVkfVxuICAgICAgICAgICAgaW5wdXRSZWY9e2hhbmRsZX1cbiAgICAgICAgICAgIHRhYkluZGV4PXt0YWJJbmRleH1cbiAgICAgICAgICAgIG9uRm9jdXM9e29uRm9jdXN9XG4gICAgICAgID5cbiAgICAgICAgICAgIHsgY2hpbGRyZW4gfVxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJteF9TcGFjZUJ1dHRvbl9zZWxlY3Rpb25XcmFwcGVyXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJteF9TcGFjZUJ1dHRvbl9hdmF0YXJXcmFwcGVyXCI+XG4gICAgICAgICAgICAgICAgICAgIHsgYXZhdGFyIH1cbiAgICAgICAgICAgICAgICAgICAgeyBub3RpZkJhZGdlIH1cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICB7ICFpc05hcnJvdyAmJiA8c3BhbiBjbGFzc05hbWU9XCJteF9TcGFjZUJ1dHRvbl9uYW1lXCI+eyBsYWJlbCB9PC9zcGFuPiB9XG5cbiAgICAgICAgICAgICAgICB7IENvbnRleHRNZW51Q29tcG9uZW50ICYmIDxDb250ZXh0TWVudVRvb2x0aXBCdXR0b25cbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwibXhfU3BhY2VCdXR0b25fbWVudUJ1dHRvblwiXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e29wZW5NZW51fVxuICAgICAgICAgICAgICAgICAgICB0aXRsZT17Y29udGV4dE1lbnVUb29sdGlwfVxuICAgICAgICAgICAgICAgICAgICBpc0V4cGFuZGVkPXttZW51RGlzcGxheWVkfVxuICAgICAgICAgICAgICAgIC8+IH1cblxuICAgICAgICAgICAgICAgIHsgY29udGV4dE1lbnUgfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvQWNjZXNzaWJsZVRvb2x0aXBCdXR0b24+XG4gICAgKTtcbn07XG5cbmludGVyZmFjZSBJSXRlbVByb3BzIGV4dGVuZHMgSW5wdXRIVE1MQXR0cmlidXRlczxIVE1MTElFbGVtZW50PiB7XG4gICAgc3BhY2U/OiBSb29tO1xuICAgIGFjdGl2ZVNwYWNlczogU3BhY2VLZXlbXTtcbiAgICBpc05lc3RlZD86IGJvb2xlYW47XG4gICAgaXNQYW5lbENvbGxhcHNlZD86IGJvb2xlYW47XG4gICAgb25FeHBhbmQ/OiBGdW5jdGlvbjtcbiAgICBwYXJlbnRzPzogU2V0PHN0cmluZz47XG4gICAgaW5uZXJSZWY/OiBMZWdhY3lSZWY8SFRNTExJRWxlbWVudD47XG4gICAgZHJhZ0hhbmRsZVByb3BzPzogRHJhZ2dhYmxlUHJvdmlkZWREcmFnSGFuZGxlUHJvcHM7XG59XG5cbmludGVyZmFjZSBJSXRlbVN0YXRlIHtcbiAgICBjb2xsYXBzZWQ6IGJvb2xlYW47XG4gICAgY2hpbGRTcGFjZXM6IFJvb21bXTtcbn1cblxuZXhwb3J0IGNsYXNzIFNwYWNlSXRlbSBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQ8SUl0ZW1Qcm9wcywgSUl0ZW1TdGF0ZT4ge1xuICAgIHN0YXRpYyBjb250ZXh0VHlwZSA9IE1hdHJpeENsaWVudENvbnRleHQ7XG5cbiAgICBwcml2YXRlIGJ1dHRvblJlZiA9IGNyZWF0ZVJlZjxIVE1MRGl2RWxlbWVudD4oKTtcblxuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcblxuICAgICAgICBjb25zdCBjb2xsYXBzZWQgPSBTcGFjZVRyZWVMZXZlbExheW91dFN0b3JlLmluc3RhbmNlLmdldFNwYWNlQ29sbGFwc2VkU3RhdGUoXG4gICAgICAgICAgICBwcm9wcy5zcGFjZS5yb29tSWQsXG4gICAgICAgICAgICB0aGlzLnByb3BzLnBhcmVudHMsXG4gICAgICAgICAgICAhcHJvcHMuaXNOZXN0ZWQsIC8vIGRlZmF1bHQgdG8gY29sbGFwc2VkIGZvciByb290IGl0ZW1zXG4gICAgICAgICk7XG5cbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIGNvbGxhcHNlZDogY29sbGFwc2VkLFxuICAgICAgICAgICAgY2hpbGRTcGFjZXM6IHRoaXMuY2hpbGRTcGFjZXMsXG4gICAgICAgIH07XG5cbiAgICAgICAgU3BhY2VTdG9yZS5pbnN0YW5jZS5vbih0aGlzLnByb3BzLnNwYWNlLnJvb21JZCwgdGhpcy5vblNwYWNlVXBkYXRlKTtcbiAgICB9XG5cbiAgICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgICAgU3BhY2VTdG9yZS5pbnN0YW5jZS5vZmYodGhpcy5wcm9wcy5zcGFjZS5yb29tSWQsIHRoaXMub25TcGFjZVVwZGF0ZSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvblNwYWNlVXBkYXRlID0gKCkgPT4ge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGNoaWxkU3BhY2VzOiB0aGlzLmNoaWxkU3BhY2VzLFxuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgcHJpdmF0ZSBnZXQgY2hpbGRTcGFjZXMoKSB7XG4gICAgICAgIHJldHVybiBTcGFjZVN0b3JlLmluc3RhbmNlLmdldENoaWxkU3BhY2VzKHRoaXMucHJvcHMuc3BhY2Uucm9vbUlkKVxuICAgICAgICAgICAgLmZpbHRlcihzID0+ICF0aGlzLnByb3BzLnBhcmVudHM/LmhhcyhzLnJvb21JZCkpO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0IGlzQ29sbGFwc2VkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZS5jb2xsYXBzZWQgfHwgdGhpcy5wcm9wcy5pc1BhbmVsQ29sbGFwc2VkO1xuICAgIH1cblxuICAgIHByaXZhdGUgdG9nZ2xlQ29sbGFwc2UgPSBldnQgPT4ge1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5vbkV4cGFuZCAmJiB0aGlzLmlzQ29sbGFwc2VkKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLm9uRXhwYW5kKCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbmV3Q29sbGFwc2VkU3RhdGUgPSAhdGhpcy5pc0NvbGxhcHNlZDtcblxuICAgICAgICBTcGFjZVRyZWVMZXZlbExheW91dFN0b3JlLmluc3RhbmNlLnNldFNwYWNlQ29sbGFwc2VkU3RhdGUoXG4gICAgICAgICAgICB0aGlzLnByb3BzLnNwYWNlLnJvb21JZCxcbiAgICAgICAgICAgIHRoaXMucHJvcHMucGFyZW50cyxcbiAgICAgICAgICAgIG5ld0NvbGxhcHNlZFN0YXRlLFxuICAgICAgICApO1xuICAgICAgICB0aGlzLnNldFN0YXRlKHsgY29sbGFwc2VkOiBuZXdDb2xsYXBzZWRTdGF0ZSB9KTtcbiAgICAgICAgLy8gZG9uJ3QgYnViYmxlIHVwIHNvIGVuY2Fwc3VsYXRpbmcgYnV0dG9uIGZvciBzcGFjZVxuICAgICAgICAvLyBkb2Vzbid0IGdldCB0cmlnZ2VyZWRcbiAgICAgICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH07XG5cbiAgICBwcml2YXRlIG9uS2V5RG93biA9IChldjogUmVhY3QuS2V5Ym9hcmRFdmVudCkgPT4ge1xuICAgICAgICBsZXQgaGFuZGxlZCA9IHRydWU7XG4gICAgICAgIGNvbnN0IGFjdGlvbiA9IGdldEtleUJpbmRpbmdzTWFuYWdlcigpLmdldFJvb21MaXN0QWN0aW9uKGV2KTtcbiAgICAgICAgY29uc3QgaGFzQ2hpbGRyZW4gPSB0aGlzLnN0YXRlLmNoaWxkU3BhY2VzPy5sZW5ndGg7XG4gICAgICAgIHN3aXRjaCAoYWN0aW9uKSB7XG4gICAgICAgICAgICBjYXNlIFJvb21MaXN0QWN0aW9uLkNvbGxhcHNlU2VjdGlvbjpcbiAgICAgICAgICAgICAgICBpZiAoaGFzQ2hpbGRyZW4gJiYgIXRoaXMuaXNDb2xsYXBzZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50b2dnbGVDb2xsYXBzZShldik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFyZW50SXRlbSA9IHRoaXMuYnV0dG9uUmVmPy5jdXJyZW50Py5wYXJlbnRFbGVtZW50Py5wYXJlbnRFbGVtZW50O1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXJlbnRCdXR0b24gPSBwYXJlbnRJdGVtPy5wcmV2aW91c0VsZW1lbnRTaWJsaW5nIGFzIEhUTUxFbGVtZW50O1xuICAgICAgICAgICAgICAgICAgICBwYXJlbnRCdXR0b24/LmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIFJvb21MaXN0QWN0aW9uLkV4cGFuZFNlY3Rpb246XG4gICAgICAgICAgICAgICAgaWYgKGhhc0NoaWxkcmVuKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzQ29sbGFwc2VkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZUNvbGxhcHNlKGV2KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkTGV2ZWwgPSB0aGlzLmJ1dHRvblJlZj8uY3VycmVudD8ubmV4dEVsZW1lbnRTaWJsaW5nO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZmlyc3RTcGFjZUl0ZW1DaGlsZCA9IGNoaWxkTGV2ZWw/LnF1ZXJ5U2VsZWN0b3I8SFRNTExJRWxlbWVudD4oXCIubXhfU3BhY2VJdGVtXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3RTcGFjZUl0ZW1DaGlsZD8ucXVlcnlTZWxlY3RvcjxIVE1MRGl2RWxlbWVudD4oXCIubXhfU3BhY2VCdXR0b25cIik/LmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgaGFuZGxlZCA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGhhbmRsZWQpIHtcbiAgICAgICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBwcml2YXRlIG9uQ2xpY2sgPSAoZXY6IFJlYWN0Lk1vdXNlRXZlbnQpID0+IHtcbiAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIFNwYWNlU3RvcmUuaW5zdGFuY2Uuc2V0QWN0aXZlU3BhY2UodGhpcy5wcm9wcy5zcGFjZS5yb29tSWQpO1xuICAgIH07XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcbiAgICAgICAgY29uc3QgeyBzcGFjZSwgYWN0aXZlU3BhY2VzLCBpc05lc3RlZCwgaXNQYW5lbENvbGxhcHNlZCwgb25FeHBhbmQsIHBhcmVudHMsIGlubmVyUmVmLCBkcmFnSGFuZGxlUHJvcHMsXG4gICAgICAgICAgICAuLi5vdGhlclByb3BzIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgICAgIGNvbnN0IGNvbGxhcHNlZCA9IHRoaXMuaXNDb2xsYXBzZWQ7XG5cbiAgICAgICAgY29uc3QgaXRlbUNsYXNzZXMgPSBjbGFzc05hbWVzKHRoaXMucHJvcHMuY2xhc3NOYW1lLCB7XG4gICAgICAgICAgICBcIm14X1NwYWNlSXRlbVwiOiB0cnVlLFxuICAgICAgICAgICAgXCJteF9TcGFjZUl0ZW1fbmFycm93XCI6IGlzUGFuZWxDb2xsYXBzZWQsXG4gICAgICAgICAgICBcImNvbGxhcHNlZFwiOiBjb2xsYXBzZWQsXG4gICAgICAgICAgICBcImhhc1N1YlNwYWNlc1wiOiB0aGlzLnN0YXRlLmNoaWxkU3BhY2VzPy5sZW5ndGgsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IGlzSW52aXRlID0gc3BhY2UuZ2V0TXlNZW1iZXJzaGlwKCkgPT09IFwiaW52aXRlXCI7XG5cbiAgICAgICAgY29uc3Qgbm90aWZpY2F0aW9uU3RhdGUgPSBpc0ludml0ZVxuICAgICAgICAgICAgPyBTdGF0aWNOb3RpZmljYXRpb25TdGF0ZS5mb3JTeW1ib2woXCIhXCIsIE5vdGlmaWNhdGlvbkNvbG9yLlJlZClcbiAgICAgICAgICAgIDogU3BhY2VTdG9yZS5pbnN0YW5jZS5nZXROb3RpZmljYXRpb25TdGF0ZShzcGFjZS5yb29tSWQpO1xuXG4gICAgICAgIGNvbnN0IGhhc0NoaWxkcmVuID0gdGhpcy5zdGF0ZS5jaGlsZFNwYWNlcz8ubGVuZ3RoO1xuXG4gICAgICAgIGxldCBjaGlsZEl0ZW1zO1xuICAgICAgICBpZiAoaGFzQ2hpbGRyZW4gJiYgIWNvbGxhcHNlZCkge1xuICAgICAgICAgICAgY2hpbGRJdGVtcyA9IDxTcGFjZVRyZWVMZXZlbFxuICAgICAgICAgICAgICAgIHNwYWNlcz17dGhpcy5zdGF0ZS5jaGlsZFNwYWNlc31cbiAgICAgICAgICAgICAgICBhY3RpdmVTcGFjZXM9e2FjdGl2ZVNwYWNlc31cbiAgICAgICAgICAgICAgICBpc05lc3RlZD17dHJ1ZX1cbiAgICAgICAgICAgICAgICBwYXJlbnRzPXtuZXcgU2V0KHBhcmVudHMpLmFkZChzcGFjZS5yb29tSWQpfVxuICAgICAgICAgICAgLz47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB0b2dnbGVDb2xsYXBzZUJ1dHRvbiA9IGhhc0NoaWxkcmVuID9cbiAgICAgICAgICAgIDxBY2Nlc3NpYmxlQnV0dG9uXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwibXhfU3BhY2VCdXR0b25fdG9nZ2xlQ29sbGFwc2VcIlxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMudG9nZ2xlQ29sbGFwc2V9XG4gICAgICAgICAgICAgICAgdGFiSW5kZXg9ey0xfVxuICAgICAgICAgICAgICAgIGFyaWEtbGFiZWw9e2NvbGxhcHNlZCA/IF90KFwiRXhwYW5kXCIpIDogX3QoXCJDb2xsYXBzZVwiKX1cbiAgICAgICAgICAgIC8+IDogbnVsbDtcblxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG4gICAgICAgIGNvbnN0IHsgdGFiSW5kZXgsIC4uLnJlc3REcmFnSGFuZGxlUHJvcHMgfSA9IGRyYWdIYW5kbGVQcm9wcyB8fCB7fTtcblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGxpXG4gICAgICAgICAgICAgICAgey4uLm90aGVyUHJvcHN9XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtpdGVtQ2xhc3Nlc31cbiAgICAgICAgICAgICAgICByZWY9e2lubmVyUmVmfVxuICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9e2hhc0NoaWxkcmVuID8gIWNvbGxhcHNlZCA6IHVuZGVmaW5lZH1cbiAgICAgICAgICAgICAgICByb2xlPVwidHJlZWl0ZW1cIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxTcGFjZUJ1dHRvblxuICAgICAgICAgICAgICAgICAgICB7Li4ucmVzdERyYWdIYW5kbGVQcm9wc31cbiAgICAgICAgICAgICAgICAgICAgc3BhY2U9e3NwYWNlfVxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2lzSW52aXRlID8gXCJteF9TcGFjZUJ1dHRvbl9pbnZpdGVcIiA6IHVuZGVmaW5lZH1cbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWQ9e2FjdGl2ZVNwYWNlcy5pbmNsdWRlcyhzcGFjZS5yb29tSWQpfVxuICAgICAgICAgICAgICAgICAgICBsYWJlbD17c3BhY2UubmFtZX1cbiAgICAgICAgICAgICAgICAgICAgY29udGV4dE1lbnVUb29sdGlwPXtfdChcIlNwYWNlIG9wdGlvbnNcIil9XG4gICAgICAgICAgICAgICAgICAgIG5vdGlmaWNhdGlvblN0YXRlPXtub3RpZmljYXRpb25TdGF0ZX1cbiAgICAgICAgICAgICAgICAgICAgaXNOYXJyb3c9e2lzUGFuZWxDb2xsYXBzZWR9XG4gICAgICAgICAgICAgICAgICAgIGF2YXRhclNpemU9e2lzTmVzdGVkID8gMjQgOiAzMn1cbiAgICAgICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5vbkNsaWNrfVxuICAgICAgICAgICAgICAgICAgICBvbktleURvd249e3RoaXMub25LZXlEb3dufVxuICAgICAgICAgICAgICAgICAgICBDb250ZXh0TWVudUNvbXBvbmVudD17dGhpcy5wcm9wcy5zcGFjZS5nZXRNeU1lbWJlcnNoaXAoKSA9PT0gXCJqb2luXCIgPyBTcGFjZUNvbnRleHRNZW51IDogdW5kZWZpbmVkfVxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgeyB0b2dnbGVDb2xsYXBzZUJ1dHRvbiB9XG4gICAgICAgICAgICAgICAgPC9TcGFjZUJ1dHRvbj5cblxuICAgICAgICAgICAgICAgIHsgY2hpbGRJdGVtcyB9XG4gICAgICAgICAgICA8L2xpPlxuICAgICAgICApO1xuICAgIH1cbn1cblxuaW50ZXJmYWNlIElUcmVlTGV2ZWxQcm9wcyB7XG4gICAgc3BhY2VzOiBSb29tW107XG4gICAgYWN0aXZlU3BhY2VzOiBTcGFjZUtleVtdO1xuICAgIGlzTmVzdGVkPzogYm9vbGVhbjtcbiAgICBwYXJlbnRzOiBTZXQ8c3RyaW5nPjtcbn1cblxuY29uc3QgU3BhY2VUcmVlTGV2ZWw6IFJlYWN0LkZDPElUcmVlTGV2ZWxQcm9wcz4gPSAoe1xuICAgIHNwYWNlcyxcbiAgICBhY3RpdmVTcGFjZXMsXG4gICAgaXNOZXN0ZWQsXG4gICAgcGFyZW50cyxcbn0pID0+IHtcbiAgICByZXR1cm4gPHVsIGNsYXNzTmFtZT1cIm14X1NwYWNlVHJlZUxldmVsXCIgcm9sZT1cImdyb3VwXCI+XG4gICAgICAgIHsgc3BhY2VzLm1hcChzID0+IHtcbiAgICAgICAgICAgIHJldHVybiAoPFNwYWNlSXRlbVxuICAgICAgICAgICAgICAgIGtleT17cy5yb29tSWR9XG4gICAgICAgICAgICAgICAgYWN0aXZlU3BhY2VzPXthY3RpdmVTcGFjZXN9XG4gICAgICAgICAgICAgICAgc3BhY2U9e3N9XG4gICAgICAgICAgICAgICAgaXNOZXN0ZWQ9e2lzTmVzdGVkfVxuICAgICAgICAgICAgICAgIHBhcmVudHM9e3BhcmVudHN9XG4gICAgICAgICAgICAvPik7XG4gICAgICAgIH0pIH1cbiAgICA8L3VsPjtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFNwYWNlVHJlZUxldmVsO1xuIl19