"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.createSpace = exports.SpaceFeedbackPrompt = exports.SpaceCreateForm = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _event = require("matrix-js-sdk/src/@types/event");

var _partials = require("matrix-js-sdk/src/@types/partials");

var _languageHandler = require("../../../languageHandler");

var _AccessibleTooltipButton = _interopRequireDefault(require("../elements/AccessibleTooltipButton"));

var _ContextMenu = _interopRequireWildcard(require("../../structures/ContextMenu"));

var _createRoom = _interopRequireDefault(require("../../../createRoom"));

var _MatrixClientContext = _interopRequireDefault(require("../../../contexts/MatrixClientContext"));

var _SpaceBasicSettings = require("./SpaceBasicSettings");

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

var _Field = _interopRequireDefault(require("../elements/Field"));

var _Validation = _interopRequireDefault(require("../elements/Validation"));

var _RoomAliasField = _interopRequireDefault(require("../elements/RoomAliasField"));

var _SdkConfig = _interopRequireDefault(require("../../../SdkConfig"));

var _Modal = _interopRequireDefault(require("../../../Modal"));

var _GenericFeatureFeedbackDialog = _interopRequireDefault(require("../dialogs/GenericFeatureFeedbackDialog"));

var _SettingsStore = _interopRequireDefault(require("../../../settings/SettingsStore"));

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _actions = require("../../../dispatcher/actions");

var _UserSettingsDialog = require("../dialogs/UserSettingsDialog");

var _Keyboard = require("../../../Keyboard");

var _logger = require("matrix-js-sdk/src/logger");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const createSpace = async (name, isPublic, alias, topic, avatar, createOpts = {}, otherOpts = {}) => {
  return (0, _createRoom.default)(_objectSpread({
    createOpts: _objectSpread({
      name,
      preset: isPublic ? _partials.Preset.PublicChat : _partials.Preset.PrivateChat,
      power_level_content_override: {
        // Only allow Admins to write to the timeline to prevent hidden sync spam
        events_default: 100,
        invite: isPublic ? 0 : 50
      },
      room_alias_name: isPublic && alias ? alias.substr(1, alias.indexOf(":") - 1) : undefined,
      topic
    }, createOpts),
    avatar,
    roomType: _event.RoomType.Space,
    historyVisibility: isPublic ? _partials.HistoryVisibility.WorldReadable : _partials.HistoryVisibility.Invited,
    spinner: false,
    encryption: false,
    andView: true,
    inlineErrors: true
  }, otherOpts));
};

exports.createSpace = createSpace;

const SpaceCreateMenuType = ({
  title,
  description,
  className,
  onClick
}) => {
  return /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
    className: (0, _classnames.default)("mx_SpaceCreateMenuType", className),
    onClick: onClick
  }, /*#__PURE__*/_react.default.createElement("h3", null, title), /*#__PURE__*/_react.default.createElement("span", null, description));
};

var Visibility;

(function (Visibility) {
  Visibility[Visibility["Public"] = 0] = "Public";
  Visibility[Visibility["Private"] = 1] = "Private";
})(Visibility || (Visibility = {}));

const spaceNameValidator = (0, _Validation.default)({
  rules: [{
    key: "required",
    test: async ({
      value
    }) => !!value,
    invalid: () => (0, _languageHandler._t)("Please enter a name for the space")
  }]
});

const nameToLocalpart = name => {
  return name.trim().toLowerCase().replace(/\s+/g, "-").replace(/[^a-z0-9_-]+/gi, "");
}; // XXX: Temporary for the Spaces release only


const SpaceFeedbackPrompt = ({
  onClick
}) => {
  if (!_SdkConfig.default.get().bug_report_endpoint_url) return null;
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_SpaceFeedbackPrompt"
  }, /*#__PURE__*/_react.default.createElement("span", {
    className: "mx_SpaceFeedbackPrompt_text"
  }, (0, _languageHandler._t)("Spaces are a new feature.")), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
    kind: "link",
    onClick: () => {
      if (onClick) onClick();

      _Modal.default.createTrackedDialog("Spaces Feedback", "", _GenericFeatureFeedbackDialog.default, {
        title: (0, _languageHandler._t)("Spaces feedback"),
        subheading: (0, _languageHandler._t)("Thank you for trying Spaces. " + "Your feedback will help inform the next versions."),
        rageshakeLabel: "spaces-feedback",
        rageshakeData: Object.fromEntries(["Spaces.allRoomsInHome", "Spaces.enabledMetaSpaces"].map(k => [k, _SettingsStore.default.getValue(k)]))
      });
    }
  }, (0, _languageHandler._t)("Give feedback.")));
};

exports.SpaceFeedbackPrompt = SpaceFeedbackPrompt;

const SpaceCreateForm = ({
  busy,
  onSubmit,
  avatarUrl,
  setAvatar,
  name,
  setName,
  nameFieldRef,
  alias,
  aliasFieldRef,
  setAlias,
  showAliasField,
  topic,
  setTopic,
  children
}) => {
  const cli = (0, _react.useContext)(_MatrixClientContext.default);
  const domain = cli.getDomain();

  const onKeyDown = ev => {
    if (ev.key === _Keyboard.Key.ENTER) {
      onSubmit(ev);
    }
  };

  return /*#__PURE__*/_react.default.createElement("form", {
    className: "mx_SpaceBasicSettings",
    onSubmit: onSubmit
  }, /*#__PURE__*/_react.default.createElement(_SpaceBasicSettings.SpaceAvatar, {
    avatarUrl: avatarUrl,
    setAvatar: setAvatar,
    avatarDisabled: busy
  }), /*#__PURE__*/_react.default.createElement(_Field.default, {
    name: "spaceName",
    label: (0, _languageHandler._t)("Name"),
    autoFocus: true,
    value: name,
    onChange: ev => {
      const newName = ev.target.value;

      if (!alias || alias === `#${nameToLocalpart(name)}:${domain}`) {
        var _aliasFieldRef$curren;

        setAlias(`#${nameToLocalpart(newName)}:${domain}`);
        (_aliasFieldRef$curren = aliasFieldRef.current) === null || _aliasFieldRef$curren === void 0 ? void 0 : _aliasFieldRef$curren.validate({
          allowEmpty: true
        });
      }

      setName(newName);
    },
    onKeyDown: onKeyDown,
    ref: nameFieldRef,
    onValidate: spaceNameValidator,
    disabled: busy,
    autoComplete: "off"
  }), showAliasField ? /*#__PURE__*/_react.default.createElement(_RoomAliasField.default, {
    ref: aliasFieldRef,
    onChange: setAlias,
    domain: domain,
    value: alias,
    placeholder: name ? nameToLocalpart(name) : (0, _languageHandler._t)("e.g. my-space"),
    label: (0, _languageHandler._t)("Address"),
    disabled: busy,
    onKeyDown: onKeyDown
  }) : null, /*#__PURE__*/_react.default.createElement(_Field.default, {
    name: "spaceTopic",
    element: "textarea",
    label: (0, _languageHandler._t)("Description"),
    value: topic,
    onChange: ev => setTopic(ev.target.value),
    rows: 3,
    disabled: busy
  }), children);
};

exports.SpaceCreateForm = SpaceCreateForm;

const SpaceCreateMenu = ({
  onFinished
}) => {
  const [visibility, setVisibility] = (0, _react.useState)(null);
  const [busy, setBusy] = (0, _react.useState)(false);
  const [name, setName] = (0, _react.useState)("");
  const spaceNameField = (0, _react.useRef)();
  const [alias, setAlias] = (0, _react.useState)("");
  const spaceAliasField = (0, _react.useRef)();
  const [avatar, setAvatar] = (0, _react.useState)(null);
  const [topic, setTopic] = (0, _react.useState)("");

  const onSpaceCreateClick = async e => {
    e.preventDefault();
    if (busy) return;
    setBusy(true); // require & validate the space name field

    if (!(await spaceNameField.current.validate({
      allowEmpty: false
    }))) {
      spaceNameField.current.focus();
      spaceNameField.current.validate({
        allowEmpty: false,
        focused: true
      });
      setBusy(false);
      return;
    }

    if (visibility === Visibility.Public && !(await spaceAliasField.current.validate({
      allowEmpty: false
    }))) {
      spaceAliasField.current.focus();
      spaceAliasField.current.validate({
        allowEmpty: false,
        focused: true
      });
      setBusy(false);
      return;
    }

    try {
      await createSpace(name, visibility === Visibility.Public, alias, topic, avatar);
      onFinished();
    } catch (e) {
      _logger.logger.error(e);
    }
  };

  let body;

  if (visibility === null) {
    const onCreateSpaceFromCommunityClick = () => {
      _dispatcher.default.dispatch({
        action: _actions.Action.ViewUserSettings,
        initialTabId: _UserSettingsDialog.UserTab.Preferences
      });

      onFinished();
    };

    body = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("h2", null, (0, _languageHandler._t)("Create a space")), /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Spaces are a new way to group rooms and people."), "\xA0", (0, _languageHandler._t)("What kind of Space do you want to create?"), "\xA0", (0, _languageHandler._t)("You can change this later.")), /*#__PURE__*/_react.default.createElement(SpaceCreateMenuType, {
      title: (0, _languageHandler._t)("Public"),
      description: (0, _languageHandler._t)("Open space for anyone, best for communities"),
      className: "mx_SpaceCreateMenuType_public",
      onClick: () => setVisibility(Visibility.Public)
    }), /*#__PURE__*/_react.default.createElement(SpaceCreateMenuType, {
      title: (0, _languageHandler._t)("Private"),
      description: (0, _languageHandler._t)("Invite only, best for yourself or teams"),
      className: "mx_SpaceCreateMenuType_private",
      onClick: () => setVisibility(Visibility.Private)
    }), /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("You can also make Spaces from <a>communities</a>.", {}, {
      a: sub => /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        kind: "link",
        onClick: onCreateSpaceFromCommunityClick
      }, sub)
    }), /*#__PURE__*/_react.default.createElement("br", null), (0, _languageHandler._t)("To join a space you'll need an invite.")), /*#__PURE__*/_react.default.createElement(SpaceFeedbackPrompt, {
      onClick: onFinished
    }));
  } else {
    body = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_AccessibleTooltipButton.default, {
      className: "mx_SpaceCreateMenu_back",
      onClick: () => setVisibility(null),
      title: (0, _languageHandler._t)("Go back")
    }), /*#__PURE__*/_react.default.createElement("h2", null, visibility === Visibility.Public ? (0, _languageHandler._t)("Your public space") : (0, _languageHandler._t)("Your private space")), /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Add some details to help people recognise it."), " ", (0, _languageHandler._t)("You can change these anytime.")), /*#__PURE__*/_react.default.createElement(SpaceCreateForm, {
      busy: busy,
      onSubmit: onSpaceCreateClick,
      setAvatar: setAvatar,
      name: name,
      setName: setName,
      nameFieldRef: spaceNameField,
      topic: topic,
      setTopic: setTopic,
      alias: alias,
      setAlias: setAlias,
      showAliasField: visibility === Visibility.Public,
      aliasFieldRef: spaceAliasField
    }), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      kind: "primary",
      onClick: onSpaceCreateClick,
      disabled: busy
    }, busy ? (0, _languageHandler._t)("Creating...") : (0, _languageHandler._t)("Create")));
  }

  return /*#__PURE__*/_react.default.createElement(_ContextMenu.default, {
    left: 72,
    top: 62,
    chevronOffset: 0,
    chevronFace: _ContextMenu.ChevronFace.None,
    onFinished: onFinished,
    wrapperClassName: "mx_SpaceCreateMenu_wrapper",
    managed: false
  }, body);
};

var _default = SpaceCreateMenu;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,