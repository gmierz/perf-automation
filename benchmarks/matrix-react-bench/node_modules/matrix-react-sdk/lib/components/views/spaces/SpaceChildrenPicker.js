"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _languageHandler = require("../../../languageHandler");

var _StyledRadioGroup = _interopRequireDefault(require("../elements/StyledRadioGroup"));

var _QueryMatcher = _interopRequireDefault(require("../../../autocomplete/QueryMatcher"));

var _SearchBox = _interopRequireDefault(require("../../structures/SearchBox"));

var _AutoHideScrollbar = _interopRequireDefault(require("../../structures/AutoHideScrollbar"));

var _AddExistingToSpaceDialog = require("../dialogs/AddExistingToSpaceDialog");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
Copyright 2021 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
var Target;

(function (Target) {
  Target["All"] = "All";
  Target["Specific"] = "Specific";
  Target["None"] = "None";
})(Target || (Target = {}));

const SpecificChildrenPicker = ({
  filterPlaceholder,
  rooms,
  selected,
  onChange
}) => {
  const [query, setQuery] = (0, _react.useState)("");
  const lcQuery = query.toLowerCase().trim();
  const filteredRooms = (0, _react.useMemo)(() => {
    if (!lcQuery) {
      return rooms;
    }

    const matcher = new _QueryMatcher.default(rooms, {
      keys: ["name"],
      funcs: [r => [r.getCanonicalAlias(), ...r.getAltAliases()].filter(Boolean)],
      shouldMatchWordsOnly: false
    });
    return matcher.match(lcQuery);
  }, [rooms, lcQuery]);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_SpaceChildrenPicker"
  }, /*#__PURE__*/_react.default.createElement(_SearchBox.default, {
    className: "mx_textinput_icon mx_textinput_search",
    placeholder: filterPlaceholder,
    onSearch: setQuery,
    autoFocus: true
  }), /*#__PURE__*/_react.default.createElement(_AutoHideScrollbar.default, null, filteredRooms.map(room => {
    return /*#__PURE__*/_react.default.createElement(_AddExistingToSpaceDialog.Entry, {
      key: room.roomId,
      room: room,
      checked: selected.has(room),
      onChange: checked => {
        onChange(checked, room);
      }
    });
  }), filteredRooms.length < 1 ? /*#__PURE__*/_react.default.createElement("span", {
    className: "mx_SpaceChildrenPicker_noResults"
  }, (0, _languageHandler._t)("No results")) : undefined));
};

const SpaceChildrenPicker = ({
  space,
  spaceChildren,
  selected,
  onChange,
  noneLabel,
  allLabel,
  specificLabel
}) => {
  const [state, setState] = (0, _react.useState)(noneLabel ? Target.None : Target.All);
  (0, _react.useEffect)(() => {
    if (state === Target.All) {
      onChange(spaceChildren);
    } else {
      onChange([]);
    }
  }, [onChange, state, spaceChildren]);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_SpaceChildrenPicker"
  }, /*#__PURE__*/_react.default.createElement(_StyledRadioGroup.default, {
    name: "roomsToLeave",
    value: state,
    onChange: setState,
    definitions: [{
      value: Target.None,
      label: noneLabel
    }, {
      value: Target.All,
      label: allLabel
    }, {
      value: Target.Specific,
      label: specificLabel
    }].filter(d => d.label)
  })), state === Target.Specific && /*#__PURE__*/_react.default.createElement(SpecificChildrenPicker, {
    filterPlaceholder: (0, _languageHandler._t)("Search %(spaceName)s", {
      spaceName: space.name
    }),
    rooms: spaceChildren,
    selected: selected,
    onChange: (isSelected, room) => {
      if (isSelected) {
        onChange([room, ...selected]);
      } else {
        onChange([...selected].filter(r => r !== room));
      }
    }
  }));
};

var _default = SpaceChildrenPicker;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,