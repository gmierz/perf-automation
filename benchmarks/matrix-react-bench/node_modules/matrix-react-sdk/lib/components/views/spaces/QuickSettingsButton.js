"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireWildcard(require("react"));

var _languageHandler = require("../../../languageHandler");

var _AccessibleTooltipButton = _interopRequireDefault(require("../elements/AccessibleTooltipButton"));

var _ContextMenu = _interopRequireWildcard(require("../../structures/ContextMenu"));

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

var _StyledCheckbox = _interopRequireDefault(require("../elements/StyledCheckbox"));

var _spaces = require("../../../stores/spaces");

var _useSettings = require("../../../hooks/useSettings");

var _SidebarUserSettingsTab = require("../settings/tabs/user/SidebarUserSettingsTab");

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _actions = require("../../../dispatcher/actions");

var _UserSettingsDialog = require("../dialogs/UserSettingsDialog");

var _theme = require("../../../theme");

var _Dropdown = _interopRequireDefault(require("../elements/Dropdown"));

var _ThemeChoicePanel = _interopRequireDefault(require("../settings/ThemeChoicePanel"));

var _SettingsStore = _interopRequireDefault(require("../../../settings/SettingsStore"));

var _SettingLevel = require("../../../settings/SettingLevel");

var _classnames = _interopRequireDefault(require("classnames"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
Copyright 2021 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const QuickSettingsButton = ({
  isPanelCollapsed = false
}) => {
  const orderedThemes = (0, _react.useMemo)(_theme.getOrderedThemes, []);
  const [menuDisplayed, handle, openMenu, closeMenu] = (0, _ContextMenu.useContextMenu)();
  const {
    [_spaces.MetaSpace.Favourites]: favouritesEnabled,
    [_spaces.MetaSpace.People]: peopleEnabled
  } = (0, _useSettings.useSettingValue)("Spaces.enabledMetaSpaces");
  let contextMenu;

  if (menuDisplayed) {
    const themeState = _ThemeChoicePanel.default.calculateThemeState();

    const nonHighContrast = (0, _theme.findNonHighContrastTheme)(themeState.theme);
    const theme = nonHighContrast ? nonHighContrast : themeState.theme;
    contextMenu = /*#__PURE__*/_react.default.createElement(_ContextMenu.default, (0, _extends2.default)({}, (0, _ContextMenu.alwaysAboveRightOf)(handle.current.getBoundingClientRect(), _ContextMenu.ChevronFace.None, 16), {
      wrapperClassName: "mx_QuickSettingsButton_ContextMenuWrapper",
      onFinished: closeMenu,
      managed: false,
      focusLock: true
    }), /*#__PURE__*/_react.default.createElement("h2", null, (0, _languageHandler._t)("Quick settings")), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      onClick: () => {
        closeMenu();

        _dispatcher.default.dispatch({
          action: _actions.Action.ViewUserSettings,
          initialTabId: _UserSettingsDialog.UserTab.Sidebar
        });
      },
      kind: "primary_outline"
    }, (0, _languageHandler._t)("All settings")), /*#__PURE__*/_react.default.createElement("h4", {
      className: "mx_QuickSettingsButton_pinToSidebarHeading"
    }, (0, _languageHandler._t)("Pin to sidebar")), /*#__PURE__*/_react.default.createElement(_StyledCheckbox.default, {
      className: "mx_QuickSettingsButton_favouritesCheckbox",
      checked: !!favouritesEnabled,
      onChange: (0, _SidebarUserSettingsTab.onMetaSpaceChangeFactory)(_spaces.MetaSpace.Favourites)
    }, (0, _languageHandler._t)("Favourites")), /*#__PURE__*/_react.default.createElement(_StyledCheckbox.default, {
      className: "mx_QuickSettingsButton_peopleCheckbox",
      checked: !!peopleEnabled,
      onChange: (0, _SidebarUserSettingsTab.onMetaSpaceChangeFactory)(_spaces.MetaSpace.People)
    }, (0, _languageHandler._t)("People")), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      className: "mx_QuickSettingsButton_moreOptionsButton",
      onClick: () => {
        closeMenu();

        _dispatcher.default.dispatch({
          action: _actions.Action.ViewUserSettings,
          initialTabId: _UserSettingsDialog.UserTab.Sidebar
        });
      }
    }, (0, _languageHandler._t)("More options")), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_QuickSettingsButton_themePicker"
    }, /*#__PURE__*/_react.default.createElement("h4", null, (0, _languageHandler._t)("Theme")), /*#__PURE__*/_react.default.createElement(_Dropdown.default, {
      id: "mx_QuickSettingsButton_themePickerDropdown",
      onOptionChange: async newTheme => {
        // XXX: mostly copied from ThemeChoicePanel
        // doing getValue in the .catch will still return the value we failed to set,
        // so remember what the value was before we tried to set it so we can revert
        // const oldTheme: string = SettingsStore.getValue("theme");
        _SettingsStore.default.setValue("theme", null, _SettingLevel.SettingLevel.DEVICE, newTheme).catch(() => {
          _dispatcher.default.dispatch({
            action: _actions.Action.RecheckTheme
          });
        }); // The settings watcher doesn't fire until the echo comes back from the
        // server, so to make the theme change immediately we need to manually
        // do the dispatch now
        // XXX: The local echoed value appears to be unreliable, in particular
        // when settings custom themes(!) so adding forceTheme to override
        // the value from settings.


        _dispatcher.default.dispatch({
          action: _actions.Action.RecheckTheme,
          forceTheme: newTheme
        });

        closeMenu();
      },
      value: theme,
      label: (0, _languageHandler._t)("Space selection")
    }, orderedThemes.map(theme => /*#__PURE__*/_react.default.createElement("div", {
      key: theme.id
    }, theme.name)))));
  }

  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_AccessibleTooltipButton.default, {
    className: (0, _classnames.default)("mx_QuickSettingsButton", {
      expanded: !isPanelCollapsed
    }),
    onClick: openMenu,
    title: (0, _languageHandler._t)("Quick settings"),
    inputRef: handle,
    forceHide: !isPanelCollapsed
  }, !isPanelCollapsed ? (0, _languageHandler._t)("Settings") : null), contextMenu);
};

var _default = QuickSettingsButton;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,