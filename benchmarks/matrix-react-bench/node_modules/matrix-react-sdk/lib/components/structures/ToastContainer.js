"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var React = _interopRequireWildcard(require("react"));

var _ToastStore = _interopRequireDefault(require("../../stores/ToastStore"));

var _classnames = _interopRequireDefault(require("classnames"));

var _replaceableComponent = require("../../utils/replaceableComponent");

var _dec, _class;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

let ToastContainer = (_dec = (0, _replaceableComponent.replaceableComponent)("structures.ToastContainer"), _dec(_class = class ToastContainer extends React.Component {
  constructor(props, context) {
    super(props, context);
    (0, _defineProperty2.default)(this, "onToastStoreUpdate", () => {
      this.setState({
        toasts: _ToastStore.default.sharedInstance().getToasts(),
        countSeen: _ToastStore.default.sharedInstance().getCountSeen()
      });
    });
    this.state = {
      toasts: _ToastStore.default.sharedInstance().getToasts(),
      countSeen: _ToastStore.default.sharedInstance().getCountSeen()
    }; // Start listening here rather than in componentDidMount because
    // toasts may dismiss themselves in their didMount if they find
    // they're already irrelevant by the time they're mounted, and
    // our own componentDidMount is too late.

    _ToastStore.default.sharedInstance().on('update', this.onToastStoreUpdate);
  }

  componentWillUnmount() {
    _ToastStore.default.sharedInstance().removeListener('update', this.onToastStoreUpdate);
  }

  render() {
    const totalCount = this.state.toasts.length;
    const isStacked = totalCount > 1;
    let toast;
    let containerClasses;

    if (totalCount !== 0) {
      const topToast = this.state.toasts[0];
      const {
        title,
        icon,
        key,
        component,
        className,
        bodyClassName,
        props
      } = topToast;
      const bodyClasses = (0, _classnames.default)("mx_Toast_body", bodyClassName);
      const toastClasses = (0, _classnames.default)("mx_Toast_toast", className, {
        "mx_Toast_hasIcon": icon,
        [`mx_Toast_icon_${icon}`]: icon
      });
      const toastProps = Object.assign({}, props, {
        key,
        toastKey: key
      });
      const content = /*#__PURE__*/React.createElement(component, toastProps);
      let countIndicator;

      if (title && isStacked || this.state.countSeen > 0) {
        countIndicator = ` (${this.state.countSeen + 1}/${this.state.countSeen + totalCount})`;
      }

      let titleElement;

      if (title) {
        titleElement = /*#__PURE__*/React.createElement("div", {
          className: "mx_Toast_title"
        }, /*#__PURE__*/React.createElement("h2", null, title), /*#__PURE__*/React.createElement("span", null, countIndicator));
      }

      toast = /*#__PURE__*/React.createElement("div", {
        className: toastClasses
      }, titleElement, /*#__PURE__*/React.createElement("div", {
        className: bodyClasses
      }, content));
      containerClasses = (0, _classnames.default)("mx_ToastContainer", {
        "mx_ToastContainer_stacked": isStacked
      });
    }

    return toast ? /*#__PURE__*/React.createElement("div", {
      className: containerClasses,
      role: "alert"
    }, toast) : null;
  }

}) || _class);
exports.default = ToastContainer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,