"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var React = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _dispatcher = _interopRequireDefault(require("../../dispatcher/dispatcher"));

var _languageHandler = require("../../languageHandler");

var _AccessibleButton = _interopRequireDefault(require("../views/elements/AccessibleButton"));

var _actions = require("../../dispatcher/actions");

var _RoomListStore = _interopRequireDefault(require("../../stores/room-list/RoomListStore"));

var _NameFilterCondition = require("../../stores/room-list/filters/NameFilterCondition");

var _KeyBindingsManager = require("../../KeyBindingsManager");

var _replaceableComponent = require("../../utils/replaceableComponent");

var _SpaceStore = _interopRequireDefault(require("../../stores/spaces/SpaceStore"));

var _spaces = require("../../stores/spaces");

var _dec, _class;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

let RoomSearch = (_dec = (0, _replaceableComponent.replaceableComponent)("structures.RoomSearch"), _dec(_class = class RoomSearch extends React.PureComponent {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "dispatcherRef", void 0);
    (0, _defineProperty2.default)(this, "inputRef", /*#__PURE__*/(0, React.createRef)());
    (0, _defineProperty2.default)(this, "searchFilter", new _NameFilterCondition.NameFilterCondition());
    (0, _defineProperty2.default)(this, "onSpaces", spaces => {
      this.setState({
        inSpaces: spaces.length > 0
      });
    });
    (0, _defineProperty2.default)(this, "onAction", payload => {
      if (payload.action === _actions.Action.ViewRoom && payload.clear_search) {
        this.clearInput();
      } else if (payload.action === 'focus_room_filter' && this.inputRef.current) {
        this.inputRef.current.focus();
      }
    });
    (0, _defineProperty2.default)(this, "clearInput", () => {
      if (!this.inputRef.current) return;
      this.inputRef.current.value = "";
      this.onChange();
    });
    (0, _defineProperty2.default)(this, "openSearch", () => {
      _dispatcher.default.dispatch({
        action: "show_left_panel"
      });

      _dispatcher.default.dispatch({
        action: "focus_room_filter"
      });
    });
    (0, _defineProperty2.default)(this, "onChange", () => {
      if (!this.inputRef.current) return;
      this.setState({
        query: this.inputRef.current.value
      });
    });
    (0, _defineProperty2.default)(this, "onFocus", ev => {
      this.setState({
        focused: true
      });
      ev.target.select();
    });
    (0, _defineProperty2.default)(this, "onBlur", ev => {
      this.setState({
        focused: false
      });
    });
    (0, _defineProperty2.default)(this, "onKeyDown", ev => {
      const action = (0, _KeyBindingsManager.getKeyBindingsManager)().getRoomListAction(ev);

      switch (action) {
        case _KeyBindingsManager.RoomListAction.ClearSearch:
          this.clearInput();

          _dispatcher.default.fire(_actions.Action.FocusSendMessageComposer);

          break;

        case _KeyBindingsManager.RoomListAction.SelectRoom:
          {
            const shouldClear = this.props.onSelectRoom();

            if (shouldClear) {
              // wrap in set immediate to delay it so that we don't clear the filter & then change room
              setImmediate(() => {
                this.clearInput();
              });
            }

            break;
          }
      }
    });
    this.state = {
      query: "",
      focused: false,
      inSpaces: false
    };
    this.dispatcherRef = _dispatcher.default.register(this.onAction); // clear filter when changing spaces, in future we may wish to maintain a filter per-space

    _SpaceStore.default.instance.on(_spaces.UPDATE_SELECTED_SPACE, this.clearInput);

    _SpaceStore.default.instance.on(_spaces.UPDATE_TOP_LEVEL_SPACES, this.onSpaces);
  }

  componentDidUpdate(prevProps, prevState) {
    if (prevState.query !== this.state.query) {
      const hadSearch = !!this.searchFilter.search.trim();
      const haveSearch = !!this.state.query.trim();
      this.searchFilter.search = this.state.query;

      if (!hadSearch && haveSearch) {
        // started a new filter - add the condition
        _RoomListStore.default.instance.addFilter(this.searchFilter);
      } else if (hadSearch && !haveSearch) {
        // cleared a filter - remove the condition
        _RoomListStore.default.instance.removeFilter(this.searchFilter);
      } // else the filter hasn't changed enough for us to care here

    }
  }

  componentWillUnmount() {
    _dispatcher.default.unregister(this.dispatcherRef);

    _SpaceStore.default.instance.off(_spaces.UPDATE_SELECTED_SPACE, this.clearInput);

    _SpaceStore.default.instance.off(_spaces.UPDATE_TOP_LEVEL_SPACES, this.onSpaces);
  }

  focus() {
    var _this$inputRef$curren;

    (_this$inputRef$curren = this.inputRef.current) === null || _this$inputRef$curren === void 0 ? void 0 : _this$inputRef$curren.focus();
  }

  render() {
    const classes = (0, _classnames.default)({
      'mx_RoomSearch': true,
      'mx_RoomSearch_hasQuery': this.state.query,
      'mx_RoomSearch_focused': this.state.focused,
      'mx_RoomSearch_minimized': this.props.isMinimized
    });
    const inputClasses = (0, _classnames.default)({
      'mx_RoomSearch_input': true,
      'mx_RoomSearch_inputExpanded': this.state.query || this.state.focused
    });
    let placeholder = (0, _languageHandler._t)("Filter");

    if (this.state.inSpaces) {
      placeholder = (0, _languageHandler._t)("Filter all spaces");
    }

    let icon = /*#__PURE__*/React.createElement("div", {
      className: "mx_RoomSearch_icon"
    });
    let input = /*#__PURE__*/React.createElement("input", {
      type: "text",
      ref: this.inputRef,
      className: inputClasses,
      value: this.state.query,
      onFocus: this.onFocus,
      onBlur: this.onBlur,
      onChange: this.onChange,
      onKeyDown: this.onKeyDown,
      placeholder: placeholder,
      autoComplete: "off"
    });
    let clearButton = /*#__PURE__*/React.createElement(_AccessibleButton.default, {
      tabIndex: -1,
      title: (0, _languageHandler._t)("Clear filter"),
      className: "mx_RoomSearch_clearButton",
      onClick: this.clearInput
    });

    if (this.props.isMinimized) {
      icon = /*#__PURE__*/React.createElement(_AccessibleButton.default, {
        title: (0, _languageHandler._t)("Filter rooms and people"),
        className: "mx_RoomSearch_icon mx_RoomSearch_minimizedHandle",
        onClick: this.openSearch
      });
      input = null;
      clearButton = null;
    }

    return /*#__PURE__*/React.createElement("div", {
      className: classes
    }, icon, input, clearButton);
  }

  appendChar(char) {
    this.setState({
      query: this.state.query + char
    });
  }

  backspace() {
    this.setState({
      query: this.state.query.substring(0, this.state.query.length - 1)
    });
  }

}) || _class);
exports.default = RoomSearch;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,