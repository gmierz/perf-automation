"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Views = void 0;
exports.isLoggedIn = isLoggedIn;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _matrix = require("matrix-js-sdk/src/matrix");

var _errors = require("matrix-js-sdk/src/errors");

var _roomMember = require("matrix-js-sdk/src/models/room-member");

var _utils = require("matrix-js-sdk/src/utils");

require("focus-visible");

require("what-input");

var _Analytics = _interopRequireDefault(require("../../Analytics"));

var _CountlyAnalytics = _interopRequireDefault(require("../../CountlyAnalytics"));

var _DecryptionFailureTracker = require("../../DecryptionFailureTracker");

var _MatrixClientPeg = require("../../MatrixClientPeg");

var _PlatformPeg = _interopRequireDefault(require("../../PlatformPeg"));

var _SdkConfig = _interopRequireDefault(require("../../SdkConfig"));

var _dispatcher = _interopRequireDefault(require("../../dispatcher/dispatcher"));

var _Notifier = _interopRequireDefault(require("../../Notifier"));

var _Modal = _interopRequireDefault(require("../../Modal"));

var _RoomInvite = require("../../RoomInvite");

var Rooms = _interopRequireWildcard(require("../../Rooms"));

var _linkifyMatrix = _interopRequireDefault(require("../../linkify-matrix"));

var Lifecycle = _interopRequireWildcard(require("../../Lifecycle"));

require("../../stores/LifecycleStore");

var _PageTypes = _interopRequireDefault(require("../../PageTypes"));

var _createRoom = _interopRequireDefault(require("../../createRoom"));

var _languageHandler = require("../../languageHandler");

var _SettingsStore = _interopRequireDefault(require("../../settings/SettingsStore"));

var _ThemeController = _interopRequireDefault(require("../../settings/controllers/ThemeController"));

var _Registration = require("../../Registration");

var _ErrorUtils = require("../../utils/ErrorUtils");

var _ResizeNotifier = _interopRequireDefault(require("../../utils/ResizeNotifier"));

var _AutoDiscoveryUtils = _interopRequireDefault(require("../../utils/AutoDiscoveryUtils"));

var _DMRoomMap = _interopRequireDefault(require("../../utils/DMRoomMap"));

var _ThemeWatcher = _interopRequireDefault(require("../../settings/watchers/ThemeWatcher"));

var _FontWatcher = require("../../settings/watchers/FontWatcher");

var _RoomAliasCache = require("../../RoomAliasCache");

var _ToastStore = _interopRequireDefault(require("../../stores/ToastStore"));

var StorageManager = _interopRequireWildcard(require("../../utils/StorageManager"));

var _actions = require("../../dispatcher/actions");

var _AnalyticsToast = require("../../toasts/AnalyticsToast");

var _DesktopNotificationsToast = require("../../toasts/DesktopNotificationsToast");

var _ErrorDialog = _interopRequireDefault(require("../views/dialogs/ErrorDialog"));

var _RoomNotificationStateStore = require("../../stores/notifications/RoomNotificationStateStore");

var _SettingLevel = require("../../settings/SettingLevel");

var _membership = require("../../utils/membership");

var _CreateCommunityPrototypeDialog = _interopRequireDefault(require("../views/dialogs/CreateCommunityPrototypeDialog"));

var _ThreepidInviteStore = _interopRequireDefault(require("../../stores/ThreepidInviteStore"));

var _UIFeature = require("../../settings/UIFeature");

var _CommunityPrototypeStore = require("../../stores/CommunityPrototypeStore");

var _DialPadModal = _interopRequireDefault(require("../views/voip/DialPadModal"));

var _MobileGuideToast = require("../../toasts/MobileGuideToast");

var _pages = require("../../utils/pages");

var _SpaceStore = _interopRequireDefault(require("../../stores/spaces/SpaceStore"));

var _replaceableComponent = require("../../utils/replaceableComponent");

var _RoomListStore = _interopRequireDefault(require("../../stores/room-list/RoomListStore"));

var _models = require("../../stores/room-list/models");

var _Security = _interopRequireDefault(require("../../customisations/Security"));

var _Spinner = _interopRequireDefault(require("../views/elements/Spinner"));

var _QuestionDialog = _interopRequireDefault(require("../views/dialogs/QuestionDialog"));

var _UserSettingsDialog = _interopRequireDefault(require("../views/dialogs/UserSettingsDialog"));

var _CreateGroupDialog = _interopRequireDefault(require("../views/dialogs/CreateGroupDialog"));

var _CreateRoomDialog = _interopRequireDefault(require("../views/dialogs/CreateRoomDialog"));

var _RoomDirectory = _interopRequireDefault(require("./RoomDirectory"));

var _KeySignatureUploadFailedDialog = _interopRequireDefault(require("../views/dialogs/KeySignatureUploadFailedDialog"));

var _IncomingSasDialog = _interopRequireDefault(require("../views/dialogs/IncomingSasDialog"));

var _CompleteSecurity = _interopRequireDefault(require("./auth/CompleteSecurity"));

var _LoggedInView = _interopRequireDefault(require("./LoggedInView"));

var _Welcome = _interopRequireDefault(require("../views/auth/Welcome"));

var _ForgotPassword = _interopRequireDefault(require("./auth/ForgotPassword"));

var _E2eSetup = _interopRequireDefault(require("./auth/E2eSetup"));

var _Registration2 = _interopRequireDefault(require("./auth/Registration"));

var _Login = _interopRequireDefault(require("./auth/Login"));

var _ErrorBoundary = _interopRequireDefault(require("../views/elements/ErrorBoundary"));

var _VerificationRequestToast = _interopRequireDefault(require("../views/toasts/VerificationRequestToast"));

var _performance = _interopRequireWildcard(require("../../performance"));

var _UIStore = _interopRequireWildcard(require("../../stores/UIStore"));

var _SoftLogout = _interopRequireDefault(require("./auth/SoftLogout"));

var _Permalinks = require("../../utils/permalinks/Permalinks");

var _strings = require("../../utils/strings");

var _PosthogAnalytics = require("../../PosthogAnalytics");

var _sentry = require("../../sentry");

var _logger = require("matrix-js-sdk/src/logger");

var _space = require("../../utils/space");

var _dec, _class, _class2, _temp;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/** constants for MatrixChat.state.view */
let Views;
exports.Views = Views;

(function (Views) {
  Views[Views["LOADING"] = 0] = "LOADING";
  Views[Views["WELCOME"] = 1] = "WELCOME";
  Views[Views["LOGIN"] = 2] = "LOGIN";
  Views[Views["REGISTER"] = 3] = "REGISTER";
  Views[Views["FORGOT_PASSWORD"] = 4] = "FORGOT_PASSWORD";
  Views[Views["COMPLETE_SECURITY"] = 5] = "COMPLETE_SECURITY";
  Views[Views["E2E_SETUP"] = 6] = "E2E_SETUP";
  Views[Views["LOGGED_IN"] = 7] = "LOGGED_IN";
  Views[Views["SOFT_LOGOUT"] = 8] = "SOFT_LOGOUT";
})(Views || (exports.Views = Views = {}));

const AUTH_SCREENS = ["register", "login", "forgot_password", "start_sso", "start_cas", "welcome"]; // Actions that are redirected through the onboarding process prior to being
// re-dispatched. NOTE: some actions are non-trivial and would require
// re-factoring to be included in this list in future.

const ONBOARDING_FLOW_STARTERS = [_actions.Action.ViewUserSettings, 'view_create_chat', 'view_create_room', 'view_create_group'];
let MatrixChat = (_dec = (0, _replaceableComponent.replaceableComponent)("structures.MatrixChat"), _dec(_class = (_temp = _class2 = class MatrixChat extends _react.default.PureComponent {
  constructor(props, context) {
    super(props, context);
    (0, _defineProperty2.default)(this, "firstSyncComplete", void 0);
    (0, _defineProperty2.default)(this, "firstSyncPromise", void 0);
    (0, _defineProperty2.default)(this, "screenAfterLogin", void 0);
    (0, _defineProperty2.default)(this, "pageChanging", void 0);
    (0, _defineProperty2.default)(this, "tokenLogin", void 0);
    (0, _defineProperty2.default)(this, "accountPassword", void 0);
    (0, _defineProperty2.default)(this, "accountPasswordTimer", void 0);
    (0, _defineProperty2.default)(this, "focusComposer", void 0);
    (0, _defineProperty2.default)(this, "subTitleStatus", void 0);
    (0, _defineProperty2.default)(this, "prevWindowWidth", void 0);
    (0, _defineProperty2.default)(this, "loggedInView", void 0);
    (0, _defineProperty2.default)(this, "dispatcherRef", void 0);
    (0, _defineProperty2.default)(this, "themeWatcher", void 0);
    (0, _defineProperty2.default)(this, "fontWatcher", void 0);
    (0, _defineProperty2.default)(this, "onAction", payload => {
      // console.log(`MatrixClientPeg.onAction: ${payload.action}`);
      // Start the onboarding process for certain actions
      if (_MatrixClientPeg.MatrixClientPeg.get() && _MatrixClientPeg.MatrixClientPeg.get().isGuest() && ONBOARDING_FLOW_STARTERS.includes(payload.action)) {
        // This will cause `payload` to be dispatched later, once a
        // sync has reached the "prepared" state. Setting a matrix ID
        // will cause a full login and sync and finally the deferred
        // action will be dispatched.
        _dispatcher.default.dispatch({
          action: 'do_after_sync_prepared',
          deferred_action: payload
        });

        _dispatcher.default.dispatch({
          action: 'require_registration'
        });

        return;
      }

      switch (payload.action) {
        case 'MatrixActions.accountData':
          // XXX: This is a collection of several hacks to solve a minor problem. We want to
          // update our local state when the identity server changes, but don't want to put that in
          // the js-sdk as we'd be then dictating how all consumers need to behave. However,
          // this component is already bloated and we probably don't want this tiny logic in
          // here, but there's no better place in the react-sdk for it. Additionally, we're
          // abusing the MatrixActionCreator stuff to avoid errors on dispatches.
          if (payload.event_type === 'm.identity_server') {
            const fullUrl = payload.event_content ? payload.event_content['base_url'] : null;

            if (!fullUrl) {
              _MatrixClientPeg.MatrixClientPeg.get().setIdentityServerUrl(null);

              localStorage.removeItem("mx_is_access_token");
              localStorage.removeItem("mx_is_url");
            } else {
              _MatrixClientPeg.MatrixClientPeg.get().setIdentityServerUrl(fullUrl);

              localStorage.removeItem("mx_is_access_token"); // clear token

              localStorage.setItem("mx_is_url", fullUrl); // XXX: Do we still need this?
            } // redispatch the change with a more specific action


            _dispatcher.default.dispatch({
              action: 'id_server_changed'
            });
          }

          break;

        case 'logout':
          _dispatcher.default.dispatch({
            action: "hangup_all"
          });

          Lifecycle.logout();
          break;

        case 'require_registration':
          (0, _Registration.startAnyRegistrationFlow)(payload);
          break;

        case 'start_registration':
          if (Lifecycle.isSoftLogout()) {
            this.onSoftLogout();
            break;
          } // This starts the full registration flow


          if (payload.screenAfterLogin) {
            this.screenAfterLogin = payload.screenAfterLogin;
          }

          this.startRegistration(payload.params || {});
          break;

        case 'start_login':
          if (Lifecycle.isSoftLogout()) {
            this.onSoftLogout();
            break;
          }

          if (payload.screenAfterLogin) {
            this.screenAfterLogin = payload.screenAfterLogin;
          }

          this.viewLogin();
          break;

        case 'start_password_recovery':
          this.setStateForNewView({
            view: Views.FORGOT_PASSWORD
          });
          this.notifyNewScreen('forgot_password');
          break;

        case 'start_chat':
          (0, _createRoom.default)({
            dmUserId: payload.user_id
          });
          break;

        case 'leave_room':
          this.leaveRoom(payload.room_id);
          break;

        case 'forget_room':
          this.forgetRoom(payload.room_id);
          break;

        case 'copy_room':
          this.copyRoom(payload.room_id);
          break;

        case 'reject_invite':
          _Modal.default.createTrackedDialog('Reject invitation', '', _QuestionDialog.default, {
            title: (0, _languageHandler._t)('Reject invitation'),
            description: (0, _languageHandler._t)('Are you sure you want to reject the invitation?'),
            onFinished: confirm => {
              if (confirm) {
                // FIXME: controller shouldn't be loading a view :(
                const modal = _Modal.default.createDialog(_Spinner.default, null, 'mx_Dialog_spinner');

                _MatrixClientPeg.MatrixClientPeg.get().leave(payload.room_id).then(() => {
                  modal.close();

                  if (this.state.currentRoomId === payload.room_id) {
                    _dispatcher.default.dispatch({
                      action: 'view_home_page'
                    });
                  }
                }, err => {
                  modal.close();

                  _Modal.default.createTrackedDialog('Failed to reject invitation', '', _ErrorDialog.default, {
                    title: (0, _languageHandler._t)('Failed to reject invitation'),
                    description: err.toString()
                  });
                });
              }
            }
          });

          break;

        case 'view_user_info':
          this.viewUser(payload.userId, payload.subAction);
          break;

        case _actions.Action.ViewRoom:
          {
            // Takes either a room ID or room alias: if switching to a room the client is already
            // known to be in (eg. user clicks on a room in the recents panel), supply the ID
            // If the user is clicking on a room in the context of the alias being presented
            // to them, supply the room alias. If both are supplied, the room ID will be ignored.
            const promise = this.viewRoom(payload);

            if (payload.deferred_action) {
              promise.then(() => {
                _dispatcher.default.dispatch(payload.deferred_action);
              });
            }

            break;
          }

        case _actions.Action.ViewUserSettings:
          {
            const tabPayload = payload;

            _Modal.default.createTrackedDialog('User settings', '', _UserSettingsDialog.default, {
              initialTabId: tabPayload.initialTabId
            },
            /*className=*/
            null,
            /*isPriority=*/
            false,
            /*isStatic=*/
            true); // View the welcome or home page if we need something to look at


            this.viewSomethingBehindModal();
            break;
          }

        case 'view_create_room':
          this.createRoom(payload.public, payload.defaultName);
          break;

        case 'view_create_group':
          {
            const prototype = _SettingsStore.default.getValue("feature_communities_v2_prototypes");

            _Modal.default.createTrackedDialog('Create Community', '', prototype ? _CreateCommunityPrototypeDialog.default : _CreateGroupDialog.default);

            break;
          }

        case _actions.Action.ViewRoomDirectory:
          {
            if (_SpaceStore.default.instance.activeSpace[0] === "!") {
              _dispatcher.default.dispatch({
                action: "view_room",
                room_id: _SpaceStore.default.instance.activeSpace
              });
            } else {
              _Modal.default.createTrackedDialog('Room directory', '', _RoomDirectory.default, {
                initialText: payload.initialText
              }, 'mx_RoomDirectory_dialogWrapper', false, true);
            } // View the welcome or home page if we need something to look at


            this.viewSomethingBehindModal();
            break;
          }

        case 'view_my_groups':
          this.setPage(_PageTypes.default.MyGroups);
          this.notifyNewScreen('groups');
          break;

        case 'view_group':
          this.viewGroup(payload);
          break;

        case 'view_welcome_page':
          this.viewWelcome();
          break;

        case 'view_home_page':
          this.viewHome(payload.justRegistered);
          break;

        case 'view_start_chat_or_reuse':
          this.chatCreateOrReuse(payload.user_id);
          break;

        case 'view_create_chat':
          (0, _RoomInvite.showStartChatInviteDialog)(payload.initialText || "");
          break;

        case 'view_invite':
          {
            const room = _MatrixClientPeg.MatrixClientPeg.get().getRoom(payload.roomId);

            if (room !== null && room !== void 0 && room.isSpaceRoom()) {
              (0, _space.showSpaceInvite)(room);
            } else {
              (0, _RoomInvite.showRoomInviteDialog)(payload.roomId);
            }

            break;
          }

        case 'view_last_screen':
          // This function does what we want, despite the name. The idea is that it shows
          // the last room we were looking at or some reasonable default/guess. We don't
          // have to worry about email invites or similar being re-triggered because the
          // function will have cleared that state and not execute that path.
          this.showScreenAfterLogin();
          break;

        case 'toggle_my_groups':
          // persist that the user has interacted with this, use it to dismiss the beta dot
          localStorage.setItem("mx_seenSpacesBeta", "1"); // We just dispatch the page change rather than have to worry about
          // what the logic is for each of these branches.

          if (this.state.page_type === _PageTypes.default.MyGroups) {
            _dispatcher.default.dispatch({
              action: 'view_last_screen'
            });
          } else {
            _dispatcher.default.dispatch({
              action: 'view_my_groups'
            });
          }

          break;

        case 'hide_left_panel':
          this.setState({
            collapseLhs: true
          }, () => {
            this.state.resizeNotifier.notifyLeftHandleResized();
          });
          break;

        case 'focus_room_filter': // for CtrlOrCmd+K to work by expanding the left panel first

        case 'show_left_panel':
          this.setState({
            collapseLhs: false
          }, () => {
            this.state.resizeNotifier.notifyLeftHandleResized();
          });
          break;

        case _actions.Action.OpenDialPad:
          _Modal.default.createTrackedDialog('Dial pad', '', _DialPadModal.default, {}, "mx_Dialog_dialPadWrapper");

          break;

        case 'on_logged_in':
          if ( // Skip this handling for token login as that always calls onLoggedIn itself
          !this.tokenLogin && !Lifecycle.isSoftLogout() && this.state.view !== Views.LOGIN && this.state.view !== Views.REGISTER && this.state.view !== Views.COMPLETE_SECURITY && this.state.view !== Views.E2E_SETUP) {
            this.onLoggedIn();
          }

          break;

        case 'on_client_not_viable':
          this.onSoftLogout();
          break;

        case 'on_logged_out':
          this.onLoggedOut();
          break;

        case 'will_start_client':
          this.setState({
            ready: false
          }, () => {
            // if the client is about to start, we are, by definition, not ready.
            // Set ready to false now, then it'll be set to true when the sync
            // listener we set below fires.
            this.onWillStartClient();
          });
          break;

        case 'client_started':
          this.onClientStarted();
          break;

        case 'send_event':
          this.onSendEvent(payload.room_id, payload.event);
          break;

        case 'aria_hide_main_app':
          this.setState({
            hideToSRUsers: true
          });
          break;

        case 'aria_unhide_main_app':
          this.setState({
            hideToSRUsers: false
          });
          break;

        case 'accept_cookies':
          _SettingsStore.default.setValue("analyticsOptIn", null, _SettingLevel.SettingLevel.DEVICE, true);

          _SettingsStore.default.setValue("showCookieBar", null, _SettingLevel.SettingLevel.DEVICE, false);

          (0, _AnalyticsToast.hideToast)();

          if (_Analytics.default.canEnable()) {
            _Analytics.default.enable();
          }

          if (_CountlyAnalytics.default.instance.canEnable()) {
            _CountlyAnalytics.default.instance.enable(
            /* anonymous = */
            false);
          }

          break;

        case 'reject_cookies':
          _SettingsStore.default.setValue("analyticsOptIn", null, _SettingLevel.SettingLevel.DEVICE, false);

          _SettingsStore.default.setValue("showCookieBar", null, _SettingLevel.SettingLevel.DEVICE, false);

          (0, _AnalyticsToast.hideToast)();
          break;
      }
    });
    (0, _defineProperty2.default)(this, "handleResize", () => {
      const LHS_THRESHOLD = 1000;
      const width = _UIStore.default.instance.windowWidth;

      if (this.prevWindowWidth < LHS_THRESHOLD && width >= LHS_THRESHOLD) {
        _dispatcher.default.dispatch({
          action: 'show_left_panel'
        });
      }

      if (this.prevWindowWidth >= LHS_THRESHOLD && width < LHS_THRESHOLD) {
        _dispatcher.default.dispatch({
          action: 'hide_left_panel'
        });
      }

      this.prevWindowWidth = width;
      this.state.resizeNotifier.notifyWindowResized();
    });
    (0, _defineProperty2.default)(this, "onRegisterClick", () => {
      this.showScreen("register");
    });
    (0, _defineProperty2.default)(this, "onLoginClick", () => {
      this.showScreen("login");
    });
    (0, _defineProperty2.default)(this, "onForgotPasswordClick", () => {
      this.showScreen("forgot_password");
    });
    (0, _defineProperty2.default)(this, "onRegisterFlowComplete", (credentials, password) => {
      return this.onUserCompletedLoginFlow(credentials, password);
    });
    (0, _defineProperty2.default)(this, "onServerConfigChange", serverConfig => {
      this.setState({
        serverConfig
      });
    });
    (0, _defineProperty2.default)(this, "makeRegistrationUrl", params => {
      if (this.props.startingFragmentQueryParams.referrer) {
        params.referrer = this.props.startingFragmentQueryParams.referrer;
      }

      return this.props.makeRegistrationUrl(params);
    });
    (0, _defineProperty2.default)(this, "onUserCompletedLoginFlow", async (credentials, password) => {
      this.accountPassword = password; // self-destruct the password after 5mins

      if (this.accountPasswordTimer !== null) clearTimeout(this.accountPasswordTimer);
      this.accountPasswordTimer = setTimeout(() => {
        this.accountPassword = null;
        this.accountPasswordTimer = null;
      }, 60 * 5 * 1000); // Create and start the client

      await Lifecycle.setLoggedIn(credentials);
      await this.postLoginSetup();

      _performance.default.instance.stop(_performance.PerformanceEntryNames.LOGIN);

      _performance.default.instance.stop(_performance.PerformanceEntryNames.REGISTER);
    });
    (0, _defineProperty2.default)(this, "onCompleteSecurityE2eSetupFinished", () => {
      this.onLoggedIn();
    });
    this.state = {
      view: Views.LOADING,
      collapseLhs: false,
      hideToSRUsers: false,
      syncError: null,
      // If the current syncing status is ERROR, the error object, otherwise null.
      resizeNotifier: new _ResizeNotifier.default(),
      ready: false
    };
    this.loggedInView = /*#__PURE__*/(0, _react.createRef)();

    _SdkConfig.default.put(this.props.config); // Used by _viewRoom before getting state from sync


    this.firstSyncComplete = false;
    this.firstSyncPromise = (0, _utils.defer)();

    if (this.props.config.sync_timeline_limit) {
      _MatrixClientPeg.MatrixClientPeg.opts.initialSyncLimit = this.props.config.sync_timeline_limit;
    } // a thing to call showScreen with once login completes.  this is kept
    // outside this.state because updating it should never trigger a
    // rerender.


    this.screenAfterLogin = this.props.initialScreenAfterLogin;

    if (this.screenAfterLogin) {
      const params = this.screenAfterLogin.params || {};

      if (this.screenAfterLogin.screen.startsWith("room/") && params['signurl'] && params['email']) {
        // probably a threepid invite - try to store it
        const roomId = this.screenAfterLogin.screen.substring("room/".length);

        _ThreepidInviteStore.default.instance.storeInvite(roomId, params);
      }
    }

    this.prevWindowWidth = _UIStore.default.instance.windowWidth || 1000;

    _UIStore.default.instance.on(_UIStore.UI_EVENTS.Resize, this.handleResize);

    this.pageChanging = false; // For PersistentElement

    this.state.resizeNotifier.on("middlePanelResized", this.dispatchTimelineResize); // Force users to go through the soft logout page if they're soft logged out

    if (Lifecycle.isSoftLogout()) {
      // When the session loads it'll be detected as soft logged out and a dispatch
      // will be sent out to say that, triggering this MatrixChat to show the soft
      // logout page.
      Lifecycle.loadSession();
    }

    this.accountPassword = null;
    this.accountPasswordTimer = null;
    this.dispatcherRef = _dispatcher.default.register(this.onAction);
    this.themeWatcher = new _ThemeWatcher.default();
    this.fontWatcher = new _FontWatcher.FontWatcher();
    this.themeWatcher.start();
    this.fontWatcher.start();
    this.focusComposer = false; // object field used for tracking the status info appended to the title tag.
    // we don't do it as react state as i'm scared about triggering needless react refreshes.

    this.subTitleStatus = ''; // this can technically be done anywhere but doing this here keeps all
    // the routing url path logic together.

    if (this.onAliasClick) {
      _linkifyMatrix.default.onAliasClick = this.onAliasClick;
    }

    if (this.onUserClick) {
      _linkifyMatrix.default.onUserClick = this.onUserClick;
    }

    if (this.onGroupClick) {
      _linkifyMatrix.default.onGroupClick = this.onGroupClick;
    } // the first thing to do is to try the token params in the query-string
    // if the session isn't soft logged out (ie: is a clean session being logged in)


    if (!Lifecycle.isSoftLogout()) {
      Lifecycle.attemptTokenLogin(this.props.realQueryParams, this.props.defaultDeviceDisplayName, this.getFragmentAfterLogin()).then(async loggedIn => {
        var _this$props$realQuery;

        if ((_this$props$realQuery = this.props.realQueryParams) !== null && _this$props$realQuery !== void 0 && _this$props$realQuery.loginToken) {
          // remove the loginToken from the URL regardless
          this.props.onTokenLoginCompleted();
        }

        if (loggedIn) {
          this.tokenLogin = true; // Create and start the client

          await Lifecycle.restoreFromLocalStorage({
            ignoreGuest: true
          });
          return this.postLoginSetup();
        } // if the user has followed a login or register link, don't reanimate
        // the old creds, but rather go straight to the relevant page


        const firstScreen = this.screenAfterLogin ? this.screenAfterLogin.screen : null;

        if (firstScreen === 'login' || firstScreen === 'register' || firstScreen === 'forgot_password') {
          this.showScreenAfterLogin();
          return;
        }

        return this.loadSession();
      });
    }

    if (_SettingsStore.default.getValue("analyticsOptIn")) {
      _Analytics.default.enable();
    }

    _PosthogAnalytics.PosthogAnalytics.instance.updateAnonymityFromSettings();

    _PosthogAnalytics.PosthogAnalytics.instance.updatePlatformSuperProperties();

    _CountlyAnalytics.default.instance.enable(
    /* anonymous = */
    true);

    (0, _sentry.initSentry)(_SdkConfig.default.get()["sentry"]);
  }

  async postLoginSetup() {
    const cli = _MatrixClientPeg.MatrixClientPeg.get();

    const cryptoEnabled = cli.isCryptoEnabled();

    if (!cryptoEnabled) {
      this.onLoggedIn();
    }

    const promisesList = [this.firstSyncPromise.promise];

    if (cryptoEnabled) {
      // wait for the client to finish downloading cross-signing keys for us so we
      // know whether or not we have keys set up on this account
      promisesList.push(cli.downloadKeys([cli.getUserId()]));
    } // Now update the state to say we're waiting for the first sync to complete rather
    // than for the login to finish.


    this.setState({
      pendingInitialSync: true
    });
    await Promise.all(promisesList);

    if (!cryptoEnabled) {
      this.setState({
        pendingInitialSync: false
      });
      return;
    }

    const crossSigningIsSetUp = cli.getStoredCrossSigningForUser(cli.getUserId());

    if (crossSigningIsSetUp) {
      if (_Security.default.SHOW_ENCRYPTION_SETUP_UI === false) {
        this.onLoggedIn();
      } else {
        this.setStateForNewView({
          view: Views.COMPLETE_SECURITY
        });
      }
    } else if (await cli.doesServerSupportUnstableFeature("org.matrix.e2e_cross_signing")) {
      this.setStateForNewView({
        view: Views.E2E_SETUP
      });
    } else {
      this.onLoggedIn();
    }

    this.setState({
      pendingInitialSync: false
    });
  } // TODO: [REACT-WARNING] Replace with appropriate lifecycle stage
  // eslint-disable-next-line


  UNSAFE_componentWillUpdate(props, state) {
    if (this.shouldTrackPageChange(this.state, state)) {
      this.startPageChangeTimer();
    }
  }

  componentDidUpdate(prevProps, prevState) {
    if (this.shouldTrackPageChange(prevState, this.state)) {
      const durationMs = this.stopPageChangeTimer();

      _Analytics.default.trackPageChange(durationMs);

      _CountlyAnalytics.default.instance.trackPageChange(durationMs);

      _PosthogAnalytics.PosthogAnalytics.instance.trackPageView(durationMs);
    }

    if (this.focusComposer) {
      _dispatcher.default.fire(_actions.Action.FocusSendMessageComposer);

      this.focusComposer = false;
    }
  }

  componentWillUnmount() {
    Lifecycle.stopMatrixClient();

    _dispatcher.default.unregister(this.dispatcherRef);

    this.themeWatcher.stop();
    this.fontWatcher.stop();

    _UIStore.default.destroy();

    this.state.resizeNotifier.removeListener("middlePanelResized", this.dispatchTimelineResize);
    if (this.accountPasswordTimer !== null) clearTimeout(this.accountPasswordTimer);
  }

  getFallbackHsUrl() {
    if (this.props.serverConfig && this.props.serverConfig.isDefault) {
      return this.props.config.fallback_hs_url;
    } else {
      return null;
    }
  }

  getServerProperties() {
    let props = this.state.serverConfig;
    if (!props) props = this.props.serverConfig; // for unit tests

    if (!props) props = _SdkConfig.default.get()["validated_server_config"];
    return {
      serverConfig: props
    };
  }

  loadSession() {
    // the extra Promise.resolve() ensures that synchronous exceptions hit the same codepath as
    // asynchronous ones.
    return Promise.resolve().then(() => {
      return Lifecycle.loadSession({
        fragmentQueryParams: this.props.startingFragmentQueryParams,
        enableGuest: this.props.enableGuest,
        guestHsUrl: this.getServerProperties().serverConfig.hsUrl,
        guestIsUrl: this.getServerProperties().serverConfig.isUrl,
        defaultDeviceDisplayName: this.props.defaultDeviceDisplayName
      });
    }).then(loadedSession => {
      if (!loadedSession) {
        // fall back to showing the welcome screen... unless we have a 3pid invite pending
        if (_ThreepidInviteStore.default.instance.pickBestInvite()) {
          _dispatcher.default.dispatch({
            action: 'start_registration'
          });
        } else {
          _dispatcher.default.dispatch({
            action: "view_welcome_page"
          });
        }
      } else if (_SettingsStore.default.getValue("analyticsOptIn")) {
        _CountlyAnalytics.default.instance.enable(
        /* anonymous = */
        false);
      }
    }); // Note we don't catch errors from this: we catch everything within
    // loadSession as there's logic there to ask the user if they want
    // to try logging out.
  }

  startPageChangeTimer() {
    _performance.default.instance.start(_performance.PerformanceEntryNames.PAGE_CHANGE);
  }

  stopPageChangeTimer() {
    const perfMonitor = _performance.default.instance;
    perfMonitor.stop(_performance.PerformanceEntryNames.PAGE_CHANGE);
    const entries = perfMonitor.getEntries({
      name: _performance.PerformanceEntryNames.PAGE_CHANGE
    });
    const measurement = entries.pop();
    return measurement ? measurement.duration : null;
  }

  shouldTrackPageChange(prevState, state) {
    return prevState.currentRoomId !== state.currentRoomId || prevState.view !== state.view || prevState.page_type !== state.page_type;
  }

  setStateForNewView(state) {
    if (state.view === undefined) {
      throw new Error("setStateForNewView with no view!");
    }

    const newState = {
      currentUserId: null,
      justRegistered: false
    };
    Object.assign(newState, state);
    this.setState(newState);
  }

  setPage(pageType) {
    this.setState({
      page_type: pageType
    });
  }

  async startRegistration(params) {
    const newState = {
      view: Views.REGISTER
    }; // Only honour params if they are all present, otherwise we reset
    // HS and IS URLs when switching to registration.

    if (params.client_secret && params.session_id && params.hs_url && params.is_url && params.sid) {
      newState.serverConfig = await _AutoDiscoveryUtils.default.validateServerConfigWithStaticUrls(params.hs_url, params.is_url); // If the hs url matches then take the hs name we know locally as it is likely prettier

      const defaultConfig = _SdkConfig.default.get()["validated_server_config"];

      if (defaultConfig && defaultConfig.hsUrl === newState.serverConfig.hsUrl) {
        newState.serverConfig.hsName = defaultConfig.hsName;
        newState.serverConfig.hsNameIsDifferent = defaultConfig.hsNameIsDifferent;
        newState.serverConfig.isDefault = defaultConfig.isDefault;
        newState.serverConfig.isNameResolvable = defaultConfig.isNameResolvable;
      }

      newState.register_client_secret = params.client_secret;
      newState.register_session_id = params.session_id;
      newState.register_id_sid = params.sid;
    }

    this.setStateForNewView(newState);
    _ThemeController.default.isLogin = true;
    this.themeWatcher.recheck();
    this.notifyNewScreen('register');
  } // switch view to the given room
  //
  // @param {Object} roomInfo Object containing data about the room to be joined
  // @param {string=} roomInfo.room_id ID of the room to join. One of room_id or room_alias must be given.
  // @param {string=} roomInfo.room_alias Alias of the room to join. One of room_id or room_alias must be given.
  // @param {boolean=} roomInfo.auto_join If true, automatically attempt to join the room if not already a member.
  // @param {string=} roomInfo.event_id ID of the event in this room to show: this will cause a switch to the
  //                                    context of that particular event.
  // @param {boolean=} roomInfo.highlighted If true, add event_id to the hash of the URL
  //                                        and alter the EventTile to appear highlighted.
  // @param {Object=} roomInfo.threepid_invite Object containing data about the third party
  //                                           we received to join the room, if any.
  // @param {Object=} roomInfo.oob_data Object of additional data about the room
  //                               that has been passed out-of-band (eg.
  //                               room name and avatar from an invite email)


  viewRoom(roomInfo) {
    this.focusComposer = true;

    if (roomInfo.room_alias) {
      _logger.logger.log(`Switching to room alias ${roomInfo.room_alias} at event ` + roomInfo.event_id);
    } else {
      _logger.logger.log(`Switching to room id ${roomInfo.room_id} at event ` + roomInfo.event_id);
    } // Wait for the first sync to complete so that if a room does have an alias,
    // it would have been retrieved.


    let waitFor = Promise.resolve(null);

    if (!this.firstSyncComplete) {
      if (!this.firstSyncPromise) {
        _logger.logger.warn('Cannot view a room before first sync. room_id:', roomInfo.room_id);

        return;
      }

      waitFor = this.firstSyncPromise.promise;
    }

    return waitFor.then(() => {
      let presentedId = roomInfo.room_alias || roomInfo.room_id;

      const room = _MatrixClientPeg.MatrixClientPeg.get().getRoom(roomInfo.room_id);

      if (room) {
        // Not all timeline events are decrypted ahead of time anymore
        // Only the critical ones for a typical UI are
        // This will start the decryption process for all events when a
        // user views a room
        room.decryptAllEvents();
        const theAlias = Rooms.getDisplayAliasForRoom(room);

        if (theAlias) {
          presentedId = theAlias; // Store display alias of the presented room in cache to speed future
          // navigation.

          (0, _RoomAliasCache.storeRoomAliasInCache)(theAlias, room.roomId);
        } // Store this as the ID of the last room accessed. This is so that we can
        // persist which room is being stored across refreshes and browser quits.


        if (localStorage) {
          localStorage.setItem('mx_last_room_id', room.roomId);
        }
      } // If we are redirecting to a Room Alias and it is for the room we already showing then replace history item


      const replaceLast = presentedId[0] === "#" && roomInfo.room_id === this.state.currentRoomId;

      if (roomInfo.event_id && roomInfo.highlighted) {
        presentedId += "/" + roomInfo.event_id;
      }

      this.setState({
        view: Views.LOGGED_IN,
        currentRoomId: roomInfo.room_id || null,
        page_type: _PageTypes.default.RoomView,
        threepidInvite: roomInfo.threepid_invite,
        roomOobData: roomInfo.oob_data,
        forceTimeline: roomInfo.forceTimeline,
        ready: true,
        roomJustCreatedOpts: roomInfo.justCreatedOpts
      }, () => {
        this.notifyNewScreen('room/' + presentedId, replaceLast);
      });
    });
  }

  async viewGroup(payload) {
    const groupId = payload.group_id; // Wait for the first sync to complete

    if (!this.firstSyncComplete) {
      if (!this.firstSyncPromise) {
        _logger.logger.warn('Cannot view a group before first sync. group_id:', groupId);

        return;
      }

      await this.firstSyncPromise.promise;
    }

    this.setState({
      view: Views.LOGGED_IN,
      currentGroupId: groupId,
      currentGroupIsNew: payload.group_is_new
    });
    this.setPage(_PageTypes.default.GroupView);
    this.notifyNewScreen('group/' + groupId);
  }

  viewSomethingBehindModal() {
    if (this.state.view !== Views.LOGGED_IN) {
      this.viewWelcome();
      return;
    }

    if (!this.state.currentGroupId && !this.state.currentRoomId) {
      this.viewHome();
    }
  }

  viewWelcome() {
    if ((0, _pages.shouldUseLoginForWelcome)(_SdkConfig.default.get())) {
      return this.viewLogin();
    }

    this.setStateForNewView({
      view: Views.WELCOME
    });
    this.notifyNewScreen('welcome');
    _ThemeController.default.isLogin = true;
    this.themeWatcher.recheck();
  }

  viewLogin(otherState) {
    this.setStateForNewView(_objectSpread({
      view: Views.LOGIN
    }, otherState));
    this.notifyNewScreen('login');
    _ThemeController.default.isLogin = true;
    this.themeWatcher.recheck();
  }

  viewHome(justRegistered = false) {
    // The home page requires the "logged in" view, so we'll set that.
    this.setStateForNewView({
      view: Views.LOGGED_IN,
      justRegistered,
      currentRoomId: null
    });
    this.setPage(_PageTypes.default.HomePage);
    this.notifyNewScreen('home');
    _ThemeController.default.isLogin = false;
    this.themeWatcher.recheck();
  }

  viewUser(userId, subAction) {
    // Wait for the first sync so that `getRoom` gives us a room object if it's
    // in the sync response
    const waitForSync = this.firstSyncPromise ? this.firstSyncPromise.promise : Promise.resolve();
    waitForSync.then(() => {
      if (subAction === 'chat') {
        this.chatCreateOrReuse(userId);
        return;
      }

      this.notifyNewScreen('user/' + userId);
      this.setState({
        currentUserId: userId
      });
      this.setPage(_PageTypes.default.UserView);
    });
  }

  async createRoom(defaultPublic = false, defaultName) {
    const communityId = _CommunityPrototypeStore.CommunityPrototypeStore.instance.getSelectedCommunityId();

    if (communityId) {
      // double check the user will have permission to associate this room with the community
      if (!_CommunityPrototypeStore.CommunityPrototypeStore.instance.isAdminOf(communityId)) {
        _Modal.default.createTrackedDialog('Pre-failure to create room', '', _ErrorDialog.default, {
          title: (0, _languageHandler._t)("Cannot create rooms in this community"),
          description: (0, _languageHandler._t)("You do not have permission to create rooms in this community.")
        });

        return;
      }
    }

    const modal = _Modal.default.createTrackedDialog('Create Room', '', _CreateRoomDialog.default, {
      defaultPublic,
      defaultName
    });

    const [shouldCreate, opts] = await modal.finished;

    if (shouldCreate) {
      (0, _createRoom.default)(opts);
    }
  }

  chatCreateOrReuse(userId) {
    // Use a deferred action to reshow the dialog once the user has registered
    if (_MatrixClientPeg.MatrixClientPeg.get().isGuest()) {
      // No point in making 2 DMs with welcome bot. This assumes view_set_mxid will
      // result in a new DM with the welcome user.
      if (userId !== this.props.config.welcomeUserId) {
        _dispatcher.default.dispatch({
          action: 'do_after_sync_prepared',
          deferred_action: {
            action: 'view_start_chat_or_reuse',
            user_id: userId
          }
        });
      }

      _dispatcher.default.dispatch({
        action: 'require_registration',
        // If the set_mxid dialog is cancelled, view /welcome because if the
        // browser was pointing at /user/@someone:domain?action=chat, the URL
        // needs to be reset so that they can revisit /user/.. // (and trigger
        // `_chatCreateOrReuse` again)
        go_welcome_on_cancel: true,
        screen_after: {
          screen: `user/${this.props.config.welcomeUserId}`,
          params: {
            action: 'chat'
          }
        }
      });

      return;
    } // TODO: Immutable DMs replaces this


    const client = _MatrixClientPeg.MatrixClientPeg.get();

    const dmRoomMap = new _DMRoomMap.default(client);
    const dmRooms = dmRoomMap.getDMRoomsForUserId(userId);

    if (dmRooms.length > 0) {
      _dispatcher.default.dispatch({
        action: _actions.Action.ViewRoom,
        room_id: dmRooms[0]
      });
    } else {
      _dispatcher.default.dispatch({
        action: 'start_chat',
        user_id: userId
      });
    }
  }

  leaveRoomWarnings(roomId) {
    const roomToLeave = _MatrixClientPeg.MatrixClientPeg.get().getRoom(roomId);

    const isSpace = _SpaceStore.default.spacesEnabled && (roomToLeave === null || roomToLeave === void 0 ? void 0 : roomToLeave.isSpaceRoom()); // Show a warning if there are additional complications.

    const warnings = [];
    const memberCount = roomToLeave.currentState.getJoinedMemberCount();

    if (memberCount === 1) {
      warnings.push( /*#__PURE__*/_react.default.createElement("span", {
        className: "warning",
        key: "only_member_warning"
      }, ' '
      /* Whitespace, otherwise the sentences get smashed together */
      , (0, _languageHandler._t)("You are the only person here. " + "If you leave, no one will be able to join in the future, including you.")));
      return warnings;
    }

    const joinRules = roomToLeave.currentState.getStateEvents('m.room.join_rules', '');

    if (joinRules) {
      const rule = joinRules.getContent().join_rule;

      if (rule !== "public") {
        warnings.push( /*#__PURE__*/_react.default.createElement("span", {
          className: "warning",
          key: "non_public_warning"
        }, ' '
        /* Whitespace, otherwise the sentences get smashed together */
        , isSpace ? (0, _languageHandler._t)("This space is not public. You will not be able to rejoin without an invite.") : (0, _languageHandler._t)("This room is not public. You will not be able to rejoin without an invite.")));
      }
    }

    return warnings;
  }

  leaveRoom(roomId) {
    const roomToLeave = _MatrixClientPeg.MatrixClientPeg.get().getRoom(roomId);

    const warnings = this.leaveRoomWarnings(roomId);
    const isSpace = _SpaceStore.default.spacesEnabled && (roomToLeave === null || roomToLeave === void 0 ? void 0 : roomToLeave.isSpaceRoom());

    _Modal.default.createTrackedDialog(isSpace ? "Leave space" : "Leave room", '', _QuestionDialog.default, {
      title: isSpace ? (0, _languageHandler._t)("Leave space") : (0, _languageHandler._t)("Leave room"),
      description: /*#__PURE__*/_react.default.createElement("span", null, isSpace ? (0, _languageHandler._t)("Are you sure you want to leave the space '%(spaceName)s'?", {
        spaceName: roomToLeave.name
      }) : (0, _languageHandler._t)("Are you sure you want to leave the room '%(roomName)s'?", {
        roomName: roomToLeave.name
      }), warnings),
      button: (0, _languageHandler._t)("Leave"),
      onFinished: shouldLeave => {
        if (shouldLeave) {
          const d = (0, _membership.leaveRoomBehaviour)(roomId); // FIXME: controller shouldn't be loading a view :(

          const modal = _Modal.default.createDialog(_Spinner.default, null, 'mx_Dialog_spinner');

          d.finally(() => modal.close());

          _dispatcher.default.dispatch({
            action: "after_leave_room",
            room_id: roomId
          });
        }
      }
    });
  }

  forgetRoom(roomId) {
    const room = _MatrixClientPeg.MatrixClientPeg.get().getRoom(roomId);

    _MatrixClientPeg.MatrixClientPeg.get().forget(roomId).then(() => {
      // Switch to home page if we're currently viewing the forgotten room
      if (this.state.currentRoomId === roomId) {
        _dispatcher.default.dispatch({
          action: "view_home_page"
        });
      } // We have to manually update the room list because the forgotten room will not
      // be notified to us, therefore the room list will have no other way of knowing
      // the room is forgotten.


      _RoomListStore.default.instance.manualRoomUpdate(room, _models.RoomUpdateCause.RoomRemoved);
    }).catch(err => {
      const errCode = err.errcode || (0, _languageHandler._td)("unknown error code");

      _Modal.default.createTrackedDialog("Failed to forget room", '', _ErrorDialog.default, {
        title: (0, _languageHandler._t)("Failed to forget room %(errCode)s", {
          errCode
        }),
        description: err && err.message ? err.message : (0, _languageHandler._t)("Operation failed")
      });
    });
  }

  async copyRoom(roomId) {
    const roomLink = (0, _Permalinks.makeRoomPermalink)(roomId);
    const success = await (0, _strings.copyPlaintext)(roomLink);

    if (!success) {
      _Modal.default.createTrackedDialog("Unable to copy room link", "", _ErrorDialog.default, {
        title: (0, _languageHandler._t)("Unable to copy room link"),
        description: (0, _languageHandler._t)("Unable to copy a link to the room to the clipboard.")
      });
    }
  }
  /**
   * Starts a chat with the welcome user, if the user doesn't already have one
   * @returns {string} The room ID of the new room, or null if no room was created
   */


  async startWelcomeUserChat() {
    // We can end up with multiple tabs post-registration where the user
    // might then end up with a session and we don't want them all making
    // a chat with the welcome user: try to de-dupe.
    // We need to wait for the first sync to complete for this to
    // work though.
    let waitFor;

    if (!this.firstSyncComplete) {
      waitFor = this.firstSyncPromise.promise;
    } else {
      waitFor = Promise.resolve();
    }

    await waitFor;

    const welcomeUserRooms = _DMRoomMap.default.shared().getDMRoomsForUserId(this.props.config.welcomeUserId);

    if (welcomeUserRooms.length === 0) {
      const roomId = await (0, _createRoom.default)({
        dmUserId: this.props.config.welcomeUserId,
        // Only view the welcome user if we're NOT looking at a room
        andView: !this.state.currentRoomId,
        spinner: false // we're already showing one: we don't need another one

      }); // This is a bit of a hack, but since the deduplication relies
      // on m.direct being up to date, we need to force a sync
      // of the database, otherwise if the user goes to the other
      // tab before the next save happens (a few minutes), the
      // saved sync will be restored from the db and this code will
      // run without the update to m.direct, making another welcome
      // user room (it doesn't wait for new data from the server, just
      // the saved sync to be loaded).

      const saveWelcomeUser = ev => {
        if (ev.getType() === 'm.direct' && ev.getContent() && ev.getContent()[this.props.config.welcomeUserId]) {
          _MatrixClientPeg.MatrixClientPeg.get().store.save(true);

          _MatrixClientPeg.MatrixClientPeg.get().removeListener("accountData", saveWelcomeUser);
        }
      };

      _MatrixClientPeg.MatrixClientPeg.get().on("accountData", saveWelcomeUser);

      return roomId;
    }

    return null;
  }
  /**
   * Called when a new logged in session has started
   */


  async onLoggedIn() {
    _ThemeController.default.isLogin = false;
    this.themeWatcher.recheck();
    this.setStateForNewView({
      view: Views.LOGGED_IN
    }); // If a specific screen is set to be shown after login, show that above
    // all else, as it probably means the user clicked on something already.

    if (this.screenAfterLogin && this.screenAfterLogin.screen) {
      this.showScreen(this.screenAfterLogin.screen, this.screenAfterLogin.params);
      this.screenAfterLogin = null;
    } else if (_MatrixClientPeg.MatrixClientPeg.currentUserIsJustRegistered()) {
      _MatrixClientPeg.MatrixClientPeg.setJustRegisteredUserId(null);

      if (this.props.config.welcomeUserId && (0, _languageHandler.getCurrentLanguage)().startsWith("en")) {
        const welcomeUserRoom = await this.startWelcomeUserChat();

        if (welcomeUserRoom === null) {
          // We didn't redirect to the welcome user room, so show
          // the homepage.
          _dispatcher.default.dispatch({
            action: 'view_home_page',
            justRegistered: true
          });
        }
      } else if (_ThreepidInviteStore.default.instance.pickBestInvite()) {
        // The user has a 3pid invite pending - show them that
        const threepidInvite = _ThreepidInviteStore.default.instance.pickBestInvite(); // HACK: This is a pretty brutal way of threading the invite back through
        // our systems, but it's the safest we have for now.


        const params = _ThreepidInviteStore.default.instance.translateToWireFormat(threepidInvite);

        this.showScreen(`room/${threepidInvite.roomId}`, params);
      } else {
        // The user has just logged in after registering,
        // so show the homepage.
        _dispatcher.default.dispatch({
          action: 'view_home_page',
          justRegistered: true
        });
      }
    } else {
      this.showScreenAfterLogin();
    }

    StorageManager.tryPersistStorage(); // defer the following actions by 30 seconds to not throw them at the user immediately

    await (0, _utils.sleep)(30);

    if (_SettingsStore.default.getValue("showCookieBar") && (_Analytics.default.canEnable() || _CountlyAnalytics.default.instance.canEnable())) {
      var _this$props$config$pi;

      (0, _AnalyticsToast.showToast)((_this$props$config$pi = this.props.config.piwik) === null || _this$props$config$pi === void 0 ? void 0 : _this$props$config$pi.policyUrl);
    }

    if (_SdkConfig.default.get().mobileGuideToast) {
      // The toast contains further logic to detect mobile platforms,
      // check if it has been dismissed before, etc.
      (0, _MobileGuideToast.showToast)();
    }
  }

  showScreenAfterLogin() {
    // If screenAfterLogin is set, use that, then null it so that a second login will
    // result in view_home_page, _user_settings or _room_directory
    if (this.screenAfterLogin && this.screenAfterLogin.screen) {
      this.showScreen(this.screenAfterLogin.screen, this.screenAfterLogin.params);
      this.screenAfterLogin = null;
    } else if (localStorage && localStorage.getItem('mx_last_room_id')) {
      // Before defaulting to directory, show the last viewed room
      this.viewLastRoom();
    } else {
      if (_MatrixClientPeg.MatrixClientPeg.get().isGuest()) {
        _dispatcher.default.dispatch({
          action: 'view_welcome_page'
        });
      } else {
        _dispatcher.default.dispatch({
          action: 'view_home_page'
        });
      }
    }
  }

  viewLastRoom() {
    _dispatcher.default.dispatch({
      action: _actions.Action.ViewRoom,
      room_id: localStorage.getItem('mx_last_room_id')
    });
  }
  /**
   * Called when the session is logged out
   */


  onLoggedOut() {
    this.viewLogin({
      ready: false,
      collapseLhs: false,
      currentRoomId: null
    });
    this.subTitleStatus = '';
    this.setPageSubtitle();
  }
  /**
   * Called when the session is softly logged out
   */


  onSoftLogout() {
    this.notifyNewScreen('soft_logout');
    this.setStateForNewView({
      view: Views.SOFT_LOGOUT,
      ready: false,
      collapseLhs: false,
      currentRoomId: null
    });
    this.subTitleStatus = '';
    this.setPageSubtitle();
  }
  /**
   * Called just before the matrix client is started
   * (useful for setting listeners)
   */


  onWillStartClient() {
    // reset the 'have completed first sync' flag,
    // since we're about to start the client and therefore about
    // to do the first sync
    this.firstSyncComplete = false;
    this.firstSyncPromise = (0, _utils.defer)();

    const cli = _MatrixClientPeg.MatrixClientPeg.get(); // Allow the JS SDK to reap timeline events. This reduces the amount of
    // memory consumed as the JS SDK stores multiple distinct copies of room
    // state (each of which can be 10s of MBs) for each DISJOINT timeline. This is
    // particularly noticeable when there are lots of 'limited' /sync responses
    // such as when laptops unsleep.
    // https://github.com/vector-im/element-web/issues/3307#issuecomment-282895568


    cli.setCanResetTimelineCallback(roomId => {
      _logger.logger.log("Request to reset timeline in room ", roomId, " viewing:", this.state.currentRoomId);

      if (roomId !== this.state.currentRoomId) {
        // It is safe to remove events from rooms we are not viewing.
        return true;
      } // We are viewing the room which we want to reset. It is only safe to do
      // this if we are not scrolled up in the view. To find out, delegate to
      // the timeline panel. If the timeline panel doesn't exist, then we assume
      // it is safe to reset the timeline.


      if (!this.loggedInView.current) {
        return true;
      }

      return this.loggedInView.current.canResetTimelineInRoom(roomId);
    });
    cli.on('sync', (state, prevState, data) => {
      // LifecycleStore and others cannot directly subscribe to matrix client for
      // events because flux only allows store state changes during flux dispatches.
      // So dispatch directly from here. Ideally we'd use a SyncStateStore that
      // would do this dispatch and expose the sync state itself (by listening to
      // its own dispatch).
      _dispatcher.default.dispatch({
        action: 'sync_state',
        prevState,
        state
      });

      if (state === "ERROR" || state === "RECONNECTING") {
        if (data.error instanceof _errors.InvalidStoreError) {
          Lifecycle.handleInvalidStoreError(data.error);
        }

        this.setState({
          syncError: data.error || true
        });
      } else if (this.state.syncError) {
        this.setState({
          syncError: null
        });
      }

      this.updateStatusIndicator(state, prevState);

      if (state === "SYNCING" && prevState === "SYNCING") {
        return;
      }

      _logger.logger.info("MatrixClient sync state => %s", state);

      if (state !== "PREPARED") {
        return;
      }

      this.firstSyncComplete = true;
      this.firstSyncPromise.resolve();

      if (_Notifier.default.shouldShowPrompt() && !_MatrixClientPeg.MatrixClientPeg.userRegisteredWithinLastHours(24)) {
        (0, _DesktopNotificationsToast.showToast)(false);
      }

      _dispatcher.default.fire(_actions.Action.FocusSendMessageComposer);

      this.setState({
        ready: true
      });
    });
    cli.on('Session.logged_out', function (errObj) {
      if (Lifecycle.isLoggingOut()) return; // A modal might have been open when we were logged out by the server

      _Modal.default.closeCurrentModal('Session.logged_out');

      if (errObj.httpStatus === 401 && errObj.data && errObj.data['soft_logout']) {
        _logger.logger.warn("Soft logout issued by server - avoiding data deletion");

        Lifecycle.softLogout();
        return;
      }

      _Modal.default.createTrackedDialog('Signed out', '', _ErrorDialog.default, {
        title: (0, _languageHandler._t)('Signed Out'),
        description: (0, _languageHandler._t)('For security, this session has been signed out. Please sign in again.')
      });

      _dispatcher.default.dispatch({
        action: 'logout'
      });
    });
    cli.on('no_consent', function (message, consentUri) {
      _Modal.default.createTrackedDialog('No Consent Dialog', '', _QuestionDialog.default, {
        title: (0, _languageHandler._t)('Terms and Conditions'),
        description: /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("p", null, " ", (0, _languageHandler._t)('To continue using the %(homeserverDomain)s homeserver ' + 'you must review and agree to our terms and conditions.', {
          homeserverDomain: cli.getDomain()
        }))),
        button: (0, _languageHandler._t)('Review terms and conditions'),
        cancelButton: (0, _languageHandler._t)('Dismiss'),
        onFinished: confirmed => {
          if (confirmed) {
            const wnd = window.open(consentUri, '_blank');
            wnd.opener = null;
          }
        }
      }, null, true);
    });
    const dft = new _DecryptionFailureTracker.DecryptionFailureTracker((total, errorCode) => {
      _Analytics.default.trackEvent('E2E', 'Decryption failure', errorCode, String(total));

      _CountlyAnalytics.default.instance.track("decryption_failure", {
        errorCode
      }, null, {
        sum: total
      });
    }, errorCode => {
      // Map JS-SDK error codes to tracker codes for aggregation
      switch (errorCode) {
        case 'MEGOLM_UNKNOWN_INBOUND_SESSION_ID':
          return 'olm_keys_not_sent_error';

        case 'OLM_UNKNOWN_MESSAGE_INDEX':
          return 'olm_index_error';

        case undefined:
          return 'unexpected_error';

        default:
          return 'unspecified_error';
      }
    }); // Shelved for later date when we have time to think about persisting history of
    // tracked events across sessions.
    // dft.loadTrackedEventHashMap();

    dft.start(); // When logging out, stop tracking failures and destroy state

    cli.on("Session.logged_out", () => dft.stop());
    cli.on("Event.decrypted", (e, err) => dft.eventDecrypted(e, err));
    cli.on("Room", room => {
      if (_MatrixClientPeg.MatrixClientPeg.get().isCryptoEnabled()) {
        const blacklistEnabled = _SettingsStore.default.getValueAt(_SettingLevel.SettingLevel.ROOM_DEVICE, "blacklistUnverifiedDevices", room.roomId,
        /*explicit=*/
        true);

        room.setBlacklistUnverifiedDevices(blacklistEnabled);
      }
    });
    cli.on("crypto.warning", type => {
      switch (type) {
        case 'CRYPTO_WARNING_OLD_VERSION_DETECTED':
          _Modal.default.createTrackedDialog('Crypto migrated', '', _ErrorDialog.default, {
            title: (0, _languageHandler._t)('Old cryptography data detected'),
            description: (0, _languageHandler._t)("Data from an older version of %(brand)s has been detected. " + "This will have caused end-to-end cryptography to malfunction " + "in the older version. End-to-end encrypted messages exchanged " + "recently whilst using the older version may not be decryptable " + "in this version. This may also cause messages exchanged with this " + "version to fail. If you experience problems, log out and back in " + "again. To retain message history, export and re-import your keys.", {
              brand: _SdkConfig.default.get().brand
            })
          });

          break;
      }
    });
    cli.on("crypto.keyBackupFailed", async errcode => {
      let haveNewVersion;
      let newVersionInfo; // if key backup is still enabled, there must be a new backup in place

      if (_MatrixClientPeg.MatrixClientPeg.get().getKeyBackupEnabled()) {
        haveNewVersion = true;
      } else {
        // otherwise check the server to see if there's a new one
        try {
          newVersionInfo = await _MatrixClientPeg.MatrixClientPeg.get().getKeyBackupVersion();
          if (newVersionInfo !== null) haveNewVersion = true;
        } catch (e) {
          _logger.logger.error("Saw key backup error but failed to check backup version!", e);

          return;
        }
      }

      if (haveNewVersion) {
        _Modal.default.createTrackedDialogAsync('New Recovery Method', 'New Recovery Method', Promise.resolve().then(() => _interopRequireWildcard(require('../../async-components/views/dialogs/security/NewRecoveryMethodDialog'))), {
          newVersionInfo
        });
      } else {
        _Modal.default.createTrackedDialogAsync('Recovery Method Removed', 'Recovery Method Removed', Promise.resolve().then(() => _interopRequireWildcard(require('../../async-components/views/dialogs/security/RecoveryMethodRemovedDialog'))));
      }
    });
    cli.on("crypto.keySignatureUploadFailure", (failures, source, continuation) => {
      _Modal.default.createTrackedDialog('Failed to upload key signatures', 'Failed to upload key signatures', _KeySignatureUploadFailedDialog.default, {
        failures,
        source,
        continuation
      });
    });
    cli.on("crypto.verification.request", request => {
      if (request.verifier) {
        _Modal.default.createTrackedDialog('Incoming Verification', '', _IncomingSasDialog.default, {
          verifier: request.verifier
        }, null,
        /* priority = */
        false,
        /* static = */
        true);
      } else if (request.pending) {
        _ToastStore.default.sharedInstance().addOrReplaceToast({
          key: 'verifreq_' + request.channel.transactionId,
          title: (0, _languageHandler._t)("Verification requested"),
          icon: "verification",
          props: {
            request
          },
          component: _VerificationRequestToast.default,
          priority: 90
        });
      }
    });
  }
  /**
   * Called shortly after the matrix client has started. Useful for
   * setting up anything that requires the client to be started.
   * @private
   */


  onClientStarted() {
    const cli = _MatrixClientPeg.MatrixClientPeg.get();

    if (cli.isCryptoEnabled()) {
      const blacklistEnabled = _SettingsStore.default.getValueAt(_SettingLevel.SettingLevel.DEVICE, "blacklistUnverifiedDevices");

      cli.setGlobalBlacklistUnverifiedDevices(blacklistEnabled); // With cross-signing enabled, we send to unknown devices
      // without prompting. Any bad-device status the user should
      // be aware of will be signalled through the room shield
      // changing colour. More advanced behaviour will come once
      // we implement more settings.

      cli.setGlobalErrorOnUnknownDevices(false);
    }
  }

  showScreen(screen, params) {
    const cli = _MatrixClientPeg.MatrixClientPeg.get();

    const isLoggedOutOrGuest = !cli || cli.isGuest();

    if (!isLoggedOutOrGuest && AUTH_SCREENS.includes(screen)) {
      // user is logged in and landing on an auth page which will uproot their session, redirect them home instead
      _dispatcher.default.dispatch({
        action: "view_home_page"
      });

      return;
    }

    if (screen === 'register') {
      _dispatcher.default.dispatch({
        action: 'start_registration',
        params: params
      });

      _performance.default.instance.start(_performance.PerformanceEntryNames.REGISTER);
    } else if (screen === 'login') {
      _dispatcher.default.dispatch({
        action: 'start_login',
        params: params
      });

      _performance.default.instance.start(_performance.PerformanceEntryNames.LOGIN);
    } else if (screen === 'forgot_password') {
      _dispatcher.default.dispatch({
        action: 'start_password_recovery',
        params: params
      });
    } else if (screen === 'soft_logout') {
      if (cli.getUserId() && !Lifecycle.isSoftLogout()) {
        // Logged in - visit a room
        this.viewLastRoom();
      } else {
        // Ultimately triggers soft_logout if needed
        _dispatcher.default.dispatch({
          action: 'start_login',
          params: params
        });
      }
    } else if (screen === 'new') {
      _dispatcher.default.dispatch({
        action: 'view_create_room'
      });
    } else if (screen === 'settings') {
      _dispatcher.default.fire(_actions.Action.ViewUserSettings);
    } else if (screen === 'welcome') {
      _dispatcher.default.dispatch({
        action: 'view_welcome_page'
      });
    } else if (screen === 'home') {
      _dispatcher.default.dispatch({
        action: 'view_home_page'
      });
    } else if (screen === 'start') {
      this.showScreen('home');

      _dispatcher.default.dispatch({
        action: 'require_registration'
      });
    } else if (screen === 'directory') {
      if (this.state.view === Views.WELCOME) {
        _CountlyAnalytics.default.instance.track("onboarding_room_directory");
      }

      _dispatcher.default.fire(_actions.Action.ViewRoomDirectory);
    } else if (screen === "start_sso" || screen === "start_cas") {
      // TODO if logged in, skip SSO
      let cli = _MatrixClientPeg.MatrixClientPeg.get();

      if (!cli) {
        const {
          hsUrl,
          isUrl
        } = this.props.serverConfig;
        cli = (0, _matrix.createClient)({
          baseUrl: hsUrl,
          idBaseUrl: isUrl
        });
      }

      const type = screen === "start_sso" ? "sso" : "cas";

      _PlatformPeg.default.get().startSingleSignOn(cli, type, this.getFragmentAfterLogin());
    } else if (screen === 'groups') {
      if (_SpaceStore.default.spacesEnabled) {
        _dispatcher.default.dispatch({
          action: "view_home_page"
        });

        return;
      }

      _dispatcher.default.dispatch({
        action: 'view_my_groups'
      });
    } else if (screen.indexOf('room/') === 0) {
      var _threepidInvite, _threepidInvite2, _threepidInvite3;

      // Rooms can have the following formats:
      // #room_alias:domain or !opaque_id:domain
      const room = screen.substring(5);
      const domainOffset = room.indexOf(':') + 1; // 0 in case room does not contain a :

      let eventOffset = room.length; // room aliases can contain slashes only look for slash after domain

      if (room.substring(domainOffset).indexOf('/') > -1) {
        eventOffset = domainOffset + room.substring(domainOffset).indexOf('/');
      }

      const roomString = room.substring(0, eventOffset);
      let eventId = room.substring(eventOffset + 1); // empty string if no event id given
      // Previously we pulled the eventID from the segments in such a way
      // where if there was no eventId then we'd get undefined. However, we
      // now do a splice and join to handle v3 event IDs which results in
      // an empty string. To maintain our potential contract with the rest
      // of the app, we coerce the eventId to be undefined where applicable.

      if (!eventId) eventId = undefined; // TODO: Handle encoded room/event IDs: https://github.com/vector-im/element-web/issues/9149

      let threepidInvite; // if we landed here from a 3PID invite, persist it

      if (params.signurl && params.email) {
        threepidInvite = _ThreepidInviteStore.default.instance.storeInvite(roomString, params);
      } // otherwise check that this room doesn't already have a known invite


      if (!threepidInvite) {
        const invites = _ThreepidInviteStore.default.instance.getInvites();

        threepidInvite = invites.find(invite => invite.roomId === roomString);
      } // on our URLs there might be a ?via=matrix.org or similar to help
      // joins to the room succeed. We'll pass these through as an array
      // to other levels. If there's just one ?via= then params.via is a
      // single string. If someone does something like ?via=one.com&via=two.com
      // then params.via is an array of strings.


      let via = [];

      if (params.via) {
        if (typeof params.via === 'string') via = [params.via];else via = params.via;
      }

      const payload = {
        action: _actions.Action.ViewRoom,
        event_id: eventId,
        via_servers: via,
        // If an event ID is given in the URL hash, notify RoomViewStore to mark
        // it as highlighted, which will propagate to RoomView and highlight the
        // associated EventTile.
        highlighted: Boolean(eventId),
        threepid_invite: threepidInvite,
        // TODO: Replace oob_data with the threepidInvite (which has the same info).
        // This isn't done yet because it's threaded through so many more places.
        // See https://github.com/vector-im/element-web/issues/15157
        oob_data: {
          name: (_threepidInvite = threepidInvite) === null || _threepidInvite === void 0 ? void 0 : _threepidInvite.roomName,
          avatarUrl: (_threepidInvite2 = threepidInvite) === null || _threepidInvite2 === void 0 ? void 0 : _threepidInvite2.roomAvatarUrl,
          inviterName: (_threepidInvite3 = threepidInvite) === null || _threepidInvite3 === void 0 ? void 0 : _threepidInvite3.inviterName
        },
        room_alias: undefined,
        room_id: undefined
      };

      if (roomString[0] === '#') {
        payload.room_alias = roomString;
      } else {
        payload.room_id = roomString;
      }

      _dispatcher.default.dispatch(payload);
    } else if (screen.indexOf('user/') === 0) {
      const userId = screen.substring(5);

      _dispatcher.default.dispatch({
        action: 'view_user_info',
        userId: userId,
        subAction: params.action
      });
    } else if (screen.indexOf('group/') === 0) {
      const groupId = screen.substring(6); // TODO: Check valid group ID

      _dispatcher.default.dispatch({
        action: 'view_group',
        group_id: groupId
      });
    } else {
      _logger.logger.info("Ignoring showScreen for '%s'", screen);
    }
  }

  notifyNewScreen(screen, replaceLast = false) {
    if (this.props.onNewScreen) {
      this.props.onNewScreen(screen, replaceLast);
    }

    this.setPageSubtitle();
  }

  onAliasClick(event, alias) {
    event.preventDefault();

    _dispatcher.default.dispatch({
      action: _actions.Action.ViewRoom,
      room_alias: alias
    });
  }

  onUserClick(event, userId) {
    event.preventDefault();
    const member = new _roomMember.RoomMember(null, userId);

    if (!member) {
      return;
    }

    _dispatcher.default.dispatch({
      action: _actions.Action.ViewUser,
      member: member
    });
  }

  onGroupClick(event, groupId) {
    event.preventDefault();

    _dispatcher.default.dispatch({
      action: 'view_group',
      group_id: groupId
    });
  }

  onLogoutClick(event) {
    _dispatcher.default.dispatch({
      action: 'logout'
    });

    event.stopPropagation();
    event.preventDefault();
  }

  dispatchTimelineResize() {
    _dispatcher.default.dispatch({
      action: 'timeline_resize'
    });
  }

  // returns a promise which resolves to the new MatrixClient
  onRegistered(credentials) {
    return Lifecycle.setLoggedIn(credentials);
  }

  onSendEvent(roomId, event) {
    const cli = _MatrixClientPeg.MatrixClientPeg.get();

    if (!cli) return;
    cli.sendEvent(roomId, event.getType(), event.getContent()).then(() => {
      _dispatcher.default.dispatch({
        action: 'message_sent'
      });
    });
  }

  setPageSubtitle(subtitle = '') {
    if (this.state.currentRoomId) {
      const client = _MatrixClientPeg.MatrixClientPeg.get();

      const room = client && client.getRoom(this.state.currentRoomId);

      if (room) {
        subtitle = `${this.subTitleStatus} | ${room.name} ${subtitle}`;
      }
    } else {
      subtitle = `${this.subTitleStatus} ${subtitle}`;
    }

    const title = `${_SdkConfig.default.get().brand} ${subtitle}`;

    if (document.title !== title) {
      document.title = title;
    }
  }

  updateStatusIndicator(state, prevState) {
    const notificationState = _RoomNotificationStateStore.RoomNotificationStateStore.instance.globalState;
    const numUnreadRooms = notificationState.numUnreadStates; // we know that states === rooms here

    if (_PlatformPeg.default.get()) {
      _PlatformPeg.default.get().setErrorStatus(state === 'ERROR');

      _PlatformPeg.default.get().setNotificationCount(numUnreadRooms);
    }

    this.subTitleStatus = '';

    if (state === "ERROR") {
      this.subTitleStatus += `[${(0, _languageHandler._t)("Offline")}] `;
    }

    if (numUnreadRooms > 0) {
      this.subTitleStatus += `[${numUnreadRooms}]`;
    }

    this.setPageSubtitle();
  }

  onCloseAllSettings() {
    _dispatcher.default.dispatch({
      action: 'close_settings'
    });
  }

  getFragmentAfterLogin() {
    let fragmentAfterLogin = "";
    const initialScreenAfterLogin = this.props.initialScreenAfterLogin;

    if (initialScreenAfterLogin && // XXX: workaround for https://github.com/vector-im/element-web/issues/11643 causing a login-loop
    !["welcome", "login", "register", "start_sso", "start_cas"].includes(initialScreenAfterLogin.screen)) {
      fragmentAfterLogin = `/${initialScreenAfterLogin.screen}`;
    }

    return fragmentAfterLogin;
  }

  render() {
    const fragmentAfterLogin = this.getFragmentAfterLogin();
    let view = null;

    if (this.state.view === Views.LOADING) {
      view = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_MatrixChat_splash"
      }, /*#__PURE__*/_react.default.createElement(_Spinner.default, null));
    } else if (this.state.view === Views.COMPLETE_SECURITY) {
      view = /*#__PURE__*/_react.default.createElement(_CompleteSecurity.default, {
        onFinished: this.onCompleteSecurityE2eSetupFinished
      });
    } else if (this.state.view === Views.E2E_SETUP) {
      view = /*#__PURE__*/_react.default.createElement(_E2eSetup.default, {
        onFinished: this.onCompleteSecurityE2eSetupFinished,
        accountPassword: this.accountPassword,
        tokenLogin: !!this.tokenLogin
      });
    } else if (this.state.view === Views.LOGGED_IN) {
      // store errors stop the client syncing and require user intervention, so we'll
      // be showing a dialog. Don't show anything else.
      const isStoreError = this.state.syncError && this.state.syncError instanceof _errors.InvalidStoreError; // `ready` and `view==LOGGED_IN` may be set before `page_type` (because the
      // latter is set via the dispatcher). If we don't yet have a `page_type`,
      // keep showing the spinner for now.

      if (this.state.ready && this.state.page_type && !isStoreError) {
        /* for now, we stuff the entirety of our props and state into the LoggedInView.
         * we should go through and figure out what we actually need to pass down, as well
         * as using something like redux to avoid having a billion bits of state kicking around.
         */
        view = /*#__PURE__*/_react.default.createElement(_LoggedInView.default, (0, _extends2.default)({}, this.props, this.state, {
          ref: this.loggedInView,
          matrixClient: _MatrixClientPeg.MatrixClientPeg.get(),
          onRegistered: this.onRegistered,
          currentRoomId: this.state.currentRoomId
        }));
      } else {
        // we think we are logged in, but are still waiting for the /sync to complete
        let errorBox;

        if (this.state.syncError && !isStoreError) {
          errorBox = /*#__PURE__*/_react.default.createElement("div", {
            className: "mx_MatrixChat_syncError"
          }, (0, _ErrorUtils.messageForSyncError)(this.state.syncError));
        }

        view = /*#__PURE__*/_react.default.createElement("div", {
          className: "mx_MatrixChat_splash"
        }, errorBox, /*#__PURE__*/_react.default.createElement(_Spinner.default, null), /*#__PURE__*/_react.default.createElement("a", {
          href: "#",
          className: "mx_MatrixChat_splashButtons",
          onClick: this.onLogoutClick
        }, (0, _languageHandler._t)('Logout')));
      }
    } else if (this.state.view === Views.WELCOME) {
      view = /*#__PURE__*/_react.default.createElement(_Welcome.default, null);
    } else if (this.state.view === Views.REGISTER && _SettingsStore.default.getValue(_UIFeature.UIFeature.Registration)) {
      var _ThreepidInviteStore$;

      const email = (_ThreepidInviteStore$ = _ThreepidInviteStore.default.instance.pickBestInvite()) === null || _ThreepidInviteStore$ === void 0 ? void 0 : _ThreepidInviteStore$.toEmail;
      view = /*#__PURE__*/_react.default.createElement(_Registration2.default, (0, _extends2.default)({
        clientSecret: this.state.register_client_secret,
        sessionId: this.state.register_session_id,
        idSid: this.state.register_id_sid,
        email: email,
        brand: this.props.config.brand,
        makeRegistrationUrl: this.makeRegistrationUrl,
        onLoggedIn: this.onRegisterFlowComplete,
        onLoginClick: this.onLoginClick,
        onServerConfigChange: this.onServerConfigChange,
        defaultDeviceDisplayName: this.props.defaultDeviceDisplayName,
        fragmentAfterLogin: fragmentAfterLogin
      }, this.getServerProperties()));
    } else if (this.state.view === Views.FORGOT_PASSWORD && _SettingsStore.default.getValue(_UIFeature.UIFeature.PasswordReset)) {
      view = /*#__PURE__*/_react.default.createElement(_ForgotPassword.default, (0, _extends2.default)({
        onComplete: this.onLoginClick,
        onLoginClick: this.onLoginClick,
        onServerConfigChange: this.onServerConfigChange
      }, this.getServerProperties()));
    } else if (this.state.view === Views.LOGIN) {
      const showPasswordReset = _SettingsStore.default.getValue(_UIFeature.UIFeature.PasswordReset);

      view = /*#__PURE__*/_react.default.createElement(_Login.default, (0, _extends2.default)({
        isSyncing: this.state.pendingInitialSync,
        onLoggedIn: this.onUserCompletedLoginFlow,
        onRegisterClick: this.onRegisterClick,
        fallbackHsUrl: this.getFallbackHsUrl(),
        defaultDeviceDisplayName: this.props.defaultDeviceDisplayName,
        onForgotPasswordClick: showPasswordReset ? this.onForgotPasswordClick : undefined,
        onServerConfigChange: this.onServerConfigChange,
        fragmentAfterLogin: fragmentAfterLogin,
        defaultUsername: this.props.startingFragmentQueryParams.defaultUsername
      }, this.getServerProperties()));
    } else if (this.state.view === Views.SOFT_LOGOUT) {
      view = /*#__PURE__*/_react.default.createElement(_SoftLogout.default, {
        realQueryParams: this.props.realQueryParams,
        onTokenLoginCompleted: this.props.onTokenLoginCompleted,
        fragmentAfterLogin: fragmentAfterLogin
      });
    } else {
      _logger.logger.error(`Unknown view ${this.state.view}`);
    }

    return /*#__PURE__*/_react.default.createElement(_ErrorBoundary.default, null, view);
  }

}, (0, _defineProperty2.default)(_class2, "displayName", "MatrixChat"), (0, _defineProperty2.default)(_class2, "defaultProps", {
  realQueryParams: {},
  startingFragmentQueryParams: {},
  config: {},
  onTokenLoginCompleted: () => {}
}), _temp)) || _class);
exports.default = MatrixChat;

function isLoggedIn() {
  // JRS: Maybe we should move the step that writes this to the window out of
  // `element-web` and into this file? Better yet, we should probably create a
  // store to hold this state.
  // See also https://github.com/vector-im/element-web/issues/15034.
  const app = window.matrixChat;
  return app && app.state.view === Views.LOGGED_IN;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3N0cnVjdHVyZXMvTWF0cml4Q2hhdC50c3giXSwibmFtZXMiOlsiVmlld3MiLCJBVVRIX1NDUkVFTlMiLCJPTkJPQVJESU5HX0ZMT1dfU1RBUlRFUlMiLCJBY3Rpb24iLCJWaWV3VXNlclNldHRpbmdzIiwiTWF0cml4Q2hhdCIsIlJlYWN0IiwiUHVyZUNvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwicHJvcHMiLCJjb250ZXh0IiwicGF5bG9hZCIsIk1hdHJpeENsaWVudFBlZyIsImdldCIsImlzR3Vlc3QiLCJpbmNsdWRlcyIsImFjdGlvbiIsImRpcyIsImRpc3BhdGNoIiwiZGVmZXJyZWRfYWN0aW9uIiwiZXZlbnRfdHlwZSIsImZ1bGxVcmwiLCJldmVudF9jb250ZW50Iiwic2V0SWRlbnRpdHlTZXJ2ZXJVcmwiLCJsb2NhbFN0b3JhZ2UiLCJyZW1vdmVJdGVtIiwic2V0SXRlbSIsIkxpZmVjeWNsZSIsImxvZ291dCIsImlzU29mdExvZ291dCIsIm9uU29mdExvZ291dCIsInNjcmVlbkFmdGVyTG9naW4iLCJzdGFydFJlZ2lzdHJhdGlvbiIsInBhcmFtcyIsInZpZXdMb2dpbiIsInNldFN0YXRlRm9yTmV3VmlldyIsInZpZXciLCJGT1JHT1RfUEFTU1dPUkQiLCJub3RpZnlOZXdTY3JlZW4iLCJkbVVzZXJJZCIsInVzZXJfaWQiLCJsZWF2ZVJvb20iLCJyb29tX2lkIiwiZm9yZ2V0Um9vbSIsImNvcHlSb29tIiwiTW9kYWwiLCJjcmVhdGVUcmFja2VkRGlhbG9nIiwiUXVlc3Rpb25EaWFsb2ciLCJ0aXRsZSIsImRlc2NyaXB0aW9uIiwib25GaW5pc2hlZCIsImNvbmZpcm0iLCJtb2RhbCIsImNyZWF0ZURpYWxvZyIsIlNwaW5uZXIiLCJsZWF2ZSIsInRoZW4iLCJjbG9zZSIsInN0YXRlIiwiY3VycmVudFJvb21JZCIsImVyciIsIkVycm9yRGlhbG9nIiwidG9TdHJpbmciLCJ2aWV3VXNlciIsInVzZXJJZCIsInN1YkFjdGlvbiIsIlZpZXdSb29tIiwicHJvbWlzZSIsInZpZXdSb29tIiwidGFiUGF5bG9hZCIsIlVzZXJTZXR0aW5nc0RpYWxvZyIsImluaXRpYWxUYWJJZCIsInZpZXdTb21ldGhpbmdCZWhpbmRNb2RhbCIsImNyZWF0ZVJvb20iLCJwdWJsaWMiLCJkZWZhdWx0TmFtZSIsInByb3RvdHlwZSIsIlNldHRpbmdzU3RvcmUiLCJnZXRWYWx1ZSIsIkNyZWF0ZUNvbW11bml0eVByb3RvdHlwZURpYWxvZyIsIkNyZWF0ZUdyb3VwRGlhbG9nIiwiVmlld1Jvb21EaXJlY3RvcnkiLCJTcGFjZVN0b3JlIiwiaW5zdGFuY2UiLCJhY3RpdmVTcGFjZSIsImRlZmF1bHREaXNwYXRjaGVyIiwiUm9vbURpcmVjdG9yeSIsImluaXRpYWxUZXh0Iiwic2V0UGFnZSIsIlBhZ2VUeXBlIiwiTXlHcm91cHMiLCJ2aWV3R3JvdXAiLCJ2aWV3V2VsY29tZSIsInZpZXdIb21lIiwianVzdFJlZ2lzdGVyZWQiLCJjaGF0Q3JlYXRlT3JSZXVzZSIsInJvb20iLCJnZXRSb29tIiwicm9vbUlkIiwiaXNTcGFjZVJvb20iLCJzaG93U2NyZWVuQWZ0ZXJMb2dpbiIsInBhZ2VfdHlwZSIsInNldFN0YXRlIiwiY29sbGFwc2VMaHMiLCJyZXNpemVOb3RpZmllciIsIm5vdGlmeUxlZnRIYW5kbGVSZXNpemVkIiwiT3BlbkRpYWxQYWQiLCJEaWFsUGFkTW9kYWwiLCJ0b2tlbkxvZ2luIiwiTE9HSU4iLCJSRUdJU1RFUiIsIkNPTVBMRVRFX1NFQ1VSSVRZIiwiRTJFX1NFVFVQIiwib25Mb2dnZWRJbiIsIm9uTG9nZ2VkT3V0IiwicmVhZHkiLCJvbldpbGxTdGFydENsaWVudCIsIm9uQ2xpZW50U3RhcnRlZCIsIm9uU2VuZEV2ZW50IiwiZXZlbnQiLCJoaWRlVG9TUlVzZXJzIiwic2V0VmFsdWUiLCJTZXR0aW5nTGV2ZWwiLCJERVZJQ0UiLCJBbmFseXRpY3MiLCJjYW5FbmFibGUiLCJlbmFibGUiLCJDb3VudGx5QW5hbHl0aWNzIiwiTEhTX1RIUkVTSE9MRCIsIndpZHRoIiwiVUlTdG9yZSIsIndpbmRvd1dpZHRoIiwicHJldldpbmRvd1dpZHRoIiwibm90aWZ5V2luZG93UmVzaXplZCIsInNob3dTY3JlZW4iLCJjcmVkZW50aWFscyIsInBhc3N3b3JkIiwib25Vc2VyQ29tcGxldGVkTG9naW5GbG93Iiwic2VydmVyQ29uZmlnIiwic3RhcnRpbmdGcmFnbWVudFF1ZXJ5UGFyYW1zIiwicmVmZXJyZXIiLCJtYWtlUmVnaXN0cmF0aW9uVXJsIiwiYWNjb3VudFBhc3N3b3JkIiwiYWNjb3VudFBhc3N3b3JkVGltZXIiLCJjbGVhclRpbWVvdXQiLCJzZXRUaW1lb3V0Iiwic2V0TG9nZ2VkSW4iLCJwb3N0TG9naW5TZXR1cCIsIlBlcmZvcm1hbmNlTW9uaXRvciIsInN0b3AiLCJQZXJmb3JtYW5jZUVudHJ5TmFtZXMiLCJMT0FESU5HIiwic3luY0Vycm9yIiwiUmVzaXplTm90aWZpZXIiLCJsb2dnZWRJblZpZXciLCJTZGtDb25maWciLCJwdXQiLCJjb25maWciLCJmaXJzdFN5bmNDb21wbGV0ZSIsImZpcnN0U3luY1Byb21pc2UiLCJzeW5jX3RpbWVsaW5lX2xpbWl0Iiwib3B0cyIsImluaXRpYWxTeW5jTGltaXQiLCJpbml0aWFsU2NyZWVuQWZ0ZXJMb2dpbiIsInNjcmVlbiIsInN0YXJ0c1dpdGgiLCJzdWJzdHJpbmciLCJsZW5ndGgiLCJUaHJlZXBpZEludml0ZVN0b3JlIiwic3RvcmVJbnZpdGUiLCJvbiIsIlVJX0VWRU5UUyIsIlJlc2l6ZSIsImhhbmRsZVJlc2l6ZSIsInBhZ2VDaGFuZ2luZyIsImRpc3BhdGNoVGltZWxpbmVSZXNpemUiLCJsb2FkU2Vzc2lvbiIsImRpc3BhdGNoZXJSZWYiLCJyZWdpc3RlciIsIm9uQWN0aW9uIiwidGhlbWVXYXRjaGVyIiwiVGhlbWVXYXRjaGVyIiwiZm9udFdhdGNoZXIiLCJGb250V2F0Y2hlciIsInN0YXJ0IiwiZm9jdXNDb21wb3NlciIsInN1YlRpdGxlU3RhdHVzIiwib25BbGlhc0NsaWNrIiwibGlua2lmeU1hdHJpeCIsIm9uVXNlckNsaWNrIiwib25Hcm91cENsaWNrIiwiYXR0ZW1wdFRva2VuTG9naW4iLCJyZWFsUXVlcnlQYXJhbXMiLCJkZWZhdWx0RGV2aWNlRGlzcGxheU5hbWUiLCJnZXRGcmFnbWVudEFmdGVyTG9naW4iLCJsb2dnZWRJbiIsImxvZ2luVG9rZW4iLCJvblRva2VuTG9naW5Db21wbGV0ZWQiLCJyZXN0b3JlRnJvbUxvY2FsU3RvcmFnZSIsImlnbm9yZUd1ZXN0IiwiZmlyc3RTY3JlZW4iLCJQb3N0aG9nQW5hbHl0aWNzIiwidXBkYXRlQW5vbnltaXR5RnJvbVNldHRpbmdzIiwidXBkYXRlUGxhdGZvcm1TdXBlclByb3BlcnRpZXMiLCJjbGkiLCJjcnlwdG9FbmFibGVkIiwiaXNDcnlwdG9FbmFibGVkIiwicHJvbWlzZXNMaXN0IiwicHVzaCIsImRvd25sb2FkS2V5cyIsImdldFVzZXJJZCIsInBlbmRpbmdJbml0aWFsU3luYyIsIlByb21pc2UiLCJhbGwiLCJjcm9zc1NpZ25pbmdJc1NldFVwIiwiZ2V0U3RvcmVkQ3Jvc3NTaWduaW5nRm9yVXNlciIsIlNlY3VyaXR5Q3VzdG9taXNhdGlvbnMiLCJTSE9XX0VOQ1JZUFRJT05fU0VUVVBfVUkiLCJkb2VzU2VydmVyU3VwcG9ydFVuc3RhYmxlRmVhdHVyZSIsIlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlIiwic2hvdWxkVHJhY2tQYWdlQ2hhbmdlIiwic3RhcnRQYWdlQ2hhbmdlVGltZXIiLCJjb21wb25lbnREaWRVcGRhdGUiLCJwcmV2UHJvcHMiLCJwcmV2U3RhdGUiLCJkdXJhdGlvbk1zIiwic3RvcFBhZ2VDaGFuZ2VUaW1lciIsInRyYWNrUGFnZUNoYW5nZSIsInRyYWNrUGFnZVZpZXciLCJmaXJlIiwiRm9jdXNTZW5kTWVzc2FnZUNvbXBvc2VyIiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJzdG9wTWF0cml4Q2xpZW50IiwidW5yZWdpc3RlciIsImRlc3Ryb3kiLCJyZW1vdmVMaXN0ZW5lciIsImdldEZhbGxiYWNrSHNVcmwiLCJpc0RlZmF1bHQiLCJmYWxsYmFja19oc191cmwiLCJnZXRTZXJ2ZXJQcm9wZXJ0aWVzIiwicmVzb2x2ZSIsImZyYWdtZW50UXVlcnlQYXJhbXMiLCJlbmFibGVHdWVzdCIsImd1ZXN0SHNVcmwiLCJoc1VybCIsImd1ZXN0SXNVcmwiLCJpc1VybCIsImxvYWRlZFNlc3Npb24iLCJwaWNrQmVzdEludml0ZSIsIlBBR0VfQ0hBTkdFIiwicGVyZk1vbml0b3IiLCJlbnRyaWVzIiwiZ2V0RW50cmllcyIsIm5hbWUiLCJtZWFzdXJlbWVudCIsInBvcCIsImR1cmF0aW9uIiwidW5kZWZpbmVkIiwiRXJyb3IiLCJuZXdTdGF0ZSIsImN1cnJlbnRVc2VySWQiLCJPYmplY3QiLCJhc3NpZ24iLCJwYWdlVHlwZSIsImNsaWVudF9zZWNyZXQiLCJzZXNzaW9uX2lkIiwiaHNfdXJsIiwiaXNfdXJsIiwic2lkIiwiQXV0b0Rpc2NvdmVyeVV0aWxzIiwidmFsaWRhdGVTZXJ2ZXJDb25maWdXaXRoU3RhdGljVXJscyIsImRlZmF1bHRDb25maWciLCJoc05hbWUiLCJoc05hbWVJc0RpZmZlcmVudCIsImlzTmFtZVJlc29sdmFibGUiLCJyZWdpc3Rlcl9jbGllbnRfc2VjcmV0IiwicmVnaXN0ZXJfc2Vzc2lvbl9pZCIsInJlZ2lzdGVyX2lkX3NpZCIsIlRoZW1lQ29udHJvbGxlciIsImlzTG9naW4iLCJyZWNoZWNrIiwicm9vbUluZm8iLCJyb29tX2FsaWFzIiwibG9nZ2VyIiwibG9nIiwiZXZlbnRfaWQiLCJ3YWl0Rm9yIiwid2FybiIsInByZXNlbnRlZElkIiwiZGVjcnlwdEFsbEV2ZW50cyIsInRoZUFsaWFzIiwiUm9vbXMiLCJnZXREaXNwbGF5QWxpYXNGb3JSb29tIiwicmVwbGFjZUxhc3QiLCJoaWdobGlnaHRlZCIsIkxPR0dFRF9JTiIsIlJvb21WaWV3IiwidGhyZWVwaWRJbnZpdGUiLCJ0aHJlZXBpZF9pbnZpdGUiLCJyb29tT29iRGF0YSIsIm9vYl9kYXRhIiwiZm9yY2VUaW1lbGluZSIsInJvb21KdXN0Q3JlYXRlZE9wdHMiLCJqdXN0Q3JlYXRlZE9wdHMiLCJncm91cElkIiwiZ3JvdXBfaWQiLCJjdXJyZW50R3JvdXBJZCIsImN1cnJlbnRHcm91cElzTmV3IiwiZ3JvdXBfaXNfbmV3IiwiR3JvdXBWaWV3IiwiV0VMQ09NRSIsIm90aGVyU3RhdGUiLCJIb21lUGFnZSIsIndhaXRGb3JTeW5jIiwiVXNlclZpZXciLCJkZWZhdWx0UHVibGljIiwiY29tbXVuaXR5SWQiLCJDb21tdW5pdHlQcm90b3R5cGVTdG9yZSIsImdldFNlbGVjdGVkQ29tbXVuaXR5SWQiLCJpc0FkbWluT2YiLCJDcmVhdGVSb29tRGlhbG9nIiwic2hvdWxkQ3JlYXRlIiwiZmluaXNoZWQiLCJ3ZWxjb21lVXNlcklkIiwiZ29fd2VsY29tZV9vbl9jYW5jZWwiLCJzY3JlZW5fYWZ0ZXIiLCJjbGllbnQiLCJkbVJvb21NYXAiLCJETVJvb21NYXAiLCJkbVJvb21zIiwiZ2V0RE1Sb29tc0ZvclVzZXJJZCIsImxlYXZlUm9vbVdhcm5pbmdzIiwicm9vbVRvTGVhdmUiLCJpc1NwYWNlIiwic3BhY2VzRW5hYmxlZCIsIndhcm5pbmdzIiwibWVtYmVyQ291bnQiLCJjdXJyZW50U3RhdGUiLCJnZXRKb2luZWRNZW1iZXJDb3VudCIsImpvaW5SdWxlcyIsImdldFN0YXRlRXZlbnRzIiwicnVsZSIsImdldENvbnRlbnQiLCJqb2luX3J1bGUiLCJzcGFjZU5hbWUiLCJyb29tTmFtZSIsImJ1dHRvbiIsInNob3VsZExlYXZlIiwiZCIsImZpbmFsbHkiLCJmb3JnZXQiLCJSb29tTGlzdFN0b3JlIiwibWFudWFsUm9vbVVwZGF0ZSIsIlJvb21VcGRhdGVDYXVzZSIsIlJvb21SZW1vdmVkIiwiY2F0Y2giLCJlcnJDb2RlIiwiZXJyY29kZSIsIm1lc3NhZ2UiLCJyb29tTGluayIsInN1Y2Nlc3MiLCJzdGFydFdlbGNvbWVVc2VyQ2hhdCIsIndlbGNvbWVVc2VyUm9vbXMiLCJzaGFyZWQiLCJhbmRWaWV3Iiwic3Bpbm5lciIsInNhdmVXZWxjb21lVXNlciIsImV2IiwiZ2V0VHlwZSIsInN0b3JlIiwic2F2ZSIsImN1cnJlbnRVc2VySXNKdXN0UmVnaXN0ZXJlZCIsInNldEp1c3RSZWdpc3RlcmVkVXNlcklkIiwid2VsY29tZVVzZXJSb29tIiwidHJhbnNsYXRlVG9XaXJlRm9ybWF0IiwiU3RvcmFnZU1hbmFnZXIiLCJ0cnlQZXJzaXN0U3RvcmFnZSIsInBpd2lrIiwicG9saWN5VXJsIiwibW9iaWxlR3VpZGVUb2FzdCIsImdldEl0ZW0iLCJ2aWV3TGFzdFJvb20iLCJzZXRQYWdlU3VidGl0bGUiLCJTT0ZUX0xPR09VVCIsInNldENhblJlc2V0VGltZWxpbmVDYWxsYmFjayIsImN1cnJlbnQiLCJjYW5SZXNldFRpbWVsaW5lSW5Sb29tIiwiZGF0YSIsImVycm9yIiwiSW52YWxpZFN0b3JlRXJyb3IiLCJoYW5kbGVJbnZhbGlkU3RvcmVFcnJvciIsInVwZGF0ZVN0YXR1c0luZGljYXRvciIsImluZm8iLCJOb3RpZmllciIsInNob3VsZFNob3dQcm9tcHQiLCJ1c2VyUmVnaXN0ZXJlZFdpdGhpbkxhc3RIb3VycyIsImVyck9iaiIsImlzTG9nZ2luZ091dCIsImNsb3NlQ3VycmVudE1vZGFsIiwiaHR0cFN0YXR1cyIsInNvZnRMb2dvdXQiLCJjb25zZW50VXJpIiwiaG9tZXNlcnZlckRvbWFpbiIsImdldERvbWFpbiIsImNhbmNlbEJ1dHRvbiIsImNvbmZpcm1lZCIsInduZCIsIndpbmRvdyIsIm9wZW4iLCJvcGVuZXIiLCJkZnQiLCJEZWNyeXB0aW9uRmFpbHVyZVRyYWNrZXIiLCJ0b3RhbCIsImVycm9yQ29kZSIsInRyYWNrRXZlbnQiLCJTdHJpbmciLCJ0cmFjayIsInN1bSIsImUiLCJldmVudERlY3J5cHRlZCIsImJsYWNrbGlzdEVuYWJsZWQiLCJnZXRWYWx1ZUF0IiwiUk9PTV9ERVZJQ0UiLCJzZXRCbGFja2xpc3RVbnZlcmlmaWVkRGV2aWNlcyIsInR5cGUiLCJicmFuZCIsImhhdmVOZXdWZXJzaW9uIiwibmV3VmVyc2lvbkluZm8iLCJnZXRLZXlCYWNrdXBFbmFibGVkIiwiZ2V0S2V5QmFja3VwVmVyc2lvbiIsImNyZWF0ZVRyYWNrZWREaWFsb2dBc3luYyIsImZhaWx1cmVzIiwic291cmNlIiwiY29udGludWF0aW9uIiwiS2V5U2lnbmF0dXJlVXBsb2FkRmFpbGVkRGlhbG9nIiwicmVxdWVzdCIsInZlcmlmaWVyIiwiSW5jb21pbmdTYXNEaWFsb2ciLCJwZW5kaW5nIiwiVG9hc3RTdG9yZSIsInNoYXJlZEluc3RhbmNlIiwiYWRkT3JSZXBsYWNlVG9hc3QiLCJrZXkiLCJjaGFubmVsIiwidHJhbnNhY3Rpb25JZCIsImljb24iLCJjb21wb25lbnQiLCJWZXJpZmljYXRpb25SZXF1ZXN0VG9hc3QiLCJwcmlvcml0eSIsInNldEdsb2JhbEJsYWNrbGlzdFVudmVyaWZpZWREZXZpY2VzIiwic2V0R2xvYmFsRXJyb3JPblVua25vd25EZXZpY2VzIiwiaXNMb2dnZWRPdXRPckd1ZXN0IiwiYmFzZVVybCIsImlkQmFzZVVybCIsIlBsYXRmb3JtUGVnIiwic3RhcnRTaW5nbGVTaWduT24iLCJpbmRleE9mIiwiZG9tYWluT2Zmc2V0IiwiZXZlbnRPZmZzZXQiLCJyb29tU3RyaW5nIiwiZXZlbnRJZCIsInNpZ251cmwiLCJlbWFpbCIsImludml0ZXMiLCJnZXRJbnZpdGVzIiwiZmluZCIsImludml0ZSIsInZpYSIsInZpYV9zZXJ2ZXJzIiwiQm9vbGVhbiIsImF2YXRhclVybCIsInJvb21BdmF0YXJVcmwiLCJpbnZpdGVyTmFtZSIsIm9uTmV3U2NyZWVuIiwiYWxpYXMiLCJwcmV2ZW50RGVmYXVsdCIsIm1lbWJlciIsIlJvb21NZW1iZXIiLCJWaWV3VXNlciIsIm9uTG9nb3V0Q2xpY2siLCJzdG9wUHJvcGFnYXRpb24iLCJvblJlZ2lzdGVyZWQiLCJzZW5kRXZlbnQiLCJzdWJ0aXRsZSIsImRvY3VtZW50Iiwibm90aWZpY2F0aW9uU3RhdGUiLCJSb29tTm90aWZpY2F0aW9uU3RhdGVTdG9yZSIsImdsb2JhbFN0YXRlIiwibnVtVW5yZWFkUm9vbXMiLCJudW1VbnJlYWRTdGF0ZXMiLCJzZXRFcnJvclN0YXR1cyIsInNldE5vdGlmaWNhdGlvbkNvdW50Iiwib25DbG9zZUFsbFNldHRpbmdzIiwiZnJhZ21lbnRBZnRlckxvZ2luIiwicmVuZGVyIiwib25Db21wbGV0ZVNlY3VyaXR5RTJlU2V0dXBGaW5pc2hlZCIsImlzU3RvcmVFcnJvciIsImVycm9yQm94IiwiVUlGZWF0dXJlIiwiUmVnaXN0cmF0aW9uIiwidG9FbWFpbCIsIm9uUmVnaXN0ZXJGbG93Q29tcGxldGUiLCJvbkxvZ2luQ2xpY2siLCJvblNlcnZlckNvbmZpZ0NoYW5nZSIsIlBhc3N3b3JkUmVzZXQiLCJzaG93UGFzc3dvcmRSZXNldCIsIm9uUmVnaXN0ZXJDbGljayIsIm9uRm9yZ290UGFzc3dvcmRDbGljayIsImRlZmF1bHRVc2VybmFtZSIsImlzTG9nZ2VkSW4iLCJhcHAiLCJtYXRyaXhDaGF0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQWdCQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQTs7QUFHQTs7QUFFQTs7QUFFQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQTs7QUFDQTs7QUFFQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFHQTs7QUFDQTs7QUFJQTs7QUFFQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQTs7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MjAyMSBUaGUgTWF0cml4Lm9yZyBGb3VuZGF0aW9uIEMuSS5DLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnRUeXBlLCBjcmVhdGVSZWYgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjcmVhdGVDbGllbnQgfSBmcm9tIFwibWF0cml4LWpzLXNkay9zcmMvbWF0cml4XCI7XG5pbXBvcnQgeyBJbnZhbGlkU3RvcmVFcnJvciB9IGZyb20gXCJtYXRyaXgtanMtc2RrL3NyYy9lcnJvcnNcIjtcbmltcG9ydCB7IFJvb21NZW1iZXIgfSBmcm9tIFwibWF0cml4LWpzLXNkay9zcmMvbW9kZWxzL3Jvb20tbWVtYmVyXCI7XG5pbXBvcnQgeyBNYXRyaXhFdmVudCB9IGZyb20gXCJtYXRyaXgtanMtc2RrL3NyYy9tb2RlbHMvZXZlbnRcIjtcbmltcG9ydCB7IHNsZWVwLCBkZWZlciwgSURlZmVycmVkLCBRdWVyeURpY3QgfSBmcm9tIFwibWF0cml4LWpzLXNkay9zcmMvdXRpbHNcIjtcblxuLy8gZm9jdXMtdmlzaWJsZSBpcyBhIFBvbHlmaWxsIGZvciB0aGUgOmZvY3VzLXZpc2libGUgQ1NTIHBzZXVkby1hdHRyaWJ1dGUgdXNlZCBieSBfQWNjZXNzaWJsZUJ1dHRvbi5zY3NzXG5pbXBvcnQgJ2ZvY3VzLXZpc2libGUnO1xuLy8gd2hhdC1pbnB1dCBoZWxwcyBpbXByb3ZlIGtleWJvYXJkIGFjY2Vzc2liaWxpdHlcbmltcG9ydCAnd2hhdC1pbnB1dCc7XG5cbmltcG9ydCBBbmFseXRpY3MgZnJvbSBcIi4uLy4uL0FuYWx5dGljc1wiO1xuaW1wb3J0IENvdW50bHlBbmFseXRpY3MgZnJvbSBcIi4uLy4uL0NvdW50bHlBbmFseXRpY3NcIjtcbmltcG9ydCB7IERlY3J5cHRpb25GYWlsdXJlVHJhY2tlciB9IGZyb20gXCIuLi8uLi9EZWNyeXB0aW9uRmFpbHVyZVRyYWNrZXJcIjtcbmltcG9ydCB7IE1hdHJpeENsaWVudFBlZywgSU1hdHJpeENsaWVudENyZWRzIH0gZnJvbSBcIi4uLy4uL01hdHJpeENsaWVudFBlZ1wiO1xuaW1wb3J0IFBsYXRmb3JtUGVnIGZyb20gXCIuLi8uLi9QbGF0Zm9ybVBlZ1wiO1xuaW1wb3J0IFNka0NvbmZpZyBmcm9tIFwiLi4vLi4vU2RrQ29uZmlnXCI7XG5pbXBvcnQgZGlzIGZyb20gXCIuLi8uLi9kaXNwYXRjaGVyL2Rpc3BhdGNoZXJcIjtcbmltcG9ydCBOb3RpZmllciBmcm9tICcuLi8uLi9Ob3RpZmllcic7XG5cbmltcG9ydCBNb2RhbCBmcm9tIFwiLi4vLi4vTW9kYWxcIjtcbmltcG9ydCB7IHNob3dSb29tSW52aXRlRGlhbG9nLCBzaG93U3RhcnRDaGF0SW52aXRlRGlhbG9nIH0gZnJvbSAnLi4vLi4vUm9vbUludml0ZSc7XG5pbXBvcnQgKiBhcyBSb29tcyBmcm9tICcuLi8uLi9Sb29tcyc7XG5pbXBvcnQgbGlua2lmeU1hdHJpeCBmcm9tIFwiLi4vLi4vbGlua2lmeS1tYXRyaXhcIjtcbmltcG9ydCAqIGFzIExpZmVjeWNsZSBmcm9tICcuLi8uLi9MaWZlY3ljbGUnO1xuLy8gTGlmZWN5Y2xlU3RvcmUgaXMgbm90IHVzZWQgYnV0IGRvZXMgbGlzdGVuIHRvIGFuZCBkaXNwYXRjaCBhY3Rpb25zXG5pbXBvcnQgJy4uLy4uL3N0b3Jlcy9MaWZlY3ljbGVTdG9yZSc7XG5pbXBvcnQgUGFnZVR5cGUgZnJvbSAnLi4vLi4vUGFnZVR5cGVzJztcblxuaW1wb3J0IGNyZWF0ZVJvb20sIHsgSU9wdHMgfSBmcm9tIFwiLi4vLi4vY3JlYXRlUm9vbVwiO1xuaW1wb3J0IHsgX3QsIF90ZCwgZ2V0Q3VycmVudExhbmd1YWdlIH0gZnJvbSAnLi4vLi4vbGFuZ3VhZ2VIYW5kbGVyJztcbmltcG9ydCBTZXR0aW5nc1N0b3JlIGZyb20gXCIuLi8uLi9zZXR0aW5ncy9TZXR0aW5nc1N0b3JlXCI7XG5pbXBvcnQgVGhlbWVDb250cm9sbGVyIGZyb20gXCIuLi8uLi9zZXR0aW5ncy9jb250cm9sbGVycy9UaGVtZUNvbnRyb2xsZXJcIjtcbmltcG9ydCB7IHN0YXJ0QW55UmVnaXN0cmF0aW9uRmxvdyB9IGZyb20gXCIuLi8uLi9SZWdpc3RyYXRpb25cIjtcbmltcG9ydCB7IG1lc3NhZ2VGb3JTeW5jRXJyb3IgfSBmcm9tICcuLi8uLi91dGlscy9FcnJvclV0aWxzJztcbmltcG9ydCBSZXNpemVOb3RpZmllciBmcm9tIFwiLi4vLi4vdXRpbHMvUmVzaXplTm90aWZpZXJcIjtcbmltcG9ydCBBdXRvRGlzY292ZXJ5VXRpbHMsIHsgVmFsaWRhdGVkU2VydmVyQ29uZmlnIH0gZnJvbSBcIi4uLy4uL3V0aWxzL0F1dG9EaXNjb3ZlcnlVdGlsc1wiO1xuaW1wb3J0IERNUm9vbU1hcCBmcm9tICcuLi8uLi91dGlscy9ETVJvb21NYXAnO1xuaW1wb3J0IFRoZW1lV2F0Y2hlciBmcm9tIFwiLi4vLi4vc2V0dGluZ3Mvd2F0Y2hlcnMvVGhlbWVXYXRjaGVyXCI7XG5pbXBvcnQgeyBGb250V2F0Y2hlciB9IGZyb20gJy4uLy4uL3NldHRpbmdzL3dhdGNoZXJzL0ZvbnRXYXRjaGVyJztcbmltcG9ydCB7IHN0b3JlUm9vbUFsaWFzSW5DYWNoZSB9IGZyb20gJy4uLy4uL1Jvb21BbGlhc0NhY2hlJztcbmltcG9ydCBUb2FzdFN0b3JlIGZyb20gXCIuLi8uLi9zdG9yZXMvVG9hc3RTdG9yZVwiO1xuaW1wb3J0ICogYXMgU3RvcmFnZU1hbmFnZXIgZnJvbSBcIi4uLy4uL3V0aWxzL1N0b3JhZ2VNYW5hZ2VyXCI7XG5pbXBvcnQgdHlwZSBMb2dnZWRJblZpZXdUeXBlIGZyb20gXCIuL0xvZ2dlZEluVmlld1wiO1xuaW1wb3J0IHsgVmlld1VzZXJQYXlsb2FkIH0gZnJvbSBcIi4uLy4uL2Rpc3BhdGNoZXIvcGF5bG9hZHMvVmlld1VzZXJQYXlsb2FkXCI7XG5pbXBvcnQgeyBBY3Rpb24gfSBmcm9tIFwiLi4vLi4vZGlzcGF0Y2hlci9hY3Rpb25zXCI7XG5pbXBvcnQge1xuICAgIHNob3dUb2FzdCBhcyBzaG93QW5hbHl0aWNzVG9hc3QsXG4gICAgaGlkZVRvYXN0IGFzIGhpZGVBbmFseXRpY3NUb2FzdCxcbn0gZnJvbSBcIi4uLy4uL3RvYXN0cy9BbmFseXRpY3NUb2FzdFwiO1xuaW1wb3J0IHsgc2hvd1RvYXN0IGFzIHNob3dOb3RpZmljYXRpb25zVG9hc3QgfSBmcm9tIFwiLi4vLi4vdG9hc3RzL0Rlc2t0b3BOb3RpZmljYXRpb25zVG9hc3RcIjtcbmltcG9ydCB7IE9wZW5Ub1RhYlBheWxvYWQgfSBmcm9tIFwiLi4vLi4vZGlzcGF0Y2hlci9wYXlsb2Fkcy9PcGVuVG9UYWJQYXlsb2FkXCI7XG5pbXBvcnQgRXJyb3JEaWFsb2cgZnJvbSBcIi4uL3ZpZXdzL2RpYWxvZ3MvRXJyb3JEaWFsb2dcIjtcbmltcG9ydCB7IFJvb21Ob3RpZmljYXRpb25TdGF0ZVN0b3JlIH0gZnJvbSBcIi4uLy4uL3N0b3Jlcy9ub3RpZmljYXRpb25zL1Jvb21Ob3RpZmljYXRpb25TdGF0ZVN0b3JlXCI7XG5pbXBvcnQgeyBTZXR0aW5nTGV2ZWwgfSBmcm9tIFwiLi4vLi4vc2V0dGluZ3MvU2V0dGluZ0xldmVsXCI7XG5pbXBvcnQgeyBsZWF2ZVJvb21CZWhhdmlvdXIgfSBmcm9tIFwiLi4vLi4vdXRpbHMvbWVtYmVyc2hpcFwiO1xuaW1wb3J0IENyZWF0ZUNvbW11bml0eVByb3RvdHlwZURpYWxvZyBmcm9tIFwiLi4vdmlld3MvZGlhbG9ncy9DcmVhdGVDb21tdW5pdHlQcm90b3R5cGVEaWFsb2dcIjtcbmltcG9ydCBUaHJlZXBpZEludml0ZVN0b3JlLCB7IElUaHJlZXBpZEludml0ZSwgSVRocmVlcGlkSW52aXRlV2lyZUZvcm1hdCB9IGZyb20gXCIuLi8uLi9zdG9yZXMvVGhyZWVwaWRJbnZpdGVTdG9yZVwiO1xuaW1wb3J0IHsgVUlGZWF0dXJlIH0gZnJvbSBcIi4uLy4uL3NldHRpbmdzL1VJRmVhdHVyZVwiO1xuaW1wb3J0IHsgQ29tbXVuaXR5UHJvdG90eXBlU3RvcmUgfSBmcm9tIFwiLi4vLi4vc3RvcmVzL0NvbW11bml0eVByb3RvdHlwZVN0b3JlXCI7XG5pbXBvcnQgRGlhbFBhZE1vZGFsIGZyb20gXCIuLi92aWV3cy92b2lwL0RpYWxQYWRNb2RhbFwiO1xuaW1wb3J0IHsgc2hvd1RvYXN0IGFzIHNob3dNb2JpbGVHdWlkZVRvYXN0IH0gZnJvbSAnLi4vLi4vdG9hc3RzL01vYmlsZUd1aWRlVG9hc3QnO1xuaW1wb3J0IHsgc2hvdWxkVXNlTG9naW5Gb3JXZWxjb21lIH0gZnJvbSBcIi4uLy4uL3V0aWxzL3BhZ2VzXCI7XG5pbXBvcnQgU3BhY2VTdG9yZSBmcm9tIFwiLi4vLi4vc3RvcmVzL3NwYWNlcy9TcGFjZVN0b3JlXCI7XG5pbXBvcnQgeyByZXBsYWNlYWJsZUNvbXBvbmVudCB9IGZyb20gXCIuLi8uLi91dGlscy9yZXBsYWNlYWJsZUNvbXBvbmVudFwiO1xuaW1wb3J0IFJvb21MaXN0U3RvcmUgZnJvbSBcIi4uLy4uL3N0b3Jlcy9yb29tLWxpc3QvUm9vbUxpc3RTdG9yZVwiO1xuaW1wb3J0IHsgUm9vbVVwZGF0ZUNhdXNlIH0gZnJvbSBcIi4uLy4uL3N0b3Jlcy9yb29tLWxpc3QvbW9kZWxzXCI7XG5pbXBvcnQgZGVmYXVsdERpc3BhdGNoZXIgZnJvbSBcIi4uLy4uL2Rpc3BhdGNoZXIvZGlzcGF0Y2hlclwiO1xuaW1wb3J0IFNlY3VyaXR5Q3VzdG9taXNhdGlvbnMgZnJvbSBcIi4uLy4uL2N1c3RvbWlzYXRpb25zL1NlY3VyaXR5XCI7XG5pbXBvcnQgU3Bpbm5lciBmcm9tIFwiLi4vdmlld3MvZWxlbWVudHMvU3Bpbm5lclwiO1xuaW1wb3J0IFF1ZXN0aW9uRGlhbG9nIGZyb20gXCIuLi92aWV3cy9kaWFsb2dzL1F1ZXN0aW9uRGlhbG9nXCI7XG5pbXBvcnQgVXNlclNldHRpbmdzRGlhbG9nIGZyb20gJy4uL3ZpZXdzL2RpYWxvZ3MvVXNlclNldHRpbmdzRGlhbG9nJztcbmltcG9ydCBDcmVhdGVHcm91cERpYWxvZyBmcm9tICcuLi92aWV3cy9kaWFsb2dzL0NyZWF0ZUdyb3VwRGlhbG9nJztcbmltcG9ydCBDcmVhdGVSb29tRGlhbG9nIGZyb20gJy4uL3ZpZXdzL2RpYWxvZ3MvQ3JlYXRlUm9vbURpYWxvZyc7XG5pbXBvcnQgUm9vbURpcmVjdG9yeSBmcm9tICcuL1Jvb21EaXJlY3RvcnknO1xuaW1wb3J0IEtleVNpZ25hdHVyZVVwbG9hZEZhaWxlZERpYWxvZyBmcm9tIFwiLi4vdmlld3MvZGlhbG9ncy9LZXlTaWduYXR1cmVVcGxvYWRGYWlsZWREaWFsb2dcIjtcbmltcG9ydCBJbmNvbWluZ1Nhc0RpYWxvZyBmcm9tIFwiLi4vdmlld3MvZGlhbG9ncy9JbmNvbWluZ1Nhc0RpYWxvZ1wiO1xuaW1wb3J0IENvbXBsZXRlU2VjdXJpdHkgZnJvbSBcIi4vYXV0aC9Db21wbGV0ZVNlY3VyaXR5XCI7XG5pbXBvcnQgTG9nZ2VkSW5WaWV3IGZyb20gJy4vTG9nZ2VkSW5WaWV3JztcbmltcG9ydCBXZWxjb21lIGZyb20gXCIuLi92aWV3cy9hdXRoL1dlbGNvbWVcIjtcbmltcG9ydCBGb3Jnb3RQYXNzd29yZCBmcm9tIFwiLi9hdXRoL0ZvcmdvdFBhc3N3b3JkXCI7XG5pbXBvcnQgRTJlU2V0dXAgZnJvbSBcIi4vYXV0aC9FMmVTZXR1cFwiO1xuaW1wb3J0IFJlZ2lzdHJhdGlvbiBmcm9tICcuL2F1dGgvUmVnaXN0cmF0aW9uJztcbmltcG9ydCBMb2dpbiBmcm9tIFwiLi9hdXRoL0xvZ2luXCI7XG5pbXBvcnQgRXJyb3JCb3VuZGFyeSBmcm9tICcuLi92aWV3cy9lbGVtZW50cy9FcnJvckJvdW5kYXJ5JztcbmltcG9ydCBWZXJpZmljYXRpb25SZXF1ZXN0VG9hc3QgZnJvbSAnLi4vdmlld3MvdG9hc3RzL1ZlcmlmaWNhdGlvblJlcXVlc3RUb2FzdCc7XG5cbmltcG9ydCBQZXJmb3JtYW5jZU1vbml0b3IsIHsgUGVyZm9ybWFuY2VFbnRyeU5hbWVzIH0gZnJvbSBcIi4uLy4uL3BlcmZvcm1hbmNlXCI7XG5pbXBvcnQgVUlTdG9yZSwgeyBVSV9FVkVOVFMgfSBmcm9tIFwiLi4vLi4vc3RvcmVzL1VJU3RvcmVcIjtcbmltcG9ydCBTb2Z0TG9nb3V0IGZyb20gJy4vYXV0aC9Tb2Z0TG9nb3V0JztcbmltcG9ydCB7IG1ha2VSb29tUGVybWFsaW5rIH0gZnJvbSBcIi4uLy4uL3V0aWxzL3Blcm1hbGlua3MvUGVybWFsaW5rc1wiO1xuaW1wb3J0IHsgY29weVBsYWludGV4dCB9IGZyb20gXCIuLi8uLi91dGlscy9zdHJpbmdzXCI7XG5pbXBvcnQgeyBQb3N0aG9nQW5hbHl0aWNzIH0gZnJvbSAnLi4vLi4vUG9zdGhvZ0FuYWx5dGljcyc7XG5pbXBvcnQgeyBpbml0U2VudHJ5IH0gZnJvbSBcIi4uLy4uL3NlbnRyeVwiO1xuXG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tIFwibWF0cml4LWpzLXNkay9zcmMvbG9nZ2VyXCI7XG5pbXBvcnQgeyBzaG93U3BhY2VJbnZpdGUgfSBmcm9tIFwiLi4vLi4vdXRpbHMvc3BhY2VcIjtcblxuLyoqIGNvbnN0YW50cyBmb3IgTWF0cml4Q2hhdC5zdGF0ZS52aWV3ICovXG5leHBvcnQgZW51bSBWaWV3cyB7XG4gICAgLy8gYSBzcGVjaWFsIGluaXRpYWwgc3RhdGUgd2hpY2ggaXMgb25seSB1c2VkIGF0IHN0YXJ0dXAsIHdoaWxlIHdlIGFyZVxuICAgIC8vIHRyeWluZyB0byByZS1hbmltYXRlIGEgbWF0cml4IGNsaWVudCBvciByZWdpc3RlciBhcyBhIGd1ZXN0LlxuICAgIExPQURJTkcsXG5cbiAgICAvLyB3ZSBhcmUgc2hvd2luZyB0aGUgd2VsY29tZSB2aWV3XG4gICAgV0VMQ09NRSxcblxuICAgIC8vIHdlIGFyZSBzaG93aW5nIHRoZSBsb2dpbiB2aWV3XG4gICAgTE9HSU4sXG5cbiAgICAvLyB3ZSBhcmUgc2hvd2luZyB0aGUgcmVnaXN0cmF0aW9uIHZpZXdcbiAgICBSRUdJU1RFUixcblxuICAgIC8vIHNob3dpbmcgdGhlICdmb3Jnb3QgcGFzc3dvcmQnIHZpZXdcbiAgICBGT1JHT1RfUEFTU1dPUkQsXG5cbiAgICAvLyBzaG93aW5nIGZsb3cgdG8gdHJ1c3QgdGhpcyBuZXcgZGV2aWNlIHdpdGggY3Jvc3Mtc2lnbmluZ1xuICAgIENPTVBMRVRFX1NFQ1VSSVRZLFxuXG4gICAgLy8gZmxvdyB0byBzZXR1cCBTU1NTIC8gY3Jvc3Mtc2lnbmluZyBvbiB0aGlzIGFjY291bnRcbiAgICBFMkVfU0VUVVAsXG5cbiAgICAvLyB3ZSBhcmUgbG9nZ2VkIGluIHdpdGggYW4gYWN0aXZlIG1hdHJpeCBjbGllbnQuIFRoZSBsb2dnZWRfaW4gc3RhdGUgYWxzb1xuICAgIC8vIGluY2x1ZGVzIGd1ZXN0cyB1c2VycyBhcyB0aGV5IHRvbyBhcmUgbG9nZ2VkIGluIGF0IHRoZSBjbGllbnQgbGV2ZWwuXG4gICAgTE9HR0VEX0lOLFxuXG4gICAgLy8gV2UgYXJlIGxvZ2dlZCBvdXQgKGludmFsaWQgdG9rZW4pIGJ1dCBoYXZlIG91ciBsb2NhbCBzdGF0ZSBhZ2Fpbi4gVGhlIHVzZXJcbiAgICAvLyBzaG91bGQgbG9nIGJhY2sgaW4gdG8gcmVoeWRyYXRlIHRoZSBjbGllbnQuXG4gICAgU09GVF9MT0dPVVQsXG59XG5cbmNvbnN0IEFVVEhfU0NSRUVOUyA9IFtcInJlZ2lzdGVyXCIsIFwibG9naW5cIiwgXCJmb3Jnb3RfcGFzc3dvcmRcIiwgXCJzdGFydF9zc29cIiwgXCJzdGFydF9jYXNcIiwgXCJ3ZWxjb21lXCJdO1xuXG4vLyBBY3Rpb25zIHRoYXQgYXJlIHJlZGlyZWN0ZWQgdGhyb3VnaCB0aGUgb25ib2FyZGluZyBwcm9jZXNzIHByaW9yIHRvIGJlaW5nXG4vLyByZS1kaXNwYXRjaGVkLiBOT1RFOiBzb21lIGFjdGlvbnMgYXJlIG5vbi10cml2aWFsIGFuZCB3b3VsZCByZXF1aXJlXG4vLyByZS1mYWN0b3JpbmcgdG8gYmUgaW5jbHVkZWQgaW4gdGhpcyBsaXN0IGluIGZ1dHVyZS5cbmNvbnN0IE9OQk9BUkRJTkdfRkxPV19TVEFSVEVSUyA9IFtcbiAgICBBY3Rpb24uVmlld1VzZXJTZXR0aW5ncyxcbiAgICAndmlld19jcmVhdGVfY2hhdCcsXG4gICAgJ3ZpZXdfY3JlYXRlX3Jvb20nLFxuICAgICd2aWV3X2NyZWF0ZV9ncm91cCcsXG5dO1xuXG5pbnRlcmZhY2UgSVNjcmVlbiB7XG4gICAgc2NyZWVuOiBzdHJpbmc7XG4gICAgcGFyYW1zPzogUXVlcnlEaWN0O1xufVxuXG4vKiBlc2xpbnQtZGlzYWJsZSBjYW1lbGNhc2UgKi9cbmludGVyZmFjZSBJUm9vbUluZm8ge1xuICAgIHJvb21faWQ/OiBzdHJpbmc7XG4gICAgcm9vbV9hbGlhcz86IHN0cmluZztcbiAgICBldmVudF9pZD86IHN0cmluZztcblxuICAgIGF1dG9fam9pbj86IGJvb2xlYW47XG4gICAgaGlnaGxpZ2h0ZWQ/OiBib29sZWFuO1xuICAgIG9vYl9kYXRhPzogb2JqZWN0O1xuICAgIHZpYV9zZXJ2ZXJzPzogc3RyaW5nW107XG4gICAgdGhyZWVwaWRfaW52aXRlPzogSVRocmVlcGlkSW52aXRlO1xuXG4gICAganVzdENyZWF0ZWRPcHRzPzogSU9wdHM7XG5cbiAgICAvLyBXaGV0aGVyIG9yIG5vdCB0byBvdmVycmlkZSBkZWZhdWx0IGJlaGF2aW91ciB0byBlbmQgdXAgYXQgYSB0aW1lbGluZVxuICAgIGZvcmNlVGltZWxpbmU/OiBib29sZWFuO1xufVxuLyogZXNsaW50LWVuYWJsZSBjYW1lbGNhc2UgKi9cblxuaW50ZXJmYWNlIElQcm9wcyB7IC8vIFRPRE8gdHlwZSB0aGluZ3MgYmV0dGVyXG4gICAgY29uZmlnOiB7XG4gICAgICAgIHBpd2lrOiB7XG4gICAgICAgICAgICBwb2xpY3lVcmw6IHN0cmluZztcbiAgICAgICAgfTtcbiAgICAgICAgW2tleTogc3RyaW5nXTogYW55O1xuICAgIH07XG4gICAgc2VydmVyQ29uZmlnPzogVmFsaWRhdGVkU2VydmVyQ29uZmlnO1xuICAgIG9uTmV3U2NyZWVuOiAoc2NyZWVuOiBzdHJpbmcsIHJlcGxhY2VMYXN0OiBib29sZWFuKSA9PiB2b2lkO1xuICAgIGVuYWJsZUd1ZXN0PzogYm9vbGVhbjtcbiAgICAvLyB0aGUgcXVlcnlQYXJhbXMgZXh0cmFjdGVkIGZyb20gdGhlIFtyZWFsXSBxdWVyeS1zdHJpbmcgb2YgdGhlIFVSSVxuICAgIHJlYWxRdWVyeVBhcmFtcz86IFF1ZXJ5RGljdDtcbiAgICAvLyB0aGUgaW5pdGlhbCBxdWVyeVBhcmFtcyBleHRyYWN0ZWQgZnJvbSB0aGUgaGFzaC1mcmFnbWVudCBvZiB0aGUgVVJJXG4gICAgc3RhcnRpbmdGcmFnbWVudFF1ZXJ5UGFyYW1zPzogUXVlcnlEaWN0O1xuICAgIC8vIGNhbGxlZCB3aGVuIHdlIGhhdmUgY29tcGxldGVkIGEgdG9rZW4gbG9naW5cbiAgICBvblRva2VuTG9naW5Db21wbGV0ZWQ/OiAoKSA9PiB2b2lkO1xuICAgIC8vIFJlcHJlc2VudHMgdGhlIHNjcmVlbiB0byBkaXNwbGF5IGFzIGEgcmVzdWx0IG9mIHBhcnNpbmcgdGhlIGluaXRpYWwgd2luZG93LmxvY2F0aW9uXG4gICAgaW5pdGlhbFNjcmVlbkFmdGVyTG9naW4/OiBJU2NyZWVuO1xuICAgIC8vIGRpc3BsYXluYW1lLCBpZiBhbnksIHRvIHNldCBvbiB0aGUgZGV2aWNlIHdoZW4gbG9nZ2luZyBpbi9yZWdpc3RlcmluZy5cbiAgICBkZWZhdWx0RGV2aWNlRGlzcGxheU5hbWU/OiBzdHJpbmc7XG4gICAgLy8gQSBmdW5jdGlvbiB0aGF0IG1ha2VzIGEgcmVnaXN0cmF0aW9uIFVSTFxuICAgIG1ha2VSZWdpc3RyYXRpb25Vcmw6IChwYXJhbXM6IFF1ZXJ5RGljdCkgPT4gc3RyaW5nO1xufVxuXG5pbnRlcmZhY2UgSVN0YXRlIHtcbiAgICAvLyB0aGUgbWFzdGVyIHZpZXcgd2UgYXJlIHNob3dpbmcuXG4gICAgdmlldzogVmlld3M7XG4gICAgLy8gV2hhdCB0aGUgTG9nZ2VkSW5WaWV3IHdvdWxkIGJlIHNob3dpbmcgaWYgdmlzaWJsZVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjYW1lbGNhc2VcbiAgICBwYWdlX3R5cGU/OiBQYWdlVHlwZTtcbiAgICAvLyBUaGUgSUQgb2YgdGhlIHJvb20gd2UncmUgdmlld2luZy4gVGhpcyBpcyBlaXRoZXIgcG9wdWxhdGVkIGRpcmVjdGx5XG4gICAgLy8gaW4gdGhlIGNhc2Ugd2hlcmUgd2UgdmlldyBhIHJvb20gYnkgSUQgb3IgYnkgUm9vbVZpZXcgd2hlbiBpdCByZXNvbHZlc1xuICAgIC8vIHdoYXQgSUQgYW4gYWxpYXMgcG9pbnRzIGF0LlxuICAgIGN1cnJlbnRSb29tSWQ/OiBzdHJpbmc7XG4gICAgY3VycmVudEdyb3VwSWQ/OiBzdHJpbmc7XG4gICAgY3VycmVudEdyb3VwSXNOZXc/OiBib29sZWFuO1xuICAgIC8vIElmIHdlJ3JlIHRyeWluZyB0byBqdXN0IHZpZXcgYSB1c2VyIElEIChpLmUuIC91c2VyIFVSTCksIHRoaXMgaXMgaXRcbiAgICBjdXJyZW50VXNlcklkPzogc3RyaW5nO1xuICAgIC8vIHRoaXMgaXMgcGVyc2lzdGVkIGFzIG14X2xoc19zaXplLCBsb2FkZWQgaW4gTG9nZ2VkSW5WaWV3XG4gICAgY29sbGFwc2VMaHM6IGJvb2xlYW47XG4gICAgLy8gUGFyYW1ldGVycyB1c2VkIGluIHRoZSByZWdpc3RyYXRpb24gZGFuY2Ugd2l0aCB0aGUgSVNcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2FtZWxjYXNlXG4gICAgcmVnaXN0ZXJfY2xpZW50X3NlY3JldD86IHN0cmluZztcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2FtZWxjYXNlXG4gICAgcmVnaXN0ZXJfc2Vzc2lvbl9pZD86IHN0cmluZztcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2FtZWxjYXNlXG4gICAgcmVnaXN0ZXJfaWRfc2lkPzogc3RyaW5nO1xuICAgIC8vIFdoZW4gc2hvd2luZyBNb2RhbCBkaWFsb2dzIHdlIG5lZWQgdG8gc2V0IGFyaWEtaGlkZGVuIG9uIHRoZSByb290IGFwcCBlbGVtZW50XG4gICAgLy8gYW5kIGRpc2FibGUgaXQgd2hlbiB0aGVyZSBhcmUgbm8gZGlhbG9nc1xuICAgIGhpZGVUb1NSVXNlcnM6IGJvb2xlYW47XG4gICAgc3luY0Vycm9yPzogRXJyb3I7XG4gICAgcmVzaXplTm90aWZpZXI6IFJlc2l6ZU5vdGlmaWVyO1xuICAgIHNlcnZlckNvbmZpZz86IFZhbGlkYXRlZFNlcnZlckNvbmZpZztcbiAgICByZWFkeTogYm9vbGVhbjtcbiAgICB0aHJlZXBpZEludml0ZT86IElUaHJlZXBpZEludml0ZTtcbiAgICByb29tT29iRGF0YT86IG9iamVjdDtcbiAgICBwZW5kaW5nSW5pdGlhbFN5bmM/OiBib29sZWFuO1xuICAgIGp1c3RSZWdpc3RlcmVkPzogYm9vbGVhbjtcbiAgICByb29tSnVzdENyZWF0ZWRPcHRzPzogSU9wdHM7XG4gICAgZm9yY2VUaW1lbGluZT86IGJvb2xlYW47IC8vIHNlZSBwcm9wc1xufVxuXG5AcmVwbGFjZWFibGVDb21wb25lbnQoXCJzdHJ1Y3R1cmVzLk1hdHJpeENoYXRcIilcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1hdHJpeENoYXQgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50PElQcm9wcywgSVN0YXRlPiB7XG4gICAgc3RhdGljIGRpc3BsYXlOYW1lID0gXCJNYXRyaXhDaGF0XCI7XG5cbiAgICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgICAgICByZWFsUXVlcnlQYXJhbXM6IHt9LFxuICAgICAgICBzdGFydGluZ0ZyYWdtZW50UXVlcnlQYXJhbXM6IHt9LFxuICAgICAgICBjb25maWc6IHt9LFxuICAgICAgICBvblRva2VuTG9naW5Db21wbGV0ZWQ6ICgpID0+IHt9LFxuICAgIH07XG5cbiAgICBmaXJzdFN5bmNDb21wbGV0ZTogYm9vbGVhbjtcbiAgICBmaXJzdFN5bmNQcm9taXNlOiBJRGVmZXJyZWQ8dm9pZD47XG5cbiAgICBwcml2YXRlIHNjcmVlbkFmdGVyTG9naW4/OiBJU2NyZWVuO1xuICAgIHByaXZhdGUgcGFnZUNoYW5naW5nOiBib29sZWFuO1xuICAgIHByaXZhdGUgdG9rZW5Mb2dpbj86IGJvb2xlYW47XG4gICAgcHJpdmF0ZSBhY2NvdW50UGFzc3dvcmQ/OiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBhY2NvdW50UGFzc3dvcmRUaW1lcj86IG51bWJlcjtcbiAgICBwcml2YXRlIGZvY3VzQ29tcG9zZXI6IGJvb2xlYW47XG4gICAgcHJpdmF0ZSBzdWJUaXRsZVN0YXR1czogc3RyaW5nO1xuICAgIHByaXZhdGUgcHJldldpbmRvd1dpZHRoOiBudW1iZXI7XG5cbiAgICBwcml2YXRlIHJlYWRvbmx5IGxvZ2dlZEluVmlldzogUmVhY3QuUmVmT2JqZWN0PExvZ2dlZEluVmlld1R5cGU+O1xuICAgIHByaXZhdGUgcmVhZG9ubHkgZGlzcGF0Y2hlclJlZjogYW55O1xuICAgIHByaXZhdGUgcmVhZG9ubHkgdGhlbWVXYXRjaGVyOiBUaGVtZVdhdGNoZXI7XG4gICAgcHJpdmF0ZSByZWFkb25seSBmb250V2F0Y2hlcjogRm9udFdhdGNoZXI7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm9wcywgY29udGV4dCkge1xuICAgICAgICBzdXBlcihwcm9wcywgY29udGV4dCk7XG5cbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIHZpZXc6IFZpZXdzLkxPQURJTkcsXG4gICAgICAgICAgICBjb2xsYXBzZUxoczogZmFsc2UsXG5cbiAgICAgICAgICAgIGhpZGVUb1NSVXNlcnM6IGZhbHNlLFxuXG4gICAgICAgICAgICBzeW5jRXJyb3I6IG51bGwsIC8vIElmIHRoZSBjdXJyZW50IHN5bmNpbmcgc3RhdHVzIGlzIEVSUk9SLCB0aGUgZXJyb3Igb2JqZWN0LCBvdGhlcndpc2UgbnVsbC5cbiAgICAgICAgICAgIHJlc2l6ZU5vdGlmaWVyOiBuZXcgUmVzaXplTm90aWZpZXIoKSxcbiAgICAgICAgICAgIHJlYWR5OiBmYWxzZSxcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmxvZ2dlZEluVmlldyA9IGNyZWF0ZVJlZigpO1xuXG4gICAgICAgIFNka0NvbmZpZy5wdXQodGhpcy5wcm9wcy5jb25maWcpO1xuXG4gICAgICAgIC8vIFVzZWQgYnkgX3ZpZXdSb29tIGJlZm9yZSBnZXR0aW5nIHN0YXRlIGZyb20gc3luY1xuICAgICAgICB0aGlzLmZpcnN0U3luY0NvbXBsZXRlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZmlyc3RTeW5jUHJvbWlzZSA9IGRlZmVyKCk7XG5cbiAgICAgICAgaWYgKHRoaXMucHJvcHMuY29uZmlnLnN5bmNfdGltZWxpbmVfbGltaXQpIHtcbiAgICAgICAgICAgIE1hdHJpeENsaWVudFBlZy5vcHRzLmluaXRpYWxTeW5jTGltaXQgPSB0aGlzLnByb3BzLmNvbmZpZy5zeW5jX3RpbWVsaW5lX2xpbWl0O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gYSB0aGluZyB0byBjYWxsIHNob3dTY3JlZW4gd2l0aCBvbmNlIGxvZ2luIGNvbXBsZXRlcy4gIHRoaXMgaXMga2VwdFxuICAgICAgICAvLyBvdXRzaWRlIHRoaXMuc3RhdGUgYmVjYXVzZSB1cGRhdGluZyBpdCBzaG91bGQgbmV2ZXIgdHJpZ2dlciBhXG4gICAgICAgIC8vIHJlcmVuZGVyLlxuICAgICAgICB0aGlzLnNjcmVlbkFmdGVyTG9naW4gPSB0aGlzLnByb3BzLmluaXRpYWxTY3JlZW5BZnRlckxvZ2luO1xuICAgICAgICBpZiAodGhpcy5zY3JlZW5BZnRlckxvZ2luKSB7XG4gICAgICAgICAgICBjb25zdCBwYXJhbXMgPSB0aGlzLnNjcmVlbkFmdGVyTG9naW4ucGFyYW1zIHx8IHt9O1xuICAgICAgICAgICAgaWYgKHRoaXMuc2NyZWVuQWZ0ZXJMb2dpbi5zY3JlZW4uc3RhcnRzV2l0aChcInJvb20vXCIpICYmIHBhcmFtc1snc2lnbnVybCddICYmIHBhcmFtc1snZW1haWwnXSkge1xuICAgICAgICAgICAgICAgIC8vIHByb2JhYmx5IGEgdGhyZWVwaWQgaW52aXRlIC0gdHJ5IHRvIHN0b3JlIGl0XG4gICAgICAgICAgICAgICAgY29uc3Qgcm9vbUlkID0gdGhpcy5zY3JlZW5BZnRlckxvZ2luLnNjcmVlbi5zdWJzdHJpbmcoXCJyb29tL1wiLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgVGhyZWVwaWRJbnZpdGVTdG9yZS5pbnN0YW5jZS5zdG9yZUludml0ZShyb29tSWQsIHBhcmFtcyBhcyB1bmtub3duIGFzIElUaHJlZXBpZEludml0ZVdpcmVGb3JtYXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5wcmV2V2luZG93V2lkdGggPSBVSVN0b3JlLmluc3RhbmNlLndpbmRvd1dpZHRoIHx8IDEwMDA7XG4gICAgICAgIFVJU3RvcmUuaW5zdGFuY2Uub24oVUlfRVZFTlRTLlJlc2l6ZSwgdGhpcy5oYW5kbGVSZXNpemUpO1xuXG4gICAgICAgIHRoaXMucGFnZUNoYW5naW5nID0gZmFsc2U7XG5cbiAgICAgICAgLy8gRm9yIFBlcnNpc3RlbnRFbGVtZW50XG4gICAgICAgIHRoaXMuc3RhdGUucmVzaXplTm90aWZpZXIub24oXCJtaWRkbGVQYW5lbFJlc2l6ZWRcIiwgdGhpcy5kaXNwYXRjaFRpbWVsaW5lUmVzaXplKTtcblxuICAgICAgICAvLyBGb3JjZSB1c2VycyB0byBnbyB0aHJvdWdoIHRoZSBzb2Z0IGxvZ291dCBwYWdlIGlmIHRoZXkncmUgc29mdCBsb2dnZWQgb3V0XG4gICAgICAgIGlmIChMaWZlY3ljbGUuaXNTb2Z0TG9nb3V0KCkpIHtcbiAgICAgICAgICAgIC8vIFdoZW4gdGhlIHNlc3Npb24gbG9hZHMgaXQnbGwgYmUgZGV0ZWN0ZWQgYXMgc29mdCBsb2dnZWQgb3V0IGFuZCBhIGRpc3BhdGNoXG4gICAgICAgICAgICAvLyB3aWxsIGJlIHNlbnQgb3V0IHRvIHNheSB0aGF0LCB0cmlnZ2VyaW5nIHRoaXMgTWF0cml4Q2hhdCB0byBzaG93IHRoZSBzb2Z0XG4gICAgICAgICAgICAvLyBsb2dvdXQgcGFnZS5cbiAgICAgICAgICAgIExpZmVjeWNsZS5sb2FkU2Vzc2lvbigpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5hY2NvdW50UGFzc3dvcmQgPSBudWxsO1xuICAgICAgICB0aGlzLmFjY291bnRQYXNzd29yZFRpbWVyID0gbnVsbDtcblxuICAgICAgICB0aGlzLmRpc3BhdGNoZXJSZWYgPSBkaXMucmVnaXN0ZXIodGhpcy5vbkFjdGlvbik7XG5cbiAgICAgICAgdGhpcy50aGVtZVdhdGNoZXIgPSBuZXcgVGhlbWVXYXRjaGVyKCk7XG4gICAgICAgIHRoaXMuZm9udFdhdGNoZXIgPSBuZXcgRm9udFdhdGNoZXIoKTtcbiAgICAgICAgdGhpcy50aGVtZVdhdGNoZXIuc3RhcnQoKTtcbiAgICAgICAgdGhpcy5mb250V2F0Y2hlci5zdGFydCgpO1xuXG4gICAgICAgIHRoaXMuZm9jdXNDb21wb3NlciA9IGZhbHNlO1xuXG4gICAgICAgIC8vIG9iamVjdCBmaWVsZCB1c2VkIGZvciB0cmFja2luZyB0aGUgc3RhdHVzIGluZm8gYXBwZW5kZWQgdG8gdGhlIHRpdGxlIHRhZy5cbiAgICAgICAgLy8gd2UgZG9uJ3QgZG8gaXQgYXMgcmVhY3Qgc3RhdGUgYXMgaSdtIHNjYXJlZCBhYm91dCB0cmlnZ2VyaW5nIG5lZWRsZXNzIHJlYWN0IHJlZnJlc2hlcy5cbiAgICAgICAgdGhpcy5zdWJUaXRsZVN0YXR1cyA9ICcnO1xuXG4gICAgICAgIC8vIHRoaXMgY2FuIHRlY2huaWNhbGx5IGJlIGRvbmUgYW55d2hlcmUgYnV0IGRvaW5nIHRoaXMgaGVyZSBrZWVwcyBhbGxcbiAgICAgICAgLy8gdGhlIHJvdXRpbmcgdXJsIHBhdGggbG9naWMgdG9nZXRoZXIuXG4gICAgICAgIGlmICh0aGlzLm9uQWxpYXNDbGljaykge1xuICAgICAgICAgICAgbGlua2lmeU1hdHJpeC5vbkFsaWFzQ2xpY2sgPSB0aGlzLm9uQWxpYXNDbGljaztcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5vblVzZXJDbGljaykge1xuICAgICAgICAgICAgbGlua2lmeU1hdHJpeC5vblVzZXJDbGljayA9IHRoaXMub25Vc2VyQ2xpY2s7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMub25Hcm91cENsaWNrKSB7XG4gICAgICAgICAgICBsaW5raWZ5TWF0cml4Lm9uR3JvdXBDbGljayA9IHRoaXMub25Hcm91cENsaWNrO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gdGhlIGZpcnN0IHRoaW5nIHRvIGRvIGlzIHRvIHRyeSB0aGUgdG9rZW4gcGFyYW1zIGluIHRoZSBxdWVyeS1zdHJpbmdcbiAgICAgICAgLy8gaWYgdGhlIHNlc3Npb24gaXNuJ3Qgc29mdCBsb2dnZWQgb3V0IChpZTogaXMgYSBjbGVhbiBzZXNzaW9uIGJlaW5nIGxvZ2dlZCBpbilcbiAgICAgICAgaWYgKCFMaWZlY3ljbGUuaXNTb2Z0TG9nb3V0KCkpIHtcbiAgICAgICAgICAgIExpZmVjeWNsZS5hdHRlbXB0VG9rZW5Mb2dpbihcbiAgICAgICAgICAgICAgICB0aGlzLnByb3BzLnJlYWxRdWVyeVBhcmFtcyxcbiAgICAgICAgICAgICAgICB0aGlzLnByb3BzLmRlZmF1bHREZXZpY2VEaXNwbGF5TmFtZSxcbiAgICAgICAgICAgICAgICB0aGlzLmdldEZyYWdtZW50QWZ0ZXJMb2dpbigpLFxuICAgICAgICAgICAgKS50aGVuKGFzeW5jIChsb2dnZWRJbikgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLnJlYWxRdWVyeVBhcmFtcz8ubG9naW5Ub2tlbikge1xuICAgICAgICAgICAgICAgICAgICAvLyByZW1vdmUgdGhlIGxvZ2luVG9rZW4gZnJvbSB0aGUgVVJMIHJlZ2FyZGxlc3NcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5vblRva2VuTG9naW5Db21wbGV0ZWQoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAobG9nZ2VkSW4pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50b2tlbkxvZ2luID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBDcmVhdGUgYW5kIHN0YXJ0IHRoZSBjbGllbnRcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgTGlmZWN5Y2xlLnJlc3RvcmVGcm9tTG9jYWxTdG9yYWdlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlnbm9yZUd1ZXN0OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucG9zdExvZ2luU2V0dXAoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBpZiB0aGUgdXNlciBoYXMgZm9sbG93ZWQgYSBsb2dpbiBvciByZWdpc3RlciBsaW5rLCBkb24ndCByZWFuaW1hdGVcbiAgICAgICAgICAgICAgICAvLyB0aGUgb2xkIGNyZWRzLCBidXQgcmF0aGVyIGdvIHN0cmFpZ2h0IHRvIHRoZSByZWxldmFudCBwYWdlXG4gICAgICAgICAgICAgICAgY29uc3QgZmlyc3RTY3JlZW4gPSB0aGlzLnNjcmVlbkFmdGVyTG9naW4gPyB0aGlzLnNjcmVlbkFmdGVyTG9naW4uc2NyZWVuIDogbnVsbDtcblxuICAgICAgICAgICAgICAgIGlmIChmaXJzdFNjcmVlbiA9PT0gJ2xvZ2luJyB8fFxuICAgICAgICAgICAgICAgICAgICBmaXJzdFNjcmVlbiA9PT0gJ3JlZ2lzdGVyJyB8fFxuICAgICAgICAgICAgICAgICAgICBmaXJzdFNjcmVlbiA9PT0gJ2ZvcmdvdF9wYXNzd29yZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zaG93U2NyZWVuQWZ0ZXJMb2dpbigpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9hZFNlc3Npb24oKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKFNldHRpbmdzU3RvcmUuZ2V0VmFsdWUoXCJhbmFseXRpY3NPcHRJblwiKSkge1xuICAgICAgICAgICAgQW5hbHl0aWNzLmVuYWJsZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgUG9zdGhvZ0FuYWx5dGljcy5pbnN0YW5jZS51cGRhdGVBbm9ueW1pdHlGcm9tU2V0dGluZ3MoKTtcbiAgICAgICAgUG9zdGhvZ0FuYWx5dGljcy5pbnN0YW5jZS51cGRhdGVQbGF0Zm9ybVN1cGVyUHJvcGVydGllcygpO1xuXG4gICAgICAgIENvdW50bHlBbmFseXRpY3MuaW5zdGFuY2UuZW5hYmxlKC8qIGFub255bW91cyA9ICovIHRydWUpO1xuXG4gICAgICAgIGluaXRTZW50cnkoU2RrQ29uZmlnLmdldCgpW1wic2VudHJ5XCJdKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIHBvc3RMb2dpblNldHVwKCkge1xuICAgICAgICBjb25zdCBjbGkgPSBNYXRyaXhDbGllbnRQZWcuZ2V0KCk7XG4gICAgICAgIGNvbnN0IGNyeXB0b0VuYWJsZWQgPSBjbGkuaXNDcnlwdG9FbmFibGVkKCk7XG4gICAgICAgIGlmICghY3J5cHRvRW5hYmxlZCkge1xuICAgICAgICAgICAgdGhpcy5vbkxvZ2dlZEluKCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBwcm9taXNlc0xpc3Q6IFByb21pc2U8YW55PltdID0gW3RoaXMuZmlyc3RTeW5jUHJvbWlzZS5wcm9taXNlXTtcbiAgICAgICAgaWYgKGNyeXB0b0VuYWJsZWQpIHtcbiAgICAgICAgICAgIC8vIHdhaXQgZm9yIHRoZSBjbGllbnQgdG8gZmluaXNoIGRvd25sb2FkaW5nIGNyb3NzLXNpZ25pbmcga2V5cyBmb3IgdXMgc28gd2VcbiAgICAgICAgICAgIC8vIGtub3cgd2hldGhlciBvciBub3Qgd2UgaGF2ZSBrZXlzIHNldCB1cCBvbiB0aGlzIGFjY291bnRcbiAgICAgICAgICAgIHByb21pc2VzTGlzdC5wdXNoKGNsaS5kb3dubG9hZEtleXMoW2NsaS5nZXRVc2VySWQoKV0pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIE5vdyB1cGRhdGUgdGhlIHN0YXRlIHRvIHNheSB3ZSdyZSB3YWl0aW5nIGZvciB0aGUgZmlyc3Qgc3luYyB0byBjb21wbGV0ZSByYXRoZXJcbiAgICAgICAgLy8gdGhhbiBmb3IgdGhlIGxvZ2luIHRvIGZpbmlzaC5cbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHBlbmRpbmdJbml0aWFsU3luYzogdHJ1ZSB9KTtcblxuICAgICAgICBhd2FpdCBQcm9taXNlLmFsbChwcm9taXNlc0xpc3QpO1xuXG4gICAgICAgIGlmICghY3J5cHRvRW5hYmxlZCkge1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHBlbmRpbmdJbml0aWFsU3luYzogZmFsc2UgfSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBjcm9zc1NpZ25pbmdJc1NldFVwID0gY2xpLmdldFN0b3JlZENyb3NzU2lnbmluZ0ZvclVzZXIoY2xpLmdldFVzZXJJZCgpKTtcbiAgICAgICAgaWYgKGNyb3NzU2lnbmluZ0lzU2V0VXApIHtcbiAgICAgICAgICAgIGlmIChTZWN1cml0eUN1c3RvbWlzYXRpb25zLlNIT1dfRU5DUllQVElPTl9TRVRVUF9VSSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9uTG9nZ2VkSW4oKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZUZvck5ld1ZpZXcoeyB2aWV3OiBWaWV3cy5DT01QTEVURV9TRUNVUklUWSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChhd2FpdCBjbGkuZG9lc1NlcnZlclN1cHBvcnRVbnN0YWJsZUZlYXR1cmUoXCJvcmcubWF0cml4LmUyZV9jcm9zc19zaWduaW5nXCIpKSB7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlRm9yTmV3Vmlldyh7IHZpZXc6IFZpZXdzLkUyRV9TRVRVUCB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMub25Mb2dnZWRJbigpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBwZW5kaW5nSW5pdGlhbFN5bmM6IGZhbHNlIH0pO1xuICAgIH1cblxuICAgIC8vIFRPRE86IFtSRUFDVC1XQVJOSU5HXSBSZXBsYWNlIHdpdGggYXBwcm9wcmlhdGUgbGlmZWN5Y2xlIHN0YWdlXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUocHJvcHMsIHN0YXRlKSB7XG4gICAgICAgIGlmICh0aGlzLnNob3VsZFRyYWNrUGFnZUNoYW5nZSh0aGlzLnN0YXRlLCBzdGF0ZSkpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhcnRQYWdlQ2hhbmdlVGltZXIoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMsIHByZXZTdGF0ZSkge1xuICAgICAgICBpZiAodGhpcy5zaG91bGRUcmFja1BhZ2VDaGFuZ2UocHJldlN0YXRlLCB0aGlzLnN0YXRlKSkge1xuICAgICAgICAgICAgY29uc3QgZHVyYXRpb25NcyA9IHRoaXMuc3RvcFBhZ2VDaGFuZ2VUaW1lcigpO1xuICAgICAgICAgICAgQW5hbHl0aWNzLnRyYWNrUGFnZUNoYW5nZShkdXJhdGlvbk1zKTtcbiAgICAgICAgICAgIENvdW50bHlBbmFseXRpY3MuaW5zdGFuY2UudHJhY2tQYWdlQ2hhbmdlKGR1cmF0aW9uTXMpO1xuICAgICAgICAgICAgUG9zdGhvZ0FuYWx5dGljcy5pbnN0YW5jZS50cmFja1BhZ2VWaWV3KGR1cmF0aW9uTXMpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmZvY3VzQ29tcG9zZXIpIHtcbiAgICAgICAgICAgIGRpcy5maXJlKEFjdGlvbi5Gb2N1c1NlbmRNZXNzYWdlQ29tcG9zZXIpO1xuICAgICAgICAgICAgdGhpcy5mb2N1c0NvbXBvc2VyID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgICAgTGlmZWN5Y2xlLnN0b3BNYXRyaXhDbGllbnQoKTtcbiAgICAgICAgZGlzLnVucmVnaXN0ZXIodGhpcy5kaXNwYXRjaGVyUmVmKTtcbiAgICAgICAgdGhpcy50aGVtZVdhdGNoZXIuc3RvcCgpO1xuICAgICAgICB0aGlzLmZvbnRXYXRjaGVyLnN0b3AoKTtcbiAgICAgICAgVUlTdG9yZS5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMuc3RhdGUucmVzaXplTm90aWZpZXIucmVtb3ZlTGlzdGVuZXIoXCJtaWRkbGVQYW5lbFJlc2l6ZWRcIiwgdGhpcy5kaXNwYXRjaFRpbWVsaW5lUmVzaXplKTtcblxuICAgICAgICBpZiAodGhpcy5hY2NvdW50UGFzc3dvcmRUaW1lciAhPT0gbnVsbCkgY2xlYXJUaW1lb3V0KHRoaXMuYWNjb3VudFBhc3N3b3JkVGltZXIpO1xuICAgIH1cblxuICAgIGdldEZhbGxiYWNrSHNVcmwoKSB7XG4gICAgICAgIGlmICh0aGlzLnByb3BzLnNlcnZlckNvbmZpZyAmJiB0aGlzLnByb3BzLnNlcnZlckNvbmZpZy5pc0RlZmF1bHQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByb3BzLmNvbmZpZy5mYWxsYmFja19oc191cmw7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldFNlcnZlclByb3BlcnRpZXMoKSB7XG4gICAgICAgIGxldCBwcm9wcyA9IHRoaXMuc3RhdGUuc2VydmVyQ29uZmlnO1xuICAgICAgICBpZiAoIXByb3BzKSBwcm9wcyA9IHRoaXMucHJvcHMuc2VydmVyQ29uZmlnOyAvLyBmb3IgdW5pdCB0ZXN0c1xuICAgICAgICBpZiAoIXByb3BzKSBwcm9wcyA9IFNka0NvbmZpZy5nZXQoKVtcInZhbGlkYXRlZF9zZXJ2ZXJfY29uZmlnXCJdO1xuICAgICAgICByZXR1cm4geyBzZXJ2ZXJDb25maWc6IHByb3BzIH07XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBsb2FkU2Vzc2lvbigpIHtcbiAgICAgICAgLy8gdGhlIGV4dHJhIFByb21pc2UucmVzb2x2ZSgpIGVuc3VyZXMgdGhhdCBzeW5jaHJvbm91cyBleGNlcHRpb25zIGhpdCB0aGUgc2FtZSBjb2RlcGF0aCBhc1xuICAgICAgICAvLyBhc3luY2hyb25vdXMgb25lcy5cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIExpZmVjeWNsZS5sb2FkU2Vzc2lvbih7XG4gICAgICAgICAgICAgICAgZnJhZ21lbnRRdWVyeVBhcmFtczogdGhpcy5wcm9wcy5zdGFydGluZ0ZyYWdtZW50UXVlcnlQYXJhbXMsXG4gICAgICAgICAgICAgICAgZW5hYmxlR3Vlc3Q6IHRoaXMucHJvcHMuZW5hYmxlR3Vlc3QsXG4gICAgICAgICAgICAgICAgZ3Vlc3RIc1VybDogdGhpcy5nZXRTZXJ2ZXJQcm9wZXJ0aWVzKCkuc2VydmVyQ29uZmlnLmhzVXJsLFxuICAgICAgICAgICAgICAgIGd1ZXN0SXNVcmw6IHRoaXMuZ2V0U2VydmVyUHJvcGVydGllcygpLnNlcnZlckNvbmZpZy5pc1VybCxcbiAgICAgICAgICAgICAgICBkZWZhdWx0RGV2aWNlRGlzcGxheU5hbWU6IHRoaXMucHJvcHMuZGVmYXVsdERldmljZURpc3BsYXlOYW1lLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pLnRoZW4oKGxvYWRlZFNlc3Npb24pID0+IHtcbiAgICAgICAgICAgIGlmICghbG9hZGVkU2Vzc2lvbikge1xuICAgICAgICAgICAgICAgIC8vIGZhbGwgYmFjayB0byBzaG93aW5nIHRoZSB3ZWxjb21lIHNjcmVlbi4uLiB1bmxlc3Mgd2UgaGF2ZSBhIDNwaWQgaW52aXRlIHBlbmRpbmdcbiAgICAgICAgICAgICAgICBpZiAoVGhyZWVwaWRJbnZpdGVTdG9yZS5pbnN0YW5jZS5waWNrQmVzdEludml0ZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGRpcy5kaXNwYXRjaCh7IGFjdGlvbjogJ3N0YXJ0X3JlZ2lzdHJhdGlvbicgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZGlzLmRpc3BhdGNoKHsgYWN0aW9uOiBcInZpZXdfd2VsY29tZV9wYWdlXCIgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChTZXR0aW5nc1N0b3JlLmdldFZhbHVlKFwiYW5hbHl0aWNzT3B0SW5cIikpIHtcbiAgICAgICAgICAgICAgICBDb3VudGx5QW5hbHl0aWNzLmluc3RhbmNlLmVuYWJsZSgvKiBhbm9ueW1vdXMgPSAqLyBmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBOb3RlIHdlIGRvbid0IGNhdGNoIGVycm9ycyBmcm9tIHRoaXM6IHdlIGNhdGNoIGV2ZXJ5dGhpbmcgd2l0aGluXG4gICAgICAgIC8vIGxvYWRTZXNzaW9uIGFzIHRoZXJlJ3MgbG9naWMgdGhlcmUgdG8gYXNrIHRoZSB1c2VyIGlmIHRoZXkgd2FudFxuICAgICAgICAvLyB0byB0cnkgbG9nZ2luZyBvdXQuXG4gICAgfVxuXG4gICAgc3RhcnRQYWdlQ2hhbmdlVGltZXIoKSB7XG4gICAgICAgIFBlcmZvcm1hbmNlTW9uaXRvci5pbnN0YW5jZS5zdGFydChQZXJmb3JtYW5jZUVudHJ5TmFtZXMuUEFHRV9DSEFOR0UpO1xuICAgIH1cblxuICAgIHN0b3BQYWdlQ2hhbmdlVGltZXIoKSB7XG4gICAgICAgIGNvbnN0IHBlcmZNb25pdG9yID0gUGVyZm9ybWFuY2VNb25pdG9yLmluc3RhbmNlO1xuXG4gICAgICAgIHBlcmZNb25pdG9yLnN0b3AoUGVyZm9ybWFuY2VFbnRyeU5hbWVzLlBBR0VfQ0hBTkdFKTtcblxuICAgICAgICBjb25zdCBlbnRyaWVzID0gcGVyZk1vbml0b3IuZ2V0RW50cmllcyh7XG4gICAgICAgICAgICBuYW1lOiBQZXJmb3JtYW5jZUVudHJ5TmFtZXMuUEFHRV9DSEFOR0UsXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBtZWFzdXJlbWVudCA9IGVudHJpZXMucG9wKCk7XG5cbiAgICAgICAgcmV0dXJuIG1lYXN1cmVtZW50XG4gICAgICAgICAgICA/IG1lYXN1cmVtZW50LmR1cmF0aW9uXG4gICAgICAgICAgICA6IG51bGw7XG4gICAgfVxuXG4gICAgc2hvdWxkVHJhY2tQYWdlQ2hhbmdlKHByZXZTdGF0ZTogSVN0YXRlLCBzdGF0ZTogSVN0YXRlKSB7XG4gICAgICAgIHJldHVybiBwcmV2U3RhdGUuY3VycmVudFJvb21JZCAhPT0gc3RhdGUuY3VycmVudFJvb21JZCB8fFxuICAgICAgICAgICAgcHJldlN0YXRlLnZpZXcgIT09IHN0YXRlLnZpZXcgfHxcbiAgICAgICAgICAgIHByZXZTdGF0ZS5wYWdlX3R5cGUgIT09IHN0YXRlLnBhZ2VfdHlwZTtcbiAgICB9XG5cbiAgICBzZXRTdGF0ZUZvck5ld1ZpZXcoc3RhdGU6IFBhcnRpYWw8SVN0YXRlPikge1xuICAgICAgICBpZiAoc3RhdGUudmlldyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJzZXRTdGF0ZUZvck5ld1ZpZXcgd2l0aCBubyB2aWV3IVwiKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBuZXdTdGF0ZSA9IHtcbiAgICAgICAgICAgIGN1cnJlbnRVc2VySWQ6IG51bGwsXG4gICAgICAgICAgICBqdXN0UmVnaXN0ZXJlZDogZmFsc2UsXG4gICAgICAgIH07XG4gICAgICAgIE9iamVjdC5hc3NpZ24obmV3U3RhdGUsIHN0YXRlKTtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZShuZXdTdGF0ZSk7XG4gICAgfVxuXG4gICAgb25BY3Rpb24gPSAocGF5bG9hZCkgPT4ge1xuICAgICAgICAvLyBjb25zb2xlLmxvZyhgTWF0cml4Q2xpZW50UGVnLm9uQWN0aW9uOiAke3BheWxvYWQuYWN0aW9ufWApO1xuXG4gICAgICAgIC8vIFN0YXJ0IHRoZSBvbmJvYXJkaW5nIHByb2Nlc3MgZm9yIGNlcnRhaW4gYWN0aW9uc1xuICAgICAgICBpZiAoTWF0cml4Q2xpZW50UGVnLmdldCgpICYmIE1hdHJpeENsaWVudFBlZy5nZXQoKS5pc0d1ZXN0KCkgJiZcbiAgICAgICAgICAgIE9OQk9BUkRJTkdfRkxPV19TVEFSVEVSUy5pbmNsdWRlcyhwYXlsb2FkLmFjdGlvbilcbiAgICAgICAgKSB7XG4gICAgICAgICAgICAvLyBUaGlzIHdpbGwgY2F1c2UgYHBheWxvYWRgIHRvIGJlIGRpc3BhdGNoZWQgbGF0ZXIsIG9uY2UgYVxuICAgICAgICAgICAgLy8gc3luYyBoYXMgcmVhY2hlZCB0aGUgXCJwcmVwYXJlZFwiIHN0YXRlLiBTZXR0aW5nIGEgbWF0cml4IElEXG4gICAgICAgICAgICAvLyB3aWxsIGNhdXNlIGEgZnVsbCBsb2dpbiBhbmQgc3luYyBhbmQgZmluYWxseSB0aGUgZGVmZXJyZWRcbiAgICAgICAgICAgIC8vIGFjdGlvbiB3aWxsIGJlIGRpc3BhdGNoZWQuXG4gICAgICAgICAgICBkaXMuZGlzcGF0Y2goe1xuICAgICAgICAgICAgICAgIGFjdGlvbjogJ2RvX2FmdGVyX3N5bmNfcHJlcGFyZWQnLFxuICAgICAgICAgICAgICAgIGRlZmVycmVkX2FjdGlvbjogcGF5bG9hZCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZGlzLmRpc3BhdGNoKHsgYWN0aW9uOiAncmVxdWlyZV9yZWdpc3RyYXRpb24nIH0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgc3dpdGNoIChwYXlsb2FkLmFjdGlvbikge1xuICAgICAgICAgICAgY2FzZSAnTWF0cml4QWN0aW9ucy5hY2NvdW50RGF0YSc6XG4gICAgICAgICAgICAgICAgLy8gWFhYOiBUaGlzIGlzIGEgY29sbGVjdGlvbiBvZiBzZXZlcmFsIGhhY2tzIHRvIHNvbHZlIGEgbWlub3IgcHJvYmxlbS4gV2Ugd2FudCB0b1xuICAgICAgICAgICAgICAgIC8vIHVwZGF0ZSBvdXIgbG9jYWwgc3RhdGUgd2hlbiB0aGUgaWRlbnRpdHkgc2VydmVyIGNoYW5nZXMsIGJ1dCBkb24ndCB3YW50IHRvIHB1dCB0aGF0IGluXG4gICAgICAgICAgICAgICAgLy8gdGhlIGpzLXNkayBhcyB3ZSdkIGJlIHRoZW4gZGljdGF0aW5nIGhvdyBhbGwgY29uc3VtZXJzIG5lZWQgdG8gYmVoYXZlLiBIb3dldmVyLFxuICAgICAgICAgICAgICAgIC8vIHRoaXMgY29tcG9uZW50IGlzIGFscmVhZHkgYmxvYXRlZCBhbmQgd2UgcHJvYmFibHkgZG9uJ3Qgd2FudCB0aGlzIHRpbnkgbG9naWMgaW5cbiAgICAgICAgICAgICAgICAvLyBoZXJlLCBidXQgdGhlcmUncyBubyBiZXR0ZXIgcGxhY2UgaW4gdGhlIHJlYWN0LXNkayBmb3IgaXQuIEFkZGl0aW9uYWxseSwgd2UncmVcbiAgICAgICAgICAgICAgICAvLyBhYnVzaW5nIHRoZSBNYXRyaXhBY3Rpb25DcmVhdG9yIHN0dWZmIHRvIGF2b2lkIGVycm9ycyBvbiBkaXNwYXRjaGVzLlxuICAgICAgICAgICAgICAgIGlmIChwYXlsb2FkLmV2ZW50X3R5cGUgPT09ICdtLmlkZW50aXR5X3NlcnZlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZnVsbFVybCA9IHBheWxvYWQuZXZlbnRfY29udGVudCA/IHBheWxvYWQuZXZlbnRfY29udGVudFsnYmFzZV91cmwnXSA6IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIGlmICghZnVsbFVybCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgTWF0cml4Q2xpZW50UGVnLmdldCgpLnNldElkZW50aXR5U2VydmVyVXJsKG51bGwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oXCJteF9pc19hY2Nlc3NfdG9rZW5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShcIm14X2lzX3VybFwiKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIE1hdHJpeENsaWVudFBlZy5nZXQoKS5zZXRJZGVudGl0eVNlcnZlclVybChmdWxsVXJsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKFwibXhfaXNfYWNjZXNzX3Rva2VuXCIpOyAvLyBjbGVhciB0b2tlblxuICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJteF9pc191cmxcIiwgZnVsbFVybCk7IC8vIFhYWDogRG8gd2Ugc3RpbGwgbmVlZCB0aGlzP1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gcmVkaXNwYXRjaCB0aGUgY2hhbmdlIHdpdGggYSBtb3JlIHNwZWNpZmljIGFjdGlvblxuICAgICAgICAgICAgICAgICAgICBkaXMuZGlzcGF0Y2goeyBhY3Rpb246ICdpZF9zZXJ2ZXJfY2hhbmdlZCcgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbG9nb3V0JzpcbiAgICAgICAgICAgICAgICBkaXMuZGlzcGF0Y2goeyBhY3Rpb246IFwiaGFuZ3VwX2FsbFwiIH0pO1xuICAgICAgICAgICAgICAgIExpZmVjeWNsZS5sb2dvdXQoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3JlcXVpcmVfcmVnaXN0cmF0aW9uJzpcbiAgICAgICAgICAgICAgICBzdGFydEFueVJlZ2lzdHJhdGlvbkZsb3cocGF5bG9hZCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdzdGFydF9yZWdpc3RyYXRpb24nOlxuICAgICAgICAgICAgICAgIGlmIChMaWZlY3ljbGUuaXNTb2Z0TG9nb3V0KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vblNvZnRMb2dvdXQoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIFRoaXMgc3RhcnRzIHRoZSBmdWxsIHJlZ2lzdHJhdGlvbiBmbG93XG4gICAgICAgICAgICAgICAgaWYgKHBheWxvYWQuc2NyZWVuQWZ0ZXJMb2dpbikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNjcmVlbkFmdGVyTG9naW4gPSBwYXlsb2FkLnNjcmVlbkFmdGVyTG9naW47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuc3RhcnRSZWdpc3RyYXRpb24ocGF5bG9hZC5wYXJhbXMgfHwge30pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnc3RhcnRfbG9naW4nOlxuICAgICAgICAgICAgICAgIGlmIChMaWZlY3ljbGUuaXNTb2Z0TG9nb3V0KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vblNvZnRMb2dvdXQoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChwYXlsb2FkLnNjcmVlbkFmdGVyTG9naW4pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zY3JlZW5BZnRlckxvZ2luID0gcGF5bG9hZC5zY3JlZW5BZnRlckxvZ2luO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdMb2dpbigpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnc3RhcnRfcGFzc3dvcmRfcmVjb3ZlcnknOlxuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGVGb3JOZXdWaWV3KHtcbiAgICAgICAgICAgICAgICAgICAgdmlldzogVmlld3MuRk9SR09UX1BBU1NXT1JELFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMubm90aWZ5TmV3U2NyZWVuKCdmb3Jnb3RfcGFzc3dvcmQnKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3N0YXJ0X2NoYXQnOlxuICAgICAgICAgICAgICAgIGNyZWF0ZVJvb20oe1xuICAgICAgICAgICAgICAgICAgICBkbVVzZXJJZDogcGF5bG9hZC51c2VyX2lkLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbGVhdmVfcm9vbSc6XG4gICAgICAgICAgICAgICAgdGhpcy5sZWF2ZVJvb20ocGF5bG9hZC5yb29tX2lkKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2ZvcmdldF9yb29tJzpcbiAgICAgICAgICAgICAgICB0aGlzLmZvcmdldFJvb20ocGF5bG9hZC5yb29tX2lkKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2NvcHlfcm9vbSc6XG4gICAgICAgICAgICAgICAgdGhpcy5jb3B5Um9vbShwYXlsb2FkLnJvb21faWQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAncmVqZWN0X2ludml0ZSc6XG4gICAgICAgICAgICAgICAgTW9kYWwuY3JlYXRlVHJhY2tlZERpYWxvZygnUmVqZWN0IGludml0YXRpb24nLCAnJywgUXVlc3Rpb25EaWFsb2csIHtcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IF90KCdSZWplY3QgaW52aXRhdGlvbicpLFxuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogX3QoJ0FyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byByZWplY3QgdGhlIGludml0YXRpb24/JyksXG4gICAgICAgICAgICAgICAgICAgIG9uRmluaXNoZWQ6IChjb25maXJtKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29uZmlybSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZJWE1FOiBjb250cm9sbGVyIHNob3VsZG4ndCBiZSBsb2FkaW5nIGEgdmlldyA6KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1vZGFsID0gTW9kYWwuY3JlYXRlRGlhbG9nKFNwaW5uZXIsIG51bGwsICdteF9EaWFsb2dfc3Bpbm5lcicpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgTWF0cml4Q2xpZW50UGVnLmdldCgpLmxlYXZlKHBheWxvYWQucm9vbV9pZCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGFsLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnN0YXRlLmN1cnJlbnRSb29tSWQgPT09IHBheWxvYWQucm9vbV9pZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzLmRpc3BhdGNoKHsgYWN0aW9uOiAndmlld19ob21lX3BhZ2UnIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgKGVycikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RhbC5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNb2RhbC5jcmVhdGVUcmFja2VkRGlhbG9nKCdGYWlsZWQgdG8gcmVqZWN0IGludml0YXRpb24nLCAnJywgRXJyb3JEaWFsb2csIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBfdCgnRmFpbGVkIHRvIHJlamVjdCBpbnZpdGF0aW9uJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogZXJyLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAndmlld191c2VyX2luZm8nOlxuICAgICAgICAgICAgICAgIHRoaXMudmlld1VzZXIocGF5bG9hZC51c2VySWQsIHBheWxvYWQuc3ViQWN0aW9uKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgQWN0aW9uLlZpZXdSb29tOiB7XG4gICAgICAgICAgICAgICAgLy8gVGFrZXMgZWl0aGVyIGEgcm9vbSBJRCBvciByb29tIGFsaWFzOiBpZiBzd2l0Y2hpbmcgdG8gYSByb29tIHRoZSBjbGllbnQgaXMgYWxyZWFkeVxuICAgICAgICAgICAgICAgIC8vIGtub3duIHRvIGJlIGluIChlZy4gdXNlciBjbGlja3Mgb24gYSByb29tIGluIHRoZSByZWNlbnRzIHBhbmVsKSwgc3VwcGx5IHRoZSBJRFxuICAgICAgICAgICAgICAgIC8vIElmIHRoZSB1c2VyIGlzIGNsaWNraW5nIG9uIGEgcm9vbSBpbiB0aGUgY29udGV4dCBvZiB0aGUgYWxpYXMgYmVpbmcgcHJlc2VudGVkXG4gICAgICAgICAgICAgICAgLy8gdG8gdGhlbSwgc3VwcGx5IHRoZSByb29tIGFsaWFzLiBJZiBib3RoIGFyZSBzdXBwbGllZCwgdGhlIHJvb20gSUQgd2lsbCBiZSBpZ25vcmVkLlxuICAgICAgICAgICAgICAgIGNvbnN0IHByb21pc2UgPSB0aGlzLnZpZXdSb29tKHBheWxvYWQpO1xuICAgICAgICAgICAgICAgIGlmIChwYXlsb2FkLmRlZmVycmVkX2FjdGlvbikge1xuICAgICAgICAgICAgICAgICAgICBwcm9taXNlLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGlzLmRpc3BhdGNoKHBheWxvYWQuZGVmZXJyZWRfYWN0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBBY3Rpb24uVmlld1VzZXJTZXR0aW5nczoge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRhYlBheWxvYWQgPSBwYXlsb2FkIGFzIE9wZW5Ub1RhYlBheWxvYWQ7XG4gICAgICAgICAgICAgICAgTW9kYWwuY3JlYXRlVHJhY2tlZERpYWxvZygnVXNlciBzZXR0aW5ncycsICcnLCBVc2VyU2V0dGluZ3NEaWFsb2csXG4gICAgICAgICAgICAgICAgICAgIHsgaW5pdGlhbFRhYklkOiB0YWJQYXlsb2FkLmluaXRpYWxUYWJJZCB9LFxuICAgICAgICAgICAgICAgICAgICAvKmNsYXNzTmFtZT0qL251bGwsIC8qaXNQcmlvcml0eT0qL2ZhbHNlLCAvKmlzU3RhdGljPSovdHJ1ZSk7XG5cbiAgICAgICAgICAgICAgICAvLyBWaWV3IHRoZSB3ZWxjb21lIG9yIGhvbWUgcGFnZSBpZiB3ZSBuZWVkIHNvbWV0aGluZyB0byBsb29rIGF0XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3U29tZXRoaW5nQmVoaW5kTW9kYWwoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgJ3ZpZXdfY3JlYXRlX3Jvb20nOlxuICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlUm9vbShwYXlsb2FkLnB1YmxpYywgcGF5bG9hZC5kZWZhdWx0TmFtZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICd2aWV3X2NyZWF0ZV9ncm91cCc6IHtcbiAgICAgICAgICAgICAgICBjb25zdCBwcm90b3R5cGUgPSBTZXR0aW5nc1N0b3JlLmdldFZhbHVlKFwiZmVhdHVyZV9jb21tdW5pdGllc192Ml9wcm90b3R5cGVzXCIpO1xuICAgICAgICAgICAgICAgIE1vZGFsLmNyZWF0ZVRyYWNrZWREaWFsb2coXG4gICAgICAgICAgICAgICAgICAgICdDcmVhdGUgQ29tbXVuaXR5JyxcbiAgICAgICAgICAgICAgICAgICAgJycsXG4gICAgICAgICAgICAgICAgICAgIHByb3RvdHlwZSA/IENyZWF0ZUNvbW11bml0eVByb3RvdHlwZURpYWxvZyA6IENyZWF0ZUdyb3VwRGlhbG9nLFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIEFjdGlvbi5WaWV3Um9vbURpcmVjdG9yeToge1xuICAgICAgICAgICAgICAgIGlmIChTcGFjZVN0b3JlLmluc3RhbmNlLmFjdGl2ZVNwYWNlWzBdID09PSBcIiFcIikge1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0RGlzcGF0Y2hlci5kaXNwYXRjaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb246IFwidmlld19yb29tXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICByb29tX2lkOiBTcGFjZVN0b3JlLmluc3RhbmNlLmFjdGl2ZVNwYWNlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBNb2RhbC5jcmVhdGVUcmFja2VkRGlhbG9nKCdSb29tIGRpcmVjdG9yeScsICcnLCBSb29tRGlyZWN0b3J5LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbml0aWFsVGV4dDogcGF5bG9hZC5pbml0aWFsVGV4dCxcbiAgICAgICAgICAgICAgICAgICAgfSwgJ214X1Jvb21EaXJlY3RvcnlfZGlhbG9nV3JhcHBlcicsIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBWaWV3IHRoZSB3ZWxjb21lIG9yIGhvbWUgcGFnZSBpZiB3ZSBuZWVkIHNvbWV0aGluZyB0byBsb29rIGF0XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3U29tZXRoaW5nQmVoaW5kTW9kYWwoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgJ3ZpZXdfbXlfZ3JvdXBzJzpcbiAgICAgICAgICAgICAgICB0aGlzLnNldFBhZ2UoUGFnZVR5cGUuTXlHcm91cHMpO1xuICAgICAgICAgICAgICAgIHRoaXMubm90aWZ5TmV3U2NyZWVuKCdncm91cHMnKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3ZpZXdfZ3JvdXAnOlxuICAgICAgICAgICAgICAgIHRoaXMudmlld0dyb3VwKHBheWxvYWQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAndmlld193ZWxjb21lX3BhZ2UnOlxuICAgICAgICAgICAgICAgIHRoaXMudmlld1dlbGNvbWUoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3ZpZXdfaG9tZV9wYWdlJzpcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdIb21lKHBheWxvYWQuanVzdFJlZ2lzdGVyZWQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAndmlld19zdGFydF9jaGF0X29yX3JldXNlJzpcbiAgICAgICAgICAgICAgICB0aGlzLmNoYXRDcmVhdGVPclJldXNlKHBheWxvYWQudXNlcl9pZCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICd2aWV3X2NyZWF0ZV9jaGF0JzpcbiAgICAgICAgICAgICAgICBzaG93U3RhcnRDaGF0SW52aXRlRGlhbG9nKHBheWxvYWQuaW5pdGlhbFRleHQgfHwgXCJcIik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICd2aWV3X2ludml0ZSc6IHtcbiAgICAgICAgICAgICAgICBjb25zdCByb29tID0gTWF0cml4Q2xpZW50UGVnLmdldCgpLmdldFJvb20ocGF5bG9hZC5yb29tSWQpO1xuICAgICAgICAgICAgICAgIGlmIChyb29tPy5pc1NwYWNlUm9vbSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHNob3dTcGFjZUludml0ZShyb29tKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzaG93Um9vbUludml0ZURpYWxvZyhwYXlsb2FkLnJvb21JZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAndmlld19sYXN0X3NjcmVlbic6XG4gICAgICAgICAgICAgICAgLy8gVGhpcyBmdW5jdGlvbiBkb2VzIHdoYXQgd2Ugd2FudCwgZGVzcGl0ZSB0aGUgbmFtZS4gVGhlIGlkZWEgaXMgdGhhdCBpdCBzaG93c1xuICAgICAgICAgICAgICAgIC8vIHRoZSBsYXN0IHJvb20gd2Ugd2VyZSBsb29raW5nIGF0IG9yIHNvbWUgcmVhc29uYWJsZSBkZWZhdWx0L2d1ZXNzLiBXZSBkb24ndFxuICAgICAgICAgICAgICAgIC8vIGhhdmUgdG8gd29ycnkgYWJvdXQgZW1haWwgaW52aXRlcyBvciBzaW1pbGFyIGJlaW5nIHJlLXRyaWdnZXJlZCBiZWNhdXNlIHRoZVxuICAgICAgICAgICAgICAgIC8vIGZ1bmN0aW9uIHdpbGwgaGF2ZSBjbGVhcmVkIHRoYXQgc3RhdGUgYW5kIG5vdCBleGVjdXRlIHRoYXQgcGF0aC5cbiAgICAgICAgICAgICAgICB0aGlzLnNob3dTY3JlZW5BZnRlckxvZ2luKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICd0b2dnbGVfbXlfZ3JvdXBzJzpcbiAgICAgICAgICAgICAgICAvLyBwZXJzaXN0IHRoYXQgdGhlIHVzZXIgaGFzIGludGVyYWN0ZWQgd2l0aCB0aGlzLCB1c2UgaXQgdG8gZGlzbWlzcyB0aGUgYmV0YSBkb3RcbiAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcIm14X3NlZW5TcGFjZXNCZXRhXCIsIFwiMVwiKTtcbiAgICAgICAgICAgICAgICAvLyBXZSBqdXN0IGRpc3BhdGNoIHRoZSBwYWdlIGNoYW5nZSByYXRoZXIgdGhhbiBoYXZlIHRvIHdvcnJ5IGFib3V0XG4gICAgICAgICAgICAgICAgLy8gd2hhdCB0aGUgbG9naWMgaXMgZm9yIGVhY2ggb2YgdGhlc2UgYnJhbmNoZXMuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc3RhdGUucGFnZV90eXBlID09PSBQYWdlVHlwZS5NeUdyb3Vwcykge1xuICAgICAgICAgICAgICAgICAgICBkaXMuZGlzcGF0Y2goeyBhY3Rpb246ICd2aWV3X2xhc3Rfc2NyZWVuJyB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBkaXMuZGlzcGF0Y2goeyBhY3Rpb246ICd2aWV3X215X2dyb3VwcycgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnaGlkZV9sZWZ0X3BhbmVsJzpcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgY29sbGFwc2VMaHM6IHRydWUsXG4gICAgICAgICAgICAgICAgfSwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLnJlc2l6ZU5vdGlmaWVyLm5vdGlmeUxlZnRIYW5kbGVSZXNpemVkKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdmb2N1c19yb29tX2ZpbHRlcic6IC8vIGZvciBDdHJsT3JDbWQrSyB0byB3b3JrIGJ5IGV4cGFuZGluZyB0aGUgbGVmdCBwYW5lbCBmaXJzdFxuICAgICAgICAgICAgY2FzZSAnc2hvd19sZWZ0X3BhbmVsJzpcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgY29sbGFwc2VMaHM6IGZhbHNlLFxuICAgICAgICAgICAgICAgIH0sICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5yZXNpemVOb3RpZmllci5ub3RpZnlMZWZ0SGFuZGxlUmVzaXplZCgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBBY3Rpb24uT3BlbkRpYWxQYWQ6XG4gICAgICAgICAgICAgICAgTW9kYWwuY3JlYXRlVHJhY2tlZERpYWxvZygnRGlhbCBwYWQnLCAnJywgRGlhbFBhZE1vZGFsLCB7fSwgXCJteF9EaWFsb2dfZGlhbFBhZFdyYXBwZXJcIik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdvbl9sb2dnZWRfaW4nOlxuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgLy8gU2tpcCB0aGlzIGhhbmRsaW5nIGZvciB0b2tlbiBsb2dpbiBhcyB0aGF0IGFsd2F5cyBjYWxscyBvbkxvZ2dlZEluIGl0c2VsZlxuICAgICAgICAgICAgICAgICAgICAhdGhpcy50b2tlbkxvZ2luICYmXG4gICAgICAgICAgICAgICAgICAgICFMaWZlY3ljbGUuaXNTb2Z0TG9nb3V0KCkgJiZcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS52aWV3ICE9PSBWaWV3cy5MT0dJTiAmJlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLnZpZXcgIT09IFZpZXdzLlJFR0lTVEVSICYmXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUudmlldyAhPT0gVmlld3MuQ09NUExFVEVfU0VDVVJJVFkgJiZcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS52aWV3ICE9PSBWaWV3cy5FMkVfU0VUVVBcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkxvZ2dlZEluKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnb25fY2xpZW50X25vdF92aWFibGUnOlxuICAgICAgICAgICAgICAgIHRoaXMub25Tb2Z0TG9nb3V0KCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdvbl9sb2dnZWRfb3V0JzpcbiAgICAgICAgICAgICAgICB0aGlzLm9uTG9nZ2VkT3V0KCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICd3aWxsX3N0YXJ0X2NsaWVudCc6XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHJlYWR5OiBmYWxzZSB9LCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZSBjbGllbnQgaXMgYWJvdXQgdG8gc3RhcnQsIHdlIGFyZSwgYnkgZGVmaW5pdGlvbiwgbm90IHJlYWR5LlxuICAgICAgICAgICAgICAgICAgICAvLyBTZXQgcmVhZHkgdG8gZmFsc2Ugbm93LCB0aGVuIGl0J2xsIGJlIHNldCB0byB0cnVlIHdoZW4gdGhlIHN5bmNcbiAgICAgICAgICAgICAgICAgICAgLy8gbGlzdGVuZXIgd2Ugc2V0IGJlbG93IGZpcmVzLlxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9uV2lsbFN0YXJ0Q2xpZW50KCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdjbGllbnRfc3RhcnRlZCc6XG4gICAgICAgICAgICAgICAgdGhpcy5vbkNsaWVudFN0YXJ0ZWQoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3NlbmRfZXZlbnQnOlxuICAgICAgICAgICAgICAgIHRoaXMub25TZW5kRXZlbnQocGF5bG9hZC5yb29tX2lkLCBwYXlsb2FkLmV2ZW50KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2FyaWFfaGlkZV9tYWluX2FwcCc6XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIGhpZGVUb1NSVXNlcnM6IHRydWUsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdhcmlhX3VuaGlkZV9tYWluX2FwcCc6XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIGhpZGVUb1NSVXNlcnM6IGZhbHNlLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnYWNjZXB0X2Nvb2tpZXMnOlxuICAgICAgICAgICAgICAgIFNldHRpbmdzU3RvcmUuc2V0VmFsdWUoXCJhbmFseXRpY3NPcHRJblwiLCBudWxsLCBTZXR0aW5nTGV2ZWwuREVWSUNFLCB0cnVlKTtcbiAgICAgICAgICAgICAgICBTZXR0aW5nc1N0b3JlLnNldFZhbHVlKFwic2hvd0Nvb2tpZUJhclwiLCBudWxsLCBTZXR0aW5nTGV2ZWwuREVWSUNFLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgaGlkZUFuYWx5dGljc1RvYXN0KCk7XG4gICAgICAgICAgICAgICAgaWYgKEFuYWx5dGljcy5jYW5FbmFibGUoKSkge1xuICAgICAgICAgICAgICAgICAgICBBbmFseXRpY3MuZW5hYmxlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChDb3VudGx5QW5hbHl0aWNzLmluc3RhbmNlLmNhbkVuYWJsZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIENvdW50bHlBbmFseXRpY3MuaW5zdGFuY2UuZW5hYmxlKC8qIGFub255bW91cyA9ICovIGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdyZWplY3RfY29va2llcyc6XG4gICAgICAgICAgICAgICAgU2V0dGluZ3NTdG9yZS5zZXRWYWx1ZShcImFuYWx5dGljc09wdEluXCIsIG51bGwsIFNldHRpbmdMZXZlbC5ERVZJQ0UsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICBTZXR0aW5nc1N0b3JlLnNldFZhbHVlKFwic2hvd0Nvb2tpZUJhclwiLCBudWxsLCBTZXR0aW5nTGV2ZWwuREVWSUNFLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgaGlkZUFuYWx5dGljc1RvYXN0KCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcHJpdmF0ZSBzZXRQYWdlKHBhZ2VUeXBlOiBQYWdlVHlwZSkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIHBhZ2VfdHlwZTogcGFnZVR5cGUsXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgc3RhcnRSZWdpc3RyYXRpb24ocGFyYW1zOiB7W2tleTogc3RyaW5nXTogc3RyaW5nfSkge1xuICAgICAgICBjb25zdCBuZXdTdGF0ZTogUGFydGlhbDxJU3RhdGU+ID0ge1xuICAgICAgICAgICAgdmlldzogVmlld3MuUkVHSVNURVIsXG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gT25seSBob25vdXIgcGFyYW1zIGlmIHRoZXkgYXJlIGFsbCBwcmVzZW50LCBvdGhlcndpc2Ugd2UgcmVzZXRcbiAgICAgICAgLy8gSFMgYW5kIElTIFVSTHMgd2hlbiBzd2l0Y2hpbmcgdG8gcmVnaXN0cmF0aW9uLlxuICAgICAgICBpZiAocGFyYW1zLmNsaWVudF9zZWNyZXQgJiZcbiAgICAgICAgICAgIHBhcmFtcy5zZXNzaW9uX2lkICYmXG4gICAgICAgICAgICBwYXJhbXMuaHNfdXJsICYmXG4gICAgICAgICAgICBwYXJhbXMuaXNfdXJsICYmXG4gICAgICAgICAgICBwYXJhbXMuc2lkXG4gICAgICAgICkge1xuICAgICAgICAgICAgbmV3U3RhdGUuc2VydmVyQ29uZmlnID0gYXdhaXQgQXV0b0Rpc2NvdmVyeVV0aWxzLnZhbGlkYXRlU2VydmVyQ29uZmlnV2l0aFN0YXRpY1VybHMoXG4gICAgICAgICAgICAgICAgcGFyYW1zLmhzX3VybCwgcGFyYW1zLmlzX3VybCxcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIC8vIElmIHRoZSBocyB1cmwgbWF0Y2hlcyB0aGVuIHRha2UgdGhlIGhzIG5hbWUgd2Uga25vdyBsb2NhbGx5IGFzIGl0IGlzIGxpa2VseSBwcmV0dGllclxuICAgICAgICAgICAgY29uc3QgZGVmYXVsdENvbmZpZyA9IFNka0NvbmZpZy5nZXQoKVtcInZhbGlkYXRlZF9zZXJ2ZXJfY29uZmlnXCJdIGFzIFZhbGlkYXRlZFNlcnZlckNvbmZpZztcbiAgICAgICAgICAgIGlmIChkZWZhdWx0Q29uZmlnICYmIGRlZmF1bHRDb25maWcuaHNVcmwgPT09IG5ld1N0YXRlLnNlcnZlckNvbmZpZy5oc1VybCkge1xuICAgICAgICAgICAgICAgIG5ld1N0YXRlLnNlcnZlckNvbmZpZy5oc05hbWUgPSBkZWZhdWx0Q29uZmlnLmhzTmFtZTtcbiAgICAgICAgICAgICAgICBuZXdTdGF0ZS5zZXJ2ZXJDb25maWcuaHNOYW1lSXNEaWZmZXJlbnQgPSBkZWZhdWx0Q29uZmlnLmhzTmFtZUlzRGlmZmVyZW50O1xuICAgICAgICAgICAgICAgIG5ld1N0YXRlLnNlcnZlckNvbmZpZy5pc0RlZmF1bHQgPSBkZWZhdWx0Q29uZmlnLmlzRGVmYXVsdDtcbiAgICAgICAgICAgICAgICBuZXdTdGF0ZS5zZXJ2ZXJDb25maWcuaXNOYW1lUmVzb2x2YWJsZSA9IGRlZmF1bHRDb25maWcuaXNOYW1lUmVzb2x2YWJsZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbmV3U3RhdGUucmVnaXN0ZXJfY2xpZW50X3NlY3JldCA9IHBhcmFtcy5jbGllbnRfc2VjcmV0O1xuICAgICAgICAgICAgbmV3U3RhdGUucmVnaXN0ZXJfc2Vzc2lvbl9pZCA9IHBhcmFtcy5zZXNzaW9uX2lkO1xuICAgICAgICAgICAgbmV3U3RhdGUucmVnaXN0ZXJfaWRfc2lkID0gcGFyYW1zLnNpZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2V0U3RhdGVGb3JOZXdWaWV3KG5ld1N0YXRlKTtcbiAgICAgICAgVGhlbWVDb250cm9sbGVyLmlzTG9naW4gPSB0cnVlO1xuICAgICAgICB0aGlzLnRoZW1lV2F0Y2hlci5yZWNoZWNrKCk7XG4gICAgICAgIHRoaXMubm90aWZ5TmV3U2NyZWVuKCdyZWdpc3RlcicpO1xuICAgIH1cblxuICAgIC8vIHN3aXRjaCB2aWV3IHRvIHRoZSBnaXZlbiByb29tXG4gICAgLy9cbiAgICAvLyBAcGFyYW0ge09iamVjdH0gcm9vbUluZm8gT2JqZWN0IGNvbnRhaW5pbmcgZGF0YSBhYm91dCB0aGUgcm9vbSB0byBiZSBqb2luZWRcbiAgICAvLyBAcGFyYW0ge3N0cmluZz19IHJvb21JbmZvLnJvb21faWQgSUQgb2YgdGhlIHJvb20gdG8gam9pbi4gT25lIG9mIHJvb21faWQgb3Igcm9vbV9hbGlhcyBtdXN0IGJlIGdpdmVuLlxuICAgIC8vIEBwYXJhbSB7c3RyaW5nPX0gcm9vbUluZm8ucm9vbV9hbGlhcyBBbGlhcyBvZiB0aGUgcm9vbSB0byBqb2luLiBPbmUgb2Ygcm9vbV9pZCBvciByb29tX2FsaWFzIG11c3QgYmUgZ2l2ZW4uXG4gICAgLy8gQHBhcmFtIHtib29sZWFuPX0gcm9vbUluZm8uYXV0b19qb2luIElmIHRydWUsIGF1dG9tYXRpY2FsbHkgYXR0ZW1wdCB0byBqb2luIHRoZSByb29tIGlmIG5vdCBhbHJlYWR5IGEgbWVtYmVyLlxuICAgIC8vIEBwYXJhbSB7c3RyaW5nPX0gcm9vbUluZm8uZXZlbnRfaWQgSUQgb2YgdGhlIGV2ZW50IGluIHRoaXMgcm9vbSB0byBzaG93OiB0aGlzIHdpbGwgY2F1c2UgYSBzd2l0Y2ggdG8gdGhlXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0IG9mIHRoYXQgcGFydGljdWxhciBldmVudC5cbiAgICAvLyBAcGFyYW0ge2Jvb2xlYW49fSByb29tSW5mby5oaWdobGlnaHRlZCBJZiB0cnVlLCBhZGQgZXZlbnRfaWQgdG8gdGhlIGhhc2ggb2YgdGhlIFVSTFxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZCBhbHRlciB0aGUgRXZlbnRUaWxlIHRvIGFwcGVhciBoaWdobGlnaHRlZC5cbiAgICAvLyBAcGFyYW0ge09iamVjdD19IHJvb21JbmZvLnRocmVlcGlkX2ludml0ZSBPYmplY3QgY29udGFpbmluZyBkYXRhIGFib3V0IHRoZSB0aGlyZCBwYXJ0eVxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdlIHJlY2VpdmVkIHRvIGpvaW4gdGhlIHJvb20sIGlmIGFueS5cbiAgICAvLyBAcGFyYW0ge09iamVjdD19IHJvb21JbmZvLm9vYl9kYXRhIE9iamVjdCBvZiBhZGRpdGlvbmFsIGRhdGEgYWJvdXQgdGhlIHJvb21cbiAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGF0IGhhcyBiZWVuIHBhc3NlZCBvdXQtb2YtYmFuZCAoZWcuXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9vbSBuYW1lIGFuZCBhdmF0YXIgZnJvbSBhbiBpbnZpdGUgZW1haWwpXG4gICAgcHJpdmF0ZSB2aWV3Um9vbShyb29tSW5mbzogSVJvb21JbmZvKSB7XG4gICAgICAgIHRoaXMuZm9jdXNDb21wb3NlciA9IHRydWU7XG5cbiAgICAgICAgaWYgKHJvb21JbmZvLnJvb21fYWxpYXMpIHtcbiAgICAgICAgICAgIGxvZ2dlci5sb2coXG4gICAgICAgICAgICAgICAgYFN3aXRjaGluZyB0byByb29tIGFsaWFzICR7cm9vbUluZm8ucm9vbV9hbGlhc30gYXQgZXZlbnQgYCArXG4gICAgICAgICAgICAgICAgcm9vbUluZm8uZXZlbnRfaWQsXG4gICAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbG9nZ2VyLmxvZyhgU3dpdGNoaW5nIHRvIHJvb20gaWQgJHtyb29tSW5mby5yb29tX2lkfSBhdCBldmVudCBgICtcbiAgICAgICAgICAgICAgICByb29tSW5mby5ldmVudF9pZCxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBXYWl0IGZvciB0aGUgZmlyc3Qgc3luYyB0byBjb21wbGV0ZSBzbyB0aGF0IGlmIGEgcm9vbSBkb2VzIGhhdmUgYW4gYWxpYXMsXG4gICAgICAgIC8vIGl0IHdvdWxkIGhhdmUgYmVlbiByZXRyaWV2ZWQuXG4gICAgICAgIGxldCB3YWl0Rm9yID0gUHJvbWlzZS5yZXNvbHZlKG51bGwpO1xuICAgICAgICBpZiAoIXRoaXMuZmlyc3RTeW5jQ29tcGxldGUpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5maXJzdFN5bmNQcm9taXNlKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLndhcm4oJ0Nhbm5vdCB2aWV3IGEgcm9vbSBiZWZvcmUgZmlyc3Qgc3luYy4gcm9vbV9pZDonLCByb29tSW5mby5yb29tX2lkKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3YWl0Rm9yID0gdGhpcy5maXJzdFN5bmNQcm9taXNlLnByb21pc2U7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gd2FpdEZvci50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIGxldCBwcmVzZW50ZWRJZCA9IHJvb21JbmZvLnJvb21fYWxpYXMgfHwgcm9vbUluZm8ucm9vbV9pZDtcbiAgICAgICAgICAgIGNvbnN0IHJvb20gPSBNYXRyaXhDbGllbnRQZWcuZ2V0KCkuZ2V0Um9vbShyb29tSW5mby5yb29tX2lkKTtcbiAgICAgICAgICAgIGlmIChyb29tKSB7XG4gICAgICAgICAgICAgICAgLy8gTm90IGFsbCB0aW1lbGluZSBldmVudHMgYXJlIGRlY3J5cHRlZCBhaGVhZCBvZiB0aW1lIGFueW1vcmVcbiAgICAgICAgICAgICAgICAvLyBPbmx5IHRoZSBjcml0aWNhbCBvbmVzIGZvciBhIHR5cGljYWwgVUkgYXJlXG4gICAgICAgICAgICAgICAgLy8gVGhpcyB3aWxsIHN0YXJ0IHRoZSBkZWNyeXB0aW9uIHByb2Nlc3MgZm9yIGFsbCBldmVudHMgd2hlbiBhXG4gICAgICAgICAgICAgICAgLy8gdXNlciB2aWV3cyBhIHJvb21cbiAgICAgICAgICAgICAgICByb29tLmRlY3J5cHRBbGxFdmVudHMoKTtcbiAgICAgICAgICAgICAgICBjb25zdCB0aGVBbGlhcyA9IFJvb21zLmdldERpc3BsYXlBbGlhc0ZvclJvb20ocm9vbSk7XG4gICAgICAgICAgICAgICAgaWYgKHRoZUFsaWFzKSB7XG4gICAgICAgICAgICAgICAgICAgIHByZXNlbnRlZElkID0gdGhlQWxpYXM7XG4gICAgICAgICAgICAgICAgICAgIC8vIFN0b3JlIGRpc3BsYXkgYWxpYXMgb2YgdGhlIHByZXNlbnRlZCByb29tIGluIGNhY2hlIHRvIHNwZWVkIGZ1dHVyZVxuICAgICAgICAgICAgICAgICAgICAvLyBuYXZpZ2F0aW9uLlxuICAgICAgICAgICAgICAgICAgICBzdG9yZVJvb21BbGlhc0luQ2FjaGUodGhlQWxpYXMsIHJvb20ucm9vbUlkKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBTdG9yZSB0aGlzIGFzIHRoZSBJRCBvZiB0aGUgbGFzdCByb29tIGFjY2Vzc2VkLiBUaGlzIGlzIHNvIHRoYXQgd2UgY2FuXG4gICAgICAgICAgICAgICAgLy8gcGVyc2lzdCB3aGljaCByb29tIGlzIGJlaW5nIHN0b3JlZCBhY3Jvc3MgcmVmcmVzaGVzIGFuZCBicm93c2VyIHF1aXRzLlxuICAgICAgICAgICAgICAgIGlmIChsb2NhbFN0b3JhZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ214X2xhc3Rfcm9vbV9pZCcsIHJvb20ucm9vbUlkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIElmIHdlIGFyZSByZWRpcmVjdGluZyB0byBhIFJvb20gQWxpYXMgYW5kIGl0IGlzIGZvciB0aGUgcm9vbSB3ZSBhbHJlYWR5IHNob3dpbmcgdGhlbiByZXBsYWNlIGhpc3RvcnkgaXRlbVxuICAgICAgICAgICAgY29uc3QgcmVwbGFjZUxhc3QgPSBwcmVzZW50ZWRJZFswXSA9PT0gXCIjXCIgJiYgcm9vbUluZm8ucm9vbV9pZCA9PT0gdGhpcy5zdGF0ZS5jdXJyZW50Um9vbUlkO1xuXG4gICAgICAgICAgICBpZiAocm9vbUluZm8uZXZlbnRfaWQgJiYgcm9vbUluZm8uaGlnaGxpZ2h0ZWQpIHtcbiAgICAgICAgICAgICAgICBwcmVzZW50ZWRJZCArPSBcIi9cIiArIHJvb21JbmZvLmV2ZW50X2lkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgdmlldzogVmlld3MuTE9HR0VEX0lOLFxuICAgICAgICAgICAgICAgIGN1cnJlbnRSb29tSWQ6IHJvb21JbmZvLnJvb21faWQgfHwgbnVsbCxcbiAgICAgICAgICAgICAgICBwYWdlX3R5cGU6IFBhZ2VUeXBlLlJvb21WaWV3LFxuICAgICAgICAgICAgICAgIHRocmVlcGlkSW52aXRlOiByb29tSW5mby50aHJlZXBpZF9pbnZpdGUsXG4gICAgICAgICAgICAgICAgcm9vbU9vYkRhdGE6IHJvb21JbmZvLm9vYl9kYXRhLFxuICAgICAgICAgICAgICAgIGZvcmNlVGltZWxpbmU6IHJvb21JbmZvLmZvcmNlVGltZWxpbmUsXG4gICAgICAgICAgICAgICAgcmVhZHk6IHRydWUsXG4gICAgICAgICAgICAgICAgcm9vbUp1c3RDcmVhdGVkT3B0czogcm9vbUluZm8uanVzdENyZWF0ZWRPcHRzLFxuICAgICAgICAgICAgfSwgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMubm90aWZ5TmV3U2NyZWVuKCdyb29tLycgKyBwcmVzZW50ZWRJZCwgcmVwbGFjZUxhc3QpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgdmlld0dyb3VwKHBheWxvYWQpIHtcbiAgICAgICAgY29uc3QgZ3JvdXBJZCA9IHBheWxvYWQuZ3JvdXBfaWQ7XG5cbiAgICAgICAgLy8gV2FpdCBmb3IgdGhlIGZpcnN0IHN5bmMgdG8gY29tcGxldGVcbiAgICAgICAgaWYgKCF0aGlzLmZpcnN0U3luY0NvbXBsZXRlKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuZmlyc3RTeW5jUHJvbWlzZSkge1xuICAgICAgICAgICAgICAgIGxvZ2dlci53YXJuKCdDYW5ub3QgdmlldyBhIGdyb3VwIGJlZm9yZSBmaXJzdCBzeW5jLiBncm91cF9pZDonLCBncm91cElkKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmZpcnN0U3luY1Byb21pc2UucHJvbWlzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgdmlldzogVmlld3MuTE9HR0VEX0lOLFxuICAgICAgICAgICAgY3VycmVudEdyb3VwSWQ6IGdyb3VwSWQsXG4gICAgICAgICAgICBjdXJyZW50R3JvdXBJc05ldzogcGF5bG9hZC5ncm91cF9pc19uZXcsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnNldFBhZ2UoUGFnZVR5cGUuR3JvdXBWaWV3KTtcbiAgICAgICAgdGhpcy5ub3RpZnlOZXdTY3JlZW4oJ2dyb3VwLycgKyBncm91cElkKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHZpZXdTb21ldGhpbmdCZWhpbmRNb2RhbCgpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUudmlldyAhPT0gVmlld3MuTE9HR0VEX0lOKSB7XG4gICAgICAgICAgICB0aGlzLnZpZXdXZWxjb21lKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLnN0YXRlLmN1cnJlbnRHcm91cElkICYmICF0aGlzLnN0YXRlLmN1cnJlbnRSb29tSWQpIHtcbiAgICAgICAgICAgIHRoaXMudmlld0hvbWUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgdmlld1dlbGNvbWUoKSB7XG4gICAgICAgIGlmIChzaG91bGRVc2VMb2dpbkZvcldlbGNvbWUoU2RrQ29uZmlnLmdldCgpKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmlld0xvZ2luKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZXRTdGF0ZUZvck5ld1ZpZXcoe1xuICAgICAgICAgICAgdmlldzogVmlld3MuV0VMQ09NRSxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubm90aWZ5TmV3U2NyZWVuKCd3ZWxjb21lJyk7XG4gICAgICAgIFRoZW1lQ29udHJvbGxlci5pc0xvZ2luID0gdHJ1ZTtcbiAgICAgICAgdGhpcy50aGVtZVdhdGNoZXIucmVjaGVjaygpO1xuICAgIH1cblxuICAgIHByaXZhdGUgdmlld0xvZ2luKG90aGVyU3RhdGU/OiBhbnkpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZUZvck5ld1ZpZXcoe1xuICAgICAgICAgICAgdmlldzogVmlld3MuTE9HSU4sXG4gICAgICAgICAgICAuLi5vdGhlclN0YXRlLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5ub3RpZnlOZXdTY3JlZW4oJ2xvZ2luJyk7XG4gICAgICAgIFRoZW1lQ29udHJvbGxlci5pc0xvZ2luID0gdHJ1ZTtcbiAgICAgICAgdGhpcy50aGVtZVdhdGNoZXIucmVjaGVjaygpO1xuICAgIH1cblxuICAgIHByaXZhdGUgdmlld0hvbWUoanVzdFJlZ2lzdGVyZWQgPSBmYWxzZSkge1xuICAgICAgICAvLyBUaGUgaG9tZSBwYWdlIHJlcXVpcmVzIHRoZSBcImxvZ2dlZCBpblwiIHZpZXcsIHNvIHdlJ2xsIHNldCB0aGF0LlxuICAgICAgICB0aGlzLnNldFN0YXRlRm9yTmV3Vmlldyh7XG4gICAgICAgICAgICB2aWV3OiBWaWV3cy5MT0dHRURfSU4sXG4gICAgICAgICAgICBqdXN0UmVnaXN0ZXJlZCxcbiAgICAgICAgICAgIGN1cnJlbnRSb29tSWQ6IG51bGwsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnNldFBhZ2UoUGFnZVR5cGUuSG9tZVBhZ2UpO1xuICAgICAgICB0aGlzLm5vdGlmeU5ld1NjcmVlbignaG9tZScpO1xuICAgICAgICBUaGVtZUNvbnRyb2xsZXIuaXNMb2dpbiA9IGZhbHNlO1xuICAgICAgICB0aGlzLnRoZW1lV2F0Y2hlci5yZWNoZWNrKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB2aWV3VXNlcih1c2VySWQ6IHN0cmluZywgc3ViQWN0aW9uOiBzdHJpbmcpIHtcbiAgICAgICAgLy8gV2FpdCBmb3IgdGhlIGZpcnN0IHN5bmMgc28gdGhhdCBgZ2V0Um9vbWAgZ2l2ZXMgdXMgYSByb29tIG9iamVjdCBpZiBpdCdzXG4gICAgICAgIC8vIGluIHRoZSBzeW5jIHJlc3BvbnNlXG4gICAgICAgIGNvbnN0IHdhaXRGb3JTeW5jID0gdGhpcy5maXJzdFN5bmNQcm9taXNlID9cbiAgICAgICAgICAgIHRoaXMuZmlyc3RTeW5jUHJvbWlzZS5wcm9taXNlIDogUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICAgIHdhaXRGb3JTeW5jLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHN1YkFjdGlvbiA9PT0gJ2NoYXQnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jaGF0Q3JlYXRlT3JSZXVzZSh1c2VySWQpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMubm90aWZ5TmV3U2NyZWVuKCd1c2VyLycgKyB1c2VySWQpO1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGN1cnJlbnRVc2VySWQ6IHVzZXJJZCB9KTtcbiAgICAgICAgICAgIHRoaXMuc2V0UGFnZShQYWdlVHlwZS5Vc2VyVmlldyk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgY3JlYXRlUm9vbShkZWZhdWx0UHVibGljID0gZmFsc2UsIGRlZmF1bHROYW1lPzogc3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IGNvbW11bml0eUlkID0gQ29tbXVuaXR5UHJvdG90eXBlU3RvcmUuaW5zdGFuY2UuZ2V0U2VsZWN0ZWRDb21tdW5pdHlJZCgpO1xuICAgICAgICBpZiAoY29tbXVuaXR5SWQpIHtcbiAgICAgICAgICAgIC8vIGRvdWJsZSBjaGVjayB0aGUgdXNlciB3aWxsIGhhdmUgcGVybWlzc2lvbiB0byBhc3NvY2lhdGUgdGhpcyByb29tIHdpdGggdGhlIGNvbW11bml0eVxuICAgICAgICAgICAgaWYgKCFDb21tdW5pdHlQcm90b3R5cGVTdG9yZS5pbnN0YW5jZS5pc0FkbWluT2YoY29tbXVuaXR5SWQpKSB7XG4gICAgICAgICAgICAgICAgTW9kYWwuY3JlYXRlVHJhY2tlZERpYWxvZygnUHJlLWZhaWx1cmUgdG8gY3JlYXRlIHJvb20nLCAnJywgRXJyb3JEaWFsb2csIHtcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IF90KFwiQ2Fubm90IGNyZWF0ZSByb29tcyBpbiB0aGlzIGNvbW11bml0eVwiKSxcbiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IF90KFwiWW91IGRvIG5vdCBoYXZlIHBlcm1pc3Npb24gdG8gY3JlYXRlIHJvb21zIGluIHRoaXMgY29tbXVuaXR5LlwiKSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBtb2RhbCA9IE1vZGFsLmNyZWF0ZVRyYWNrZWREaWFsb2coJ0NyZWF0ZSBSb29tJywgJycsIENyZWF0ZVJvb21EaWFsb2csIHtcbiAgICAgICAgICAgIGRlZmF1bHRQdWJsaWMsXG4gICAgICAgICAgICBkZWZhdWx0TmFtZSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgW3Nob3VsZENyZWF0ZSwgb3B0c10gPSBhd2FpdCBtb2RhbC5maW5pc2hlZDtcbiAgICAgICAgaWYgKHNob3VsZENyZWF0ZSkge1xuICAgICAgICAgICAgY3JlYXRlUm9vbShvcHRzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgY2hhdENyZWF0ZU9yUmV1c2UodXNlcklkOiBzdHJpbmcpIHtcbiAgICAgICAgLy8gVXNlIGEgZGVmZXJyZWQgYWN0aW9uIHRvIHJlc2hvdyB0aGUgZGlhbG9nIG9uY2UgdGhlIHVzZXIgaGFzIHJlZ2lzdGVyZWRcbiAgICAgICAgaWYgKE1hdHJpeENsaWVudFBlZy5nZXQoKS5pc0d1ZXN0KCkpIHtcbiAgICAgICAgICAgIC8vIE5vIHBvaW50IGluIG1ha2luZyAyIERNcyB3aXRoIHdlbGNvbWUgYm90LiBUaGlzIGFzc3VtZXMgdmlld19zZXRfbXhpZCB3aWxsXG4gICAgICAgICAgICAvLyByZXN1bHQgaW4gYSBuZXcgRE0gd2l0aCB0aGUgd2VsY29tZSB1c2VyLlxuICAgICAgICAgICAgaWYgKHVzZXJJZCAhPT0gdGhpcy5wcm9wcy5jb25maWcud2VsY29tZVVzZXJJZCkge1xuICAgICAgICAgICAgICAgIGRpcy5kaXNwYXRjaCh7XG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbjogJ2RvX2FmdGVyX3N5bmNfcHJlcGFyZWQnLFxuICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZF9hY3Rpb246IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbjogJ3ZpZXdfc3RhcnRfY2hhdF9vcl9yZXVzZScsXG4gICAgICAgICAgICAgICAgICAgICAgICB1c2VyX2lkOiB1c2VySWQsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkaXMuZGlzcGF0Y2goe1xuICAgICAgICAgICAgICAgIGFjdGlvbjogJ3JlcXVpcmVfcmVnaXN0cmF0aW9uJyxcbiAgICAgICAgICAgICAgICAvLyBJZiB0aGUgc2V0X214aWQgZGlhbG9nIGlzIGNhbmNlbGxlZCwgdmlldyAvd2VsY29tZSBiZWNhdXNlIGlmIHRoZVxuICAgICAgICAgICAgICAgIC8vIGJyb3dzZXIgd2FzIHBvaW50aW5nIGF0IC91c2VyL0Bzb21lb25lOmRvbWFpbj9hY3Rpb249Y2hhdCwgdGhlIFVSTFxuICAgICAgICAgICAgICAgIC8vIG5lZWRzIHRvIGJlIHJlc2V0IHNvIHRoYXQgdGhleSBjYW4gcmV2aXNpdCAvdXNlci8uLiAvLyAoYW5kIHRyaWdnZXJcbiAgICAgICAgICAgICAgICAvLyBgX2NoYXRDcmVhdGVPclJldXNlYCBhZ2FpbilcbiAgICAgICAgICAgICAgICBnb193ZWxjb21lX29uX2NhbmNlbDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBzY3JlZW5fYWZ0ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgc2NyZWVuOiBgdXNlci8ke3RoaXMucHJvcHMuY29uZmlnLndlbGNvbWVVc2VySWR9YCxcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiB7IGFjdGlvbjogJ2NoYXQnIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVE9ETzogSW1tdXRhYmxlIERNcyByZXBsYWNlcyB0aGlzXG5cbiAgICAgICAgY29uc3QgY2xpZW50ID0gTWF0cml4Q2xpZW50UGVnLmdldCgpO1xuICAgICAgICBjb25zdCBkbVJvb21NYXAgPSBuZXcgRE1Sb29tTWFwKGNsaWVudCk7XG4gICAgICAgIGNvbnN0IGRtUm9vbXMgPSBkbVJvb21NYXAuZ2V0RE1Sb29tc0ZvclVzZXJJZCh1c2VySWQpO1xuXG4gICAgICAgIGlmIChkbVJvb21zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGRpcy5kaXNwYXRjaCh7XG4gICAgICAgICAgICAgICAgYWN0aW9uOiBBY3Rpb24uVmlld1Jvb20sXG4gICAgICAgICAgICAgICAgcm9vbV9pZDogZG1Sb29tc1swXSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGlzLmRpc3BhdGNoKHtcbiAgICAgICAgICAgICAgICBhY3Rpb246ICdzdGFydF9jaGF0JyxcbiAgICAgICAgICAgICAgICB1c2VyX2lkOiB1c2VySWQsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgbGVhdmVSb29tV2FybmluZ3Mocm9vbUlkOiBzdHJpbmcpIHtcbiAgICAgICAgY29uc3Qgcm9vbVRvTGVhdmUgPSBNYXRyaXhDbGllbnRQZWcuZ2V0KCkuZ2V0Um9vbShyb29tSWQpO1xuICAgICAgICBjb25zdCBpc1NwYWNlID0gU3BhY2VTdG9yZS5zcGFjZXNFbmFibGVkICYmIHJvb21Ub0xlYXZlPy5pc1NwYWNlUm9vbSgpO1xuICAgICAgICAvLyBTaG93IGEgd2FybmluZyBpZiB0aGVyZSBhcmUgYWRkaXRpb25hbCBjb21wbGljYXRpb25zLlxuICAgICAgICBjb25zdCB3YXJuaW5ncyA9IFtdO1xuXG4gICAgICAgIGNvbnN0IG1lbWJlckNvdW50ID0gcm9vbVRvTGVhdmUuY3VycmVudFN0YXRlLmdldEpvaW5lZE1lbWJlckNvdW50KCk7XG4gICAgICAgIGlmIChtZW1iZXJDb3VudCA9PT0gMSkge1xuICAgICAgICAgICAgd2FybmluZ3MucHVzaCgoXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwid2FybmluZ1wiIGtleT1cIm9ubHlfbWVtYmVyX3dhcm5pbmdcIj5cbiAgICAgICAgICAgICAgICAgICAgeyAnICcvKiBXaGl0ZXNwYWNlLCBvdGhlcndpc2UgdGhlIHNlbnRlbmNlcyBnZXQgc21hc2hlZCB0b2dldGhlciAqLyB9XG4gICAgICAgICAgICAgICAgICAgIHsgX3QoXCJZb3UgYXJlIHRoZSBvbmx5IHBlcnNvbiBoZXJlLiBcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICBcIklmIHlvdSBsZWF2ZSwgbm8gb25lIHdpbGwgYmUgYWJsZSB0byBqb2luIGluIHRoZSBmdXR1cmUsIGluY2x1ZGluZyB5b3UuXCIpIH1cbiAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICApKTtcblxuICAgICAgICAgICAgcmV0dXJuIHdhcm5pbmdzO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgam9pblJ1bGVzID0gcm9vbVRvTGVhdmUuY3VycmVudFN0YXRlLmdldFN0YXRlRXZlbnRzKCdtLnJvb20uam9pbl9ydWxlcycsICcnKTtcbiAgICAgICAgaWYgKGpvaW5SdWxlcykge1xuICAgICAgICAgICAgY29uc3QgcnVsZSA9IGpvaW5SdWxlcy5nZXRDb250ZW50KCkuam9pbl9ydWxlO1xuICAgICAgICAgICAgaWYgKHJ1bGUgIT09IFwicHVibGljXCIpIHtcbiAgICAgICAgICAgICAgICB3YXJuaW5ncy5wdXNoKChcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwid2FybmluZ1wiIGtleT1cIm5vbl9wdWJsaWNfd2FybmluZ1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgeyAnICcvKiBXaGl0ZXNwYWNlLCBvdGhlcndpc2UgdGhlIHNlbnRlbmNlcyBnZXQgc21hc2hlZCB0b2dldGhlciAqLyB9XG4gICAgICAgICAgICAgICAgICAgICAgICB7IGlzU3BhY2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IF90KFwiVGhpcyBzcGFjZSBpcyBub3QgcHVibGljLiBZb3Ugd2lsbCBub3QgYmUgYWJsZSB0byByZWpvaW4gd2l0aG91dCBhbiBpbnZpdGUuXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBfdChcIlRoaXMgcm9vbSBpcyBub3QgcHVibGljLiBZb3Ugd2lsbCBub3QgYmUgYWJsZSB0byByZWpvaW4gd2l0aG91dCBhbiBpbnZpdGUuXCIpIH1cbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgICkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3YXJuaW5ncztcbiAgICB9XG5cbiAgICBwcml2YXRlIGxlYXZlUm9vbShyb29tSWQ6IHN0cmluZykge1xuICAgICAgICBjb25zdCByb29tVG9MZWF2ZSA9IE1hdHJpeENsaWVudFBlZy5nZXQoKS5nZXRSb29tKHJvb21JZCk7XG4gICAgICAgIGNvbnN0IHdhcm5pbmdzID0gdGhpcy5sZWF2ZVJvb21XYXJuaW5ncyhyb29tSWQpO1xuXG4gICAgICAgIGNvbnN0IGlzU3BhY2UgPSBTcGFjZVN0b3JlLnNwYWNlc0VuYWJsZWQgJiYgcm9vbVRvTGVhdmU/LmlzU3BhY2VSb29tKCk7XG4gICAgICAgIE1vZGFsLmNyZWF0ZVRyYWNrZWREaWFsb2coaXNTcGFjZSA/IFwiTGVhdmUgc3BhY2VcIiA6IFwiTGVhdmUgcm9vbVwiLCAnJywgUXVlc3Rpb25EaWFsb2csIHtcbiAgICAgICAgICAgIHRpdGxlOiBpc1NwYWNlID8gX3QoXCJMZWF2ZSBzcGFjZVwiKSA6IF90KFwiTGVhdmUgcm9vbVwiKSxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAoXG4gICAgICAgICAgICAgICAgPHNwYW4+XG4gICAgICAgICAgICAgICAgICAgIHsgaXNTcGFjZVxuICAgICAgICAgICAgICAgICAgICAgICAgPyBfdChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIkFyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBsZWF2ZSB0aGUgc3BhY2UgJyUoc3BhY2VOYW1lKXMnP1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgc3BhY2VOYW1lOiByb29tVG9MZWF2ZS5uYW1lIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICA6IF90KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIGxlYXZlIHRoZSByb29tICclKHJvb21OYW1lKXMnP1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgcm9vbU5hbWU6IHJvb21Ub0xlYXZlLm5hbWUgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICkgfVxuICAgICAgICAgICAgICAgICAgICB7IHdhcm5pbmdzIH1cbiAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgYnV0dG9uOiBfdChcIkxlYXZlXCIpLFxuICAgICAgICAgICAgb25GaW5pc2hlZDogKHNob3VsZExlYXZlKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHNob3VsZExlYXZlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGQgPSBsZWF2ZVJvb21CZWhhdmlvdXIocm9vbUlkKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBGSVhNRTogY29udHJvbGxlciBzaG91bGRuJ3QgYmUgbG9hZGluZyBhIHZpZXcgOihcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbW9kYWwgPSBNb2RhbC5jcmVhdGVEaWFsb2coU3Bpbm5lciwgbnVsbCwgJ214X0RpYWxvZ19zcGlubmVyJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgZC5maW5hbGx5KCgpID0+IG1vZGFsLmNsb3NlKCkpO1xuICAgICAgICAgICAgICAgICAgICBkaXMuZGlzcGF0Y2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiBcImFmdGVyX2xlYXZlX3Jvb21cIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvb21faWQ6IHJvb21JZCxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBmb3JnZXRSb29tKHJvb21JZDogc3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IHJvb20gPSBNYXRyaXhDbGllbnRQZWcuZ2V0KCkuZ2V0Um9vbShyb29tSWQpO1xuICAgICAgICBNYXRyaXhDbGllbnRQZWcuZ2V0KCkuZm9yZ2V0KHJvb21JZCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAvLyBTd2l0Y2ggdG8gaG9tZSBwYWdlIGlmIHdlJ3JlIGN1cnJlbnRseSB2aWV3aW5nIHRoZSBmb3Jnb3R0ZW4gcm9vbVxuICAgICAgICAgICAgaWYgKHRoaXMuc3RhdGUuY3VycmVudFJvb21JZCA9PT0gcm9vbUlkKSB7XG4gICAgICAgICAgICAgICAgZGlzLmRpc3BhdGNoKHsgYWN0aW9uOiBcInZpZXdfaG9tZV9wYWdlXCIgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFdlIGhhdmUgdG8gbWFudWFsbHkgdXBkYXRlIHRoZSByb29tIGxpc3QgYmVjYXVzZSB0aGUgZm9yZ290dGVuIHJvb20gd2lsbCBub3RcbiAgICAgICAgICAgIC8vIGJlIG5vdGlmaWVkIHRvIHVzLCB0aGVyZWZvcmUgdGhlIHJvb20gbGlzdCB3aWxsIGhhdmUgbm8gb3RoZXIgd2F5IG9mIGtub3dpbmdcbiAgICAgICAgICAgIC8vIHRoZSByb29tIGlzIGZvcmdvdHRlbi5cbiAgICAgICAgICAgIFJvb21MaXN0U3RvcmUuaW5zdGFuY2UubWFudWFsUm9vbVVwZGF0ZShyb29tLCBSb29tVXBkYXRlQ2F1c2UuUm9vbVJlbW92ZWQpO1xuICAgICAgICB9KS5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBlcnJDb2RlID0gZXJyLmVycmNvZGUgfHwgX3RkKFwidW5rbm93biBlcnJvciBjb2RlXCIpO1xuICAgICAgICAgICAgTW9kYWwuY3JlYXRlVHJhY2tlZERpYWxvZyhcIkZhaWxlZCB0byBmb3JnZXQgcm9vbVwiLCAnJywgRXJyb3JEaWFsb2csIHtcbiAgICAgICAgICAgICAgICB0aXRsZTogX3QoXCJGYWlsZWQgdG8gZm9yZ2V0IHJvb20gJShlcnJDb2RlKXNcIiwgeyBlcnJDb2RlIH0pLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAoKGVyciAmJiBlcnIubWVzc2FnZSkgPyBlcnIubWVzc2FnZSA6IF90KFwiT3BlcmF0aW9uIGZhaWxlZFwiKSksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyBjb3B5Um9vbShyb29tSWQ6IHN0cmluZykge1xuICAgICAgICBjb25zdCByb29tTGluayA9IG1ha2VSb29tUGVybWFsaW5rKHJvb21JZCk7XG4gICAgICAgIGNvbnN0IHN1Y2Nlc3MgPSBhd2FpdCBjb3B5UGxhaW50ZXh0KHJvb21MaW5rKTtcbiAgICAgICAgaWYgKCFzdWNjZXNzKSB7XG4gICAgICAgICAgICBNb2RhbC5jcmVhdGVUcmFja2VkRGlhbG9nKFwiVW5hYmxlIHRvIGNvcHkgcm9vbSBsaW5rXCIsIFwiXCIsIEVycm9yRGlhbG9nLCB7XG4gICAgICAgICAgICAgICAgdGl0bGU6IF90KFwiVW5hYmxlIHRvIGNvcHkgcm9vbSBsaW5rXCIpLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBfdChcIlVuYWJsZSB0byBjb3B5IGEgbGluayB0byB0aGUgcm9vbSB0byB0aGUgY2xpcGJvYXJkLlwiKSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU3RhcnRzIGEgY2hhdCB3aXRoIHRoZSB3ZWxjb21lIHVzZXIsIGlmIHRoZSB1c2VyIGRvZXNuJ3QgYWxyZWFkeSBoYXZlIG9uZVxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSByb29tIElEIG9mIHRoZSBuZXcgcm9vbSwgb3IgbnVsbCBpZiBubyByb29tIHdhcyBjcmVhdGVkXG4gICAgICovXG4gICAgcHJpdmF0ZSBhc3luYyBzdGFydFdlbGNvbWVVc2VyQ2hhdCgpIHtcbiAgICAgICAgLy8gV2UgY2FuIGVuZCB1cCB3aXRoIG11bHRpcGxlIHRhYnMgcG9zdC1yZWdpc3RyYXRpb24gd2hlcmUgdGhlIHVzZXJcbiAgICAgICAgLy8gbWlnaHQgdGhlbiBlbmQgdXAgd2l0aCBhIHNlc3Npb24gYW5kIHdlIGRvbid0IHdhbnQgdGhlbSBhbGwgbWFraW5nXG4gICAgICAgIC8vIGEgY2hhdCB3aXRoIHRoZSB3ZWxjb21lIHVzZXI6IHRyeSB0byBkZS1kdXBlLlxuICAgICAgICAvLyBXZSBuZWVkIHRvIHdhaXQgZm9yIHRoZSBmaXJzdCBzeW5jIHRvIGNvbXBsZXRlIGZvciB0aGlzIHRvXG4gICAgICAgIC8vIHdvcmsgdGhvdWdoLlxuICAgICAgICBsZXQgd2FpdEZvcjtcbiAgICAgICAgaWYgKCF0aGlzLmZpcnN0U3luY0NvbXBsZXRlKSB7XG4gICAgICAgICAgICB3YWl0Rm9yID0gdGhpcy5maXJzdFN5bmNQcm9taXNlLnByb21pc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB3YWl0Rm9yID0gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICAgIH1cbiAgICAgICAgYXdhaXQgd2FpdEZvcjtcblxuICAgICAgICBjb25zdCB3ZWxjb21lVXNlclJvb21zID0gRE1Sb29tTWFwLnNoYXJlZCgpLmdldERNUm9vbXNGb3JVc2VySWQoXG4gICAgICAgICAgICB0aGlzLnByb3BzLmNvbmZpZy53ZWxjb21lVXNlcklkLFxuICAgICAgICApO1xuICAgICAgICBpZiAod2VsY29tZVVzZXJSb29tcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGNvbnN0IHJvb21JZCA9IGF3YWl0IGNyZWF0ZVJvb20oe1xuICAgICAgICAgICAgICAgIGRtVXNlcklkOiB0aGlzLnByb3BzLmNvbmZpZy53ZWxjb21lVXNlcklkLFxuICAgICAgICAgICAgICAgIC8vIE9ubHkgdmlldyB0aGUgd2VsY29tZSB1c2VyIGlmIHdlJ3JlIE5PVCBsb29raW5nIGF0IGEgcm9vbVxuICAgICAgICAgICAgICAgIGFuZFZpZXc6ICF0aGlzLnN0YXRlLmN1cnJlbnRSb29tSWQsXG4gICAgICAgICAgICAgICAgc3Bpbm5lcjogZmFsc2UsIC8vIHdlJ3JlIGFscmVhZHkgc2hvd2luZyBvbmU6IHdlIGRvbid0IG5lZWQgYW5vdGhlciBvbmVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gVGhpcyBpcyBhIGJpdCBvZiBhIGhhY2ssIGJ1dCBzaW5jZSB0aGUgZGVkdXBsaWNhdGlvbiByZWxpZXNcbiAgICAgICAgICAgIC8vIG9uIG0uZGlyZWN0IGJlaW5nIHVwIHRvIGRhdGUsIHdlIG5lZWQgdG8gZm9yY2UgYSBzeW5jXG4gICAgICAgICAgICAvLyBvZiB0aGUgZGF0YWJhc2UsIG90aGVyd2lzZSBpZiB0aGUgdXNlciBnb2VzIHRvIHRoZSBvdGhlclxuICAgICAgICAgICAgLy8gdGFiIGJlZm9yZSB0aGUgbmV4dCBzYXZlIGhhcHBlbnMgKGEgZmV3IG1pbnV0ZXMpLCB0aGVcbiAgICAgICAgICAgIC8vIHNhdmVkIHN5bmMgd2lsbCBiZSByZXN0b3JlZCBmcm9tIHRoZSBkYiBhbmQgdGhpcyBjb2RlIHdpbGxcbiAgICAgICAgICAgIC8vIHJ1biB3aXRob3V0IHRoZSB1cGRhdGUgdG8gbS5kaXJlY3QsIG1ha2luZyBhbm90aGVyIHdlbGNvbWVcbiAgICAgICAgICAgIC8vIHVzZXIgcm9vbSAoaXQgZG9lc24ndCB3YWl0IGZvciBuZXcgZGF0YSBmcm9tIHRoZSBzZXJ2ZXIsIGp1c3RcbiAgICAgICAgICAgIC8vIHRoZSBzYXZlZCBzeW5jIHRvIGJlIGxvYWRlZCkuXG4gICAgICAgICAgICBjb25zdCBzYXZlV2VsY29tZVVzZXIgPSAoZXYpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgIGV2LmdldFR5cGUoKSA9PT0gJ20uZGlyZWN0JyAmJlxuICAgICAgICAgICAgICAgICAgICBldi5nZXRDb250ZW50KCkgJiZcbiAgICAgICAgICAgICAgICAgICAgZXYuZ2V0Q29udGVudCgpW3RoaXMucHJvcHMuY29uZmlnLndlbGNvbWVVc2VySWRdXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIE1hdHJpeENsaWVudFBlZy5nZXQoKS5zdG9yZS5zYXZlKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICBNYXRyaXhDbGllbnRQZWcuZ2V0KCkucmVtb3ZlTGlzdGVuZXIoXG4gICAgICAgICAgICAgICAgICAgICAgICBcImFjY291bnREYXRhXCIsIHNhdmVXZWxjb21lVXNlcixcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgTWF0cml4Q2xpZW50UGVnLmdldCgpLm9uKFwiYWNjb3VudERhdGFcIiwgc2F2ZVdlbGNvbWVVc2VyKTtcblxuICAgICAgICAgICAgcmV0dXJuIHJvb21JZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgd2hlbiBhIG5ldyBsb2dnZWQgaW4gc2Vzc2lvbiBoYXMgc3RhcnRlZFxuICAgICAqL1xuICAgIHByaXZhdGUgYXN5bmMgb25Mb2dnZWRJbigpIHtcbiAgICAgICAgVGhlbWVDb250cm9sbGVyLmlzTG9naW4gPSBmYWxzZTtcbiAgICAgICAgdGhpcy50aGVtZVdhdGNoZXIucmVjaGVjaygpO1xuICAgICAgICB0aGlzLnNldFN0YXRlRm9yTmV3Vmlldyh7IHZpZXc6IFZpZXdzLkxPR0dFRF9JTiB9KTtcbiAgICAgICAgLy8gSWYgYSBzcGVjaWZpYyBzY3JlZW4gaXMgc2V0IHRvIGJlIHNob3duIGFmdGVyIGxvZ2luLCBzaG93IHRoYXQgYWJvdmVcbiAgICAgICAgLy8gYWxsIGVsc2UsIGFzIGl0IHByb2JhYmx5IG1lYW5zIHRoZSB1c2VyIGNsaWNrZWQgb24gc29tZXRoaW5nIGFscmVhZHkuXG4gICAgICAgIGlmICh0aGlzLnNjcmVlbkFmdGVyTG9naW4gJiYgdGhpcy5zY3JlZW5BZnRlckxvZ2luLnNjcmVlbikge1xuICAgICAgICAgICAgdGhpcy5zaG93U2NyZWVuKFxuICAgICAgICAgICAgICAgIHRoaXMuc2NyZWVuQWZ0ZXJMb2dpbi5zY3JlZW4sXG4gICAgICAgICAgICAgICAgdGhpcy5zY3JlZW5BZnRlckxvZ2luLnBhcmFtcyxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0aGlzLnNjcmVlbkFmdGVyTG9naW4gPSBudWxsO1xuICAgICAgICB9IGVsc2UgaWYgKE1hdHJpeENsaWVudFBlZy5jdXJyZW50VXNlcklzSnVzdFJlZ2lzdGVyZWQoKSkge1xuICAgICAgICAgICAgTWF0cml4Q2xpZW50UGVnLnNldEp1c3RSZWdpc3RlcmVkVXNlcklkKG51bGwpO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5wcm9wcy5jb25maWcud2VsY29tZVVzZXJJZCAmJiBnZXRDdXJyZW50TGFuZ3VhZ2UoKS5zdGFydHNXaXRoKFwiZW5cIikpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB3ZWxjb21lVXNlclJvb20gPSBhd2FpdCB0aGlzLnN0YXJ0V2VsY29tZVVzZXJDaGF0KCk7XG4gICAgICAgICAgICAgICAgaWYgKHdlbGNvbWVVc2VyUm9vbSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBXZSBkaWRuJ3QgcmVkaXJlY3QgdG8gdGhlIHdlbGNvbWUgdXNlciByb29tLCBzbyBzaG93XG4gICAgICAgICAgICAgICAgICAgIC8vIHRoZSBob21lcGFnZS5cbiAgICAgICAgICAgICAgICAgICAgZGlzLmRpc3BhdGNoKHsgYWN0aW9uOiAndmlld19ob21lX3BhZ2UnLCBqdXN0UmVnaXN0ZXJlZDogdHJ1ZSB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKFRocmVlcGlkSW52aXRlU3RvcmUuaW5zdGFuY2UucGlja0Jlc3RJbnZpdGUoKSkge1xuICAgICAgICAgICAgICAgIC8vIFRoZSB1c2VyIGhhcyBhIDNwaWQgaW52aXRlIHBlbmRpbmcgLSBzaG93IHRoZW0gdGhhdFxuICAgICAgICAgICAgICAgIGNvbnN0IHRocmVlcGlkSW52aXRlID0gVGhyZWVwaWRJbnZpdGVTdG9yZS5pbnN0YW5jZS5waWNrQmVzdEludml0ZSgpO1xuXG4gICAgICAgICAgICAgICAgLy8gSEFDSzogVGhpcyBpcyBhIHByZXR0eSBicnV0YWwgd2F5IG9mIHRocmVhZGluZyB0aGUgaW52aXRlIGJhY2sgdGhyb3VnaFxuICAgICAgICAgICAgICAgIC8vIG91ciBzeXN0ZW1zLCBidXQgaXQncyB0aGUgc2FmZXN0IHdlIGhhdmUgZm9yIG5vdy5cbiAgICAgICAgICAgICAgICBjb25zdCBwYXJhbXMgPSBUaHJlZXBpZEludml0ZVN0b3JlLmluc3RhbmNlLnRyYW5zbGF0ZVRvV2lyZUZvcm1hdCh0aHJlZXBpZEludml0ZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5zaG93U2NyZWVuKGByb29tLyR7dGhyZWVwaWRJbnZpdGUucm9vbUlkfWAsIHBhcmFtcyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIFRoZSB1c2VyIGhhcyBqdXN0IGxvZ2dlZCBpbiBhZnRlciByZWdpc3RlcmluZyxcbiAgICAgICAgICAgICAgICAvLyBzbyBzaG93IHRoZSBob21lcGFnZS5cbiAgICAgICAgICAgICAgICBkaXMuZGlzcGF0Y2goeyBhY3Rpb246ICd2aWV3X2hvbWVfcGFnZScsIGp1c3RSZWdpc3RlcmVkOiB0cnVlIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zaG93U2NyZWVuQWZ0ZXJMb2dpbigpO1xuICAgICAgICB9XG5cbiAgICAgICAgU3RvcmFnZU1hbmFnZXIudHJ5UGVyc2lzdFN0b3JhZ2UoKTtcblxuICAgICAgICAvLyBkZWZlciB0aGUgZm9sbG93aW5nIGFjdGlvbnMgYnkgMzAgc2Vjb25kcyB0byBub3QgdGhyb3cgdGhlbSBhdCB0aGUgdXNlciBpbW1lZGlhdGVseVxuICAgICAgICBhd2FpdCBzbGVlcCgzMCk7XG4gICAgICAgIGlmIChTZXR0aW5nc1N0b3JlLmdldFZhbHVlKFwic2hvd0Nvb2tpZUJhclwiKSAmJlxuICAgICAgICAgICAgKEFuYWx5dGljcy5jYW5FbmFibGUoKSB8fCBDb3VudGx5QW5hbHl0aWNzLmluc3RhbmNlLmNhbkVuYWJsZSgpKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIHNob3dBbmFseXRpY3NUb2FzdCh0aGlzLnByb3BzLmNvbmZpZy5waXdpaz8ucG9saWN5VXJsKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoU2RrQ29uZmlnLmdldCgpLm1vYmlsZUd1aWRlVG9hc3QpIHtcbiAgICAgICAgICAgIC8vIFRoZSB0b2FzdCBjb250YWlucyBmdXJ0aGVyIGxvZ2ljIHRvIGRldGVjdCBtb2JpbGUgcGxhdGZvcm1zLFxuICAgICAgICAgICAgLy8gY2hlY2sgaWYgaXQgaGFzIGJlZW4gZGlzbWlzc2VkIGJlZm9yZSwgZXRjLlxuICAgICAgICAgICAgc2hvd01vYmlsZUd1aWRlVG9hc3QoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgc2hvd1NjcmVlbkFmdGVyTG9naW4oKSB7XG4gICAgICAgIC8vIElmIHNjcmVlbkFmdGVyTG9naW4gaXMgc2V0LCB1c2UgdGhhdCwgdGhlbiBudWxsIGl0IHNvIHRoYXQgYSBzZWNvbmQgbG9naW4gd2lsbFxuICAgICAgICAvLyByZXN1bHQgaW4gdmlld19ob21lX3BhZ2UsIF91c2VyX3NldHRpbmdzIG9yIF9yb29tX2RpcmVjdG9yeVxuICAgICAgICBpZiAodGhpcy5zY3JlZW5BZnRlckxvZ2luICYmIHRoaXMuc2NyZWVuQWZ0ZXJMb2dpbi5zY3JlZW4pIHtcbiAgICAgICAgICAgIHRoaXMuc2hvd1NjcmVlbihcbiAgICAgICAgICAgICAgICB0aGlzLnNjcmVlbkFmdGVyTG9naW4uc2NyZWVuLFxuICAgICAgICAgICAgICAgIHRoaXMuc2NyZWVuQWZ0ZXJMb2dpbi5wYXJhbXMsXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgdGhpcy5zY3JlZW5BZnRlckxvZ2luID0gbnVsbDtcbiAgICAgICAgfSBlbHNlIGlmIChsb2NhbFN0b3JhZ2UgJiYgbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ214X2xhc3Rfcm9vbV9pZCcpKSB7XG4gICAgICAgICAgICAvLyBCZWZvcmUgZGVmYXVsdGluZyB0byBkaXJlY3RvcnksIHNob3cgdGhlIGxhc3Qgdmlld2VkIHJvb21cbiAgICAgICAgICAgIHRoaXMudmlld0xhc3RSb29tKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoTWF0cml4Q2xpZW50UGVnLmdldCgpLmlzR3Vlc3QoKSkge1xuICAgICAgICAgICAgICAgIGRpcy5kaXNwYXRjaCh7IGFjdGlvbjogJ3ZpZXdfd2VsY29tZV9wYWdlJyB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZGlzLmRpc3BhdGNoKHsgYWN0aW9uOiAndmlld19ob21lX3BhZ2UnIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB2aWV3TGFzdFJvb20oKSB7XG4gICAgICAgIGRpcy5kaXNwYXRjaCh7XG4gICAgICAgICAgICBhY3Rpb246IEFjdGlvbi5WaWV3Um9vbSxcbiAgICAgICAgICAgIHJvb21faWQ6IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdteF9sYXN0X3Jvb21faWQnKSxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHdoZW4gdGhlIHNlc3Npb24gaXMgbG9nZ2VkIG91dFxuICAgICAqL1xuICAgIHByaXZhdGUgb25Mb2dnZWRPdXQoKSB7XG4gICAgICAgIHRoaXMudmlld0xvZ2luKHtcbiAgICAgICAgICAgIHJlYWR5OiBmYWxzZSxcbiAgICAgICAgICAgIGNvbGxhcHNlTGhzOiBmYWxzZSxcbiAgICAgICAgICAgIGN1cnJlbnRSb29tSWQ6IG51bGwsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnN1YlRpdGxlU3RhdHVzID0gJyc7XG4gICAgICAgIHRoaXMuc2V0UGFnZVN1YnRpdGxlKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHdoZW4gdGhlIHNlc3Npb24gaXMgc29mdGx5IGxvZ2dlZCBvdXRcbiAgICAgKi9cbiAgICBwcml2YXRlIG9uU29mdExvZ291dCgpIHtcbiAgICAgICAgdGhpcy5ub3RpZnlOZXdTY3JlZW4oJ3NvZnRfbG9nb3V0Jyk7XG4gICAgICAgIHRoaXMuc2V0U3RhdGVGb3JOZXdWaWV3KHtcbiAgICAgICAgICAgIHZpZXc6IFZpZXdzLlNPRlRfTE9HT1VULFxuICAgICAgICAgICAgcmVhZHk6IGZhbHNlLFxuICAgICAgICAgICAgY29sbGFwc2VMaHM6IGZhbHNlLFxuICAgICAgICAgICAgY3VycmVudFJvb21JZDogbnVsbCxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuc3ViVGl0bGVTdGF0dXMgPSAnJztcbiAgICAgICAgdGhpcy5zZXRQYWdlU3VidGl0bGUoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYWxsZWQganVzdCBiZWZvcmUgdGhlIG1hdHJpeCBjbGllbnQgaXMgc3RhcnRlZFxuICAgICAqICh1c2VmdWwgZm9yIHNldHRpbmcgbGlzdGVuZXJzKVxuICAgICAqL1xuICAgIHByaXZhdGUgb25XaWxsU3RhcnRDbGllbnQoKSB7XG4gICAgICAgIC8vIHJlc2V0IHRoZSAnaGF2ZSBjb21wbGV0ZWQgZmlyc3Qgc3luYycgZmxhZyxcbiAgICAgICAgLy8gc2luY2Ugd2UncmUgYWJvdXQgdG8gc3RhcnQgdGhlIGNsaWVudCBhbmQgdGhlcmVmb3JlIGFib3V0XG4gICAgICAgIC8vIHRvIGRvIHRoZSBmaXJzdCBzeW5jXG4gICAgICAgIHRoaXMuZmlyc3RTeW5jQ29tcGxldGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5maXJzdFN5bmNQcm9taXNlID0gZGVmZXIoKTtcbiAgICAgICAgY29uc3QgY2xpID0gTWF0cml4Q2xpZW50UGVnLmdldCgpO1xuXG4gICAgICAgIC8vIEFsbG93IHRoZSBKUyBTREsgdG8gcmVhcCB0aW1lbGluZSBldmVudHMuIFRoaXMgcmVkdWNlcyB0aGUgYW1vdW50IG9mXG4gICAgICAgIC8vIG1lbW9yeSBjb25zdW1lZCBhcyB0aGUgSlMgU0RLIHN0b3JlcyBtdWx0aXBsZSBkaXN0aW5jdCBjb3BpZXMgb2Ygcm9vbVxuICAgICAgICAvLyBzdGF0ZSAoZWFjaCBvZiB3aGljaCBjYW4gYmUgMTBzIG9mIE1CcykgZm9yIGVhY2ggRElTSk9JTlQgdGltZWxpbmUuIFRoaXMgaXNcbiAgICAgICAgLy8gcGFydGljdWxhcmx5IG5vdGljZWFibGUgd2hlbiB0aGVyZSBhcmUgbG90cyBvZiAnbGltaXRlZCcgL3N5bmMgcmVzcG9uc2VzXG4gICAgICAgIC8vIHN1Y2ggYXMgd2hlbiBsYXB0b3BzIHVuc2xlZXAuXG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS92ZWN0b3ItaW0vZWxlbWVudC13ZWIvaXNzdWVzLzMzMDcjaXNzdWVjb21tZW50LTI4Mjg5NTU2OFxuICAgICAgICBjbGkuc2V0Q2FuUmVzZXRUaW1lbGluZUNhbGxiYWNrKChyb29tSWQpID0+IHtcbiAgICAgICAgICAgIGxvZ2dlci5sb2coXCJSZXF1ZXN0IHRvIHJlc2V0IHRpbWVsaW5lIGluIHJvb20gXCIsIHJvb21JZCwgXCIgdmlld2luZzpcIiwgdGhpcy5zdGF0ZS5jdXJyZW50Um9vbUlkKTtcbiAgICAgICAgICAgIGlmIChyb29tSWQgIT09IHRoaXMuc3RhdGUuY3VycmVudFJvb21JZCkge1xuICAgICAgICAgICAgICAgIC8vIEl0IGlzIHNhZmUgdG8gcmVtb3ZlIGV2ZW50cyBmcm9tIHJvb21zIHdlIGFyZSBub3Qgdmlld2luZy5cbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFdlIGFyZSB2aWV3aW5nIHRoZSByb29tIHdoaWNoIHdlIHdhbnQgdG8gcmVzZXQuIEl0IGlzIG9ubHkgc2FmZSB0byBkb1xuICAgICAgICAgICAgLy8gdGhpcyBpZiB3ZSBhcmUgbm90IHNjcm9sbGVkIHVwIGluIHRoZSB2aWV3LiBUbyBmaW5kIG91dCwgZGVsZWdhdGUgdG9cbiAgICAgICAgICAgIC8vIHRoZSB0aW1lbGluZSBwYW5lbC4gSWYgdGhlIHRpbWVsaW5lIHBhbmVsIGRvZXNuJ3QgZXhpc3QsIHRoZW4gd2UgYXNzdW1lXG4gICAgICAgICAgICAvLyBpdCBpcyBzYWZlIHRvIHJlc2V0IHRoZSB0aW1lbGluZS5cbiAgICAgICAgICAgIGlmICghdGhpcy5sb2dnZWRJblZpZXcuY3VycmVudCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9nZ2VkSW5WaWV3LmN1cnJlbnQuY2FuUmVzZXRUaW1lbGluZUluUm9vbShyb29tSWQpO1xuICAgICAgICB9KTtcblxuICAgICAgICBjbGkub24oJ3N5bmMnLCAoc3RhdGUsIHByZXZTdGF0ZSwgZGF0YSkgPT4ge1xuICAgICAgICAgICAgLy8gTGlmZWN5Y2xlU3RvcmUgYW5kIG90aGVycyBjYW5ub3QgZGlyZWN0bHkgc3Vic2NyaWJlIHRvIG1hdHJpeCBjbGllbnQgZm9yXG4gICAgICAgICAgICAvLyBldmVudHMgYmVjYXVzZSBmbHV4IG9ubHkgYWxsb3dzIHN0b3JlIHN0YXRlIGNoYW5nZXMgZHVyaW5nIGZsdXggZGlzcGF0Y2hlcy5cbiAgICAgICAgICAgIC8vIFNvIGRpc3BhdGNoIGRpcmVjdGx5IGZyb20gaGVyZS4gSWRlYWxseSB3ZSdkIHVzZSBhIFN5bmNTdGF0ZVN0b3JlIHRoYXRcbiAgICAgICAgICAgIC8vIHdvdWxkIGRvIHRoaXMgZGlzcGF0Y2ggYW5kIGV4cG9zZSB0aGUgc3luYyBzdGF0ZSBpdHNlbGYgKGJ5IGxpc3RlbmluZyB0b1xuICAgICAgICAgICAgLy8gaXRzIG93biBkaXNwYXRjaCkuXG4gICAgICAgICAgICBkaXMuZGlzcGF0Y2goeyBhY3Rpb246ICdzeW5jX3N0YXRlJywgcHJldlN0YXRlLCBzdGF0ZSB9KTtcblxuICAgICAgICAgICAgaWYgKHN0YXRlID09PSBcIkVSUk9SXCIgfHwgc3RhdGUgPT09IFwiUkVDT05ORUNUSU5HXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAoZGF0YS5lcnJvciBpbnN0YW5jZW9mIEludmFsaWRTdG9yZUVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIExpZmVjeWNsZS5oYW5kbGVJbnZhbGlkU3RvcmVFcnJvcihkYXRhLmVycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHN5bmNFcnJvcjogZGF0YS5lcnJvciB8fCB0cnVlIH0pO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnN0YXRlLnN5bmNFcnJvcikge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBzeW5jRXJyb3I6IG51bGwgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMudXBkYXRlU3RhdHVzSW5kaWNhdG9yKHN0YXRlLCBwcmV2U3RhdGUpO1xuICAgICAgICAgICAgaWYgKHN0YXRlID09PSBcIlNZTkNJTkdcIiAmJiBwcmV2U3RhdGUgPT09IFwiU1lOQ0lOR1wiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbG9nZ2VyLmluZm8oXCJNYXRyaXhDbGllbnQgc3luYyBzdGF0ZSA9PiAlc1wiLCBzdGF0ZSk7XG4gICAgICAgICAgICBpZiAoc3RhdGUgIT09IFwiUFJFUEFSRURcIikgeyByZXR1cm47IH1cblxuICAgICAgICAgICAgdGhpcy5maXJzdFN5bmNDb21wbGV0ZSA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLmZpcnN0U3luY1Byb21pc2UucmVzb2x2ZSgpO1xuXG4gICAgICAgICAgICBpZiAoTm90aWZpZXIuc2hvdWxkU2hvd1Byb21wdCgpICYmICFNYXRyaXhDbGllbnRQZWcudXNlclJlZ2lzdGVyZWRXaXRoaW5MYXN0SG91cnMoMjQpKSB7XG4gICAgICAgICAgICAgICAgc2hvd05vdGlmaWNhdGlvbnNUb2FzdChmYWxzZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRpcy5maXJlKEFjdGlvbi5Gb2N1c1NlbmRNZXNzYWdlQ29tcG9zZXIpO1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgcmVhZHk6IHRydWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY2xpLm9uKCdTZXNzaW9uLmxvZ2dlZF9vdXQnLCBmdW5jdGlvbihlcnJPYmopIHtcbiAgICAgICAgICAgIGlmIChMaWZlY3ljbGUuaXNMb2dnaW5nT3V0KCkpIHJldHVybjtcblxuICAgICAgICAgICAgLy8gQSBtb2RhbCBtaWdodCBoYXZlIGJlZW4gb3BlbiB3aGVuIHdlIHdlcmUgbG9nZ2VkIG91dCBieSB0aGUgc2VydmVyXG4gICAgICAgICAgICBNb2RhbC5jbG9zZUN1cnJlbnRNb2RhbCgnU2Vzc2lvbi5sb2dnZWRfb3V0Jyk7XG5cbiAgICAgICAgICAgIGlmIChlcnJPYmouaHR0cFN0YXR1cyA9PT0gNDAxICYmIGVyck9iai5kYXRhICYmIGVyck9iai5kYXRhWydzb2Z0X2xvZ291dCddKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLndhcm4oXCJTb2Z0IGxvZ291dCBpc3N1ZWQgYnkgc2VydmVyIC0gYXZvaWRpbmcgZGF0YSBkZWxldGlvblwiKTtcbiAgICAgICAgICAgICAgICBMaWZlY3ljbGUuc29mdExvZ291dCgpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgTW9kYWwuY3JlYXRlVHJhY2tlZERpYWxvZygnU2lnbmVkIG91dCcsICcnLCBFcnJvckRpYWxvZywge1xuICAgICAgICAgICAgICAgIHRpdGxlOiBfdCgnU2lnbmVkIE91dCcpLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBfdCgnRm9yIHNlY3VyaXR5LCB0aGlzIHNlc3Npb24gaGFzIGJlZW4gc2lnbmVkIG91dC4gUGxlYXNlIHNpZ24gaW4gYWdhaW4uJyksXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgZGlzLmRpc3BhdGNoKHtcbiAgICAgICAgICAgICAgICBhY3Rpb246ICdsb2dvdXQnLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBjbGkub24oJ25vX2NvbnNlbnQnLCBmdW5jdGlvbihtZXNzYWdlLCBjb25zZW50VXJpKSB7XG4gICAgICAgICAgICBNb2RhbC5jcmVhdGVUcmFja2VkRGlhbG9nKCdObyBDb25zZW50IERpYWxvZycsICcnLCBRdWVzdGlvbkRpYWxvZywge1xuICAgICAgICAgICAgICAgIHRpdGxlOiBfdCgnVGVybXMgYW5kIENvbmRpdGlvbnMnKSxcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgPHA+IHsgX3QoXG4gICAgICAgICAgICAgICAgICAgICAgICAnVG8gY29udGludWUgdXNpbmcgdGhlICUoaG9tZXNlcnZlckRvbWFpbilzIGhvbWVzZXJ2ZXIgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAneW91IG11c3QgcmV2aWV3IGFuZCBhZ3JlZSB0byBvdXIgdGVybXMgYW5kIGNvbmRpdGlvbnMuJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHsgaG9tZXNlcnZlckRvbWFpbjogY2xpLmdldERvbWFpbigpIH0sXG4gICAgICAgICAgICAgICAgICAgICkgfVxuICAgICAgICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICAgICAgPC9kaXY+LFxuICAgICAgICAgICAgICAgIGJ1dHRvbjogX3QoJ1JldmlldyB0ZXJtcyBhbmQgY29uZGl0aW9ucycpLFxuICAgICAgICAgICAgICAgIGNhbmNlbEJ1dHRvbjogX3QoJ0Rpc21pc3MnKSxcbiAgICAgICAgICAgICAgICBvbkZpbmlzaGVkOiAoY29uZmlybWVkKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb25maXJtZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHduZCA9IHdpbmRvdy5vcGVuKGNvbnNlbnRVcmksICdfYmxhbmsnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHduZC5vcGVuZXIgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sIG51bGwsIHRydWUpO1xuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBkZnQgPSBuZXcgRGVjcnlwdGlvbkZhaWx1cmVUcmFja2VyKCh0b3RhbCwgZXJyb3JDb2RlKSA9PiB7XG4gICAgICAgICAgICBBbmFseXRpY3MudHJhY2tFdmVudCgnRTJFJywgJ0RlY3J5cHRpb24gZmFpbHVyZScsIGVycm9yQ29kZSwgU3RyaW5nKHRvdGFsKSk7XG4gICAgICAgICAgICBDb3VudGx5QW5hbHl0aWNzLmluc3RhbmNlLnRyYWNrKFwiZGVjcnlwdGlvbl9mYWlsdXJlXCIsIHsgZXJyb3JDb2RlIH0sIG51bGwsIHsgc3VtOiB0b3RhbCB9KTtcbiAgICAgICAgfSwgKGVycm9yQ29kZSkgPT4ge1xuICAgICAgICAgICAgLy8gTWFwIEpTLVNESyBlcnJvciBjb2RlcyB0byB0cmFja2VyIGNvZGVzIGZvciBhZ2dyZWdhdGlvblxuICAgICAgICAgICAgc3dpdGNoIChlcnJvckNvZGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdNRUdPTE1fVU5LTk9XTl9JTkJPVU5EX1NFU1NJT05fSUQnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ29sbV9rZXlzX25vdF9zZW50X2Vycm9yJztcbiAgICAgICAgICAgICAgICBjYXNlICdPTE1fVU5LTk9XTl9NRVNTQUdFX0lOREVYJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdvbG1faW5kZXhfZXJyb3InO1xuICAgICAgICAgICAgICAgIGNhc2UgdW5kZWZpbmVkOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3VuZXhwZWN0ZWRfZXJyb3InO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAndW5zcGVjaWZpZWRfZXJyb3InO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBTaGVsdmVkIGZvciBsYXRlciBkYXRlIHdoZW4gd2UgaGF2ZSB0aW1lIHRvIHRoaW5rIGFib3V0IHBlcnNpc3RpbmcgaGlzdG9yeSBvZlxuICAgICAgICAvLyB0cmFja2VkIGV2ZW50cyBhY3Jvc3Mgc2Vzc2lvbnMuXG4gICAgICAgIC8vIGRmdC5sb2FkVHJhY2tlZEV2ZW50SGFzaE1hcCgpO1xuXG4gICAgICAgIGRmdC5zdGFydCgpO1xuXG4gICAgICAgIC8vIFdoZW4gbG9nZ2luZyBvdXQsIHN0b3AgdHJhY2tpbmcgZmFpbHVyZXMgYW5kIGRlc3Ryb3kgc3RhdGVcbiAgICAgICAgY2xpLm9uKFwiU2Vzc2lvbi5sb2dnZWRfb3V0XCIsICgpID0+IGRmdC5zdG9wKCkpO1xuICAgICAgICBjbGkub24oXCJFdmVudC5kZWNyeXB0ZWRcIiwgKGUsIGVycikgPT4gZGZ0LmV2ZW50RGVjcnlwdGVkKGUsIGVycikpO1xuXG4gICAgICAgIGNsaS5vbihcIlJvb21cIiwgKHJvb20pID0+IHtcbiAgICAgICAgICAgIGlmIChNYXRyaXhDbGllbnRQZWcuZ2V0KCkuaXNDcnlwdG9FbmFibGVkKCkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBibGFja2xpc3RFbmFibGVkID0gU2V0dGluZ3NTdG9yZS5nZXRWYWx1ZUF0KFxuICAgICAgICAgICAgICAgICAgICBTZXR0aW5nTGV2ZWwuUk9PTV9ERVZJQ0UsXG4gICAgICAgICAgICAgICAgICAgIFwiYmxhY2tsaXN0VW52ZXJpZmllZERldmljZXNcIixcbiAgICAgICAgICAgICAgICAgICAgcm9vbS5yb29tSWQsXG4gICAgICAgICAgICAgICAgICAgIC8qZXhwbGljaXQ9Ki90cnVlLFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgcm9vbS5zZXRCbGFja2xpc3RVbnZlcmlmaWVkRGV2aWNlcyhibGFja2xpc3RFbmFibGVkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGNsaS5vbihcImNyeXB0by53YXJuaW5nXCIsICh0eXBlKSA9PiB7XG4gICAgICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdDUllQVE9fV0FSTklOR19PTERfVkVSU0lPTl9ERVRFQ1RFRCc6XG4gICAgICAgICAgICAgICAgICAgIE1vZGFsLmNyZWF0ZVRyYWNrZWREaWFsb2coJ0NyeXB0byBtaWdyYXRlZCcsICcnLCBFcnJvckRpYWxvZywge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IF90KCdPbGQgY3J5cHRvZ3JhcGh5IGRhdGEgZGV0ZWN0ZWQnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBfdChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIkRhdGEgZnJvbSBhbiBvbGRlciB2ZXJzaW9uIG9mICUoYnJhbmQpcyBoYXMgYmVlbiBkZXRlY3RlZC4gXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiVGhpcyB3aWxsIGhhdmUgY2F1c2VkIGVuZC10by1lbmQgY3J5cHRvZ3JhcGh5IHRvIG1hbGZ1bmN0aW9uIFwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImluIHRoZSBvbGRlciB2ZXJzaW9uLiBFbmQtdG8tZW5kIGVuY3J5cHRlZCBtZXNzYWdlcyBleGNoYW5nZWQgXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwicmVjZW50bHkgd2hpbHN0IHVzaW5nIHRoZSBvbGRlciB2ZXJzaW9uIG1heSBub3QgYmUgZGVjcnlwdGFibGUgXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiaW4gdGhpcyB2ZXJzaW9uLiBUaGlzIG1heSBhbHNvIGNhdXNlIG1lc3NhZ2VzIGV4Y2hhbmdlZCB3aXRoIHRoaXMgXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwidmVyc2lvbiB0byBmYWlsLiBJZiB5b3UgZXhwZXJpZW5jZSBwcm9ibGVtcywgbG9nIG91dCBhbmQgYmFjayBpbiBcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJhZ2Fpbi4gVG8gcmV0YWluIG1lc3NhZ2UgaGlzdG9yeSwgZXhwb3J0IGFuZCByZS1pbXBvcnQgeW91ciBrZXlzLlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgYnJhbmQ6IFNka0NvbmZpZy5nZXQoKS5icmFuZCB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgY2xpLm9uKFwiY3J5cHRvLmtleUJhY2t1cEZhaWxlZFwiLCBhc3luYyAoZXJyY29kZSkgPT4ge1xuICAgICAgICAgICAgbGV0IGhhdmVOZXdWZXJzaW9uO1xuICAgICAgICAgICAgbGV0IG5ld1ZlcnNpb25JbmZvO1xuICAgICAgICAgICAgLy8gaWYga2V5IGJhY2t1cCBpcyBzdGlsbCBlbmFibGVkLCB0aGVyZSBtdXN0IGJlIGEgbmV3IGJhY2t1cCBpbiBwbGFjZVxuICAgICAgICAgICAgaWYgKE1hdHJpeENsaWVudFBlZy5nZXQoKS5nZXRLZXlCYWNrdXBFbmFibGVkKCkpIHtcbiAgICAgICAgICAgICAgICBoYXZlTmV3VmVyc2lvbiA9IHRydWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIG90aGVyd2lzZSBjaGVjayB0aGUgc2VydmVyIHRvIHNlZSBpZiB0aGVyZSdzIGEgbmV3IG9uZVxuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIG5ld1ZlcnNpb25JbmZvID0gYXdhaXQgTWF0cml4Q2xpZW50UGVnLmdldCgpLmdldEtleUJhY2t1cFZlcnNpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5ld1ZlcnNpb25JbmZvICE9PSBudWxsKSBoYXZlTmV3VmVyc2lvbiA9IHRydWU7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICBsb2dnZXIuZXJyb3IoXCJTYXcga2V5IGJhY2t1cCBlcnJvciBidXQgZmFpbGVkIHRvIGNoZWNrIGJhY2t1cCB2ZXJzaW9uIVwiLCBlKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGhhdmVOZXdWZXJzaW9uKSB7XG4gICAgICAgICAgICAgICAgTW9kYWwuY3JlYXRlVHJhY2tlZERpYWxvZ0FzeW5jKCdOZXcgUmVjb3ZlcnkgTWV0aG9kJywgJ05ldyBSZWNvdmVyeSBNZXRob2QnLFxuICAgICAgICAgICAgICAgICAgICBpbXBvcnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAnLi4vLi4vYXN5bmMtY29tcG9uZW50cy92aWV3cy9kaWFsb2dzL3NlY3VyaXR5L05ld1JlY292ZXJ5TWV0aG9kRGlhbG9nJ1xuICAgICAgICAgICAgICAgICAgICApIGFzIHVua25vd24gYXMgUHJvbWlzZTxDb21wb25lbnRUeXBlPHt9Pj4sXG4gICAgICAgICAgICAgICAgICAgIHsgbmV3VmVyc2lvbkluZm8gfSxcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBNb2RhbC5jcmVhdGVUcmFja2VkRGlhbG9nQXN5bmMoJ1JlY292ZXJ5IE1ldGhvZCBSZW1vdmVkJywgJ1JlY292ZXJ5IE1ldGhvZCBSZW1vdmVkJyxcbiAgICAgICAgICAgICAgICAgICAgaW1wb3J0KFxuICAgICAgICAgICAgICAgICAgICAgICAgJy4uLy4uL2FzeW5jLWNvbXBvbmVudHMvdmlld3MvZGlhbG9ncy9zZWN1cml0eS9SZWNvdmVyeU1ldGhvZFJlbW92ZWREaWFsb2cnXG4gICAgICAgICAgICAgICAgICAgICkgYXMgdW5rbm93biBhcyBQcm9taXNlPENvbXBvbmVudFR5cGU8e30+PixcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBjbGkub24oXCJjcnlwdG8ua2V5U2lnbmF0dXJlVXBsb2FkRmFpbHVyZVwiLCAoZmFpbHVyZXMsIHNvdXJjZSwgY29udGludWF0aW9uKSA9PiB7XG4gICAgICAgICAgICBNb2RhbC5jcmVhdGVUcmFja2VkRGlhbG9nKFxuICAgICAgICAgICAgICAgICdGYWlsZWQgdG8gdXBsb2FkIGtleSBzaWduYXR1cmVzJyxcbiAgICAgICAgICAgICAgICAnRmFpbGVkIHRvIHVwbG9hZCBrZXkgc2lnbmF0dXJlcycsXG4gICAgICAgICAgICAgICAgS2V5U2lnbmF0dXJlVXBsb2FkRmFpbGVkRGlhbG9nLFxuICAgICAgICAgICAgICAgIHsgZmFpbHVyZXMsIHNvdXJjZSwgY29udGludWF0aW9uIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICBjbGkub24oXCJjcnlwdG8udmVyaWZpY2F0aW9uLnJlcXVlc3RcIiwgcmVxdWVzdCA9PiB7XG4gICAgICAgICAgICBpZiAocmVxdWVzdC52ZXJpZmllcikge1xuICAgICAgICAgICAgICAgIE1vZGFsLmNyZWF0ZVRyYWNrZWREaWFsb2coJ0luY29taW5nIFZlcmlmaWNhdGlvbicsICcnLCBJbmNvbWluZ1Nhc0RpYWxvZywge1xuICAgICAgICAgICAgICAgICAgICB2ZXJpZmllcjogcmVxdWVzdC52ZXJpZmllcixcbiAgICAgICAgICAgICAgICB9LCBudWxsLCAvKiBwcmlvcml0eSA9ICovIGZhbHNlLCAvKiBzdGF0aWMgPSAqLyB0cnVlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocmVxdWVzdC5wZW5kaW5nKSB7XG4gICAgICAgICAgICAgICAgVG9hc3RTdG9yZS5zaGFyZWRJbnN0YW5jZSgpLmFkZE9yUmVwbGFjZVRvYXN0KHtcbiAgICAgICAgICAgICAgICAgICAga2V5OiAndmVyaWZyZXFfJyArIHJlcXVlc3QuY2hhbm5lbC50cmFuc2FjdGlvbklkLFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogX3QoXCJWZXJpZmljYXRpb24gcmVxdWVzdGVkXCIpLFxuICAgICAgICAgICAgICAgICAgICBpY29uOiBcInZlcmlmaWNhdGlvblwiLFxuICAgICAgICAgICAgICAgICAgICBwcm9wczogeyByZXF1ZXN0IH0sXG4gICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudDogVmVyaWZpY2F0aW9uUmVxdWVzdFRvYXN0LFxuICAgICAgICAgICAgICAgICAgICBwcmlvcml0eTogOTAsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhbGxlZCBzaG9ydGx5IGFmdGVyIHRoZSBtYXRyaXggY2xpZW50IGhhcyBzdGFydGVkLiBVc2VmdWwgZm9yXG4gICAgICogc2V0dGluZyB1cCBhbnl0aGluZyB0aGF0IHJlcXVpcmVzIHRoZSBjbGllbnQgdG8gYmUgc3RhcnRlZC5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHByaXZhdGUgb25DbGllbnRTdGFydGVkKCkge1xuICAgICAgICBjb25zdCBjbGkgPSBNYXRyaXhDbGllbnRQZWcuZ2V0KCk7XG5cbiAgICAgICAgaWYgKGNsaS5pc0NyeXB0b0VuYWJsZWQoKSkge1xuICAgICAgICAgICAgY29uc3QgYmxhY2tsaXN0RW5hYmxlZCA9IFNldHRpbmdzU3RvcmUuZ2V0VmFsdWVBdChcbiAgICAgICAgICAgICAgICBTZXR0aW5nTGV2ZWwuREVWSUNFLFxuICAgICAgICAgICAgICAgIFwiYmxhY2tsaXN0VW52ZXJpZmllZERldmljZXNcIixcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBjbGkuc2V0R2xvYmFsQmxhY2tsaXN0VW52ZXJpZmllZERldmljZXMoYmxhY2tsaXN0RW5hYmxlZCk7XG5cbiAgICAgICAgICAgIC8vIFdpdGggY3Jvc3Mtc2lnbmluZyBlbmFibGVkLCB3ZSBzZW5kIHRvIHVua25vd24gZGV2aWNlc1xuICAgICAgICAgICAgLy8gd2l0aG91dCBwcm9tcHRpbmcuIEFueSBiYWQtZGV2aWNlIHN0YXR1cyB0aGUgdXNlciBzaG91bGRcbiAgICAgICAgICAgIC8vIGJlIGF3YXJlIG9mIHdpbGwgYmUgc2lnbmFsbGVkIHRocm91Z2ggdGhlIHJvb20gc2hpZWxkXG4gICAgICAgICAgICAvLyBjaGFuZ2luZyBjb2xvdXIuIE1vcmUgYWR2YW5jZWQgYmVoYXZpb3VyIHdpbGwgY29tZSBvbmNlXG4gICAgICAgICAgICAvLyB3ZSBpbXBsZW1lbnQgbW9yZSBzZXR0aW5ncy5cbiAgICAgICAgICAgIGNsaS5zZXRHbG9iYWxFcnJvck9uVW5rbm93bkRldmljZXMoZmFsc2UpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2hvd1NjcmVlbihzY3JlZW46IHN0cmluZywgcGFyYW1zPzoge1trZXk6IHN0cmluZ106IGFueX0pIHtcbiAgICAgICAgY29uc3QgY2xpID0gTWF0cml4Q2xpZW50UGVnLmdldCgpO1xuICAgICAgICBjb25zdCBpc0xvZ2dlZE91dE9yR3Vlc3QgPSAhY2xpIHx8IGNsaS5pc0d1ZXN0KCk7XG4gICAgICAgIGlmICghaXNMb2dnZWRPdXRPckd1ZXN0ICYmIEFVVEhfU0NSRUVOUy5pbmNsdWRlcyhzY3JlZW4pKSB7XG4gICAgICAgICAgICAvLyB1c2VyIGlzIGxvZ2dlZCBpbiBhbmQgbGFuZGluZyBvbiBhbiBhdXRoIHBhZ2Ugd2hpY2ggd2lsbCB1cHJvb3QgdGhlaXIgc2Vzc2lvbiwgcmVkaXJlY3QgdGhlbSBob21lIGluc3RlYWRcbiAgICAgICAgICAgIGRpcy5kaXNwYXRjaCh7IGFjdGlvbjogXCJ2aWV3X2hvbWVfcGFnZVwiIH0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNjcmVlbiA9PT0gJ3JlZ2lzdGVyJykge1xuICAgICAgICAgICAgZGlzLmRpc3BhdGNoKHtcbiAgICAgICAgICAgICAgICBhY3Rpb246ICdzdGFydF9yZWdpc3RyYXRpb24nLFxuICAgICAgICAgICAgICAgIHBhcmFtczogcGFyYW1zLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBQZXJmb3JtYW5jZU1vbml0b3IuaW5zdGFuY2Uuc3RhcnQoUGVyZm9ybWFuY2VFbnRyeU5hbWVzLlJFR0lTVEVSKTtcbiAgICAgICAgfSBlbHNlIGlmIChzY3JlZW4gPT09ICdsb2dpbicpIHtcbiAgICAgICAgICAgIGRpcy5kaXNwYXRjaCh7XG4gICAgICAgICAgICAgICAgYWN0aW9uOiAnc3RhcnRfbG9naW4nLFxuICAgICAgICAgICAgICAgIHBhcmFtczogcGFyYW1zLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBQZXJmb3JtYW5jZU1vbml0b3IuaW5zdGFuY2Uuc3RhcnQoUGVyZm9ybWFuY2VFbnRyeU5hbWVzLkxPR0lOKTtcbiAgICAgICAgfSBlbHNlIGlmIChzY3JlZW4gPT09ICdmb3Jnb3RfcGFzc3dvcmQnKSB7XG4gICAgICAgICAgICBkaXMuZGlzcGF0Y2goe1xuICAgICAgICAgICAgICAgIGFjdGlvbjogJ3N0YXJ0X3Bhc3N3b3JkX3JlY292ZXJ5JyxcbiAgICAgICAgICAgICAgICBwYXJhbXM6IHBhcmFtcyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKHNjcmVlbiA9PT0gJ3NvZnRfbG9nb3V0Jykge1xuICAgICAgICAgICAgaWYgKGNsaS5nZXRVc2VySWQoKSAmJiAhTGlmZWN5Y2xlLmlzU29mdExvZ291dCgpKSB7XG4gICAgICAgICAgICAgICAgLy8gTG9nZ2VkIGluIC0gdmlzaXQgYSByb29tXG4gICAgICAgICAgICAgICAgdGhpcy52aWV3TGFzdFJvb20oKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gVWx0aW1hdGVseSB0cmlnZ2VycyBzb2Z0X2xvZ291dCBpZiBuZWVkZWRcbiAgICAgICAgICAgICAgICBkaXMuZGlzcGF0Y2goe1xuICAgICAgICAgICAgICAgICAgICBhY3Rpb246ICdzdGFydF9sb2dpbicsXG4gICAgICAgICAgICAgICAgICAgIHBhcmFtczogcGFyYW1zLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHNjcmVlbiA9PT0gJ25ldycpIHtcbiAgICAgICAgICAgIGRpcy5kaXNwYXRjaCh7XG4gICAgICAgICAgICAgICAgYWN0aW9uOiAndmlld19jcmVhdGVfcm9vbScsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIGlmIChzY3JlZW4gPT09ICdzZXR0aW5ncycpIHtcbiAgICAgICAgICAgIGRpcy5maXJlKEFjdGlvbi5WaWV3VXNlclNldHRpbmdzKTtcbiAgICAgICAgfSBlbHNlIGlmIChzY3JlZW4gPT09ICd3ZWxjb21lJykge1xuICAgICAgICAgICAgZGlzLmRpc3BhdGNoKHtcbiAgICAgICAgICAgICAgICBhY3Rpb246ICd2aWV3X3dlbGNvbWVfcGFnZScsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIGlmIChzY3JlZW4gPT09ICdob21lJykge1xuICAgICAgICAgICAgZGlzLmRpc3BhdGNoKHtcbiAgICAgICAgICAgICAgICBhY3Rpb246ICd2aWV3X2hvbWVfcGFnZScsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIGlmIChzY3JlZW4gPT09ICdzdGFydCcpIHtcbiAgICAgICAgICAgIHRoaXMuc2hvd1NjcmVlbignaG9tZScpO1xuICAgICAgICAgICAgZGlzLmRpc3BhdGNoKHtcbiAgICAgICAgICAgICAgICBhY3Rpb246ICdyZXF1aXJlX3JlZ2lzdHJhdGlvbicsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIGlmIChzY3JlZW4gPT09ICdkaXJlY3RvcnknKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5zdGF0ZS52aWV3ID09PSBWaWV3cy5XRUxDT01FKSB7XG4gICAgICAgICAgICAgICAgQ291bnRseUFuYWx5dGljcy5pbnN0YW5jZS50cmFjayhcIm9uYm9hcmRpbmdfcm9vbV9kaXJlY3RvcnlcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkaXMuZmlyZShBY3Rpb24uVmlld1Jvb21EaXJlY3RvcnkpO1xuICAgICAgICB9IGVsc2UgaWYgKHNjcmVlbiA9PT0gXCJzdGFydF9zc29cIiB8fCBzY3JlZW4gPT09IFwic3RhcnRfY2FzXCIpIHtcbiAgICAgICAgICAgIC8vIFRPRE8gaWYgbG9nZ2VkIGluLCBza2lwIFNTT1xuICAgICAgICAgICAgbGV0IGNsaSA9IE1hdHJpeENsaWVudFBlZy5nZXQoKTtcbiAgICAgICAgICAgIGlmICghY2xpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBoc1VybCwgaXNVcmwgfSA9IHRoaXMucHJvcHMuc2VydmVyQ29uZmlnO1xuICAgICAgICAgICAgICAgIGNsaSA9IGNyZWF0ZUNsaWVudCh7XG4gICAgICAgICAgICAgICAgICAgIGJhc2VVcmw6IGhzVXJsLFxuICAgICAgICAgICAgICAgICAgICBpZEJhc2VVcmw6IGlzVXJsLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCB0eXBlID0gc2NyZWVuID09PSBcInN0YXJ0X3Nzb1wiID8gXCJzc29cIiA6IFwiY2FzXCI7XG4gICAgICAgICAgICBQbGF0Zm9ybVBlZy5nZXQoKS5zdGFydFNpbmdsZVNpZ25PbihjbGksIHR5cGUsIHRoaXMuZ2V0RnJhZ21lbnRBZnRlckxvZ2luKCkpO1xuICAgICAgICB9IGVsc2UgaWYgKHNjcmVlbiA9PT0gJ2dyb3VwcycpIHtcbiAgICAgICAgICAgIGlmIChTcGFjZVN0b3JlLnNwYWNlc0VuYWJsZWQpIHtcbiAgICAgICAgICAgICAgICBkaXMuZGlzcGF0Y2goeyBhY3Rpb246IFwidmlld19ob21lX3BhZ2VcIiB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkaXMuZGlzcGF0Y2goe1xuICAgICAgICAgICAgICAgIGFjdGlvbjogJ3ZpZXdfbXlfZ3JvdXBzJyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKHNjcmVlbi5pbmRleE9mKCdyb29tLycpID09PSAwKSB7XG4gICAgICAgICAgICAvLyBSb29tcyBjYW4gaGF2ZSB0aGUgZm9sbG93aW5nIGZvcm1hdHM6XG4gICAgICAgICAgICAvLyAjcm9vbV9hbGlhczpkb21haW4gb3IgIW9wYXF1ZV9pZDpkb21haW5cbiAgICAgICAgICAgIGNvbnN0IHJvb20gPSBzY3JlZW4uc3Vic3RyaW5nKDUpO1xuICAgICAgICAgICAgY29uc3QgZG9tYWluT2Zmc2V0ID0gcm9vbS5pbmRleE9mKCc6JykgKyAxOyAvLyAwIGluIGNhc2Ugcm9vbSBkb2VzIG5vdCBjb250YWluIGEgOlxuICAgICAgICAgICAgbGV0IGV2ZW50T2Zmc2V0ID0gcm9vbS5sZW5ndGg7XG4gICAgICAgICAgICAvLyByb29tIGFsaWFzZXMgY2FuIGNvbnRhaW4gc2xhc2hlcyBvbmx5IGxvb2sgZm9yIHNsYXNoIGFmdGVyIGRvbWFpblxuICAgICAgICAgICAgaWYgKHJvb20uc3Vic3RyaW5nKGRvbWFpbk9mZnNldCkuaW5kZXhPZignLycpID4gLTEpIHtcbiAgICAgICAgICAgICAgICBldmVudE9mZnNldCA9IGRvbWFpbk9mZnNldCArIHJvb20uc3Vic3RyaW5nKGRvbWFpbk9mZnNldCkuaW5kZXhPZignLycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgcm9vbVN0cmluZyA9IHJvb20uc3Vic3RyaW5nKDAsIGV2ZW50T2Zmc2V0KTtcbiAgICAgICAgICAgIGxldCBldmVudElkID0gcm9vbS5zdWJzdHJpbmcoZXZlbnRPZmZzZXQgKyAxKTsgLy8gZW1wdHkgc3RyaW5nIGlmIG5vIGV2ZW50IGlkIGdpdmVuXG5cbiAgICAgICAgICAgIC8vIFByZXZpb3VzbHkgd2UgcHVsbGVkIHRoZSBldmVudElEIGZyb20gdGhlIHNlZ21lbnRzIGluIHN1Y2ggYSB3YXlcbiAgICAgICAgICAgIC8vIHdoZXJlIGlmIHRoZXJlIHdhcyBubyBldmVudElkIHRoZW4gd2UnZCBnZXQgdW5kZWZpbmVkLiBIb3dldmVyLCB3ZVxuICAgICAgICAgICAgLy8gbm93IGRvIGEgc3BsaWNlIGFuZCBqb2luIHRvIGhhbmRsZSB2MyBldmVudCBJRHMgd2hpY2ggcmVzdWx0cyBpblxuICAgICAgICAgICAgLy8gYW4gZW1wdHkgc3RyaW5nLiBUbyBtYWludGFpbiBvdXIgcG90ZW50aWFsIGNvbnRyYWN0IHdpdGggdGhlIHJlc3RcbiAgICAgICAgICAgIC8vIG9mIHRoZSBhcHAsIHdlIGNvZXJjZSB0aGUgZXZlbnRJZCB0byBiZSB1bmRlZmluZWQgd2hlcmUgYXBwbGljYWJsZS5cbiAgICAgICAgICAgIGlmICghZXZlbnRJZCkgZXZlbnRJZCA9IHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgLy8gVE9ETzogSGFuZGxlIGVuY29kZWQgcm9vbS9ldmVudCBJRHM6IGh0dHBzOi8vZ2l0aHViLmNvbS92ZWN0b3ItaW0vZWxlbWVudC13ZWIvaXNzdWVzLzkxNDlcblxuICAgICAgICAgICAgbGV0IHRocmVlcGlkSW52aXRlOiBJVGhyZWVwaWRJbnZpdGU7XG4gICAgICAgICAgICAvLyBpZiB3ZSBsYW5kZWQgaGVyZSBmcm9tIGEgM1BJRCBpbnZpdGUsIHBlcnNpc3QgaXRcbiAgICAgICAgICAgIGlmIChwYXJhbXMuc2lnbnVybCAmJiBwYXJhbXMuZW1haWwpIHtcbiAgICAgICAgICAgICAgICB0aHJlZXBpZEludml0ZSA9IFRocmVlcGlkSW52aXRlU3RvcmUuaW5zdGFuY2VcbiAgICAgICAgICAgICAgICAgICAgLnN0b3JlSW52aXRlKHJvb21TdHJpbmcsIHBhcmFtcyBhcyBJVGhyZWVwaWRJbnZpdGVXaXJlRm9ybWF0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIG90aGVyd2lzZSBjaGVjayB0aGF0IHRoaXMgcm9vbSBkb2Vzbid0IGFscmVhZHkgaGF2ZSBhIGtub3duIGludml0ZVxuICAgICAgICAgICAgaWYgKCF0aHJlZXBpZEludml0ZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGludml0ZXMgPSBUaHJlZXBpZEludml0ZVN0b3JlLmluc3RhbmNlLmdldEludml0ZXMoKTtcbiAgICAgICAgICAgICAgICB0aHJlZXBpZEludml0ZSA9IGludml0ZXMuZmluZChpbnZpdGUgPT4gaW52aXRlLnJvb21JZCA9PT0gcm9vbVN0cmluZyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIG9uIG91ciBVUkxzIHRoZXJlIG1pZ2h0IGJlIGEgP3ZpYT1tYXRyaXgub3JnIG9yIHNpbWlsYXIgdG8gaGVscFxuICAgICAgICAgICAgLy8gam9pbnMgdG8gdGhlIHJvb20gc3VjY2VlZC4gV2UnbGwgcGFzcyB0aGVzZSB0aHJvdWdoIGFzIGFuIGFycmF5XG4gICAgICAgICAgICAvLyB0byBvdGhlciBsZXZlbHMuIElmIHRoZXJlJ3MganVzdCBvbmUgP3ZpYT0gdGhlbiBwYXJhbXMudmlhIGlzIGFcbiAgICAgICAgICAgIC8vIHNpbmdsZSBzdHJpbmcuIElmIHNvbWVvbmUgZG9lcyBzb21ldGhpbmcgbGlrZSA/dmlhPW9uZS5jb20mdmlhPXR3by5jb21cbiAgICAgICAgICAgIC8vIHRoZW4gcGFyYW1zLnZpYSBpcyBhbiBhcnJheSBvZiBzdHJpbmdzLlxuICAgICAgICAgICAgbGV0IHZpYSA9IFtdO1xuICAgICAgICAgICAgaWYgKHBhcmFtcy52aWEpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mKHBhcmFtcy52aWEpID09PSAnc3RyaW5nJykgdmlhID0gW3BhcmFtcy52aWFdO1xuICAgICAgICAgICAgICAgIGVsc2UgdmlhID0gcGFyYW1zLnZpYTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgcGF5bG9hZCA9IHtcbiAgICAgICAgICAgICAgICBhY3Rpb246IEFjdGlvbi5WaWV3Um9vbSxcbiAgICAgICAgICAgICAgICBldmVudF9pZDogZXZlbnRJZCxcbiAgICAgICAgICAgICAgICB2aWFfc2VydmVyczogdmlhLFxuICAgICAgICAgICAgICAgIC8vIElmIGFuIGV2ZW50IElEIGlzIGdpdmVuIGluIHRoZSBVUkwgaGFzaCwgbm90aWZ5IFJvb21WaWV3U3RvcmUgdG8gbWFya1xuICAgICAgICAgICAgICAgIC8vIGl0IGFzIGhpZ2hsaWdodGVkLCB3aGljaCB3aWxsIHByb3BhZ2F0ZSB0byBSb29tVmlldyBhbmQgaGlnaGxpZ2h0IHRoZVxuICAgICAgICAgICAgICAgIC8vIGFzc29jaWF0ZWQgRXZlbnRUaWxlLlxuICAgICAgICAgICAgICAgIGhpZ2hsaWdodGVkOiBCb29sZWFuKGV2ZW50SWQpLFxuICAgICAgICAgICAgICAgIHRocmVlcGlkX2ludml0ZTogdGhyZWVwaWRJbnZpdGUsXG4gICAgICAgICAgICAgICAgLy8gVE9ETzogUmVwbGFjZSBvb2JfZGF0YSB3aXRoIHRoZSB0aHJlZXBpZEludml0ZSAod2hpY2ggaGFzIHRoZSBzYW1lIGluZm8pLlxuICAgICAgICAgICAgICAgIC8vIFRoaXMgaXNuJ3QgZG9uZSB5ZXQgYmVjYXVzZSBpdCdzIHRocmVhZGVkIHRocm91Z2ggc28gbWFueSBtb3JlIHBsYWNlcy5cbiAgICAgICAgICAgICAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3ZlY3Rvci1pbS9lbGVtZW50LXdlYi9pc3N1ZXMvMTUxNTdcbiAgICAgICAgICAgICAgICBvb2JfZGF0YToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiB0aHJlZXBpZEludml0ZT8ucm9vbU5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGF2YXRhclVybDogdGhyZWVwaWRJbnZpdGU/LnJvb21BdmF0YXJVcmwsXG4gICAgICAgICAgICAgICAgICAgIGludml0ZXJOYW1lOiB0aHJlZXBpZEludml0ZT8uaW52aXRlck5hbWUsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICByb29tX2FsaWFzOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgcm9vbV9pZDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmIChyb29tU3RyaW5nWzBdID09PSAnIycpIHtcbiAgICAgICAgICAgICAgICBwYXlsb2FkLnJvb21fYWxpYXMgPSByb29tU3RyaW5nO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwYXlsb2FkLnJvb21faWQgPSByb29tU3RyaW5nO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkaXMuZGlzcGF0Y2gocGF5bG9hZCk7XG4gICAgICAgIH0gZWxzZSBpZiAoc2NyZWVuLmluZGV4T2YoJ3VzZXIvJykgPT09IDApIHtcbiAgICAgICAgICAgIGNvbnN0IHVzZXJJZCA9IHNjcmVlbi5zdWJzdHJpbmcoNSk7XG4gICAgICAgICAgICBkaXMuZGlzcGF0Y2goe1xuICAgICAgICAgICAgICAgIGFjdGlvbjogJ3ZpZXdfdXNlcl9pbmZvJyxcbiAgICAgICAgICAgICAgICB1c2VySWQ6IHVzZXJJZCxcbiAgICAgICAgICAgICAgICBzdWJBY3Rpb246IHBhcmFtcy5hY3Rpb24sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIGlmIChzY3JlZW4uaW5kZXhPZignZ3JvdXAvJykgPT09IDApIHtcbiAgICAgICAgICAgIGNvbnN0IGdyb3VwSWQgPSBzY3JlZW4uc3Vic3RyaW5nKDYpO1xuXG4gICAgICAgICAgICAvLyBUT0RPOiBDaGVjayB2YWxpZCBncm91cCBJRFxuXG4gICAgICAgICAgICBkaXMuZGlzcGF0Y2goe1xuICAgICAgICAgICAgICAgIGFjdGlvbjogJ3ZpZXdfZ3JvdXAnLFxuICAgICAgICAgICAgICAgIGdyb3VwX2lkOiBncm91cElkLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsb2dnZXIuaW5mbyhcIklnbm9yaW5nIHNob3dTY3JlZW4gZm9yICclcydcIiwgc2NyZWVuKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG5vdGlmeU5ld1NjcmVlbihzY3JlZW46IHN0cmluZywgcmVwbGFjZUxhc3QgPSBmYWxzZSkge1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5vbk5ld1NjcmVlbikge1xuICAgICAgICAgICAgdGhpcy5wcm9wcy5vbk5ld1NjcmVlbihzY3JlZW4sIHJlcGxhY2VMYXN0KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNldFBhZ2VTdWJ0aXRsZSgpO1xuICAgIH1cblxuICAgIG9uQWxpYXNDbGljayhldmVudDogTW91c2VFdmVudCwgYWxpYXM6IHN0cmluZykge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBkaXMuZGlzcGF0Y2goeyBhY3Rpb246IEFjdGlvbi5WaWV3Um9vbSwgcm9vbV9hbGlhczogYWxpYXMgfSk7XG4gICAgfVxuXG4gICAgb25Vc2VyQ2xpY2soZXZlbnQ6IE1vdXNlRXZlbnQsIHVzZXJJZDogc3RyaW5nKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgY29uc3QgbWVtYmVyID0gbmV3IFJvb21NZW1iZXIobnVsbCwgdXNlcklkKTtcbiAgICAgICAgaWYgKCFtZW1iZXIpIHsgcmV0dXJuOyB9XG4gICAgICAgIGRpcy5kaXNwYXRjaDxWaWV3VXNlclBheWxvYWQ+KHtcbiAgICAgICAgICAgIGFjdGlvbjogQWN0aW9uLlZpZXdVc2VyLFxuICAgICAgICAgICAgbWVtYmVyOiBtZW1iZXIsXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIG9uR3JvdXBDbGljayhldmVudDogTW91c2VFdmVudCwgZ3JvdXBJZDogc3RyaW5nKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGRpcy5kaXNwYXRjaCh7IGFjdGlvbjogJ3ZpZXdfZ3JvdXAnLCBncm91cF9pZDogZ3JvdXBJZCB9KTtcbiAgICB9XG5cbiAgICBvbkxvZ291dENsaWNrKGV2ZW50OiBSZWFjdC5Nb3VzZUV2ZW50PEhUTUxBbmNob3JFbGVtZW50LCBNb3VzZUV2ZW50Pikge1xuICAgICAgICBkaXMuZGlzcGF0Y2goe1xuICAgICAgICAgICAgYWN0aW9uOiAnbG9nb3V0JyxcbiAgICAgICAgfSk7XG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cblxuICAgIGhhbmRsZVJlc2l6ZSA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgTEhTX1RIUkVTSE9MRCA9IDEwMDA7XG4gICAgICAgIGNvbnN0IHdpZHRoID0gVUlTdG9yZS5pbnN0YW5jZS53aW5kb3dXaWR0aDtcblxuICAgICAgICBpZiAodGhpcy5wcmV2V2luZG93V2lkdGggPCBMSFNfVEhSRVNIT0xEICYmIHdpZHRoID49IExIU19USFJFU0hPTEQpIHtcbiAgICAgICAgICAgIGRpcy5kaXNwYXRjaCh7IGFjdGlvbjogJ3Nob3dfbGVmdF9wYW5lbCcgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5wcmV2V2luZG93V2lkdGggPj0gTEhTX1RIUkVTSE9MRCAmJiB3aWR0aCA8IExIU19USFJFU0hPTEQpIHtcbiAgICAgICAgICAgIGRpcy5kaXNwYXRjaCh7IGFjdGlvbjogJ2hpZGVfbGVmdF9wYW5lbCcgfSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnByZXZXaW5kb3dXaWR0aCA9IHdpZHRoO1xuICAgICAgICB0aGlzLnN0YXRlLnJlc2l6ZU5vdGlmaWVyLm5vdGlmeVdpbmRvd1Jlc2l6ZWQoKTtcbiAgICB9O1xuXG4gICAgcHJpdmF0ZSBkaXNwYXRjaFRpbWVsaW5lUmVzaXplKCkge1xuICAgICAgICBkaXMuZGlzcGF0Y2goeyBhY3Rpb246ICd0aW1lbGluZV9yZXNpemUnIH0pO1xuICAgIH1cblxuICAgIG9uUmVnaXN0ZXJDbGljayA9ICgpID0+IHtcbiAgICAgICAgdGhpcy5zaG93U2NyZWVuKFwicmVnaXN0ZXJcIik7XG4gICAgfTtcblxuICAgIG9uTG9naW5DbGljayA9ICgpID0+IHtcbiAgICAgICAgdGhpcy5zaG93U2NyZWVuKFwibG9naW5cIik7XG4gICAgfTtcblxuICAgIG9uRm9yZ290UGFzc3dvcmRDbGljayA9ICgpID0+IHtcbiAgICAgICAgdGhpcy5zaG93U2NyZWVuKFwiZm9yZ290X3Bhc3N3b3JkXCIpO1xuICAgIH07XG5cbiAgICBvblJlZ2lzdGVyRmxvd0NvbXBsZXRlID0gKGNyZWRlbnRpYWxzOiBJTWF0cml4Q2xpZW50Q3JlZHMsIHBhc3N3b3JkOiBzdHJpbmcpID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMub25Vc2VyQ29tcGxldGVkTG9naW5GbG93KGNyZWRlbnRpYWxzLCBwYXNzd29yZCk7XG4gICAgfTtcblxuICAgIC8vIHJldHVybnMgYSBwcm9taXNlIHdoaWNoIHJlc29sdmVzIHRvIHRoZSBuZXcgTWF0cml4Q2xpZW50XG4gICAgb25SZWdpc3RlcmVkKGNyZWRlbnRpYWxzOiBJTWF0cml4Q2xpZW50Q3JlZHMpIHtcbiAgICAgICAgcmV0dXJuIExpZmVjeWNsZS5zZXRMb2dnZWRJbihjcmVkZW50aWFscyk7XG4gICAgfVxuXG4gICAgb25TZW5kRXZlbnQocm9vbUlkOiBzdHJpbmcsIGV2ZW50OiBNYXRyaXhFdmVudCkge1xuICAgICAgICBjb25zdCBjbGkgPSBNYXRyaXhDbGllbnRQZWcuZ2V0KCk7XG4gICAgICAgIGlmICghY2xpKSByZXR1cm47XG5cbiAgICAgICAgY2xpLnNlbmRFdmVudChyb29tSWQsIGV2ZW50LmdldFR5cGUoKSwgZXZlbnQuZ2V0Q29udGVudCgpKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIGRpcy5kaXNwYXRjaCh7IGFjdGlvbjogJ21lc3NhZ2Vfc2VudCcgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgc2V0UGFnZVN1YnRpdGxlKHN1YnRpdGxlID0gJycpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuY3VycmVudFJvb21JZCkge1xuICAgICAgICAgICAgY29uc3QgY2xpZW50ID0gTWF0cml4Q2xpZW50UGVnLmdldCgpO1xuICAgICAgICAgICAgY29uc3Qgcm9vbSA9IGNsaWVudCAmJiBjbGllbnQuZ2V0Um9vbSh0aGlzLnN0YXRlLmN1cnJlbnRSb29tSWQpO1xuICAgICAgICAgICAgaWYgKHJvb20pIHtcbiAgICAgICAgICAgICAgICBzdWJ0aXRsZSA9IGAke3RoaXMuc3ViVGl0bGVTdGF0dXN9IHwgJHsgcm9vbS5uYW1lIH0gJHtzdWJ0aXRsZX1gO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3VidGl0bGUgPSBgJHt0aGlzLnN1YlRpdGxlU3RhdHVzfSAke3N1YnRpdGxlfWA7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB0aXRsZSA9IGAke1Nka0NvbmZpZy5nZXQoKS5icmFuZH0gJHtzdWJ0aXRsZX1gO1xuXG4gICAgICAgIGlmIChkb2N1bWVudC50aXRsZSAhPT0gdGl0bGUpIHtcbiAgICAgICAgICAgIGRvY3VtZW50LnRpdGxlID0gdGl0bGU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB1cGRhdGVTdGF0dXNJbmRpY2F0b3Ioc3RhdGU6IHN0cmluZywgcHJldlN0YXRlOiBzdHJpbmcpIHtcbiAgICAgICAgY29uc3Qgbm90aWZpY2F0aW9uU3RhdGUgPSBSb29tTm90aWZpY2F0aW9uU3RhdGVTdG9yZS5pbnN0YW5jZS5nbG9iYWxTdGF0ZTtcbiAgICAgICAgY29uc3QgbnVtVW5yZWFkUm9vbXMgPSBub3RpZmljYXRpb25TdGF0ZS5udW1VbnJlYWRTdGF0ZXM7IC8vIHdlIGtub3cgdGhhdCBzdGF0ZXMgPT09IHJvb21zIGhlcmVcblxuICAgICAgICBpZiAoUGxhdGZvcm1QZWcuZ2V0KCkpIHtcbiAgICAgICAgICAgIFBsYXRmb3JtUGVnLmdldCgpLnNldEVycm9yU3RhdHVzKHN0YXRlID09PSAnRVJST1InKTtcbiAgICAgICAgICAgIFBsYXRmb3JtUGVnLmdldCgpLnNldE5vdGlmaWNhdGlvbkNvdW50KG51bVVucmVhZFJvb21zKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc3ViVGl0bGVTdGF0dXMgPSAnJztcbiAgICAgICAgaWYgKHN0YXRlID09PSBcIkVSUk9SXCIpIHtcbiAgICAgICAgICAgIHRoaXMuc3ViVGl0bGVTdGF0dXMgKz0gYFske190KFwiT2ZmbGluZVwiKX1dIGA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG51bVVucmVhZFJvb21zID4gMCkge1xuICAgICAgICAgICAgdGhpcy5zdWJUaXRsZVN0YXR1cyArPSBgWyR7bnVtVW5yZWFkUm9vbXN9XWA7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNldFBhZ2VTdWJ0aXRsZSgpO1xuICAgIH1cblxuICAgIG9uQ2xvc2VBbGxTZXR0aW5ncygpIHtcbiAgICAgICAgZGlzLmRpc3BhdGNoKHsgYWN0aW9uOiAnY2xvc2Vfc2V0dGluZ3MnIH0pO1xuICAgIH1cblxuICAgIG9uU2VydmVyQ29uZmlnQ2hhbmdlID0gKHNlcnZlckNvbmZpZzogVmFsaWRhdGVkU2VydmVyQ29uZmlnKSA9PiB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBzZXJ2ZXJDb25maWcgfSk7XG4gICAgfTtcblxuICAgIHByaXZhdGUgbWFrZVJlZ2lzdHJhdGlvblVybCA9IChwYXJhbXM6IFF1ZXJ5RGljdCkgPT4ge1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5zdGFydGluZ0ZyYWdtZW50UXVlcnlQYXJhbXMucmVmZXJyZXIpIHtcbiAgICAgICAgICAgIHBhcmFtcy5yZWZlcnJlciA9IHRoaXMucHJvcHMuc3RhcnRpbmdGcmFnbWVudFF1ZXJ5UGFyYW1zLnJlZmVycmVyO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLm1ha2VSZWdpc3RyYXRpb25VcmwocGFyYW1zKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQWZ0ZXIgcmVnaXN0cmF0aW9uIG9yIGxvZ2luLCB3ZSBydW4gdmFyaW91cyBwb3N0LWF1dGggc3RlcHMgYmVmb3JlIGVudGVyaW5nIHRoZSBhcHBcbiAgICAgKiBwcm9wZXIsIHN1Y2ggc2V0dGluZyB1cCBjcm9zcy1zaWduaW5nIG9yIHZlcmlmeWluZyB0aGUgbmV3IHNlc3Npb24uXG4gICAgICpcbiAgICAgKiBOb3RlOiBTU08gdXNlcnMgKGFuZCBhbnkgb3RoZXJzIHVzaW5nIHRva2VuIGxvZ2luKSBjdXJyZW50bHkgZG8gbm90IHBhc3MgdGhyb3VnaFxuICAgICAqIHRoaXMsIGFzIHRoZXkgaW5zdGVhZCBqdW1wIHN0cmFpZ2h0IGludG8gdGhlIGFwcCBhZnRlciBgYXR0ZW1wdFRva2VuTG9naW5gLlxuICAgICAqL1xuICAgIG9uVXNlckNvbXBsZXRlZExvZ2luRmxvdyA9IGFzeW5jIChjcmVkZW50aWFsczogSU1hdHJpeENsaWVudENyZWRzLCBwYXNzd29yZDogc3RyaW5nKSA9PiB7XG4gICAgICAgIHRoaXMuYWNjb3VudFBhc3N3b3JkID0gcGFzc3dvcmQ7XG4gICAgICAgIC8vIHNlbGYtZGVzdHJ1Y3QgdGhlIHBhc3N3b3JkIGFmdGVyIDVtaW5zXG4gICAgICAgIGlmICh0aGlzLmFjY291bnRQYXNzd29yZFRpbWVyICE9PSBudWxsKSBjbGVhclRpbWVvdXQodGhpcy5hY2NvdW50UGFzc3dvcmRUaW1lcik7XG4gICAgICAgIHRoaXMuYWNjb3VudFBhc3N3b3JkVGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuYWNjb3VudFBhc3N3b3JkID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuYWNjb3VudFBhc3N3b3JkVGltZXIgPSBudWxsO1xuICAgICAgICB9LCA2MCAqIDUgKiAxMDAwKTtcblxuICAgICAgICAvLyBDcmVhdGUgYW5kIHN0YXJ0IHRoZSBjbGllbnRcbiAgICAgICAgYXdhaXQgTGlmZWN5Y2xlLnNldExvZ2dlZEluKGNyZWRlbnRpYWxzKTtcbiAgICAgICAgYXdhaXQgdGhpcy5wb3N0TG9naW5TZXR1cCgpO1xuXG4gICAgICAgIFBlcmZvcm1hbmNlTW9uaXRvci5pbnN0YW5jZS5zdG9wKFBlcmZvcm1hbmNlRW50cnlOYW1lcy5MT0dJTik7XG4gICAgICAgIFBlcmZvcm1hbmNlTW9uaXRvci5pbnN0YW5jZS5zdG9wKFBlcmZvcm1hbmNlRW50cnlOYW1lcy5SRUdJU1RFUik7XG4gICAgfTtcblxuICAgIC8vIGNvbXBsZXRlIHNlY3VyaXR5IC8gZTJlIHNldHVwIGhhcyBmaW5pc2hlZFxuICAgIG9uQ29tcGxldGVTZWN1cml0eUUyZVNldHVwRmluaXNoZWQgPSAoKSA9PiB7XG4gICAgICAgIHRoaXMub25Mb2dnZWRJbigpO1xuICAgIH07XG5cbiAgICBnZXRGcmFnbWVudEFmdGVyTG9naW4oKSB7XG4gICAgICAgIGxldCBmcmFnbWVudEFmdGVyTG9naW4gPSBcIlwiO1xuICAgICAgICBjb25zdCBpbml0aWFsU2NyZWVuQWZ0ZXJMb2dpbiA9IHRoaXMucHJvcHMuaW5pdGlhbFNjcmVlbkFmdGVyTG9naW47XG4gICAgICAgIGlmIChpbml0aWFsU2NyZWVuQWZ0ZXJMb2dpbiAmJlxuICAgICAgICAgICAgLy8gWFhYOiB3b3JrYXJvdW5kIGZvciBodHRwczovL2dpdGh1Yi5jb20vdmVjdG9yLWltL2VsZW1lbnQtd2ViL2lzc3Vlcy8xMTY0MyBjYXVzaW5nIGEgbG9naW4tbG9vcFxuICAgICAgICAgICAgIVtcIndlbGNvbWVcIiwgXCJsb2dpblwiLCBcInJlZ2lzdGVyXCIsIFwic3RhcnRfc3NvXCIsIFwic3RhcnRfY2FzXCJdLmluY2x1ZGVzKGluaXRpYWxTY3JlZW5BZnRlckxvZ2luLnNjcmVlbilcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBmcmFnbWVudEFmdGVyTG9naW4gPSBgLyR7aW5pdGlhbFNjcmVlbkFmdGVyTG9naW4uc2NyZWVufWA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZyYWdtZW50QWZ0ZXJMb2dpbjtcbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGNvbnN0IGZyYWdtZW50QWZ0ZXJMb2dpbiA9IHRoaXMuZ2V0RnJhZ21lbnRBZnRlckxvZ2luKCk7XG4gICAgICAgIGxldCB2aWV3ID0gbnVsbDtcblxuICAgICAgICBpZiAodGhpcy5zdGF0ZS52aWV3ID09PSBWaWV3cy5MT0FESU5HKSB7XG4gICAgICAgICAgICB2aWV3ID0gKFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibXhfTWF0cml4Q2hhdF9zcGxhc2hcIj5cbiAgICAgICAgICAgICAgICAgICAgPFNwaW5uZXIgLz5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5zdGF0ZS52aWV3ID09PSBWaWV3cy5DT01QTEVURV9TRUNVUklUWSkge1xuICAgICAgICAgICAgdmlldyA9IChcbiAgICAgICAgICAgICAgICA8Q29tcGxldGVTZWN1cml0eVxuICAgICAgICAgICAgICAgICAgICBvbkZpbmlzaGVkPXt0aGlzLm9uQ29tcGxldGVTZWN1cml0eUUyZVNldHVwRmluaXNoZWR9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5zdGF0ZS52aWV3ID09PSBWaWV3cy5FMkVfU0VUVVApIHtcbiAgICAgICAgICAgIHZpZXcgPSAoXG4gICAgICAgICAgICAgICAgPEUyZVNldHVwXG4gICAgICAgICAgICAgICAgICAgIG9uRmluaXNoZWQ9e3RoaXMub25Db21wbGV0ZVNlY3VyaXR5RTJlU2V0dXBGaW5pc2hlZH1cbiAgICAgICAgICAgICAgICAgICAgYWNjb3VudFBhc3N3b3JkPXt0aGlzLmFjY291bnRQYXNzd29yZH1cbiAgICAgICAgICAgICAgICAgICAgdG9rZW5Mb2dpbj17ISF0aGlzLnRva2VuTG9naW59XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5zdGF0ZS52aWV3ID09PSBWaWV3cy5MT0dHRURfSU4pIHtcbiAgICAgICAgICAgIC8vIHN0b3JlIGVycm9ycyBzdG9wIHRoZSBjbGllbnQgc3luY2luZyBhbmQgcmVxdWlyZSB1c2VyIGludGVydmVudGlvbiwgc28gd2UnbGxcbiAgICAgICAgICAgIC8vIGJlIHNob3dpbmcgYSBkaWFsb2cuIERvbid0IHNob3cgYW55dGhpbmcgZWxzZS5cbiAgICAgICAgICAgIGNvbnN0IGlzU3RvcmVFcnJvciA9IHRoaXMuc3RhdGUuc3luY0Vycm9yICYmIHRoaXMuc3RhdGUuc3luY0Vycm9yIGluc3RhbmNlb2YgSW52YWxpZFN0b3JlRXJyb3I7XG5cbiAgICAgICAgICAgIC8vIGByZWFkeWAgYW5kIGB2aWV3PT1MT0dHRURfSU5gIG1heSBiZSBzZXQgYmVmb3JlIGBwYWdlX3R5cGVgIChiZWNhdXNlIHRoZVxuICAgICAgICAgICAgLy8gbGF0dGVyIGlzIHNldCB2aWEgdGhlIGRpc3BhdGNoZXIpLiBJZiB3ZSBkb24ndCB5ZXQgaGF2ZSBhIGBwYWdlX3R5cGVgLFxuICAgICAgICAgICAgLy8ga2VlcCBzaG93aW5nIHRoZSBzcGlubmVyIGZvciBub3cuXG4gICAgICAgICAgICBpZiAodGhpcy5zdGF0ZS5yZWFkeSAmJiB0aGlzLnN0YXRlLnBhZ2VfdHlwZSAmJiAhaXNTdG9yZUVycm9yKSB7XG4gICAgICAgICAgICAgICAgLyogZm9yIG5vdywgd2Ugc3R1ZmYgdGhlIGVudGlyZXR5IG9mIG91ciBwcm9wcyBhbmQgc3RhdGUgaW50byB0aGUgTG9nZ2VkSW5WaWV3LlxuICAgICAgICAgICAgICAgICAqIHdlIHNob3VsZCBnbyB0aHJvdWdoIGFuZCBmaWd1cmUgb3V0IHdoYXQgd2UgYWN0dWFsbHkgbmVlZCB0byBwYXNzIGRvd24sIGFzIHdlbGxcbiAgICAgICAgICAgICAgICAgKiBhcyB1c2luZyBzb21ldGhpbmcgbGlrZSByZWR1eCB0byBhdm9pZCBoYXZpbmcgYSBiaWxsaW9uIGJpdHMgb2Ygc3RhdGUga2lja2luZyBhcm91bmQuXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgdmlldyA9IChcbiAgICAgICAgICAgICAgICAgICAgPExvZ2dlZEluVmlld1xuICAgICAgICAgICAgICAgICAgICAgICAgey4uLnRoaXMucHJvcHN9XG4gICAgICAgICAgICAgICAgICAgICAgICB7Li4udGhpcy5zdGF0ZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZj17dGhpcy5sb2dnZWRJblZpZXd9XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXRyaXhDbGllbnQ9e01hdHJpeENsaWVudFBlZy5nZXQoKX1cbiAgICAgICAgICAgICAgICAgICAgICAgIG9uUmVnaXN0ZXJlZD17dGhpcy5vblJlZ2lzdGVyZWR9XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50Um9vbUlkPXt0aGlzLnN0YXRlLmN1cnJlbnRSb29tSWR9XG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gd2UgdGhpbmsgd2UgYXJlIGxvZ2dlZCBpbiwgYnV0IGFyZSBzdGlsbCB3YWl0aW5nIGZvciB0aGUgL3N5bmMgdG8gY29tcGxldGVcbiAgICAgICAgICAgICAgICBsZXQgZXJyb3JCb3g7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc3RhdGUuc3luY0Vycm9yICYmICFpc1N0b3JlRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JCb3ggPSA8ZGl2IGNsYXNzTmFtZT1cIm14X01hdHJpeENoYXRfc3luY0Vycm9yXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICB7IG1lc3NhZ2VGb3JTeW5jRXJyb3IodGhpcy5zdGF0ZS5zeW5jRXJyb3IpIH1cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2aWV3ID0gKFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm14X01hdHJpeENoYXRfc3BsYXNoXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICB7IGVycm9yQm94IH1cbiAgICAgICAgICAgICAgICAgICAgICAgIDxTcGlubmVyIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiI1wiIGNsYXNzTmFtZT1cIm14X01hdHJpeENoYXRfc3BsYXNoQnV0dG9uc1wiIG9uQ2xpY2s9e3RoaXMub25Mb2dvdXRDbGlja30+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBfdCgnTG9nb3V0JykgfVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9hPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuc3RhdGUudmlldyA9PT0gVmlld3MuV0VMQ09NRSkge1xuICAgICAgICAgICAgdmlldyA9IDxXZWxjb21lIC8+O1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuc3RhdGUudmlldyA9PT0gVmlld3MuUkVHSVNURVIgJiYgU2V0dGluZ3NTdG9yZS5nZXRWYWx1ZShVSUZlYXR1cmUuUmVnaXN0cmF0aW9uKSkge1xuICAgICAgICAgICAgY29uc3QgZW1haWwgPSBUaHJlZXBpZEludml0ZVN0b3JlLmluc3RhbmNlLnBpY2tCZXN0SW52aXRlKCk/LnRvRW1haWw7XG4gICAgICAgICAgICB2aWV3ID0gKFxuICAgICAgICAgICAgICAgIDxSZWdpc3RyYXRpb25cbiAgICAgICAgICAgICAgICAgICAgY2xpZW50U2VjcmV0PXt0aGlzLnN0YXRlLnJlZ2lzdGVyX2NsaWVudF9zZWNyZXR9XG4gICAgICAgICAgICAgICAgICAgIHNlc3Npb25JZD17dGhpcy5zdGF0ZS5yZWdpc3Rlcl9zZXNzaW9uX2lkfVxuICAgICAgICAgICAgICAgICAgICBpZFNpZD17dGhpcy5zdGF0ZS5yZWdpc3Rlcl9pZF9zaWR9XG4gICAgICAgICAgICAgICAgICAgIGVtYWlsPXtlbWFpbH1cbiAgICAgICAgICAgICAgICAgICAgYnJhbmQ9e3RoaXMucHJvcHMuY29uZmlnLmJyYW5kfVxuICAgICAgICAgICAgICAgICAgICBtYWtlUmVnaXN0cmF0aW9uVXJsPXt0aGlzLm1ha2VSZWdpc3RyYXRpb25Vcmx9XG4gICAgICAgICAgICAgICAgICAgIG9uTG9nZ2VkSW49e3RoaXMub25SZWdpc3RlckZsb3dDb21wbGV0ZX1cbiAgICAgICAgICAgICAgICAgICAgb25Mb2dpbkNsaWNrPXt0aGlzLm9uTG9naW5DbGlja31cbiAgICAgICAgICAgICAgICAgICAgb25TZXJ2ZXJDb25maWdDaGFuZ2U9e3RoaXMub25TZXJ2ZXJDb25maWdDaGFuZ2V9XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHREZXZpY2VEaXNwbGF5TmFtZT17dGhpcy5wcm9wcy5kZWZhdWx0RGV2aWNlRGlzcGxheU5hbWV9XG4gICAgICAgICAgICAgICAgICAgIGZyYWdtZW50QWZ0ZXJMb2dpbj17ZnJhZ21lbnRBZnRlckxvZ2lufVxuICAgICAgICAgICAgICAgICAgICB7Li4udGhpcy5nZXRTZXJ2ZXJQcm9wZXJ0aWVzKCl9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5zdGF0ZS52aWV3ID09PSBWaWV3cy5GT1JHT1RfUEFTU1dPUkQgJiYgU2V0dGluZ3NTdG9yZS5nZXRWYWx1ZShVSUZlYXR1cmUuUGFzc3dvcmRSZXNldCkpIHtcbiAgICAgICAgICAgIHZpZXcgPSAoXG4gICAgICAgICAgICAgICAgPEZvcmdvdFBhc3N3b3JkXG4gICAgICAgICAgICAgICAgICAgIG9uQ29tcGxldGU9e3RoaXMub25Mb2dpbkNsaWNrfVxuICAgICAgICAgICAgICAgICAgICBvbkxvZ2luQ2xpY2s9e3RoaXMub25Mb2dpbkNsaWNrfVxuICAgICAgICAgICAgICAgICAgICBvblNlcnZlckNvbmZpZ0NoYW5nZT17dGhpcy5vblNlcnZlckNvbmZpZ0NoYW5nZX1cbiAgICAgICAgICAgICAgICAgICAgey4uLnRoaXMuZ2V0U2VydmVyUHJvcGVydGllcygpfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICApO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuc3RhdGUudmlldyA9PT0gVmlld3MuTE9HSU4pIHtcbiAgICAgICAgICAgIGNvbnN0IHNob3dQYXNzd29yZFJlc2V0ID0gU2V0dGluZ3NTdG9yZS5nZXRWYWx1ZShVSUZlYXR1cmUuUGFzc3dvcmRSZXNldCk7XG4gICAgICAgICAgICB2aWV3ID0gKFxuICAgICAgICAgICAgICAgIDxMb2dpblxuICAgICAgICAgICAgICAgICAgICBpc1N5bmNpbmc9e3RoaXMuc3RhdGUucGVuZGluZ0luaXRpYWxTeW5jfVxuICAgICAgICAgICAgICAgICAgICBvbkxvZ2dlZEluPXt0aGlzLm9uVXNlckNvbXBsZXRlZExvZ2luRmxvd31cbiAgICAgICAgICAgICAgICAgICAgb25SZWdpc3RlckNsaWNrPXt0aGlzLm9uUmVnaXN0ZXJDbGlja31cbiAgICAgICAgICAgICAgICAgICAgZmFsbGJhY2tIc1VybD17dGhpcy5nZXRGYWxsYmFja0hzVXJsKCl9XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHREZXZpY2VEaXNwbGF5TmFtZT17dGhpcy5wcm9wcy5kZWZhdWx0RGV2aWNlRGlzcGxheU5hbWV9XG4gICAgICAgICAgICAgICAgICAgIG9uRm9yZ290UGFzc3dvcmRDbGljaz17c2hvd1Bhc3N3b3JkUmVzZXQgPyB0aGlzLm9uRm9yZ290UGFzc3dvcmRDbGljayA6IHVuZGVmaW5lZH1cbiAgICAgICAgICAgICAgICAgICAgb25TZXJ2ZXJDb25maWdDaGFuZ2U9e3RoaXMub25TZXJ2ZXJDb25maWdDaGFuZ2V9XG4gICAgICAgICAgICAgICAgICAgIGZyYWdtZW50QWZ0ZXJMb2dpbj17ZnJhZ21lbnRBZnRlckxvZ2lufVxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0VXNlcm5hbWU9e3RoaXMucHJvcHMuc3RhcnRpbmdGcmFnbWVudFF1ZXJ5UGFyYW1zLmRlZmF1bHRVc2VybmFtZSBhcyBzdHJpbmd9XG4gICAgICAgICAgICAgICAgICAgIHsuLi50aGlzLmdldFNlcnZlclByb3BlcnRpZXMoKX1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnN0YXRlLnZpZXcgPT09IFZpZXdzLlNPRlRfTE9HT1VUKSB7XG4gICAgICAgICAgICB2aWV3ID0gKFxuICAgICAgICAgICAgICAgIDxTb2Z0TG9nb3V0XG4gICAgICAgICAgICAgICAgICAgIHJlYWxRdWVyeVBhcmFtcz17dGhpcy5wcm9wcy5yZWFsUXVlcnlQYXJhbXN9XG4gICAgICAgICAgICAgICAgICAgIG9uVG9rZW5Mb2dpbkNvbXBsZXRlZD17dGhpcy5wcm9wcy5vblRva2VuTG9naW5Db21wbGV0ZWR9XG4gICAgICAgICAgICAgICAgICAgIGZyYWdtZW50QWZ0ZXJMb2dpbj17ZnJhZ21lbnRBZnRlckxvZ2lufVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbG9nZ2VyLmVycm9yKGBVbmtub3duIHZpZXcgJHt0aGlzLnN0YXRlLnZpZXd9YCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gPEVycm9yQm91bmRhcnk+XG4gICAgICAgICAgICB7IHZpZXcgfVxuICAgICAgICA8L0Vycm9yQm91bmRhcnk+O1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTG9nZ2VkSW4oKTogYm9vbGVhbiB7XG4gICAgLy8gSlJTOiBNYXliZSB3ZSBzaG91bGQgbW92ZSB0aGUgc3RlcCB0aGF0IHdyaXRlcyB0aGlzIHRvIHRoZSB3aW5kb3cgb3V0IG9mXG4gICAgLy8gYGVsZW1lbnQtd2ViYCBhbmQgaW50byB0aGlzIGZpbGU/IEJldHRlciB5ZXQsIHdlIHNob3VsZCBwcm9iYWJseSBjcmVhdGUgYVxuICAgIC8vIHN0b3JlIHRvIGhvbGQgdGhpcyBzdGF0ZS5cbiAgICAvLyBTZWUgYWxzbyBodHRwczovL2dpdGh1Yi5jb20vdmVjdG9yLWltL2VsZW1lbnQtd2ViL2lzc3Vlcy8xNTAzNC5cbiAgICBjb25zdCBhcHAgPSB3aW5kb3cubWF0cml4Q2hhdDtcbiAgICByZXR1cm4gYXBwICYmIChhcHAgYXMgTWF0cml4Q2hhdCkuc3RhdGUudmlldyA9PT0gVmlld3MuTE9HR0VEX0lOO1xufVxuIl19