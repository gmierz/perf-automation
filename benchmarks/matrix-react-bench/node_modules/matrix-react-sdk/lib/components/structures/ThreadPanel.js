"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ThreadPanelHeaderFilterOptionItem = exports.ThreadPanelHeader = exports.ThreadFilterType = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _thread = require("matrix-js-sdk/src/models/thread");

var _eventTimelineSet = require("matrix-js-sdk/src/models/event-timeline-set");

var _BaseCard = _interopRequireDefault(require("../views/right_panel/BaseCard"));

var _MatrixClientContext = _interopRequireDefault(require("../../contexts/MatrixClientContext"));

var _languageHandler = require("../../languageHandler");

var _ContextMenuButton = require("../../accessibility/context_menu/ContextMenuButton");

var _ContextMenu = _interopRequireWildcard(require("./ContextMenu"));

var _RoomContext = _interopRequireWildcard(require("../../contexts/RoomContext"));

var _TimelinePanel = _interopRequireDefault(require("./TimelinePanel"));

var _Layout = require("../../settings/enums/Layout");

var _useEventEmitter = require("../../hooks/useEventEmitter");

var _EventTile = require("../views/rooms/EventTile");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

let ThreadFilterType;
exports.ThreadFilterType = ThreadFilterType;

(function (ThreadFilterType) {
  ThreadFilterType[ThreadFilterType["My"] = 0] = "My";
  ThreadFilterType[ThreadFilterType["All"] = 1] = "All";
})(ThreadFilterType || (exports.ThreadFilterType = ThreadFilterType = {}));

const useFilteredThreadsTimelinePanel = ({
  threads,
  room,
  filterOption,
  userId,
  updateTimeline
}) => {
  const timelineSet = (0, _react.useMemo)(() => new _eventTimelineSet.EventTimelineSet(null, {
    timelineSupport: true,
    unstableClientRelationAggregation: true,
    pendingEvents: false
  }), []);
  const buildThreadList = (0, _react.useCallback)(function (timelineSet) {
    timelineSet.resetLiveTimeline("");
    Array.from(threads).forEach(([, thread]) => {
      if (filterOption !== ThreadFilterType.My || thread.hasCurrentUserParticipated) {
        timelineSet.addLiveEvent(thread.rootEvent);
      }
    });
    updateTimeline();
  }, [filterOption, threads, updateTimeline]);
  (0, _react.useEffect)(() => {
    buildThreadList(timelineSet);
  }, [timelineSet, buildThreadList]);
  (0, _useEventEmitter.useEventEmitter)(room, _thread.ThreadEvent.Update, () => {
    buildThreadList(timelineSet);
  });
  (0, _useEventEmitter.useEventEmitter)(room, _thread.ThreadEvent.New, () => {
    buildThreadList(timelineSet);
  });
  return timelineSet;
};

const ThreadPanelHeaderFilterOptionItem = ({
  label,
  description,
  onClick,
  isSelected
}) => {
  return /*#__PURE__*/_react.default.createElement(_ContextMenu.MenuItemRadio, {
    active: isSelected,
    className: "mx_ThreadPanel_Header_FilterOptionItem",
    onClick: onClick
  }, /*#__PURE__*/_react.default.createElement("span", null, label), /*#__PURE__*/_react.default.createElement("span", null, description));
};

exports.ThreadPanelHeaderFilterOptionItem = ThreadPanelHeaderFilterOptionItem;

const ThreadPanelHeader = ({
  filterOption,
  setFilterOption
}) => {
  const [menuDisplayed, button, openMenu, closeMenu] = (0, _ContextMenu.useContextMenu)();
  const options = [{
    label: (0, _languageHandler._t)("My threads"),
    description: (0, _languageHandler._t)("Shows all threads you've participated in"),
    key: ThreadFilterType.My
  }, {
    label: (0, _languageHandler._t)("All threads"),
    description: (0, _languageHandler._t)('Shows all threads from current room'),
    key: ThreadFilterType.All
  }];
  const value = options.find(option => option.key === filterOption);
  const contextMenuOptions = options.map(opt => /*#__PURE__*/_react.default.createElement(ThreadPanelHeaderFilterOptionItem, {
    key: opt.key,
    label: opt.label,
    description: opt.description,
    onClick: () => {
      setFilterOption(opt.key);
      closeMenu();
    },
    isSelected: opt === value
  }));
  const contextMenu = menuDisplayed ? /*#__PURE__*/_react.default.createElement(_ContextMenu.default, {
    top: 0,
    right: 25,
    onFinished: closeMenu,
    chevronFace: _ContextMenu.ChevronFace.Top,
    mountAsChild: true
  }, contextMenuOptions) : null;
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_ThreadPanel__header"
  }, /*#__PURE__*/_react.default.createElement("span", null, (0, _languageHandler._t)("Threads")), /*#__PURE__*/_react.default.createElement(_ContextMenuButton.ContextMenuButton, {
    className: "mx_ThreadPanel_dropdown",
    inputRef: button,
    isExpanded: menuDisplayed,
    onClick: () => menuDisplayed ? closeMenu() : openMenu()
  }, `${(0, _languageHandler._t)('Show:')} ${value.label}`), contextMenu);
};

exports.ThreadPanelHeader = ThreadPanelHeader;

const EmptyThread = ({
  filterOption,
  showAllThreadsCallback
}) => {
  return /*#__PURE__*/_react.default.createElement("aside", {
    className: "mx_ThreadPanel_empty"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_ThreadPanel_largeIcon"
  }), /*#__PURE__*/_react.default.createElement("h2", null, (0, _languageHandler._t)("Keep discussions organised with threads")), /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Threads help you keep conversations on-topic and easily " + "track them over time. Create the first one by using the " + "\"Reply in thread\" button on a message.")), /*#__PURE__*/_react.default.createElement("p", null, filterOption === ThreadFilterType.My ? /*#__PURE__*/_react.default.createElement("button", {
    onClick: showAllThreadsCallback
  }, (0, _languageHandler._t)("Show all threads")) : /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, "\xA0")));
};

const ThreadPanel = ({
  roomId,
  onClose,
  permalinkCreator
}) => {
  const mxClient = (0, _react.useContext)(_MatrixClientContext.default);
  const roomContext = (0, _react.useContext)(_RoomContext.default);
  const room = mxClient.getRoom(roomId);
  const [filterOption, setFilterOption] = (0, _react.useState)(ThreadFilterType.All);
  const ref = (0, _react.useRef)();
  const filteredTimelineSet = useFilteredThreadsTimelinePanel({
    threads: room.threads,
    room,
    filterOption,
    userId: mxClient.getUserId(),
    updateTimeline: () => {
      var _ref$current;

      return (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.refreshTimeline();
    }
  });
  return /*#__PURE__*/_react.default.createElement(_RoomContext.default.Provider, {
    value: _objectSpread(_objectSpread({}, roomContext), {}, {
      timelineRenderingType: _RoomContext.TimelineRenderingType.ThreadsList,
      liveTimeline: filteredTimelineSet.getLiveTimeline(),
      showHiddenEventsInTimeline: true
    })
  }, /*#__PURE__*/_react.default.createElement(_BaseCard.default, {
    header: /*#__PURE__*/_react.default.createElement(ThreadPanelHeader, {
      filterOption: filterOption,
      setFilterOption: setFilterOption
    }),
    className: "mx_ThreadPanel",
    onClose: onClose,
    withoutScrollContainer: true
  }, /*#__PURE__*/_react.default.createElement(_TimelinePanel.default, {
    ref: ref,
    showReadReceipts: false // No RR support in thread's MVP
    ,
    manageReadReceipts: false // No RR support in thread's MVP
    ,
    manageReadMarkers: false // No RM support in thread's MVP
    ,
    sendReadReceiptOnLoad: false // No RR support in thread's MVP
    ,
    timelineSet: filteredTimelineSet,
    showUrlPreview: true,
    empty: /*#__PURE__*/_react.default.createElement(EmptyThread, {
      filterOption: filterOption,
      showAllThreadsCallback: () => setFilterOption(ThreadFilterType.All)
    }),
    alwaysShowTimestamps: true,
    layout: _Layout.Layout.Group,
    hideThreadedMessages: false,
    hidden: false,
    showReactions: true,
    className: "mx_RoomView_messagePanel mx_GroupLayout",
    membersLoaded: true,
    permalinkCreator: permalinkCreator,
    tileShape: _EventTile.TileShape.ThreadPanel,
    disableGrouping: true
  })));
};

var _default = ThreadPanel;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,