"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _MatrixClientPeg = require("../../MatrixClientPeg");

var _Modal = _interopRequireDefault(require("../../Modal"));

var _languageHandler = require("../../languageHandler");

var _HomePage = _interopRequireDefault(require("./HomePage"));

var _replaceableComponent = require("../../utils/replaceableComponent");

var _event = require("matrix-js-sdk/src/models/event");

var _roomMember = require("matrix-js-sdk/src/models/room-member");

var _ErrorDialog = _interopRequireDefault(require("../views/dialogs/ErrorDialog"));

var _MainSplit = _interopRequireDefault(require("./MainSplit"));

var _RightPanel = _interopRequireDefault(require("./RightPanel"));

var _Spinner = _interopRequireDefault(require("../views/elements/Spinner"));

var _dec, _class;

let UserView = (_dec = (0, _replaceableComponent.replaceableComponent)("structures.UserView"), _dec(_class = class UserView extends _react.default.Component {
  constructor(props) {
    super(props);
    this.state = {
      loading: true
    };
  }

  componentDidMount() {
    if (this.props.userId) {
      this.loadProfileInfo();
    }
  }

  componentDidUpdate(prevProps) {
    // XXX: We shouldn't need to null check the userId here, but we declare
    // it as optional and MatrixChat sometimes fires in a way which results
    // in an NPE when we try to update the profile info.
    if (prevProps.userId !== this.props.userId && this.props.userId) {
      this.loadProfileInfo();
    }
  }

  async loadProfileInfo() {
    const cli = _MatrixClientPeg.MatrixClientPeg.get();

    this.setState({
      loading: true
    });
    let profileInfo;

    try {
      profileInfo = await cli.getProfileInfo(this.props.userId);
    } catch (err) {
      _Modal.default.createTrackedDialog((0, _languageHandler._t)('Could not load user profile'), '', _ErrorDialog.default, {
        title: (0, _languageHandler._t)('Could not load user profile'),
        description: err && err.message ? err.message : (0, _languageHandler._t)("Operation failed")
      });

      this.setState({
        loading: false
      });
      return;
    }

    const fakeEvent = new _event.MatrixEvent({
      type: "m.room.member",
      content: profileInfo
    });
    const member = new _roomMember.RoomMember(null, this.props.userId);
    member.setMembershipEvent(fakeEvent);
    this.setState({
      member,
      loading: false
    });
  }

  render() {
    if (this.state.loading) {
      return /*#__PURE__*/_react.default.createElement(_Spinner.default, null);
    } else if (this.state.member) {
      const panel = /*#__PURE__*/_react.default.createElement(_RightPanel.default, {
        member: this.state.member,
        resizeNotifier: this.props.resizeNotifier
      });

      return /*#__PURE__*/_react.default.createElement(_MainSplit.default, {
        panel: panel,
        resizeNotifier: this.props.resizeNotifier
      }, /*#__PURE__*/_react.default.createElement(_HomePage.default, null));
    } else {
      return /*#__PURE__*/_react.default.createElement("div", null);
    }
  }

}) || _class);
exports.default = UserView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,