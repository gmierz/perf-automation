"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useRoomHierarchy = exports.showRoom = exports.joinRoom = exports.default = exports.HierarchyLevel = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _roomHierarchy = require("matrix-js-sdk/src/room-hierarchy");

var _event = require("matrix-js-sdk/src/@types/event");

var _classnames = _interopRequireDefault(require("classnames"));

var _lodash = require("lodash");

var _partials = require("matrix-js-sdk/src/@types/partials");

var _dispatcher = _interopRequireDefault(require("../../dispatcher/dispatcher"));

var _languageHandler = require("../../languageHandler");

var _AccessibleButton = _interopRequireDefault(require("../views/elements/AccessibleButton"));

var _Spinner = _interopRequireDefault(require("../views/elements/Spinner"));

var _SearchBox = _interopRequireDefault(require("./SearchBox"));

var _RoomAvatar = _interopRequireDefault(require("../views/avatars/RoomAvatar"));

var _StyledCheckbox = _interopRequireDefault(require("../views/elements/StyledCheckbox"));

var _BaseAvatar = _interopRequireDefault(require("../views/avatars/BaseAvatar"));

var _Media = require("../../customisations/Media");

var _InfoTooltip = _interopRequireDefault(require("../views/elements/InfoTooltip"));

var _TextWithTooltip = _interopRequireDefault(require("../views/elements/TextWithTooltip"));

var _useStateToggle = require("../../hooks/useStateToggle");

var _SpaceStore = require("../../stores/spaces/SpaceStore");

var _AccessibleTooltipButton = _interopRequireDefault(require("../views/elements/AccessibleTooltipButton"));

var _HtmlUtils = require("../../HtmlUtils");

var _useDispatcher = require("../../hooks/useDispatcher");

var _actions = require("../../dispatcher/actions");

var _Keyboard = require("../../Keyboard");

var _RovingTabIndex = require("../../accessibility/RovingTabIndex");

var _RoomDirectory = require("./RoomDirectory");

var _MatrixClientContext = _interopRequireDefault(require("../../contexts/MatrixClientContext"));

var _useEventEmitter = require("../../hooks/useEventEmitter");

var _RoomUpgrade = require("../../utils/RoomUpgrade");

var _RoomViewStore = _interopRequireDefault(require("../../stores/RoomViewStore"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const Tile = ({
  room,
  suggested,
  selected,
  hasPermissions,
  onToggleClick,
  onViewRoomClick,
  onJoinRoomClick,
  numChildRooms,
  children
}) => {
  var _room$aliases, _joinedRoom$currentSt, _joinedRoom$currentSt2, _joinedRoom$currentSt3;

  const cli = (0, _react.useContext)(_MatrixClientContext.default);
  const [joinedRoom, setJoinedRoom] = (0, _react.useState)(() => {
    const cliRoom = cli.getRoom(room.room_id);
    return (cliRoom === null || cliRoom === void 0 ? void 0 : cliRoom.getMyMembership()) === "join" ? cliRoom : null;
  });
  const joinedRoomName = (0, _useEventEmitter.useEventEmitterState)(joinedRoom, "Room.name", room => room === null || room === void 0 ? void 0 : room.name);
  const name = joinedRoomName || room.name || room.canonical_alias || ((_room$aliases = room.aliases) === null || _room$aliases === void 0 ? void 0 : _room$aliases[0]) || (room.room_type === _event.RoomType.Space ? (0, _languageHandler._t)("Unnamed Space") : (0, _languageHandler._t)("Unnamed Room"));
  const [showChildren, toggleShowChildren] = (0, _useStateToggle.useStateToggle)(true);
  const [onFocus, isActive, ref] = (0, _RovingTabIndex.useRovingTabIndex)();
  const [busy, setBusy] = (0, _react.useState)(false);

  const onPreviewClick = ev => {
    ev.preventDefault();
    ev.stopPropagation();
    onViewRoomClick();
  };

  const onJoinClick = async ev => {
    setBusy(true);
    ev.preventDefault();
    ev.stopPropagation();
    onJoinRoomClick().then(() => (0, _RoomUpgrade.awaitRoomDownSync)(cli, room.room_id)).then(setJoinedRoom).finally(() => {
      setBusy(false);
    });
  };

  let button;

  if (busy) {
    button = /*#__PURE__*/_react.default.createElement(_AccessibleTooltipButton.default, {
      disabled: true,
      onClick: onJoinClick,
      kind: "primary_outline",
      onFocus: onFocus,
      tabIndex: isActive ? 0 : -1,
      title: (0, _languageHandler._t)("Joining")
    }, /*#__PURE__*/_react.default.createElement(_Spinner.default, {
      w: 24,
      h: 24
    }));
  } else if (joinedRoom) {
    button = /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      onClick: onPreviewClick,
      kind: "primary_outline",
      onFocus: onFocus,
      tabIndex: isActive ? 0 : -1
    }, (0, _languageHandler._t)("View"));
  } else {
    button = /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      onClick: onJoinClick,
      kind: "primary",
      onFocus: onFocus,
      tabIndex: isActive ? 0 : -1
    }, (0, _languageHandler._t)("Join"));
  }

  let checkbox;

  if (onToggleClick) {
    if (hasPermissions) {
      checkbox = /*#__PURE__*/_react.default.createElement(_StyledCheckbox.default, {
        checked: !!selected,
        onChange: onToggleClick,
        tabIndex: isActive ? 0 : -1
      });
    } else {
      checkbox = /*#__PURE__*/_react.default.createElement(_TextWithTooltip.default, {
        tooltip: (0, _languageHandler._t)("You don't have permission"),
        onClick: ev => {
          ev.stopPropagation();
        }
      }, /*#__PURE__*/_react.default.createElement(_StyledCheckbox.default, {
        disabled: true,
        tabIndex: isActive ? 0 : -1
      }));
    }
  }

  let avatar;

  if (joinedRoom) {
    avatar = /*#__PURE__*/_react.default.createElement(_RoomAvatar.default, {
      room: joinedRoom,
      width: 20,
      height: 20
    });
  } else {
    avatar = /*#__PURE__*/_react.default.createElement(_BaseAvatar.default, {
      name: name,
      idName: room.room_id,
      url: room.avatar_url ? (0, _Media.mediaFromMxc)(room.avatar_url).getSquareThumbnailHttp(20) : null,
      width: 20,
      height: 20
    });
  }

  let description = (0, _languageHandler._t)("%(count)s members", {
    count: room.num_joined_members
  });

  if (numChildRooms !== undefined) {
    description += " · " + (0, _languageHandler._t)("%(count)s rooms", {
      count: numChildRooms
    });
  }

  const topic = (joinedRoom === null || joinedRoom === void 0 ? void 0 : (_joinedRoom$currentSt = joinedRoom.currentState) === null || _joinedRoom$currentSt === void 0 ? void 0 : (_joinedRoom$currentSt2 = _joinedRoom$currentSt.getStateEvents(_event.EventType.RoomTopic, "")) === null || _joinedRoom$currentSt2 === void 0 ? void 0 : (_joinedRoom$currentSt3 = _joinedRoom$currentSt2.getContent()) === null || _joinedRoom$currentSt3 === void 0 ? void 0 : _joinedRoom$currentSt3.topic) || room.topic;

  if (topic) {
    description += " · " + topic;
  }

  let joinedSection;

  if (joinedRoom) {
    joinedSection = /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SpaceHierarchy_roomTile_joined"
    }, (0, _languageHandler._t)("Joined"));
  }

  let suggestedSection;

  if (suggested && (!joinedRoom || hasPermissions)) {
    suggestedSection = /*#__PURE__*/_react.default.createElement(_InfoTooltip.default, {
      tooltip: (0, _languageHandler._t)("This room is suggested as a good one to join")
    }, (0, _languageHandler._t)("Suggested"));
  }

  const content = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, avatar, /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_SpaceHierarchy_roomTile_name"
  }, name, joinedSection, suggestedSection), /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_SpaceHierarchy_roomTile_info",
    ref: e => e && (0, _HtmlUtils.linkifyElement)(e),
    onClick: ev => {
      // prevent clicks on links from bubbling up to the room tile
      if (ev.target.tagName === "A") {
        ev.stopPropagation();
      }
    }
  }, description), /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_SpaceHierarchy_actions"
  }, button, checkbox));

  let childToggle;
  let childSection;
  let onKeyDown;

  if (children) {
    // the chevron is purposefully a div rather than a button as it should be ignored for a11y
    childToggle = /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)("mx_SpaceHierarchy_subspace_toggle", {
        mx_SpaceHierarchy_subspace_toggle_shown: showChildren
      }),
      onClick: ev => {
        ev.stopPropagation();
        toggleShowChildren();
      }
    });

    if (showChildren) {
      const onChildrenKeyDown = e => {
        if (e.key === _Keyboard.Key.ARROW_LEFT) {
          var _ref$current;

          e.preventDefault();
          e.stopPropagation();
          (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.focus();
        }
      };

      childSection = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_SpaceHierarchy_subspace_children",
        onKeyDown: onChildrenKeyDown,
        role: "group"
      }, children);
    }

    onKeyDown = e => {
      let handled = false;

      switch (e.key) {
        case _Keyboard.Key.ARROW_LEFT:
          if (showChildren) {
            handled = true;
            toggleShowChildren();
          }

          break;

        case _Keyboard.Key.ARROW_RIGHT:
          handled = true;

          if (showChildren) {
            var _ref$current2, _childSection$querySe;

            const childSection = (_ref$current2 = ref.current) === null || _ref$current2 === void 0 ? void 0 : _ref$current2.nextElementSibling;
            childSection === null || childSection === void 0 ? void 0 : (_childSection$querySe = childSection.querySelector(".mx_SpaceHierarchy_roomTile")) === null || _childSection$querySe === void 0 ? void 0 : _childSection$querySe.focus();
          } else {
            toggleShowChildren();
          }

          break;
      }

      if (handled) {
        e.preventDefault();
        e.stopPropagation();
      }
    };
  }

  return /*#__PURE__*/_react.default.createElement("li", {
    className: "mx_SpaceHierarchy_roomTileWrapper",
    role: "treeitem",
    "aria-expanded": children ? showChildren : undefined
  }, /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
    className: (0, _classnames.default)("mx_SpaceHierarchy_roomTile", {
      mx_SpaceHierarchy_subspace: room.room_type === _event.RoomType.Space,
      mx_SpaceHierarchy_joining: busy
    }),
    onClick: hasPermissions && onToggleClick ? onToggleClick : onPreviewClick,
    onKeyDown: onKeyDown,
    inputRef: ref,
    onFocus: onFocus,
    tabIndex: isActive ? 0 : -1
  }, content, childToggle), childSection);
};

const showRoom = (cli, hierarchy, roomId, roomType) => {
  const room = hierarchy.roomMap.get(roomId); // Don't let the user view a room they won't be able to either peek or join:
  // fail earlier so they don't have to click back to the directory.

  if (cli.isGuest()) {
    if (!room.world_readable && !room.guest_can_join) {
      _dispatcher.default.dispatch({
        action: "require_registration"
      });

      return;
    }
  }

  const roomAlias = (0, _RoomDirectory.getDisplayAliasForRoom)(room) || undefined;

  _dispatcher.default.dispatch({
    action: "view_room",
    should_peek: true,
    _type: "room_directory",
    // instrumentation
    room_alias: roomAlias,
    room_id: room.room_id,
    via_servers: Array.from(hierarchy.viaMap.get(roomId) || []),
    oob_data: {
      avatarUrl: room.avatar_url,
      // XXX: This logic is duplicated from the JS SDK which would normally decide what the name is.
      name: room.name || roomAlias || (0, _languageHandler._t)("Unnamed room"),
      roomType
    }
  });
};

exports.showRoom = showRoom;

const joinRoom = (cli, hierarchy, roomId) => {
  // Don't let the user view a room they won't be able to either peek or join:
  // fail earlier so they don't have to click back to the directory.
  if (cli.isGuest()) {
    _dispatcher.default.dispatch({
      action: "require_registration"
    });

    return;
  }

  const prom = cli.joinRoom(roomId, {
    viaServers: Array.from(hierarchy.viaMap.get(roomId) || [])
  });
  prom.catch(err => {
    _RoomViewStore.default.showJoinRoomError(err, roomId);
  });
  return prom;
};

exports.joinRoom = joinRoom;

const toLocalRoom = (cli, room) => {
  const history = cli.getRoomUpgradeHistory(room.room_id, true);
  const cliRoom = history[history.length - 1];

  if (cliRoom) {
    var _cliRoom$currentState, _cliRoom$currentState2, _cliRoom$currentState3;

    return _objectSpread(_objectSpread({}, room), {}, {
      room_id: cliRoom.roomId,
      room_type: cliRoom.getType(),
      name: cliRoom.name,
      topic: (_cliRoom$currentState = cliRoom.currentState.getStateEvents(_event.EventType.RoomTopic, "")) === null || _cliRoom$currentState === void 0 ? void 0 : _cliRoom$currentState.getContent().topic,
      avatar_url: cliRoom.getMxcAvatarUrl(),
      canonical_alias: cliRoom.getCanonicalAlias(),
      aliases: cliRoom.getAltAliases(),
      world_readable: ((_cliRoom$currentState2 = cliRoom.currentState.getStateEvents(_event.EventType.RoomHistoryVisibility, "")) === null || _cliRoom$currentState2 === void 0 ? void 0 : _cliRoom$currentState2.getContent().history_visibility) === _partials.HistoryVisibility.WorldReadable,
      guest_can_join: ((_cliRoom$currentState3 = cliRoom.currentState.getStateEvents(_event.EventType.RoomGuestAccess, "")) === null || _cliRoom$currentState3 === void 0 ? void 0 : _cliRoom$currentState3.getContent().guest_access) === _partials.GuestAccess.CanJoin,
      num_joined_members: cliRoom.getJoinedMemberCount()
    });
  }

  return room;
};

const HierarchyLevel = ({
  root,
  roomSet,
  hierarchy,
  parents,
  selectedMap,
  onViewRoomClick,
  onJoinRoomClick,
  onToggleClick
}) => {
  const cli = (0, _react.useContext)(_MatrixClientContext.default);
  const space = cli.getRoom(root.room_id);
  const hasPermissions = space === null || space === void 0 ? void 0 : space.currentState.maySendStateEvent(_event.EventType.SpaceChild, cli.getUserId());
  const sortedChildren = (0, _lodash.sortBy)(root.children_state, ev => {
    return (0, _SpaceStore.getChildOrder)(ev.content.order, ev.origin_server_ts, ev.state_key);
  });
  const [subspaces, childRooms] = sortedChildren.reduce((result, ev) => {
    const room = hierarchy.roomMap.get(ev.state_key);

    if (room && roomSet.has(room)) {
      result[room.room_type === _event.RoomType.Space ? 0 : 1].push(toLocalRoom(cli, room));
    }

    return result;
  }, [[], []]);
  const newParents = new Set(parents).add(root.room_id);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, (0, _lodash.uniqBy)(childRooms, "room_id").map(room => {
    var _selectedMap$get;

    return /*#__PURE__*/_react.default.createElement(Tile, {
      key: room.room_id,
      room: room,
      suggested: hierarchy.isSuggested(root.room_id, room.room_id),
      selected: selectedMap === null || selectedMap === void 0 ? void 0 : (_selectedMap$get = selectedMap.get(root.room_id)) === null || _selectedMap$get === void 0 ? void 0 : _selectedMap$get.has(room.room_id),
      onViewRoomClick: () => onViewRoomClick(room.room_id, room.room_type),
      onJoinRoomClick: () => onJoinRoomClick(room.room_id),
      hasPermissions: hasPermissions,
      onToggleClick: onToggleClick ? () => onToggleClick(root.room_id, room.room_id) : undefined
    });
  }), subspaces.filter(room => !newParents.has(room.room_id)).map(space => {
    var _selectedMap$get2;

    return /*#__PURE__*/_react.default.createElement(Tile, {
      key: space.room_id,
      room: space,
      numChildRooms: space.children_state.filter(ev => {
        const room = hierarchy.roomMap.get(ev.state_key);
        return room && roomSet.has(room) && !room.room_type;
      }).length,
      suggested: hierarchy.isSuggested(root.room_id, space.room_id),
      selected: selectedMap === null || selectedMap === void 0 ? void 0 : (_selectedMap$get2 = selectedMap.get(root.room_id)) === null || _selectedMap$get2 === void 0 ? void 0 : _selectedMap$get2.has(space.room_id),
      onViewRoomClick: () => onViewRoomClick(space.room_id, _event.RoomType.Space),
      onJoinRoomClick: () => onJoinRoomClick(space.room_id),
      hasPermissions: hasPermissions,
      onToggleClick: onToggleClick ? () => onToggleClick(root.room_id, space.room_id) : undefined
    }, /*#__PURE__*/_react.default.createElement(HierarchyLevel, {
      root: space,
      roomSet: roomSet,
      hierarchy: hierarchy,
      parents: newParents,
      selectedMap: selectedMap,
      onViewRoomClick: onViewRoomClick,
      onJoinRoomClick: onJoinRoomClick,
      onToggleClick: onToggleClick
    }));
  }));
};

exports.HierarchyLevel = HierarchyLevel;
const INITIAL_PAGE_SIZE = 20;

const useRoomHierarchy = space => {
  const [rooms, setRooms] = (0, _react.useState)([]);
  const [hierarchy, setHierarchy] = (0, _react.useState)();
  const resetHierarchy = (0, _react.useCallback)(() => {
    const hierarchy = new _roomHierarchy.RoomHierarchy(space, INITIAL_PAGE_SIZE);
    hierarchy.load().then(() => {
      if (space !== hierarchy.root) return; // discard stale results

      setRooms(hierarchy.rooms);
    });
    setHierarchy(hierarchy);
  }, [space]);
  (0, _react.useEffect)(resetHierarchy, [resetHierarchy]);
  (0, _useDispatcher.useDispatcher)(_dispatcher.default, payload => {
    if (payload.action === _actions.Action.UpdateSpaceHierarchy) {
      setRooms([]); // TODO

      resetHierarchy();
    }
  });
  const loadMore = (0, _react.useCallback)(async pageSize => {
    if (hierarchy.loading || !hierarchy.canLoadMore || hierarchy.noSupport) return;
    await hierarchy.load(pageSize);
    setRooms(hierarchy.rooms);
  }, [hierarchy]);
  const loading = (hierarchy === null || hierarchy === void 0 ? void 0 : hierarchy.loading) ?? true;
  return {
    loading,
    rooms,
    hierarchy,
    loadMore
  };
};

exports.useRoomHierarchy = useRoomHierarchy;

const useIntersectionObserver = callback => {
  const handleObserver = entries => {
    const target = entries[0];

    if (target.isIntersecting) {
      callback();
    }
  };

  const observerRef = (0, _react.useRef)();
  return element => {
    if (observerRef.current) {
      observerRef.current.disconnect();
    } else if (element) {
      observerRef.current = new IntersectionObserver(handleObserver, {
        root: element.parentElement,
        rootMargin: "0px 0px 600px 0px"
      });
    }

    if (observerRef.current && element) {
      observerRef.current.observe(element);
    }
  };
};

const ManageButtons = ({
  hierarchy,
  selected,
  setSelected,
  setError
}) => {
  const cli = (0, _react.useContext)(_MatrixClientContext.default);
  const [removing, setRemoving] = (0, _react.useState)(false);
  const [saving, setSaving] = (0, _react.useState)(false);
  const selectedRelations = Array.from(selected.keys()).flatMap(parentId => {
    return [...selected.get(parentId).values()].map(childId => [parentId, childId]);
  });
  const selectionAllSuggested = selectedRelations.every(([parentId, childId]) => {
    return hierarchy.isSuggested(parentId, childId);
  });
  const disabled = !selectedRelations.length || removing || saving;
  let Button = _AccessibleButton.default;
  let props = {};

  if (!selectedRelations.length) {
    Button = _AccessibleTooltipButton.default;
    props = {
      tooltip: (0, _languageHandler._t)("Select a room below first"),
      yOffset: -40
    };
  }

  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(Button, (0, _extends2.default)({}, props, {
    onClick: async () => {
      setRemoving(true);

      try {
        const userId = cli.getUserId();

        for (const [parentId, childId] of selectedRelations) {
          await cli.sendStateEvent(parentId, _event.EventType.SpaceChild, {}, childId); // remove the child->parent relation too, if we have permission to.

          const childRoom = cli.getRoom(childId);
          const parentRelation = childRoom === null || childRoom === void 0 ? void 0 : childRoom.currentState.getStateEvents(_event.EventType.SpaceParent, parentId);

          if (childRoom !== null && childRoom !== void 0 && childRoom.currentState.maySendStateEvent(_event.EventType.SpaceParent, userId) && Array.isArray(parentRelation === null || parentRelation === void 0 ? void 0 : parentRelation.getContent().via)) {
            await cli.sendStateEvent(childId, _event.EventType.SpaceParent, {}, parentId);
          }

          hierarchy.removeRelation(parentId, childId);
        }
      } catch (e) {
        setError((0, _languageHandler._t)("Failed to remove some rooms. Try again later"));
      }

      setRemoving(false);
      setSelected(new Map());
    },
    kind: "danger_outline",
    disabled: disabled
  }), removing ? (0, _languageHandler._t)("Removing...") : (0, _languageHandler._t)("Remove")), /*#__PURE__*/_react.default.createElement(Button, (0, _extends2.default)({}, props, {
    onClick: async () => {
      setSaving(true);

      try {
        for (const [parentId, childId] of selectedRelations) {
          var _hierarchy$getRelatio;

          const suggested = !selectionAllSuggested;
          const existingContent = (_hierarchy$getRelatio = hierarchy.getRelation(parentId, childId)) === null || _hierarchy$getRelatio === void 0 ? void 0 : _hierarchy$getRelatio.content;
          if (!existingContent || existingContent.suggested === suggested) continue;

          const content = _objectSpread(_objectSpread({}, existingContent), {}, {
            suggested: !selectionAllSuggested
          });

          await cli.sendStateEvent(parentId, _event.EventType.SpaceChild, content, childId); // mutate the local state to save us having to refetch the world

          existingContent.suggested = content.suggested;
        }
      } catch (e) {
        setError("Failed to update some suggestions. Try again later");
      }

      setSaving(false);
      setSelected(new Map());
    },
    kind: "primary_outline",
    disabled: disabled
  }), saving ? (0, _languageHandler._t)("Saving...") : selectionAllSuggested ? (0, _languageHandler._t)("Mark as not suggested") : (0, _languageHandler._t)("Mark as suggested")));
};

const SpaceHierarchy = ({
  space,
  initialText = "",
  showRoom,
  additionalButtons
}) => {
  const cli = (0, _react.useContext)(_MatrixClientContext.default);
  const [query, setQuery] = (0, _react.useState)(initialText);
  const [selected, setSelected] = (0, _react.useState)(new Map()); // Map<parentId, Set<childId>>

  const {
    loading,
    rooms,
    hierarchy,
    loadMore
  } = useRoomHierarchy(space);
  const filteredRoomSet = (0, _react.useMemo)(() => {
    if (!(rooms !== null && rooms !== void 0 && rooms.length)) return new Set();
    const lcQuery = query.toLowerCase().trim();
    if (!lcQuery) return new Set(rooms);
    const directMatches = rooms.filter(r => {
      var _r$name, _r$topic;

      return ((_r$name = r.name) === null || _r$name === void 0 ? void 0 : _r$name.toLowerCase().includes(lcQuery)) || ((_r$topic = r.topic) === null || _r$topic === void 0 ? void 0 : _r$topic.toLowerCase().includes(lcQuery));
    }); // Walk back up the tree to find all parents of the direct matches to show their place in the hierarchy

    const visited = new Set();
    const queue = [...directMatches.map(r => r.room_id)];

    while (queue.length) {
      var _hierarchy$backRefs$g;

      const roomId = queue.pop();
      visited.add(roomId);
      (_hierarchy$backRefs$g = hierarchy.backRefs.get(roomId)) === null || _hierarchy$backRefs$g === void 0 ? void 0 : _hierarchy$backRefs$g.forEach(parentId => {
        if (!visited.has(parentId)) {
          queue.push(parentId);
        }
      });
    }

    return new Set(rooms.filter(r => visited.has(r.room_id)));
  }, [rooms, hierarchy, query]);
  const [error, setError] = (0, _react.useState)("");
  const loaderRef = useIntersectionObserver(loadMore);

  if (!loading && hierarchy.noSupport) {
    return /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Your server does not support showing space hierarchies."));
  }

  const onKeyDown = (ev, state) => {
    if (ev.key === _Keyboard.Key.ARROW_DOWN && ev.currentTarget.classList.contains("mx_SpaceHierarchy_search")) {
      var _state$refs$, _state$refs$$current;

      (_state$refs$ = state.refs[0]) === null || _state$refs$ === void 0 ? void 0 : (_state$refs$$current = _state$refs$.current) === null || _state$refs$$current === void 0 ? void 0 : _state$refs$$current.focus();
    }
  };

  const onToggleClick = (parentId, childId) => {
    setError("");

    if (!selected.has(parentId)) {
      setSelected(new Map(selected.set(parentId, new Set([childId]))));
      return;
    }

    const parentSet = selected.get(parentId);

    if (!parentSet.has(childId)) {
      setSelected(new Map(selected.set(parentId, new Set([...parentSet, childId]))));
      return;
    }

    parentSet.delete(childId);
    setSelected(new Map(selected.set(parentId, new Set(parentSet))));
  };

  return /*#__PURE__*/_react.default.createElement(_RovingTabIndex.RovingTabIndexProvider, {
    onKeyDown: onKeyDown,
    handleHomeEnd: true,
    handleUpDown: true
  }, ({
    onKeyDownHandler
  }) => {
    let content;

    if (loading && !rooms.length) {
      content = /*#__PURE__*/_react.default.createElement(_Spinner.default, null);
    } else {
      const hasPermissions = (space === null || space === void 0 ? void 0 : space.getMyMembership()) === "join" && space.currentState.maySendStateEvent(_event.EventType.SpaceChild, cli.getUserId());
      let results;

      if (filteredRoomSet.size) {
        results = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(HierarchyLevel, {
          root: hierarchy.roomMap.get(space.roomId),
          roomSet: filteredRoomSet,
          hierarchy: hierarchy,
          parents: new Set(),
          selectedMap: selected,
          onToggleClick: hasPermissions ? onToggleClick : undefined,
          onViewRoomClick: (roomId, roomType) => showRoom(cli, hierarchy, roomId, roomType),
          onJoinRoomClick: roomId => joinRoom(cli, hierarchy, roomId)
        }));
      } else if (!hierarchy.canLoadMore) {
        results = /*#__PURE__*/_react.default.createElement("div", {
          className: "mx_SpaceHierarchy_noResults"
        }, /*#__PURE__*/_react.default.createElement("h3", null, (0, _languageHandler._t)("No results found")), /*#__PURE__*/_react.default.createElement("div", null, (0, _languageHandler._t)("You may want to try a different search or check for typos.")));
      }

      let loader;

      if (hierarchy.canLoadMore) {
        loader = /*#__PURE__*/_react.default.createElement("div", {
          ref: loaderRef
        }, /*#__PURE__*/_react.default.createElement(_Spinner.default, null));
      }

      content = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_SpaceHierarchy_listHeader"
      }, /*#__PURE__*/_react.default.createElement("h4", null, query.trim() ? (0, _languageHandler._t)("Results") : (0, _languageHandler._t)("Rooms and spaces")), /*#__PURE__*/_react.default.createElement("span", null, additionalButtons, hasPermissions && /*#__PURE__*/_react.default.createElement(ManageButtons, {
        hierarchy: hierarchy,
        selected: selected,
        setSelected: setSelected,
        setError: setError
      }))), error && /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_SpaceHierarchy_error"
      }, error), /*#__PURE__*/_react.default.createElement("ul", {
        className: "mx_SpaceHierarchy_list",
        onKeyDown: onKeyDownHandler,
        role: "tree",
        "aria-label": (0, _languageHandler._t)("Space")
      }, results), loader);
    }

    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_SearchBox.default, {
      className: "mx_SpaceHierarchy_search mx_textinput_icon mx_textinput_search",
      placeholder: (0, _languageHandler._t)("Search names and descriptions"),
      onSearch: setQuery,
      autoFocus: true,
      initialValue: initialText,
      onKeyDown: onKeyDownHandler
    }), content);
  });
};

var _default = SpaceHierarchy;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3N0cnVjdHVyZXMvU3BhY2VIaWVyYXJjaHkudHN4Il0sIm5hbWVzIjpbIlRpbGUiLCJyb29tIiwic3VnZ2VzdGVkIiwic2VsZWN0ZWQiLCJoYXNQZXJtaXNzaW9ucyIsIm9uVG9nZ2xlQ2xpY2siLCJvblZpZXdSb29tQ2xpY2siLCJvbkpvaW5Sb29tQ2xpY2siLCJudW1DaGlsZFJvb21zIiwiY2hpbGRyZW4iLCJjbGkiLCJNYXRyaXhDbGllbnRDb250ZXh0Iiwiam9pbmVkUm9vbSIsInNldEpvaW5lZFJvb20iLCJjbGlSb29tIiwiZ2V0Um9vbSIsInJvb21faWQiLCJnZXRNeU1lbWJlcnNoaXAiLCJqb2luZWRSb29tTmFtZSIsIm5hbWUiLCJjYW5vbmljYWxfYWxpYXMiLCJhbGlhc2VzIiwicm9vbV90eXBlIiwiUm9vbVR5cGUiLCJTcGFjZSIsInNob3dDaGlsZHJlbiIsInRvZ2dsZVNob3dDaGlsZHJlbiIsIm9uRm9jdXMiLCJpc0FjdGl2ZSIsInJlZiIsImJ1c3kiLCJzZXRCdXN5Iiwib25QcmV2aWV3Q2xpY2siLCJldiIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwib25Kb2luQ2xpY2siLCJ0aGVuIiwiZmluYWxseSIsImJ1dHRvbiIsImNoZWNrYm94IiwiYXZhdGFyIiwiYXZhdGFyX3VybCIsImdldFNxdWFyZVRodW1ibmFpbEh0dHAiLCJkZXNjcmlwdGlvbiIsImNvdW50IiwibnVtX2pvaW5lZF9tZW1iZXJzIiwidW5kZWZpbmVkIiwidG9waWMiLCJjdXJyZW50U3RhdGUiLCJnZXRTdGF0ZUV2ZW50cyIsIkV2ZW50VHlwZSIsIlJvb21Ub3BpYyIsImdldENvbnRlbnQiLCJqb2luZWRTZWN0aW9uIiwic3VnZ2VzdGVkU2VjdGlvbiIsImNvbnRlbnQiLCJlIiwidGFyZ2V0IiwidGFnTmFtZSIsImNoaWxkVG9nZ2xlIiwiY2hpbGRTZWN0aW9uIiwib25LZXlEb3duIiwibXhfU3BhY2VIaWVyYXJjaHlfc3Vic3BhY2VfdG9nZ2xlX3Nob3duIiwib25DaGlsZHJlbktleURvd24iLCJrZXkiLCJLZXkiLCJBUlJPV19MRUZUIiwiY3VycmVudCIsImZvY3VzIiwiaGFuZGxlZCIsIkFSUk9XX1JJR0hUIiwibmV4dEVsZW1lbnRTaWJsaW5nIiwicXVlcnlTZWxlY3RvciIsIm14X1NwYWNlSGllcmFyY2h5X3N1YnNwYWNlIiwibXhfU3BhY2VIaWVyYXJjaHlfam9pbmluZyIsInNob3dSb29tIiwiaGllcmFyY2h5Iiwicm9vbUlkIiwicm9vbVR5cGUiLCJyb29tTWFwIiwiZ2V0IiwiaXNHdWVzdCIsIndvcmxkX3JlYWRhYmxlIiwiZ3Vlc3RfY2FuX2pvaW4iLCJkaXMiLCJkaXNwYXRjaCIsImFjdGlvbiIsInJvb21BbGlhcyIsInNob3VsZF9wZWVrIiwiX3R5cGUiLCJyb29tX2FsaWFzIiwidmlhX3NlcnZlcnMiLCJBcnJheSIsImZyb20iLCJ2aWFNYXAiLCJvb2JfZGF0YSIsImF2YXRhclVybCIsImpvaW5Sb29tIiwicHJvbSIsInZpYVNlcnZlcnMiLCJjYXRjaCIsImVyciIsIlJvb21WaWV3U3RvcmUiLCJzaG93Sm9pblJvb21FcnJvciIsInRvTG9jYWxSb29tIiwiaGlzdG9yeSIsImdldFJvb21VcGdyYWRlSGlzdG9yeSIsImxlbmd0aCIsImdldFR5cGUiLCJnZXRNeGNBdmF0YXJVcmwiLCJnZXRDYW5vbmljYWxBbGlhcyIsImdldEFsdEFsaWFzZXMiLCJSb29tSGlzdG9yeVZpc2liaWxpdHkiLCJoaXN0b3J5X3Zpc2liaWxpdHkiLCJIaXN0b3J5VmlzaWJpbGl0eSIsIldvcmxkUmVhZGFibGUiLCJSb29tR3Vlc3RBY2Nlc3MiLCJndWVzdF9hY2Nlc3MiLCJHdWVzdEFjY2VzcyIsIkNhbkpvaW4iLCJnZXRKb2luZWRNZW1iZXJDb3VudCIsIkhpZXJhcmNoeUxldmVsIiwicm9vdCIsInJvb21TZXQiLCJwYXJlbnRzIiwic2VsZWN0ZWRNYXAiLCJzcGFjZSIsIm1heVNlbmRTdGF0ZUV2ZW50IiwiU3BhY2VDaGlsZCIsImdldFVzZXJJZCIsInNvcnRlZENoaWxkcmVuIiwiY2hpbGRyZW5fc3RhdGUiLCJvcmRlciIsIm9yaWdpbl9zZXJ2ZXJfdHMiLCJzdGF0ZV9rZXkiLCJzdWJzcGFjZXMiLCJjaGlsZFJvb21zIiwicmVkdWNlIiwicmVzdWx0IiwiaGFzIiwicHVzaCIsIm5ld1BhcmVudHMiLCJTZXQiLCJhZGQiLCJtYXAiLCJpc1N1Z2dlc3RlZCIsImZpbHRlciIsIklOSVRJQUxfUEFHRV9TSVpFIiwidXNlUm9vbUhpZXJhcmNoeSIsInJvb21zIiwic2V0Um9vbXMiLCJzZXRIaWVyYXJjaHkiLCJyZXNldEhpZXJhcmNoeSIsIlJvb21IaWVyYXJjaHkiLCJsb2FkIiwiZGVmYXVsdERpc3BhdGNoZXIiLCJwYXlsb2FkIiwiQWN0aW9uIiwiVXBkYXRlU3BhY2VIaWVyYXJjaHkiLCJsb2FkTW9yZSIsInBhZ2VTaXplIiwibG9hZGluZyIsImNhbkxvYWRNb3JlIiwibm9TdXBwb3J0IiwidXNlSW50ZXJzZWN0aW9uT2JzZXJ2ZXIiLCJjYWxsYmFjayIsImhhbmRsZU9ic2VydmVyIiwiZW50cmllcyIsImlzSW50ZXJzZWN0aW5nIiwib2JzZXJ2ZXJSZWYiLCJlbGVtZW50IiwiZGlzY29ubmVjdCIsIkludGVyc2VjdGlvbk9ic2VydmVyIiwicGFyZW50RWxlbWVudCIsInJvb3RNYXJnaW4iLCJvYnNlcnZlIiwiTWFuYWdlQnV0dG9ucyIsInNldFNlbGVjdGVkIiwic2V0RXJyb3IiLCJyZW1vdmluZyIsInNldFJlbW92aW5nIiwic2F2aW5nIiwic2V0U2F2aW5nIiwic2VsZWN0ZWRSZWxhdGlvbnMiLCJrZXlzIiwiZmxhdE1hcCIsInBhcmVudElkIiwidmFsdWVzIiwiY2hpbGRJZCIsInNlbGVjdGlvbkFsbFN1Z2dlc3RlZCIsImV2ZXJ5IiwiZGlzYWJsZWQiLCJCdXR0b24iLCJBY2Nlc3NpYmxlQnV0dG9uIiwicHJvcHMiLCJBY2Nlc3NpYmxlVG9vbHRpcEJ1dHRvbiIsInRvb2x0aXAiLCJ5T2Zmc2V0IiwidXNlcklkIiwic2VuZFN0YXRlRXZlbnQiLCJjaGlsZFJvb20iLCJwYXJlbnRSZWxhdGlvbiIsIlNwYWNlUGFyZW50IiwiaXNBcnJheSIsInZpYSIsInJlbW92ZVJlbGF0aW9uIiwiTWFwIiwiZXhpc3RpbmdDb250ZW50IiwiZ2V0UmVsYXRpb24iLCJTcGFjZUhpZXJhcmNoeSIsImluaXRpYWxUZXh0IiwiYWRkaXRpb25hbEJ1dHRvbnMiLCJxdWVyeSIsInNldFF1ZXJ5IiwiZmlsdGVyZWRSb29tU2V0IiwibGNRdWVyeSIsInRvTG93ZXJDYXNlIiwidHJpbSIsImRpcmVjdE1hdGNoZXMiLCJyIiwiaW5jbHVkZXMiLCJ2aXNpdGVkIiwicXVldWUiLCJwb3AiLCJiYWNrUmVmcyIsImZvckVhY2giLCJlcnJvciIsImxvYWRlclJlZiIsInN0YXRlIiwiQVJST1dfRE9XTiIsImN1cnJlbnRUYXJnZXQiLCJjbGFzc0xpc3QiLCJjb250YWlucyIsInJlZnMiLCJzZXQiLCJwYXJlbnRTZXQiLCJkZWxldGUiLCJvbktleURvd25IYW5kbGVyIiwicmVzdWx0cyIsInNpemUiLCJsb2FkZXIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFnQkE7O0FBY0E7O0FBQ0E7O0FBR0E7O0FBQ0E7O0FBQ0E7O0FBRUE7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRUE7O0FBQ0E7Ozs7Ozs7Ozs7QUFvQkEsTUFBTUEsSUFBMEIsR0FBRyxDQUFDO0FBQ2hDQyxFQUFBQSxJQURnQztBQUVoQ0MsRUFBQUEsU0FGZ0M7QUFHaENDLEVBQUFBLFFBSGdDO0FBSWhDQyxFQUFBQSxjQUpnQztBQUtoQ0MsRUFBQUEsYUFMZ0M7QUFNaENDLEVBQUFBLGVBTmdDO0FBT2hDQyxFQUFBQSxlQVBnQztBQVFoQ0MsRUFBQUEsYUFSZ0M7QUFTaENDLEVBQUFBO0FB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LGlCQUNaLDZCQUFDLGFBQUQ7QUFDSSxRQUFBLFNBQVMsRUFBRXlFLFNBRGY7QUFFSSxRQUFBLFFBQVEsRUFBRTFFLFFBRmQ7QUFHSSxRQUFBLFdBQVcsRUFBRStLLFdBSGpCO0FBSUksUUFBQSxRQUFRLEVBQUVDO0FBSmQsUUFIUixDQUZKLENBRE0sRUFlSmdELEtBQUssaUJBQUk7QUFBSyxRQUFBLFNBQVMsRUFBQztBQUFmLFNBQ0xBLEtBREssQ0FmTCxlQWtCTjtBQUNJLFFBQUEsU0FBUyxFQUFDLHdCQURkO0FBRUksUUFBQSxTQUFTLEVBQUVXLGdCQUZmO0FBR0ksUUFBQSxJQUFJLEVBQUMsTUFIVDtBQUlJLHNCQUFZLHlCQUFHLE9BQUg7QUFKaEIsU0FNTUMsT0FOTixDQWxCTSxFQTBCSkUsTUExQkksQ0FBVjtBQTRCSDs7QUFFRCx3QkFBTyx5RUFDSCw2QkFBQyxrQkFBRDtBQUNJLE1BQUEsU0FBUyxFQUFDLGdFQURkO0FBRUksTUFBQSxXQUFXLEVBQUUseUJBQUcsK0JBQUgsQ0FGakI7QUFHSSxNQUFBLFFBQVEsRUFBRTNCLFFBSGQ7QUFJSSxNQUFBLFNBQVMsRUFBRSxJQUpmO0FBS0ksTUFBQSxZQUFZLEVBQUVILFdBTGxCO0FBTUksTUFBQSxTQUFTLEVBQUUyQjtBQU5mLE1BREcsRUFVRHRMLE9BVkMsQ0FBUDtBQVlILEdBL0VFLENBQVA7QUFpRkgsQ0F0SkQ7O2VBd0plMEosYyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5Db3B5cmlnaHQgMjAyMSBUaGUgTWF0cml4Lm9yZyBGb3VuZGF0aW9uIEMuSS5DLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbmltcG9ydCBSZWFjdCwge1xuICAgIERpc3BhdGNoLFxuICAgIEtleWJvYXJkRXZlbnQsXG4gICAgS2V5Ym9hcmRFdmVudEhhbmRsZXIsXG4gICAgUmVhY3ROb2RlLFxuICAgIFNldFN0YXRlQWN0aW9uLFxuICAgIHVzZUNhbGxiYWNrLFxuICAgIHVzZUNvbnRleHQsXG4gICAgdXNlRWZmZWN0LFxuICAgIHVzZU1lbW8sXG4gICAgdXNlUmVmLFxuICAgIHVzZVN0YXRlLFxufSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IFJvb20gfSBmcm9tIFwibWF0cml4LWpzLXNkay9zcmMvbW9kZWxzL3Jvb21cIjtcbmltcG9ydCB7IFJvb21IaWVyYXJjaHkgfSBmcm9tIFwibWF0cml4LWpzLXNkay9zcmMvcm9vbS1oaWVyYXJjaHlcIjtcbmltcG9ydCB7IEV2ZW50VHlwZSwgUm9vbVR5cGUgfSBmcm9tIFwibWF0cml4LWpzLXNkay9zcmMvQHR5cGVzL2V2ZW50XCI7XG5pbXBvcnQgeyBJSGllcmFyY2h5UmVsYXRpb24sIElIaWVyYXJjaHlSb29tIH0gZnJvbSBcIm1hdHJpeC1qcy1zZGsvc3JjL0B0eXBlcy9zcGFjZXNcIjtcbmltcG9ydCB7IE1hdHJpeENsaWVudCB9IGZyb20gXCJtYXRyaXgtanMtc2RrL3NyYy9tYXRyaXhcIjtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gXCJjbGFzc25hbWVzXCI7XG5pbXBvcnQgeyBzb3J0QnksIHVuaXFCeSB9IGZyb20gXCJsb2Rhc2hcIjtcbmltcG9ydCB7IEd1ZXN0QWNjZXNzLCBIaXN0b3J5VmlzaWJpbGl0eSB9IGZyb20gXCJtYXRyaXgtanMtc2RrL3NyYy9AdHlwZXMvcGFydGlhbHNcIjtcblxuaW1wb3J0IGRpcyBmcm9tIFwiLi4vLi4vZGlzcGF0Y2hlci9kaXNwYXRjaGVyXCI7XG5pbXBvcnQgZGVmYXVsdERpc3BhdGNoZXIgZnJvbSBcIi4uLy4uL2Rpc3BhdGNoZXIvZGlzcGF0Y2hlclwiO1xuaW1wb3J0IHsgX3QgfSBmcm9tIFwiLi4vLi4vbGFuZ3VhZ2VIYW5kbGVyXCI7XG5pbXBvcnQgQWNjZXNzaWJsZUJ1dHRvbiwgeyBCdXR0b25FdmVudCB9IGZyb20gXCIuLi92aWV3cy9lbGVtZW50cy9BY2Nlc3NpYmxlQnV0dG9uXCI7XG5pbXBvcnQgU3Bpbm5lciBmcm9tIFwiLi4vdmlld3MvZWxlbWVudHMvU3Bpbm5lclwiO1xuaW1wb3J0IFNlYXJjaEJveCBmcm9tIFwiLi9TZWFyY2hCb3hcIjtcbmltcG9ydCBSb29tQXZhdGFyIGZyb20gXCIuLi92aWV3cy9hdmF0YXJzL1Jvb21BdmF0YXJcIjtcbmltcG9ydCBTdHlsZWRDaGVja2JveCBmcm9tIFwiLi4vdmlld3MvZWxlbWVudHMvU3R5bGVkQ2hlY2tib3hcIjtcbmltcG9ydCBCYXNlQXZhdGFyIGZyb20gXCIuLi92aWV3cy9hdmF0YXJzL0Jhc2VBdmF0YXJcIjtcbmltcG9ydCB7IG1lZGlhRnJvbU14YyB9IGZyb20gXCIuLi8uLi9jdXN0b21pc2F0aW9ucy9NZWRpYVwiO1xuaW1wb3J0IEluZm9Ub29sdGlwIGZyb20gXCIuLi92aWV3cy9lbGVtZW50cy9JbmZvVG9vbHRpcFwiO1xuaW1wb3J0IFRleHRXaXRoVG9vbHRpcCBmcm9tIFwiLi4vdmlld3MvZWxlbWVudHMvVGV4dFdpdGhUb29sdGlwXCI7XG5pbXBvcnQgeyB1c2VTdGF0ZVRvZ2dsZSB9IGZyb20gXCIuLi8uLi9ob29rcy91c2VTdGF0ZVRvZ2dsZVwiO1xuaW1wb3J0IHsgZ2V0Q2hpbGRPcmRlciB9IGZyb20gXCIuLi8uLi9zdG9yZXMvc3BhY2VzL1NwYWNlU3RvcmVcIjtcbmltcG9ydCBBY2Nlc3NpYmxlVG9vbHRpcEJ1dHRvbiBmcm9tIFwiLi4vdmlld3MvZWxlbWVudHMvQWNjZXNzaWJsZVRvb2x0aXBCdXR0b25cIjtcbmltcG9ydCB7IGxpbmtpZnlFbGVtZW50IH0gZnJvbSBcIi4uLy4uL0h0bWxVdGlsc1wiO1xuaW1wb3J0IHsgdXNlRGlzcGF0Y2hlciB9IGZyb20gXCIuLi8uLi9ob29rcy91c2VEaXNwYXRjaGVyXCI7XG5pbXBvcnQgeyBBY3Rpb24gfSBmcm9tIFwiLi4vLi4vZGlzcGF0Y2hlci9hY3Rpb25zXCI7XG5pbXBvcnQgeyBLZXkgfSBmcm9tIFwiLi4vLi4vS2V5Ym9hcmRcIjtcbmltcG9ydCB7IElTdGF0ZSwgUm92aW5nVGFiSW5kZXhQcm92aWRlciwgdXNlUm92aW5nVGFiSW5kZXggfSBmcm9tIFwiLi4vLi4vYWNjZXNzaWJpbGl0eS9Sb3ZpbmdUYWJJbmRleFwiO1xuaW1wb3J0IHsgZ2V0RGlzcGxheUFsaWFzRm9yUm9vbSB9IGZyb20gXCIuL1Jvb21EaXJlY3RvcnlcIjtcbmltcG9ydCBNYXRyaXhDbGllbnRDb250ZXh0IGZyb20gXCIuLi8uLi9jb250ZXh0cy9NYXRyaXhDbGllbnRDb250ZXh0XCI7XG5pbXBvcnQgeyB1c2VFdmVudEVtaXR0ZXJTdGF0ZSB9IGZyb20gXCIuLi8uLi9ob29rcy91c2VFdmVudEVtaXR0ZXJcIjtcbmltcG9ydCB7IElPT0JEYXRhIH0gZnJvbSBcIi4uLy4uL3N0b3Jlcy9UaHJlZXBpZEludml0ZVN0b3JlXCI7XG5pbXBvcnQgeyBhd2FpdFJvb21Eb3duU3luYyB9IGZyb20gXCIuLi8uLi91dGlscy9Sb29tVXBncmFkZVwiO1xuaW1wb3J0IFJvb21WaWV3U3RvcmUgZnJvbSBcIi4uLy4uL3N0b3Jlcy9Sb29tVmlld1N0b3JlXCI7XG5cbmludGVyZmFjZSBJUHJvcHMge1xuICAgIHNwYWNlOiBSb29tO1xuICAgIGluaXRpYWxUZXh0Pzogc3RyaW5nO1xuICAgIGFkZGl0aW9uYWxCdXR0b25zPzogUmVhY3ROb2RlO1xuICAgIHNob3dSb29tKGNsaTogTWF0cml4Q2xpZW50LCBoaWVyYXJjaHk6IFJvb21IaWVyYXJjaHksIHJvb21JZDogc3RyaW5nLCByb29tVHlwZT86IFJvb21UeXBlKTogdm9pZDtcbn1cblxuaW50ZXJmYWNlIElUaWxlUHJvcHMge1xuICAgIHJvb206IElIaWVyYXJjaHlSb29tO1xuICAgIHN1Z2dlc3RlZD86IGJvb2xlYW47XG4gICAgc2VsZWN0ZWQ/OiBib29sZWFuO1xuICAgIG51bUNoaWxkUm9vbXM/OiBudW1iZXI7XG4gICAgaGFzUGVybWlzc2lvbnM/OiBib29sZWFuO1xuICAgIG9uVmlld1Jvb21DbGljaygpOiB2b2lkO1xuICAgIG9uSm9pblJvb21DbGljaygpOiBQcm9taXNlPHVua25vd24+O1xuICAgIG9uVG9nZ2xlQ2xpY2s/KCk6IHZvaWQ7XG59XG5cbmNvbnN0IFRpbGU6IFJlYWN0LkZDPElUaWxlUHJvcHM+ID0gKHtcbiAgICByb29tLFxuICAgIHN1Z2dlc3RlZCxcbiAgICBzZWxlY3RlZCxcbiAgICBoYXNQZXJtaXNzaW9ucyxcbiAgICBvblRvZ2dsZUNsaWNrLFxuICAgIG9uVmlld1Jvb21DbGljayxcbiAgICBvbkpvaW5Sb29tQ2xpY2ssXG4gICAgbnVtQ2hpbGRSb29tcyxcbiAgICBjaGlsZHJlbixcbn0pID0+IHtcbiAgICBjb25zdCBjbGkgPSB1c2VDb250ZXh0KE1hdHJpeENsaWVudENvbnRleHQpO1xuICAgIGNvbnN0IFtqb2luZWRSb29tLCBzZXRKb2luZWRSb29tXSA9IHVzZVN0YXRlPFJvb20+KCgpID0+IHtcbiAgICAgICAgY29uc3QgY2xpUm9vbSA9IGNsaS5nZXRSb29tKHJvb20ucm9vbV9pZCk7XG4gICAgICAgIHJldHVybiBjbGlSb29tPy5nZXRNeU1lbWJlcnNoaXAoKSA9PT0gXCJqb2luXCIgPyBjbGlSb29tIDogbnVsbDtcbiAgICB9KTtcbiAgICBjb25zdCBqb2luZWRSb29tTmFtZSA9IHVzZUV2ZW50RW1pdHRlclN0YXRlKGpvaW5lZFJvb20sIFwiUm9vbS5uYW1lXCIsIHJvb20gPT4gcm9vbT8ubmFtZSk7XG4gICAgY29uc3QgbmFtZSA9IGpvaW5lZFJvb21OYW1lIHx8IHJvb20ubmFtZSB8fCByb29tLmNhbm9uaWNhbF9hbGlhcyB8fCByb29tLmFsaWFzZXM/LlswXVxuICAgICAgICB8fCAocm9vbS5yb29tX3R5cGUgPT09IFJvb21UeXBlLlNwYWNlID8gX3QoXCJVbm5hbWVkIFNwYWNlXCIpIDogX3QoXCJVbm5hbWVkIFJvb21cIikpO1xuXG4gICAgY29uc3QgW3Nob3dDaGlsZHJlbiwgdG9nZ2xlU2hvd0NoaWxkcmVuXSA9IHVzZVN0YXRlVG9nZ2xlKHRydWUpO1xuICAgIGNvbnN0IFtvbkZvY3VzLCBpc0FjdGl2ZSwgcmVmXSA9IHVzZVJvdmluZ1RhYkluZGV4KCk7XG4gICAgY29uc3QgW2J1c3ksIHNldEJ1c3ldID0gdXNlU3RhdGUoZmFsc2UpO1xuXG4gICAgY29uc3Qgb25QcmV2aWV3Q2xpY2sgPSAoZXY6IEJ1dHRvbkV2ZW50KSA9PiB7XG4gICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICBvblZpZXdSb29tQ2xpY2soKTtcbiAgICB9O1xuICAgIGNvbnN0IG9uSm9pbkNsaWNrID0gYXN5bmMgKGV2OiBCdXR0b25FdmVudCkgPT4ge1xuICAgICAgICBzZXRCdXN5KHRydWUpO1xuICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgb25Kb2luUm9vbUNsaWNrKCkudGhlbigoKSA9PiBhd2FpdFJvb21Eb3duU3luYyhjbGksIHJvb20ucm9vbV9pZCkpLnRoZW4oc2V0Sm9pbmVkUm9vbSkuZmluYWxseSgoKSA9PiB7XG4gICAgICAgICAgICBzZXRCdXN5KGZhbHNlKTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIGxldCBidXR0b247XG4gICAgaWYgKGJ1c3kpIHtcbiAgICAgICAgYnV0dG9uID0gPEFjY2Vzc2libGVUb29sdGlwQnV0dG9uXG4gICAgICAgICAgICBkaXNhYmxlZD17dHJ1ZX1cbiAgICAgICAgICAgIG9uQ2xpY2s9e29uSm9pbkNsaWNrfVxuICAgICAgICAgICAga2luZD1cInByaW1hcnlfb3V0bGluZVwiXG4gICAgICAgICAgICBvbkZvY3VzPXtvbkZvY3VzfVxuICAgICAgICAgICAgdGFiSW5kZXg9e2lzQWN0aXZlID8gMCA6IC0xfVxuICAgICAgICAgICAgdGl0bGU9e190KFwiSm9pbmluZ1wiKX1cbiAgICAgICAgPlxuICAgICAgICAgICAgPFNwaW5uZXIgdz17MjR9IGg9ezI0fSAvPlxuICAgICAgICA8L0FjY2Vzc2libGVUb29sdGlwQnV0dG9uPjtcbiAgICB9IGVsc2UgaWYgKGpvaW5lZFJvb20pIHtcbiAgICAgICAgYnV0dG9uID0gPEFjY2Vzc2libGVCdXR0b25cbiAgICAgICAgICAgIG9uQ2xpY2s9e29uUHJldmlld0NsaWNrfVxuICAgICAgICAgICAga2luZD1cInByaW1hcnlfb3V0bGluZVwiXG4gICAgICAgICAgICBvbkZvY3VzPXtvbkZvY3VzfVxuICAgICAgICAgICAgdGFiSW5kZXg9e2lzQWN0aXZlID8gMCA6IC0xfVxuICAgICAgICA+XG4gICAgICAgICAgICB7IF90KFwiVmlld1wiKSB9XG4gICAgICAgIDwvQWNjZXNzaWJsZUJ1dHRvbj47XG4gICAgfSBlbHNlIHtcbiAgICAgICAgYnV0dG9uID0gPEFjY2Vzc2libGVCdXR0b25cbiAgICAgICAgICAgIG9uQ2xpY2s9e29uSm9pbkNsaWNrfVxuICAgICAgICAgICAga2luZD1cInByaW1hcnlcIlxuICAgICAgICAgICAgb25Gb2N1cz17b25Gb2N1c31cbiAgICAgICAgICAgIHRhYkluZGV4PXtpc0FjdGl2ZSA/IDAgOiAtMX1cbiAgICAgICAgPlxuICAgICAgICAgICAgeyBfdChcIkpvaW5cIikgfVxuICAgICAgICA8L0FjY2Vzc2libGVCdXR0b24+O1xuICAgIH1cblxuICAgIGxldCBjaGVja2JveDtcbiAgICBpZiAob25Ub2dnbGVDbGljaykge1xuICAgICAgICBpZiAoaGFzUGVybWlzc2lvbnMpIHtcbiAgICAgICAgICAgIGNoZWNrYm94ID0gPFN0eWxlZENoZWNrYm94IGNoZWNrZWQ9eyEhc2VsZWN0ZWR9IG9uQ2hhbmdlPXtvblRvZ2dsZUNsaWNrfSB0YWJJbmRleD17aXNBY3RpdmUgPyAwIDogLTF9IC8+O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2hlY2tib3ggPSA8VGV4dFdpdGhUb29sdGlwXG4gICAgICAgICAgICAgICAgdG9vbHRpcD17X3QoXCJZb3UgZG9uJ3QgaGF2ZSBwZXJtaXNzaW9uXCIpfVxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9e2V2ID0+IHsgZXYuc3RvcFByb3BhZ2F0aW9uKCk7IH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPFN0eWxlZENoZWNrYm94IGRpc2FibGVkPXt0cnVlfSB0YWJJbmRleD17aXNBY3RpdmUgPyAwIDogLTF9IC8+XG4gICAgICAgICAgICA8L1RleHRXaXRoVG9vbHRpcD47XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgYXZhdGFyO1xuICAgIGlmIChqb2luZWRSb29tKSB7XG4gICAgICAgIGF2YXRhciA9IDxSb29tQXZhdGFyIHJvb209e2pvaW5lZFJvb219IHdpZHRoPXsyMH0gaGVpZ2h0PXsyMH0gLz47XG4gICAgfSBlbHNlIHtcbiAgICAgICAgYXZhdGFyID0gPEJhc2VBdmF0YXJcbiAgICAgICAgICAgIG5hbWU9e25hbWV9XG4gICAgICAgICAgICBpZE5hbWU9e3Jvb20ucm9vbV9pZH1cbiAgICAgICAgICAgIHVybD17cm9vbS5hdmF0YXJfdXJsID8gbWVkaWFGcm9tTXhjKHJvb20uYXZhdGFyX3VybCkuZ2V0U3F1YXJlVGh1bWJuYWlsSHR0cCgyMCkgOiBudWxsfVxuICAgICAgICAgICAgd2lkdGg9ezIwfVxuICAgICAgICAgICAgaGVpZ2h0PXsyMH1cbiAgICAgICAgLz47XG4gICAgfVxuXG4gICAgbGV0IGRlc2NyaXB0aW9uID0gX3QoXCIlKGNvdW50KXMgbWVtYmVyc1wiLCB7IGNvdW50OiByb29tLm51bV9qb2luZWRfbWVtYmVycyB9KTtcbiAgICBpZiAobnVtQ2hpbGRSb29tcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGRlc2NyaXB0aW9uICs9IFwiIMK3IFwiICsgX3QoXCIlKGNvdW50KXMgcm9vbXNcIiwgeyBjb3VudDogbnVtQ2hpbGRSb29tcyB9KTtcbiAgICB9XG5cbiAgICBjb25zdCB0b3BpYyA9IGpvaW5lZFJvb20/LmN1cnJlbnRTdGF0ZT8uZ2V0U3RhdGVFdmVudHMoRXZlbnRUeXBlLlJvb21Ub3BpYywgXCJcIik/LmdldENvbnRlbnQoKT8udG9waWMgfHwgcm9vbS50b3BpYztcbiAgICBpZiAodG9waWMpIHtcbiAgICAgICAgZGVzY3JpcHRpb24gKz0gXCIgwrcgXCIgKyB0b3BpYztcbiAgICB9XG5cbiAgICBsZXQgam9pbmVkU2VjdGlvbjtcbiAgICBpZiAoam9pbmVkUm9vbSkge1xuICAgICAgICBqb2luZWRTZWN0aW9uID0gPGRpdiBjbGFzc05hbWU9XCJteF9TcGFjZUhpZXJhcmNoeV9yb29tVGlsZV9qb2luZWRcIj5cbiAgICAgICAgICAgIHsgX3QoXCJKb2luZWRcIikgfVxuICAgICAgICA8L2Rpdj47XG4gICAgfVxuXG4gICAgbGV0IHN1Z2dlc3RlZFNlY3Rpb247XG4gICAgaWYgKHN1Z2dlc3RlZCAmJiAoIWpvaW5lZFJvb20gfHwgaGFzUGVybWlzc2lvbnMpKSB7XG4gICAgICAgIHN1Z2dlc3RlZFNlY3Rpb24gPSA8SW5mb1Rvb2x0aXAgdG9vbHRpcD17X3QoXCJUaGlzIHJvb20gaXMgc3VnZ2VzdGVkIGFzIGEgZ29vZCBvbmUgdG8gam9pblwiKX0+XG4gICAgICAgICAgICB7IF90KFwiU3VnZ2VzdGVkXCIpIH1cbiAgICAgICAgPC9JbmZvVG9vbHRpcD47XG4gICAgfVxuXG4gICAgY29uc3QgY29udGVudCA9IDxSZWFjdC5GcmFnbWVudD5cbiAgICAgICAgeyBhdmF0YXIgfVxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm14X1NwYWNlSGllcmFyY2h5X3Jvb21UaWxlX25hbWVcIj5cbiAgICAgICAgICAgIHsgbmFtZSB9XG4gICAgICAgICAgICB7IGpvaW5lZFNlY3Rpb24gfVxuICAgICAgICAgICAgeyBzdWdnZXN0ZWRTZWN0aW9uIH1cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPGRpdlxuICAgICAgICAgICAgY2xhc3NOYW1lPVwibXhfU3BhY2VIaWVyYXJjaHlfcm9vbVRpbGVfaW5mb1wiXG4gICAgICAgICAgICByZWY9e2UgPT4gZSAmJiBsaW5raWZ5RWxlbWVudChlKX1cbiAgICAgICAgICAgIG9uQ2xpY2s9e2V2ID0+IHtcbiAgICAgICAgICAgICAgICAvLyBwcmV2ZW50IGNsaWNrcyBvbiBsaW5rcyBmcm9tIGJ1YmJsaW5nIHVwIHRvIHRoZSByb29tIHRpbGVcbiAgICAgICAgICAgICAgICBpZiAoKGV2LnRhcmdldCBhcyBIVE1MRWxlbWVudCkudGFnTmFtZSA9PT0gXCJBXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgICAgeyBkZXNjcmlwdGlvbiB9XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm14X1NwYWNlSGllcmFyY2h5X2FjdGlvbnNcIj5cbiAgICAgICAgICAgIHsgYnV0dG9uIH1cbiAgICAgICAgICAgIHsgY2hlY2tib3ggfVxuICAgICAgICA8L2Rpdj5cbiAgICA8L1JlYWN0LkZyYWdtZW50PjtcblxuICAgIGxldCBjaGlsZFRvZ2dsZTogSlNYLkVsZW1lbnQ7XG4gICAgbGV0IGNoaWxkU2VjdGlvbjogSlNYLkVsZW1lbnQ7XG4gICAgbGV0IG9uS2V5RG93bjogS2V5Ym9hcmRFdmVudEhhbmRsZXI7XG4gICAgaWYgKGNoaWxkcmVuKSB7XG4gICAgICAgIC8vIHRoZSBjaGV2cm9uIGlzIHB1cnBvc2VmdWxseSBhIGRpdiByYXRoZXIgdGhhbiBhIGJ1dHRvbiBhcyBpdCBzaG91bGQgYmUgaWdub3JlZCBmb3IgYTExeVxuICAgICAgICBjaGlsZFRvZ2dsZSA9IDxkaXZcbiAgICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lcyhcIm14X1NwYWNlSGllcmFyY2h5X3N1YnNwYWNlX3RvZ2dsZVwiLCB7XG4gICAgICAgICAgICAgICAgbXhfU3BhY2VIaWVyYXJjaHlfc3Vic3BhY2VfdG9nZ2xlX3Nob3duOiBzaG93Q2hpbGRyZW4sXG4gICAgICAgICAgICB9KX1cbiAgICAgICAgICAgIG9uQ2xpY2s9e2V2ID0+IHtcbiAgICAgICAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICB0b2dnbGVTaG93Q2hpbGRyZW4oKTtcbiAgICAgICAgICAgIH19XG4gICAgICAgIC8+O1xuXG4gICAgICAgIGlmIChzaG93Q2hpbGRyZW4pIHtcbiAgICAgICAgICAgIGNvbnN0IG9uQ2hpbGRyZW5LZXlEb3duID0gKGUpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZS5rZXkgPT09IEtleS5BUlJPV19MRUZUKSB7XG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgcmVmLmN1cnJlbnQ/LmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgY2hpbGRTZWN0aW9uID0gPGRpdlxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cIm14X1NwYWNlSGllcmFyY2h5X3N1YnNwYWNlX2NoaWxkcmVuXCJcbiAgICAgICAgICAgICAgICBvbktleURvd249e29uQ2hpbGRyZW5LZXlEb3dufVxuICAgICAgICAgICAgICAgIHJvbGU9XCJncm91cFwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgeyBjaGlsZHJlbiB9XG4gICAgICAgICAgICA8L2Rpdj47XG4gICAgICAgIH1cblxuICAgICAgICBvbktleURvd24gPSAoZSkgPT4ge1xuICAgICAgICAgICAgbGV0IGhhbmRsZWQgPSBmYWxzZTtcblxuICAgICAgICAgICAgc3dpdGNoIChlLmtleSkge1xuICAgICAgICAgICAgICAgIGNhc2UgS2V5LkFSUk9XX0xFRlQ6XG4gICAgICAgICAgICAgICAgICAgIGlmIChzaG93Q2hpbGRyZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9nZ2xlU2hvd0NoaWxkcmVuKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlIEtleS5BUlJPV19SSUdIVDpcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzaG93Q2hpbGRyZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkU2VjdGlvbiA9IHJlZi5jdXJyZW50Py5uZXh0RWxlbWVudFNpYmxpbmc7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZFNlY3Rpb24/LnF1ZXJ5U2VsZWN0b3I8SFRNTERpdkVsZW1lbnQ+KFwiLm14X1NwYWNlSGllcmFyY2h5X3Jvb21UaWxlXCIpPy5mb2N1cygpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9nZ2xlU2hvd0NoaWxkcmVuKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChoYW5kbGVkKSB7XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIDxsaVxuICAgICAgICBjbGFzc05hbWU9XCJteF9TcGFjZUhpZXJhcmNoeV9yb29tVGlsZVdyYXBwZXJcIlxuICAgICAgICByb2xlPVwidHJlZWl0ZW1cIlxuICAgICAgICBhcmlhLWV4cGFuZGVkPXtjaGlsZHJlbiA/IHNob3dDaGlsZHJlbiA6IHVuZGVmaW5lZH1cbiAgICA+XG4gICAgICAgIDxBY2Nlc3NpYmxlQnV0dG9uXG4gICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZXMoXCJteF9TcGFjZUhpZXJhcmNoeV9yb29tVGlsZVwiLCB7XG4gICAgICAgICAgICAgICAgbXhfU3BhY2VIaWVyYXJjaHlfc3Vic3BhY2U6IHJvb20ucm9vbV90eXBlID09PSBSb29tVHlwZS5TcGFjZSxcbiAgICAgICAgICAgICAgICBteF9TcGFjZUhpZXJhcmNoeV9qb2luaW5nOiBidXN5LFxuICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICBvbkNsaWNrPXsoaGFzUGVybWlzc2lvbnMgJiYgb25Ub2dnbGVDbGljaykgPyBvblRvZ2dsZUNsaWNrIDogb25QcmV2aWV3Q2xpY2t9XG4gICAgICAgICAgICBvbktleURvd249e29uS2V5RG93bn1cbiAgICAgICAgICAgIGlucHV0UmVmPXtyZWZ9XG4gICAgICAgICAgICBvbkZvY3VzPXtvbkZvY3VzfVxuICAgICAgICAgICAgdGFiSW5kZXg9e2lzQWN0aXZlID8gMCA6IC0xfVxuICAgICAgICA+XG4gICAgICAgICAgICB7IGNvbnRlbnQgfVxuICAgICAgICAgICAgeyBjaGlsZFRvZ2dsZSB9XG4gICAgICAgIDwvQWNjZXNzaWJsZUJ1dHRvbj5cbiAgICAgICAgeyBjaGlsZFNlY3Rpb24gfVxuICAgIDwvbGk+O1xufTtcblxuZXhwb3J0IGNvbnN0IHNob3dSb29tID0gKGNsaTogTWF0cml4Q2xpZW50LCBoaWVyYXJjaHk6IFJvb21IaWVyYXJjaHksIHJvb21JZDogc3RyaW5nLCByb29tVHlwZT86IFJvb21UeXBlKTogdm9pZCA9PiB7XG4gICAgY29uc3Qgcm9vbSA9IGhpZXJhcmNoeS5yb29tTWFwLmdldChyb29tSWQpO1xuXG4gICAgLy8gRG9uJ3QgbGV0IHRoZSB1c2VyIHZpZXcgYSByb29tIHRoZXkgd29uJ3QgYmUgYWJsZSB0byBlaXRoZXIgcGVlayBvciBqb2luOlxuICAgIC8vIGZhaWwgZWFybGllciBzbyB0aGV5IGRvbid0IGhhdmUgdG8gY2xpY2sgYmFjayB0byB0aGUgZGlyZWN0b3J5LlxuICAgIGlmIChjbGkuaXNHdWVzdCgpKSB7XG4gICAgICAgIGlmICghcm9vbS53b3JsZF9yZWFkYWJsZSAmJiAhcm9vbS5ndWVzdF9jYW5fam9pbikge1xuICAgICAgICAgICAgZGlzLmRpc3BhdGNoKHsgYWN0aW9uOiBcInJlcXVpcmVfcmVnaXN0cmF0aW9uXCIgfSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCByb29tQWxpYXMgPSBnZXREaXNwbGF5QWxpYXNGb3JSb29tKHJvb20pIHx8IHVuZGVmaW5lZDtcbiAgICBkaXMuZGlzcGF0Y2goe1xuICAgICAgICBhY3Rpb246IFwidmlld19yb29tXCIsXG4gICAgICAgIHNob3VsZF9wZWVrOiB0cnVlLFxuICAgICAgICBfdHlwZTogXCJyb29tX2RpcmVjdG9yeVwiLCAvLyBpbnN0cnVtZW50YXRpb25cbiAgICAgICAgcm9vbV9hbGlhczogcm9vbUFsaWFzLFxuICAgICAgICByb29tX2lkOiByb29tLnJvb21faWQsXG4gICAgICAgIHZpYV9zZXJ2ZXJzOiBBcnJheS5mcm9tKGhpZXJhcmNoeS52aWFNYXAuZ2V0KHJvb21JZCkgfHwgW10pLFxuICAgICAgICBvb2JfZGF0YToge1xuICAgICAgICAgICAgYXZhdGFyVXJsOiByb29tLmF2YXRhcl91cmwsXG4gICAgICAgICAgICAvLyBYWFg6IFRoaXMgbG9naWMgaXMgZHVwbGljYXRlZCBmcm9tIHRoZSBKUyBTREsgd2hpY2ggd291bGQgbm9ybWFsbHkgZGVjaWRlIHdoYXQgdGhlIG5hbWUgaXMuXG4gICAgICAgICAgICBuYW1lOiByb29tLm5hbWUgfHwgcm9vbUFsaWFzIHx8IF90KFwiVW5uYW1lZCByb29tXCIpLFxuICAgICAgICAgICAgcm9vbVR5cGUsXG4gICAgICAgIH0gYXMgSU9PQkRhdGEsXG4gICAgfSk7XG59O1xuXG5leHBvcnQgY29uc3Qgam9pblJvb20gPSAoY2xpOiBNYXRyaXhDbGllbnQsIGhpZXJhcmNoeTogUm9vbUhpZXJhcmNoeSwgcm9vbUlkOiBzdHJpbmcpOiBQcm9taXNlPHVua25vd24+ID0+IHtcbiAgICAvLyBEb24ndCBsZXQgdGhlIHVzZXIgdmlldyBhIHJvb20gdGhleSB3b24ndCBiZSBhYmxlIHRvIGVpdGhlciBwZWVrIG9yIGpvaW46XG4gICAgLy8gZmFpbCBlYXJsaWVyIHNvIHRoZXkgZG9uJ3QgaGF2ZSB0byBjbGljayBiYWNrIHRvIHRoZSBkaXJlY3RvcnkuXG4gICAgaWYgKGNsaS5pc0d1ZXN0KCkpIHtcbiAgICAgICAgZGlzLmRpc3BhdGNoKHsgYWN0aW9uOiBcInJlcXVpcmVfcmVnaXN0cmF0aW9uXCIgfSk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBwcm9tID0gY2xpLmpvaW5Sb29tKHJvb21JZCwge1xuICAgICAgICB2aWFTZXJ2ZXJzOiBBcnJheS5mcm9tKGhpZXJhcmNoeS52aWFNYXAuZ2V0KHJvb21JZCkgfHwgW10pLFxuICAgIH0pO1xuXG4gICAgcHJvbS5jYXRjaChlcnIgPT4ge1xuICAgICAgICBSb29tVmlld1N0b3JlLnNob3dKb2luUm9vbUVycm9yKGVyciwgcm9vbUlkKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBwcm9tO1xufTtcblxuaW50ZXJmYWNlIElIaWVyYXJjaHlMZXZlbFByb3BzIHtcbiAgICByb290OiBJSGllcmFyY2h5Um9vbTtcbiAgICByb29tU2V0OiBTZXQ8SUhpZXJhcmNoeVJvb20+O1xuICAgIGhpZXJhcmNoeTogUm9vbUhpZXJhcmNoeTtcbiAgICBwYXJlbnRzOiBTZXQ8c3RyaW5nPjtcbiAgICBzZWxlY3RlZE1hcD86IE1hcDxzdHJpbmcsIFNldDxzdHJpbmc+PjtcbiAgICBvblZpZXdSb29tQ2xpY2socm9vbUlkOiBzdHJpbmcsIHJvb21UeXBlPzogUm9vbVR5cGUpOiB2b2lkO1xuICAgIG9uSm9pblJvb21DbGljayhyb29tSWQ6IHN0cmluZyk6IFByb21pc2U8dW5rbm93bj47XG4gICAgb25Ub2dnbGVDbGljaz8ocGFyZW50SWQ6IHN0cmluZywgY2hpbGRJZDogc3RyaW5nKTogdm9pZDtcbn1cblxuY29uc3QgdG9Mb2NhbFJvb20gPSAoY2xpOiBNYXRyaXhDbGllbnQsIHJvb206IElIaWVyYXJjaHlSb29tKTogSUhpZXJhcmNoeVJvb20gPT4ge1xuICAgIGNvbnN0IGhpc3RvcnkgPSBjbGkuZ2V0Um9vbVVwZ3JhZGVIaXN0b3J5KHJvb20ucm9vbV9pZCwgdHJ1ZSk7XG4gICAgY29uc3QgY2xpUm9vbSA9IGhpc3RvcnlbaGlzdG9yeS5sZW5ndGggLSAxXTtcbiAgICBpZiAoY2xpUm9vbSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4ucm9vbSxcbiAgICAgICAgICAgIHJvb21faWQ6IGNsaVJvb20ucm9vbUlkLFxuICAgICAgICAgICAgcm9vbV90eXBlOiBjbGlSb29tLmdldFR5cGUoKSxcbiAgICAgICAgICAgIG5hbWU6IGNsaVJvb20ubmFtZSxcbiAgICAgICAgICAgIHRvcGljOiBjbGlSb29tLmN1cnJlbnRTdGF0ZS5nZXRTdGF0ZUV2ZW50cyhFdmVudFR5cGUuUm9vbVRvcGljLCBcIlwiKT8uZ2V0Q29udGVudCgpLnRvcGljLFxuICAgICAgICAgICAgYXZhdGFyX3VybDogY2xpUm9vbS5nZXRNeGNBdmF0YXJVcmwoKSxcbiAgICAgICAgICAgIGNhbm9uaWNhbF9hbGlhczogY2xpUm9vbS5nZXRDYW5vbmljYWxBbGlhcygpLFxuICAgICAgICAgICAgYWxpYXNlczogY2xpUm9vbS5nZXRBbHRBbGlhc2VzKCksXG4gICAgICAgICAgICB3b3JsZF9yZWFkYWJsZTogY2xpUm9vbS5jdXJyZW50U3RhdGUuZ2V0U3RhdGVFdmVudHMoRXZlbnRUeXBlLlJvb21IaXN0b3J5VmlzaWJpbGl0eSwgXCJcIik/LmdldENvbnRlbnQoKVxuICAgICAgICAgICAgICAgIC5oaXN0b3J5X3Zpc2liaWxpdHkgPT09IEhpc3RvcnlWaXNpYmlsaXR5LldvcmxkUmVhZGFibGUsXG4gICAgICAgICAgICBndWVzdF9jYW5fam9pbjogY2xpUm9vbS5jdXJyZW50U3RhdGUuZ2V0U3RhdGVFdmVudHMoRXZlbnRUeXBlLlJvb21HdWVzdEFjY2VzcywgXCJcIik/LmdldENvbnRlbnQoKVxuICAgICAgICAgICAgICAgIC5ndWVzdF9hY2Nlc3MgPT09IEd1ZXN0QWNjZXNzLkNhbkpvaW4sXG4gICAgICAgICAgICBudW1fam9pbmVkX21lbWJlcnM6IGNsaVJvb20uZ2V0Sm9pbmVkTWVtYmVyQ291bnQoKSxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gcm9vbTtcbn07XG5cbmV4cG9ydCBjb25zdCBIaWVyYXJjaHlMZXZlbCA9ICh7XG4gICAgcm9vdCxcbiAgICByb29tU2V0LFxuICAgIGhpZXJhcmNoeSxcbiAgICBwYXJlbnRzLFxuICAgIHNlbGVjdGVkTWFwLFxuICAgIG9uVmlld1Jvb21DbGljayxcbiAgICBvbkpvaW5Sb29tQ2xpY2ssXG4gICAgb25Ub2dnbGVDbGljayxcbn06IElIaWVyYXJjaHlMZXZlbFByb3BzKSA9PiB7XG4gICAgY29uc3QgY2xpID0gdXNlQ29udGV4dChNYXRyaXhDbGllbnRDb250ZXh0KTtcbiAgICBjb25zdCBzcGFjZSA9IGNsaS5nZXRSb29tKHJvb3Qucm9vbV9pZCk7XG4gICAgY29uc3QgaGFzUGVybWlzc2lvbnMgPSBzcGFjZT8uY3VycmVudFN0YXRlLm1heVNlbmRTdGF0ZUV2ZW50KEV2ZW50VHlwZS5TcGFjZUNoaWxkLCBjbGkuZ2V0VXNlcklkKCkpO1xuXG4gICAgY29uc3Qgc29ydGVkQ2hpbGRyZW4gPSBzb3J0Qnkocm9vdC5jaGlsZHJlbl9zdGF0ZSwgZXYgPT4ge1xuICAgICAgICByZXR1cm4gZ2V0Q2hpbGRPcmRlcihldi5jb250ZW50Lm9yZGVyLCBldi5vcmlnaW5fc2VydmVyX3RzLCBldi5zdGF0ZV9rZXkpO1xuICAgIH0pO1xuXG4gICAgY29uc3QgW3N1YnNwYWNlcywgY2hpbGRSb29tc10gPSBzb3J0ZWRDaGlsZHJlbi5yZWR1Y2UoKHJlc3VsdCwgZXY6IElIaWVyYXJjaHlSZWxhdGlvbikgPT4ge1xuICAgICAgICBjb25zdCByb29tID0gaGllcmFyY2h5LnJvb21NYXAuZ2V0KGV2LnN0YXRlX2tleSk7XG4gICAgICAgIGlmIChyb29tICYmIHJvb21TZXQuaGFzKHJvb20pKSB7XG4gICAgICAgICAgICByZXN1bHRbcm9vbS5yb29tX3R5cGUgPT09IFJvb21UeXBlLlNwYWNlID8gMCA6IDFdLnB1c2godG9Mb2NhbFJvb20oY2xpLCByb29tKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LCBbW10gYXMgSUhpZXJhcmNoeVJvb21bXSwgW10gYXMgSUhpZXJhcmNoeVJvb21bXV0pO1xuXG4gICAgY29uc3QgbmV3UGFyZW50cyA9IG5ldyBTZXQocGFyZW50cykuYWRkKHJvb3Qucm9vbV9pZCk7XG4gICAgcmV0dXJuIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgICAge1xuICAgICAgICAgICAgdW5pcUJ5KGNoaWxkUm9vbXMsIFwicm9vbV9pZFwiKS5tYXAocm9vbSA9PiAoXG4gICAgICAgICAgICAgICAgPFRpbGVcbiAgICAgICAgICAgICAgICAgICAga2V5PXtyb29tLnJvb21faWR9XG4gICAgICAgICAgICAgICAgICAgIHJvb209e3Jvb219XG4gICAgICAgICAgICAgICAgICAgIHN1Z2dlc3RlZD17aGllcmFyY2h5LmlzU3VnZ2VzdGVkKHJvb3Qucm9vbV9pZCwgcm9vbS5yb29tX2lkKX1cbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWQ9e3NlbGVjdGVkTWFwPy5nZXQocm9vdC5yb29tX2lkKT8uaGFzKHJvb20ucm9vbV9pZCl9XG4gICAgICAgICAgICAgICAgICAgIG9uVmlld1Jvb21DbGljaz17KCkgPT4gb25WaWV3Um9vbUNsaWNrKHJvb20ucm9vbV9pZCwgcm9vbS5yb29tX3R5cGUgYXMgUm9vbVR5cGUpfVxuICAgICAgICAgICAgICAgICAgICBvbkpvaW5Sb29tQ2xpY2s9eygpID0+IG9uSm9pblJvb21DbGljayhyb29tLnJvb21faWQpfVxuICAgICAgICAgICAgICAgICAgICBoYXNQZXJtaXNzaW9ucz17aGFzUGVybWlzc2lvbnN9XG4gICAgICAgICAgICAgICAgICAgIG9uVG9nZ2xlQ2xpY2s9e29uVG9nZ2xlQ2xpY2sgPyAoKSA9PiBvblRvZ2dsZUNsaWNrKHJvb3Qucm9vbV9pZCwgcm9vbS5yb29tX2lkKSA6IHVuZGVmaW5lZH1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgKSlcbiAgICAgICAgfVxuXG4gICAgICAgIHtcbiAgICAgICAgICAgIHN1YnNwYWNlcy5maWx0ZXIocm9vbSA9PiAhbmV3UGFyZW50cy5oYXMocm9vbS5yb29tX2lkKSkubWFwKHNwYWNlID0+IChcbiAgICAgICAgICAgICAgICA8VGlsZVxuICAgICAgICAgICAgICAgICAgICBrZXk9e3NwYWNlLnJvb21faWR9XG4gICAgICAgICAgICAgICAgICAgIHJvb209e3NwYWNlfVxuICAgICAgICAgICAgICAgICAgICBudW1DaGlsZFJvb21zPXtzcGFjZS5jaGlsZHJlbl9zdGF0ZS5maWx0ZXIoZXYgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgcm9vbSA9IGhpZXJhcmNoeS5yb29tTWFwLmdldChldi5zdGF0ZV9rZXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJvb20gJiYgcm9vbVNldC5oYXMocm9vbSkgJiYgIXJvb20ucm9vbV90eXBlO1xuICAgICAgICAgICAgICAgICAgICB9KS5sZW5ndGh9XG4gICAgICAgICAgICAgICAgICAgIHN1Z2dlc3RlZD17aGllcmFyY2h5LmlzU3VnZ2VzdGVkKHJvb3Qucm9vbV9pZCwgc3BhY2Uucm9vbV9pZCl9XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkPXtzZWxlY3RlZE1hcD8uZ2V0KHJvb3Qucm9vbV9pZCk/LmhhcyhzcGFjZS5yb29tX2lkKX1cbiAgICAgICAgICAgICAgICAgICAgb25WaWV3Um9vbUNsaWNrPXsoKSA9PiBvblZpZXdSb29tQ2xpY2soc3BhY2Uucm9vbV9pZCwgUm9vbVR5cGUuU3BhY2UpfVxuICAgICAgICAgICAgICAgICAgICBvbkpvaW5Sb29tQ2xpY2s9eygpID0+IG9uSm9pblJvb21DbGljayhzcGFjZS5yb29tX2lkKX1cbiAgICAgICAgICAgICAgICAgICAgaGFzUGVybWlzc2lvbnM9e2hhc1Blcm1pc3Npb25zfVxuICAgICAgICAgICAgICAgICAgICBvblRvZ2dsZUNsaWNrPXtvblRvZ2dsZUNsaWNrID8gKCkgPT4gb25Ub2dnbGVDbGljayhyb290LnJvb21faWQsIHNwYWNlLnJvb21faWQpIDogdW5kZWZpbmVkfVxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgPEhpZXJhcmNoeUxldmVsXG4gICAgICAgICAgICAgICAgICAgICAgICByb290PXtzcGFjZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJvb21TZXQ9e3Jvb21TZXR9XG4gICAgICAgICAgICAgICAgICAgICAgICBoaWVyYXJjaHk9e2hpZXJhcmNoeX1cbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudHM9e25ld1BhcmVudHN9XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZE1hcD17c2VsZWN0ZWRNYXB9XG4gICAgICAgICAgICAgICAgICAgICAgICBvblZpZXdSb29tQ2xpY2s9e29uVmlld1Jvb21DbGlja31cbiAgICAgICAgICAgICAgICAgICAgICAgIG9uSm9pblJvb21DbGljaz17b25Kb2luUm9vbUNsaWNrfVxuICAgICAgICAgICAgICAgICAgICAgICAgb25Ub2dnbGVDbGljaz17b25Ub2dnbGVDbGlja31cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8L1RpbGU+XG4gICAgICAgICAgICApKVxuICAgICAgICB9XG4gICAgPC9SZWFjdC5GcmFnbWVudD47XG59O1xuXG5jb25zdCBJTklUSUFMX1BBR0VfU0laRSA9IDIwO1xuXG5leHBvcnQgY29uc3QgdXNlUm9vbUhpZXJhcmNoeSA9IChzcGFjZTogUm9vbSk6IHtcbiAgICBsb2FkaW5nOiBib29sZWFuO1xuICAgIHJvb21zOiBJSGllcmFyY2h5Um9vbVtdO1xuICAgIGhpZXJhcmNoeTogUm9vbUhpZXJhcmNoeTtcbiAgICBsb2FkTW9yZShwYWdlU2l6ZT86IG51bWJlcik6IFByb21pc2UgPHZvaWQ+O1xufSA9PiB7XG4gICAgY29uc3QgW3Jvb21zLCBzZXRSb29tc10gPSB1c2VTdGF0ZTxJSGllcmFyY2h5Um9vbVtdPihbXSk7XG4gICAgY29uc3QgW2hpZXJhcmNoeSwgc2V0SGllcmFyY2h5XSA9IHVzZVN0YXRlPFJvb21IaWVyYXJjaHk+KCk7XG5cbiAgICBjb25zdCByZXNldEhpZXJhcmNoeSA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICAgICAgY29uc3QgaGllcmFyY2h5ID0gbmV3IFJvb21IaWVyYXJjaHkoc3BhY2UsIElOSVRJQUxfUEFHRV9TSVpFKTtcbiAgICAgICAgaGllcmFyY2h5LmxvYWQoKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIGlmIChzcGFjZSAhPT0gaGllcmFyY2h5LnJvb3QpIHJldHVybjsgLy8gZGlzY2FyZCBzdGFsZSByZXN1bHRzXG4gICAgICAgICAgICBzZXRSb29tcyhoaWVyYXJjaHkucm9vbXMpO1xuICAgICAgICB9KTtcbiAgICAgICAgc2V0SGllcmFyY2h5KGhpZXJhcmNoeSk7XG4gICAgfSwgW3NwYWNlXSk7XG4gICAgdXNlRWZmZWN0KHJlc2V0SGllcmFyY2h5LCBbcmVzZXRIaWVyYXJjaHldKTtcblxuICAgIHVzZURpc3BhdGNoZXIoZGVmYXVsdERpc3BhdGNoZXIsIChwYXlsb2FkID0+IHtcbiAgICAgICAgaWYgKHBheWxvYWQuYWN0aW9uID09PSBBY3Rpb24uVXBkYXRlU3BhY2VIaWVyYXJjaHkpIHtcbiAgICAgICAgICAgIHNldFJvb21zKFtdKTsgLy8gVE9ET1xuICAgICAgICAgICAgcmVzZXRIaWVyYXJjaHkoKTtcbiAgICAgICAgfVxuICAgIH0pKTtcblxuICAgIGNvbnN0IGxvYWRNb3JlID0gdXNlQ2FsbGJhY2soYXN5bmMgKHBhZ2VTaXplPzogbnVtYmVyKSA9PiB7XG4gICAgICAgIGlmIChoaWVyYXJjaHkubG9hZGluZyB8fCAhaGllcmFyY2h5LmNhbkxvYWRNb3JlIHx8IGhpZXJhcmNoeS5ub1N1cHBvcnQpIHJldHVybjtcbiAgICAgICAgYXdhaXQgaGllcmFyY2h5LmxvYWQocGFnZVNpemUpO1xuICAgICAgICBzZXRSb29tcyhoaWVyYXJjaHkucm9vbXMpO1xuICAgIH0sIFtoaWVyYXJjaHldKTtcblxuICAgIGNvbnN0IGxvYWRpbmcgPSBoaWVyYXJjaHk/LmxvYWRpbmcgPz8gdHJ1ZTtcbiAgICByZXR1cm4geyBsb2FkaW5nLCByb29tcywgaGllcmFyY2h5LCBsb2FkTW9yZSB9O1xufTtcblxuY29uc3QgdXNlSW50ZXJzZWN0aW9uT2JzZXJ2ZXIgPSAoY2FsbGJhY2s6ICgpID0+IHZvaWQpID0+IHtcbiAgICBjb25zdCBoYW5kbGVPYnNlcnZlciA9IChlbnRyaWVzOiBJbnRlcnNlY3Rpb25PYnNlcnZlckVudHJ5W10pID0+IHtcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gZW50cmllc1swXTtcbiAgICAgICAgaWYgKHRhcmdldC5pc0ludGVyc2VjdGluZykge1xuICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBjb25zdCBvYnNlcnZlclJlZiA9IHVzZVJlZjxJbnRlcnNlY3Rpb25PYnNlcnZlcj4oKTtcbiAgICByZXR1cm4gKGVsZW1lbnQ6IEhUTUxEaXZFbGVtZW50KSA9PiB7XG4gICAgICAgIGlmIChvYnNlcnZlclJlZi5jdXJyZW50KSB7XG4gICAgICAgICAgICBvYnNlcnZlclJlZi5jdXJyZW50LmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgfSBlbHNlIGlmIChlbGVtZW50KSB7XG4gICAgICAgICAgICBvYnNlcnZlclJlZi5jdXJyZW50ID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKGhhbmRsZU9ic2VydmVyLCB7XG4gICAgICAgICAgICAgICAgcm9vdDogZWxlbWVudC5wYXJlbnRFbGVtZW50LFxuICAgICAgICAgICAgICAgIHJvb3RNYXJnaW46IFwiMHB4IDBweCA2MDBweCAwcHhcIixcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9ic2VydmVyUmVmLmN1cnJlbnQgJiYgZWxlbWVudCkge1xuICAgICAgICAgICAgb2JzZXJ2ZXJSZWYuY3VycmVudC5vYnNlcnZlKGVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgfTtcbn07XG5cbmludGVyZmFjZSBJTWFuYWdlQnV0dG9uc1Byb3BzIHtcbiAgICBoaWVyYXJjaHk6IFJvb21IaWVyYXJjaHk7XG4gICAgc2VsZWN0ZWQ6IE1hcDxzdHJpbmcsIFNldDxzdHJpbmc+PjtcbiAgICBzZXRTZWxlY3RlZDogRGlzcGF0Y2g8U2V0U3RhdGVBY3Rpb248TWFwPHN0cmluZywgU2V0PHN0cmluZz4+Pj47XG4gICAgc2V0RXJyb3I6IERpc3BhdGNoPFNldFN0YXRlQWN0aW9uPHN0cmluZz4+O1xufVxuXG5jb25zdCBNYW5hZ2VCdXR0b25zID0gKHsgaGllcmFyY2h5LCBzZWxlY3RlZCwgc2V0U2VsZWN0ZWQsIHNldEVycm9yIH06IElNYW5hZ2VCdXR0b25zUHJvcHMpID0+IHtcbiAgICBjb25zdCBjbGkgPSB1c2VDb250ZXh0KE1hdHJpeENsaWVudENvbnRleHQpO1xuXG4gICAgY29uc3QgW3JlbW92aW5nLCBzZXRSZW1vdmluZ10gPSB1c2VTdGF0ZShmYWxzZSk7XG4gICAgY29uc3QgW3NhdmluZywgc2V0U2F2aW5nXSA9IHVzZVN0YXRlKGZhbHNlKTtcblxuICAgIGNvbnN0IHNlbGVjdGVkUmVsYXRpb25zID0gQXJyYXkuZnJvbShzZWxlY3RlZC5rZXlzKCkpLmZsYXRNYXAocGFyZW50SWQgPT4ge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgLi4uc2VsZWN0ZWQuZ2V0KHBhcmVudElkKS52YWx1ZXMoKSxcbiAgICAgICAgXS5tYXAoY2hpbGRJZCA9PiBbcGFyZW50SWQsIGNoaWxkSWRdKSBhcyBbc3RyaW5nLCBzdHJpbmddW107XG4gICAgfSk7XG5cbiAgICBjb25zdCBzZWxlY3Rpb25BbGxTdWdnZXN0ZWQgPSBzZWxlY3RlZFJlbGF0aW9ucy5ldmVyeSgoW3BhcmVudElkLCBjaGlsZElkXSkgPT4ge1xuICAgICAgICByZXR1cm4gaGllcmFyY2h5LmlzU3VnZ2VzdGVkKHBhcmVudElkLCBjaGlsZElkKTtcbiAgICB9KTtcblxuICAgIGNvbnN0IGRpc2FibGVkID0gIXNlbGVjdGVkUmVsYXRpb25zLmxlbmd0aCB8fCByZW1vdmluZyB8fCBzYXZpbmc7XG5cbiAgICBsZXQgQnV0dG9uOiBSZWFjdC5Db21wb25lbnRUeXBlPFJlYWN0LkNvbXBvbmVudFByb3BzPHR5cGVvZiBBY2Nlc3NpYmxlQnV0dG9uPj4gPSBBY2Nlc3NpYmxlQnV0dG9uO1xuICAgIGxldCBwcm9wcyA9IHt9O1xuICAgIGlmICghc2VsZWN0ZWRSZWxhdGlvbnMubGVuZ3RoKSB7XG4gICAgICAgIEJ1dHRvbiA9IEFjY2Vzc2libGVUb29sdGlwQnV0dG9uO1xuICAgICAgICBwcm9wcyA9IHtcbiAgICAgICAgICAgIHRvb2x0aXA6IF90KFwiU2VsZWN0IGEgcm9vbSBiZWxvdyBmaXJzdFwiKSxcbiAgICAgICAgICAgIHlPZmZzZXQ6IC00MCxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gPD5cbiAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgey4uLnByb3BzfVxuICAgICAgICAgICAgb25DbGljaz17YXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHNldFJlbW92aW5nKHRydWUpO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHVzZXJJZCA9IGNsaS5nZXRVc2VySWQoKTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBbcGFyZW50SWQsIGNoaWxkSWRdIG9mIHNlbGVjdGVkUmVsYXRpb25zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBjbGkuc2VuZFN0YXRlRXZlbnQocGFyZW50SWQsIEV2ZW50VHlwZS5TcGFjZUNoaWxkLCB7fSwgY2hpbGRJZCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlbW92ZSB0aGUgY2hpbGQtPnBhcmVudCByZWxhdGlvbiB0b28sIGlmIHdlIGhhdmUgcGVybWlzc2lvbiB0by5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkUm9vbSA9IGNsaS5nZXRSb29tKGNoaWxkSWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFyZW50UmVsYXRpb24gPSBjaGlsZFJvb20/LmN1cnJlbnRTdGF0ZS5nZXRTdGF0ZUV2ZW50cyhFdmVudFR5cGUuU3BhY2VQYXJlbnQsIHBhcmVudElkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZFJvb20/LmN1cnJlbnRTdGF0ZS5tYXlTZW5kU3RhdGVFdmVudChFdmVudFR5cGUuU3BhY2VQYXJlbnQsIHVzZXJJZCkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBBcnJheS5pc0FycmF5KHBhcmVudFJlbGF0aW9uPy5nZXRDb250ZW50KCkudmlhKVxuICAgICAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgY2xpLnNlbmRTdGF0ZUV2ZW50KGNoaWxkSWQsIEV2ZW50VHlwZS5TcGFjZVBhcmVudCwge30sIHBhcmVudElkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaGllcmFyY2h5LnJlbW92ZVJlbGF0aW9uKHBhcmVudElkLCBjaGlsZElkKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0RXJyb3IoX3QoXCJGYWlsZWQgdG8gcmVtb3ZlIHNvbWUgcm9vbXMuIFRyeSBhZ2FpbiBsYXRlclwiKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNldFJlbW92aW5nKGZhbHNlKTtcbiAgICAgICAgICAgICAgICBzZXRTZWxlY3RlZChuZXcgTWFwKCkpO1xuICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIGtpbmQ9XCJkYW5nZXJfb3V0bGluZVwiXG4gICAgICAgICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9XG4gICAgICAgID5cbiAgICAgICAgICAgIHsgcmVtb3ZpbmcgPyBfdChcIlJlbW92aW5nLi4uXCIpIDogX3QoXCJSZW1vdmVcIikgfVxuICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgey4uLnByb3BzfVxuICAgICAgICAgICAgb25DbGljaz17YXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHNldFNhdmluZyh0cnVlKTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IFtwYXJlbnRJZCwgY2hpbGRJZF0gb2Ygc2VsZWN0ZWRSZWxhdGlvbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHN1Z2dlc3RlZCA9ICFzZWxlY3Rpb25BbGxTdWdnZXN0ZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBleGlzdGluZ0NvbnRlbnQgPSBoaWVyYXJjaHkuZ2V0UmVsYXRpb24ocGFyZW50SWQsIGNoaWxkSWQpPy5jb250ZW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFleGlzdGluZ0NvbnRlbnQgfHwgZXhpc3RpbmdDb250ZW50LnN1Z2dlc3RlZCA9PT0gc3VnZ2VzdGVkKSBjb250aW51ZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY29udGVudCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5leGlzdGluZ0NvbnRlbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VnZ2VzdGVkOiAhc2VsZWN0aW9uQWxsU3VnZ2VzdGVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgY2xpLnNlbmRTdGF0ZUV2ZW50KHBhcmVudElkLCBFdmVudFR5cGUuU3BhY2VDaGlsZCwgY29udGVudCwgY2hpbGRJZCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG11dGF0ZSB0aGUgbG9jYWwgc3RhdGUgdG8gc2F2ZSB1cyBoYXZpbmcgdG8gcmVmZXRjaCB0aGUgd29ybGRcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4aXN0aW5nQ29udGVudC5zdWdnZXN0ZWQgPSBjb250ZW50LnN1Z2dlc3RlZDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0RXJyb3IoXCJGYWlsZWQgdG8gdXBkYXRlIHNvbWUgc3VnZ2VzdGlvbnMuIFRyeSBhZ2FpbiBsYXRlclwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc2V0U2F2aW5nKGZhbHNlKTtcbiAgICAgICAgICAgICAgICBzZXRTZWxlY3RlZChuZXcgTWFwKCkpO1xuICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIGtpbmQ9XCJwcmltYXJ5X291dGxpbmVcIlxuICAgICAgICAgICAgZGlzYWJsZWQ9e2Rpc2FibGVkfVxuICAgICAgICA+XG4gICAgICAgICAgICB7IHNhdmluZ1xuICAgICAgICAgICAgICAgID8gX3QoXCJTYXZpbmcuLi5cIilcbiAgICAgICAgICAgICAgICA6IChzZWxlY3Rpb25BbGxTdWdnZXN0ZWQgPyBfdChcIk1hcmsgYXMgbm90IHN1Z2dlc3RlZFwiKSA6IF90KFwiTWFyayBhcyBzdWdnZXN0ZWRcIikpXG4gICAgICAgICAgICB9XG4gICAgICAgIDwvQnV0dG9uPlxuICAgIDwvPjtcbn07XG5cbmNvbnN0IFNwYWNlSGllcmFyY2h5ID0gKHtcbiAgICBzcGFjZSxcbiAgICBpbml0aWFsVGV4dCA9IFwiXCIsXG4gICAgc2hvd1Jvb20sXG4gICAgYWRkaXRpb25hbEJ1dHRvbnMsXG59OiBJUHJvcHMpID0+IHtcbiAgICBjb25zdCBjbGkgPSB1c2VDb250ZXh0KE1hdHJpeENsaWVudENvbnRleHQpO1xuICAgIGNvbnN0IFtxdWVyeSwgc2V0UXVlcnldID0gdXNlU3RhdGUoaW5pdGlhbFRleHQpO1xuXG4gICAgY29uc3QgW3NlbGVjdGVkLCBzZXRTZWxlY3RlZF0gPSB1c2VTdGF0ZShuZXcgTWFwPHN0cmluZywgU2V0PHN0cmluZz4+KCkpOyAvLyBNYXA8cGFyZW50SWQsIFNldDxjaGlsZElkPj5cblxuICAgIGNvbnN0IHsgbG9hZGluZywgcm9vbXMsIGhpZXJhcmNoeSwgbG9hZE1vcmUgfSA9IHVzZVJvb21IaWVyYXJjaHkoc3BhY2UpO1xuXG4gICAgY29uc3QgZmlsdGVyZWRSb29tU2V0ID0gdXNlTWVtbzxTZXQ8SUhpZXJhcmNoeVJvb20+PigoKSA9PiB7XG4gICAgICAgIGlmICghcm9vbXM/Lmxlbmd0aCkgcmV0dXJuIG5ldyBTZXQoKTtcbiAgICAgICAgY29uc3QgbGNRdWVyeSA9IHF1ZXJ5LnRvTG93ZXJDYXNlKCkudHJpbSgpO1xuICAgICAgICBpZiAoIWxjUXVlcnkpIHJldHVybiBuZXcgU2V0KHJvb21zKTtcblxuICAgICAgICBjb25zdCBkaXJlY3RNYXRjaGVzID0gcm9vbXMuZmlsdGVyKHIgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHIubmFtZT8udG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhsY1F1ZXJ5KSB8fCByLnRvcGljPy50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKGxjUXVlcnkpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBXYWxrIGJhY2sgdXAgdGhlIHRyZWUgdG8gZmluZCBhbGwgcGFyZW50cyBvZiB0aGUgZGlyZWN0IG1hdGNoZXMgdG8gc2hvdyB0aGVpciBwbGFjZSBpbiB0aGUgaGllcmFyY2h5XG4gICAgICAgIGNvbnN0IHZpc2l0ZWQgPSBuZXcgU2V0PHN0cmluZz4oKTtcbiAgICAgICAgY29uc3QgcXVldWUgPSBbLi4uZGlyZWN0TWF0Y2hlcy5tYXAociA9PiByLnJvb21faWQpXTtcbiAgICAgICAgd2hpbGUgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3Qgcm9vbUlkID0gcXVldWUucG9wKCk7XG4gICAgICAgICAgICB2aXNpdGVkLmFkZChyb29tSWQpO1xuICAgICAgICAgICAgaGllcmFyY2h5LmJhY2tSZWZzLmdldChyb29tSWQpPy5mb3JFYWNoKHBhcmVudElkID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIXZpc2l0ZWQuaGFzKHBhcmVudElkKSkge1xuICAgICAgICAgICAgICAgICAgICBxdWV1ZS5wdXNoKHBhcmVudElkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXcgU2V0KHJvb21zLmZpbHRlcihyID0+IHZpc2l0ZWQuaGFzKHIucm9vbV9pZCkpKTtcbiAgICB9LCBbcm9vbXMsIGhpZXJhcmNoeSwgcXVlcnldKTtcblxuICAgIGNvbnN0IFtlcnJvciwgc2V0RXJyb3JdID0gdXNlU3RhdGUoXCJcIik7XG5cbiAgICBjb25zdCBsb2FkZXJSZWYgPSB1c2VJbnRlcnNlY3Rpb25PYnNlcnZlcihsb2FkTW9yZSk7XG5cbiAgICBpZiAoIWxvYWRpbmcgJiYgaGllcmFyY2h5Lm5vU3VwcG9ydCkge1xuICAgICAgICByZXR1cm4gPHA+eyBfdChcIllvdXIgc2VydmVyIGRvZXMgbm90IHN1cHBvcnQgc2hvd2luZyBzcGFjZSBoaWVyYXJjaGllcy5cIikgfTwvcD47XG4gICAgfVxuXG4gICAgY29uc3Qgb25LZXlEb3duID0gKGV2OiBLZXlib2FyZEV2ZW50LCBzdGF0ZTogSVN0YXRlKTogdm9pZCA9PiB7XG4gICAgICAgIGlmIChldi5rZXkgPT09IEtleS5BUlJPV19ET1dOICYmIGV2LmN1cnJlbnRUYXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwibXhfU3BhY2VIaWVyYXJjaHlfc2VhcmNoXCIpKSB7XG4gICAgICAgICAgICBzdGF0ZS5yZWZzWzBdPy5jdXJyZW50Py5mb2N1cygpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIGNvbnN0IG9uVG9nZ2xlQ2xpY2sgPSAocGFyZW50SWQ6IHN0cmluZywgY2hpbGRJZDogc3RyaW5nKTogdm9pZCA9PiB7XG4gICAgICAgIHNldEVycm9yKFwiXCIpO1xuICAgICAgICBpZiAoIXNlbGVjdGVkLmhhcyhwYXJlbnRJZCkpIHtcbiAgICAgICAgICAgIHNldFNlbGVjdGVkKG5ldyBNYXAoc2VsZWN0ZWQuc2V0KHBhcmVudElkLCBuZXcgU2V0KFtjaGlsZElkXSkpKSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBwYXJlbnRTZXQgPSBzZWxlY3RlZC5nZXQocGFyZW50SWQpO1xuICAgICAgICBpZiAoIXBhcmVudFNldC5oYXMoY2hpbGRJZCkpIHtcbiAgICAgICAgICAgIHNldFNlbGVjdGVkKG5ldyBNYXAoc2VsZWN0ZWQuc2V0KHBhcmVudElkLCBuZXcgU2V0KFsuLi5wYXJlbnRTZXQsIGNoaWxkSWRdKSkpKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHBhcmVudFNldC5kZWxldGUoY2hpbGRJZCk7XG4gICAgICAgIHNldFNlbGVjdGVkKG5ldyBNYXAoc2VsZWN0ZWQuc2V0KHBhcmVudElkLCBuZXcgU2V0KHBhcmVudFNldCkpKSk7XG4gICAgfTtcblxuICAgIHJldHVybiA8Um92aW5nVGFiSW5kZXhQcm92aWRlciBvbktleURvd249e29uS2V5RG93bn0gaGFuZGxlSG9tZUVuZCBoYW5kbGVVcERvd24+XG4gICAgICAgIHsgKHsgb25LZXlEb3duSGFuZGxlciB9KSA9PiB7XG4gICAgICAgICAgICBsZXQgY29udGVudDogSlNYLkVsZW1lbnQ7XG4gICAgICAgICAgICBpZiAobG9hZGluZyAmJiAhcm9vbXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgY29udGVudCA9IDxTcGlubmVyIC8+O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBoYXNQZXJtaXNzaW9ucyA9IHNwYWNlPy5nZXRNeU1lbWJlcnNoaXAoKSA9PT0gXCJqb2luXCIgJiZcbiAgICAgICAgICAgICAgICAgICAgc3BhY2UuY3VycmVudFN0YXRlLm1heVNlbmRTdGF0ZUV2ZW50KEV2ZW50VHlwZS5TcGFjZUNoaWxkLCBjbGkuZ2V0VXNlcklkKCkpO1xuXG4gICAgICAgICAgICAgICAgbGV0IHJlc3VsdHM6IEpTWC5FbGVtZW50O1xuICAgICAgICAgICAgICAgIGlmIChmaWx0ZXJlZFJvb21TZXQuc2l6ZSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHRzID0gPD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxIaWVyYXJjaHlMZXZlbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9e2hpZXJhcmNoeS5yb29tTWFwLmdldChzcGFjZS5yb29tSWQpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb21TZXQ9e2ZpbHRlcmVkUm9vbVNldH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaWVyYXJjaHk9e2hpZXJhcmNoeX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnRzPXtuZXcgU2V0KCl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRNYXA9e3NlbGVjdGVkfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uVG9nZ2xlQ2xpY2s9e2hhc1Blcm1pc3Npb25zID8gb25Ub2dnbGVDbGljayA6IHVuZGVmaW5lZH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvblZpZXdSb29tQ2xpY2s9eyhyb29tSWQsIHJvb21UeXBlKSA9PiBzaG93Um9vbShjbGksIGhpZXJhcmNoeSwgcm9vbUlkLCByb29tVHlwZSl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25Kb2luUm9vbUNsaWNrPXsocm9vbUlkKSA9PiBqb2luUm9vbShjbGksIGhpZXJhcmNoeSwgcm9vbUlkKX1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgIDwvPjtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFoaWVyYXJjaHkuY2FuTG9hZE1vcmUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0cyA9IDxkaXYgY2xhc3NOYW1lPVwibXhfU3BhY2VIaWVyYXJjaHlfbm9SZXN1bHRzXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8aDM+eyBfdChcIk5vIHJlc3VsdHMgZm91bmRcIikgfTwvaDM+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PnsgX3QoXCJZb3UgbWF5IHdhbnQgdG8gdHJ5IGEgZGlmZmVyZW50IHNlYXJjaCBvciBjaGVjayBmb3IgdHlwb3MuXCIpIH08L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGxldCBsb2FkZXI6IEpTWC5FbGVtZW50O1xuICAgICAgICAgICAgICAgIGlmIChoaWVyYXJjaHkuY2FuTG9hZE1vcmUpIHtcbiAgICAgICAgICAgICAgICAgICAgbG9hZGVyID0gPGRpdiByZWY9e2xvYWRlclJlZn0+XG4gICAgICAgICAgICAgICAgICAgICAgICA8U3Bpbm5lciAvPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29udGVudCA9IDw+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibXhfU3BhY2VIaWVyYXJjaHlfbGlzdEhlYWRlclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGg0PnsgcXVlcnkudHJpbSgpID8gX3QoXCJSZXN1bHRzXCIpIDogX3QoXCJSb29tcyBhbmQgc3BhY2VzXCIpIH08L2g0PlxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBhZGRpdGlvbmFsQnV0dG9ucyB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBoYXNQZXJtaXNzaW9ucyAmJiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxNYW5hZ2VCdXR0b25zXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaWVyYXJjaHk9e2hpZXJhcmNoeX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkPXtzZWxlY3RlZH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFNlbGVjdGVkPXtzZXRTZWxlY3RlZH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldEVycm9yPXtzZXRFcnJvcn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIHsgZXJyb3IgJiYgPGRpdiBjbGFzc05hbWU9XCJteF9TcGFjZUhpZXJhcmNoeV9lcnJvclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgeyBlcnJvciB9XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PiB9XG4gICAgICAgICAgICAgICAgICAgIDx1bFxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwibXhfU3BhY2VIaWVyYXJjaHlfbGlzdFwiXG4gICAgICAgICAgICAgICAgICAgICAgICBvbktleURvd249e29uS2V5RG93bkhhbmRsZXJ9XG4gICAgICAgICAgICAgICAgICAgICAgICByb2xlPVwidHJlZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWxhYmVsPXtfdChcIlNwYWNlXCIpfVxuICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICB7IHJlc3VsdHMgfVxuICAgICAgICAgICAgICAgICAgICA8L3VsPlxuICAgICAgICAgICAgICAgICAgICB7IGxvYWRlciB9XG4gICAgICAgICAgICAgICAgPC8+O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gPD5cbiAgICAgICAgICAgICAgICA8U2VhcmNoQm94XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cIm14X1NwYWNlSGllcmFyY2h5X3NlYXJjaCBteF90ZXh0aW5wdXRfaWNvbiBteF90ZXh0aW5wdXRfc2VhcmNoXCJcbiAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9e190KFwiU2VhcmNoIG5hbWVzIGFuZCBkZXNjcmlwdGlvbnNcIil9XG4gICAgICAgICAgICAgICAgICAgIG9uU2VhcmNoPXtzZXRRdWVyeX1cbiAgICAgICAgICAgICAgICAgICAgYXV0b0ZvY3VzPXt0cnVlfVxuICAgICAgICAgICAgICAgICAgICBpbml0aWFsVmFsdWU9e2luaXRpYWxUZXh0fVxuICAgICAgICAgICAgICAgICAgICBvbktleURvd249e29uS2V5RG93bkhhbmRsZXJ9XG4gICAgICAgICAgICAgICAgLz5cblxuICAgICAgICAgICAgICAgIHsgY29udGVudCB9XG4gICAgICAgICAgICA8Lz47XG4gICAgICAgIH0gfVxuICAgIDwvUm92aW5nVGFiSW5kZXhQcm92aWRlcj47XG59O1xuXG5leHBvcnQgZGVmYXVsdCBTcGFjZUhpZXJhcmNoeTtcbiJdfQ==