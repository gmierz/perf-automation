"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.shouldFormContinuation = shouldFormContinuation;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _event = require("matrix-js-sdk/src/@types/event");

var _shouldHideEvent = _interopRequireDefault(require("../../shouldHideEvent"));

var _DateUtils = require("../../DateUtils");

var _MatrixClientPeg = require("../../MatrixClientPeg");

var _SettingsStore = _interopRequireDefault(require("../../settings/SettingsStore"));

var _RoomContext = _interopRequireWildcard(require("../../contexts/RoomContext"));

var _Layout = require("../../settings/enums/Layout");

var _languageHandler = require("../../languageHandler");

var _EventTile = _interopRequireWildcard(require("../views/rooms/EventTile"));

var _TextForEvent = require("../../TextForEvent");

var _IRCTimelineProfileResizer = _interopRequireDefault(require("../views/elements/IRCTimelineProfileResizer"));

var _DMRoomMap = _interopRequireDefault(require("../../utils/DMRoomMap"));

var _NewRoomIntro = _interopRequireDefault(require("../views/rooms/NewRoomIntro"));

var _replaceableComponent = require("../../utils/replaceableComponent");

var _dispatcher = _interopRequireDefault(require("../../dispatcher/dispatcher"));

var _CallEventGrouper = _interopRequireDefault(require("./CallEventGrouper"));

var _WhoIsTypingTile = _interopRequireDefault(require("../views/rooms/WhoIsTypingTile"));

var _ScrollPanel = _interopRequireDefault(require("./ScrollPanel"));

var _EventListSummary = _interopRequireDefault(require("../views/elements/EventListSummary"));

var _MemberEventListSummary = _interopRequireDefault(require("../views/elements/MemberEventListSummary"));

var _DateSeparator = _interopRequireDefault(require("../views/messages/DateSeparator"));

var _ErrorBoundary = _interopRequireDefault(require("../views/elements/ErrorBoundary"));

var _Spinner = _interopRequireDefault(require("../views/elements/Spinner"));

var _TileErrorBoundary = _interopRequireDefault(require("../views/messages/TileErrorBoundary"));

var _logger = require("matrix-js-sdk/src/logger");

var _actions = require("../../dispatcher/actions");

var _dec, _class, _class2, _temp;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const CONTINUATION_MAX_INTERVAL = 5 * 60 * 1000; // 5 minutes

const continuedTypes = [_event.EventType.Sticker, _event.EventType.RoomMessage];
const groupedEvents = [_event.EventType.RoomMember, _event.EventType.RoomThirdPartyInvite, _event.EventType.RoomServerAcl, _event.EventType.RoomPinnedEvents]; // check if there is a previous event and it has the same sender as this event
// and the types are the same/is in continuedTypes and the time between them is <= CONTINUATION_MAX_INTERVAL

function shouldFormContinuation(prevEvent, mxEvent, showHiddenEvents, timelineRenderingType) {
  if (timelineRenderingType === _RoomContext.TimelineRenderingType.ThreadsList) return false; // sanity check inputs

  if (!prevEvent || !prevEvent.sender || !mxEvent.sender) return false; // check if within the max continuation period

  if (mxEvent.getTs() - prevEvent.getTs() > CONTINUATION_MAX_INTERVAL) return false; // As we summarise redactions, do not continue a redacted event onto a non-redacted one and vice-versa

  if (mxEvent.isRedacted() !== prevEvent.isRedacted()) return false; // Some events should appear as continuations from previous events of different types.

  if (mxEvent.getType() !== prevEvent.getType() && (!continuedTypes.includes(mxEvent.getType()) || !continuedTypes.includes(prevEvent.getType()))) return false; // Check if the sender is the same and hasn't changed their displayname/avatar between these events

  if (mxEvent.sender.userId !== prevEvent.sender.userId || mxEvent.sender.name !== prevEvent.sender.name || mxEvent.sender.getMxcAvatarUrl() !== prevEvent.sender.getMxcAvatarUrl()) return false; // if we don't have tile for previous event then it was shown by showHiddenEvents and has no SenderProfile

  if (!(0, _EventTile.haveTileForEvent)(prevEvent, showHiddenEvents)) return false;
  return true;
}

let MessagePanel = (
/* (almost) stateless UI component which builds the event tiles in the room timeline.
 */
_dec = (0, _replaceableComponent.replaceableComponent)("structures.MessagePanel"), _dec(_class = (_temp = _class2 = class MessagePanel extends _react.default.Component {
  // opaque readreceipt info for each userId; used by ReadReceiptMarker
  // to manage its animations
  // Track read receipts by event ID. For each _shown_ event ID, we store
  // the list of read receipts to display:
  //   [
  //       {
  //           userId: string,
  //           member: RoomMember,
  //           ts: number,
  //       },
  //   ]
  // This is recomputed on each render. It's only stored on the component
  // for ease of passing the data around since it's computed in one pass
  // over all events.
  // Track read receipts by user ID. For each user ID we've ever shown a
  // a read receipt for, we store an object:
  //   {
  //       lastShownEventId: string,
  //       receipt: {
  //           userId: string,
  //           member: RoomMember,
  //           ts: number,
  //       },
  //   }
  // so that we can always keep receipts displayed by reverting back to
  // the last shown event for that user ID when needed. This may feel like
  // it duplicates the receipt storage in the room, but at this layer, we
  // are tracking _shown_ event IDs, which the JS SDK knows nothing about.
  // This is recomputed on each render, using the data from the previous
  // render as our fallback for any user IDs we can't match a receipt to a
  // displayed event in the current render cycle.
  // A map of <callId, CallEventGrouper>
  constructor(props, context) {
    super(props, context);
    (0, _defineProperty2.default)(this, "context", void 0);
    (0, _defineProperty2.default)(this, "readReceiptMap", {});
    (0, _defineProperty2.default)(this, "readReceiptsByEvent", {});
    (0, _defineProperty2.default)(this, "readReceiptsByUserId", {});
    (0, _defineProperty2.default)(this, "showHiddenEventsInTimeline", void 0);
    (0, _defineProperty2.default)(this, "isMounted", false);
    (0, _defineProperty2.default)(this, "readMarkerNode", /*#__PURE__*/(0, _react.createRef)());
    (0, _defineProperty2.default)(this, "whoIsTyping", /*#__PURE__*/(0, _react.createRef)());
    (0, _defineProperty2.default)(this, "scrollPanel", /*#__PURE__*/(0, _react.createRef)());
    (0, _defineProperty2.default)(this, "showTypingNotificationsWatcherRef", void 0);
    (0, _defineProperty2.default)(this, "eventNodes", void 0);
    (0, _defineProperty2.default)(this, "callEventGroupers", new Map());
    (0, _defineProperty2.default)(this, "membersCount", 0);
    (0, _defineProperty2.default)(this, "calculateRoomMembersCount", () => {
      var _this$props$room;

      this.membersCount = ((_this$props$room = this.props.room) === null || _this$props$room === void 0 ? void 0 : _this$props$room.getMembers().length) || 0;
    });
    (0, _defineProperty2.default)(this, "onShowTypingNotificationsChange", () => {
      this.setState({
        showTypingNotifications: _SettingsStore.default.getValue("showTypingNotifications")
      });
    });
    (0, _defineProperty2.default)(this, "isUnmounting", () => {
      return !this.isMounted;
    });
    (0, _defineProperty2.default)(this, "collectGhostReadMarker", node => {
      if (node) {
        // now the element has appeared, change the style which will trigger the CSS transition
        requestAnimationFrame(() => {
          node.style.width = '10%';
          node.style.opacity = '0';
        });
      }
    });
    (0, _defineProperty2.default)(this, "onGhostTransitionEnd", ev => {
      // we can now clean up the ghost element
      const finishedEventId = ev.target.dataset.eventid;
      this.setState({
        ghostReadMarkers: this.state.ghostReadMarkers.filter(eid => eid !== finishedEventId)
      });
    });
    (0, _defineProperty2.default)(this, "collectEventNode", (eventId, node) => {
      var _node$ref;

      this.eventNodes[eventId] = node === null || node === void 0 ? void 0 : (_node$ref = node.ref) === null || _node$ref === void 0 ? void 0 : _node$ref.current;
    });
    (0, _defineProperty2.default)(this, "onHeightChanged", () => {
      const scrollPanel = this.scrollPanel.current;

      if (scrollPanel) {
        scrollPanel.checkScroll();
      }
    });
    (0, _defineProperty2.default)(this, "onTypingShown", () => {
      const scrollPanel = this.scrollPanel.current; // this will make the timeline grow, so checkScroll

      scrollPanel.checkScroll();

      if (scrollPanel && scrollPanel.getScrollState().stuckAtBottom) {
        scrollPanel.preventShrinking();
      }
    });
    (0, _defineProperty2.default)(this, "onTypingHidden", () => {
      const scrollPanel = this.scrollPanel.current;

      if (scrollPanel) {
        // as hiding the typing notifications doesn't
        // update the scrollPanel, we tell it to apply
        // the shrinking prevention once the typing notifs are hidden
        scrollPanel.updatePreventShrinking(); // order is important here as checkScroll will scroll down to
        // reveal added padding to balance the notifs disappearing.

        scrollPanel.checkScroll();
      }
    });
    this.state = {
      // previous positions the read marker has been in, so we can
      // display 'ghost' read markers that are animating away
      ghostReadMarkers: [],
      showTypingNotifications: _SettingsStore.default.getValue("showTypingNotifications")
    }; // Cache hidden events setting on mount since Settings is expensive to
    // query, and we check this in a hot code path. This is also cached in
    // our RoomContext, however we still need a fallback for roomless MessagePanels.

    this.showHiddenEventsInTimeline = _SettingsStore.default.getValue("showHiddenEventsInTimeline");
    this.showTypingNotificationsWatcherRef = _SettingsStore.default.watchSetting("showTypingNotifications", null, this.onShowTypingNotificationsChange);
  }

  componentDidMount() {
    var _this$props$room2;

    this.calculateRoomMembersCount();
    (_this$props$room2 = this.props.room) === null || _this$props$room2 === void 0 ? void 0 : _this$props$room2.on("RoomState.members", this.calculateRoomMembersCount);
    this.isMounted = true;
  }

  componentWillUnmount() {
    var _this$props$room3;

    this.isMounted = false;
    (_this$props$room3 = this.props.room) === null || _this$props$room3 === void 0 ? void 0 : _this$props$room3.off("RoomState.members", this.calculateRoomMembersCount);

    _SettingsStore.default.unwatchSetting(this.showTypingNotificationsWatcherRef);
  }

  componentDidUpdate(prevProps, prevState) {
    if (prevProps.readMarkerVisible && this.props.readMarkerEventId !== prevProps.readMarkerEventId) {
      const ghostReadMarkers = this.state.ghostReadMarkers;
      ghostReadMarkers.push(prevProps.readMarkerEventId);
      this.setState({
        ghostReadMarkers
      });
    }

    const pendingEditItem = this.pendingEditItem;

    if (!this.props.editState && this.props.room && pendingEditItem) {
      _dispatcher.default.dispatch({
        action: _actions.Action.EditEvent,
        event: this.props.room.findEventById(pendingEditItem),
        timelineRenderingType: this.context.timelineRenderingType
      });
    }
  }

  /* get the DOM node representing the given event */
  getNodeForEventId(eventId) {
    if (!this.eventNodes) {
      return undefined;
    }

    return this.eventNodes[eventId];
  }
  /* return true if the content is fully scrolled down right now; else false.
   */


  isAtBottom() {
    var _this$scrollPanel$cur;

    return (_this$scrollPanel$cur = this.scrollPanel.current) === null || _this$scrollPanel$cur === void 0 ? void 0 : _this$scrollPanel$cur.isAtBottom();
  }
  /* get the current scroll state. See ScrollPanel.getScrollState for
   * details.
   *
   * returns null if we are not mounted.
   */


  getScrollState() {
    var _this$scrollPanel$cur2;

    return ((_this$scrollPanel$cur2 = this.scrollPanel.current) === null || _this$scrollPanel$cur2 === void 0 ? void 0 : _this$scrollPanel$cur2.getScrollState()) ?? null;
  } // returns one of:
  //
  //  null: there is no read marker
  //  -1: read marker is above the window
  //   0: read marker is within the window
  //  +1: read marker is below the window


  getReadMarkerPosition() {
    const readMarker = this.readMarkerNode.current;
    const messageWrapper = this.scrollPanel.current;

    if (!readMarker || !messageWrapper) {
      return null;
    }

    const wrapperRect = _reactDom.default.findDOMNode(messageWrapper).getBoundingClientRect();

    const readMarkerRect = readMarker.getBoundingClientRect(); // the read-marker pretends to have zero height when it is actually
    // two pixels high; +2 here to account for that.

    if (readMarkerRect.bottom + 2 < wrapperRect.top) {
      return -1;
    } else if (readMarkerRect.top < wrapperRect.bottom) {
      return 0;
    } else {
      return 1;
    }
  }
  /* jump to the top of the content.
   */


  scrollToTop() {
    if (this.scrollPanel.current) {
      this.scrollPanel.current.scrollToTop();
    }
  }
  /* jump to the bottom of the content.
   */


  scrollToBottom() {
    if (this.scrollPanel.current) {
      this.scrollPanel.current.scrollToBottom();
    }
  }
  /**
   * Page up/down.
   *
   * @param {number} mult: -1 to page up, +1 to page down
   */


  scrollRelative(mult) {
    if (this.scrollPanel.current) {
      this.scrollPanel.current.scrollRelative(mult);
    }
  }
  /**
   * Scroll up/down in response to a scroll key
   *
   * @param {KeyboardEvent} ev: the keyboard event to handle
   */


  handleScrollKey(ev) {
    if (this.scrollPanel.current) {
      this.scrollPanel.current.handleScrollKey(ev);
    }
  }
  /* jump to the given event id.
   *
   * offsetBase gives the reference point for the pixelOffset. 0 means the
   * top of the container, 1 means the bottom, and fractional values mean
   * somewhere in the middle. If omitted, it defaults to 0.
   *
   * pixelOffset gives the number of pixels *above* the offsetBase that the
   * node (specifically, the bottom of it) will be positioned. If omitted, it
   * defaults to 0.
   */


  scrollToEvent(eventId, pixelOffset, offsetBase) {
    if (this.scrollPanel.current) {
      this.scrollPanel.current.scrollToToken(eventId, pixelOffset, offsetBase);
    }
  }

  scrollToEventIfNeeded(eventId) {
    const node = this.eventNodes[eventId];

    if (node) {
      node.scrollIntoView({
        block: "nearest",
        behavior: "instant"
      });
    }
  }
  /* check the scroll state and send out pagination requests if necessary.
   */


  checkFillState() {
    if (this.scrollPanel.current) {
      this.scrollPanel.current.checkFillState();
    }
  }

  get showHiddenEvents() {
    var _this$context;

    return ((_this$context = this.context) === null || _this$context === void 0 ? void 0 : _this$context.showHiddenEventsInTimeline) ?? this.showHiddenEventsInTimeline;
  } // TODO: Implement granular (per-room) hide options


  shouldShowEvent(mxEv) {
    if (_MatrixClientPeg.MatrixClientPeg.get().isUserIgnored(mxEv.getSender())) {
      return false; // ignored = no show (only happens if the ignore happens after an event was received)
    }

    if (this.showHiddenEvents) {
      return true;
    }

    if (!(0, _EventTile.haveTileForEvent)(mxEv, this.showHiddenEvents)) {
      return false; // no tile = no show
    } // Always show highlighted event


    if (this.props.highlightedEventId === mxEv.getId()) return true; // Checking if the message has a "parentEventId" as we do not
    // want to hide the root event of the thread

    if (mxEv.isThreadRelation && this.props.hideThreadedMessages && _SettingsStore.default.getValue("feature_thread")) {
      return false;
    }

    return !(0, _shouldHideEvent.default)(mxEv, this.context);
  }

  readMarkerForEvent(eventId, isLastEvent) {
    const visible = !isLastEvent && this.props.readMarkerVisible;

    if (this.props.readMarkerEventId === eventId) {
      let hr; // if the read marker comes at the end of the timeline (except
      // for local echoes, which are excluded from RMs, because they
      // don't have useful event ids), we don't want to show it, but
      // we still want to create the <li/> for it so that the
      // algorithms which depend on its position on the screen aren't
      // confused.

      if (visible) {
        hr = /*#__PURE__*/_react.default.createElement("hr", {
          className: "mx_RoomView_myReadMarker",
          style: {
            opacity: 1,
            width: '99%'
          }
        });
      }

      return /*#__PURE__*/_react.default.createElement("li", {
        key: "readMarker_" + eventId,
        ref: this.readMarkerNode,
        className: "mx_RoomView_myReadMarker_container",
        "data-scroll-tokens": eventId
      }, hr);
    } else if (this.state.ghostReadMarkers.includes(eventId)) {
      // We render 'ghost' read markers in the DOM while they
      // transition away. This allows the actual read marker
      // to be in the right place straight away without having
      // to wait for the transition to finish.
      // There are probably much simpler ways to do this transition,
      // possibly using react-transition-group which handles keeping
      // elements in the DOM whilst they transition out, although our
      // case is a little more complex because only some of the items
      // transition (ie. the read markers do but the event tiles do not)
      // and TransitionGroup requires that all its children are Transitions.
      const hr = /*#__PURE__*/_react.default.createElement("hr", {
        className: "mx_RoomView_myReadMarker",
        ref: this.collectGhostReadMarker,
        onTransitionEnd: this.onGhostTransitionEnd,
        "data-eventid": eventId
      }); // give it a key which depends on the event id. That will ensure that
      // we get a new DOM node (restarting the animation) when the ghost
      // moves to a different event.


      return /*#__PURE__*/_react.default.createElement("li", {
        key: "_readuptoghost_" + eventId,
        className: "mx_RoomView_myReadMarker_container"
      }, hr);
    }

    return null;
  }

  getNextEventInfo(arr, i) {
    const nextEvent = i < arr.length - 1 ? arr[i + 1] : null; // The next event with tile is used to to determine the 'last successful' flag
    // when rendering the tile. The shouldShowEvent function is pretty quick at what
    // it does, so this should have no significant cost even when a room is used for
    // not-chat purposes.

    const nextTile = arr.slice(i + 1).find(e => this.shouldShowEvent(e));
    return {
      nextEvent,
      nextTile
    };
  }

  get pendingEditItem() {
    if (!this.props.room) {
      return undefined;
    }

    try {
      return localStorage.getItem(`mx_edit_room_${this.props.room.roomId}_${this.context.timelineRenderingType}`);
    } catch (err) {
      _logger.logger.error(err);

      return undefined;
    }
  }

  getEventTiles() {
    this.eventNodes = {};
    let i; // first figure out which is the last event in the list which we're
    // actually going to show; this allows us to behave slightly
    // differently for the last event in the list. (eg show timestamp)
    //
    // we also need to figure out which is the last event we show which isn't
    // a local echo, to manage the read-marker.

    let lastShownEvent;
    let lastShownNonLocalEchoIndex = -1;

    for (i = this.props.events.length - 1; i >= 0; i--) {
      const mxEv = this.props.events[i];

      if (!this.shouldShowEvent(mxEv)) {
        continue;
      }

      if (lastShownEvent === undefined) {
        lastShownEvent = mxEv;
      }

      if (mxEv.status) {
        // this is a local echo
        continue;
      }

      lastShownNonLocalEchoIndex = i;
      break;
    }

    const ret = [];
    let prevEvent = null; // the last event we showed
    // Note: the EventTile might still render a "sent/sending receipt" independent of
    // this information. When not providing read receipt information, the tile is likely
    // to assume that sent receipts are to be shown more often.

    this.readReceiptsByEvent = {};

    if (this.props.showReadReceipts) {
      this.readReceiptsByEvent = this.getReadReceiptsByShownEvent();
    }

    let grouper = null;

    for (i = 0; i < this.props.events.length; i++) {
      const mxEv = this.props.events[i];
      const eventId = mxEv.getId();
      const last = mxEv === lastShownEvent;
      const {
        nextEvent,
        nextTile
      } = this.getNextEventInfo(this.props.events, i);

      if (mxEv.getType().indexOf("m.call.") === 0 || mxEv.getType().indexOf("org.matrix.call.") === 0) {
        const callId = mxEv.getContent().call_id;

        if (this.callEventGroupers.has(callId)) {
          this.callEventGroupers.get(callId).add(mxEv);
        } else {
          const callEventGrouper = new _CallEventGrouper.default();
          callEventGrouper.add(mxEv);
          this.callEventGroupers.set(callId, callEventGrouper);
        }
      }

      if (grouper) {
        if (grouper.shouldGroup(mxEv)) {
          grouper.add(mxEv, this.showHiddenEvents);
          continue;
        } else {
          // not part of group, so get the group tiles, close the
          // group, and continue like a normal event
          ret.push(...grouper.getTiles());
          prevEvent = grouper.getNewPrevEvent();
          grouper = null;
        }
      }

      for (const Grouper of groupers) {
        if (Grouper.canStartGroup(this, mxEv) && !this.props.disableGrouping) {
          grouper = new Grouper(this, mxEv, prevEvent, lastShownEvent, this.props.layout, nextEvent, nextTile);
        }
      }

      if (!grouper) {
        const wantTile = this.shouldShowEvent(mxEv);
        const isGrouped = false;

        if (wantTile) {
          // make sure we unpack the array returned by getTilesForEvent,
          // otherwise react will auto-generate keys and we will end up
          // replacing all of the DOM elements every time we paginate.
          ret.push(...this.getTilesForEvent(prevEvent, mxEv, last, isGrouped, nextEvent, nextTile));
          prevEvent = mxEv;
        }

        const readMarker = this.readMarkerForEvent(eventId, i >= lastShownNonLocalEchoIndex);
        if (readMarker) ret.push(readMarker);
      }
    }

    if (grouper) {
      ret.push(...grouper.getTiles());
    }

    return ret;
  }

  getTilesForEvent(prevEvent, mxEv, last = false, isGrouped = false, nextEvent, nextEventWithTile) {
    const ret = [];
    const isEditing = this.props.editState && this.props.editState.getEvent().getId() === mxEv.getId(); // local echoes have a fake date, which could even be yesterday. Treat them
    // as 'today' for the date separators.

    let ts1 = mxEv.getTs();
    let eventDate = mxEv.getDate();

    if (mxEv.status) {
      eventDate = new Date();
      ts1 = eventDate.getTime();
    } // do we need a date separator since the last event?


    const wantsDateSeparator = this.wantsDateSeparator(prevEvent, eventDate);

    if (wantsDateSeparator && !isGrouped) {
      const dateSeparator = /*#__PURE__*/_react.default.createElement("li", {
        key: ts1
      }, /*#__PURE__*/_react.default.createElement(_DateSeparator.default, {
        key: ts1,
        ts: ts1
      }));

      ret.push(dateSeparator);
    }

    let willWantDateSeparator = false;
    let lastInSection = true;

    if (nextEventWithTile) {
      willWantDateSeparator = this.wantsDateSeparator(mxEv, nextEventWithTile.getDate() || new Date());
      lastInSection = willWantDateSeparator || mxEv.getSender() !== nextEventWithTile.getSender();
    } // is this a continuation of the previous message?


    const continuation = !wantsDateSeparator && shouldFormContinuation(prevEvent, mxEv, this.showHiddenEvents, this.context.timelineRenderingType);
    const eventId = mxEv.getId();
    const highlight = eventId === this.props.highlightedEventId;
    const readReceipts = this.readReceiptsByEvent[eventId];
    let isLastSuccessful = false;

    const isSentState = s => !s || s === 'sent';

    const isSent = isSentState(mxEv.getAssociatedStatus());
    const hasNextEvent = nextEvent && this.shouldShowEvent(nextEvent);

    if (!hasNextEvent && isSent) {
      isLastSuccessful = true;
    } else if (hasNextEvent && isSent && !isSentState(nextEvent.getAssociatedStatus())) {
      isLastSuccessful = true;
    } // This is a bit nuanced, but if our next event is hidden but a future event is not
    // hidden then we're not the last successful.


    if (nextEventWithTile && nextEventWithTile !== nextEvent && isSentState(nextEventWithTile.getAssociatedStatus())) {
      isLastSuccessful = false;
    } // We only want to consider "last successful" if the event is sent by us, otherwise of course
    // it's successful: we received it.


    isLastSuccessful = isLastSuccessful && mxEv.getSender() === _MatrixClientPeg.MatrixClientPeg.get().getUserId();
    const callEventGrouper = this.callEventGroupers.get(mxEv.getContent().call_id); // use txnId as key if available so that we don't remount during sending

    ret.push( /*#__PURE__*/_react.default.createElement(_TileErrorBoundary.default, {
      key: mxEv.getTxnId() || eventId,
      mxEvent: mxEv
    }, /*#__PURE__*/_react.default.createElement(_EventTile.default, {
      as: "li",
      ref: this.collectEventNode.bind(this, eventId),
      alwaysShowTimestamps: this.props.alwaysShowTimestamps,
      mxEvent: mxEv,
      continuation: continuation,
      isRedacted: mxEv.isRedacted(),
      replacingEventId: mxEv.replacingEventId(),
      editState: isEditing && this.props.editState,
      onHeightChanged: this.onHeightChanged,
      readReceipts: readReceipts,
      readReceiptMap: this.readReceiptMap,
      showUrlPreview: this.props.showUrlPreview,
      checkUnmounting: this.isUnmounting,
      eventSendStatus: mxEv.getAssociatedStatus(),
      tileShape: this.props.tileShape,
      isTwelveHour: this.props.isTwelveHour,
      permalinkCreator: this.props.permalinkCreator,
      last: last,
      lastInSection: lastInSection,
      lastSuccessful: isLastSuccessful,
      isSelectedEvent: highlight,
      getRelationsForEvent: this.props.getRelationsForEvent,
      showReactions: this.props.showReactions,
      layout: this.props.layout,
      enableFlair: this.props.enableFlair,
      showReadReceipts: this.props.showReadReceipts,
      callEventGrouper: callEventGrouper,
      hideSender: this.membersCount <= 2 && this.props.layout === _Layout.Layout.Bubble,
      timelineRenderingType: this.context.timelineRenderingType
    })));
    return ret;
  }

  wantsDateSeparator(prevEvent, nextEventDate) {
    if (this.context.timelineRenderingType === _RoomContext.TimelineRenderingType.ThreadsList) {
      return false;
    }

    if (prevEvent == null) {
      // first event in the panel: depends if we could back-paginate from
      // here.
      return !this.props.suppressFirstDateSeparator;
    }

    return (0, _DateUtils.wantsDateSeparator)(prevEvent.getDate(), nextEventDate);
  } // Get a list of read receipts that should be shown next to this event
  // Receipts are objects which have a 'userId', 'roomMember' and 'ts'.


  getReadReceiptsForEvent(event) {
    const myUserId = _MatrixClientPeg.MatrixClientPeg.get().credentials.userId; // get list of read receipts, sorted most recent first


    const {
      room
    } = this.props;

    if (!room) {
      return null;
    }

    const receipts = [];
    room.getReceiptsForEvent(event).forEach(r => {
      if (!r.userId || r.type !== "m.read" || r.userId === myUserId) {
        return; // ignore non-read receipts and receipts from self.
      }

      if (_MatrixClientPeg.MatrixClientPeg.get().isUserIgnored(r.userId)) {
        return; // ignore ignored users
      }

      const member = room.getMember(r.userId);
      receipts.push({
        userId: r.userId,
        roomMember: member,
        ts: r.data ? r.data.ts : 0
      });
    });
    return receipts;
  } // Get an object that maps from event ID to a list of read receipts that
  // should be shown next to that event. If a hidden event has read receipts,
  // they are folded into the receipts of the last shown event.


  getReadReceiptsByShownEvent() {
    const receiptsByEvent = {};
    const receiptsByUserId = {};
    let lastShownEventId;

    for (const event of this.props.events) {
      if (this.shouldShowEvent(event)) {
        lastShownEventId = event.getId();
      }

      if (!lastShownEventId) {
        continue;
      }

      const existingReceipts = receiptsByEvent[lastShownEventId] || [];
      const newReceipts = this.getReadReceiptsForEvent(event);
      receiptsByEvent[lastShownEventId] = existingReceipts.concat(newReceipts); // Record these receipts along with their last shown event ID for
      // each associated user ID.

      for (const receipt of newReceipts) {
        receiptsByUserId[receipt.userId] = {
          lastShownEventId,
          receipt
        };
      }
    } // It's possible in some cases (for example, when a read receipt
    // advances before we have paginated in the new event that it's marking
    // received) that we can temporarily not have a matching event for
    // someone which had one in the last. By looking through our previous
    // mapping of receipts by user ID, we can cover recover any receipts
    // that would have been lost by using the same event ID from last time.


    for (const userId in this.readReceiptsByUserId) {
      if (receiptsByUserId[userId]) {
        continue;
      }

      const {
        lastShownEventId,
        receipt
      } = this.readReceiptsByUserId[userId];
      const existingReceipts = receiptsByEvent[lastShownEventId] || [];
      receiptsByEvent[lastShownEventId] = existingReceipts.concat(receipt);
      receiptsByUserId[userId] = {
        lastShownEventId,
        receipt
      };
    }

    this.readReceiptsByUserId = receiptsByUserId; // After grouping receipts by shown events, do another pass to sort each
    // receipt list.

    for (const eventId in receiptsByEvent) {
      receiptsByEvent[eventId].sort((r1, r2) => {
        return r2.ts - r1.ts;
      });
    }

    return receiptsByEvent;
  }

  updateTimelineMinHeight() {
    const scrollPanel = this.scrollPanel.current;

    if (scrollPanel) {
      const isAtBottom = scrollPanel.isAtBottom();
      const whoIsTyping = this.whoIsTyping.current;
      const isTypingVisible = whoIsTyping && whoIsTyping.isVisible(); // when messages get added to the timeline,
      // but somebody else is still typing,
      // update the min-height, so once the last
      // person stops typing, no jumping occurs

      if (isAtBottom && isTypingVisible) {
        scrollPanel.preventShrinking();
      }
    }
  }

  onTimelineReset() {
    const scrollPanel = this.scrollPanel.current;

    if (scrollPanel) {
      scrollPanel.clearPreventShrinking();
    }
  }

  render() {
    let topSpinner;
    let bottomSpinner;

    if (this.props.backPaginating) {
      topSpinner = /*#__PURE__*/_react.default.createElement("li", {
        key: "_topSpinner"
      }, /*#__PURE__*/_react.default.createElement(_Spinner.default, null));
    }

    if (this.props.forwardPaginating) {
      bottomSpinner = /*#__PURE__*/_react.default.createElement("li", {
        key: "_bottomSpinner"
      }, /*#__PURE__*/_react.default.createElement(_Spinner.default, null));
    }

    const style = this.props.hidden ? {
      display: 'none'
    } : {};
    let whoIsTyping;

    if (this.props.room && !this.props.tileShape && this.state.showTypingNotifications) {
      whoIsTyping = /*#__PURE__*/_react.default.createElement(_WhoIsTypingTile.default, {
        room: this.props.room,
        onShown: this.onTypingShown,
        onHidden: this.onTypingHidden,
        ref: this.whoIsTyping
      });
    }

    let ircResizer = null;

    if (this.props.layout == _Layout.Layout.IRC) {
      ircResizer = /*#__PURE__*/_react.default.createElement(_IRCTimelineProfileResizer.default, {
        minWidth: 20,
        maxWidth: 600,
        roomId: this.props.room ? this.props.room.roomId : null
      });
    }

    return /*#__PURE__*/_react.default.createElement(_ErrorBoundary.default, null, /*#__PURE__*/_react.default.createElement(_ScrollPanel.default, {
      ref: this.scrollPanel,
      className: this.props.className,
      onScroll: this.props.onScroll,
      onUserScroll: this.props.onUserScroll,
      onFillRequest: this.props.onFillRequest,
      onUnfillRequest: this.props.onUnfillRequest,
      style: style,
      stickyBottom: this.props.stickyBottom,
      resizeNotifier: this.props.resizeNotifier,
      fixedChildren: ircResizer
    }, topSpinner, this.getEventTiles(), whoIsTyping, bottomSpinner));
  }

}, (0, _defineProperty2.default)(_class2, "contextType", _RoomContext.default), (0, _defineProperty2.default)(_class2, "defaultProps", {
  disableGrouping: false
}), _temp)) || _class);
exports.default = MessagePanel;

class BaseGrouper {
  // events that we include in the group but then eject out and place above the group.
  constructor(panel, event, prevEvent, lastShownEvent, layout, nextEvent, nextEventTile) {
    this.panel = panel;
    this.event = event;
    this.prevEvent = prevEvent;
    this.lastShownEvent = lastShownEvent;
    this.layout = layout;
    this.nextEvent = nextEvent;
    this.nextEventTile = nextEventTile;
    (0, _defineProperty2.default)(this, "events", []);
    (0, _defineProperty2.default)(this, "ejectedEvents", []);
    (0, _defineProperty2.default)(this, "readMarker", void 0);
    this.readMarker = panel.readMarkerForEvent(event.getId(), event === lastShownEvent);
  }

}
/* Grouper classes determine when events can be grouped together in a summary.
 * Groupers should have the following methods:
 * - canStartGroup (static): determines if a new group should be started with the
 *   given event
 * - shouldGroup: determines if the given event should be added to an existing group
 * - add: adds an event to an existing group (should only be called if shouldGroup
 *   return true)
 * - getTiles: returns the tiles that represent the group
 * - getNewPrevEvent: returns the event that should be used as the new prevEvent
 *   when determining things such as whether a date separator is necessary
 */
// Wrap initial room creation events into an EventListSummary
// Grouping only events sent by the same user that sent the `m.room.create` and only until
// the first non-state event or membership event which is not regarding the sender of the `m.room.create` event


(0, _defineProperty2.default)(BaseGrouper, "canStartGroup", (panel, ev) => true);

class CreationGrouper extends BaseGrouper {
  shouldGroup(ev) {
    const panel = this.panel;
    const createEvent = this.event;

    if (!panel.shouldShowEvent(ev)) {
      return true;
    }

    if (panel.wantsDateSeparator(this.event, ev.getDate())) {
      return false;
    }

    if (ev.getType() === _event.EventType.RoomMember && (ev.getStateKey() !== createEvent.getSender() || ev.getContent()["membership"] !== "join")) {
      return false;
    }

    if (ev.isState() && ev.getSender() === createEvent.getSender()) {
      return true;
    }

    return false;
  }

  add(ev) {
    const panel = this.panel;
    this.readMarker = this.readMarker || panel.readMarkerForEvent(ev.getId(), ev === this.lastShownEvent);

    if (!panel.shouldShowEvent(ev)) {
      return;
    }

    if (ev.getType() === _event.EventType.RoomEncryption) {
      this.ejectedEvents.push(ev);
    } else {
      this.events.push(ev);
    }
  }

  getTiles() {
    // If we don't have any events to group, don't even try to group them. The logic
    // below assumes that we have a group of events to deal with, but we might not if
    // the events we were supposed to group were redacted.
    if (!this.events || !this.events.length) return [];
    const panel = this.panel;
    const ret = [];
    const isGrouped = true;
    const createEvent = this.event;
    const lastShownEvent = this.lastShownEvent;

    if (panel.wantsDateSeparator(this.prevEvent, createEvent.getDate())) {
      const ts = createEvent.getTs();
      ret.push( /*#__PURE__*/_react.default.createElement("li", {
        key: ts + '~'
      }, /*#__PURE__*/_react.default.createElement(_DateSeparator.default, {
        key: ts + '~',
        ts: ts
      })));
    } // If this m.room.create event should be shown (room upgrade) then show it before the summary


    if (panel.shouldShowEvent(createEvent)) {
      // pass in the createEvent as prevEvent as well so no extra DateSeparator is rendered
      ret.push(...panel.getTilesForEvent(createEvent, createEvent));
    }

    for (const ejected of this.ejectedEvents) {
      ret.push(...panel.getTilesForEvent(createEvent, ejected, createEvent === lastShownEvent, isGrouped));
    }

    const eventTiles = this.events.map(e => {
      // In order to prevent DateSeparators from appearing in the expanded form
      // of EventListSummary, render each member event as if the previous
      // one was itself. This way, the timestamp of the previous event === the
      // timestamp of the current event, and no DateSeparator is inserted.
      return panel.getTilesForEvent(e, e, e === lastShownEvent, isGrouped);
    }).reduce((a, b) => a.concat(b), []); // Get sender profile from the latest event in the summary as the m.room.create doesn't contain one

    const ev = this.events[this.events.length - 1];
    let summaryText;
    const roomId = ev.getRoomId();
    const creator = ev.sender ? ev.sender.name : ev.getSender();

    if (_DMRoomMap.default.shared().getUserIdForRoomId(roomId)) {
      summaryText = (0, _languageHandler._t)("%(creator)s created this DM.", {
        creator
      });
    } else {
      summaryText = (0, _languageHandler._t)("%(creator)s created and configured the room.", {
        creator
      });
    }

    ret.push( /*#__PURE__*/_react.default.createElement(_NewRoomIntro.default, {
      key: "newroomintro"
    }));
    ret.push( /*#__PURE__*/_react.default.createElement(_EventListSummary.default, {
      key: "roomcreationsummary",
      events: this.events,
      onToggle: panel.onHeightChanged // Update scroll state
      ,
      summaryMembers: [ev.sender],
      summaryText: summaryText,
      layout: this.layout
    }, eventTiles));

    if (this.readMarker) {
      ret.push(this.readMarker);
    }

    return ret;
  }

  getNewPrevEvent() {
    return this.event;
  }

}

(0, _defineProperty2.default)(CreationGrouper, "canStartGroup", function (panel, ev) {
  return ev.getType() === _event.EventType.RoomCreate;
});

class RedactionGrouper extends BaseGrouper {
  constructor(panel, ev, prevEvent, lastShownEvent, layout, nextEvent, nextEventTile) {
    super(panel, ev, prevEvent, lastShownEvent, layout, nextEvent, nextEventTile);
    this.events = [ev];
  }

  shouldGroup(ev) {
    // absorb hidden events so that they do not break up streams of messages & redaction events being grouped
    if (!this.panel.shouldShowEvent(ev)) {
      return true;
    }

    if (this.panel.wantsDateSeparator(this.events[0], ev.getDate())) {
      return false;
    }

    return ev.isRedacted();
  }

  add(ev) {
    this.readMarker = this.readMarker || this.panel.readMarkerForEvent(ev.getId(), ev === this.lastShownEvent);

    if (!this.panel.shouldShowEvent(ev)) {
      return;
    }

    this.events.push(ev);
  }

  getTiles() {
    if (!this.events || !this.events.length) return [];
    const isGrouped = true;
    const panel = this.panel;
    const ret = [];
    const lastShownEvent = this.lastShownEvent;

    if (panel.wantsDateSeparator(this.prevEvent, this.events[0].getDate())) {
      const ts = this.events[0].getTs();
      ret.push( /*#__PURE__*/_react.default.createElement("li", {
        key: ts + '~'
      }, /*#__PURE__*/_react.default.createElement(_DateSeparator.default, {
        key: ts + '~',
        ts: ts
      })));
    }

    const key = "redactioneventlistsummary-" + (this.prevEvent ? this.events[0].getId() : "initial");
    const senders = new Set();
    let eventTiles = this.events.map((e, i) => {
      senders.add(e.sender);
      const prevEvent = i === 0 ? this.prevEvent : this.events[i - 1];
      return panel.getTilesForEvent(prevEvent, e, e === lastShownEvent, isGrouped, this.nextEvent, this.nextEventTile);
    }).reduce((a, b) => a.concat(b), []);

    if (eventTiles.length === 0) {
      eventTiles = null;
    }

    ret.push( /*#__PURE__*/_react.default.createElement(_EventListSummary.default, {
      key: key,
      threshold: 2,
      events: this.events,
      onToggle: panel.onHeightChanged // Update scroll state
      ,
      summaryMembers: Array.from(senders),
      summaryText: (0, _languageHandler._t)("%(count)s messages deleted.", {
        count: eventTiles.length
      }),
      layout: this.layout
    }, eventTiles));

    if (this.readMarker) {
      ret.push(this.readMarker);
    }

    return ret;
  }

  getNewPrevEvent() {
    return this.events[this.events.length - 1];
  }

} // Wrap consecutive member events in a ListSummary, ignore if redacted


(0, _defineProperty2.default)(RedactionGrouper, "canStartGroup", function (panel, ev) {
  return panel.shouldShowEvent(ev) && ev.isRedacted();
});

class MemberGrouper extends BaseGrouper {
  constructor(panel, event, prevEvent, lastShownEvent, layout) {
    super(panel, event, prevEvent, lastShownEvent, layout);
    this.panel = panel;
    this.event = event;
    this.prevEvent = prevEvent;
    this.lastShownEvent = lastShownEvent;
    this.layout = layout;
    this.events = [event];
  }

  shouldGroup(ev) {
    if (this.panel.wantsDateSeparator(this.events[0], ev.getDate())) {
      return false;
    }

    return groupedEvents.includes(ev.getType());
  }

  add(ev, showHiddenEvents) {
    if (ev.getType() === _event.EventType.RoomMember) {
      // We can ignore any events that don't actually have a message to display
      if (!(0, _TextForEvent.hasText)(ev, showHiddenEvents)) return;
    }

    this.readMarker = this.readMarker || this.panel.readMarkerForEvent(ev.getId(), ev === this.lastShownEvent);
    this.events.push(ev);
  }

  getTiles() {
    // If we don't have any events to group, don't even try to group them. The logic
    // below assumes that we have a group of events to deal with, but we might not if
    // the events we were supposed to group were redacted.
    if (!this.events || !this.events.length) return [];
    const isGrouped = true;
    const panel = this.panel;
    const lastShownEvent = this.lastShownEvent;
    const ret = [];

    if (panel.wantsDateSeparator(this.prevEvent, this.events[0].getDate())) {
      const ts = this.events[0].getTs();
      ret.push( /*#__PURE__*/_react.default.createElement("li", {
        key: ts + '~'
      }, /*#__PURE__*/_react.default.createElement(_DateSeparator.default, {
        key: ts + '~',
        ts: ts
      })));
    } // Ensure that the key of the MemberEventListSummary does not change with new
    // member events. This will prevent it from being re-created unnecessarily, and
    // instead will allow new props to be provided. In turn, the shouldComponentUpdate
    // method on MELS can be used to prevent unnecessary renderings.
    //
    // Whilst back-paginating with a MELS at the top of the panel, prevEvent will be null,
    // so use the key "membereventlistsummary-initial". Otherwise, use the ID of the first
    // membership event, which will not change during forward pagination.


    const key = "membereventlistsummary-" + (this.prevEvent ? this.events[0].getId() : "initial");
    let highlightInMels;
    let eventTiles = this.events.map(e => {
      if (e.getId() === panel.props.highlightedEventId) {
        highlightInMels = true;
      } // In order to prevent DateSeparators from appearing in the expanded form
      // of MemberEventListSummary, render each member event as if the previous
      // one was itself. This way, the timestamp of the previous event === the
      // timestamp of the current event, and no DateSeparator is inserted.


      return panel.getTilesForEvent(e, e, e === lastShownEvent, isGrouped);
    }).reduce((a, b) => a.concat(b), []);

    if (eventTiles.length === 0) {
      eventTiles = null;
    }

    ret.push( /*#__PURE__*/_react.default.createElement(_MemberEventListSummary.default, {
      key: key,
      events: this.events,
      onToggle: panel.onHeightChanged // Update scroll state
      ,
      startExpanded: highlightInMels,
      layout: this.layout
    }, eventTiles));

    if (this.readMarker) {
      ret.push(this.readMarker);
    }

    return ret;
  }

  getNewPrevEvent() {
    return this.events[0];
  }

} // all the grouper classes that we use


(0, _defineProperty2.default)(MemberGrouper, "canStartGroup", function (panel, ev) {
  return panel.shouldShowEvent(ev) && groupedEvents.includes(ev.getType());
});
const groupers = [CreationGrouper, MemberGrouper, RedactionGrouper];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,