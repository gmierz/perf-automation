"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _Keyboard = require("../../Keyboard");

var _dispatcher = _interopRequireDefault(require("../../dispatcher/dispatcher"));

var _lodash = require("lodash");

var _AccessibleButton = _interopRequireDefault(require("../../components/views/elements/AccessibleButton"));

var _classnames = _interopRequireDefault(require("classnames"));

var _replaceableComponent = require("../../utils/replaceableComponent");

var _actions = require("../../dispatcher/actions");

var _dec, _class, _class2, _temp;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

let SearchBox = (_dec = (0, _replaceableComponent.replaceableComponent)("structures.SearchBox"), _dec(_class = (_temp = _class2 = class SearchBox extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "dispatcherRef", void 0);
    (0, _defineProperty2.default)(this, "search", /*#__PURE__*/(0, _react.createRef)());
    (0, _defineProperty2.default)(this, "onAction", payload => {
      if (!this.props.enableRoomSearchFocus) return;

      switch (payload.action) {
        case _actions.Action.ViewRoom:
          if (this.search.current && payload.clear_search) {
            this.clearSearch();
          }

          break;

        case 'focus_room_filter':
          if (this.search.current) {
            this.search.current.focus();
          }

          break;
      }
    });
    (0, _defineProperty2.default)(this, "onChange", () => {
      if (!this.search.current) return;
      this.setState({
        searchTerm: this.search.current.value
      });
      this.onSearch();
    });
    (0, _defineProperty2.default)(this, "onSearch", (0, _lodash.throttle)(() => {
      this.props.onSearch(this.search.current.value);
    }, 200, {
      trailing: true,
      leading: true
    }));
    (0, _defineProperty2.default)(this, "onKeyDown", ev => {
      switch (ev.key) {
        case _Keyboard.Key.ESCAPE:
          this.clearSearch("keyboard");
          break;
      }

      if (this.props.onKeyDown) this.props.onKeyDown(ev);
    });
    (0, _defineProperty2.default)(this, "onFocus", ev => {
      this.setState({
        blurred: false
      });
      ev.target.select();

      if (this.props.onFocus) {
        this.props.onFocus(ev);
      }
    });
    (0, _defineProperty2.default)(this, "onBlur", ev => {
      this.setState({
        blurred: true
      });

      if (this.props.onBlur) {
        this.props.onBlur(ev);
      }
    });
    this.state = {
      searchTerm: props.initialValue || "",
      blurred: true
    };
  }

  componentDidMount() {
    this.dispatcherRef = _dispatcher.default.register(this.onAction);
  }

  componentWillUnmount() {
    _dispatcher.default.unregister(this.dispatcherRef);
  }

  clearSearch(source) {
    this.search.current.value = "";
    this.onChange();

    if (this.props.onCleared) {
      this.props.onCleared(source);
    }
  }

  render() {
    // check for collapsed here and
    // not at parent so we keep
    // searchTerm in our state
    // when collapsing and expanding
    if (this.props.collapsed) {
      return null;
    }

    const clearButton = !this.state.blurred || this.state.searchTerm ? /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      key: "button",
      tabIndex: -1,
      className: "mx_SearchBox_closeButton",
      onClick: () => {
        this.clearSearch("button");
      }
    }) : undefined; // show a shorter placeholder when blurred, if requested
    // this is used for the room filter field that has
    // the explore button next to it when blurred

    const placeholder = this.state.blurred ? this.props.blurredPlaceholder || this.props.placeholder : this.props.placeholder;
    const className = this.props.className || "";
    return /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)("mx_SearchBox", "mx_textinput", {
        "mx_SearchBox_blurred": this.state.blurred
      })
    }, /*#__PURE__*/_react.default.createElement("input", {
      key: "searchfield",
      type: "text",
      ref: this.search,
      className: "mx_textinput_icon mx_textinput_search " + className,
      value: this.state.searchTerm,
      onFocus: this.onFocus,
      onChange: this.onChange,
      onKeyDown: this.onKeyDown,
      onBlur: this.onBlur,
      placeholder: placeholder,
      autoComplete: "off",
      autoFocus: this.props.autoFocus
    }), clearButton);
  }

}, (0, _defineProperty2.default)(_class2, "defaultProps", {
  enableRoomSearchFocus: false
}), _temp)) || _class);
exports.default = SearchBox;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,