"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _reResizable = require("re-resizable");

var _replaceableComponent = require("../../utils/replaceableComponent");

var _dec, _class;

let MainSplit = (_dec = (0, _replaceableComponent.replaceableComponent)("structures.MainSplit"), _dec(_class = class MainSplit extends _react.default.Component {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "onResizeStart", () => {
      this.props.resizeNotifier.startResizing();
    });
    (0, _defineProperty2.default)(this, "onResize", () => {
      this.props.resizeNotifier.notifyRightHandleResized();
    });
    (0, _defineProperty2.default)(this, "onResizeStop", (event, direction, elementRef, delta) => {
      this.props.resizeNotifier.stopResizing();
      window.localStorage.setItem("mx_rhs_size", (this.loadSidePanelSize().width + delta.width).toString());
    });
  }

  loadSidePanelSize() {
    let rhsSize = parseInt(window.localStorage.getItem("mx_rhs_size"), 10);

    if (isNaN(rhsSize)) {
      rhsSize = 350;
    }

    return {
      height: "100%",
      width: rhsSize
    };
  }

  render() {
    const bodyView = _react.default.Children.only(this.props.children);

    const panelView = this.props.panel;
    const hasResizer = !this.props.collapsedRhs && panelView;
    let children;

    if (hasResizer) {
      children = /*#__PURE__*/_react.default.createElement(_reResizable.Resizable, {
        defaultSize: this.loadSidePanelSize(),
        minWidth: 264,
        maxWidth: "50%",
        enable: {
          top: false,
          right: false,
          bottom: false,
          left: true,
          topRight: false,
          bottomRight: false,
          bottomLeft: false,
          topLeft: false
        },
        onResizeStart: this.onResizeStart,
        onResize: this.onResize,
        onResizeStop: this.onResizeStop,
        className: "mx_RightPanel_ResizeWrapper",
        handleClasses: {
          left: "mx_ResizeHandle_horizontal"
        }
      }, panelView);
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_MainSplit"
    }, bodyView, children);
  }

}) || _class);
exports.default = MainSplit;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3N0cnVjdHVyZXMvTWFpblNwbGl0LnRzeCJdLCJuYW1lcyI6WyJNYWluU3BsaXQiLCJSZWFjdCIsIkNvbXBvbmVudCIsInByb3BzIiwicmVzaXplTm90aWZpZXIiLCJzdGFydFJlc2l6aW5nIiwibm90aWZ5UmlnaHRIYW5kbGVSZXNpemVkIiwiZXZlbnQiLCJkaXJlY3Rpb24iLCJlbGVtZW50UmVmIiwiZGVsdGEiLCJzdG9wUmVzaXppbmciLCJ3aW5kb3ciLCJsb2NhbFN0b3JhZ2UiLCJzZXRJdGVtIiwibG9hZFNpZGVQYW5lbFNpemUiLCJ3aWR0aCIsInRvU3RyaW5nIiwicmhzU2l6ZSIsInBhcnNlSW50IiwiZ2V0SXRlbSIsImlzTmFOIiwiaGVpZ2h0IiwicmVuZGVyIiwiYm9keVZpZXciLCJDaGlsZHJlbiIsIm9ubHkiLCJjaGlsZHJlbiIsInBhbmVsVmlldyIsInBhbmVsIiwiaGFzUmVzaXplciIsImNvbGxhcHNlZFJocyIsInRvcCIsInJpZ2h0IiwiYm90dG9tIiwibGVmdCIsInRvcFJpZ2h0IiwiYm90dG9tUmlnaHQiLCJib3R0b21MZWZ0IiwidG9wTGVmdCIsIm9uUmVzaXplU3RhcnQiLCJvblJlc2l6ZSIsIm9uUmVzaXplU3RvcCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFpQkE7O0FBQ0E7O0FBQ0E7Ozs7SUFXcUJBLFMsV0FEcEIsZ0RBQXFCLHNCQUFyQixDLGdCQUFELE1BQ3FCQSxTQURyQixTQUN1Q0MsZUFBTUMsU0FEN0MsQ0FDK0Q7QUFBQTtBQUFBO0FBQUEseURBQ25DLE1BQVk7QUFDaEMsV0FBS0MsS0FBTCxDQUFXQyxjQUFYLENBQTBCQyxhQUExQjtBQUNILEtBSDBEO0FBQUEsb0RBS3hDLE1BQVk7QUFDM0IsV0FBS0YsS0FBTCxDQUFXQyxjQUFYLENBQTBCRSx3QkFBMUI7QUFDSCxLQVAwRDtBQUFBLHdEQVNwQyxDQUNuQkMsS0FEbUIsRUFDYUMsU0FEYixFQUNtQ0MsVUFEbkMsRUFDNERDLEtBRDVELEtBRVo7QUFDUCxXQUFLUCxLQUFMLENBQVdDLGNBQVgsQ0FBMEJPLFlBQTFCO0FBQ0FDLE1BQUFBLE1BQU0sQ0FBQ0MsWUFBUCxDQUFvQkMsT0FBcEIsQ0FBNEIsYUFBNUIsRUFBMkMsQ0FBQyxLQUFLQyxpQkFBTCxHQUF5QkMsS0FBekIsR0FBaUNOLEtBQUssQ0FBQ00sS0FBeEMsRUFBK0NDLFFBQS9DLEVBQTNDO0FBQ0gsS0FkMEQ7QUFBQTs7QUFnQm5ERixFQUFBQSxpQkFBaUIsR0FBNkM7QUFDbEUsUUFBSUcsT0FBTyxHQUFHQyxRQUFRLENBQUNQLE1BQU0sQ0FBQ0MsWUFBUCxDQUFvQk8sT0FBcEIsQ0FBNEIsYUFBNUIsQ0FBRCxFQUE2QyxFQUE3QyxDQUF0Qjs7QUFFQSxRQUFJQyxLQUFLLENBQUNILE9BQUQsQ0FBVCxFQUFvQjtBQUNoQkEsTUFBQUEsT0FBTyxHQUFHLEdBQVY7QUFDSDs7QUFFRCxXQUFPO0FBQ0hJLE1BQUFBLE1BQU0sRUFBRSxNQURMO0FBRUhOLE1BQUFBLEtBQUssRUFBRUU7QUFGSixLQUFQO0FBSUg7O0FBRU1LLEVBQUFBLE1BQU0sR0FBZ0I7QUFDekIsVUFBTUMsUUFBUSxHQUFHdkIsZUFBTXdCLFFBQU4sQ0FBZUMsSUFBZixDQUFvQixLQUFLdkIsS0FBTCxDQUFXd0IsUUFBL0IsQ0FBakI7O0FBQ0EsVUFBTUMsU0FBUyxHQUFHLEtBQUt6QixLQUFMLENBQVcwQixLQUE3QjtBQUVBLFVBQU1DLFVBQVUsR0FBRyxDQUFDLEtBQUszQixLQUFMLENBQVc0QixZQUFaLElBQTRCSCxTQUEvQztBQUVBLFFBQUlELFFBQUo7O0FBQ0EsUUFBSUcsVUFBSixFQUFnQjtBQUNaSCxNQUFBQSxRQUFRLGdCQUFHLDZCQUFDLHNCQUFEO0FBQ1AsUUFBQSxXQUFXLEVBQUUsS0FBS1osaUJBQUwsRUFETjtBQUVQLFFBQUEsUUFBUSxFQUFFLEdBRkg7QUFHUCxRQUFBLFFBQVEsRUFBQyxLQUhGO0FBSVAsUUFBQSxNQUFNLEVBQUU7QUFDSmlCLFVBQUFBLEdBQUcsRUFBRSxLQUREO0FBRUpDLFVBQUFBLEtBQUssRUFBRSxLQUZIO0FBR0pDLFVBQUFBLE1BQU0sRUFBRSxLQUhKO0FBSUpDLFVBQUFBLElBQUksRUFBRSxJQUpGO0FBS0pDLFVBQUFBLFFBQVEsRUFBRSxLQUxOO0FBTUpDLFVBQUFBLFdBQVcsRUFBRSxLQU5UO0FBT0pDLFVBQUFBLFVBQVUsRUFBRSxLQVBSO0FBUUpDLFVBQUFBLE9BQU8sRUFBRTtBQVJMLFNBSkQ7QUFjUCxRQUFBLGFBQWEsRUFBRSxLQUFLQyxhQWRiO0FBZVAsUUFBQSxRQUFRLEVBQUUsS0FBS0MsUUFmUjtBQWdCUCxRQUFBLFlBQVksRUFBRSxLQUFLQyxZQWhCWjtBQWlCUCxRQUFBLFNBQVMsRUFBQyw2QkFqQkg7QUFrQlAsUUFBQSxhQUFhLEVBQUU7QUFBRVAsVUFBQUEsSUFBSSxFQUFFO0FBQVI7QUFsQlIsU0FvQkxQLFNBcEJLLENBQVg7QUFzQkg7O0FBRUQsd0JBQU87QUFBSyxNQUFBLFNBQVMsRUFBQztBQUFmLE9BQ0RKLFFBREMsRUFFREcsUUFGQyxDQUFQO0FBSUg7O0FBakUwRCxDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbkNvcHlyaWdodCAyMDE4IE5ldyBWZWN0b3IgTHRkXG5Db3B5cmlnaHQgMjAxOSBUaGUgTWF0cml4Lm9yZyBGb3VuZGF0aW9uIEMuSS5DLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBOdW1iZXJTaXplLCBSZXNpemFibGUgfSBmcm9tICdyZS1yZXNpemFibGUnO1xuaW1wb3J0IHsgcmVwbGFjZWFibGVDb21wb25lbnQgfSBmcm9tIFwiLi4vLi4vdXRpbHMvcmVwbGFjZWFibGVDb21wb25lbnRcIjtcbmltcG9ydCBSZXNpemVOb3RpZmllciBmcm9tIFwiLi4vLi4vdXRpbHMvUmVzaXplTm90aWZpZXJcIjtcbmltcG9ydCB7IERpcmVjdGlvbiB9IGZyb20gXCJyZS1yZXNpemFibGUvbGliL3Jlc2l6ZXJcIjtcblxuaW50ZXJmYWNlIElQcm9wcyB7XG4gICAgcmVzaXplTm90aWZpZXI6IFJlc2l6ZU5vdGlmaWVyO1xuICAgIGNvbGxhcHNlZFJocz86IGJvb2xlYW47XG4gICAgcGFuZWw/OiBKU1guRWxlbWVudDtcbn1cblxuQHJlcGxhY2VhYmxlQ29tcG9uZW50KFwic3RydWN0dXJlcy5NYWluU3BsaXRcIilcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1haW5TcGxpdCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxJUHJvcHM+IHtcbiAgICBwcml2YXRlIG9uUmVzaXplU3RhcnQgPSAoKTogdm9pZCA9PiB7XG4gICAgICAgIHRoaXMucHJvcHMucmVzaXplTm90aWZpZXIuc3RhcnRSZXNpemluZygpO1xuICAgIH07XG5cbiAgICBwcml2YXRlIG9uUmVzaXplID0gKCk6IHZvaWQgPT4ge1xuICAgICAgICB0aGlzLnByb3BzLnJlc2l6ZU5vdGlmaWVyLm5vdGlmeVJpZ2h0SGFuZGxlUmVzaXplZCgpO1xuICAgIH07XG5cbiAgICBwcml2YXRlIG9uUmVzaXplU3RvcCA9IChcbiAgICAgICAgZXZlbnQ6IE1vdXNlRXZlbnQgfCBUb3VjaEV2ZW50LCBkaXJlY3Rpb246IERpcmVjdGlvbiwgZWxlbWVudFJlZjogSFRNTEVsZW1lbnQsIGRlbHRhOiBOdW1iZXJTaXplLFxuICAgICk6IHZvaWQgPT4ge1xuICAgICAgICB0aGlzLnByb3BzLnJlc2l6ZU5vdGlmaWVyLnN0b3BSZXNpemluZygpO1xuICAgICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJteF9yaHNfc2l6ZVwiLCAodGhpcy5sb2FkU2lkZVBhbmVsU2l6ZSgpLndpZHRoICsgZGVsdGEud2lkdGgpLnRvU3RyaW5nKCkpO1xuICAgIH07XG5cbiAgICBwcml2YXRlIGxvYWRTaWRlUGFuZWxTaXplKCk6IHtoZWlnaHQ6IHN0cmluZyB8IG51bWJlciwgd2lkdGg6IG51bWJlcn0ge1xuICAgICAgICBsZXQgcmhzU2l6ZSA9IHBhcnNlSW50KHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbShcIm14X3Joc19zaXplXCIpLCAxMCk7XG5cbiAgICAgICAgaWYgKGlzTmFOKHJoc1NpemUpKSB7XG4gICAgICAgICAgICByaHNTaXplID0gMzUwO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGhlaWdodDogXCIxMDAlXCIsXG4gICAgICAgICAgICB3aWR0aDogcmhzU2l6ZSxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcmVuZGVyKCk6IEpTWC5FbGVtZW50IHtcbiAgICAgICAgY29uc3QgYm9keVZpZXcgPSBSZWFjdC5DaGlsZHJlbi5vbmx5KHRoaXMucHJvcHMuY2hpbGRyZW4pO1xuICAgICAgICBjb25zdCBwYW5lbFZpZXcgPSB0aGlzLnByb3BzLnBhbmVsO1xuXG4gICAgICAgIGNvbnN0IGhhc1Jlc2l6ZXIgPSAhdGhpcy5wcm9wcy5jb2xsYXBzZWRSaHMgJiYgcGFuZWxWaWV3O1xuXG4gICAgICAgIGxldCBjaGlsZHJlbjtcbiAgICAgICAgaWYgKGhhc1Jlc2l6ZXIpIHtcbiAgICAgICAgICAgIGNoaWxkcmVuID0gPFJlc2l6YWJsZVxuICAgICAgICAgICAgICAgIGRlZmF1bHRTaXplPXt0aGlzLmxvYWRTaWRlUGFuZWxTaXplKCl9XG4gICAgICAgICAgICAgICAgbWluV2lkdGg9ezI2NH1cbiAgICAgICAgICAgICAgICBtYXhXaWR0aD1cIjUwJVwiXG4gICAgICAgICAgICAgICAgZW5hYmxlPXt7XG4gICAgICAgICAgICAgICAgICAgIHRvcDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgYm90dG9tOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgbGVmdDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgdG9wUmlnaHQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBib3R0b21SaWdodDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGJvdHRvbUxlZnQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICB0b3BMZWZ0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgIG9uUmVzaXplU3RhcnQ9e3RoaXMub25SZXNpemVTdGFydH1cbiAgICAgICAgICAgICAgICBvblJlc2l6ZT17dGhpcy5vblJlc2l6ZX1cbiAgICAgICAgICAgICAgICBvblJlc2l6ZVN0b3A9e3RoaXMub25SZXNpemVTdG9wfVxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cIm14X1JpZ2h0UGFuZWxfUmVzaXplV3JhcHBlclwiXG4gICAgICAgICAgICAgICAgaGFuZGxlQ2xhc3Nlcz17eyBsZWZ0OiBcIm14X1Jlc2l6ZUhhbmRsZV9ob3Jpem9udGFsXCIgfX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICB7IHBhbmVsVmlldyB9XG4gICAgICAgICAgICA8L1Jlc2l6YWJsZT47XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9XCJteF9NYWluU3BsaXRcIj5cbiAgICAgICAgICAgIHsgYm9keVZpZXcgfVxuICAgICAgICAgICAgeyBjaGlsZHJlbiB9XG4gICAgICAgIDwvZGl2PjtcbiAgICB9XG59XG4iXX0=