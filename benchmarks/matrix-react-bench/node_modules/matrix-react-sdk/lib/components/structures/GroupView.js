"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _MatrixClientPeg = require("../../MatrixClientPeg");

var sdk = _interopRequireWildcard(require("../../index"));

var _dispatcher = _interopRequireDefault(require("../../dispatcher/dispatcher"));

var _HostingLink = require("../../utils/HostingLink");

var _HtmlUtils = require("../../HtmlUtils");

var _languageHandler = require("../../languageHandler");

var _AccessibleButton = _interopRequireDefault(require("../views/elements/AccessibleButton"));

var _GroupHeaderButtons = _interopRequireDefault(require("../views/right_panel/GroupHeaderButtons"));

var _MainSplit = _interopRequireDefault(require("./MainSplit"));

var _RightPanel = _interopRequireDefault(require("./RightPanel"));

var _Modal = _interopRequireDefault(require("../../Modal"));

var _classnames = _interopRequireDefault(require("classnames"));

var _GroupStore = _interopRequireDefault(require("../../stores/GroupStore"));

var _FlairStore = _interopRequireDefault(require("../../stores/FlairStore"));

var _GroupAddressPicker = require("../../GroupAddressPicker");

var _Permalinks = require("../../utils/permalinks/Permalinks");

var _group = require("matrix-js-sdk/src/models/group");

var _utils = require("matrix-js-sdk/src/utils");

var _RightPanelStore = _interopRequireDefault(require("../../stores/RightPanelStore"));

var _AutoHideScrollbar = _interopRequireDefault(require("./AutoHideScrollbar"));

var _Media = require("../../customisations/Media");

var _replaceableComponent = require("../../utils/replaceableComponent");

var _space = require("../../utils/space");

var _actions = require("../../dispatcher/actions");

var _RightPanelStorePhases = require("../../stores/RightPanelStorePhases");

var _logger = require("matrix-js-sdk/src/logger");

var _dec, _class, _class2, _temp;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const LONG_DESC_PLACEHOLDER = (0, _languageHandler._td)(`<h1>HTML for your community's page</h1>
<p>
    Use the long description to introduce new members to the community, or distribute
    some important <a href="foo">links</a>
</p>
<p>
    You can even add images with Matrix URLs <img src="mxc://url" />
</p>
`);

const RoomSummaryType = _propTypes.default.shape({
  room_id: _propTypes.default.string.isRequired,
  profile: _propTypes.default.shape({
    name: _propTypes.default.string,
    avatar_url: _propTypes.default.string,
    canonical_alias: _propTypes.default.string
  }).isRequired
});

const UserSummaryType = _propTypes.default.shape({
  summaryInfo: _propTypes.default.shape({
    user_id: _propTypes.default.string.isRequired,
    role_id: _propTypes.default.string,
    avatar_url: _propTypes.default.string,
    displayname: _propTypes.default.string
  }).isRequired
});

class CategoryRoomList extends _react.default.Component {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "onAddRoomsToSummaryClicked", ev => {
      ev.preventDefault();
      const AddressPickerDialog = sdk.getComponent("dialogs.AddressPickerDialog");

      _Modal.default.createTrackedDialog('Add Rooms to Group Summary', '', AddressPickerDialog, {
        title: (0, _languageHandler._t)('Add rooms to the community summary'),
        description: (0, _languageHandler._t)("Which rooms would you like to add to this summary?"),
        placeholder: (0, _languageHandler._t)("Room name or address"),
        button: (0, _languageHandler._t)("Add to summary"),
        pickerType: 'room',
        validAddressTypes: ['mx-room-id'],
        groupId: this.props.groupId,
        onFinished: (success, addrs) => {
          if (!success) return;
          const errorList = [];
          Promise.allSettled(addrs.map(addr => {
            return _GroupStore.default.addRoomToGroupSummary(this.props.groupId, addr.address).catch(() => {
              errorList.push(addr.address);
            });
          })).then(() => {
            if (errorList.length === 0) {
              return;
            }

            const ErrorDialog = sdk.getComponent("dialogs.ErrorDialog");

            _Modal.default.createTrackedDialog('Failed to add the following room to the group summary', '', ErrorDialog, {
              title: (0, _languageHandler._t)("Failed to add the following rooms to the summary of %(groupId)s:", {
                groupId: this.props.groupId
              }),
              description: errorList.join(", ")
            });
          });
        }
      },
      /*className=*/
      null,
      /*isPriority=*/
      false,
      /*isStatic=*/
      true);
    });
  }

  render() {
    const addButton = this.props.editing ? /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      className: "mx_GroupView_featuredThings_addButton",
      onClick: this.onAddRoomsToSummaryClicked
    }, /*#__PURE__*/_react.default.createElement("img", {
      src: require("../../../res/img/icons-create-room.svg"),
      width: "64",
      height: "64"
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_GroupView_featuredThings_addButton_label"
    }, (0, _languageHandler._t)('Add a Room'))) : /*#__PURE__*/_react.default.createElement("div", null);
    const roomNodes = this.props.rooms.map(r => {
      return /*#__PURE__*/_react.default.createElement(FeaturedRoom, {
        key: r.room_id,
        groupId: this.props.groupId,
        editing: this.props.editing,
        summaryInfo: r
      });
    });

    let catHeader = /*#__PURE__*/_react.default.createElement("div", null);

    if (this.props.category && this.props.category.profile) {
      catHeader = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_GroupView_featuredThings_category"
      }, this.props.category.profile.name);
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_GroupView_featuredThings_container"
    }, catHeader, roomNodes, addButton);
  }

}

(0, _defineProperty2.default)(CategoryRoomList, "propTypes", {
  rooms: _propTypes.default.arrayOf(RoomSummaryType).isRequired,
  category: _propTypes.default.shape({
    profile: _propTypes.default.shape({
      name: _propTypes.default.string
    }).isRequired
  }),
  groupId: _propTypes.default.string.isRequired,
  // Whether the list should be editable
  editing: _propTypes.default.bool.isRequired
});

class FeaturedRoom extends _react.default.Component {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "onClick", e => {
      e.preventDefault();
      e.stopPropagation();

      _dispatcher.default.dispatch({
        action: _actions.Action.ViewRoom,
        room_alias: this.props.summaryInfo.profile.canonical_alias,
        room_id: this.props.summaryInfo.room_id
      });
    });
    (0, _defineProperty2.default)(this, "onDeleteClicked", e => {
      e.preventDefault();
      e.stopPropagation();

      _GroupStore.default.removeRoomFromGroupSummary(this.props.groupId, this.props.summaryInfo.room_id).catch(err => {
        _logger.logger.error('Error whilst removing room from group summary', err);

        const roomName = this.props.summaryInfo.name || this.props.summaryInfo.canonical_alias || this.props.summaryInfo.room_id;
        const ErrorDialog = sdk.getComponent("dialogs.ErrorDialog");

        _Modal.default.createTrackedDialog('Failed to remove room from group summary', '', ErrorDialog, {
          title: (0, _languageHandler._t)("Failed to remove the room from the summary of %(groupId)s", {
            groupId: this.props.groupId
          }),
          description: (0, _languageHandler._t)("The room '%(roomName)s' could not be removed from the summary.", {
            roomName
          })
        });
      });
    });
  }

  render() {
    const RoomAvatar = sdk.getComponent("avatars.RoomAvatar");
    const roomName = this.props.summaryInfo.profile.name || this.props.summaryInfo.profile.canonical_alias || (0, _languageHandler._t)("Unnamed Room");
    const oobData = {
      roomId: this.props.summaryInfo.room_id,
      avatarUrl: this.props.summaryInfo.profile.avatar_url,
      name: roomName
    };
    let permalink = null;

    if (this.props.summaryInfo.profile && this.props.summaryInfo.profile.canonical_alias) {
      permalink = (0, _Permalinks.makeGroupPermalink)(this.props.summaryInfo.profile.canonical_alias);
    }

    let roomNameNode = null;

    if (permalink) {
      roomNameNode = /*#__PURE__*/_react.default.createElement("a", {
        href: permalink,
        onClick: this.onClick
      }, roomName);
    } else {
      roomNameNode = /*#__PURE__*/_react.default.createElement("span", null, roomName);
    }

    const deleteButton = this.props.editing ? /*#__PURE__*/_react.default.createElement("img", {
      className: "mx_GroupView_featuredThing_deleteButton",
      src: require("../../../res/img/cancel-small.svg"),
      width: "14",
      height: "14",
      alt: "Delete",
      onClick: this.onDeleteClicked
    }) : /*#__PURE__*/_react.default.createElement("div", null);
    return /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      className: "mx_GroupView_featuredThing",
      onClick: this.onClick
    }, /*#__PURE__*/_react.default.createElement(RoomAvatar, {
      oobData: oobData,
      width: 64,
      height: 64
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_GroupView_featuredThing_name"
    }, roomNameNode), deleteButton);
  }

}

(0, _defineProperty2.default)(FeaturedRoom, "propTypes", {
  summaryInfo: RoomSummaryType.isRequired,
  editing: _propTypes.default.bool.isRequired,
  groupId: _propTypes.default.string.isRequired
});

class RoleUserList extends _react.default.Component {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "onAddUsersClicked", ev => {
      ev.preventDefault();
      const AddressPickerDialog = sdk.getComponent("dialogs.AddressPickerDialog");

      _Modal.default.createTrackedDialog('Add Users to Group Summary', '', AddressPickerDialog, {
        title: (0, _languageHandler._t)('Add users to the community summary'),
        description: (0, _languageHandler._t)("Who would you like to add to this summary?"),
        placeholder: (0, _languageHandler._t)("Name or Matrix ID"),
        button: (0, _languageHandler._t)("Add to summary"),
        validAddressTypes: ['mx-user-id'],
        groupId: this.props.groupId,
        shouldOmitSelf: false,
        onFinished: (success, addrs) => {
          if (!success) return;
          const errorList = [];
          Promise.allSettled(addrs.map(addr => {
            return _GroupStore.default.addUserToGroupSummary(addr.address).catch(() => {
              errorList.push(addr.address);
            });
          })).then(() => {
            if (errorList.length === 0) {
              return;
            }

            const ErrorDialog = sdk.getComponent("dialogs.ErrorDialog");

            _Modal.default.createTrackedDialog('Failed to add the following users to the community summary', '', ErrorDialog, {
              title: (0, _languageHandler._t)("Failed to add the following users to the summary of %(groupId)s:", {
                groupId: this.props.groupId
              }),
              description: errorList.join(", ")
            });
          });
        }
      },
      /*className=*/
      null,
      /*isPriority=*/
      false,
      /*isStatic=*/
      true);
    });
  }

  render() {
    const addButton = this.props.editing ? /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      className: "mx_GroupView_featuredThings_addButton",
      onClick: this.onAddUsersClicked
    }, /*#__PURE__*/_react.default.createElement("img", {
      src: require("../../../res/img/icons-create-room.svg"),
      width: "64",
      height: "64"
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_GroupView_featuredThings_addButton_label"
    }, (0, _languageHandler._t)('Add a User'))) : /*#__PURE__*/_react.default.createElement("div", null);
    const userNodes = this.props.users.map(u => {
      return /*#__PURE__*/_react.default.createElement(FeaturedUser, {
        key: u.user_id,
        summaryInfo: u,
        editing: this.props.editing,
        groupId: this.props.groupId
      });
    });

    let roleHeader = /*#__PURE__*/_react.default.createElement("div", null);

    if (this.props.role && this.props.role.profile) {
      roleHeader = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_GroupView_featuredThings_category"
      }, this.props.role.profile.name);
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_GroupView_featuredThings_container"
    }, roleHeader, userNodes, addButton);
  }

}

(0, _defineProperty2.default)(RoleUserList, "propTypes", {
  users: _propTypes.default.arrayOf(UserSummaryType).isRequired,
  role: _propTypes.default.shape({
    profile: _propTypes.default.shape({
      name: _propTypes.default.string
    }).isRequired
  }),
  groupId: _propTypes.default.string.isRequired,
  // Whether the list should be editable
  editing: _propTypes.default.bool.isRequired
});

class FeaturedUser extends _react.default.Component {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "onClick", e => {
      e.preventDefault();
      e.stopPropagation();

      _dispatcher.default.dispatch({
        action: 'view_start_chat_or_reuse',
        user_id: this.props.summaryInfo.user_id
      });
    });
    (0, _defineProperty2.default)(this, "onDeleteClicked", e => {
      e.preventDefault();
      e.stopPropagation();

      _GroupStore.default.removeUserFromGroupSummary(this.props.groupId, this.props.summaryInfo.user_id).catch(err => {
        _logger.logger.error('Error whilst removing user from group summary', err);

        const displayName = this.props.summaryInfo.displayname || this.props.summaryInfo.user_id;
        const ErrorDialog = sdk.getComponent("dialogs.ErrorDialog");

        _Modal.default.createTrackedDialog('Failed to remove user from community summary', '', ErrorDialog, {
          title: (0, _languageHandler._t)("Failed to remove a user from the summary of %(groupId)s", {
            groupId: this.props.groupId
          }),
          description: (0, _languageHandler._t)("The user '%(displayName)s' could not be removed from the summary.", {
            displayName
          })
        });
      });
    });
  }

  render() {
    const BaseAvatar = sdk.getComponent("avatars.BaseAvatar");
    const name = this.props.summaryInfo.displayname || this.props.summaryInfo.user_id;
    const permalink = (0, _Permalinks.makeUserPermalink)(this.props.summaryInfo.user_id);

    const userNameNode = /*#__PURE__*/_react.default.createElement("a", {
      href: permalink,
      onClick: this.onClick
    }, name);

    const httpUrl = (0, _Media.mediaFromMxc)(this.props.summaryInfo.avatar_url).getSquareThumbnailHttp(64);
    const deleteButton = this.props.editing ? /*#__PURE__*/_react.default.createElement("img", {
      className: "mx_GroupView_featuredThing_deleteButton",
      src: require("../../../res/img/cancel-small.svg"),
      width: "14",
      height: "14",
      alt: "Delete",
      onClick: this.onDeleteClicked
    }) : /*#__PURE__*/_react.default.createElement("div", null);
    return /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      className: "mx_GroupView_featuredThing",
      onClick: this.onClick
    }, /*#__PURE__*/_react.default.createElement(BaseAvatar, {
      name: name,
      url: httpUrl,
      width: 64,
      height: 64
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_GroupView_featuredThing_name"
    }, userNameNode), deleteButton);
  }

}

(0, _defineProperty2.default)(FeaturedUser, "propTypes", {
  summaryInfo: UserSummaryType.isRequired,
  editing: _propTypes.default.bool.isRequired,
  groupId: _propTypes.default.string.isRequired
});
const GROUP_JOINPOLICY_OPEN = "open";
const GROUP_JOINPOLICY_INVITE = "invite";
const UPGRADE_NOTICE_LS_KEY = "mx_hide_community_upgrade_notice";
let GroupView = (_dec = (0, _replaceableComponent.replaceableComponent)("structures.GroupView"), _dec(_class = (_temp = _class2 = class GroupView extends _react.default.Component {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "state", {
      summary: null,
      isGroupPublicised: null,
      isUserPrivileged: null,
      groupRooms: null,
      groupRoomsLoading: null,
      error: null,
      editing: false,
      saving: false,
      uploadingAvatar: false,
      avatarChanged: false,
      membershipBusy: false,
      publicityBusy: false,
      inviterProfile: null,
      showRightPanel: _RightPanelStore.default.getSharedInstance().isOpenForGroup,
      showUpgradeNotice: !localStorage.getItem(UPGRADE_NOTICE_LS_KEY)
    });
    (0, _defineProperty2.default)(this, "_onRightPanelStoreUpdate", () => {
      this.setState({
        showRightPanel: _RightPanelStore.default.getSharedInstance().isOpenForGroup
      });
    });
    (0, _defineProperty2.default)(this, "_onGroupMyMembership", group => {
      if (this._unmounted || group.groupId !== this.props.groupId) return;

      if (group.myMembership === 'leave') {
        // Leave settings - the user might have clicked the "Leave" button
        this._closeSettings();
      }

      this.setState({
        membershipBusy: false
      });
    });
    (0, _defineProperty2.default)(this, "onGroupStoreUpdated", firstInit => {
      if (this._unmounted) return;

      const summary = _GroupStore.default.getSummary(this.props.groupId);

      if (summary.profile) {
        // Default profile fields should be "" for later sending to the server (which
        // requires that the fields are strings, not null)
        ["avatar_url", "long_description", "name", "short_description"].forEach(k => {
          summary.profile[k] = summary.profile[k] || "";
        });
      }

      this.setState({
        summary,
        summaryLoading: !_GroupStore.default.isStateReady(this.props.groupId, _GroupStore.default.STATE_KEY.Summary),
        isGroupPublicised: _GroupStore.default.getGroupPublicity(this.props.groupId),
        isUserPrivileged: _GroupStore.default.isUserPrivileged(this.props.groupId),
        groupRooms: _GroupStore.default.getGroupRooms(this.props.groupId),
        groupRoomsLoading: !_GroupStore.default.isStateReady(this.props.groupId, _GroupStore.default.STATE_KEY.GroupRooms),
        isUserMember: _GroupStore.default.getGroupMembers(this.props.groupId).some(m => m.userId === this._matrixClient.credentials.userId)
      }); // XXX: This might not work but this.props.groupIsNew unused anyway

      if (this.props.groupIsNew && firstInit) {
        this._onEditClick();
      }
    });
    (0, _defineProperty2.default)(this, "_onEditClick", () => {
      this.setState({
        editing: true,
        profileForm: Object.assign({}, this.state.summary.profile),
        joinableForm: {
          policyType: this.state.summary.profile.is_openly_joinable ? GROUP_JOINPOLICY_OPEN : GROUP_JOINPOLICY_INVITE
        }
      });
    });
    (0, _defineProperty2.default)(this, "_onShareClick", () => {
      const ShareDialog = sdk.getComponent("dialogs.ShareDialog");

      _Modal.default.createTrackedDialog('share community dialog', '', ShareDialog, {
        target: this._matrixClient.getGroup(this.props.groupId) || new _group.Group(this.props.groupId)
      });
    });
    (0, _defineProperty2.default)(this, "_onCancelClick", () => {
      this._closeSettings();
    });
    (0, _defineProperty2.default)(this, "_onAction", payload => {
      switch (payload.action) {
        // NOTE: close_settings is an app-wide dispatch; as it is dispatched from MatrixChat
        case 'close_settings':
          this.setState({
            editing: false,
            profileForm: null
          });
          break;

        default:
          break;
      }
    });
    (0, _defineProperty2.default)(this, "_closeSettings", () => {
      _dispatcher.default.dispatch({
        action: 'close_settings'
      });
    });
    (0, _defineProperty2.default)(this, "_onNameChange", value => {
      const newProfileForm = Object.assign(this.state.profileForm, {
        name: value
      });
      this.setState({
        profileForm: newProfileForm
      });
    });
    (0, _defineProperty2.default)(this, "_onShortDescChange", value => {
      const newProfileForm = Object.assign(this.state.profileForm, {
        short_description: value
      });
      this.setState({
        profileForm: newProfileForm
      });
    });
    (0, _defineProperty2.default)(this, "_onLongDescChange", e => {
      const newProfileForm = Object.assign(this.state.profileForm, {
        long_description: e.target.value
      });
      this.setState({
        profileForm: newProfileForm
      });
    });
    (0, _defineProperty2.default)(this, "_onAvatarSelected", ev => {
      const file = ev.target.files[0];
      if (!file) return;
      this.setState({
        uploadingAvatar: true
      });

      this._matrixClient.uploadContent(file).then(url => {
        const newProfileForm = Object.assign(this.state.profileForm, {
          avatar_url: url
        });
        this.setState({
          uploadingAvatar: false,
          profileForm: newProfileForm,
          // Indicate that FlairStore needs to be poked to show this change
          // in TagTile (GroupFilterPanel), Flair and GroupTile (MyGroups).
          avatarChanged: true
        });
      }).catch(e => {
        this.setState({
          uploadingAvatar: false
        });
        const ErrorDialog = sdk.getComponent("dialogs.ErrorDialog");

        _logger.logger.error("Failed to upload avatar image", e);

        _Modal.default.createTrackedDialog('Failed to upload image', '', ErrorDialog, {
          title: (0, _languageHandler._t)('Error'),
          description: (0, _languageHandler._t)('Failed to upload image')
        });
      });
    });
    (0, _defineProperty2.default)(this, "_onJoinableChange", ev => {
      this.setState({
        joinableForm: {
          policyType: ev.target.value
        }
      });
    });
    (0, _defineProperty2.default)(this, "_onSaveClick", () => {
      this.setState({
        saving: true
      });
      const savePromise = this.state.isUserPrivileged ? this._saveGroup() : Promise.resolve();
      savePromise.then(result => {
        this.setState({
          saving: false,
          editing: false,
          summary: null
        });

        this._initGroupStore(this.props.groupId);

        if (this.state.avatarChanged) {
          // XXX: Evil - poking a store should be done from an async action
          _FlairStore.default.refreshGroupProfile(this._matrixClient, this.props.groupId);
        }
      }).catch(e => {
        this.setState({
          saving: false
        });
        const ErrorDialog = sdk.getComponent("dialogs.ErrorDialog");

        _logger.logger.error("Failed to save community profile", e);

        _Modal.default.createTrackedDialog('Failed to update group', '', ErrorDialog, {
          title: (0, _languageHandler._t)('Error'),
          description: (0, _languageHandler._t)('Failed to update community')
        });
      }).finally(() => {
        this.setState({
          avatarChanged: false
        });
      });
    });
    (0, _defineProperty2.default)(this, "_onAcceptInviteClick", async () => {
      this.setState({
        membershipBusy: true
      }); // Wait 500ms to prevent flashing. Do this before sending a request otherwise we risk the
      // spinner disappearing after we have fetched new group data.

      await (0, _utils.sleep)(500);

      _GroupStore.default.acceptGroupInvite(this.props.groupId).then(() => {// don't reset membershipBusy here: wait for the membership change to come down the sync
      }).catch(e => {
        this.setState({
          membershipBusy: false
        });
        const ErrorDialog = sdk.getComponent("dialogs.ErrorDialog");

        _Modal.default.createTrackedDialog('Error accepting invite', '', ErrorDialog, {
          title: (0, _languageHandler._t)("Error"),
          description: (0, _languageHandler._t)("Unable to accept invite")
        });
      });
    });
    (0, _defineProperty2.default)(this, "_onRejectInviteClick", async () => {
      this.setState({
        membershipBusy: true
      }); // Wait 500ms to prevent flashing. Do this before sending a request otherwise we risk the
      // spinner disappearing after we have fetched new group data.

      await (0, _utils.sleep)(500);

      _GroupStore.default.leaveGroup(this.props.groupId).then(() => {// don't reset membershipBusy here: wait for the membership change to come down the sync
      }).catch(e => {
        this.setState({
          membershipBusy: false
        });
        const ErrorDialog = sdk.getComponent("dialogs.ErrorDialog");

        _Modal.default.createTrackedDialog('Error rejecting invite', '', ErrorDialog, {
          title: (0, _languageHandler._t)("Error"),
          description: (0, _languageHandler._t)("Unable to reject invite")
        });
      });
    });
    (0, _defineProperty2.default)(this, "_onJoinClick", async () => {
      if (this._matrixClient.isGuest()) {
        _dispatcher.default.dispatch({
          action: 'require_registration',
          screen_after: {
            screen: `group/${this.props.groupId}`
          }
        });

        return;
      }

      this.setState({
        membershipBusy: true
      }); // Wait 500ms to prevent flashing. Do this before sending a request otherwise we risk the
      // spinner disappearing after we have fetched new group data.

      await (0, _utils.sleep)(500);

      _GroupStore.default.joinGroup(this.props.groupId).then(() => {// don't reset membershipBusy here: wait for the membership change to come down the sync
      }).catch(e => {
        this.setState({
          membershipBusy: false
        });
        const ErrorDialog = sdk.getComponent("dialogs.ErrorDialog");

        _Modal.default.createTrackedDialog('Error joining room', '', ErrorDialog, {
          title: (0, _languageHandler._t)("Error"),
          description: (0, _languageHandler._t)("Unable to join community")
        });
      });
    });
    (0, _defineProperty2.default)(this, "_onLeaveClick", () => {
      const QuestionDialog = sdk.getComponent("dialogs.QuestionDialog");

      const warnings = this._leaveGroupWarnings();

      _Modal.default.createTrackedDialog('Leave Group', '', QuestionDialog, {
        title: (0, _languageHandler._t)("Leave Community"),
        description: /*#__PURE__*/_react.default.createElement("span", null, (0, _languageHandler._t)("Leave %(groupName)s?", {
          groupName: this.props.groupId
        }), warnings),
        button: (0, _languageHandler._t)("Leave"),
        danger: this.state.isUserPrivileged,
        onFinished: async confirmed => {
          if (!confirmed) return;
          this.setState({
            membershipBusy: true
          }); // Wait 500ms to prevent flashing. Do this before sending a request otherwise we risk the
          // spinner disappearing after we have fetched new group data.

          await (0, _utils.sleep)(500);

          _GroupStore.default.leaveGroup(this.props.groupId).then(() => {// don't reset membershipBusy here: wait for the membership change to come down the sync
          }).catch(e => {
            this.setState({
              membershipBusy: false
            });
            const ErrorDialog = sdk.getComponent("dialogs.ErrorDialog");

            _Modal.default.createTrackedDialog('Error leaving community', '', ErrorDialog, {
              title: (0, _languageHandler._t)("Error"),
              description: (0, _languageHandler._t)("Unable to leave community")
            });
          });
        }
      });
    });
    (0, _defineProperty2.default)(this, "_onAddRoomsClick", () => {
      (0, _GroupAddressPicker.showGroupAddRoomDialog)(this.props.groupId);
    });
    (0, _defineProperty2.default)(this, "_dismissUpgradeNotice", () => {
      localStorage.setItem(UPGRADE_NOTICE_LS_KEY, "true");
      this.setState({
        showUpgradeNotice: false
      });
    });
    (0, _defineProperty2.default)(this, "_onCreateSpaceClick", () => {
      (0, _space.createSpaceFromCommunity)(this._matrixClient, this.props.groupId);
    });
    (0, _defineProperty2.default)(this, "_onAdminsLinkClick", () => {
      _dispatcher.default.dispatch({
        action: _actions.Action.SetRightPanelPhase,
        phase: _RightPanelStorePhases.RightPanelPhases.GroupMemberList
      });
    });
  }

  componentDidMount() {
    this._unmounted = false;
    this._matrixClient = _MatrixClientPeg.MatrixClientPeg.get();

    this._matrixClient.on("Group.myMembership", this._onGroupMyMembership);

    this._initGroupStore(this.props.groupId, true);

    this._dispatcherRef = _dispatcher.default.register(this._onAction);
    this._rightPanelStoreToken = _RightPanelStore.default.getSharedInstance().addListener(this._onRightPanelStoreUpdate);
  }

  componentWillUnmount() {
    this._unmounted = true;

    this._matrixClient.removeListener("Group.myMembership", this._onGroupMyMembership);

    _dispatcher.default.unregister(this._dispatcherRef); // Remove RightPanelStore listener


    if (this._rightPanelStoreToken) {
      this._rightPanelStoreToken.remove();
    }
  } // TODO: [REACT-WARNING] Replace with appropriate lifecycle event
  // eslint-disable-next-line camelcase


  UNSAFE_componentWillReceiveProps(newProps) {
    if (this.props.groupId !== newProps.groupId) {
      this.setState({
        summary: null,
        error: null
      }, () => {
        this._initGroupStore(newProps.groupId);
      });
    }
  }

  _initGroupStore(groupId, firstInit) {
    const group = this._matrixClient.getGroup(groupId);

    if (group && group.inviter && group.inviter.userId) {
      this._fetchInviterProfile(group.inviter.userId);
    }

    _GroupStore.default.registerListener(groupId, this.onGroupStoreUpdated.bind(this, firstInit));

    let willDoOnboarding = false; // XXX: This should be more fluxy - let's get the error from GroupStore .getError or something

    _GroupStore.default.on('error', (err, errorGroupId, stateKey) => {
      if (this._unmounted || groupId !== errorGroupId) return;

      if (err.errcode === 'M_GUEST_ACCESS_FORBIDDEN' && !willDoOnboarding) {
        _dispatcher.default.dispatch({
          action: 'do_after_sync_prepared',
          deferred_action: {
            action: 'view_group',
            group_id: groupId
          }
        });

        _dispatcher.default.dispatch({
          action: 'require_registration',
          screen_after: {
            screen: `group/${groupId}`
          }
        });

        willDoOnboarding = true;
      }

      if (stateKey === _GroupStore.default.STATE_KEY.Summary) {
        this.setState({
          summary: null,
          error: err,
          editing: false
        });
      }
    });
  }

  _fetchInviterProfile(userId) {
    this.setState({
      inviterProfileBusy: true
    });

    this._matrixClient.getProfileInfo(userId).then(resp => {
      if (this._unmounted) return;
      this.setState({
        inviterProfile: {
          avatarUrl: resp.avatar_url,
          displayName: resp.displayname
        }
      });
    }).catch(e => {
      _logger.logger.error('Error getting group inviter profile', e);
    }).finally(() => {
      if (this._unmounted) return;
      this.setState({
        inviterProfileBusy: false
      });
    });
  }

  async _saveGroup() {
    await this._matrixClient.setGroupProfile(this.props.groupId, this.state.profileForm);
    await this._matrixClient.setGroupJoinPolicy(this.props.groupId, {
      type: this.state.joinableForm.policyType
    });
  }

  _leaveGroupWarnings() {
    const warnings = [];

    if (this.state.isUserPrivileged) {
      warnings.push( /*#__PURE__*/_react.default.createElement("span", {
        className: "warning"
      }, " "
      /* Whitespace, otherwise the sentences get smashed together */
      , (0, _languageHandler._t)("You are an administrator of this community. You will not be " + "able to rejoin without an invite from another administrator.")));
    }

    return warnings;
  }

  _getGroupSection() {
    const groupSettingsSectionClasses = (0, _classnames.default)({
      "mx_GroupView_group": this.state.editing,
      "mx_GroupView_group_disabled": this.state.editing && !this.state.isUserPrivileged
    });
    const header = this.state.editing ? /*#__PURE__*/_react.default.createElement("h2", null, " ", (0, _languageHandler._t)('Community Settings'), " ") : /*#__PURE__*/_react.default.createElement("div", null);
    const hostingSignupLink = (0, _HostingLink.getHostingLink)('community-settings');
    let hostingSignup = null;

    if (hostingSignupLink && this.state.isUserPrivileged) {
      hostingSignup = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_GroupView_hostingSignup"
      }, (0, _languageHandler._t)("Want more than a community? <a>Get your own server</a>", {}, {
        a: sub => /*#__PURE__*/_react.default.createElement("a", {
          href: hostingSignupLink,
          target: "_blank",
          rel: "noreferrer noopener"
        }, sub)
      }), /*#__PURE__*/_react.default.createElement("a", {
        href: hostingSignupLink,
        target: "_blank",
        rel: "noreferrer noopener"
      }, /*#__PURE__*/_react.default.createElement("img", {
        src: require("../../../res/img/external-link.svg"),
        width: "11",
        height: "10",
        alt: ""
      })));
    }

    const changeDelayWarning = this.state.editing && this.state.isUserPrivileged ? /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_GroupView_changeDelayWarning"
    }, (0, _languageHandler._t)('Changes made to your community <bold1>name</bold1> and <bold2>avatar</bold2> ' + 'might not be seen by other users for up to 30 minutes.', {}, {
      'bold1': sub => /*#__PURE__*/_react.default.createElement("b", null, " ", sub, " "),
      'bold2': sub => /*#__PURE__*/_react.default.createElement("b", null, " ", sub, " ")
    })) : /*#__PURE__*/_react.default.createElement("div", null);
    let communitiesUpgradeNotice;

    if (this.state.showUpgradeNotice) {
      let text;

      if (this.state.isUserPrivileged) {
        text = (0, _languageHandler._t)("You can create a Space from this community <a>here</a>.", {}, {
          a: sub => /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
            onClick: this._onCreateSpaceClick,
            kind: "link"
          }, sub)
        });
      } else {
        text = (0, _languageHandler._t)("Ask the <a>admins</a> of this community to make it into a Space " + "and keep a look out for the invite.", {}, {
          a: sub => /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
            onClick: this._onAdminsLinkClick,
            kind: "link"
          }, sub)
        });
      }

      communitiesUpgradeNotice = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_GroupView_spaceUpgradePrompt"
      }, /*#__PURE__*/_react.default.createElement("h2", null, (0, _languageHandler._t)("Communities can now be made into Spaces")), /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Spaces are a new way to make a community, with new features coming."), "\xA0", text, "\xA0", (0, _languageHandler._t)("Communities won't receive further updates.")), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        className: "mx_GroupView_spaceUpgradePrompt_close",
        onClick: this._dismissUpgradeNotice
      }));
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: groupSettingsSectionClasses
    }, header, hostingSignup, changeDelayWarning, communitiesUpgradeNotice, this._getJoinableNode(), this._getLongDescriptionNode(), this._getRoomsNode());
  }

  _getRoomsNode() {
    const RoomDetailList = sdk.getComponent('rooms.RoomDetailList');
    const AccessibleButton = sdk.getComponent('elements.AccessibleButton');
    const Spinner = sdk.getComponent('elements.Spinner');
    const TooltipButton = sdk.getComponent('elements.TooltipButton');
    const roomsHelpNode = this.state.editing ? /*#__PURE__*/_react.default.createElement(TooltipButton, {
      helpText: (0, _languageHandler._t)('These rooms are displayed to community members on the community page. ' + 'Community members can join the rooms by clicking on them.')
    }) : /*#__PURE__*/_react.default.createElement("div", null);
    const addRoomRow = this.state.editing ? /*#__PURE__*/_react.default.createElement(AccessibleButton, {
      className: "mx_GroupView_rooms_header_addRow",
      onClick: this._onAddRoomsClick
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_GroupView_rooms_header_addRow_button"
    }, /*#__PURE__*/_react.default.createElement("img", {
      src: require("../../../res/img/icons-room-add.svg"),
      width: "24",
      height: "24"
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_GroupView_rooms_header_addRow_label"
    }, (0, _languageHandler._t)('Add rooms to this community'))) : /*#__PURE__*/_react.default.createElement("div", null);
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_GroupView_rooms"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_GroupView_rooms_header"
    }, /*#__PURE__*/_react.default.createElement("h3", null, (0, _languageHandler._t)('Rooms'), roomsHelpNode), addRoomRow), this.state.groupRoomsLoading ? /*#__PURE__*/_react.default.createElement(Spinner, null) : /*#__PURE__*/_react.default.createElement(RoomDetailList, {
      rooms: this.state.groupRooms
    }));
  }

  _getFeaturedRoomsNode() {
    const summary = this.state.summary;
    const defaultCategoryRooms = [];
    const categoryRooms = {};
    summary.rooms_section.rooms.forEach(r => {
      if (r.category_id === null) {
        defaultCategoryRooms.push(r);
      } else {
        let list = categoryRooms[r.category_id];

        if (list === undefined) {
          list = [];
          categoryRooms[r.category_id] = list;
        }

        list.push(r);
      }
    });

    const defaultCategoryNode = /*#__PURE__*/_react.default.createElement(CategoryRoomList, {
      rooms: defaultCategoryRooms,
      groupId: this.props.groupId,
      editing: this.state.editing
    });

    const categoryRoomNodes = Object.keys(categoryRooms).map(catId => {
      const cat = summary.rooms_section.categories[catId];
      return /*#__PURE__*/_react.default.createElement(CategoryRoomList, {
        key: catId,
        rooms: categoryRooms[catId],
        category: cat,
        groupId: this.props.groupId,
        editing: this.state.editing
      });
    });
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_GroupView_featuredThings"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_GroupView_featuredThings_header"
    }, (0, _languageHandler._t)('Featured Rooms:')), defaultCategoryNode, categoryRoomNodes);
  }

  _getFeaturedUsersNode() {
    const summary = this.state.summary;
    const noRoleUsers = [];
    const roleUsers = {};
    summary.users_section.users.forEach(u => {
      if (u.role_id === null) {
        noRoleUsers.push(u);
      } else {
        let list = roleUsers[u.role_id];

        if (list === undefined) {
          list = [];
          roleUsers[u.role_id] = list;
        }

        list.push(u);
      }
    });

    const noRoleNode = /*#__PURE__*/_react.default.createElement(RoleUserList, {
      users: noRoleUsers,
      groupId: this.props.groupId,
      editing: this.state.editing
    });

    const roleUserNodes = Object.keys(roleUsers).map(roleId => {
      const role = summary.users_section.roles[roleId];
      return /*#__PURE__*/_react.default.createElement(RoleUserList, {
        key: roleId,
        users: roleUsers[roleId],
        role: role,
        groupId: this.props.groupId,
        editing: this.state.editing
      });
    });
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_GroupView_featuredThings"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_GroupView_featuredThings_header"
    }, (0, _languageHandler._t)('Featured Users:')), noRoleNode, roleUserNodes);
  }

  _getMembershipSection() {
    const Spinner = sdk.getComponent("elements.Spinner");
    const BaseAvatar = sdk.getComponent("avatars.BaseAvatar");

    const group = this._matrixClient.getGroup(this.props.groupId);

    if (group && group.myMembership === 'invite') {
      if (this.state.membershipBusy || this.state.inviterProfileBusy) {
        return /*#__PURE__*/_react.default.createElement("div", {
          className: "mx_GroupView_membershipSection"
        }, /*#__PURE__*/_react.default.createElement(Spinner, null));
      }

      const httpInviterAvatar = this.state.inviterProfile && this.state.inviterProfile.avatarUrl ? (0, _Media.mediaFromMxc)(this.state.inviterProfile.avatarUrl).getSquareThumbnailHttp(36) : null;
      const inviter = group.inviter || {};
      let inviterName = inviter.userId;

      if (this.state.inviterProfile) {
        inviterName = this.state.inviterProfile.displayName || inviter.userId;
      }

      return /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_GroupView_membershipSection mx_GroupView_membershipSection_invited"
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_GroupView_membershipSubSection"
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_GroupView_membershipSection_description"
      }, /*#__PURE__*/_react.default.createElement(BaseAvatar, {
        url: httpInviterAvatar,
        name: inviterName,
        width: 36,
        height: 36
      }), (0, _languageHandler._t)("%(inviter)s has invited you to join this community", {
        inviter: inviterName || (0, _languageHandler._t)("Someone")
      })), /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_GroupView_membership_buttonContainer"
      }, /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        className: "mx_GroupView_textButton mx_RoomHeader_textButton",
        onClick: this._onAcceptInviteClick
      }, (0, _languageHandler._t)("Accept")), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        className: "mx_GroupView_textButton mx_RoomHeader_textButton",
        onClick: this._onRejectInviteClick
      }, (0, _languageHandler._t)("Decline")))));
    }

    let membershipContainerExtraClasses;
    let membershipButtonExtraClasses;
    let membershipButtonTooltip;
    let membershipButtonText;
    let membershipButtonOnClick; // User is not in the group

    if ((!group || group.myMembership === 'leave') && this.state.summary && this.state.summary.profile && Boolean(this.state.summary.profile.is_openly_joinable)) {
      membershipButtonText = (0, _languageHandler._t)("Join this community");
      membershipButtonOnClick = this._onJoinClick;
      membershipButtonExtraClasses = 'mx_GroupView_joinButton';
      membershipContainerExtraClasses = 'mx_GroupView_membershipSection_leave';
    } else if (group && group.myMembership === 'join' && this.state.editing) {
      membershipButtonText = (0, _languageHandler._t)("Leave this community");
      membershipButtonOnClick = this._onLeaveClick;
      membershipButtonTooltip = this.state.isUserPrivileged ? (0, _languageHandler._t)("You are an administrator of this community") : (0, _languageHandler._t)("You are a member of this community");
      membershipButtonExtraClasses = {
        'mx_GroupView_leaveButton': true,
        'mx_RoomHeader_textButton_danger': this.state.isUserPrivileged
      };
      membershipContainerExtraClasses = 'mx_GroupView_membershipSection_joined';
    } else {
      return null;
    }

    const membershipButtonClasses = (0, _classnames.default)(['mx_RoomHeader_textButton', 'mx_GroupView_textButton'], membershipButtonExtraClasses);
    const membershipContainerClasses = (0, _classnames.default)('mx_GroupView_membershipSection', membershipContainerExtraClasses);
    return /*#__PURE__*/_react.default.createElement("div", {
      className: membershipContainerClasses
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_GroupView_membershipSubSection"
    }, this.state.membershipBusy ? /*#__PURE__*/_react.default.createElement(Spinner, null) : /*#__PURE__*/_react.default.createElement("div", null), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_GroupView_membership_buttonContainer"
    }, /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      className: membershipButtonClasses,
      onClick: membershipButtonOnClick,
      title: membershipButtonTooltip
    }, membershipButtonText))));
  }

  _getJoinableNode() {
    const InlineSpinner = sdk.getComponent('elements.InlineSpinner');
    return this.state.editing ? /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("h3", null, (0, _languageHandler._t)('Who can join this community?'), this.state.groupJoinableLoading ? /*#__PURE__*/_react.default.createElement(InlineSpinner, null) : /*#__PURE__*/_react.default.createElement("div", null)), /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("label", null, /*#__PURE__*/_react.default.createElement("input", {
      type: "radio",
      value: GROUP_JOINPOLICY_INVITE,
      checked: this.state.joinableForm.policyType === GROUP_JOINPOLICY_INVITE,
      onChange: this._onJoinableChange
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_GroupView_label_text"
    }, (0, _languageHandler._t)('Only people who have been invited')))), /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("label", null, /*#__PURE__*/_react.default.createElement("input", {
      type: "radio",
      value: GROUP_JOINPOLICY_OPEN,
      checked: this.state.joinableForm.policyType === GROUP_JOINPOLICY_OPEN,
      onChange: this._onJoinableChange
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_GroupView_label_text"
    }, (0, _languageHandler._t)('Everyone'))))) : null;
  }

  _getLongDescriptionNode() {
    const summary = this.state.summary;
    let description = null;

    if (summary.profile && summary.profile.long_description) {
      description = (0, _HtmlUtils.sanitizedHtmlNode)(summary.profile.long_description);
    } else if (this.state.isUserPrivileged) {
      description = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_GroupView_groupDesc_placeholder",
        onClick: this._onEditClick
      }, (0, _languageHandler._t)('Your community hasn\'t got a Long Description, a HTML page to show to community members.<br />' + 'Click here to open settings and give it one!', {}, {
        'br': /*#__PURE__*/_react.default.createElement("br", null)
      }));
    }

    const groupDescEditingClasses = (0, _classnames.default)({
      "mx_GroupView_groupDesc": true,
      "mx_GroupView_groupDesc_disabled": !this.state.isUserPrivileged
    });
    return this.state.editing ? /*#__PURE__*/_react.default.createElement("div", {
      className: groupDescEditingClasses
    }, /*#__PURE__*/_react.default.createElement("h3", null, " ", (0, _languageHandler._t)("Long Description (HTML)"), " "), /*#__PURE__*/_react.default.createElement("textarea", {
      value: this.state.profileForm.long_description,
      placeholder: (0, _languageHandler._t)(LONG_DESC_PLACEHOLDER),
      onChange: this._onLongDescChange,
      tabIndex: "4",
      key: "editLongDesc"
    })) : /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_GroupView_groupDesc"
    }, description);
  }

  render() {
    const GroupAvatar = sdk.getComponent("avatars.GroupAvatar");
    const Spinner = sdk.getComponent("elements.Spinner");

    if (this.state.summaryLoading && this.state.error === null || this.state.saving) {
      return /*#__PURE__*/_react.default.createElement(Spinner, null);
    } else if (this.state.summary && !this.state.error) {
      const summary = this.state.summary;
      let avatarNode;
      let nameNode;
      let shortDescNode;
      const rightButtons = [];

      if (this.state.editing && this.state.isUserPrivileged) {
        let avatarImage;

        if (this.state.uploadingAvatar) {
          avatarImage = /*#__PURE__*/_react.default.createElement(Spinner, null);
        } else {
          const GroupAvatar = sdk.getComponent('avatars.GroupAvatar');
          avatarImage = /*#__PURE__*/_react.default.createElement(GroupAvatar, {
            groupId: this.props.groupId,
            groupName: this.state.profileForm.name,
            groupAvatarUrl: this.state.profileForm.avatar_url,
            width: 28,
            height: 28,
            resizeMethod: "crop"
          });
        }

        avatarNode = /*#__PURE__*/_react.default.createElement("div", {
          className: "mx_GroupView_avatarPicker"
        }, /*#__PURE__*/_react.default.createElement("label", {
          htmlFor: "avatarInput",
          className: "mx_GroupView_avatarPicker_label"
        }, avatarImage), /*#__PURE__*/_react.default.createElement("div", {
          className: "mx_GroupView_avatarPicker_edit"
        }, /*#__PURE__*/_react.default.createElement("label", {
          htmlFor: "avatarInput",
          className: "mx_GroupView_avatarPicker_label"
        }, /*#__PURE__*/_react.default.createElement("img", {
          src: require("../../../res/img/camera.svg"),
          alt: (0, _languageHandler._t)("Upload avatar"),
          title: (0, _languageHandler._t)("Upload avatar"),
          width: "17",
          height: "15"
        })), /*#__PURE__*/_react.default.createElement("input", {
          id: "avatarInput",
          className: "mx_GroupView_uploadInput",
          type: "file",
          onChange: this._onAvatarSelected
        })));
        const EditableText = sdk.getComponent("elements.EditableText");
        nameNode = /*#__PURE__*/_react.default.createElement(EditableText, {
          className: "mx_GroupView_editable",
          placeholderClassName: "mx_GroupView_placeholder",
          placeholder: (0, _languageHandler._t)('Community Name'),
          blurToCancel: false,
          initialValue: this.state.profileForm.name,
          onValueChanged: this._onNameChange,
          tabIndex: "0",
          dir: "auto"
        });
        shortDescNode = /*#__PURE__*/_react.default.createElement(EditableText, {
          className: "mx_GroupView_editable",
          placeholderClassName: "mx_GroupView_placeholder",
          placeholder: (0, _languageHandler._t)("Description"),
          blurToCancel: false,
          initialValue: this.state.profileForm.short_description,
          onValueChanged: this._onShortDescChange,
          tabIndex: "0",
          dir: "auto"
        });
      } else {
        const onGroupHeaderItemClick = this.state.isUserMember ? this._onEditClick : null;
        const groupAvatarUrl = summary.profile ? summary.profile.avatar_url : null;
        const groupName = summary.profile ? summary.profile.name : null;
        avatarNode = /*#__PURE__*/_react.default.createElement(GroupAvatar, {
          groupId: this.props.groupId,
          groupAvatarUrl: groupAvatarUrl,
          groupName: groupName,
          onClick: onGroupHeaderItemClick,
          width: 28,
          height: 28
        });

        if (summary.profile && summary.profile.name) {
          nameNode = /*#__PURE__*/_react.default.createElement("div", {
            onClick: onGroupHeaderItemClick
          }, /*#__PURE__*/_react.default.createElement("span", null, summary.profile.name), /*#__PURE__*/_react.default.createElement("span", {
            className: "mx_GroupView_header_groupid"
          }, "(", this.props.groupId, ")"));
        } else {
          nameNode = /*#__PURE__*/_react.default.createElement("span", {
            onClick: onGroupHeaderItemClick
          }, this.props.groupId);
        }

        if (summary.profile && summary.profile.short_description) {
          shortDescNode = /*#__PURE__*/_react.default.createElement("span", {
            onClick: onGroupHeaderItemClick
          }, summary.profile.short_description);
        }
      }

      if (this.state.editing) {
        rightButtons.push( /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
          className: "mx_GroupView_textButton mx_RoomHeader_textButton",
          key: "_saveButton",
          onClick: this._onSaveClick
        }, (0, _languageHandler._t)('Save')));
        rightButtons.push( /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
          className: "mx_RoomHeader_cancelButton",
          key: "_cancelButton",
          onClick: this._onCancelClick
        }, /*#__PURE__*/_react.default.createElement("img", {
          src: require("../../../res/img/cancel.svg"),
          className: "mx_filterFlipColor",
          width: "18",
          height: "18",
          alt: (0, _languageHandler._t)("Cancel")
        })));
      } else {
        if (summary.user && summary.user.membership === 'join') {
          rightButtons.push( /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
            className: "mx_GroupHeader_button mx_GroupHeader_editButton",
            key: "_editButton",
            onClick: this._onEditClick,
            title: (0, _languageHandler._t)("Community Settings")
          }));
        }

        rightButtons.push( /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
          className: "mx_GroupHeader_button mx_GroupHeader_shareButton",
          key: "_shareButton",
          onClick: this._onShareClick,
          title: (0, _languageHandler._t)('Share Community')
        }));
      }

      const rightPanel = this.state.showRightPanel ? /*#__PURE__*/_react.default.createElement(_RightPanel.default, {
        groupId: this.props.groupId
      }) : undefined;
      const headerClasses = {
        "mx_GroupView_header": true,
        "light-panel": true,
        "mx_GroupView_header_view": !this.state.editing,
        "mx_GroupView_header_isUserMember": this.state.isUserMember
      };
      return /*#__PURE__*/_react.default.createElement("main", {
        className: "mx_GroupView"
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: (0, _classnames.default)(headerClasses)
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_GroupView_header_leftCol"
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_GroupView_header_avatar"
      }, avatarNode), /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_GroupView_header_info"
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_GroupView_header_name"
      }, nameNode), /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_GroupView_header_shortDesc"
      }, shortDescNode))), /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_GroupView_header_rightCol"
      }, rightButtons), /*#__PURE__*/_react.default.createElement(_GroupHeaderButtons.default, null)), /*#__PURE__*/_react.default.createElement(_MainSplit.default, {
        panel: rightPanel,
        resizeNotifier: this.props.resizeNotifier
      }, /*#__PURE__*/_react.default.createElement(_AutoHideScrollbar.default, {
        className: "mx_GroupView_body"
      }, this._getMembershipSection(), this._getGroupSection())));
    } else if (this.state.error) {
      if (this.state.error.httpStatus === 404) {
        return /*#__PURE__*/_react.default.createElement("div", {
          className: "mx_GroupView_error"
        }, (0, _languageHandler._t)('Community %(groupId)s not found', {
          groupId: this.props.groupId
        }));
      } else {
        let extraText;

        if (this.state.error.errcode === 'M_UNRECOGNIZED') {
          extraText = /*#__PURE__*/_react.default.createElement("div", null, (0, _languageHandler._t)('This homeserver does not support communities'));
        }

        return /*#__PURE__*/_react.default.createElement("div", {
          className: "mx_GroupView_error"
        }, (0, _languageHandler._t)('Failed to load %(groupId)s', {
          groupId: this.props.groupId
        }), extraText);
      }
    } else {
      _logger.logger.error("Invalid state for GroupView");

      return /*#__PURE__*/_react.default.createElement("div", null);
    }
  }

}, (0, _defineProperty2.default)(_class2, "propTypes", {
  groupId: _propTypes.default.string.isRequired,
  // Whether this is the first time the group admin is viewing the group
  groupIsNew: _propTypes.default.bool
}), _temp)) || _class);
exports.default = GroupView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,