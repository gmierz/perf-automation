"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _GroupFilterOrderStore = _interopRequireDefault(require("../../stores/GroupFilterOrderStore"));

var _GroupActions = _interopRequireDefault(require("../../actions/GroupActions"));

var _dispatcher = _interopRequireDefault(require("../../dispatcher/dispatcher"));

var _languageHandler = require("../../languageHandler");

var _classnames = _interopRequireDefault(require("classnames"));

var _MatrixClientContext = _interopRequireDefault(require("../../contexts/MatrixClientContext"));

var _AutoHideScrollbar = _interopRequireDefault(require("./AutoHideScrollbar"));

var _SettingsStore = _interopRequireDefault(require("../../settings/SettingsStore"));

var _UserTagTile = _interopRequireDefault(require("../views/elements/UserTagTile"));

var _replaceableComponent = require("../../utils/replaceableComponent");

var _UIStore = _interopRequireDefault(require("../../stores/UIStore"));

var _DNDTagTile = _interopRequireDefault(require("../views/elements/DNDTagTile"));

var _ActionButton = _interopRequireDefault(require("../views/elements/ActionButton"));

var _dec, _class, _class2, _temp;

let GroupFilterPanel = (_dec = (0, _replaceableComponent.replaceableComponent)("structures.GroupFilterPanel"), _dec(_class = (_temp = _class2 = class GroupFilterPanel extends _react.default.Component {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "state", {
      orderedTags: [],
      selectedTags: []
    });
    (0, _defineProperty2.default)(this, "ref", /*#__PURE__*/_react.default.createRef());
    (0, _defineProperty2.default)(this, "unmounted", false);
    (0, _defineProperty2.default)(this, "groupFilterOrderStoreToken", void 0);
    (0, _defineProperty2.default)(this, "onGroupMyMembership", () => {
      if (this.unmounted) return;

      _dispatcher.default.dispatch(_GroupActions.default.fetchJoinedGroups(this.context));
    });
    (0, _defineProperty2.default)(this, "onClientSync", (syncState, prevState) => {
      // Consider the client reconnected if there is no error with syncing.
      // This means the state could be RECONNECTING, SYNCING, PREPARED or CATCHUP.
      const reconnected = syncState !== "ERROR" && prevState !== syncState;

      if (reconnected) {
        // Load joined groups
        _dispatcher.default.dispatch(_GroupActions.default.fetchJoinedGroups(this.context));
      }
    });
    (0, _defineProperty2.default)(this, "onClick", e => {
      // only dispatch if its not a no-op
      if (this.state.selectedTags.length > 0) {
        _dispatcher.default.dispatch({
          action: 'deselect_tags'
        });
      }
    });
    (0, _defineProperty2.default)(this, "onClearFilterClick", ev => {
      _dispatcher.default.dispatch({
        action: 'deselect_tags'
      });
    });
  }

  componentDidMount() {
    this.unmounted = false;
    this.context.on("Group.myMembership", this.onGroupMyMembership);
    this.context.on("sync", this.onClientSync);
    this.groupFilterOrderStoreToken = _GroupFilterOrderStore.default.addListener(() => {
      if (this.unmounted) {
        return;
      }

      this.setState({
        orderedTags: _GroupFilterOrderStore.default.getOrderedTags() || [],
        selectedTags: _GroupFilterOrderStore.default.getSelectedTags()
      });
    }); // This could be done by anything with a matrix client

    _dispatcher.default.dispatch(_GroupActions.default.fetchJoinedGroups(this.context));

    _UIStore.default.instance.trackElementDimensions("GroupPanel", this.ref.current);
  }

  componentWillUnmount() {
    this.unmounted = true;
    this.context.removeListener("Group.myMembership", this.onGroupMyMembership);
    this.context.removeListener("sync", this.onClientSync);

    if (this.groupFilterOrderStoreToken) {
      this.groupFilterOrderStoreToken.remove();
    }

    _UIStore.default.instance.stopTrackingElementDimensions("GroupPanel");
  }

  renderGlobalIcon() {
    if (!_SettingsStore.default.getValue("feature_communities_v2_prototypes")) return null;
    return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_UserTagTile.default, null), /*#__PURE__*/_react.default.createElement("hr", {
      className: "mx_GroupFilterPanel_divider"
    }));
  }

  render() {
    const tags = this.state.orderedTags.map((tag, index) => {
      return /*#__PURE__*/_react.default.createElement(_DNDTagTile.default, {
        key: tag,
        tag: tag,
        index: index,
        selected: this.state.selectedTags.includes(tag)
      });
    });
    const itemsSelected = this.state.selectedTags.length > 0;
    const classes = (0, _classnames.default)('mx_GroupFilterPanel', {
      mx_GroupFilterPanel_items_selected: itemsSelected
    });

    let createButton = /*#__PURE__*/_react.default.createElement(_ActionButton.default, {
      tooltip: true,
      label: (0, _languageHandler._t)("Communities"),
      action: "toggle_my_groups",
      className: "mx_TagTile mx_TagTile_plus"
    });

    if (_SettingsStore.default.getValue("feature_communities_v2_prototypes")) {
      createButton = /*#__PURE__*/_react.default.createElement(_ActionButton.default, {
        tooltip: true,
        label: (0, _languageHandler._t)("Create community"),
        action: "view_create_group",
        className: "mx_TagTile mx_TagTile_plus"
      });
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: classes,
      onClick: this.onClearFilterClick,
      ref: this.ref
    }, /*#__PURE__*/_react.default.createElement(_AutoHideScrollbar.default, {
      className: "mx_GroupFilterPanel_scroller",
      onClick: this.onClick
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_GroupFilterPanel_tagTileContainer"
    }, this.renderGlobalIcon(), tags, /*#__PURE__*/_react.default.createElement("div", null, createButton))));
  }

}, (0, _defineProperty2.default)(_class2, "contextType", _MatrixClientContext.default), _temp)) || _class);
var _default = GroupFilterPanel;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,