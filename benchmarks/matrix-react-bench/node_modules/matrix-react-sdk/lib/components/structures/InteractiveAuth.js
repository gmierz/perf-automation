"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ERROR_USER_CANCELLED = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _interactiveAuth = require("matrix-js-sdk/src/interactive-auth");

var _react = _interopRequireWildcard(require("react"));

var _InteractiveAuthEntryComponents = _interopRequireDefault(require("../views/auth/InteractiveAuthEntryComponents"));

var _Spinner = _interopRequireDefault(require("../views/elements/Spinner"));

var _replaceableComponent = require("../../utils/replaceableComponent");

var _logger = require("matrix-js-sdk/src/logger");

var _dec, _class;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const ERROR_USER_CANCELLED = new Error("User cancelled auth session");
exports.ERROR_USER_CANCELLED = ERROR_USER_CANCELLED;
let InteractiveAuthComponent = (_dec = (0, _replaceableComponent.replaceableComponent)("structures.InteractiveAuthComponent"), _dec(_class = class InteractiveAuthComponent extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "authLogic", void 0);
    (0, _defineProperty2.default)(this, "intervalId", null);
    (0, _defineProperty2.default)(this, "stageComponent", /*#__PURE__*/(0, _react.createRef)());
    (0, _defineProperty2.default)(this, "unmounted", false);
    (0, _defineProperty2.default)(this, "requestEmailToken", async (email, secret, attempt, session) => {
      this.setState({
        busy: true
      });

      try {
        return await this.props.requestEmailToken(email, secret, attempt, session);
      } finally {
        this.setState({
          busy: false
        });
      }
    });
    (0, _defineProperty2.default)(this, "tryContinue", () => {
      var _this$stageComponent$, _this$stageComponent$2;

      (_this$stageComponent$ = this.stageComponent.current) === null || _this$stageComponent$ === void 0 ? void 0 : (_this$stageComponent$2 = _this$stageComponent$.tryContinue) === null || _this$stageComponent$2 === void 0 ? void 0 : _this$stageComponent$2.call(_this$stageComponent$);
    });
    (0, _defineProperty2.default)(this, "authStateUpdated", (stageType, stageState) => {
      const oldStage = this.state.authStage;
      this.setState({
        busy: false,
        authStage: stageType,
        stageState: stageState,
        errorText: stageState.error,
        errorCode: stageState.errcode
      }, () => {
        if (oldStage !== stageType) {
          this.setFocus();
        } else if (!stageState.error) {
          var _this$stageComponent$3, _this$stageComponent$4;

          (_this$stageComponent$3 = this.stageComponent.current) === null || _this$stageComponent$3 === void 0 ? void 0 : (_this$stageComponent$4 = _this$stageComponent$3.attemptFailed) === null || _this$stageComponent$4 === void 0 ? void 0 : _this$stageComponent$4.call(_this$stageComponent$3);
        }
      });
    });
    (0, _defineProperty2.default)(this, "requestCallback", (auth, background) => {
      // This wrapper just exists because the js-sdk passes a second
      // 'busy' param for backwards compat. This throws the tests off
      // so discard it here.
      return this.props.makeRequest(auth);
    });
    (0, _defineProperty2.default)(this, "onBusyChanged", busy => {
      // if we've started doing stuff, reset the error messages
      if (busy) {
        this.setState({
          busy: true,
          errorText: null,
          errorCode: null
        });
      } // The JS SDK eagerly reports itself as "not busy" right after any
      // immediate work has completed, but that's not really what we want at
      // the UI layer, so we ignore this signal and show a spinner until
      // there's a new screen to show the user. This is implemented by setting
      // `busy: false` in `authStateUpdated`.
      // See also https://github.com/vector-im/element-web/issues/12546

    });
    (0, _defineProperty2.default)(this, "submitAuthDict", authData => {
      this.authLogic.submitAuthDict(authData);
    });
    (0, _defineProperty2.default)(this, "onPhaseChange", newPhase => {
      var _this$props$onStagePh, _this$props;

      (_this$props$onStagePh = (_this$props = this.props).onStagePhaseChange) === null || _this$props$onStagePh === void 0 ? void 0 : _this$props$onStagePh.call(_this$props, this.state.authStage, newPhase || 0);
    });
    (0, _defineProperty2.default)(this, "onStageCancel", () => {
      this.props.onAuthFinished(false, ERROR_USER_CANCELLED);
    });
    (0, _defineProperty2.default)(this, "onAuthStageFailed", e => {
      this.props.onAuthFinished(false, e);
    });
    (0, _defineProperty2.default)(this, "setEmailSid", sid => {
      this.authLogic.setEmailSid(sid);
    });
    this.state = {
      authStage: null,
      busy: false,
      errorText: null,
      errorCode: null,
      submitButtonEnabled: false
    };
    this.authLogic = new _interactiveAuth.InteractiveAuth({
      authData: this.props.authData,
      doRequest: this.requestCallback,
      busyChanged: this.onBusyChanged,
      inputs: this.props.inputs,
      stateUpdated: this.authStateUpdated,
      matrixClient: this.props.matrixClient,
      sessionId: this.props.sessionId,
      clientSecret: this.props.clientSecret,
      emailSid: this.props.emailSid,
      requestEmailToken: this.requestEmailToken
    });

    if (this.props.poll) {
      this.intervalId = setInterval(() => {
        this.authLogic.poll();
      }, 2000);
    }
  } // TODO: [REACT-WARNING] Replace component with real class, use constructor for refs


  UNSAFE_componentWillMount() {
    // eslint-disable-line @typescript-eslint/naming-convention, camelcase
    this.authLogic.attemptAuth().then(result => {
      const extra = {
        emailSid: this.authLogic.getEmailSid(),
        clientSecret: this.authLogic.getClientSecret()
      };
      this.props.onAuthFinished(true, result, extra);
    }).catch(error => {
      this.props.onAuthFinished(false, error);

      _logger.logger.error("Error during user-interactive auth:", error);

      if (this.unmounted) {
        return;
      }

      const msg = error.message || error.toString();
      this.setState({
        errorText: msg,
        errorCode: error.errcode
      });
    });
  }

  componentWillUnmount() {
    this.unmounted = true;

    if (this.intervalId !== null) {
      clearInterval(this.intervalId);
    }
  }

  setFocus() {
    var _this$stageComponent$5, _this$stageComponent$6;

    (_this$stageComponent$5 = this.stageComponent.current) === null || _this$stageComponent$5 === void 0 ? void 0 : (_this$stageComponent$6 = _this$stageComponent$5.focus) === null || _this$stageComponent$6 === void 0 ? void 0 : _this$stageComponent$6.call(_this$stageComponent$5);
  }

  render() {
    const stage = this.state.authStage;

    if (!stage) {
      if (this.state.busy) {
        return /*#__PURE__*/_react.default.createElement(_Spinner.default, null);
      } else {
        return null;
      }
    }

    const StageComponent = (0, _InteractiveAuthEntryComponents.default)(stage);
    return /*#__PURE__*/_react.default.createElement(StageComponent, {
      ref: this.stageComponent,
      loginType: stage,
      matrixClient: this.props.matrixClient,
      authSessionId: this.authLogic.getSessionId(),
      clientSecret: this.authLogic.getClientSecret(),
      stageParams: this.authLogic.getStageParams(stage),
      submitAuthDict: this.submitAuthDict,
      errorText: this.state.errorText,
      errorCode: this.state.errorCode,
      busy: this.state.busy,
      inputs: this.props.inputs,
      stageState: this.state.stageState,
      fail: this.onAuthStageFailed,
      setEmailSid: this.setEmailSid,
      showContinue: !this.props.continueIsManaged,
      onPhaseChange: this.onPhaseChange,
      continueText: this.props.continueText,
      continueKind: this.props.continueKind,
      onCancel: this.onStageCancel
    });
  }

}) || _class);
exports.default = InteractiveAuthComponent;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,