"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _ContentMessages = _interopRequireDefault(require("../../ContentMessages"));

var _dispatcher = _interopRequireDefault(require("../../dispatcher/dispatcher"));

var _filesize = _interopRequireDefault(require("filesize"));

var _languageHandler = require("../../languageHandler");

var _actions = require("../../dispatcher/actions");

var _ProgressBar = _interopRequireDefault(require("../views/elements/ProgressBar"));

var _AccessibleButton = _interopRequireDefault(require("../views/elements/AccessibleButton"));

var _replaceableComponent = require("../../utils/replaceableComponent");

var _MatrixClientContext = _interopRequireDefault(require("../../contexts/MatrixClientContext"));

var _dec, _class, _class2, _temp;

let UploadBar = (_dec = (0, _replaceableComponent.replaceableComponent)("structures.UploadBar"), _dec(_class = (_temp = _class2 = class UploadBar extends _react.default.Component {
  constructor(props) {
    super(props); // Set initial state to any available upload in this room - we might be mounting
    // earlier than the first progress event, so should show something relevant.

    (0, _defineProperty2.default)(this, "dispatcherRef", void 0);
    (0, _defineProperty2.default)(this, "mounted", void 0);
    (0, _defineProperty2.default)(this, "onAction", payload => {
      switch (payload.action) {
        case _actions.Action.UploadStarted:
        case _actions.Action.UploadProgress:
        case _actions.Action.UploadFinished:
        case _actions.Action.UploadCanceled:
        case _actions.Action.UploadFailed:
          {
            if (!this.mounted) return;
            const uploadsHere = this.getUploadsInRoom();
            this.setState({
              currentUpload: uploadsHere[0],
              uploadsHere
            });
            break;
          }
      }
    });
    (0, _defineProperty2.default)(this, "onCancelClick", ev => {
      ev.preventDefault();

      _ContentMessages.default.sharedInstance().cancelUpload(this.state.currentUpload.promise, this.context);
    });

    const _uploadsHere = this.getUploadsInRoom();

    this.state = {
      currentUpload: _uploadsHere[0],
      uploadsHere: _uploadsHere
    };
  }

  componentDidMount() {
    this.dispatcherRef = _dispatcher.default.register(this.onAction);
    this.mounted = true;
  }

  componentWillUnmount() {
    this.mounted = false;

    _dispatcher.default.unregister(this.dispatcherRef);
  }

  getUploadsInRoom() {
    const uploads = _ContentMessages.default.sharedInstance().getCurrentUploads(this.props.relation);

    return uploads.filter(u => u.roomId === this.props.room.roomId);
  }

  render() {
    if (!this.state.currentUpload) {
      return null;
    } // MUST use var name 'count' for pluralization to kick in


    const uploadText = (0, _languageHandler._t)("Uploading %(filename)s and %(count)s others", {
      filename: this.state.currentUpload.fileName,
      count: this.state.uploadsHere.length - 1
    });
    const uploadSize = (0, _filesize.default)(this.state.currentUpload.total);
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_UploadBar"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_UploadBar_filename"
    }, uploadText, " (", uploadSize, ")"), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      onClick: this.onCancelClick,
      className: "mx_UploadBar_cancel"
    }), /*#__PURE__*/_react.default.createElement(_ProgressBar.default, {
      value: this.state.currentUpload.loaded,
      max: this.state.currentUpload.total
    }));
  }

}, (0, _defineProperty2.default)(_class2, "contextType", _MatrixClientContext.default), _temp)) || _class);
exports.default = UploadBar;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,