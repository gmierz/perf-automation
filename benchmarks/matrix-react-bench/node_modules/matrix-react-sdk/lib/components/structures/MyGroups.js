"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var sdk = _interopRequireWildcard(require("../../index"));

var _languageHandler = require("../../languageHandler");

var _SdkConfig = _interopRequireDefault(require("../../SdkConfig"));

var _dispatcher = _interopRequireDefault(require("../../dispatcher/dispatcher"));

var _AccessibleButton = _interopRequireDefault(require("../views/elements/AccessibleButton"));

var _MatrixClientContext = _interopRequireDefault(require("../../contexts/MatrixClientContext"));

var _AutoHideScrollbar = _interopRequireDefault(require("./AutoHideScrollbar"));

var _replaceableComponent = require("../../utils/replaceableComponent");

var _dec, _class, _class2, _temp;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

let MyGroups = (_dec = (0, _replaceableComponent.replaceableComponent)("structures.MyGroups"), _dec(_class = (_temp = _class2 = class MyGroups extends _react.default.Component {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "state", {
      groups: null,
      error: null
    });
    (0, _defineProperty2.default)(this, "_onCreateGroupClick", () => {
      _dispatcher.default.dispatch({
        action: 'view_create_group'
      });
    });
  }

  componentDidMount() {
    this._fetch();
  }

  _fetch() {
    this.context.getJoinedGroups().then(result => {
      this.setState({
        groups: result.groups,
        error: null
      });
    }, err => {
      if (err.errcode === 'M_GUEST_ACCESS_FORBIDDEN') {
        // Indicate that the guest isn't in any groups (which should be true)
        this.setState({
          groups: [],
          error: null
        });
        return;
      }

      this.setState({
        groups: null,
        error: err
      });
    });
  }

  render() {
    const brand = _SdkConfig.default.get().brand;

    const Loader = sdk.getComponent("elements.Spinner");
    const SimpleRoomHeader = sdk.getComponent('rooms.SimpleRoomHeader');
    const GroupTile = sdk.getComponent("groups.GroupTile");
    let content;
    let contentHeader;

    if (this.state.groups) {
      const groupNodes = [];
      this.state.groups.forEach(g => {
        groupNodes.push( /*#__PURE__*/_react.default.createElement(GroupTile, {
          key: g,
          groupId: g
        }));
      });
      contentHeader = groupNodes.length > 0 ? /*#__PURE__*/_react.default.createElement("h3", null, (0, _languageHandler._t)('Your Communities')) : /*#__PURE__*/_react.default.createElement("div", null);
      content = groupNodes.length > 0 ? /*#__PURE__*/_react.default.createElement(_AutoHideScrollbar.default, {
        className: "mx_MyGroups_scrollable"
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_MyGroups_microcopy"
      }, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Did you know: you can use communities to filter your %(brand)s experience!", {
        brand
      })), /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("You can click on an avatar in the " + "filter panel at any time to see only the rooms and people associated " + "with that community."))), /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_MyGroups_joinedGroups"
      }, groupNodes)) : /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_MyGroups_placeholder"
      }, (0, _languageHandler._t)("You're not currently a member of any communities."));
    } else if (this.state.error) {
      content = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_MyGroups_error"
      }, (0, _languageHandler._t)('Error whilst fetching joined communities'));
    } else {
      content = /*#__PURE__*/_react.default.createElement(Loader, null);
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_MyGroups"
    }, /*#__PURE__*/_react.default.createElement(SimpleRoomHeader, {
      title: (0, _languageHandler._t)("Communities"),
      icon: require("../../../res/img/icons-groups.svg")
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_MyGroups_header"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_MyGroups_headerCard"
    }, /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      className: "mx_MyGroups_headerCard_button",
      onClick: this._onCreateGroupClick
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_MyGroups_headerCard_content"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_MyGroups_headerCard_header"
    }, (0, _languageHandler._t)('Create a new community')), (0, _languageHandler._t)('Create a community to group together users and rooms! ' + 'Build a custom homepage to mark out your space in the Matrix universe.')))), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_MyGroups_content"
    }, contentHeader, content));
  }

}, (0, _defineProperty2.default)(_class2, "contextType", _MatrixClientContext.default), _temp)) || _class);
exports.default = MyGroups;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,