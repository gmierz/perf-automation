"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.TabLocation = exports.Tab = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var React = _interopRequireWildcard(require("react"));

var _languageHandler = require("../../languageHandler");

var _AutoHideScrollbar = _interopRequireDefault(require("./AutoHideScrollbar"));

var _replaceableComponent = require("../../utils/replaceableComponent");

var _classnames = _interopRequireDefault(require("classnames"));

var _AccessibleButton = _interopRequireDefault(require("../views/elements/AccessibleButton"));

var _logger = require("matrix-js-sdk/src/logger");

var _dec, _class, _class2, _temp;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * Represents a tab for the TabbedView.
 */
class Tab {
  /**
   * Creates a new tab.
   * @param {string} id The tab's ID.
   * @param {string} label The untranslated tab label.
   * @param {string} icon The class for the tab icon. This should be a simple mask.
   * @param {React.ReactNode} body The JSX for the tab container.
   */
  constructor(id, label, icon, body) {
    this.id = id;
    this.label = label;
    this.icon = icon;
    this.body = body;
  }

}

exports.Tab = Tab;
let TabLocation;
exports.TabLocation = TabLocation;

(function (TabLocation) {
  TabLocation["LEFT"] = "left";
  TabLocation["TOP"] = "top";
})(TabLocation || (exports.TabLocation = TabLocation = {}));

let TabbedView = (_dec = (0, _replaceableComponent.replaceableComponent)("structures.TabbedView"), _dec(_class = (_temp = _class2 = class TabbedView extends React.Component {
  constructor(props) {
    super(props);
    let activeTabIndex = 0;

    if (props.initialTabId) {
      const tabIndex = props.tabs.findIndex(t => t.id === props.initialTabId);
      if (tabIndex >= 0) activeTabIndex = tabIndex;
    }

    this.state = {
      activeTabIndex
    };
  }

  getActiveTabIndex() {
    if (!this.state || !this.state.activeTabIndex) return 0;
    return this.state.activeTabIndex;
  }
  /**
   * Shows the given tab
   * @param {Tab} tab the tab to show
   * @private
   */


  setActiveTab(tab) {
    const idx = this.props.tabs.indexOf(tab);

    if (idx !== -1) {
      if (this.props.onChange) this.props.onChange(tab.id);
      this.setState({
        activeTabIndex: idx
      });
    } else {
      _logger.logger.error("Could not find tab " + tab.label + " in tabs");
    }
  }

  renderTabLabel(tab) {
    let classes = "mx_TabbedView_tabLabel ";
    const idx = this.props.tabs.indexOf(tab);
    if (idx === this.getActiveTabIndex()) classes += "mx_TabbedView_tabLabel_active";
    let tabIcon = null;

    if (tab.icon) {
      tabIcon = /*#__PURE__*/React.createElement("span", {
        className: `mx_TabbedView_maskedIcon ${tab.icon}`
      });
    }

    const onClickHandler = () => this.setActiveTab(tab);

    const label = (0, _languageHandler._t)(tab.label);
    return /*#__PURE__*/React.createElement(_AccessibleButton.default, {
      className: classes,
      key: "tab_label_" + tab.label,
      onClick: onClickHandler
    }, tabIcon, /*#__PURE__*/React.createElement("span", {
      className: "mx_TabbedView_tabLabel_text"
    }, label));
  }

  renderTabPanel(tab) {
    return /*#__PURE__*/React.createElement("div", {
      className: "mx_TabbedView_tabPanel",
      key: "mx_tabpanel_" + tab.label
    }, /*#__PURE__*/React.createElement(_AutoHideScrollbar.default, {
      className: "mx_TabbedView_tabPanelContent"
    }, tab.body));
  }

  render() {
    const labels = this.props.tabs.map(tab => this.renderTabLabel(tab));
    const panel = this.renderTabPanel(this.props.tabs[this.getActiveTabIndex()]);
    const tabbedViewClasses = (0, _classnames.default)({
      'mx_TabbedView': true,
      'mx_TabbedView_tabsOnLeft': this.props.tabLocation == TabLocation.LEFT,
      'mx_TabbedView_tabsOnTop': this.props.tabLocation == TabLocation.TOP
    });
    return /*#__PURE__*/React.createElement("div", {
      className: tabbedViewClasses
    }, /*#__PURE__*/React.createElement("div", {
      className: "mx_TabbedView_tabLabels"
    }, labels), panel);
  }

}, (0, _defineProperty2.default)(_class2, "defaultProps", {
  tabLocation: TabLocation.LEFT
}), _temp)) || _class);
exports.default = TabbedView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,