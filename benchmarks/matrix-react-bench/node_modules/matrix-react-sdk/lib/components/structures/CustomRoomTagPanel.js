"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _CustomRoomTagStore = _interopRequireDefault(require("../../stores/CustomRoomTagStore"));

var _AutoHideScrollbar = _interopRequireDefault(require("./AutoHideScrollbar"));

var sdk = _interopRequireWildcard(require("../../index"));

var _dispatcher = _interopRequireDefault(require("../../dispatcher/dispatcher"));

var _classnames = _interopRequireDefault(require("classnames"));

var FormattingUtils = _interopRequireWildcard(require("../../utils/FormattingUtils"));

var _replaceableComponent = require("../../utils/replaceableComponent");

var _dec, _class;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

let CustomRoomTagPanel = (_dec = (0, _replaceableComponent.replaceableComponent)("structures.CustomRoomTagPanel"), _dec(_class = class CustomRoomTagPanel extends _react.default.Component {
  constructor(props) {
    super(props);
    this.state = {
      tags: _CustomRoomTagStore.default.getSortedTags()
    };
  }

  componentDidMount() {
    this._tagStoreToken = _CustomRoomTagStore.default.addListener(() => {
      this.setState({
        tags: _CustomRoomTagStore.default.getSortedTags()
      });
    });
  }

  componentWillUnmount() {
    if (this._tagStoreToken) {
      this._tagStoreToken.remove();
    }
  }

  render() {
    const tags = this.state.tags.map(tag => {
      return /*#__PURE__*/_react.default.createElement(CustomRoomTagTile, {
        tag: tag,
        key: tag.name
      });
    });
    const classes = (0, _classnames.default)('mx_CustomRoomTagPanel', {
      mx_CustomRoomTagPanel_empty: this.state.tags.length === 0
    });
    return /*#__PURE__*/_react.default.createElement("div", {
      className: classes
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_CustomRoomTagPanel_divider"
    }), /*#__PURE__*/_react.default.createElement(_AutoHideScrollbar.default, {
      className: "mx_CustomRoomTagPanel_scroller"
    }, tags));
  }

}) || _class);

class CustomRoomTagTile extends _react.default.Component {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "onClick", () => {
      _dispatcher.default.dispatch({
        action: 'select_custom_room_tag',
        tag: this.props.tag.name
      });
    });
  }

  render() {
    const BaseAvatar = sdk.getComponent('avatars.BaseAvatar');
    const AccessibleTooltipButton = sdk.getComponent('elements.AccessibleTooltipButton');
    const tag = this.props.tag;
    const avatarHeight = 40;
    const className = (0, _classnames.default)({
      "CustomRoomTagPanel_tileSelected": tag.selected
    });
    const name = tag.name;
    const badgeNotifState = tag.badgeNotifState;
    let badgeElement;

    if (badgeNotifState) {
      const badgeClasses = (0, _classnames.default)({
        "mx_TagTile_badge": true,
        "mx_TagTile_badgeHighlight": badgeNotifState.hasMentions
      });
      badgeElement = /*#__PURE__*/_react.default.createElement("div", {
        className: badgeClasses
      }, FormattingUtils.formatCount(badgeNotifState.count));
    }

    return /*#__PURE__*/_react.default.createElement(AccessibleTooltipButton, {
      className: className,
      onClick: this.onClick,
      title: name
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_TagTile_avatar"
    }, /*#__PURE__*/_react.default.createElement(BaseAvatar, {
      name: tag.avatarLetter,
      idName: name,
      width: avatarHeight,
      height: avatarHeight
    }), badgeElement));
  }

}

var _default = CustomRoomTagPanel;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,