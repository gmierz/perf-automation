"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _dispatcher = _interopRequireDefault(require("../../dispatcher/dispatcher"));

var _GroupStore = _interopRequireDefault(require("../../stores/GroupStore"));

var _RightPanelStorePhases = require("../../stores/RightPanelStorePhases");

var _RightPanelStore = _interopRequireDefault(require("../../stores/RightPanelStore"));

var _MatrixClientContext = _interopRequireDefault(require("../../contexts/MatrixClientContext"));

var _actions = require("../../dispatcher/actions");

var _RoomSummaryCard = _interopRequireDefault(require("../views/right_panel/RoomSummaryCard"));

var _WidgetCard = _interopRequireDefault(require("../views/right_panel/WidgetCard"));

var _replaceableComponent = require("../../utils/replaceableComponent");

var _SettingsStore = _interopRequireDefault(require("../../settings/SettingsStore"));

var _MemberList = _interopRequireDefault(require("../views/rooms/MemberList"));

var _GroupMemberList = _interopRequireDefault(require("../views/groups/GroupMemberList"));

var _GroupRoomList = _interopRequireDefault(require("../views/groups/GroupRoomList"));

var _GroupRoomInfo = _interopRequireDefault(require("../views/groups/GroupRoomInfo"));

var _UserInfo = _interopRequireDefault(require("../views/right_panel/UserInfo"));

var _ThirdPartyMemberInfo = _interopRequireDefault(require("../views/rooms/ThirdPartyMemberInfo"));

var _FilePanel = _interopRequireDefault(require("./FilePanel"));

var _ThreadView = _interopRequireDefault(require("./ThreadView"));

var _ThreadPanel = _interopRequireDefault(require("./ThreadPanel"));

var _NotificationPanel = _interopRequireDefault(require("./NotificationPanel"));

var _PinnedMessagesCard = _interopRequireDefault(require("../views/right_panel/PinnedMessagesCard"));

var _lodash = require("lodash");

var _SpaceStore = _interopRequireDefault(require("../../stores/spaces/SpaceStore"));

var _threads = require("../../dispatcher/dispatch-actions/threads");

var _TimelineCard = _interopRequireDefault(require("../views/right_panel/TimelineCard"));

var _dec, _class, _class2, _temp;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

let RightPanel = (_dec = (0, _replaceableComponent.replaceableComponent)("structures.RightPanel"), _dec(_class = (_temp = _class2 = class RightPanel extends _react.default.Component {
  constructor(props, context) {
    super(props, context);
    (0, _defineProperty2.default)(this, "dispatcherRef", void 0);
    (0, _defineProperty2.default)(this, "delayedUpdate", (0, _lodash.throttle)(() => {
      this.forceUpdate();
    }, 500, {
      leading: true,
      trailing: true
    }));
    (0, _defineProperty2.default)(this, "onGroupStoreUpdated", () => {
      this.setState({
        isUserPrivilegedInGroup: _GroupStore.default.isUserPrivileged(this.props.groupId)
      });
    });
    (0, _defineProperty2.default)(this, "onRoomStateMember", (ev, state, member) => {
      if (!this.props.room || member.roomId !== this.props.room.roomId) {
        return;
      } // redraw the badge on the membership list


      if (this.state.phase === _RightPanelStorePhases.RightPanelPhases.RoomMemberList && member.roomId === this.props.room.roomId) {
        this.delayedUpdate();
      } else if (this.state.phase === _RightPanelStorePhases.RightPanelPhases.RoomMemberInfo && member.roomId === this.props.room.roomId && member.userId === this.state.member.userId) {
        // refresh the member info (e.g. new power level)
        this.delayedUpdate();
      }
    });
    (0, _defineProperty2.default)(this, "onAction", payload => {
      const isChangingRoom = payload.action === _actions.Action.ViewRoom && payload.room_id !== this.props.room.roomId;
      const isViewingThread = this.state.phase === _RightPanelStorePhases.RightPanelPhases.ThreadView;

      if (isChangingRoom && isViewingThread) {
        (0, _threads.dispatchShowThreadsPanelEvent)();
      }

      if (payload.action === _actions.Action.AfterRightPanelPhaseChange) {
        this.setState({
          phase: payload.phase,
          groupRoomId: payload.groupRoomId,
          groupId: payload.groupId,
          member: payload.member,
          event: payload.event,
          initialEvent: payload.initialEvent,
          initialEventHighlighted: payload.highlighted,
          verificationRequest: payload.verificationRequest,
          verificationRequestPromise: payload.verificationRequestPromise,
          widgetId: payload.widgetId,
          space: payload.space
        });
      }
    });
    (0, _defineProperty2.default)(this, "onClose", () => {
      // XXX: There are three different ways of 'closing' this panel depending on what state
      // things are in... this knows far more than it should do about the state of the rest
      // of the app and is generally a bit silly.
      if (this.props.member) {
        // If we have a user prop then we're displaying a user from the 'user' page type
        // in LoggedInView, so need to change the page type to close the panel (we switch
        // to the home page which is not obviously the correct thing to do, but I'm not sure
        // anything else is - we could hide the close button altogether?)
        _dispatcher.default.dispatch({
          action: "view_home_page"
        });
      } else if (this.state.phase === _RightPanelStorePhases.RightPanelPhases.EncryptionPanel && this.state.verificationRequest && this.state.verificationRequest.pending) {
        // When the user clicks close on the encryption panel cancel the pending request first if any
        this.state.verificationRequest.cancel();
      } else {
        // the RightPanelStore has no way of knowing which mode room/group it is in, so we handle closing here
        _dispatcher.default.dispatch({
          action: _actions.Action.ToggleRightPanel,
          type: this.props.groupId ? "group" : "room"
        });
      }
    });
    (0, _defineProperty2.default)(this, "onSearchQueryChanged", searchQuery => {
      this.setState({
        searchQuery
      });
    });
    this.state = _objectSpread(_objectSpread({}, _RightPanelStore.default.getSharedInstance().roomPanelPhaseParams), {}, {
      phase: this.getPhaseFromProps(),
      isUserPrivilegedInGroup: null,
      member: this.getUserForPanel(),
      searchQuery: ""
    });
  }

  // Helper function to split out the logic for getPhaseFromProps() and the constructor
  // as both are called at the same time in the constructor.
  getUserForPanel() {
    if (this.state && this.state.member) return this.state.member;

    const lastParams = _RightPanelStore.default.getSharedInstance().roomPanelPhaseParams;

    return this.props.member || lastParams['member'];
  } // gets the current phase from the props and also maybe the store


  getPhaseFromProps() {
    var _this$props$room;

    const rps = _RightPanelStore.default.getSharedInstance();

    const userForPanel = this.getUserForPanel();

    if (this.props.groupId) {
      if (!_RightPanelStorePhases.RIGHT_PANEL_PHASES_NO_ARGS.includes(rps.groupPanelPhase)) {
        _dispatcher.default.dispatch({
          action: _actions.Action.SetRightPanelPhase,
          phase: _RightPanelStorePhases.RightPanelPhases.GroupMemberList
        });

        return _RightPanelStorePhases.RightPanelPhases.GroupMemberList;
      }

      return rps.groupPanelPhase;
    } else if (_SpaceStore.default.spacesEnabled && (_this$props$room = this.props.room) !== null && _this$props$room !== void 0 && _this$props$room.isSpaceRoom() && !_RightPanelStorePhases.RIGHT_PANEL_SPACE_PHASES.includes(rps.roomPanelPhase)) {
      return _RightPanelStorePhases.RightPanelPhases.SpaceMemberList;
    } else if (userForPanel) {
      // XXX FIXME AAAAAARGH: What is going on with this class!? It takes some of its state
      // from its props and some from a store, except if the contents of the store changes
      // while it's mounted in which case it replaces all of its state with that of the store,
      // except it uses a dispatch instead of a normal store listener?
      // Unfortunately rewriting this would almost certainly break showing the right panel
      // in some of the many cases, and I don't have time to re-architect it and test all
      // the flows now, so adding yet another special case so if the store thinks there is
      // a verification going on for the member we're displaying, we show that, otherwise
      // we race if a verification is started while the panel isn't displayed because we're
      // not mounted in time to get the dispatch.
      // Until then, let this code serve as a warning from history.
      if (rps.roomPanelPhaseParams.member && userForPanel.userId === rps.roomPanelPhaseParams.member.userId && rps.roomPanelPhaseParams.verificationRequest) {
        return rps.roomPanelPhase;
      }

      return _RightPanelStorePhases.RightPanelPhases.RoomMemberInfo;
    }

    return rps.roomPanelPhase;
  }

  componentDidMount() {
    this.dispatcherRef = _dispatcher.default.register(this.onAction);
    const cli = this.context;
    cli.on("RoomState.members", this.onRoomStateMember);
    this.initGroupStore(this.props.groupId);
  }

  componentWillUnmount() {
    _dispatcher.default.unregister(this.dispatcherRef);

    if (this.context) {
      this.context.removeListener("RoomState.members", this.onRoomStateMember);
    }

    this.unregisterGroupStore();
  } // TODO: [REACT-WARNING] Replace with appropriate lifecycle event


  UNSAFE_componentWillReceiveProps(newProps) {
    // eslint-disable-line
    if (newProps.groupId !== this.props.groupId) {
      this.unregisterGroupStore();
      this.initGroupStore(newProps.groupId);
    }
  }

  initGroupStore(groupId) {
    if (!groupId) return;

    _GroupStore.default.registerListener(groupId, this.onGroupStoreUpdated);
  }

  unregisterGroupStore() {
    _GroupStore.default.unregisterListener(this.onGroupStoreUpdated);
  }

  render() {
    let panel = /*#__PURE__*/_react.default.createElement("div", null);

    const roomId = this.props.room ? this.props.room.roomId : undefined;

    switch (this.state.phase) {
      case _RightPanelStorePhases.RightPanelPhases.RoomMemberList:
        if (roomId) {
          panel = /*#__PURE__*/_react.default.createElement(_MemberList.default, {
            roomId: roomId,
            key: roomId,
            onClose: this.onClose,
            searchQuery: this.state.searchQuery,
            onSearchQueryChanged: this.onSearchQueryChanged
          });
        }

        break;

      case _RightPanelStorePhases.RightPanelPhases.SpaceMemberList:
        panel = /*#__PURE__*/_react.default.createElement(_MemberList.default, {
          roomId: this.state.space ? this.state.space.roomId : roomId,
          key: this.state.space ? this.state.space.roomId : roomId,
          onClose: this.onClose,
          searchQuery: this.state.searchQuery,
          onSearchQueryChanged: this.onSearchQueryChanged
        });
        break;

      case _RightPanelStorePhases.RightPanelPhases.GroupMemberList:
        if (this.props.groupId) {
          panel = /*#__PURE__*/_react.default.createElement(_GroupMemberList.default, {
            groupId: this.props.groupId,
            key: this.props.groupId
          });
        }

        break;

      case _RightPanelStorePhases.RightPanelPhases.GroupRoomList:
        panel = /*#__PURE__*/_react.default.createElement(_GroupRoomList.default, {
          groupId: this.props.groupId,
          key: this.props.groupId
        });
        break;

      case _RightPanelStorePhases.RightPanelPhases.RoomMemberInfo:
      case _RightPanelStorePhases.RightPanelPhases.SpaceMemberInfo:
      case _RightPanelStorePhases.RightPanelPhases.EncryptionPanel:
        panel = /*#__PURE__*/_react.default.createElement(_UserInfo.default, {
          user: this.state.member,
          room: this.context.getRoom(this.state.member.roomId) ?? this.props.room,
          key: roomId || this.state.member.userId,
          onClose: this.onClose,
          phase: this.state.phase,
          verificationRequest: this.state.verificationRequest,
          verificationRequestPromise: this.state.verificationRequestPromise
        });
        break;

      case _RightPanelStorePhases.RightPanelPhases.Room3pidMemberInfo:
      case _RightPanelStorePhases.RightPanelPhases.Space3pidMemberInfo:
        panel = /*#__PURE__*/_react.default.createElement(_ThirdPartyMemberInfo.default, {
          event: this.state.event,
          key: roomId
        });
        break;

      case _RightPanelStorePhases.RightPanelPhases.GroupMemberInfo:
        panel = /*#__PURE__*/_react.default.createElement(_UserInfo.default, {
          user: this.state.member,
          groupId: this.props.groupId,
          key: this.state.member.userId,
          phase: this.state.phase,
          onClose: this.onClose
        });
        break;

      case _RightPanelStorePhases.RightPanelPhases.GroupRoomInfo:
        panel = /*#__PURE__*/_react.default.createElement(_GroupRoomInfo.default, {
          groupRoomId: this.state.groupRoomId,
          groupId: this.props.groupId,
          key: this.state.groupRoomId
        });
        break;

      case _RightPanelStorePhases.RightPanelPhases.NotificationPanel:
        panel = /*#__PURE__*/_react.default.createElement(_NotificationPanel.default, {
          onClose: this.onClose
        });
        break;

      case _RightPanelStorePhases.RightPanelPhases.PinnedMessages:
        if (_SettingsStore.default.getValue("feature_pinning")) {
          panel = /*#__PURE__*/_react.default.createElement(_PinnedMessagesCard.default, {
            room: this.props.room,
            onClose: this.onClose
          });
        }

        break;

      case _RightPanelStorePhases.RightPanelPhases.Timeline:
        if (!_SettingsStore.default.getValue("feature_maximised_widgets")) break;
        panel = /*#__PURE__*/_react.default.createElement(_TimelineCard.default, {
          room: this.props.room,
          resizeNotifier: this.props.resizeNotifier,
          onClose: this.onClose
        });
        break;

      case _RightPanelStorePhases.RightPanelPhases.FilePanel:
        panel = /*#__PURE__*/_react.default.createElement(_FilePanel.default, {
          roomId: roomId,
          resizeNotifier: this.props.resizeNotifier,
          onClose: this.onClose
        });
        break;

      case _RightPanelStorePhases.RightPanelPhases.ThreadView:
        panel = /*#__PURE__*/_react.default.createElement(_ThreadView.default, {
          room: this.props.room,
          resizeNotifier: this.props.resizeNotifier,
          onClose: this.onClose,
          mxEvent: this.state.event,
          initialEvent: this.state.initialEvent,
          initialEventHighlighted: this.state.initialEventHighlighted,
          permalinkCreator: this.props.permalinkCreator,
          e2eStatus: this.props.e2eStatus
        });
        break;

      case _RightPanelStorePhases.RightPanelPhases.ThreadPanel:
        panel = /*#__PURE__*/_react.default.createElement(_ThreadPanel.default, {
          roomId: roomId,
          resizeNotifier: this.props.resizeNotifier,
          onClose: this.onClose,
          permalinkCreator: this.props.permalinkCreator
        });
        break;

      case _RightPanelStorePhases.RightPanelPhases.RoomSummary:
        panel = /*#__PURE__*/_react.default.createElement(_RoomSummaryCard.default, {
          room: this.props.room,
          onClose: this.onClose
        });
        break;

      case _RightPanelStorePhases.RightPanelPhases.Widget:
        panel = /*#__PURE__*/_react.default.createElement(_WidgetCard.default, {
          room: this.props.room,
          widgetId: this.state.widgetId,
          onClose: this.onClose
        });
        break;
    }

    return /*#__PURE__*/_react.default.createElement("aside", {
      className: "mx_RightPanel dark-panel",
      id: "mx_RightPanel"
    }, panel);
  }

}, (0, _defineProperty2.default)(_class2, "contextType", _MatrixClientContext.default), _temp)) || _class);
exports.default = RightPanel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3N0cnVjdHVyZXMvUmlnaHRQYW5lbC50c3giXSwibmFtZXMiOlsiUmlnaHRQYW5lbCIsIlJlYWN0IiwiQ29tcG9uZW50IiwiY29uc3RydWN0b3IiLCJwcm9wcyIsImNvbnRleHQiLCJmb3JjZVVwZGF0ZSIsImxlYWRpbmciLCJ0cmFpbGluZyIsInNldFN0YXRlIiwiaXNVc2VyUHJpdmlsZWdlZEluR3JvdXAiLCJHcm91cFN0b3JlIiwiaXNVc2VyUHJpdmlsZWdlZCIsImdyb3VwSWQiLCJldiIsInN0YXRlIiwibWVtYmVyIiwicm9vbSIsInJvb21JZCIsInBoYXNlIiwiUmlnaHRQYW5lbFBoYXNlcyIsIlJvb21NZW1iZXJMaXN0IiwiZGVsYXllZFVwZGF0ZSIsIlJvb21NZW1iZXJJbmZvIiwidXNlcklkIiwicGF5bG9hZCIsImlzQ2hhbmdpbmdSb29tIiwiYWN0aW9uIiwiQWN0aW9uIiwiVmlld1Jvb20iLCJyb29tX2lkIiwiaXNWaWV3aW5nVGhyZWFkIiwiVGhyZWFkVmlldyIsIkFmdGVyUmlnaHRQYW5lbFBoYXNlQ2hhbmdlIiwiZ3JvdXBSb29tSWQiLCJldmVudCIsImluaXRpYWxFdmVudCIsImluaXRpYWxFdmVudEhpZ2hsaWdodGVkIiwiaGlnaGxpZ2h0ZWQiLCJ2ZXJpZmljYXRpb25SZXF1ZXN0IiwidmVyaWZpY2F0aW9uUmVxdWVzdFByb21pc2UiLCJ3aWRnZXRJZCIsInNwYWNlIiwiZGlzIiwiZGlzcGF0Y2giLCJFbmNyeXB0aW9uUGFuZWwiLCJwZW5kaW5nIiwiY2FuY2VsIiwiVG9nZ2xlUmlnaHRQYW5lbCIsInR5cGUiLCJzZWFyY2hRdWVyeSIsIlJpZ2h0UGFuZWxTdG9yZSIsImdldFNoYXJlZEluc3RhbmNlIiwicm9vbVBhbmVsUGhhc2VQYXJhbXMiLCJnZXRQaGFzZUZyb21Qcm9wcyIsImdldFVzZXJGb3JQYW5lbCIsImxhc3RQYXJhbXMiLCJycHMiLCJ1c2VyRm9yUGFuZWwiLCJSSUdIVF9QQU5FTF9QSEFTRVNfTk9fQVJHUyIsImluY2x1ZGVzIiwiZ3JvdXBQYW5lbFBoYXNlIiwiU2V0UmlnaHRQYW5lbFBoYXNlIiwiR3JvdXBNZW1iZXJMaXN0IiwiU3BhY2VTdG9yZSIsInNwYWNlc0VuYWJsZWQiLCJpc1NwYWNlUm9vbSIsIlJJR0hUX1BBTkVMX1NQQUNFX1BIQVNFUyIsInJvb21QYW5lbFBoYXNlIiwiU3BhY2VNZW1iZXJMaXN0IiwiY29tcG9uZW50RGlkTW91bnQiLCJkaXNwYXRjaGVyUmVmIiwicmVnaXN0ZXIiLCJvbkFjdGlvbiIsImNsaSIsIm9uIiwib25Sb29tU3RhdGVNZW1iZXIiLCJpbml0R3JvdXBTdG9yZSIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwidW5yZWdpc3RlciIsInJlbW92ZUxpc3RlbmVyIiwidW5yZWdpc3Rlckdyb3VwU3RvcmUiLCJVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIm5ld1Byb3BzIiwicmVnaXN0ZXJMaXN0ZW5lciIsIm9uR3JvdXBTdG9yZVVwZGF0ZWQiLCJ1bnJlZ2lzdGVyTGlzdGVuZXIiLCJyZW5kZXIiLCJwYW5lbCIsInVuZGVmaW5lZCIsIm9uQ2xvc2UiLCJvblNlYXJjaFF1ZXJ5Q2hhbmdlZCIsIkdyb3VwUm9vbUxpc3QiLCJTcGFjZU1lbWJlckluZm8iLCJnZXRSb29tIiwiUm9vbTNwaWRNZW1iZXJJbmZvIiwiU3BhY2UzcGlkTWVtYmVySW5mbyIsIkdyb3VwTWVtYmVySW5mbyIsIkdyb3VwUm9vbUluZm8iLCJOb3RpZmljYXRpb25QYW5lbCIsIlBpbm5lZE1lc3NhZ2VzIiwiU2V0dGluZ3NTdG9yZSIsImdldFZhbHVlIiwiVGltZWxpbmUiLCJyZXNpemVOb3RpZmllciIsIkZpbGVQYW5lbCIsInBlcm1hbGlua0NyZWF0b3IiLCJlMmVTdGF0dXMiLCJUaHJlYWRQYW5lbCIsIlJvb21TdW1tYXJ5IiwiV2lkZ2V0IiwiTWF0cml4Q2xpZW50Q29udGV4dCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFpQkE7O0FBT0E7O0FBQ0E7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Z3V5QGdtYWlsLmNvbT5cbkNvcHlyaWdodCAyMDE1IC0gMjAyMSBUaGUgTWF0cml4Lm9yZyBGb3VuZGF0aW9uIEMuSS5DLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBSb29tIH0gZnJvbSBcIm1hdHJpeC1qcy1zZGsvc3JjL21vZGVscy9yb29tXCI7XG5pbXBvcnQgeyBSb29tU3RhdGUgfSBmcm9tIFwibWF0cml4LWpzLXNkay9zcmMvbW9kZWxzL3Jvb20tc3RhdGVcIjtcbmltcG9ydCB7IFJvb21NZW1iZXIgfSBmcm9tIFwibWF0cml4LWpzLXNkay9zcmMvbW9kZWxzL3Jvb20tbWVtYmVyXCI7XG5pbXBvcnQgeyBNYXRyaXhFdmVudCB9IGZyb20gXCJtYXRyaXgtanMtc2RrL3NyYy9tb2RlbHMvZXZlbnRcIjtcbmltcG9ydCB7IFZlcmlmaWNhdGlvblJlcXVlc3QgfSBmcm9tIFwibWF0cml4LWpzLXNkay9zcmMvY3J5cHRvL3ZlcmlmaWNhdGlvbi9yZXF1ZXN0L1ZlcmlmaWNhdGlvblJlcXVlc3RcIjtcblxuaW1wb3J0IGRpcyBmcm9tICcuLi8uLi9kaXNwYXRjaGVyL2Rpc3BhdGNoZXInO1xuaW1wb3J0IEdyb3VwU3RvcmUgZnJvbSAnLi4vLi4vc3RvcmVzL0dyb3VwU3RvcmUnO1xuaW1wb3J0IHtcbiAgICBSSUdIVF9QQU5FTF9QSEFTRVNfTk9fQVJHUyxcbiAgICBSSUdIVF9QQU5FTF9TUEFDRV9QSEFTRVMsXG4gICAgUmlnaHRQYW5lbFBoYXNlcyxcbn0gZnJvbSBcIi4uLy4uL3N0b3Jlcy9SaWdodFBhbmVsU3RvcmVQaGFzZXNcIjtcbmltcG9ydCBSaWdodFBhbmVsU3RvcmUgZnJvbSBcIi4uLy4uL3N0b3Jlcy9SaWdodFBhbmVsU3RvcmVcIjtcbmltcG9ydCBNYXRyaXhDbGllbnRDb250ZXh0IGZyb20gXCIuLi8uLi9jb250ZXh0cy9NYXRyaXhDbGllbnRDb250ZXh0XCI7XG5pbXBvcnQgeyBBY3Rpb24gfSBmcm9tIFwiLi4vLi4vZGlzcGF0Y2hlci9hY3Rpb25zXCI7XG5pbXBvcnQgUm9vbVN1bW1hcnlDYXJkIGZyb20gXCIuLi92aWV3cy9yaWdodF9wYW5lbC9Sb29tU3VtbWFyeUNhcmRcIjtcbmltcG9ydCBXaWRnZXRDYXJkIGZyb20gXCIuLi92aWV3cy9yaWdodF9wYW5lbC9XaWRnZXRDYXJkXCI7XG5pbXBvcnQgeyByZXBsYWNlYWJsZUNvbXBvbmVudCB9IGZyb20gXCIuLi8uLi91dGlscy9yZXBsYWNlYWJsZUNvbXBvbmVudFwiO1xuaW1wb3J0IFNldHRpbmdzU3RvcmUgZnJvbSBcIi4uLy4uL3NldHRpbmdzL1NldHRpbmdzU3RvcmVcIjtcbmltcG9ydCB7IEFjdGlvblBheWxvYWQgfSBmcm9tIFwiLi4vLi4vZGlzcGF0Y2hlci9wYXlsb2Fkc1wiO1xuaW1wb3J0IE1lbWJlckxpc3QgZnJvbSBcIi4uL3ZpZXdzL3Jvb21zL01lbWJlckxpc3RcIjtcbmltcG9ydCBHcm91cE1lbWJlckxpc3QgZnJvbSBcIi4uL3ZpZXdzL2dyb3Vwcy9Hcm91cE1lbWJlckxpc3RcIjtcbmltcG9ydCBHcm91cFJvb21MaXN0IGZyb20gXCIuLi92aWV3cy9ncm91cHMvR3JvdXBSb29tTGlzdFwiO1xuaW1wb3J0IEdyb3VwUm9vbUluZm8gZnJvbSBcIi4uL3ZpZXdzL2dyb3Vwcy9Hcm91cFJvb21JbmZvXCI7XG5pbXBvcnQgVXNlckluZm8gZnJvbSBcIi4uL3ZpZXdzL3JpZ2h0X3BhbmVsL1VzZXJJbmZvXCI7XG5pbXBvcnQgVGhpcmRQYXJ0eU1lbWJlckluZm8gZnJvbSBcIi4uL3ZpZXdzL3Jvb21zL1RoaXJkUGFydHlNZW1iZXJJbmZvXCI7XG5pbXBvcnQgRmlsZVBhbmVsIGZyb20gXCIuL0ZpbGVQYW5lbFwiO1xuaW1wb3J0IFRocmVhZFZpZXcgZnJvbSBcIi4vVGhyZWFkVmlld1wiO1xuaW1wb3J0IFRocmVhZFBhbmVsIGZyb20gXCIuL1RocmVhZFBhbmVsXCI7XG5pbXBvcnQgTm90aWZpY2F0aW9uUGFuZWwgZnJvbSBcIi4vTm90aWZpY2F0aW9uUGFuZWxcIjtcbmltcG9ydCBSZXNpemVOb3RpZmllciBmcm9tIFwiLi4vLi4vdXRpbHMvUmVzaXplTm90aWZpZXJcIjtcbmltcG9ydCBQaW5uZWRNZXNzYWdlc0NhcmQgZnJvbSBcIi4uL3ZpZXdzL3JpZ2h0X3BhbmVsL1Bpbm5lZE1lc3NhZ2VzQ2FyZFwiO1xuaW1wb3J0IHsgdGhyb3R0bGUgfSBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IFNwYWNlU3RvcmUgZnJvbSBcIi4uLy4uL3N0b3Jlcy9zcGFjZXMvU3BhY2VTdG9yZVwiO1xuaW1wb3J0IHsgUm9vbVBlcm1hbGlua0NyZWF0b3IgfSBmcm9tICcuLi8uLi91dGlscy9wZXJtYWxpbmtzL1Blcm1hbGlua3MnO1xuaW1wb3J0IHsgRTJFU3RhdHVzIH0gZnJvbSAnLi4vLi4vdXRpbHMvU2hpZWxkVXRpbHMnO1xuaW1wb3J0IHsgZGlzcGF0Y2hTaG93VGhyZWFkc1BhbmVsRXZlbnQgfSBmcm9tICcuLi8uLi9kaXNwYXRjaGVyL2Rpc3BhdGNoLWFjdGlvbnMvdGhyZWFkcyc7XG5pbXBvcnQgVGltZWxpbmVDYXJkIGZyb20gJy4uL3ZpZXdzL3JpZ2h0X3BhbmVsL1RpbWVsaW5lQ2FyZCc7XG5cbmludGVyZmFjZSBJUHJvcHMge1xuICAgIHJvb20/OiBSb29tOyAvLyBpZiBzaG93aW5nIHBhbmVscyBmb3IgYSBnaXZlbiByb29tLCB0aGlzIGlzIHNldFxuICAgIGdyb3VwSWQ/OiBzdHJpbmc7IC8vIGlmIHNob3dpbmcgcGFuZWxzIGZvciBhIGdpdmVuIGdyb3VwLCB0aGlzIGlzIHNldFxuICAgIG1lbWJlcj86IFJvb21NZW1iZXI7IC8vIHVzZWQgaWYgd2Uga25vdyB0aGUgcm9vbSBtZW1iZXIgYWhlYWQgb2Ygb3BlbmluZyB0aGUgcGFuZWxcbiAgICByZXNpemVOb3RpZmllcjogUmVzaXplTm90aWZpZXI7XG4gICAgcGVybWFsaW5rQ3JlYXRvcj86IFJvb21QZXJtYWxpbmtDcmVhdG9yO1xuICAgIGUyZVN0YXR1cz86IEUyRVN0YXR1cztcbn1cblxuaW50ZXJmYWNlIElTdGF0ZSB7XG4gICAgcGhhc2U6IFJpZ2h0UGFuZWxQaGFzZXM7XG4gICAgaXNVc2VyUHJpdmlsZWdlZEluR3JvdXA/OiBib29sZWFuO1xuICAgIG1lbWJlcj86IFJvb21NZW1iZXI7XG4gICAgdmVyaWZpY2F0aW9uUmVxdWVzdD86IFZlcmlmaWNhdGlvblJlcXVlc3Q7XG4gICAgdmVyaWZpY2F0aW9uUmVxdWVzdFByb21pc2U/OiBQcm9taXNlPFZlcmlmaWNhdGlvblJlcXVlc3Q+O1xuICAgIHNwYWNlPzogUm9vbTtcbiAgICB3aWRnZXRJZD86IHN0cmluZztcbiAgICBncm91cFJvb21JZD86IHN0cmluZztcbiAgICBncm91cElkPzogc3RyaW5nO1xuICAgIGV2ZW50OiBNYXRyaXhFdmVudDtcbiAgICBpbml0aWFsRXZlbnQ/OiBNYXRyaXhFdmVudDtcbiAgICBpbml0aWFsRXZlbnRIaWdobGlnaHRlZD86IGJvb2xlYW47XG4gICAgc2VhcmNoUXVlcnk6IHN0cmluZztcbn1cblxuQHJlcGxhY2VhYmxlQ29tcG9uZW50KFwic3RydWN0dXJlcy5SaWdodFBhbmVsXCIpXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSaWdodFBhbmVsIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PElQcm9wcywgSVN0YXRlPiB7XG4gICAgc3RhdGljIGNvbnRleHRUeXBlID0gTWF0cml4Q2xpZW50Q29udGV4dDtcblxuICAgIHByaXZhdGUgZGlzcGF0Y2hlclJlZjogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IocHJvcHMsIGNvbnRleHQpIHtcbiAgICAgICAgc3VwZXIocHJvcHMsIGNvbnRleHQpO1xuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgLi4uUmlnaHRQYW5lbFN0b3JlLmdldFNoYXJlZEluc3RhbmNlKCkucm9vbVBhbmVsUGhhc2VQYXJhbXMsXG4gICAgICAgICAgICBwaGFzZTogdGhpcy5nZXRQaGFzZUZyb21Qcm9wcygpLFxuICAgICAgICAgICAgaXNVc2VyUHJpdmlsZWdlZEluR3JvdXA6IG51bGwsXG4gICAgICAgICAgICBtZW1iZXI6IHRoaXMuZ2V0VXNlckZvclBhbmVsKCksXG4gICAgICAgICAgICBzZWFyY2hRdWVyeTogXCJcIixcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlYWRvbmx5IGRlbGF5ZWRVcGRhdGUgPSB0aHJvdHRsZSgoKTogdm9pZCA9PiB7XG4gICAgICAgIHRoaXMuZm9yY2VVcGRhdGUoKTtcbiAgICB9LCA1MDAsIHsgbGVhZGluZzogdHJ1ZSwgdHJhaWxpbmc6IHRydWUgfSk7XG5cbiAgICAvLyBIZWxwZXIgZnVuY3Rpb24gdG8gc3BsaXQgb3V0IHRoZSBsb2dpYyBmb3IgZ2V0UGhhc2VGcm9tUHJvcHMoKSBhbmQgdGhlIGNvbnN0cnVjdG9yXG4gICAgLy8gYXMgYm90aCBhcmUgY2FsbGVkIGF0IHRoZSBzYW1lIHRpbWUgaW4gdGhlIGNvbnN0cnVjdG9yLlxuICAgIHByaXZhdGUgZ2V0VXNlckZvclBhbmVsKCk6IFJvb21NZW1iZXIge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZSAmJiB0aGlzLnN0YXRlLm1lbWJlcikgcmV0dXJuIHRoaXMuc3RhdGUubWVtYmVyO1xuICAgICAgICBjb25zdCBsYXN0UGFyYW1zID0gUmlnaHRQYW5lbFN0b3JlLmdldFNoYXJlZEluc3RhbmNlKCkucm9vbVBhbmVsUGhhc2VQYXJhbXM7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLm1lbWJlciB8fCBsYXN0UGFyYW1zWydtZW1iZXInXTtcbiAgICB9XG5cbiAgICAvLyBnZXRzIHRoZSBjdXJyZW50IHBoYXNlIGZyb20gdGhlIHByb3BzIGFuZCBhbHNvIG1heWJlIHRoZSBzdG9yZVxuICAgIHByaXZhdGUgZ2V0UGhhc2VGcm9tUHJvcHMoKSB7XG4gICAgICAgIGNvbnN0IHJwcyA9IFJpZ2h0UGFuZWxTdG9yZS5nZXRTaGFyZWRJbnN0YW5jZSgpO1xuICAgICAgICBjb25zdCB1c2VyRm9yUGFuZWwgPSB0aGlzLmdldFVzZXJGb3JQYW5lbCgpO1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5ncm91cElkKSB7XG4gICAgICAgICAgICBpZiAoIVJJR0hUX1BBTkVMX1BIQVNFU19OT19BUkdTLmluY2x1ZGVzKHJwcy5ncm91cFBhbmVsUGhhc2UpKSB7XG4gICAgICAgICAgICAgICAgZGlzLmRpc3BhdGNoKHsgYWN0aW9uOiBBY3Rpb24uU2V0UmlnaHRQYW5lbFBoYXNlLCBwaGFzZTogUmlnaHRQYW5lbFBoYXNlcy5Hcm91cE1lbWJlckxpc3QgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFJpZ2h0UGFuZWxQaGFzZXMuR3JvdXBNZW1iZXJMaXN0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJwcy5ncm91cFBhbmVsUGhhc2U7XG4gICAgICAgIH0gZWxzZSBpZiAoU3BhY2VTdG9yZS5zcGFjZXNFbmFibGVkICYmIHRoaXMucHJvcHMucm9vbT8uaXNTcGFjZVJvb20oKVxuICAgICAgICAgICAgJiYgIVJJR0hUX1BBTkVMX1NQQUNFX1BIQVNFUy5pbmNsdWRlcyhycHMucm9vbVBhbmVsUGhhc2UpXG4gICAgICAgICkge1xuICAgICAgICAgICAgcmV0dXJuIFJpZ2h0UGFuZWxQaGFzZXMuU3BhY2VNZW1iZXJMaXN0O1xuICAgICAgICB9IGVsc2UgaWYgKHVzZXJGb3JQYW5lbCkge1xuICAgICAgICAgICAgLy8gWFhYIEZJWE1FIEFBQUFBQVJHSDogV2hhdCBpcyBnb2luZyBvbiB3aXRoIHRoaXMgY2xhc3MhPyBJdCB0YWtlcyBzb21lIG9mIGl0cyBzdGF0ZVxuICAgICAgICAgICAgLy8gZnJvbSBpdHMgcHJvcHMgYW5kIHNvbWUgZnJvbSBhIHN0b3JlLCBleGNlcHQgaWYgdGhlIGNvbnRlbnRzIG9mIHRoZSBzdG9yZSBjaGFuZ2VzXG4gICAgICAgICAgICAvLyB3aGlsZSBpdCdzIG1vdW50ZWQgaW4gd2hpY2ggY2FzZSBpdCByZXBsYWNlcyBhbGwgb2YgaXRzIHN0YXRlIHdpdGggdGhhdCBvZiB0aGUgc3RvcmUsXG4gICAgICAgICAgICAvLyBleGNlcHQgaXQgdXNlcyBhIGRpc3BhdGNoIGluc3RlYWQgb2YgYSBub3JtYWwgc3RvcmUgbGlzdGVuZXI/XG4gICAgICAgICAgICAvLyBVbmZvcnR1bmF0ZWx5IHJld3JpdGluZyB0aGlzIHdvdWxkIGFsbW9zdCBjZXJ0YWlubHkgYnJlYWsgc2hvd2luZyB0aGUgcmlnaHQgcGFuZWxcbiAgICAgICAgICAgIC8vIGluIHNvbWUgb2YgdGhlIG1hbnkgY2FzZXMsIGFuZCBJIGRvbid0IGhhdmUgdGltZSB0byByZS1hcmNoaXRlY3QgaXQgYW5kIHRlc3QgYWxsXG4gICAgICAgICAgICAvLyB0aGUgZmxvd3Mgbm93LCBzbyBhZGRpbmcgeWV0IGFub3RoZXIgc3BlY2lhbCBjYXNlIHNvIGlmIHRoZSBzdG9yZSB0aGlua3MgdGhlcmUgaXNcbiAgICAgICAgICAgIC8vIGEgdmVyaWZpY2F0aW9uIGdvaW5nIG9uIGZvciB0aGUgbWVtYmVyIHdlJ3JlIGRpc3BsYXlpbmcsIHdlIHNob3cgdGhhdCwgb3RoZXJ3aXNlXG4gICAgICAgICAgICAvLyB3ZSByYWNlIGlmIGEgdmVyaWZpY2F0aW9uIGlzIHN0YXJ0ZWQgd2hpbGUgdGhlIHBhbmVsIGlzbid0IGRpc3BsYXllZCBiZWNhdXNlIHdlJ3JlXG4gICAgICAgICAgICAvLyBub3QgbW91bnRlZCBpbiB0aW1lIHRvIGdldCB0aGUgZGlzcGF0Y2guXG4gICAgICAgICAgICAvLyBVbnRpbCB0aGVuLCBsZXQgdGhpcyBjb2RlIHNlcnZlIGFzIGEgd2FybmluZyBmcm9tIGhpc3RvcnkuXG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgcnBzLnJvb21QYW5lbFBoYXNlUGFyYW1zLm1lbWJlciAmJlxuICAgICAgICAgICAgICAgIHVzZXJGb3JQYW5lbC51c2VySWQgPT09IHJwcy5yb29tUGFuZWxQaGFzZVBhcmFtcy5tZW1iZXIudXNlcklkICYmXG4gICAgICAgICAgICAgICAgcnBzLnJvb21QYW5lbFBoYXNlUGFyYW1zLnZlcmlmaWNhdGlvblJlcXVlc3RcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHJldHVybiBycHMucm9vbVBhbmVsUGhhc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gUmlnaHRQYW5lbFBoYXNlcy5Sb29tTWVtYmVySW5mbztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcnBzLnJvb21QYW5lbFBoYXNlO1xuICAgIH1cblxuICAgIHB1YmxpYyBjb21wb25lbnREaWRNb3VudCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5kaXNwYXRjaGVyUmVmID0gZGlzLnJlZ2lzdGVyKHRoaXMub25BY3Rpb24pO1xuICAgICAgICBjb25zdCBjbGkgPSB0aGlzLmNvbnRleHQ7XG4gICAgICAgIGNsaS5vbihcIlJvb21TdGF0ZS5tZW1iZXJzXCIsIHRoaXMub25Sb29tU3RhdGVNZW1iZXIpO1xuICAgICAgICB0aGlzLmluaXRHcm91cFN0b3JlKHRoaXMucHJvcHMuZ3JvdXBJZCk7XG4gICAgfVxuXG4gICAgcHVibGljIGNvbXBvbmVudFdpbGxVbm1vdW50KCk6IHZvaWQge1xuICAgICAgICBkaXMudW5yZWdpc3Rlcih0aGlzLmRpc3BhdGNoZXJSZWYpO1xuICAgICAgICBpZiAodGhpcy5jb250ZXh0KSB7XG4gICAgICAgICAgICB0aGlzLmNvbnRleHQucmVtb3ZlTGlzdGVuZXIoXCJSb29tU3RhdGUubWVtYmVyc1wiLCB0aGlzLm9uUm9vbVN0YXRlTWVtYmVyKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnVucmVnaXN0ZXJHcm91cFN0b3JlKCk7XG4gICAgfVxuXG4gICAgLy8gVE9ETzogW1JFQUNULVdBUk5JTkddIFJlcGxhY2Ugd2l0aCBhcHByb3ByaWF0ZSBsaWZlY3ljbGUgZXZlbnRcbiAgICBwdWJsaWMgVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV3UHJvcHM6IElQcm9wcyk6IHZvaWQgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgICAgIGlmIChuZXdQcm9wcy5ncm91cElkICE9PSB0aGlzLnByb3BzLmdyb3VwSWQpIHtcbiAgICAgICAgICAgIHRoaXMudW5yZWdpc3Rlckdyb3VwU3RvcmUoKTtcbiAgICAgICAgICAgIHRoaXMuaW5pdEdyb3VwU3RvcmUobmV3UHJvcHMuZ3JvdXBJZCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGluaXRHcm91cFN0b3JlKGdyb3VwSWQ6IHN0cmluZykge1xuICAgICAgICBpZiAoIWdyb3VwSWQpIHJldHVybjtcbiAgICAgICAgR3JvdXBTdG9yZS5yZWdpc3Rlckxpc3RlbmVyKGdyb3VwSWQsIHRoaXMub25Hcm91cFN0b3JlVXBkYXRlZCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB1bnJlZ2lzdGVyR3JvdXBTdG9yZSgpIHtcbiAgICAgICAgR3JvdXBTdG9yZS51bnJlZ2lzdGVyTGlzdGVuZXIodGhpcy5vbkdyb3VwU3RvcmVVcGRhdGVkKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG9uR3JvdXBTdG9yZVVwZGF0ZWQgPSAoKSA9PiB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgaXNVc2VyUHJpdmlsZWdlZEluR3JvdXA6IEdyb3VwU3RvcmUuaXNVc2VyUHJpdmlsZWdlZCh0aGlzLnByb3BzLmdyb3VwSWQpLFxuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgcHJpdmF0ZSBvblJvb21TdGF0ZU1lbWJlciA9IChldjogTWF0cml4RXZlbnQsIHN0YXRlOiBSb29tU3RhdGUsIG1lbWJlcjogUm9vbU1lbWJlcikgPT4ge1xuICAgICAgICBpZiAoIXRoaXMucHJvcHMucm9vbSB8fCBtZW1iZXIucm9vbUlkICE9PSB0aGlzLnByb3BzLnJvb20ucm9vbUlkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gcmVkcmF3IHRoZSBiYWRnZSBvbiB0aGUgbWVtYmVyc2hpcCBsaXN0XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLnBoYXNlID09PSBSaWdodFBhbmVsUGhhc2VzLlJvb21NZW1iZXJMaXN0ICYmIG1lbWJlci5yb29tSWQgPT09IHRoaXMucHJvcHMucm9vbS5yb29tSWQpIHtcbiAgICAgICAgICAgIHRoaXMuZGVsYXllZFVwZGF0ZSgpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuc3RhdGUucGhhc2UgPT09IFJpZ2h0UGFuZWxQaGFzZXMuUm9vbU1lbWJlckluZm8gJiYgbWVtYmVyLnJvb21JZCA9PT0gdGhpcy5wcm9wcy5yb29tLnJvb21JZCAmJlxuICAgICAgICAgICAgICAgIG1lbWJlci51c2VySWQgPT09IHRoaXMuc3RhdGUubWVtYmVyLnVzZXJJZCkge1xuICAgICAgICAgICAgLy8gcmVmcmVzaCB0aGUgbWVtYmVyIGluZm8gKGUuZy4gbmV3IHBvd2VyIGxldmVsKVxuICAgICAgICAgICAgdGhpcy5kZWxheWVkVXBkYXRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcHJpdmF0ZSBvbkFjdGlvbiA9IChwYXlsb2FkOiBBY3Rpb25QYXlsb2FkKSA9PiB7XG4gICAgICAgIGNvbnN0IGlzQ2hhbmdpbmdSb29tID0gcGF5bG9hZC5hY3Rpb24gPT09IEFjdGlvbi5WaWV3Um9vbSAmJiBwYXlsb2FkLnJvb21faWQgIT09IHRoaXMucHJvcHMucm9vbS5yb29tSWQ7XG4gICAgICAgIGNvbnN0IGlzVmlld2luZ1RocmVhZCA9IHRoaXMuc3RhdGUucGhhc2UgPT09IFJpZ2h0UGFuZWxQaGFzZXMuVGhyZWFkVmlldztcbiAgICAgICAgaWYgKGlzQ2hhbmdpbmdSb29tICYmIGlzVmlld2luZ1RocmVhZCkge1xuICAgICAgICAgICAgZGlzcGF0Y2hTaG93VGhyZWFkc1BhbmVsRXZlbnQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwYXlsb2FkLmFjdGlvbiA9PT0gQWN0aW9uLkFmdGVyUmlnaHRQYW5lbFBoYXNlQ2hhbmdlKSB7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICBwaGFzZTogcGF5bG9hZC5waGFzZSxcbiAgICAgICAgICAgICAgICBncm91cFJvb21JZDogcGF5bG9hZC5ncm91cFJvb21JZCxcbiAgICAgICAgICAgICAgICBncm91cElkOiBwYXlsb2FkLmdyb3VwSWQsXG4gICAgICAgICAgICAgICAgbWVtYmVyOiBwYXlsb2FkLm1lbWJlcixcbiAgICAgICAgICAgICAgICBldmVudDogcGF5bG9hZC5ldmVudCxcbiAgICAgICAgICAgICAgICBpbml0aWFsRXZlbnQ6IHBheWxvYWQuaW5pdGlhbEV2ZW50LFxuICAgICAgICAgICAgICAgIGluaXRpYWxFdmVudEhpZ2hsaWdodGVkOiBwYXlsb2FkLmhpZ2hsaWdodGVkLFxuICAgICAgICAgICAgICAgIHZlcmlmaWNhdGlvblJlcXVlc3Q6IHBheWxvYWQudmVyaWZpY2F0aW9uUmVxdWVzdCxcbiAgICAgICAgICAgICAgICB2ZXJpZmljYXRpb25SZXF1ZXN0UHJvbWlzZTogcGF5bG9hZC52ZXJpZmljYXRpb25SZXF1ZXN0UHJvbWlzZSxcbiAgICAgICAgICAgICAgICB3aWRnZXRJZDogcGF5bG9hZC53aWRnZXRJZCxcbiAgICAgICAgICAgICAgICBzcGFjZTogcGF5bG9hZC5zcGFjZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHByaXZhdGUgb25DbG9zZSA9ICgpID0+IHtcbiAgICAgICAgLy8gWFhYOiBUaGVyZSBhcmUgdGhyZWUgZGlmZmVyZW50IHdheXMgb2YgJ2Nsb3NpbmcnIHRoaXMgcGFuZWwgZGVwZW5kaW5nIG9uIHdoYXQgc3RhdGVcbiAgICAgICAgLy8gdGhpbmdzIGFyZSBpbi4uLiB0aGlzIGtub3dzIGZhciBtb3JlIHRoYW4gaXQgc2hvdWxkIGRvIGFib3V0IHRoZSBzdGF0ZSBvZiB0aGUgcmVzdFxuICAgICAgICAvLyBvZiB0aGUgYXBwIGFuZCBpcyBnZW5lcmFsbHkgYSBiaXQgc2lsbHkuXG4gICAgICAgIGlmICh0aGlzLnByb3BzLm1lbWJlcikge1xuICAgICAgICAgICAgLy8gSWYgd2UgaGF2ZSBhIHVzZXIgcHJvcCB0aGVuIHdlJ3JlIGRpc3BsYXlpbmcgYSB1c2VyIGZyb20gdGhlICd1c2VyJyBwYWdlIHR5cGVcbiAgICAgICAgICAgIC8vIGluIExvZ2dlZEluVmlldywgc28gbmVlZCB0byBjaGFuZ2UgdGhlIHBhZ2UgdHlwZSB0byBjbG9zZSB0aGUgcGFuZWwgKHdlIHN3aXRjaFxuICAgICAgICAgICAgLy8gdG8gdGhlIGhvbWUgcGFnZSB3aGljaCBpcyBub3Qgb2J2aW91c2x5IHRoZSBjb3JyZWN0IHRoaW5nIHRvIGRvLCBidXQgSSdtIG5vdCBzdXJlXG4gICAgICAgICAgICAvLyBhbnl0aGluZyBlbHNlIGlzIC0gd2UgY291bGQgaGlkZSB0aGUgY2xvc2UgYnV0dG9uIGFsdG9nZXRoZXI/KVxuICAgICAgICAgICAgZGlzLmRpc3BhdGNoKHtcbiAgICAgICAgICAgICAgICBhY3Rpb246IFwidmlld19ob21lX3BhZ2VcIixcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgdGhpcy5zdGF0ZS5waGFzZSA9PT0gUmlnaHRQYW5lbFBoYXNlcy5FbmNyeXB0aW9uUGFuZWwgJiZcbiAgICAgICAgICAgIHRoaXMuc3RhdGUudmVyaWZpY2F0aW9uUmVxdWVzdCAmJiB0aGlzLnN0YXRlLnZlcmlmaWNhdGlvblJlcXVlc3QucGVuZGluZ1xuICAgICAgICApIHtcbiAgICAgICAgICAgIC8vIFdoZW4gdGhlIHVzZXIgY2xpY2tzIGNsb3NlIG9uIHRoZSBlbmNyeXB0aW9uIHBhbmVsIGNhbmNlbCB0aGUgcGVuZGluZyByZXF1ZXN0IGZpcnN0IGlmIGFueVxuICAgICAgICAgICAgdGhpcy5zdGF0ZS52ZXJpZmljYXRpb25SZXF1ZXN0LmNhbmNlbCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gdGhlIFJpZ2h0UGFuZWxTdG9yZSBoYXMgbm8gd2F5IG9mIGtub3dpbmcgd2hpY2ggbW9kZSByb29tL2dyb3VwIGl0IGlzIGluLCBzbyB3ZSBoYW5kbGUgY2xvc2luZyBoZXJlXG4gICAgICAgICAgICBkaXMuZGlzcGF0Y2goe1xuICAgICAgICAgICAgICAgIGFjdGlvbjogQWN0aW9uLlRvZ2dsZVJpZ2h0UGFuZWwsXG4gICAgICAgICAgICAgICAgdHlwZTogdGhpcy5wcm9wcy5ncm91cElkID8gXCJncm91cFwiIDogXCJyb29tXCIsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBwcml2YXRlIG9uU2VhcmNoUXVlcnlDaGFuZ2VkID0gKHNlYXJjaFF1ZXJ5OiBzdHJpbmcpOiB2b2lkID0+IHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHNlYXJjaFF1ZXJ5IH0pO1xuICAgIH07XG5cbiAgICBwdWJsaWMgcmVuZGVyKCk6IEpTWC5FbGVtZW50IHtcbiAgICAgICAgbGV0IHBhbmVsID0gPGRpdiAvPjtcbiAgICAgICAgY29uc3Qgcm9vbUlkID0gdGhpcy5wcm9wcy5yb29tID8gdGhpcy5wcm9wcy5yb29tLnJvb21JZCA6IHVuZGVmaW5lZDtcblxuICAgICAgICBzd2l0Y2ggKHRoaXMuc3RhdGUucGhhc2UpIHtcbiAgICAgICAgICAgIGNhc2UgUmlnaHRQYW5lbFBoYXNlcy5Sb29tTWVtYmVyTGlzdDpcbiAgICAgICAgICAgICAgICBpZiAocm9vbUlkKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhbmVsID0gPE1lbWJlckxpc3RcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvb21JZD17cm9vbUlkfVxuICAgICAgICAgICAgICAgICAgICAgICAga2V5PXtyb29tSWR9XG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNsb3NlPXt0aGlzLm9uQ2xvc2V9XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWFyY2hRdWVyeT17dGhpcy5zdGF0ZS5zZWFyY2hRdWVyeX1cbiAgICAgICAgICAgICAgICAgICAgICAgIG9uU2VhcmNoUXVlcnlDaGFuZ2VkPXt0aGlzLm9uU2VhcmNoUXVlcnlDaGFuZ2VkfVxuICAgICAgICAgICAgICAgICAgICAvPjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFJpZ2h0UGFuZWxQaGFzZXMuU3BhY2VNZW1iZXJMaXN0OlxuICAgICAgICAgICAgICAgIHBhbmVsID0gPE1lbWJlckxpc3RcbiAgICAgICAgICAgICAgICAgICAgcm9vbUlkPXt0aGlzLnN0YXRlLnNwYWNlID8gdGhpcy5zdGF0ZS5zcGFjZS5yb29tSWQgOiByb29tSWR9XG4gICAgICAgICAgICAgICAgICAgIGtleT17dGhpcy5zdGF0ZS5zcGFjZSA/IHRoaXMuc3RhdGUuc3BhY2Uucm9vbUlkIDogcm9vbUlkfVxuICAgICAgICAgICAgICAgICAgICBvbkNsb3NlPXt0aGlzLm9uQ2xvc2V9XG4gICAgICAgICAgICAgICAgICAgIHNlYXJjaFF1ZXJ5PXt0aGlzLnN0YXRlLnNlYXJjaFF1ZXJ5fVxuICAgICAgICAgICAgICAgICAgICBvblNlYXJjaFF1ZXJ5Q2hhbmdlZD17dGhpcy5vblNlYXJjaFF1ZXJ5Q2hhbmdlZH1cbiAgICAgICAgICAgICAgICAvPjtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSBSaWdodFBhbmVsUGhhc2VzLkdyb3VwTWVtYmVyTGlzdDpcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5wcm9wcy5ncm91cElkKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhbmVsID0gPEdyb3VwTWVtYmVyTGlzdCBncm91cElkPXt0aGlzLnByb3BzLmdyb3VwSWR9IGtleT17dGhpcy5wcm9wcy5ncm91cElkfSAvPjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgUmlnaHRQYW5lbFBoYXNlcy5Hcm91cFJvb21MaXN0OlxuICAgICAgICAgICAgICAgIHBhbmVsID0gPEdyb3VwUm9vbUxpc3QgZ3JvdXBJZD17dGhpcy5wcm9wcy5ncm91cElkfSBrZXk9e3RoaXMucHJvcHMuZ3JvdXBJZH0gLz47XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgUmlnaHRQYW5lbFBoYXNlcy5Sb29tTWVtYmVySW5mbzpcbiAgICAgICAgICAgIGNhc2UgUmlnaHRQYW5lbFBoYXNlcy5TcGFjZU1lbWJlckluZm86XG4gICAgICAgICAgICBjYXNlIFJpZ2h0UGFuZWxQaGFzZXMuRW5jcnlwdGlvblBhbmVsOlxuICAgICAgICAgICAgICAgIHBhbmVsID0gPFVzZXJJbmZvXG4gICAgICAgICAgICAgICAgICAgIHVzZXI9e3RoaXMuc3RhdGUubWVtYmVyfVxuICAgICAgICAgICAgICAgICAgICByb29tPXt0aGlzLmNvbnRleHQuZ2V0Um9vbSh0aGlzLnN0YXRlLm1lbWJlci5yb29tSWQpID8/IHRoaXMucHJvcHMucm9vbX1cbiAgICAgICAgICAgICAgICAgICAga2V5PXtyb29tSWQgfHwgdGhpcy5zdGF0ZS5tZW1iZXIudXNlcklkfVxuICAgICAgICAgICAgICAgICAgICBvbkNsb3NlPXt0aGlzLm9uQ2xvc2V9XG4gICAgICAgICAgICAgICAgICAgIHBoYXNlPXt0aGlzLnN0YXRlLnBoYXNlfVxuICAgICAgICAgICAgICAgICAgICB2ZXJpZmljYXRpb25SZXF1ZXN0PXt0aGlzLnN0YXRlLnZlcmlmaWNhdGlvblJlcXVlc3R9XG4gICAgICAgICAgICAgICAgICAgIHZlcmlmaWNhdGlvblJlcXVlc3RQcm9taXNlPXt0aGlzLnN0YXRlLnZlcmlmaWNhdGlvblJlcXVlc3RQcm9taXNlfVxuICAgICAgICAgICAgICAgIC8+O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIFJpZ2h0UGFuZWxQaGFzZXMuUm9vbTNwaWRNZW1iZXJJbmZvOlxuICAgICAgICAgICAgY2FzZSBSaWdodFBhbmVsUGhhc2VzLlNwYWNlM3BpZE1lbWJlckluZm86XG4gICAgICAgICAgICAgICAgcGFuZWwgPSA8VGhpcmRQYXJ0eU1lbWJlckluZm8gZXZlbnQ9e3RoaXMuc3RhdGUuZXZlbnR9IGtleT17cm9vbUlkfSAvPjtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSBSaWdodFBhbmVsUGhhc2VzLkdyb3VwTWVtYmVySW5mbzpcbiAgICAgICAgICAgICAgICBwYW5lbCA9IDxVc2VySW5mb1xuICAgICAgICAgICAgICAgICAgICB1c2VyPXt0aGlzLnN0YXRlLm1lbWJlcn1cbiAgICAgICAgICAgICAgICAgICAgZ3JvdXBJZD17dGhpcy5wcm9wcy5ncm91cElkfVxuICAgICAgICAgICAgICAgICAgICBrZXk9e3RoaXMuc3RhdGUubWVtYmVyLnVzZXJJZH1cbiAgICAgICAgICAgICAgICAgICAgcGhhc2U9e3RoaXMuc3RhdGUucGhhc2V9XG4gICAgICAgICAgICAgICAgICAgIG9uQ2xvc2U9e3RoaXMub25DbG9zZX0gLz47XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgUmlnaHRQYW5lbFBoYXNlcy5Hcm91cFJvb21JbmZvOlxuICAgICAgICAgICAgICAgIHBhbmVsID0gPEdyb3VwUm9vbUluZm9cbiAgICAgICAgICAgICAgICAgICAgZ3JvdXBSb29tSWQ9e3RoaXMuc3RhdGUuZ3JvdXBSb29tSWR9XG4gICAgICAgICAgICAgICAgICAgIGdyb3VwSWQ9e3RoaXMucHJvcHMuZ3JvdXBJZH1cbiAgICAgICAgICAgICAgICAgICAga2V5PXt0aGlzLnN0YXRlLmdyb3VwUm9vbUlkfSAvPjtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSBSaWdodFBhbmVsUGhhc2VzLk5vdGlmaWNhdGlvblBhbmVsOlxuICAgICAgICAgICAgICAgIHBhbmVsID0gPE5vdGlmaWNhdGlvblBhbmVsIG9uQ2xvc2U9e3RoaXMub25DbG9zZX0gLz47XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgUmlnaHRQYW5lbFBoYXNlcy5QaW5uZWRNZXNzYWdlczpcbiAgICAgICAgICAgICAgICBpZiAoU2V0dGluZ3NTdG9yZS5nZXRWYWx1ZShcImZlYXR1cmVfcGlubmluZ1wiKSkge1xuICAgICAgICAgICAgICAgICAgICBwYW5lbCA9IDxQaW5uZWRNZXNzYWdlc0NhcmQgcm9vbT17dGhpcy5wcm9wcy5yb29tfSBvbkNsb3NlPXt0aGlzLm9uQ2xvc2V9IC8+O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgUmlnaHRQYW5lbFBoYXNlcy5UaW1lbGluZTpcbiAgICAgICAgICAgICAgICBpZiAoIVNldHRpbmdzU3RvcmUuZ2V0VmFsdWUoXCJmZWF0dXJlX21heGltaXNlZF93aWRnZXRzXCIpKSBicmVhaztcbiAgICAgICAgICAgICAgICBwYW5lbCA9IDxUaW1lbGluZUNhcmRcbiAgICAgICAgICAgICAgICAgICAgcm9vbT17dGhpcy5wcm9wcy5yb29tfVxuICAgICAgICAgICAgICAgICAgICByZXNpemVOb3RpZmllcj17dGhpcy5wcm9wcy5yZXNpemVOb3RpZmllcn1cbiAgICAgICAgICAgICAgICAgICAgb25DbG9zZT17dGhpcy5vbkNsb3NlfSAvPjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgUmlnaHRQYW5lbFBoYXNlcy5GaWxlUGFuZWw6XG4gICAgICAgICAgICAgICAgcGFuZWwgPSA8RmlsZVBhbmVsIHJvb21JZD17cm9vbUlkfSByZXNpemVOb3RpZmllcj17dGhpcy5wcm9wcy5yZXNpemVOb3RpZmllcn0gb25DbG9zZT17dGhpcy5vbkNsb3NlfSAvPjtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSBSaWdodFBhbmVsUGhhc2VzLlRocmVhZFZpZXc6XG4gICAgICAgICAgICAgICAgcGFuZWwgPSA8VGhyZWFkVmlld1xuICAgICAgICAgICAgICAgICAgICByb29tPXt0aGlzLnByb3BzLnJvb219XG4gICAgICAgICAgICAgICAgICAgIHJlc2l6ZU5vdGlmaWVyPXt0aGlzLnByb3BzLnJlc2l6ZU5vdGlmaWVyfVxuICAgICAgICAgICAgICAgICAgICBvbkNsb3NlPXt0aGlzLm9uQ2xvc2V9XG4gICAgICAgICAgICAgICAgICAgIG14RXZlbnQ9e3RoaXMuc3RhdGUuZXZlbnR9XG4gICAgICAgICAgICAgICAgICAgIGluaXRpYWxFdmVudD17dGhpcy5zdGF0ZS5pbml0aWFsRXZlbnR9XG4gICAgICAgICAgICAgICAgICAgIGluaXRpYWxFdmVudEhpZ2hsaWdodGVkPXt0aGlzLnN0YXRlLmluaXRpYWxFdmVudEhpZ2hsaWdodGVkfVxuICAgICAgICAgICAgICAgICAgICBwZXJtYWxpbmtDcmVhdG9yPXt0aGlzLnByb3BzLnBlcm1hbGlua0NyZWF0b3J9XG4gICAgICAgICAgICAgICAgICAgIGUyZVN0YXR1cz17dGhpcy5wcm9wcy5lMmVTdGF0dXN9IC8+O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIFJpZ2h0UGFuZWxQaGFzZXMuVGhyZWFkUGFuZWw6XG4gICAgICAgICAgICAgICAgcGFuZWwgPSA8VGhyZWFkUGFuZWxcbiAgICAgICAgICAgICAgICAgICAgcm9vbUlkPXtyb29tSWR9XG4gICAgICAgICAgICAgICAgICAgIHJlc2l6ZU5vdGlmaWVyPXt0aGlzLnByb3BzLnJlc2l6ZU5vdGlmaWVyfVxuICAgICAgICAgICAgICAgICAgICBvbkNsb3NlPXt0aGlzLm9uQ2xvc2V9XG4gICAgICAgICAgICAgICAgICAgIHBlcm1hbGlua0NyZWF0b3I9e3RoaXMucHJvcHMucGVybWFsaW5rQ3JlYXRvcn1cbiAgICAgICAgICAgICAgICAvPjtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSBSaWdodFBhbmVsUGhhc2VzLlJvb21TdW1tYXJ5OlxuICAgICAgICAgICAgICAgIHBhbmVsID0gPFJvb21TdW1tYXJ5Q2FyZCByb29tPXt0aGlzLnByb3BzLnJvb219IG9uQ2xvc2U9e3RoaXMub25DbG9zZX0gLz47XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgUmlnaHRQYW5lbFBoYXNlcy5XaWRnZXQ6XG4gICAgICAgICAgICAgICAgcGFuZWwgPSA8V2lkZ2V0Q2FyZCByb29tPXt0aGlzLnByb3BzLnJvb219IHdpZGdldElkPXt0aGlzLnN0YXRlLndpZGdldElkfSBvbkNsb3NlPXt0aGlzLm9uQ2xvc2V9IC8+O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxhc2lkZSBjbGFzc05hbWU9XCJteF9SaWdodFBhbmVsIGRhcmstcGFuZWxcIiBpZD1cIm14X1JpZ2h0UGFuZWxcIj5cbiAgICAgICAgICAgICAgICB7IHBhbmVsIH1cbiAgICAgICAgICAgIDwvYXNpZGU+XG4gICAgICAgICk7XG4gICAgfVxufVxuIl19