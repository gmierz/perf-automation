"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _languageHandler = require("../../languageHandler");

var _MatrixClientPeg = require("../../MatrixClientPeg");

var _BaseCard = _interopRequireDefault(require("../views/right_panel/BaseCard"));

var _replaceableComponent = require("../../utils/replaceableComponent");

var _TimelinePanel = _interopRequireDefault(require("./TimelinePanel"));

var _Spinner = _interopRequireDefault(require("../views/elements/Spinner"));

var _EventTile = require("../views/rooms/EventTile");

var _Layout = require("../../settings/enums/Layout");

var _RoomContext = _interopRequireWildcard(require("../../contexts/RoomContext"));

var _logger = require("matrix-js-sdk/src/logger");

var _dec, _class, _class2, _temp;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

let NotificationPanel = (
/*
 * Component which shows the global notification list using a TimelinePanel
 */
_dec = (0, _replaceableComponent.replaceableComponent)("structures.NotificationPanel"), _dec(_class = (_temp = _class2 = class NotificationPanel extends _react.default.PureComponent {
  render() {
    const emptyState = /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_RightPanel_empty mx_NotificationPanel_empty"
    }, /*#__PURE__*/_react.default.createElement("h2", null, (0, _languageHandler._t)("You're all caught up")), /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)('You have no visible notifications.')));

    let content;

    const timelineSet = _MatrixClientPeg.MatrixClientPeg.get().getNotifTimelineSet();

    if (timelineSet) {
      // wrap a TimelinePanel with the jump-to-event bits turned off.
      content = /*#__PURE__*/_react.default.createElement(_TimelinePanel.default, {
        manageReadReceipts: false,
        manageReadMarkers: false,
        timelineSet: timelineSet,
        showUrlPreview: false,
        tileShape: _EventTile.TileShape.Notif,
        empty: emptyState,
        alwaysShowTimestamps: true,
        layout: _Layout.Layout.Group
      });
    } else {
      _logger.logger.error("No notifTimelineSet available!");

      content = /*#__PURE__*/_react.default.createElement(_Spinner.default, null);
    }

    return /*#__PURE__*/_react.default.createElement(_RoomContext.default.Provider, {
      value: _objectSpread(_objectSpread({}, this.context), {}, {
        timelineRenderingType: _RoomContext.TimelineRenderingType.Notification
      })
    }, /*#__PURE__*/_react.default.createElement(_BaseCard.default, {
      className: "mx_NotificationPanel",
      onClose: this.props.onClose,
      withoutScrollContainer: true
    }, content));
  }

}, (0, _defineProperty2.default)(_class2, "contextType", _RoomContext.default), _temp)) || _class);
exports.default = NotificationPanel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3N0cnVjdHVyZXMvTm90aWZpY2F0aW9uUGFuZWwudHN4Il0sIm5hbWVzIjpbIk5vdGlmaWNhdGlvblBhbmVsIiwiUmVhY3QiLCJQdXJlQ29tcG9uZW50IiwicmVuZGVyIiwiZW1wdHlTdGF0ZSIsImNvbnRlbnQiLCJ0aW1lbGluZVNldCIsIk1hdHJpeENsaWVudFBlZyIsImdldCIsImdldE5vdGlmVGltZWxpbmVTZXQiLCJUaWxlU2hhcGUiLCJOb3RpZiIsIkxheW91dCIsIkdyb3VwIiwibG9nZ2VyIiwiZXJyb3IiLCJjb250ZXh0IiwidGltZWxpbmVSZW5kZXJpbmdUeXBlIiwiVGltZWxpbmVSZW5kZXJpbmdUeXBlIiwiTm90aWZpY2F0aW9uIiwicHJvcHMiLCJvbkNsb3NlIiwiUm9vbUNvbnRleHQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBZ0JBOztBQUVBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUVBOzs7Ozs7Ozs7Ozs7SUFVcUJBLGlCO0FBSnJCO0FBQ0E7QUFDQTtPQUNDLGdEQUFxQiw4QkFBckIsQyxtQ0FBRCxNQUNxQkEsaUJBRHJCLFNBQytDQyxlQUFNQyxhQURyRCxDQUMyRTtBQUV2RUMsRUFBQUEsTUFBTSxHQUFHO0FBQ0wsVUFBTUMsVUFBVSxnQkFBSTtBQUFLLE1BQUEsU0FBUyxFQUFDO0FBQWYsb0JBQ2hCLHlDQUFNLHlCQUFHLHNCQUFILENBQU4sQ0FEZ0IsZUFFaEIsd0NBQUsseUJBQUcsb0NBQUgsQ0FBTCxDQUZnQixDQUFwQjs7QUFLQSxRQUFJQyxPQUFKOztBQUNBLFVBQU1DLFdBQVcsR0FBR0MsaUNBQWdCQyxHQUFoQixHQUFzQkMsbUJBQXRCLEVBQXBCOztBQUNBLFFBQUlILFdBQUosRUFBaUI7QUFDYjtBQUNBRCxNQUFBQSxPQUFPLGdCQUNILDZCQUFDLHNCQUFEO0FBQ0ksUUFBQSxrQkFBa0IsRUFBRSxLQUR4QjtBQUVJLFFBQUEsaUJBQWlCLEVBQUUsS0FGdkI7QUFHSSxRQUFBLFdBQVcsRUFBRUMsV0FIakI7QUFJSSxRQUFBLGNBQWMsRUFBRSxLQUpwQjtBQUtJLFFBQUEsU0FBUyxFQUFFSSxxQkFBVUMsS0FMekI7QUFNSSxRQUFBLEtBQUssRUFBRVAsVUFOWDtBQU9JLFFBQUEsb0JBQW9CLEVBQUUsSUFQMUI7QUFRSSxRQUFBLE1BQU0sRUFBRVEsZUFBT0M7QUFSbkIsUUFESjtBQVlILEtBZEQsTUFjTztBQUNIQyxxQkFBT0MsS0FBUCxDQUFhLGdDQUFiOztBQUNBVixNQUFBQSxPQUFPLGdCQUFHLDZCQUFDLGdCQUFELE9BQVY7QUFDSDs7QUFFRCx3QkFBTyw2QkFBQyxvQkFBRCxDQUFhLFFBQWI7QUFBc0IsTUFBQSxLQUFLLGtDQUMzQixLQUFLVyxPQURzQjtBQUU5QkMsUUFBQUEscUJBQXFCLEVBQUVDLG1DQUFzQkM7QUFGZjtBQUEzQixvQkFJSCw2QkFBQyxpQkFBRDtBQUFVLE1BQUEsU0FBUyxFQUFDLHNCQUFwQjtBQUEyQyxNQUFBLE9BQU8sRUFBRSxLQUFLQyxLQUFMLENBQVdDLE9BQS9EO0FBQXdFLE1BQUEsc0JBQXNCO0FBQTlGLE9BQ01oQixPQUROLENBSkcsQ0FBUDtBQVFIOztBQXJDc0UsQyx3REFDbERpQixvQiIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5Db3B5cmlnaHQgMjAxNiwgMjAxOSwgMjAyMSBUaGUgTWF0cml4Lm9yZyBGb3VuZGF0aW9uIEMuSS5DLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxuaW1wb3J0IHsgX3QgfSBmcm9tICcuLi8uLi9sYW5ndWFnZUhhbmRsZXInO1xuaW1wb3J0IHsgTWF0cml4Q2xpZW50UGVnIH0gZnJvbSBcIi4uLy4uL01hdHJpeENsaWVudFBlZ1wiO1xuaW1wb3J0IEJhc2VDYXJkIGZyb20gXCIuLi92aWV3cy9yaWdodF9wYW5lbC9CYXNlQ2FyZFwiO1xuaW1wb3J0IHsgcmVwbGFjZWFibGVDb21wb25lbnQgfSBmcm9tIFwiLi4vLi4vdXRpbHMvcmVwbGFjZWFibGVDb21wb25lbnRcIjtcbmltcG9ydCBUaW1lbGluZVBhbmVsIGZyb20gXCIuL1RpbWVsaW5lUGFuZWxcIjtcbmltcG9ydCBTcGlubmVyIGZyb20gXCIuLi92aWV3cy9lbGVtZW50cy9TcGlubmVyXCI7XG5pbXBvcnQgeyBUaWxlU2hhcGUgfSBmcm9tIFwiLi4vdmlld3Mvcm9vbXMvRXZlbnRUaWxlXCI7XG5pbXBvcnQgeyBMYXlvdXQgfSBmcm9tIFwiLi4vLi4vc2V0dGluZ3MvZW51bXMvTGF5b3V0XCI7XG5pbXBvcnQgUm9vbUNvbnRleHQsIHsgVGltZWxpbmVSZW5kZXJpbmdUeXBlIH0gZnJvbSBcIi4uLy4uL2NvbnRleHRzL1Jvb21Db250ZXh0XCI7XG5cbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gXCJtYXRyaXgtanMtc2RrL3NyYy9sb2dnZXJcIjtcblxuaW50ZXJmYWNlIElQcm9wcyB7XG4gICAgb25DbG9zZSgpOiB2b2lkO1xufVxuXG4vKlxuICogQ29tcG9uZW50IHdoaWNoIHNob3dzIHRoZSBnbG9iYWwgbm90aWZpY2F0aW9uIGxpc3QgdXNpbmcgYSBUaW1lbGluZVBhbmVsXG4gKi9cbkByZXBsYWNlYWJsZUNvbXBvbmVudChcInN0cnVjdHVyZXMuTm90aWZpY2F0aW9uUGFuZWxcIilcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE5vdGlmaWNhdGlvblBhbmVsIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudDxJUHJvcHM+IHtcbiAgICBzdGF0aWMgY29udGV4dFR5cGUgPSBSb29tQ29udGV4dDtcbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGNvbnN0IGVtcHR5U3RhdGUgPSAoPGRpdiBjbGFzc05hbWU9XCJteF9SaWdodFBhbmVsX2VtcHR5IG14X05vdGlmaWNhdGlvblBhbmVsX2VtcHR5XCI+XG4gICAgICAgICAgICA8aDI+eyBfdChcIllvdSdyZSBhbGwgY2F1Z2h0IHVwXCIpIH08L2gyPlxuICAgICAgICAgICAgPHA+eyBfdCgnWW91IGhhdmUgbm8gdmlzaWJsZSBub3RpZmljYXRpb25zLicpIH08L3A+XG4gICAgICAgIDwvZGl2Pik7XG5cbiAgICAgICAgbGV0IGNvbnRlbnQ7XG4gICAgICAgIGNvbnN0IHRpbWVsaW5lU2V0ID0gTWF0cml4Q2xpZW50UGVnLmdldCgpLmdldE5vdGlmVGltZWxpbmVTZXQoKTtcbiAgICAgICAgaWYgKHRpbWVsaW5lU2V0KSB7XG4gICAgICAgICAgICAvLyB3cmFwIGEgVGltZWxpbmVQYW5lbCB3aXRoIHRoZSBqdW1wLXRvLWV2ZW50IGJpdHMgdHVybmVkIG9mZi5cbiAgICAgICAgICAgIGNvbnRlbnQgPSAoXG4gICAgICAgICAgICAgICAgPFRpbWVsaW5lUGFuZWxcbiAgICAgICAgICAgICAgICAgICAgbWFuYWdlUmVhZFJlY2VpcHRzPXtmYWxzZX1cbiAgICAgICAgICAgICAgICAgICAgbWFuYWdlUmVhZE1hcmtlcnM9e2ZhbHNlfVxuICAgICAgICAgICAgICAgICAgICB0aW1lbGluZVNldD17dGltZWxpbmVTZXR9XG4gICAgICAgICAgICAgICAgICAgIHNob3dVcmxQcmV2aWV3PXtmYWxzZX1cbiAgICAgICAgICAgICAgICAgICAgdGlsZVNoYXBlPXtUaWxlU2hhcGUuTm90aWZ9XG4gICAgICAgICAgICAgICAgICAgIGVtcHR5PXtlbXB0eVN0YXRlfVxuICAgICAgICAgICAgICAgICAgICBhbHdheXNTaG93VGltZXN0YW1wcz17dHJ1ZX1cbiAgICAgICAgICAgICAgICAgICAgbGF5b3V0PXtMYXlvdXQuR3JvdXB9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsb2dnZXIuZXJyb3IoXCJObyBub3RpZlRpbWVsaW5lU2V0IGF2YWlsYWJsZSFcIik7XG4gICAgICAgICAgICBjb250ZW50ID0gPFNwaW5uZXIgLz47XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gPFJvb21Db250ZXh0LlByb3ZpZGVyIHZhbHVlPXt7XG4gICAgICAgICAgICAuLi50aGlzLmNvbnRleHQsXG4gICAgICAgICAgICB0aW1lbGluZVJlbmRlcmluZ1R5cGU6IFRpbWVsaW5lUmVuZGVyaW5nVHlwZS5Ob3RpZmljYXRpb24sXG4gICAgICAgIH19PlxuICAgICAgICAgICAgPEJhc2VDYXJkIGNsYXNzTmFtZT1cIm14X05vdGlmaWNhdGlvblBhbmVsXCIgb25DbG9zZT17dGhpcy5wcm9wcy5vbkNsb3NlfSB3aXRob3V0U2Nyb2xsQ29udGFpbmVyPlxuICAgICAgICAgICAgICAgIHsgY29udGVudCB9XG4gICAgICAgICAgICA8L0Jhc2VDYXJkPlxuICAgICAgICA8L1Jvb21Db250ZXh0LlByb3ZpZGVyPjtcbiAgICB9XG59XG4iXX0=