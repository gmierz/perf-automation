"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ChevronFace = void 0;
Object.defineProperty(exports, "ContextMenuButton", {
  enumerable: true,
  get: function () {
    return _ContextMenuButton.ContextMenuButton;
  }
});
Object.defineProperty(exports, "ContextMenuTooltipButton", {
  enumerable: true,
  get: function () {
    return _ContextMenuTooltipButton.ContextMenuTooltipButton;
  }
});
Object.defineProperty(exports, "MenuGroup", {
  enumerable: true,
  get: function () {
    return _MenuGroup.MenuGroup;
  }
});
Object.defineProperty(exports, "MenuItem", {
  enumerable: true,
  get: function () {
    return _MenuItem.MenuItem;
  }
});
Object.defineProperty(exports, "MenuItemCheckbox", {
  enumerable: true,
  get: function () {
    return _MenuItemCheckbox.MenuItemCheckbox;
  }
});
Object.defineProperty(exports, "MenuItemRadio", {
  enumerable: true,
  get: function () {
    return _MenuItemRadio.MenuItemRadio;
  }
});
Object.defineProperty(exports, "StyledMenuItemCheckbox", {
  enumerable: true,
  get: function () {
    return _StyledMenuItemCheckbox.StyledMenuItemCheckbox;
  }
});
Object.defineProperty(exports, "StyledMenuItemRadio", {
  enumerable: true,
  get: function () {
    return _StyledMenuItemRadio.StyledMenuItemRadio;
  }
});
exports.alwaysAboveRightOf = exports.alwaysAboveLeftOf = exports.aboveLeftOf = void 0;
exports.createMenu = createMenu;
exports.useContextMenu = exports.toRightOf = exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireWildcard(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _classnames = _interopRequireDefault(require("classnames"));

var _reactFocusLock = _interopRequireDefault(require("react-focus-lock"));

var _Keyboard = require("../../Keyboard");

var _replaceableComponent = require("../../utils/replaceableComponent");

var _UIStore = _interopRequireDefault(require("../../stores/UIStore"));

var _ContextMenuButton = require("../../accessibility/context_menu/ContextMenuButton");

var _ContextMenuTooltipButton = require("../../accessibility/context_menu/ContextMenuTooltipButton");

var _MenuGroup = require("../../accessibility/context_menu/MenuGroup");

var _MenuItem = require("../../accessibility/context_menu/MenuItem");

var _MenuItemCheckbox = require("../../accessibility/context_menu/MenuItemCheckbox");

var _MenuItemRadio = require("../../accessibility/context_menu/MenuItemRadio");

var _StyledMenuItemCheckbox = require("../../accessibility/context_menu/StyledMenuItemCheckbox");

var _StyledMenuItemRadio = require("../../accessibility/context_menu/StyledMenuItemRadio");

var _dec, _class, _class2, _temp;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

// Shamelessly ripped off Modal.js.  There's probably a better way
// of doing reusable widgets like dialog boxes & menus where we go and
// pass in a custom control as the actual body.
const ContextualMenuContainerId = "mx_ContextualMenu_Container";

function getOrCreateContainer() {
  let container = document.getElementById(ContextualMenuContainerId);

  if (!container) {
    container = document.createElement("div");
    container.id = ContextualMenuContainerId;
    document.body.appendChild(container);
  }

  return container;
}

let ChevronFace;
exports.ChevronFace = ChevronFace;

(function (ChevronFace) {
  ChevronFace["Top"] = "top";
  ChevronFace["Bottom"] = "bottom";
  ChevronFace["Left"] = "left";
  ChevronFace["Right"] = "right";
  ChevronFace["None"] = "none";
})(ChevronFace || (exports.ChevronFace = ChevronFace = {}));

let ContextMenu = ( // Generic ContextMenu Portal wrapper
// all options inside the menu should be of role=menuitem/menuitemcheckbox/menuitemradiobutton and have tabIndex={-1}
// this will allow the ContextMenu to manage its own focus using arrow keys as per the ARIA guidelines.
_dec = (0, _replaceableComponent.replaceableComponent)("structures.ContextMenu"), _dec(_class = (_temp = _class2 = class ContextMenu extends _react.default.PureComponent {
  constructor(props, context) {
    super(props, context);
    (0, _defineProperty2.default)(this, "initialFocus", void 0);
    (0, _defineProperty2.default)(this, "collectContextMenuRect", element => {
      // We don't need to clean up when unmounting, so ignore
      if (!element) return;
      const first = element.querySelector('[role^="menuitem"]') || element.querySelector('[tab-index]');

      if (first) {
        first.focus();
      }

      this.setState({
        contextMenuElem: element
      });
    });
    (0, _defineProperty2.default)(this, "onContextMenu", e => {
      if (this.props.onFinished) {
        this.props.onFinished();
        e.preventDefault();
        e.stopPropagation();
        const x = e.clientX;
        const y = e.clientY; // XXX: This isn't pretty but the only way to allow opening a different context menu on right click whilst
        // a context menu and its click-guard are up without completely rewriting how the context menus work.

        setImmediate(() => {
          const clickEvent = document.createEvent('MouseEvents');
          clickEvent.initMouseEvent('contextmenu', true, true, window, 0, 0, 0, x, y, false, false, false, false, 0, null);
          document.elementFromPoint(x, y).dispatchEvent(clickEvent);
        });
      }
    });
    (0, _defineProperty2.default)(this, "onContextMenuPreventBubbling", e => {
      // stop propagation so that any context menu handlers don't leak out of this context menu
      // but do not inhibit the default browser menu
      e.stopPropagation();
    });
    (0, _defineProperty2.default)(this, "onFinished", ev => {
      ev.stopPropagation();
      ev.preventDefault();
      if (this.props.onFinished) this.props.onFinished();
    });
    (0, _defineProperty2.default)(this, "onMoveFocus", (element, up) => {
      let descending = false; // are we currently descending or ascending through the DOM tree?

      do {
        var _element$getAttribute;

        const child = up ? element.lastElementChild : element.firstElementChild;
        const sibling = up ? element.previousElementSibling : element.nextElementSibling;

        if (descending) {
          if (child) {
            element = child;
          } else if (sibling) {
            element = sibling;
          } else {
            descending = false;
            element = element.parentElement;
          }
        } else {
          if (sibling) {
            element = sibling;
            descending = true;
          } else {
            element = element.parentElement;
          }
        }

        if (element) {
          if (element.classList.contains("mx_ContextualMenu")) {
            // we hit the top
            element = up ? element.lastElementChild : element.firstElementChild;
            descending = true;
          }
        }
      } while (element && !((_element$getAttribute = element.getAttribute("role")) !== null && _element$getAttribute !== void 0 && _element$getAttribute.startsWith("menuitem")));

      if (element) {
        element.focus();
      }
    });
    (0, _defineProperty2.default)(this, "onMoveFocusHomeEnd", (element, up) => {
      let results = element.querySelectorAll('[role^="menuitem"]');

      if (!results) {
        results = element.querySelectorAll('[tab-index]');
      }

      if (results && results.length) {
        if (up) {
          results[0].focus();
        } else {
          results[results.length - 1].focus();
        }
      }
    });
    (0, _defineProperty2.default)(this, "onClick", ev => {
      // Don't allow clicks to escape the context menu wrapper
      ev.stopPropagation();
    });
    (0, _defineProperty2.default)(this, "onKeyDown", ev => {
      // don't let keyboard handling escape the context menu
      ev.stopPropagation();

      if (!this.props.managed) {
        if (ev.key === _Keyboard.Key.ESCAPE) {
          this.props.onFinished();
          ev.preventDefault();
        }

        return;
      }

      let handled = true;

      switch (ev.key) {
        // XXX: this is imitating roving behaviour, it should really use the RovingTabIndex utils
        // to inherit proper handling of unmount edge cases
        case _Keyboard.Key.TAB:
        case _Keyboard.Key.ESCAPE:
        case _Keyboard.Key.ARROW_LEFT: // close on left and right arrows too for when it is a context menu on a <Toolbar />

        case _Keyboard.Key.ARROW_RIGHT:
          this.props.onFinished();
          break;

        case _Keyboard.Key.ARROW_UP:
          this.onMoveFocus(ev.target, true);
          break;

        case _Keyboard.Key.ARROW_DOWN:
          this.onMoveFocus(ev.target, false);
          break;

        case _Keyboard.Key.HOME:
          this.onMoveFocusHomeEnd(this.state.contextMenuElem, true);
          break;

        case _Keyboard.Key.END:
          this.onMoveFocusHomeEnd(this.state.contextMenuElem, false);
          break;

        default:
          handled = false;
      }

      if (handled) {
        // consume all other keys in context menu
        ev.preventDefault();
      }
    });
    this.state = {
      contextMenuElem: null
    }; // persist what had focus when we got initialized so we can return it after

    this.initialFocus = document.activeElement;
  }

  componentWillUnmount() {
    // return focus to the thing which had it before us
    this.initialFocus.focus();
  }

  renderMenu(hasBackground = this.props.hasBackground) {
    const position = {};
    const props = this.props;

    if (props.top) {
      position.top = props.top;
    } else {
      position.bottom = props.bottom;
    }

    let chevronFace;

    if (props.left) {
      position.left = props.left;
      chevronFace = ChevronFace.Left;
    } else {
      position.right = props.right;
      chevronFace = ChevronFace.Right;
    }

    const contextMenuRect = this.state.contextMenuElem ? this.state.contextMenuElem.getBoundingClientRect() : null;
    const chevronOffset = {};

    if (props.chevronFace) {
      chevronFace = props.chevronFace;
    }

    const hasChevron = chevronFace && chevronFace !== ChevronFace.None;

    if (chevronFace === ChevronFace.Top || chevronFace === ChevronFace.Bottom) {
      chevronOffset.left = props.chevronOffset;
    } else if (position.top !== undefined) {
      const target = position.top; // By default, no adjustment is made

      let adjusted = target; // If we know the dimensions of the context menu, adjust its position
      // such that it does not leave the (padded) window.

      if (contextMenuRect) {
        const padding = 10;
        adjusted = Math.min(position.top, document.body.clientHeight - contextMenuRect.height - padding);
      }

      position.top = adjusted;
      chevronOffset.top = Math.max(props.chevronOffset, props.chevronOffset + target - adjusted);
    }

    let chevron;

    if (hasChevron) {
      chevron = /*#__PURE__*/_react.default.createElement("div", {
        style: chevronOffset,
        className: "mx_ContextualMenu_chevron_" + chevronFace
      });
    }

    const menuClasses = (0, _classnames.default)({
      'mx_ContextualMenu': true,

      /**
       * In some cases we may get the number of 0, which still means that we're supposed to properly
       * add the specific position class, but as it was falsy things didn't work as intended.
       * In addition, defensively check for counter cases where we may get more than one value,
       * even if we shouldn't.
       */
      'mx_ContextualMenu_left': !hasChevron && position.left !== undefined && !position.right,
      'mx_ContextualMenu_right': !hasChevron && position.right !== undefined && !position.left,
      'mx_ContextualMenu_top': !hasChevron && position.top !== undefined && !position.bottom,
      'mx_ContextualMenu_bottom': !hasChevron && position.bottom !== undefined && !position.top,
      'mx_ContextualMenu_withChevron_left': chevronFace === ChevronFace.Left,
      'mx_ContextualMenu_withChevron_right': chevronFace === ChevronFace.Right,
      'mx_ContextualMenu_withChevron_top': chevronFace === ChevronFace.Top,
      'mx_ContextualMenu_withChevron_bottom': chevronFace === ChevronFace.Bottom,
      'mx_ContextualMenu_rightAligned': this.props.rightAligned === true,
      'mx_ContextualMenu_bottomAligned': this.props.bottomAligned === true
    });
    const menuStyle = {};

    if (props.menuWidth) {
      menuStyle.width = props.menuWidth;
    }

    if (props.menuHeight) {
      menuStyle.height = props.menuHeight;
    }

    if (!isNaN(Number(props.menuPaddingTop))) {
      menuStyle["paddingTop"] = props.menuPaddingTop;
    }

    if (!isNaN(Number(props.menuPaddingLeft))) {
      menuStyle["paddingLeft"] = props.menuPaddingLeft;
    }

    if (!isNaN(Number(props.menuPaddingBottom))) {
      menuStyle["paddingBottom"] = props.menuPaddingBottom;
    }

    if (!isNaN(Number(props.menuPaddingRight))) {
      menuStyle["paddingRight"] = props.menuPaddingRight;
    }

    const wrapperStyle = {};

    if (!isNaN(Number(props.zIndex))) {
      menuStyle["zIndex"] = props.zIndex + 1;
      wrapperStyle["zIndex"] = props.zIndex;
    }

    let background;

    if (hasBackground) {
      background = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_ContextualMenu_background",
        style: wrapperStyle,
        onClick: this.onFinished,
        onContextMenu: this.onContextMenu
      });
    }

    let body = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, chevron, props.children);

    if (props.focusLock) {
      body = /*#__PURE__*/_react.default.createElement(_reactFocusLock.default, null, body);
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)("mx_ContextualMenu_wrapper", this.props.wrapperClassName),
      style: _objectSpread(_objectSpread({}, position), wrapperStyle),
      onKeyDown: this.onKeyDown,
      onClick: this.onClick,
      onContextMenu: this.onContextMenuPreventBubbling
    }, background, /*#__PURE__*/_react.default.createElement("div", {
      className: menuClasses,
      style: menuStyle,
      ref: this.collectContextMenuRect,
      role: this.props.managed ? "menu" : undefined
    }, body));
  }

  render() {
    if (this.props.mountAsChild) {
      // Render as a child of the current parent
      return this.renderMenu();
    } else {
      // Render as a child of a container at the root of the DOM
      return /*#__PURE__*/_reactDom.default.createPortal(this.renderMenu(), getOrCreateContainer());
    }
  }

}, (0, _defineProperty2.default)(_class2, "defaultProps", {
  hasBackground: true,
  managed: true
}), _temp)) || _class);
exports.default = ContextMenu;

// Placement method for <ContextMenu /> to position context menu to right of elementRect with chevronOffset
const toRightOf = (elementRect, chevronOffset = 12) => {
  const left = elementRect.right + window.pageXOffset + 3;
  let top = elementRect.top + elementRect.height / 2 + window.pageYOffset;
  top -= chevronOffset + 8; // where 8 is half the height of the chevron

  return {
    left,
    top,
    chevronOffset
  };
};

exports.toRightOf = toRightOf;

// Placement method for <ContextMenu /> to position context menu right-aligned and flowing to the left of elementRect,
// and either above or below: wherever there is more space (maybe this should be aboveOrBelowLeftOf?)
const aboveLeftOf = (elementRect, chevronFace = ChevronFace.None, vPadding = 0) => {
  const menuOptions = {
    chevronFace
  };
  const buttonRight = elementRect.right + window.pageXOffset;
  const buttonBottom = elementRect.bottom + window.pageYOffset;
  const buttonTop = elementRect.top + window.pageYOffset; // Align the right edge of the menu to the right edge of the button

  menuOptions.right = _UIStore.default.instance.windowWidth - buttonRight; // Align the menu vertically on whichever side of the button has more space available.

  if (buttonBottom < _UIStore.default.instance.windowHeight / 2) {
    menuOptions.top = buttonBottom + vPadding;
  } else {
    menuOptions.bottom = _UIStore.default.instance.windowHeight - buttonTop + vPadding;
  }

  return menuOptions;
}; // Placement method for <ContextMenu /> to position context menu right-aligned and flowing to the left of elementRect
// and always above elementRect


exports.aboveLeftOf = aboveLeftOf;

const alwaysAboveLeftOf = (elementRect, chevronFace = ChevronFace.None, vPadding = 0) => {
  const menuOptions = {
    chevronFace
  };
  const buttonRight = elementRect.right + window.pageXOffset;
  const buttonBottom = elementRect.bottom + window.pageYOffset;
  const buttonTop = elementRect.top + window.pageYOffset; // Align the right edge of the menu to the right edge of the button

  menuOptions.right = _UIStore.default.instance.windowWidth - buttonRight; // Align the menu vertically on whichever side of the button has more space available.

  if (buttonBottom < _UIStore.default.instance.windowHeight / 2) {
    menuOptions.top = buttonBottom + vPadding;
  } else {
    menuOptions.bottom = _UIStore.default.instance.windowHeight - buttonTop + vPadding;
  }

  return menuOptions;
}; // Placement method for <ContextMenu /> to position context menu right-aligned and flowing to the right of elementRect
// and always above elementRect


exports.alwaysAboveLeftOf = alwaysAboveLeftOf;

const alwaysAboveRightOf = (elementRect, chevronFace = ChevronFace.None, vPadding = 0) => {
  const menuOptions = {
    chevronFace
  };
  const buttonLeft = elementRect.left + window.pageXOffset;
  const buttonTop = elementRect.top + window.pageYOffset; // Align the left edge of the menu to the left edge of the button

  menuOptions.left = buttonLeft; // Align the menu vertically above the menu

  menuOptions.bottom = _UIStore.default.instance.windowHeight - buttonTop + vPadding;
  return menuOptions;
};

exports.alwaysAboveRightOf = alwaysAboveRightOf;

const useContextMenu = () => {
  const button = (0, _react.useRef)(null);
  const [isOpen, setIsOpen] = (0, _react.useState)(false);

  const open = ev => {
    ev === null || ev === void 0 ? void 0 : ev.preventDefault();
    ev === null || ev === void 0 ? void 0 : ev.stopPropagation();
    setIsOpen(true);
  };

  const close = ev => {
    ev === null || ev === void 0 ? void 0 : ev.preventDefault();
    ev === null || ev === void 0 ? void 0 : ev.stopPropagation();
    setIsOpen(false);
  };

  return [isOpen, button, open, close, setIsOpen];
}; // XXX: Deprecated, used only for dynamic Tooltips. Avoid using at all costs.


exports.useContextMenu = useContextMenu;

function createMenu(ElementClass, props) {
  const onFinished = function (...args) {
    var _props$onFinished;

    _reactDom.default.unmountComponentAtNode(getOrCreateContainer());

    props === null || props === void 0 ? void 0 : (_props$onFinished = props.onFinished) === null || _props$onFinished === void 0 ? void 0 : _props$onFinished.apply(null, args);
  };

  const menu = /*#__PURE__*/_react.default.createElement(ContextMenu, (0, _extends2.default)({}, props, {
    mountAsChild: true,
    hasBackground: false,
    onFinished: onFinished // eslint-disable-line react/jsx-no-bind
    ,
    windowResize: onFinished // eslint-disable-line react/jsx-no-bind

  }), /*#__PURE__*/_react.default.createElement(ElementClass, (0, _extends2.default)({}, props, {
    onFinished: onFinished
  })));

  _reactDom.default.render(menu, getOrCreateContainer());

  return {
    close: onFinished
  };
} // re-export the semantic helper components for simplicity
//# sourceMappingURL=data:application/json;charset=utf-8;base64,