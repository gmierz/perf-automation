"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _browserRequest = _interopRequireDefault(require("browser-request"));

var _languageHandler = require("../../languageHandler");

var _sanitizeHtml = _interopRequireDefault(require("sanitize-html"));

var _dispatcher = _interopRequireDefault(require("../../dispatcher/dispatcher"));

var _MatrixClientPeg = require("../../MatrixClientPeg");

var _classnames = _interopRequireDefault(require("classnames"));

var _MatrixClientContext = _interopRequireDefault(require("../../contexts/MatrixClientContext"));

var _AutoHideScrollbar = _interopRequireDefault(require("./AutoHideScrollbar"));

var _logger = require("matrix-js-sdk/src/logger");

/*
Copyright 2016 OpenMarket Ltd
Copyright 2017 Vector Creations Ltd
Copyright 2019 New Vector Ltd

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
class EmbeddedPage extends _react.default.PureComponent {
  constructor(props, context) {
    super(props, context);
    (0, _defineProperty2.default)(this, "unmounted", false);
    (0, _defineProperty2.default)(this, "dispatcherRef", null);
    (0, _defineProperty2.default)(this, "onAction", payload => {
      // HACK: Workaround for the context's MatrixClient not being set up at render time.
      if (payload.action === 'client_started') {
        this.forceUpdate();
      }
    });
    this.state = {
      page: ''
    };
  }

  translate(s) {
    // default implementation - skins may wish to extend this
    return (0, _sanitizeHtml.default)((0, _languageHandler._t)(s));
  }

  componentDidMount() {
    this.unmounted = false;

    if (!this.props.url) {
      return;
    } // we use request() to inline the page into the react component
    // so that it can inherit CSS and theming easily rather than mess around
    // with iframes and trying to synchronise document.stylesheets.


    (0, _browserRequest.default)({
      method: "GET",
      url: this.props.url
    }, (err, response, body) => {
      if (this.unmounted) {
        return;
      }

      if (err || response.status < 200 || response.status >= 300) {
        _logger.logger.warn(`Error loading page: ${err}`);

        this.setState({
          page: (0, _languageHandler._t)("Couldn't load page")
        });
        return;
      }

      body = body.replace(/_t\(['"]([\s\S]*?)['"]\)/mg, (match, g1) => this.translate(g1));

      if (this.props.replaceMap) {
        Object.keys(this.props.replaceMap).forEach(key => {
          body = body.split(key).join(this.props.replaceMap[key]);
        });
      }

      this.setState({
        page: body
      });
    });
    this.dispatcherRef = _dispatcher.default.register(this.onAction);
  }

  componentWillUnmount() {
    this.unmounted = true;
    if (this.dispatcherRef !== null) _dispatcher.default.unregister(this.dispatcherRef);
  }

  render() {
    // HACK: Workaround for the context's MatrixClient not updating.
    const client = this.context || _MatrixClientPeg.MatrixClientPeg.get();

    const isGuest = client ? client.isGuest() : true;
    const className = this.props.className;
    const classes = (0, _classnames.default)({
      [className]: true,
      [`${className}_guest`]: isGuest,
      [`${className}_loggedIn`]: !!client
    });

    const content = /*#__PURE__*/_react.default.createElement("div", {
      className: `${className}_body`,
      dangerouslySetInnerHTML: {
        __html: this.state.page
      }
    });

    if (this.props.scrollbar) {
      return /*#__PURE__*/_react.default.createElement(_AutoHideScrollbar.default, {
        className: classes
      }, content);
    } else {
      return /*#__PURE__*/_react.default.createElement("div", {
        className: classes
      }, content);
    }
  }

}

exports.default = EmbeddedPage;
(0, _defineProperty2.default)(EmbeddedPage, "contextType", _MatrixClientContext.default);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,