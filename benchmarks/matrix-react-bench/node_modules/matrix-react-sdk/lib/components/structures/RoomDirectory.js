"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.getDisplayAliasForRoom = getDisplayAliasForRoom;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _partials = require("matrix-js-sdk/src/@types/partials");

var _MatrixClientPeg = require("../../MatrixClientPeg");

var _dispatcher = _interopRequireDefault(require("../../dispatcher/dispatcher"));

var _Modal = _interopRequireDefault(require("../../Modal"));

var _HtmlUtils = require("../../HtmlUtils");

var _languageHandler = require("../../languageHandler");

var _SdkConfig = _interopRequireDefault(require("../../SdkConfig"));

var _DirectoryUtils = require("../../utils/DirectoryUtils");

var _Analytics = _interopRequireDefault(require("../../Analytics"));

var _NetworkDropdown = _interopRequireWildcard(require("../views/directory/NetworkDropdown"));

var _SettingsStore = _interopRequireDefault(require("../../settings/SettingsStore"));

var _GroupFilterOrderStore = _interopRequireDefault(require("../../stores/GroupFilterOrderStore"));

var _GroupStore = _interopRequireDefault(require("../../stores/GroupStore"));

var _FlairStore = _interopRequireDefault(require("../../stores/FlairStore"));

var _CountlyAnalytics = _interopRequireDefault(require("../../CountlyAnalytics"));

var _replaceableComponent = require("../../utils/replaceableComponent");

var _Media = require("../../customisations/Media");

var _AccessibleButton = _interopRequireDefault(require("../views/elements/AccessibleButton"));

var _BaseAvatar = _interopRequireDefault(require("../views/avatars/BaseAvatar"));

var _ErrorDialog = _interopRequireDefault(require("../views/dialogs/ErrorDialog"));

var _QuestionDialog = _interopRequireDefault(require("../views/dialogs/QuestionDialog"));

var _BaseDialog = _interopRequireDefault(require("../views/dialogs/BaseDialog"));

var _DirectorySearchBox = _interopRequireDefault(require("../views/elements/DirectorySearchBox"));

var _ScrollPanel = _interopRequireDefault(require("./ScrollPanel"));

var _Spinner = _interopRequireDefault(require("../views/elements/Spinner"));

var _Rooms = require("../../Rooms");

var _logger = require("matrix-js-sdk/src/logger");

var _actions = require("../../dispatcher/actions");

var _dec, _class;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const MAX_NAME_LENGTH = 80;
const MAX_TOPIC_LENGTH = 800;
const LAST_SERVER_KEY = "mx_last_room_directory_server";
const LAST_INSTANCE_KEY = "mx_last_room_directory_instance";

function track(action) {
  _Analytics.default.trackEvent('RoomDirectory', action);
}

let RoomDirectory = (_dec = (0, _replaceableComponent.replaceableComponent)("structures.RoomDirectory"), _dec(_class = class RoomDirectory extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "startTime", void 0);
    (0, _defineProperty2.default)(this, "unmounted", false);
    (0, _defineProperty2.default)(this, "nextBatch", null);
    (0, _defineProperty2.default)(this, "filterTimeout", void 0);
    (0, _defineProperty2.default)(this, "protocols", void 0);
    (0, _defineProperty2.default)(this, "refreshRoomList", () => {
      if (this.state.selectedCommunityId) {
        this.setState({
          publicRooms: _GroupStore.default.getGroupRooms(this.state.selectedCommunityId).map(r => {
            return {
              // Translate all the group properties to the directory format
              room_id: r.roomId,
              name: r.name,
              topic: r.topic,
              canonical_alias: r.canonicalAlias,
              num_joined_members: r.numJoinedMembers,
              avatarUrl: r.avatarUrl,
              world_readable: r.worldReadable,
              guest_can_join: r.guestsCanJoin
            };
          }).filter(r => {
            const filterString = this.state.filterString;

            if (filterString) {
              const containedIn = s => (s || "").toLowerCase().includes(filterString.toLowerCase());

              return containedIn(r.name) || containedIn(r.topic) || containedIn(r.canonical_alias);
            }

            return true;
          }),
          loading: false
        });
        return;
      }

      this.nextBatch = null;
      this.setState({
        publicRooms: [],
        loading: true
      });
      this.getMoreRooms();
    });
    (0, _defineProperty2.default)(this, "onRoomClicked", (room, ev) => {
      // If room was shift-clicked, remove it from the room directory
      if (ev.shiftKey && !this.state.selectedCommunityId) {
        ev.preventDefault();
        this.removeFromDirectory(room);
      }
    });
    (0, _defineProperty2.default)(this, "onOptionChange", (server, instanceId) => {
      // clear next batch so we don't try to load more rooms
      this.nextBatch = null;
      this.setState({
        // Clear the public rooms out here otherwise we needlessly
        // spend time filtering lots of rooms when we're about to
        // to clear the list anyway.
        publicRooms: [],
        roomServer: server,
        instanceId: instanceId,
        error: null
      }, this.refreshRoomList); // We also refresh the room list each time even though this
      // filtering is client-side. It hopefully won't be client side
      // for very long, and we may have fetched a thousand rooms to
      // find the five gitter ones, at which point we do not want
      // to render all those rooms when switching back to 'all networks'.
      // Easiest to just blow away the state & re-fetch.
      // We have to be careful here so that we don't set instanceId = "undefined"

      localStorage.setItem(LAST_SERVER_KEY, server);

      if (instanceId) {
        localStorage.setItem(LAST_INSTANCE_KEY, instanceId);
      } else {
        localStorage.removeItem(LAST_INSTANCE_KEY);
      }
    });
    (0, _defineProperty2.default)(this, "onFillRequest", backwards => {
      if (backwards || !this.nextBatch) return Promise.resolve(false);
      return this.getMoreRooms();
    });
    (0, _defineProperty2.default)(this, "onFilterChange", alias => {
      this.setState({
        filterString: alias || ""
      }); // don't send the request for a little bit,
      // no point hammering the server with a
      // request for every keystroke, let the
      // user finish typing.

      if (this.filterTimeout) {
        clearTimeout(this.filterTimeout);
      }

      this.filterTimeout = setTimeout(() => {
        this.filterTimeout = null;
        this.refreshRoomList();
      }, 700);
    });
    (0, _defineProperty2.default)(this, "onFilterClear", () => {
      // update immediately
      this.setState({
        filterString: ""
      }, this.refreshRoomList);

      if (this.filterTimeout) {
        clearTimeout(this.filterTimeout);
      }
    });
    (0, _defineProperty2.default)(this, "onJoinFromSearchClick", alias => {
      // If we don't have a particular instance id selected, just show that rooms alias
      if (!this.state.instanceId || this.state.instanceId === _NetworkDropdown.ALL_ROOMS) {
        // If the user specified an alias without a domain, add on whichever server is selected
        // in the dropdown
        if (alias.indexOf(':') == -1) {
          alias = alias + ':' + this.state.roomServer;
        }

        this.showRoomAlias(alias, true);
      } else {
        // This is a 3rd party protocol. Let's see if we can join it
        const protocolName = (0, _DirectoryUtils.protocolNameForInstanceId)(this.protocols, this.state.instanceId);
        const instance = (0, _DirectoryUtils.instanceForInstanceId)(this.protocols, this.state.instanceId);
        const fields = protocolName ? this.getFieldsForThirdPartyLocation(alias, this.protocols[protocolName], instance) : null;

        if (!fields) {
          const brand = _SdkConfig.default.get().brand;

          _Modal.default.createTrackedDialog('Unable to join network', '', _ErrorDialog.default, {
            title: (0, _languageHandler._t)('Unable to join network'),
            description: (0, _languageHandler._t)('%(brand)s does not know how to join a room on this network', {
              brand
            })
          });

          return;
        }

        _MatrixClientPeg.MatrixClientPeg.get().getThirdpartyLocation(protocolName, fields).then(resp => {
          if (resp.length > 0 && resp[0].alias) {
            this.showRoomAlias(resp[0].alias, true);
          } else {
            _Modal.default.createTrackedDialog('Room not found', '', _ErrorDialog.default, {
              title: (0, _languageHandler._t)('Room not found'),
              description: (0, _languageHandler._t)('Couldn\'t find a matching Matrix room')
            });
          }
        }, e => {
          _Modal.default.createTrackedDialog('Fetching third party location failed', '', _ErrorDialog.default, {
            title: (0, _languageHandler._t)('Fetching third party location failed'),
            description: (0, _languageHandler._t)('Unable to look up room ID from server')
          });
        });
      }
    });
    (0, _defineProperty2.default)(this, "onPreviewClick", (ev, room) => {
      this.showRoom(room, null, false, true);
      ev.stopPropagation();
    });
    (0, _defineProperty2.default)(this, "onViewClick", (ev, room) => {
      this.showRoom(room);
      ev.stopPropagation();
    });
    (0, _defineProperty2.default)(this, "onJoinClick", (ev, room) => {
      this.showRoom(room, null, true);
      ev.stopPropagation();
    });
    (0, _defineProperty2.default)(this, "onCreateRoomClick", () => {
      this.onFinished();

      _dispatcher.default.dispatch({
        action: 'view_create_room',
        public: true,
        defaultName: this.state.filterString.trim()
      });
    });
    (0, _defineProperty2.default)(this, "onFinished", () => {
      _CountlyAnalytics.default.instance.trackRoomDirectory(this.startTime);

      this.props.onFinished(false);
    });

    _CountlyAnalytics.default.instance.trackRoomDirectoryBegin();

    this.startTime = _CountlyAnalytics.default.getTimestamp();
    const selectedCommunityId = _SettingsStore.default.getValue("feature_communities_v2_prototypes") ? _GroupFilterOrderStore.default.getSelectedTags()[0] : null;
    let protocolsLoading = true;

    if (!_MatrixClientPeg.MatrixClientPeg.get()) {
      // We may not have a client yet when invoked from welcome page
      protocolsLoading = false;
    } else if (!selectedCommunityId) {
      _MatrixClientPeg.MatrixClientPeg.get().getThirdpartyProtocols().then(response => {
        var _SdkConfig$get$roomDi, _SdkConfig$get$roomDi2, _SettingsStore$getVal;

        this.protocols = response;

        const myHomeserver = _MatrixClientPeg.MatrixClientPeg.getHomeserverName();

        const lsRoomServer = localStorage.getItem(LAST_SERVER_KEY);
        const lsInstanceId = localStorage.getItem(LAST_INSTANCE_KEY);
        let roomServer = myHomeserver;

        if ((_SdkConfig$get$roomDi = _SdkConfig.default.get().roomDirectory) !== null && _SdkConfig$get$roomDi !== void 0 && (_SdkConfig$get$roomDi2 = _SdkConfig$get$roomDi.servers) !== null && _SdkConfig$get$roomDi2 !== void 0 && _SdkConfig$get$roomDi2.includes(lsRoomServer) || (_SettingsStore$getVal = _SettingsStore.default.getValue("room_directory_servers")) !== null && _SettingsStore$getVal !== void 0 && _SettingsStore$getVal.includes(lsRoomServer)) {
          roomServer = lsRoomServer;
        }

        let instanceId = null;

        if (roomServer === myHomeserver && (lsInstanceId === _NetworkDropdown.ALL_ROOMS || Object.values(this.protocols).some(p => p.instances.some(i => i.instance_id === lsInstanceId)))) {
          instanceId = lsInstanceId;
        } // Refresh the room list only if validation failed and we had to change these


        if (this.state.instanceId !== instanceId || this.state.roomServer !== roomServer) {
          this.setState({
            protocolsLoading: false,
            instanceId,
            roomServer
          });
          this.refreshRoomList();
          return;
        }

        this.setState({
          protocolsLoading: false
        });
      }, err => {
        _logger.logger.warn(`error loading third party protocols: ${err}`);

        this.setState({
          protocolsLoading: false
        });

        if (_MatrixClientPeg.MatrixClientPeg.get().isGuest()) {
          // Guests currently aren't allowed to use this API, so
          // ignore this as otherwise this error is literally the
          // thing you see when loading the client!
          return;
        }

        track('Failed to get protocol list from homeserver');

        const brand = _SdkConfig.default.get().brand;

        this.setState({
          error: (0, _languageHandler._t)('%(brand)s failed to get the protocol list from the homeserver. ' + 'The homeserver may be too old to support third party networks.', {
            brand
          })
        });
      });
    } else {
      // We don't use the protocols in the communities v2 prototype experience
      protocolsLoading = false; // Grab the profile info async

      _FlairStore.default.getGroupProfileCached(_MatrixClientPeg.MatrixClientPeg.get(), this.state.selectedCommunityId).then(profile => {
        this.setState({
          communityName: profile.name
        });
      });
    }

    this.state = {
      publicRooms: [],
      loading: true,
      error: null,
      instanceId: localStorage.getItem(LAST_INSTANCE_KEY),
      roomServer: localStorage.getItem(LAST_SERVER_KEY),
      filterString: this.props.initialText || "",
      selectedCommunityId,
      communityName: null,
      protocolsLoading
    };
  }

  componentDidMount() {
    this.refreshRoomList();
  }

  componentWillUnmount() {
    if (this.filterTimeout) {
      clearTimeout(this.filterTimeout);
    }

    this.unmounted = true;
  }

  getMoreRooms() {
    if (this.state.selectedCommunityId) return Promise.resolve(false); // no more rooms

    if (!_MatrixClientPeg.MatrixClientPeg.get()) return Promise.resolve(false);
    this.setState({
      loading: true
    });
    const filterString = this.state.filterString;
    const roomServer = this.state.roomServer; // remember the next batch token when we sent the request
    // too. If it's changed, appending to the list will corrupt it.

    const nextBatch = this.nextBatch;
    const opts = {
      limit: 20
    };

    if (roomServer != _MatrixClientPeg.MatrixClientPeg.getHomeserverName()) {
      opts.server = roomServer;
    }

    if (this.state.instanceId === _NetworkDropdown.ALL_ROOMS) {
      opts.include_all_networks = true;
    } else if (this.state.instanceId) {
      opts.third_party_instance_id = this.state.instanceId;
    }

    if (this.nextBatch) opts.since = this.nextBatch;
    if (filterString) opts.filter = {
      generic_search_term: filterString
    };
    return _MatrixClientPeg.MatrixClientPeg.get().publicRooms(opts).then(data => {
      if (filterString != this.state.filterString || roomServer != this.state.roomServer || nextBatch != this.nextBatch) {
        // if the filter or server has changed since this request was sent,
        // throw away the result (don't even clear the busy flag
        // since we must still have a request in flight)
        return false;
      }

      if (this.unmounted) {
        // if we've been unmounted, we don't care either.
        return false;
      }

      if (this.state.filterString) {
        const count = data.total_room_count_estimate || data.chunk.length;

        _CountlyAnalytics.default.instance.trackRoomDirectorySearch(count, this.state.filterString);
      }

      this.nextBatch = data.next_batch;
      this.setState(s => _objectSpread(_objectSpread({}, s), {}, {
        publicRooms: [...s.publicRooms, ...(data.chunk || [])],
        loading: false
      }));
      return Boolean(data.next_batch);
    }, err => {
      if (filterString != this.state.filterString || roomServer != this.state.roomServer || nextBatch != this.nextBatch) {
        // as above: we don't care about errors for old requests either
        return false;
      }

      if (this.unmounted) {
        // if we've been unmounted, we don't care either.
        return false;
      }

      _logger.logger.error("Failed to get publicRooms: %s", JSON.stringify(err));

      track('Failed to get public room list');

      const brand = _SdkConfig.default.get().brand;

      this.setState({
        loading: false,
        error: (0, _languageHandler._t)('%(brand)s failed to get the public room list.', {
          brand
        }) + (err && err.message) ? err.message : (0, _languageHandler._t)('The homeserver may be unavailable or overloaded.')
      });
    });
  }
  /**
   * A limited interface for removing rooms from the directory.
   * Will set the room to not be publicly visible and delete the
   * default alias. In the long term, it would be better to allow
   * HS admins to do this through the RoomSettings interface, but
   * this needs SPEC-417.
   */


  removeFromDirectory(room) {
    const alias = getDisplayAliasForRoom(room);
    const name = room.name || alias || (0, _languageHandler._t)('Unnamed room');
    let desc;

    if (alias) {
      desc = (0, _languageHandler._t)('Delete the room address %(alias)s and remove %(name)s from the directory?', {
        alias,
        name
      });
    } else {
      desc = (0, _languageHandler._t)('Remove %(name)s from the directory?', {
        name: name
      });
    }

    _Modal.default.createTrackedDialog('Remove from Directory', '', _QuestionDialog.default, {
      title: (0, _languageHandler._t)('Remove from Directory'),
      description: desc,
      onFinished: shouldDelete => {
        if (!shouldDelete) return;

        const modal = _Modal.default.createDialog(_Spinner.default);

        let step = (0, _languageHandler._t)('remove %(name)s from the directory.', {
          name: name
        });

        _MatrixClientPeg.MatrixClientPeg.get().setRoomDirectoryVisibility(room.room_id, _partials.Visibility.Private).then(() => {
          if (!alias) return;
          step = (0, _languageHandler._t)('delete the address.');
          return _MatrixClientPeg.MatrixClientPeg.get().deleteAlias(alias);
        }).then(() => {
          modal.close();
          this.refreshRoomList();
        }, err => {
          modal.close();
          this.refreshRoomList();

          _logger.logger.error("Failed to " + step + ": " + err);

          _Modal.default.createTrackedDialog('Remove from Directory Error', '', _ErrorDialog.default, {
            title: (0, _languageHandler._t)('Error'),
            description: err && err.message ? err.message : (0, _languageHandler._t)('The server may be unavailable or overloaded')
          });
        });
      }
    });
  }

  showRoomAlias(alias, autoJoin = false) {
    this.showRoom(null, alias, autoJoin);
  }

  showRoom(room, roomAlias, autoJoin = false, shouldPeek = false) {
    this.onFinished();
    const payload = {
      action: _actions.Action.ViewRoom,
      auto_join: autoJoin,
      should_peek: shouldPeek,
      _type: "room_directory" // instrumentation

    };

    if (room) {
      // Don't let the user view a room they won't be able to either
      // peek or join: fail earlier so they don't have to click back
      // to the directory.
      if (_MatrixClientPeg.MatrixClientPeg.get().isGuest()) {
        if (!room.world_readable && !room.guest_can_join) {
          _dispatcher.default.dispatch({
            action: 'require_registration'
          });

          return;
        }
      }

      if (!roomAlias) {
        roomAlias = getDisplayAliasForRoom(room);
      }

      payload.oob_data = {
        avatarUrl: room.avatar_url,
        // XXX: This logic is duplicated from the JS SDK which
        // would normally decide what the name is.
        name: room.name || roomAlias || (0, _languageHandler._t)('Unnamed room')
      };

      if (this.state.roomServer) {
        payload.via_servers = [this.state.roomServer];
        payload.opts = {
          viaServers: [this.state.roomServer]
        };
      }
    } // It's not really possible to join Matrix rooms by ID because the HS has no way to know
    // which servers to start querying. However, there's no other way to join rooms in
    // this list without aliases at present, so if roomAlias isn't set here we have no
    // choice but to supply the ID.


    if (roomAlias) {
      payload.room_alias = roomAlias;
    } else {
      payload.room_id = room.room_id;
    }

    _dispatcher.default.dispatch(payload);
  }

  createRoomCells(room) {
    const client = _MatrixClientPeg.MatrixClientPeg.get();

    const clientRoom = client.getRoom(room.room_id);
    const hasJoinedRoom = clientRoom && clientRoom.getMyMembership() === "join";
    const isGuest = client.isGuest();
    let previewButton;
    let joinOrViewButton; // Element Web currently does not allow guests to join rooms, so we
    // instead show them preview buttons for all rooms. If the room is not
    // world readable, a modal will appear asking you to register first. If
    // it is readable, the preview appears as normal.

    if (!hasJoinedRoom && (room.world_readable || isGuest)) {
      previewButton = /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        kind: "secondary",
        onClick: ev => this.onPreviewClick(ev, room)
      }, (0, _languageHandler._t)("Preview"));
    }

    if (hasJoinedRoom) {
      joinOrViewButton = /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        kind: "secondary",
        onClick: ev => this.onViewClick(ev, room)
      }, (0, _languageHandler._t)("View"));
    } else if (!isGuest) {
      joinOrViewButton = /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        kind: "primary",
        onClick: ev => this.onJoinClick(ev, room)
      }, (0, _languageHandler._t)("Join"));
    }

    let name = room.name || getDisplayAliasForRoom(room) || (0, _languageHandler._t)('Unnamed room');

    if (name.length > MAX_NAME_LENGTH) {
      name = `${name.substring(0, MAX_NAME_LENGTH)}...`;
    }

    let topic = room.topic || ''; // Additional truncation based on line numbers is done via CSS,
    // but to ensure that the DOM is not polluted with a huge string
    // we give it a hard limit before rendering.

    if (topic.length > MAX_TOPIC_LENGTH) {
      topic = `${topic.substring(0, MAX_TOPIC_LENGTH)}...`;
    }

    topic = (0, _HtmlUtils.linkifyAndSanitizeHtml)(topic);
    let avatarUrl = null;
    if (room.avatar_url) avatarUrl = (0, _Media.mediaFromMxc)(room.avatar_url).getSquareThumbnailHttp(32); // We use onMouseDown instead of onClick, so that we can avoid text getting selected

    return /*#__PURE__*/_react.default.createElement("div", {
      key: room.room_id,
      role: "listitem",
      className: "mx_RoomDirectory_listItem"
    }, /*#__PURE__*/_react.default.createElement("div", {
      onMouseDown: ev => this.onRoomClicked(room, ev),
      className: "mx_RoomDirectory_roomAvatar"
    }, /*#__PURE__*/_react.default.createElement(_BaseAvatar.default, {
      width: 32,
      height: 32,
      resizeMethod: "crop",
      name: name,
      idName: name,
      url: avatarUrl
    })), /*#__PURE__*/_react.default.createElement("div", {
      onMouseDown: ev => this.onRoomClicked(room, ev),
      className: "mx_RoomDirectory_roomDescription"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_RoomDirectory_name",
      onMouseDown: ev => this.onRoomClicked(room, ev)
    }, name), "\xA0", /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_RoomDirectory_topic",
      onMouseDown: ev => this.onRoomClicked(room, ev),
      dangerouslySetInnerHTML: {
        __html: topic
      }
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_RoomDirectory_alias",
      onMouseDown: ev => this.onRoomClicked(room, ev)
    }, getDisplayAliasForRoom(room))), /*#__PURE__*/_react.default.createElement("div", {
      onMouseDown: ev => this.onRoomClicked(room, ev),
      className: "mx_RoomDirectory_roomMemberCount"
    }, room.num_joined_members), /*#__PURE__*/_react.default.createElement("div", {
      onMouseDown: ev => this.onRoomClicked(room, ev) // cancel onMouseDown otherwise shift-clicking highlights text
      ,
      className: "mx_RoomDirectory_preview"
    }, previewButton), /*#__PURE__*/_react.default.createElement("div", {
      onMouseDown: ev => this.onRoomClicked(room, ev),
      className: "mx_RoomDirectory_join"
    }, joinOrViewButton));
  }

  stringLooksLikeId(s, fieldType) {
    let pat = /^#[^\s]+:[^\s]/;

    if (fieldType && fieldType.regexp) {
      pat = new RegExp(fieldType.regexp);
    }

    return pat.test(s);
  }

  getFieldsForThirdPartyLocation(userInput, protocol, instance) {
    // make an object with the fields specified by that protocol. We
    // require that the values of all but the last field come from the
    // instance. The last is the user input.
    const requiredFields = protocol.location_fields;
    if (!requiredFields) return null;
    const fields = {};

    for (let i = 0; i < requiredFields.length - 1; ++i) {
      const thisField = requiredFields[i];
      if (instance.fields[thisField] === undefined) return null;
      fields[thisField] = instance.fields[thisField];
    }

    fields[requiredFields[requiredFields.length - 1]] = userInput;
    return fields;
  }

  render() {
    let content;

    if (this.state.error) {
      content = this.state.error;
    } else if (this.state.protocolsLoading) {
      content = /*#__PURE__*/_react.default.createElement(_Spinner.default, null);
    } else {
      const cells = (this.state.publicRooms || []).reduce((cells, room) => cells.concat(this.createRoomCells(room)), []); // we still show the scrollpanel, at least for now, because
      // otherwise we don't fetch more because we don't get a fill
      // request from the scrollpanel because there isn't one

      let spinner;

      if (this.state.loading) {
        spinner = /*#__PURE__*/_react.default.createElement(_Spinner.default, null);
      }

      const createNewButton = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("hr", null), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        kind: "primary",
        onClick: this.onCreateRoomClick,
        className: "mx_RoomDirectory_newRoom"
      }, (0, _languageHandler._t)("Create new room")));

      let scrollPanelContent;
      let footer;

      if (cells.length === 0 && !this.state.loading) {
        footer = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("h5", null, (0, _languageHandler._t)('No results for "%(query)s"', {
          query: this.state.filterString.trim()
        })), /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Try different words or check for typos. " + "Some results may not be visible as they're private and you need an invite to join them.")), createNewButton);
      } else {
        scrollPanelContent = /*#__PURE__*/_react.default.createElement("div", {
          className: "mx_RoomDirectory_table"
        }, cells);

        if (!this.state.loading && !this.nextBatch) {
          footer = createNewButton;
        }
      }

      content = /*#__PURE__*/_react.default.createElement(_ScrollPanel.default, {
        className: "mx_RoomDirectory_tableWrapper",
        onFillRequest: this.onFillRequest,
        stickyBottom: false,
        startAtBottom: false
      }, scrollPanelContent, spinner, footer && /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_RoomDirectory_footer"
      }, footer));
    }

    let listHeader;

    if (!this.state.protocolsLoading) {
      const protocolName = (0, _DirectoryUtils.protocolNameForInstanceId)(this.protocols, this.state.instanceId);
      let instanceExpectedFieldType;

      if (protocolName && this.protocols && this.protocols[protocolName] && this.protocols[protocolName].location_fields.length > 0 && this.protocols[protocolName].field_types) {
        const lastField = this.protocols[protocolName].location_fields.slice(-1)[0];
        instanceExpectedFieldType = this.protocols[protocolName].field_types[lastField];
      }

      let placeholder = (0, _languageHandler._t)('Find a room…');

      if (!this.state.instanceId || this.state.instanceId === _NetworkDropdown.ALL_ROOMS) {
        placeholder = (0, _languageHandler._t)("Find a room… (e.g. %(exampleRoom)s)", {
          exampleRoom: "#example:" + this.state.roomServer
        });
      } else if (instanceExpectedFieldType) {
        placeholder = instanceExpectedFieldType.placeholder;
      }

      let showJoinButton = this.stringLooksLikeId(this.state.filterString, instanceExpectedFieldType);

      if (protocolName) {
        const instance = (0, _DirectoryUtils.instanceForInstanceId)(this.protocols, this.state.instanceId);

        if (this.getFieldsForThirdPartyLocation(this.state.filterString, this.protocols[protocolName], instance) === null) {
          showJoinButton = false;
        }
      }

      let dropdown = /*#__PURE__*/_react.default.createElement(_NetworkDropdown.default, {
        protocols: this.protocols,
        onOptionChange: this.onOptionChange,
        selectedServerName: this.state.roomServer,
        selectedInstanceId: this.state.instanceId
      });

      if (this.state.selectedCommunityId) {
        dropdown = null;
      }

      listHeader = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_RoomDirectory_listheader"
      }, /*#__PURE__*/_react.default.createElement(_DirectorySearchBox.default, {
        className: "mx_RoomDirectory_searchbox",
        onChange: this.onFilterChange,
        onClear: this.onFilterClear,
        onJoinClick: this.onJoinFromSearchClick,
        placeholder: placeholder,
        showJoinButton: showJoinButton,
        initialText: this.props.initialText
      }), dropdown);
    }

    const explanation = (0, _languageHandler._t)("If you can't find the room you're looking for, ask for an invite or <a>Create a new room</a>.", null, {
      a: sub => /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        kind: "secondary",
        onClick: this.onCreateRoomClick
      }, sub)
    });
    const title = this.state.selectedCommunityId ? (0, _languageHandler._t)("Explore rooms in %(communityName)s", {
      communityName: this.state.communityName || this.state.selectedCommunityId
    }) : (0, _languageHandler._t)("Explore rooms");
    return /*#__PURE__*/_react.default.createElement(_BaseDialog.default, {
      className: "mx_RoomDirectory_dialog",
      hasCancel: true,
      onFinished: this.onFinished,
      title: title
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_RoomDirectory"
    }, explanation, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_RoomDirectory_list"
    }, listHeader, content)));
  }

}) || _class);
exports.default = RoomDirectory;

// Similar to matrix-react-sdk's MatrixTools.getDisplayAliasForRoom
// but works with the objects we get from the public room list
function getDisplayAliasForRoom(room) {
  return (0, _Rooms.getDisplayAliasForAliasSet)(room.canonical_alias, room.aliases);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,