"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _thread = require("matrix-js-sdk/src/models/thread");

var _event = require("matrix-js-sdk/src/@types/event");

var _BaseCard = _interopRequireDefault(require("../views/right_panel/BaseCard"));

var _RightPanelStorePhases = require("../../stores/RightPanelStorePhases");

var _replaceableComponent = require("../../utils/replaceableComponent");

var _EventTile = require("../views/rooms/EventTile");

var _MessageComposer = _interopRequireDefault(require("../views/rooms/MessageComposer"));

var _Layout = require("../../settings/enums/Layout");

var _TimelinePanel = _interopRequireDefault(require("./TimelinePanel"));

var _dispatcher = _interopRequireDefault(require("../../dispatcher/dispatcher"));

var _actions = require("../../dispatcher/actions");

var _MatrixClientPeg = require("../../MatrixClientPeg");

var _EditorStateTransfer = _interopRequireDefault(require("../../utils/EditorStateTransfer"));

var _RoomContext = _interopRequireWildcard(require("../../contexts/RoomContext"));

var _ContentMessages = _interopRequireDefault(require("../../ContentMessages"));

var _UploadBar = _interopRequireDefault(require("./UploadBar"));

var _languageHandler = require("../../languageHandler");

var _ThreadListContextMenu = _interopRequireDefault(require("../views/context_menus/ThreadListContextMenu"));

var _RightPanelStore = _interopRequireDefault(require("../../stores/RightPanelStore"));

var _SettingsStore = _interopRequireDefault(require("../../settings/SettingsStore"));

var _WidgetLayoutStore = require("../../stores/widgets/WidgetLayoutStore");

var _dec, _class, _class2, _temp;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

let ThreadView = (_dec = (0, _replaceableComponent.replaceableComponent)("structures.ThreadView"), _dec(_class = (_temp = _class2 = class ThreadView extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "dispatcherRef", void 0);
    (0, _defineProperty2.default)(this, "timelinePanelRef", /*#__PURE__*/_react.default.createRef());
    (0, _defineProperty2.default)(this, "onAction", payload => {
      if (payload.phase == _RightPanelStorePhases.RightPanelPhases.ThreadView && payload.event) {
        this.teardownThread();
        this.setupThread(payload.event);
      }

      switch (payload.action) {
        case _actions.Action.EditEvent:
          // Quit early if it's not a thread context
          if (payload.timelineRenderingType !== _RoomContext.TimelineRenderingType.Thread) return; // Quit early if that's not a thread event

          if (payload.event && !payload.event.getThread()) return;
          this.setState({
            editState: payload.event ? new _EditorStateTransfer.default(payload.event) : null
          }, () => {
            if (payload.event) {
              var _this$timelinePanelRe;

              (_this$timelinePanelRe = this.timelinePanelRef.current) === null || _this$timelinePanelRe === void 0 ? void 0 : _this$timelinePanelRe.scrollToEventIfNeeded(payload.event.getId());
            }
          });
          break;

        case 'reply_to_event':
          if (payload.context === _RoomContext.TimelineRenderingType.Thread) {
            this.setState({
              replyToEvent: payload.event
            });
          }

          break;

        default:
          break;
      }
    });
    (0, _defineProperty2.default)(this, "setupThread", mxEv => {
      let thread = this.props.room.threads.get(mxEv.getId());

      if (!thread) {
        const client = _MatrixClientPeg.MatrixClientPeg.get(); // Do not attach this thread object to the event for now
        // TODO: When local echo gets reintroduced it will be important
        // to add that back in, and the threads model should go through the
        // same reconciliation algorithm as events


        thread = new _thread.Thread([mxEv], this.props.room, client);
      }

      thread.on(_thread.ThreadEvent.Update, this.updateThread);
      thread.once(_thread.ThreadEvent.Ready, this.updateThread);
      this.updateThread(thread);
    });
    (0, _defineProperty2.default)(this, "teardownThread", () => {
      if (this.state.thread) {
        this.state.thread.removeListener(_thread.ThreadEvent.Update, this.updateThread);
        this.state.thread.removeListener(_thread.ThreadEvent.Ready, this.updateThread);
      }
    });
    (0, _defineProperty2.default)(this, "onNewThread", thread => {
      if (thread.id === this.props.mxEvent.getId()) {
        this.teardownThread();
        this.setupThread(this.props.mxEvent);
      }
    });
    (0, _defineProperty2.default)(this, "updateThread", thread => {
      var _this$timelinePanelRe2;

      if (thread) {
        this.setState({
          thread
        });
      }

      (_this$timelinePanelRe2 = this.timelinePanelRef.current) === null || _this$timelinePanelRe2 === void 0 ? void 0 : _this$timelinePanelRe2.refreshTimeline();
    });
    (0, _defineProperty2.default)(this, "onScroll", () => {
      if (this.props.initialEvent && this.props.initialEventHighlighted) {
        var _this$props$initialEv;

        _dispatcher.default.dispatch({
          action: _actions.Action.ViewRoom,
          room_id: this.props.room.roomId,
          event_id: (_this$props$initialEv = this.props.initialEvent) === null || _this$props$initialEv === void 0 ? void 0 : _this$props$initialEv.getId(),
          highlighted: false,
          replyingToEvent: this.state.replyToEvent
        });
      }
    });
    (0, _defineProperty2.default)(this, "renderThreadViewHeader", () => {
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_ThreadPanel__header"
      }, /*#__PURE__*/_react.default.createElement("span", null, (0, _languageHandler._t)("Thread")), /*#__PURE__*/_react.default.createElement(_ThreadListContextMenu.default, {
        mxEvent: this.props.mxEvent,
        permalinkCreator: this.props.permalinkCreator
      }));
    });
    this.state = {};
  }

  componentDidMount() {
    this.setupThread(this.props.mxEvent);
    this.dispatcherRef = _dispatcher.default.register(this.onAction);

    const room = _MatrixClientPeg.MatrixClientPeg.get().getRoom(this.props.mxEvent.getRoomId());

    room.on(_thread.ThreadEvent.New, this.onNewThread);
  }

  componentWillUnmount() {
    this.teardownThread();

    _dispatcher.default.unregister(this.dispatcherRef);

    const room = _MatrixClientPeg.MatrixClientPeg.get().getRoom(this.props.mxEvent.getRoomId());

    room.removeListener(_thread.ThreadEvent.New, this.onNewThread);
  }

  componentDidUpdate(prevProps) {
    if (prevProps.mxEvent !== this.props.mxEvent) {
      this.teardownThread();
      this.setupThread(this.props.mxEvent);
    }

    if (prevProps.room !== this.props.room) {
      _dispatcher.default.dispatch({
        action: _actions.Action.SetRightPanelPhase,
        phase: _RightPanelStorePhases.RightPanelPhases.RoomSummary
      });
    }
  }

  render() {
    var _this$props$initialEv2, _this$state$thread, _this$state, _this$state$thread2, _this$state$thread2$t, _this$state2, _this$state2$thread, _this$props$initialEv3, _this$state3, _this$state3$thread;

    const highlightedEventId = this.props.initialEventHighlighted ? (_this$props$initialEv2 = this.props.initialEvent) === null || _this$props$initialEv2 === void 0 ? void 0 : _this$props$initialEv2.getId() : null;
    const threadRelation = {
      rel_type: _event.RelationType.Thread,
      event_id: (_this$state$thread = this.state.thread) === null || _this$state$thread === void 0 ? void 0 : _this$state$thread.id
    };

    let previousPhase = _RightPanelStore.default.getSharedInstance().previousPhase;

    if (!_SettingsStore.default.getValue("feature_maximised_widgets")) {
      previousPhase = _RightPanelStorePhases.RightPanelPhases.ThreadPanel;
    } // change the previous phase to the threadPanel in case there is no maximised widget anymore


    if (!_WidgetLayoutStore.WidgetLayoutStore.instance.hasMaximisedWidget(this.props.room)) {
      previousPhase = _RightPanelStorePhases.RightPanelPhases.ThreadPanel;
    } // Make sure the previous Phase is always one of the two: Timeline or ThreadPanel


    if (![_RightPanelStorePhases.RightPanelPhases.ThreadPanel, _RightPanelStorePhases.RightPanelPhases.Timeline].includes(previousPhase)) {
      previousPhase = _RightPanelStorePhases.RightPanelPhases.ThreadPanel;
    }

    const previousPhaseLabels = {};
    previousPhaseLabels[_RightPanelStorePhases.RightPanelPhases.ThreadPanel] = (0, _languageHandler._t)("All threads");
    previousPhaseLabels[_RightPanelStorePhases.RightPanelPhases.Timeline] = (0, _languageHandler._t)("Chat");
    return /*#__PURE__*/_react.default.createElement(_RoomContext.default.Provider, {
      value: _objectSpread(_objectSpread({}, this.context), {}, {
        timelineRenderingType: _RoomContext.TimelineRenderingType.Thread,
        liveTimeline: (_this$state = this.state) === null || _this$state === void 0 ? void 0 : (_this$state$thread2 = _this$state.thread) === null || _this$state$thread2 === void 0 ? void 0 : (_this$state$thread2$t = _this$state$thread2.timelineSet) === null || _this$state$thread2$t === void 0 ? void 0 : _this$state$thread2$t.getLiveTimeline()
      })
    }, /*#__PURE__*/_react.default.createElement(_BaseCard.default, {
      className: "mx_ThreadView mx_ThreadPanel",
      onClose: this.props.onClose,
      previousPhase: previousPhase,
      previousPhaseLabel: previousPhaseLabels[previousPhase],
      withoutScrollContainer: true,
      header: this.renderThreadViewHeader()
    }, this.state.thread && /*#__PURE__*/_react.default.createElement(_TimelinePanel.default, {
      ref: this.timelinePanelRef,
      showReadReceipts: false // No RR support in thread's MVP
      ,
      manageReadReceipts: false // No RR support in thread's MVP
      ,
      manageReadMarkers: false // No RM support in thread's MVP
      ,
      sendReadReceiptOnLoad: false // No RR support in thread's MVP
      ,
      timelineSet: (_this$state2 = this.state) === null || _this$state2 === void 0 ? void 0 : (_this$state2$thread = _this$state2.thread) === null || _this$state2$thread === void 0 ? void 0 : _this$state2$thread.timelineSet,
      showUrlPreview: true,
      tileShape: _EventTile.TileShape.Thread,
      layout: _Layout.Layout.Group,
      hideThreadedMessages: false,
      hidden: false,
      showReactions: true,
      className: "mx_RoomView_messagePanel mx_GroupLayout",
      permalinkCreator: this.props.permalinkCreator,
      membersLoaded: true,
      editState: this.state.editState,
      eventId: (_this$props$initialEv3 = this.props.initialEvent) === null || _this$props$initialEv3 === void 0 ? void 0 : _this$props$initialEv3.getId(),
      highlightedEventId: highlightedEventId,
      onUserScroll: this.onScroll
    }), _ContentMessages.default.sharedInstance().getCurrentUploads(threadRelation).length > 0 && /*#__PURE__*/_react.default.createElement(_UploadBar.default, {
      room: this.props.room,
      relation: threadRelation
    }), ((_this$state3 = this.state) === null || _this$state3 === void 0 ? void 0 : (_this$state3$thread = _this$state3.thread) === null || _this$state3$thread === void 0 ? void 0 : _this$state3$thread.timelineSet) && /*#__PURE__*/_react.default.createElement(_MessageComposer.default, {
      room: this.props.room,
      resizeNotifier: this.props.resizeNotifier,
      relation: threadRelation,
      replyToEvent: this.state.replyToEvent,
      permalinkCreator: this.props.permalinkCreator,
      e2eStatus: this.props.e2eStatus,
      compact: true
    })));
  }

}, (0, _defineProperty2.default)(_class2, "contextType", _RoomContext.default), _temp)) || _class);
exports.default = ThreadView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,