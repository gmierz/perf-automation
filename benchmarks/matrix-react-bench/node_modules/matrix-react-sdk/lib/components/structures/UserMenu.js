"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _MatrixClientPeg = require("../../MatrixClientPeg");

var _dispatcher = _interopRequireDefault(require("../../dispatcher/dispatcher"));

var _actions = require("../../dispatcher/actions");

var _languageHandler = require("../../languageHandler");

var _ContextMenu = require("./ContextMenu");

var _UserSettingsDialog = require("../views/dialogs/UserSettingsDialog");

var _FeedbackDialog = _interopRequireDefault(require("../views/dialogs/FeedbackDialog"));

var _Modal = _interopRequireDefault(require("../../Modal"));

var _LogoutDialog = _interopRequireDefault(require("../views/dialogs/LogoutDialog"));

var _SettingsStore = _interopRequireDefault(require("../../settings/SettingsStore"));

var _theme = require("../../theme");

var _AccessibleButton = _interopRequireDefault(require("../views/elements/AccessibleButton"));

var _SdkConfig = _interopRequireDefault(require("../../SdkConfig"));

var _pages = require("../../utils/pages");

var _OwnProfileStore = require("../../stores/OwnProfileStore");

var _AsyncStore = require("../../stores/AsyncStore");

var _BaseAvatar = _interopRequireDefault(require("../views/avatars/BaseAvatar"));

var _AccessibleTooltipButton = _interopRequireDefault(require("../views/elements/AccessibleTooltipButton"));

var _SettingLevel = require("../../settings/SettingLevel");

var _IconizedContextMenu = _interopRequireWildcard(require("../views/context_menus/IconizedContextMenu"));

var _CommunityPrototypeStore = require("../../stores/CommunityPrototypeStore");

var _GroupFilterOrderStore = _interopRequireDefault(require("../../stores/GroupFilterOrderStore"));

var _RoomInvite = require("../../RoomInvite");

var _RightPanelStorePhases = require("../../stores/RightPanelStorePhases");

var _ErrorDialog = _interopRequireDefault(require("../views/dialogs/ErrorDialog"));

var _EditCommunityPrototypeDialog = _interopRequireDefault(require("../views/dialogs/EditCommunityPrototypeDialog"));

var _UIFeature = require("../../settings/UIFeature");

var _HostSignupAction = _interopRequireDefault(require("./HostSignupAction"));

var _SpaceStore = _interopRequireDefault(require("../../stores/spaces/SpaceStore"));

var _spaces = require("../../stores/spaces");

var _RoomName = _interopRequireDefault(require("../views/elements/RoomName"));

var _replaceableComponent = require("../../utils/replaceableComponent");

var _InlineSpinner = _interopRequireDefault(require("../views/elements/InlineSpinner"));

var _TooltipButton = _interopRequireDefault(require("../views/elements/TooltipButton"));

var _logger = require("matrix-js-sdk/src/logger");

var _dec, _class;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

let UserMenu = (_dec = (0, _replaceableComponent.replaceableComponent)("structures.UserMenu"), _dec(_class = class UserMenu extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "dispatcherRef", void 0);
    (0, _defineProperty2.default)(this, "themeWatcherRef", void 0);
    (0, _defineProperty2.default)(this, "dndWatcherRef", void 0);
    (0, _defineProperty2.default)(this, "buttonRef", /*#__PURE__*/(0, _react.createRef)());
    (0, _defineProperty2.default)(this, "tagStoreRef", void 0);
    (0, _defineProperty2.default)(this, "onRoom", room => {
      this.removePendingJoinRoom(room.roomId);
    });
    (0, _defineProperty2.default)(this, "onTagStoreUpdate", () => {
      this.forceUpdate(); // we don't have anything useful in state to update
    });
    (0, _defineProperty2.default)(this, "onProfileUpdate", async () => {
      // the store triggered an update, so force a layout update. We don't
      // have any state to store here for that to magically happen.
      this.forceUpdate();
    });
    (0, _defineProperty2.default)(this, "onSelectedSpaceUpdate", async () => {
      this.setState({
        selectedSpace: _SpaceStore.default.instance.activeSpaceRoom
      });
    });
    (0, _defineProperty2.default)(this, "onThemeChanged", () => {
      this.setState({
        isDarkTheme: this.isUserOnDarkTheme(),
        isHighContrast: this.isUserOnHighContrastTheme()
      });
    });
    (0, _defineProperty2.default)(this, "onAction", ev => {
      switch (ev.action) {
        case _actions.Action.ToggleUserMenu:
          if (this.state.contextMenuPosition) {
            this.setState({
              contextMenuPosition: null
            });
          } else {
            if (this.buttonRef.current) this.buttonRef.current.click();
          }

          break;

        case _actions.Action.JoinRoom:
          this.addPendingJoinRoom(ev.roomId);
          break;

        case _actions.Action.JoinRoomReady:
        case _actions.Action.JoinRoomError:
          this.removePendingJoinRoom(ev.roomId);
          break;
      }
    });
    (0, _defineProperty2.default)(this, "onOpenMenuClick", ev => {
      ev.preventDefault();
      ev.stopPropagation();
      const target = ev.target;
      this.setState({
        contextMenuPosition: target.getBoundingClientRect()
      });
    });
    (0, _defineProperty2.default)(this, "onContextMenu", ev => {
      ev.preventDefault();
      ev.stopPropagation();
      this.setState({
        contextMenuPosition: {
          left: ev.clientX,
          top: ev.clientY,
          width: 20,
          height: 0
        }
      });
    });
    (0, _defineProperty2.default)(this, "onCloseMenu", () => {
      this.setState({
        contextMenuPosition: null
      });
    });
    (0, _defineProperty2.default)(this, "onSwitchThemeClick", ev => {
      ev.preventDefault();
      ev.stopPropagation(); // Disable system theme matching if the user hits this button

      _SettingsStore.default.setValue("use_system_theme", null, _SettingLevel.SettingLevel.DEVICE, false);

      let newTheme = this.state.isDarkTheme ? "light" : "dark";

      if (this.state.isHighContrast) {
        const hcTheme = (0, _theme.findHighContrastTheme)(newTheme);

        if (hcTheme) {
          newTheme = hcTheme;
        }
      }

      _SettingsStore.default.setValue("theme", null, _SettingLevel.SettingLevel.DEVICE, newTheme); // set at same level as Appearance tab

    });
    (0, _defineProperty2.default)(this, "onSettingsOpen", (ev, tabId) => {
      ev.preventDefault();
      ev.stopPropagation();
      const payload = {
        action: _actions.Action.ViewUserSettings,
        initialTabId: tabId
      };

      _dispatcher.default.dispatch(payload);

      this.setState({
        contextMenuPosition: null
      }); // also close the menu
    });
    (0, _defineProperty2.default)(this, "onShowArchived", ev => {
      ev.preventDefault();
      ev.stopPropagation(); // TODO: Archived room view: https://github.com/vector-im/element-web/issues/14038
      // Note: You'll need to uncomment the button too.

      _logger.logger.log("TODO: Show archived rooms");
    });
    (0, _defineProperty2.default)(this, "onProvideFeedback", ev => {
      ev.preventDefault();
      ev.stopPropagation();

      _Modal.default.createTrackedDialog('Feedback Dialog', '', _FeedbackDialog.default);

      this.setState({
        contextMenuPosition: null
      }); // also close the menu
    });
    (0, _defineProperty2.default)(this, "onSignOutClick", async ev => {
      var _await$cli$exportRoom;

      ev.preventDefault();
      ev.stopPropagation();

      const cli = _MatrixClientPeg.MatrixClientPeg.get();

      if (!cli || !cli.isCryptoEnabled() || !((_await$cli$exportRoom = await cli.exportRoomKeys()) !== null && _await$cli$exportRoom !== void 0 && _await$cli$exportRoom.length)) {
        // log out without user prompt if they have no local megolm sessions
        _dispatcher.default.dispatch({
          action: 'logout'
        });
      } else {
        _Modal.default.createTrackedDialog('Logout from LeftPanel', '', _LogoutDialog.default);
      }

      this.setState({
        contextMenuPosition: null
      }); // also close the menu
    });
    (0, _defineProperty2.default)(this, "onSignInClick", () => {
      _dispatcher.default.dispatch({
        action: 'start_login'
      });

      this.setState({
        contextMenuPosition: null
      }); // also close the menu
    });
    (0, _defineProperty2.default)(this, "onRegisterClick", () => {
      _dispatcher.default.dispatch({
        action: 'start_registration'
      });

      this.setState({
        contextMenuPosition: null
      }); // also close the menu
    });
    (0, _defineProperty2.default)(this, "onHomeClick", ev => {
      ev.preventDefault();
      ev.stopPropagation();

      _dispatcher.default.dispatch({
        action: 'view_home_page'
      });

      this.setState({
        contextMenuPosition: null
      }); // also close the menu
    });
    (0, _defineProperty2.default)(this, "onCommunitySettingsClick", ev => {
      ev.preventDefault();
      ev.stopPropagation();

      _Modal.default.createTrackedDialog('Edit Community', '', _EditCommunityPrototypeDialog.default, {
        communityId: _CommunityPrototypeStore.CommunityPrototypeStore.instance.getSelectedCommunityId()
      });

      this.setState({
        contextMenuPosition: null
      }); // also close the menu
    });
    (0, _defineProperty2.default)(this, "onCommunityMembersClick", ev => {
      ev.preventDefault();
      ev.stopPropagation(); // We'd ideally just pop open a right panel with the member list, but the current
      // way the right panel is structured makes this exceedingly difficult. Instead, we'll
      // switch to the general room and open the member list there as it should be in sync
      // anyways.

      const chat = _CommunityPrototypeStore.CommunityPrototypeStore.instance.getSelectedCommunityGeneralChat();

      if (chat) {
        _dispatcher.default.dispatch({
          action: _actions.Action.ViewRoom,
          room_id: chat.roomId
        }, true);

        _dispatcher.default.dispatch({
          action: _actions.Action.SetRightPanelPhase,
          phase: _RightPanelStorePhases.RightPanelPhases.RoomMemberList
        });
      } else {
        // "This should never happen" clauses go here for the prototype.
        _Modal.default.createTrackedDialog('Failed to find general chat', '', _ErrorDialog.default, {
          title: (0, _languageHandler._t)('Failed to find the general chat for this community'),
          description: (0, _languageHandler._t)("Failed to find the general chat for this community")
        });
      }

      this.setState({
        contextMenuPosition: null
      }); // also close the menu
    });
    (0, _defineProperty2.default)(this, "onCommunityInviteClick", ev => {
      ev.preventDefault();
      ev.stopPropagation();
      (0, _RoomInvite.showCommunityInviteDialog)(_CommunityPrototypeStore.CommunityPrototypeStore.instance.getSelectedCommunityId());
      this.setState({
        contextMenuPosition: null
      }); // also close the menu
    });
    (0, _defineProperty2.default)(this, "onDndToggle", ev => {
      ev.stopPropagation();

      const current = _SettingsStore.default.getValue("doNotDisturb");

      _SettingsStore.default.setValue("doNotDisturb", null, _SettingLevel.SettingLevel.DEVICE, !current);
    });
    (0, _defineProperty2.default)(this, "renderContextMenu", () => {
      if (!this.state.contextMenuPosition) return null;

      const prototypeCommunityName = _CommunityPrototypeStore.CommunityPrototypeStore.instance.getSelectedCommunityName();

      let topSection;

      const hostSignupConfig = _SdkConfig.default.get().hostSignup;

      if (_MatrixClientPeg.MatrixClientPeg.get().isGuest()) {
        topSection = /*#__PURE__*/_react.default.createElement("div", {
          className: "mx_UserMenu_contextMenu_header mx_UserMenu_contextMenu_guestPrompts"
        }, (0, _languageHandler._t)("Got an account? <a>Sign in</a>", {}, {
          a: sub => /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
            kind: "link",
            onClick: this.onSignInClick
          }, sub)
        }), (0, _languageHandler._t)("New here? <a>Create an account</a>", {}, {
          a: sub => /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
            kind: "link",
            onClick: this.onRegisterClick
          }, sub)
        }));
      } else if (hostSignupConfig) {
        if (hostSignupConfig && hostSignupConfig.url) {
          // If hostSignup.domains is set to a non-empty array, only show
          // dialog if the user is on the domain or a subdomain.
          const hostSignupDomains = hostSignupConfig.domains || [];

          const mxDomain = _MatrixClientPeg.MatrixClientPeg.get().getDomain();

          const validDomains = hostSignupDomains.filter(d => d === mxDomain || mxDomain.endsWith(`.${d}`));

          if (!hostSignupConfig.domains || validDomains.length > 0) {
            topSection = /*#__PURE__*/_react.default.createElement(_HostSignupAction.default, {
              onClick: this.onCloseMenu
            });
          }
        }
      }

      let homeButton = null;

      if (this.hasHomePage) {
        homeButton = /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
          iconClassName: "mx_UserMenu_iconHome",
          label: (0, _languageHandler._t)("Home"),
          onClick: this.onHomeClick
        });
      }

      let feedbackButton;

      if (_SettingsStore.default.getValue(_UIFeature.UIFeature.Feedback)) {
        feedbackButton = /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
          iconClassName: "mx_UserMenu_iconMessage",
          label: (0, _languageHandler._t)("Feedback"),
          onClick: this.onProvideFeedback
        });
      }

      let primaryHeader = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_UserMenu_contextMenu_name"
      }, /*#__PURE__*/_react.default.createElement("span", {
        className: "mx_UserMenu_contextMenu_displayName"
      }, _OwnProfileStore.OwnProfileStore.instance.displayName), /*#__PURE__*/_react.default.createElement("span", {
        className: "mx_UserMenu_contextMenu_userId"
      }, _MatrixClientPeg.MatrixClientPeg.get().getUserId()));

      let primaryOptionList = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOptionList, null, homeButton, /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
        iconClassName: "mx_UserMenu_iconBell",
        label: (0, _languageHandler._t)("Notification settings"),
        onClick: e => this.onSettingsOpen(e, _UserSettingsDialog.UserTab.Notifications)
      }), /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
        iconClassName: "mx_UserMenu_iconLock",
        label: (0, _languageHandler._t)("Security & privacy"),
        onClick: e => this.onSettingsOpen(e, _UserSettingsDialog.UserTab.Security)
      }), /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
        iconClassName: "mx_UserMenu_iconSettings",
        label: (0, _languageHandler._t)("All settings"),
        onClick: e => this.onSettingsOpen(e, null)
      }), feedbackButton), /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOptionList, {
        red: true
      }, /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
        iconClassName: "mx_UserMenu_iconSignOut",
        label: (0, _languageHandler._t)("Sign out"),
        onClick: this.onSignOutClick
      })));

      let secondarySection = null;

      if (prototypeCommunityName) {
        const communityId = _CommunityPrototypeStore.CommunityPrototypeStore.instance.getSelectedCommunityId();

        primaryHeader = /*#__PURE__*/_react.default.createElement("div", {
          className: "mx_UserMenu_contextMenu_name"
        }, /*#__PURE__*/_react.default.createElement("span", {
          className: "mx_UserMenu_contextMenu_displayName"
        }, prototypeCommunityName));
        let settingsOption;
        let inviteOption;

        if (_CommunityPrototypeStore.CommunityPrototypeStore.instance.canInviteTo(communityId)) {
          inviteOption = /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
            iconClassName: "mx_UserMenu_iconInvite",
            label: (0, _languageHandler._t)("Invite"),
            onClick: this.onCommunityInviteClick
          });
        }

        if (_CommunityPrototypeStore.CommunityPrototypeStore.instance.isAdminOf(communityId)) {
          settingsOption = /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
            iconClassName: "mx_UserMenu_iconSettings",
            label: (0, _languageHandler._t)("Settings"),
            "aria-label": (0, _languageHandler._t)("Community settings"),
            onClick: this.onCommunitySettingsClick
          });
        }

        primaryOptionList = /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOptionList, null, settingsOption, /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
          iconClassName: "mx_UserMenu_iconMembers",
          label: (0, _languageHandler._t)("Members"),
          onClick: this.onCommunityMembersClick
        }), inviteOption);
        secondarySection = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("hr", null), /*#__PURE__*/_react.default.createElement("div", {
          className: "mx_UserMenu_contextMenu_header"
        }, /*#__PURE__*/_react.default.createElement("div", {
          className: "mx_UserMenu_contextMenu_name"
        }, /*#__PURE__*/_react.default.createElement("span", {
          className: "mx_UserMenu_contextMenu_displayName"
        }, _OwnProfileStore.OwnProfileStore.instance.displayName), /*#__PURE__*/_react.default.createElement("span", {
          className: "mx_UserMenu_contextMenu_userId"
        }, _MatrixClientPeg.MatrixClientPeg.get().getUserId()))), /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOptionList, null, /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
          iconClassName: "mx_UserMenu_iconSettings",
          label: (0, _languageHandler._t)("Settings"),
          "aria-label": (0, _languageHandler._t)("User settings"),
          onClick: e => this.onSettingsOpen(e, null)
        }), feedbackButton), /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOptionList, {
          red: true
        }, /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
          iconClassName: "mx_UserMenu_iconSignOut",
          label: (0, _languageHandler._t)("Sign out"),
          onClick: this.onSignOutClick
        })));
      } else if (_MatrixClientPeg.MatrixClientPeg.get().isGuest()) {
        primaryOptionList = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOptionList, null, homeButton, /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
          iconClassName: "mx_UserMenu_iconSettings",
          label: (0, _languageHandler._t)("Settings"),
          onClick: e => this.onSettingsOpen(e, null)
        }), feedbackButton));
      }

      const classes = (0, _classnames.default)({
        "mx_UserMenu_contextMenu": true,
        "mx_UserMenu_contextMenu_prototype": !!prototypeCommunityName
      });
      return /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.default // numerical adjustments to overlap the context menu by just over the width of the
      // menu icon and make it look connected
      , {
        left: this.state.contextMenuPosition.width + this.state.contextMenuPosition.left - 10,
        top: this.state.contextMenuPosition.top + this.state.contextMenuPosition.height + 8,
        onFinished: this.onCloseMenu,
        className: classes
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_UserMenu_contextMenu_header"
      }, primaryHeader, /*#__PURE__*/_react.default.createElement(_AccessibleTooltipButton.default, {
        className: "mx_UserMenu_contextMenu_themeButton",
        onClick: this.onSwitchThemeClick,
        title: this.state.isDarkTheme ? (0, _languageHandler._t)("Switch to light mode") : (0, _languageHandler._t)("Switch to dark mode")
      }, /*#__PURE__*/_react.default.createElement("img", {
        src: require("../../../res/img/element-icons/roomlist/dark-light-mode.svg"),
        alt: (0, _languageHandler._t)("Switch theme"),
        width: 16
      }))), topSection, primaryOptionList, secondarySection);
    });
    this.state = {
      contextMenuPosition: null,
      isDarkTheme: this.isUserOnDarkTheme(),
      isHighContrast: this.isUserOnHighContrastTheme(),
      pendingRoomJoin: new Set(),
      selectedSpace: _SpaceStore.default.instance.activeSpaceRoom
    };

    _OwnProfileStore.OwnProfileStore.instance.on(_AsyncStore.UPDATE_EVENT, this.onProfileUpdate);

    if (_SpaceStore.default.spacesEnabled) {
      _SpaceStore.default.instance.on(_spaces.UPDATE_SELECTED_SPACE, this.onSelectedSpaceUpdate);
    } // Force update is the easiest way to trigger the UI update (we don't store state for this)


    this.dndWatcherRef = _SettingsStore.default.watchSetting("doNotDisturb", null, () => this.forceUpdate());
  }

  get hasHomePage() {
    return !!(0, _pages.getHomePageUrl)(_SdkConfig.default.get());
  }

  componentDidMount() {
    this.dispatcherRef = _dispatcher.default.register(this.onAction);
    this.themeWatcherRef = _SettingsStore.default.watchSetting("theme", null, this.onThemeChanged);
    this.tagStoreRef = _GroupFilterOrderStore.default.addListener(this.onTagStoreUpdate);

    _MatrixClientPeg.MatrixClientPeg.get().on("Room", this.onRoom);
  }

  componentWillUnmount() {
    if (this.themeWatcherRef) _SettingsStore.default.unwatchSetting(this.themeWatcherRef);
    if (this.dndWatcherRef) _SettingsStore.default.unwatchSetting(this.dndWatcherRef);
    if (this.dispatcherRef) _dispatcher.default.unregister(this.dispatcherRef);

    _OwnProfileStore.OwnProfileStore.instance.off(_AsyncStore.UPDATE_EVENT, this.onProfileUpdate);

    this.tagStoreRef.remove();

    if (_SpaceStore.default.spacesEnabled) {
      _SpaceStore.default.instance.off(_spaces.UPDATE_SELECTED_SPACE, this.onSelectedSpaceUpdate);
    }

    _MatrixClientPeg.MatrixClientPeg.get().removeListener("Room", this.onRoom);
  }

  isUserOnDarkTheme() {
    if (_SettingsStore.default.getValue("use_system_theme")) {
      return window.matchMedia("(prefers-color-scheme: dark)").matches;
    } else {
      const theme = _SettingsStore.default.getValue("theme");

      if (theme.startsWith("custom-")) {
        return (0, _theme.getCustomTheme)(theme.substring("custom-".length)).is_dark;
      }

      return theme === "dark";
    }
  }

  isUserOnHighContrastTheme() {
    if (_SettingsStore.default.getValue("use_system_theme")) {
      return window.matchMedia("(prefers-contrast: more)").matches;
    } else {
      const theme = _SettingsStore.default.getValue("theme");

      if (theme.startsWith("custom-")) {
        return false;
      }

      return (0, _theme.isHighContrastTheme)(theme);
    }
  }

  addPendingJoinRoom(roomId) {
    this.setState({
      pendingRoomJoin: new Set(this.state.pendingRoomJoin).add(roomId)
    });
  }

  removePendingJoinRoom(roomId) {
    if (this.state.pendingRoomJoin.delete(roomId)) {
      this.setState({
        pendingRoomJoin: new Set(this.state.pendingRoomJoin)
      });
    }
  }

  render() {
    const avatarSize = 32; // should match border-radius of the avatar

    const userId = _MatrixClientPeg.MatrixClientPeg.get().getUserId();

    const displayName = _OwnProfileStore.OwnProfileStore.instance.displayName || userId;

    const avatarUrl = _OwnProfileStore.OwnProfileStore.instance.getHttpAvatarUrl(avatarSize);

    const prototypeCommunityName = _CommunityPrototypeStore.CommunityPrototypeStore.instance.getSelectedCommunityName();

    let isPrototype = false;
    let menuName = (0, _languageHandler._t)("User menu");

    let name = /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_UserMenu_userName"
    }, displayName);

    let buttons = /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_UserMenu_headerButtons"
    });

    let dnd;

    if (this.state.selectedSpace) {
      name = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_UserMenu_doubleName"
      }, /*#__PURE__*/_react.default.createElement("span", {
        className: "mx_UserMenu_userName"
      }, displayName), /*#__PURE__*/_react.default.createElement(_RoomName.default, {
        room: this.state.selectedSpace
      }, roomName => /*#__PURE__*/_react.default.createElement("span", {
        className: "mx_UserMenu_subUserName"
      }, roomName)));
    } else if (prototypeCommunityName) {
      name = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_UserMenu_doubleName"
      }, /*#__PURE__*/_react.default.createElement("span", {
        className: "mx_UserMenu_userName"
      }, prototypeCommunityName), /*#__PURE__*/_react.default.createElement("span", {
        className: "mx_UserMenu_subUserName"
      }, displayName));
      menuName = (0, _languageHandler._t)("Community and user menu");
      isPrototype = true;
    } else if (_SettingsStore.default.getValue("feature_communities_v2_prototypes")) {
      name = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_UserMenu_doubleName"
      }, /*#__PURE__*/_react.default.createElement("span", {
        className: "mx_UserMenu_userName"
      }, (0, _languageHandler._t)("Home")), /*#__PURE__*/_react.default.createElement("span", {
        className: "mx_UserMenu_subUserName"
      }, displayName));
      isPrototype = true;
    } else if (_SettingsStore.default.getValue("feature_dnd")) {
      const isDnd = _SettingsStore.default.getValue("doNotDisturb");

      dnd = /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        onClick: this.onDndToggle,
        className: (0, _classnames.default)({
          "mx_UserMenu_dnd": true,
          "mx_UserMenu_dnd_noisy": !isDnd,
          "mx_UserMenu_dnd_muted": isDnd
        })
      });
    }

    if (this.props.isMinimized) {
      name = null;
      buttons = null;
    }

    const classes = (0, _classnames.default)({
      'mx_UserMenu': true,
      'mx_UserMenu_minimized': this.props.isMinimized,
      'mx_UserMenu_prototype': isPrototype
    });
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_ContextMenu.ContextMenuButton, {
      className: classes,
      onClick: this.onOpenMenuClick,
      inputRef: this.buttonRef,
      label: menuName,
      isExpanded: !!this.state.contextMenuPosition,
      onContextMenu: this.onContextMenu
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_UserMenu_row"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_UserMenu_userAvatarContainer"
    }, /*#__PURE__*/_react.default.createElement(_BaseAvatar.default, {
      idName: userId,
      name: displayName,
      url: avatarUrl,
      width: avatarSize,
      height: avatarSize,
      resizeMethod: "crop",
      className: "mx_UserMenu_userAvatar"
    })), name, this.state.pendingRoomJoin.size > 0 && /*#__PURE__*/_react.default.createElement(_InlineSpinner.default, null, /*#__PURE__*/_react.default.createElement(_TooltipButton.default, {
      helpText: (0, _languageHandler._t)("Currently joining %(count)s rooms", {
        count: this.state.pendingRoomJoin.size
      })
    })), dnd, buttons)), this.renderContextMenu());
  }

}) || _class);
exports.default = UserMenu;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,