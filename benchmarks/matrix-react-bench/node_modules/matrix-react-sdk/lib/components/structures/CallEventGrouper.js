"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.CustomCallState = exports.CallEventGrouperEvent = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _event = require("matrix-js-sdk/src/@types/event");

var _call = require("matrix-js-sdk/src/webrtc/call");

var _CallHandler = _interopRequireWildcard(require("../../CallHandler"));

var _events = require("events");

var _MatrixClientPeg = require("../../MatrixClientPeg");

var _dispatcher = _interopRequireDefault(require("../../dispatcher/dispatcher"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
Copyright 2021 Å imon Brandner <simon.bra.ag@gmail.com>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
let CallEventGrouperEvent;
exports.CallEventGrouperEvent = CallEventGrouperEvent;

(function (CallEventGrouperEvent) {
  CallEventGrouperEvent["StateChanged"] = "state_changed";
  CallEventGrouperEvent["SilencedChanged"] = "silenced_changed";
  CallEventGrouperEvent["LengthChanged"] = "length_changed";
})(CallEventGrouperEvent || (exports.CallEventGrouperEvent = CallEventGrouperEvent = {}));

const CONNECTING_STATES = [_call.CallState.Connecting, _call.CallState.WaitLocalMedia, _call.CallState.CreateOffer, _call.CallState.CreateAnswer];
const SUPPORTED_STATES = [_call.CallState.Connected, _call.CallState.Ringing];
let CustomCallState;
exports.CustomCallState = CustomCallState;

(function (CustomCallState) {
  CustomCallState["Missed"] = "missed";
})(CustomCallState || (exports.CustomCallState = CustomCallState = {}));

class CallEventGrouper extends _events.EventEmitter {
  constructor() {
    super();
    (0, _defineProperty2.default)(this, "events", new Set());
    (0, _defineProperty2.default)(this, "call", void 0);
    (0, _defineProperty2.default)(this, "state", void 0);
    (0, _defineProperty2.default)(this, "onSilencedCallsChanged", () => {
      const newState = _CallHandler.default.sharedInstance().isCallSilenced(this.callId);

      this.emit(CallEventGrouperEvent.SilencedChanged, newState);
    });
    (0, _defineProperty2.default)(this, "onLengthChanged", length => {
      this.emit(CallEventGrouperEvent.LengthChanged, length);
    });
    (0, _defineProperty2.default)(this, "answerCall", () => {
      _dispatcher.default.dispatch({
        action: 'answer',
        room_id: this.roomId
      });
    });
    (0, _defineProperty2.default)(this, "rejectCall", () => {
      _dispatcher.default.dispatch({
        action: 'reject',
        room_id: this.roomId
      });
    });
    (0, _defineProperty2.default)(this, "callBack", () => {
      _dispatcher.default.dispatch({
        action: 'place_call',
        type: this.isVoice ? _call.CallType.Voice : _call.CallType.Video,
        room_id: this.roomId
      });
    });
    (0, _defineProperty2.default)(this, "toggleSilenced", () => {
      const silenced = _CallHandler.default.sharedInstance().isCallSilenced(this.callId);

      silenced ? _CallHandler.default.sharedInstance().unSilenceCall(this.callId) : _CallHandler.default.sharedInstance().silenceCall(this.callId);
    });
    (0, _defineProperty2.default)(this, "setState", () => {
      var _this$call, _this$call2;

      if (CONNECTING_STATES.includes((_this$call = this.call) === null || _this$call === void 0 ? void 0 : _this$call.state)) {
        this.state = _call.CallState.Connecting;
      } else if (SUPPORTED_STATES.includes((_this$call2 = this.call) === null || _this$call2 === void 0 ? void 0 : _this$call2.state)) {
        this.state = this.call.state;
      } else {
        if (this.callWasMissed) this.state = CustomCallState.Missed;else if (this.reject) this.state = _call.CallState.Ended;else if (this.hangup) this.state = _call.CallState.Ended;else if (this.invite && this.call) this.state = _call.CallState.Connecting;
      }

      this.emit(CallEventGrouperEvent.StateChanged, this.state);
    });
    (0, _defineProperty2.default)(this, "setCall", () => {
      if (this.call) return;
      this.call = _CallHandler.default.sharedInstance().getCallById(this.callId);
      this.setCallListeners();
      this.setState();
    });

    _CallHandler.default.sharedInstance().addListener(_CallHandler.CallHandlerEvent.CallsChanged, this.setCall);

    _CallHandler.default.sharedInstance().addListener(_CallHandler.CallHandlerEvent.SilencedCallsChanged, this.onSilencedCallsChanged);
  }

  get invite() {
    return [...this.events].find(event => event.getType() === _event.EventType.CallInvite);
  }

  get hangup() {
    return [...this.events].find(event => event.getType() === _event.EventType.CallHangup);
  }

  get reject() {
    return [...this.events].find(event => event.getType() === _event.EventType.CallReject);
  }

  get selectAnswer() {
    return [...this.events].find(event => event.getType() === _event.EventType.CallSelectAnswer);
  }

  get isVoice() {
    var _invite$getContent, _invite$getContent$of, _invite$getContent$of2;

    const invite = this.invite;
    if (!invite) return; // FIXME: Find a better way to determine this from the event?

    if (((_invite$getContent = invite.getContent()) === null || _invite$getContent === void 0 ? void 0 : (_invite$getContent$of = _invite$getContent.offer) === null || _invite$getContent$of === void 0 ? void 0 : (_invite$getContent$of2 = _invite$getContent$of.sdp) === null || _invite$getContent$of2 === void 0 ? void 0 : _invite$getContent$of2.indexOf('m=video')) !== -1) return false;
    return true;
  }

  get hangupReason() {
    var _this$hangup, _this$hangup$getConte;

    return (_this$hangup = this.hangup) === null || _this$hangup === void 0 ? void 0 : (_this$hangup$getConte = _this$hangup.getContent()) === null || _this$hangup$getConte === void 0 ? void 0 : _this$hangup$getConte.reason;
  }

  get rejectParty() {
    var _this$reject;

    return (_this$reject = this.reject) === null || _this$reject === void 0 ? void 0 : _this$reject.getSender();
  }

  get gotRejected() {
    return Boolean(this.reject);
  }

  get duration() {
    if (!this.hangup || !this.selectAnswer) return;
    return new Date(this.hangup.getDate().getTime() - this.selectAnswer.getDate().getTime());
  }
  /**
   * Returns true if there are only events from the other side - we missed the call
   */


  get callWasMissed() {
    return ![...this.events].some(event => {
      var _event$sender;

      return ((_event$sender = event.sender) === null || _event$sender === void 0 ? void 0 : _event$sender.userId) === _MatrixClientPeg.MatrixClientPeg.get().getUserId();
    });
  }

  get callId() {
    var _, _$getContent;

    return (_ = [...this.events][0]) === null || _ === void 0 ? void 0 : (_$getContent = _.getContent()) === null || _$getContent === void 0 ? void 0 : _$getContent.call_id;
  }

  get roomId() {
    var _2;

    return (_2 = [...this.events][0]) === null || _2 === void 0 ? void 0 : _2.getRoomId();
  }

  setCallListeners() {
    if (!this.call) return;
    this.call.addListener(_call.CallEvent.State, this.setState);
    this.call.addListener(_call.CallEvent.LengthChanged, this.onLengthChanged);
  }

  add(event) {
    this.events.add(event);
    this.setCall();
  }

}

exports.default = CallEventGrouper;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,