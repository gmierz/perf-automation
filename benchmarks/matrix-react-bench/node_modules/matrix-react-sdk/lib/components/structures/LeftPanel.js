"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var React = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _dispatcher = _interopRequireDefault(require("../../dispatcher/dispatcher"));

var _languageHandler = require("../../languageHandler");

var _RoomList = _interopRequireDefault(require("../views/rooms/RoomList"));

var _CallHandler = _interopRequireDefault(require("../../CallHandler"));

var _RoomSublist = require("../views/rooms/RoomSublist");

var _actions = require("../../dispatcher/actions");

var _UserMenu = _interopRequireDefault(require("./UserMenu"));

var _RoomSearch = _interopRequireDefault(require("./RoomSearch"));

var _RoomBreadcrumbs = _interopRequireDefault(require("../views/rooms/RoomBreadcrumbs"));

var _BreadcrumbsStore = require("../../stores/BreadcrumbsStore");

var _AsyncStore = require("../../stores/AsyncStore");

var _RoomListStore = _interopRequireWildcard(require("../../stores/room-list/RoomListStore"));

var _IndicatorScrollbar = _interopRequireDefault(require("../structures/IndicatorScrollbar"));

var _AccessibleTooltipButton = _interopRequireDefault(require("../views/elements/AccessibleTooltipButton"));

var _RoomListNumResults = _interopRequireDefault(require("../views/rooms/RoomListNumResults"));

var _LeftPanelWidget = _interopRequireDefault(require("./LeftPanelWidget"));

var _replaceableComponent = require("../../utils/replaceableComponent");

var _SpaceStore = _interopRequireDefault(require("../../stores/spaces/SpaceStore"));

var _spaces = require("../../stores/spaces");

var _KeyBindingsManager = require("../../KeyBindingsManager");

var _UIStore = _interopRequireDefault(require("../../stores/UIStore"));

var _RovingTabIndex = require("../../accessibility/RovingTabIndex");

var _MatrixClientContext = _interopRequireDefault(require("../../contexts/MatrixClientContext"));

var _Keyboard = require("../../Keyboard");

var _dec, _class, _class2, _temp;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

let LeftPanel = (_dec = (0, _replaceableComponent.replaceableComponent)("structures.LeftPanel"), _dec(_class = (_temp = _class2 = class LeftPanel extends React.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "ref", /*#__PURE__*/(0, React.createRef)());
    (0, _defineProperty2.default)(this, "listContainerRef", /*#__PURE__*/(0, React.createRef)());
    (0, _defineProperty2.default)(this, "roomSearchRef", /*#__PURE__*/(0, React.createRef)());
    (0, _defineProperty2.default)(this, "roomListRef", /*#__PURE__*/(0, React.createRef)());
    (0, _defineProperty2.default)(this, "focusedElement", null);
    (0, _defineProperty2.default)(this, "isDoingStickyHeaders", false);
    (0, _defineProperty2.default)(this, "context", void 0);
    (0, _defineProperty2.default)(this, "updateActiveSpace", activeSpace => {
      this.setState({
        activeSpace
      });
    });
    (0, _defineProperty2.default)(this, "onDialPad", () => {
      _dispatcher.default.fire(_actions.Action.OpenDialPad);
    });
    (0, _defineProperty2.default)(this, "onExplore", () => {
      _dispatcher.default.fire(_actions.Action.ViewRoomDirectory);
    });
    (0, _defineProperty2.default)(this, "refreshStickyHeaders", () => {
      if (!this.listContainerRef.current) return; // ignore: no headers to sticky

      this.handleStickyHeaders(this.listContainerRef.current);
    });
    (0, _defineProperty2.default)(this, "onBreadcrumbsUpdate", () => {
      const newVal = _BreadcrumbsStore.BreadcrumbsStore.instance.visible;

      if (newVal !== this.state.showBreadcrumbs) {
        this.setState({
          showBreadcrumbs: newVal
        }); // Update the sticky headers too as the breadcrumbs will be popping in or out.

        if (!this.listContainerRef.current) return; // ignore: no headers to sticky

        this.handleStickyHeaders(this.listContainerRef.current);
      }
    });
    (0, _defineProperty2.default)(this, "onScroll", ev => {
      const list = ev.target;
      this.handleStickyHeaders(list);
    });
    (0, _defineProperty2.default)(this, "onFocus", ev => {
      this.focusedElement = ev.target;
    });
    (0, _defineProperty2.default)(this, "onBlur", () => {
      this.focusedElement = null;
    });
    (0, _defineProperty2.default)(this, "onKeyDown", (ev, state) => {
      if (!this.focusedElement) return;
      const action = (0, _KeyBindingsManager.getKeyBindingsManager)().getRoomListAction(ev);

      switch (action) {
        case _KeyBindingsManager.RoomListAction.NextRoom:
          if (!state) {
            var _this$roomListRef$cur;

            ev.stopPropagation();
            ev.preventDefault();
            (_this$roomListRef$cur = this.roomListRef.current) === null || _this$roomListRef$cur === void 0 ? void 0 : _this$roomListRef$cur.focus();
          }

          break;

        case _KeyBindingsManager.RoomListAction.PrevRoom:
          if (state && state.activeRef === (0, _RovingTabIndex.findSiblingElement)(state.refs, 0)) {
            var _this$roomSearchRef$c;

            ev.stopPropagation();
            ev.preventDefault();
            (_this$roomSearchRef$c = this.roomSearchRef.current) === null || _this$roomSearchRef$c === void 0 ? void 0 : _this$roomSearchRef$c.focus();
          }

          break;
      }
    });
    (0, _defineProperty2.default)(this, "onRoomListKeydown", ev => {
      if (ev.altKey || ev.ctrlKey || ev.metaKey) return; // we cannot handle Space as that is an activation key for all focusable elements in this widget

      if (ev.key.length === 1) {
        var _this$roomSearchRef$c2;

        ev.preventDefault();
        ev.stopPropagation();
        (_this$roomSearchRef$c2 = this.roomSearchRef.current) === null || _this$roomSearchRef$c2 === void 0 ? void 0 : _this$roomSearchRef$c2.appendChar(ev.key);
      } else if (ev.key === _Keyboard.Key.BACKSPACE) {
        var _this$roomSearchRef$c3;

        ev.preventDefault();
        ev.stopPropagation();
        (_this$roomSearchRef$c3 = this.roomSearchRef.current) === null || _this$roomSearchRef$c3 === void 0 ? void 0 : _this$roomSearchRef$c3.backspace();
      }
    });
    (0, _defineProperty2.default)(this, "selectRoom", () => {
      const firstRoom = this.listContainerRef.current.querySelector(".mx_RoomTile");

      if (firstRoom) {
        firstRoom.click();
        return true; // to get the field to clear
      }
    });
    this.state = {
      showBreadcrumbs: _BreadcrumbsStore.BreadcrumbsStore.instance.visible,
      activeSpace: _SpaceStore.default.instance.activeSpace
    };

    _BreadcrumbsStore.BreadcrumbsStore.instance.on(_AsyncStore.UPDATE_EVENT, this.onBreadcrumbsUpdate);

    _RoomListStore.default.instance.on(_RoomListStore.LISTS_UPDATE_EVENT, this.onBreadcrumbsUpdate);

    _SpaceStore.default.instance.on(_spaces.UPDATE_SELECTED_SPACE, this.updateActiveSpace);
  }

  componentDidMount() {
    var _this$listContainerRe;

    _UIStore.default.instance.trackElementDimensions("LeftPanel", this.ref.current);

    _UIStore.default.instance.trackElementDimensions("ListContainer", this.listContainerRef.current);

    _UIStore.default.instance.on("ListContainer", this.refreshStickyHeaders); // Using the passive option to not block the main thread
    // https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#improving_scrolling_performance_with_passive_listeners


    (_this$listContainerRe = this.listContainerRef.current) === null || _this$listContainerRe === void 0 ? void 0 : _this$listContainerRe.addEventListener("scroll", this.onScroll, {
      passive: true
    });
  }

  componentWillUnmount() {
    var _this$listContainerRe2;

    _BreadcrumbsStore.BreadcrumbsStore.instance.off(_AsyncStore.UPDATE_EVENT, this.onBreadcrumbsUpdate);

    _RoomListStore.default.instance.off(_RoomListStore.LISTS_UPDATE_EVENT, this.onBreadcrumbsUpdate);

    _SpaceStore.default.instance.off(_spaces.UPDATE_SELECTED_SPACE, this.updateActiveSpace);

    _UIStore.default.instance.stopTrackingElementDimensions("ListContainer");

    _UIStore.default.instance.removeListener("ListContainer", this.refreshStickyHeaders);

    (_this$listContainerRe2 = this.listContainerRef.current) === null || _this$listContainerRe2 === void 0 ? void 0 : _this$listContainerRe2.removeEventListener("scroll", this.onScroll);
  }

  componentDidUpdate(prevProps, prevState) {
    if (prevState.activeSpace !== this.state.activeSpace) {
      this.refreshStickyHeaders();
    }
  }

  handleStickyHeaders(list) {
    if (this.isDoingStickyHeaders) return;
    this.isDoingStickyHeaders = true;
    window.requestAnimationFrame(() => {
      this.doStickyHeaders(list);
      this.isDoingStickyHeaders = false;
    });
  }

  doStickyHeaders(list) {
    const topEdge = list.scrollTop;
    const bottomEdge = list.offsetHeight + list.scrollTop;
    const sublists = list.querySelectorAll(".mx_RoomSublist:not(.mx_RoomSublist_hidden)"); // We track which styles we want on a target before making the changes to avoid
    // excessive layout updates.

    const targetStyles = new Map();
    let lastTopHeader;
    let firstBottomHeader;

    for (const sublist of sublists) {
      const header = sublist.querySelector(".mx_RoomSublist_stickable");
      header.style.removeProperty("display"); // always clear display:none first
      // When an element is <=40% off screen, make it take over

      const offScreenFactor = 0.4;
      const isOffTop = sublist.offsetTop + offScreenFactor * _RoomSublist.HEADER_HEIGHT <= topEdge;
      const isOffBottom = sublist.offsetTop + offScreenFactor * _RoomSublist.HEADER_HEIGHT >= bottomEdge;

      if (isOffTop || sublist === sublists[0]) {
        targetStyles.set(header, {
          stickyTop: true
        });

        if (lastTopHeader) {
          lastTopHeader.style.display = "none";
          targetStyles.set(lastTopHeader, {
            makeInvisible: true
          });
        }

        lastTopHeader = header;
      } else if (isOffBottom && !firstBottomHeader) {
        targetStyles.set(header, {
          stickyBottom: true
        });
        firstBottomHeader = header;
      } else {
        targetStyles.set(header, {}); // nothing == clear
      }
    } // Run over the style changes and make them reality. We check to see if we're about to
    // cause a no-op update, as adding/removing properties that are/aren't there cause
    // layout updates.


    for (const header of targetStyles.keys()) {
      const style = targetStyles.get(header);

      if (style.makeInvisible) {
        // we will have already removed the 'display: none', so add it back.
        header.style.display = "none";
        continue; // nothing else to do, even if sticky somehow
      }

      if (style.stickyTop) {
        if (!header.classList.contains("mx_RoomSublist_headerContainer_stickyTop")) {
          header.classList.add("mx_RoomSublist_headerContainer_stickyTop");
        }

        const newTop = `${list.parentElement.offsetTop}px`;

        if (header.style.top !== newTop) {
          header.style.top = newTop;
        }
      } else {
        if (header.classList.contains("mx_RoomSublist_headerContainer_stickyTop")) {
          header.classList.remove("mx_RoomSublist_headerContainer_stickyTop");
        }

        if (header.style.top) {
          header.style.removeProperty('top');
        }
      }

      if (style.stickyBottom) {
        if (!header.classList.contains("mx_RoomSublist_headerContainer_stickyBottom")) {
          header.classList.add("mx_RoomSublist_headerContainer_stickyBottom");
        }

        const offset = _UIStore.default.instance.windowHeight - (list.parentElement.offsetTop + list.parentElement.offsetHeight);
        const newBottom = `${offset}px`;

        if (header.style.bottom !== newBottom) {
          header.style.bottom = newBottom;
        }
      } else {
        if (header.classList.contains("mx_RoomSublist_headerContainer_stickyBottom")) {
          header.classList.remove("mx_RoomSublist_headerContainer_stickyBottom");
        }

        if (header.style.bottom) {
          header.style.removeProperty('bottom');
        }
      }

      if (style.stickyTop || style.stickyBottom) {
        if (!header.classList.contains("mx_RoomSublist_headerContainer_sticky")) {
          header.classList.add("mx_RoomSublist_headerContainer_sticky");
        }

        const listDimensions = _UIStore.default.instance.getElementDimensions("ListContainer");

        if (listDimensions) {
          const headerRightMargin = 15; // calculated from margins and widths to align with non-sticky tiles

          const headerStickyWidth = listDimensions.width - headerRightMargin;
          const newWidth = `${headerStickyWidth}px`;

          if (header.style.width !== newWidth) {
            header.style.width = newWidth;
          }
        }
      } else if (!style.stickyTop && !style.stickyBottom) {
        if (header.classList.contains("mx_RoomSublist_headerContainer_sticky")) {
          header.classList.remove("mx_RoomSublist_headerContainer_sticky");
        }

        if (header.style.width) {
          header.style.removeProperty('width');
        }
      }
    } // add appropriate sticky classes to wrapper so it has
    // the necessary top/bottom padding to put the sticky header in


    const listWrapper = list.parentElement; // .mx_LeftPanel_roomListWrapper

    if (lastTopHeader) {
      listWrapper.classList.add("mx_LeftPanel_roomListWrapper_stickyTop");
    } else {
      listWrapper.classList.remove("mx_LeftPanel_roomListWrapper_stickyTop");
    }

    if (firstBottomHeader) {
      listWrapper.classList.add("mx_LeftPanel_roomListWrapper_stickyBottom");
    } else {
      listWrapper.classList.remove("mx_LeftPanel_roomListWrapper_stickyBottom");
    }
  }

  renderHeader() {
    return /*#__PURE__*/React.createElement("div", {
      className: "mx_LeftPanel_userHeader"
    }, /*#__PURE__*/React.createElement(_UserMenu.default, {
      isMinimized: this.props.isMinimized
    }));
  }

  renderBreadcrumbs() {
    if (this.state.showBreadcrumbs && !this.props.isMinimized) {
      return /*#__PURE__*/React.createElement(_IndicatorScrollbar.default, {
        className: "mx_LeftPanel_breadcrumbsContainer mx_AutoHideScrollbar",
        verticalScrollsHorizontally: true
      }, /*#__PURE__*/React.createElement(_RoomBreadcrumbs.default, null));
    }
  }

  renderSearchDialExplore() {
    let dialPadButton = null; // If we have dialer support, show a button to bring up the dial pad
    // to start a new call

    if (_CallHandler.default.sharedInstance().getSupportsPstnProtocol()) {
      dialPadButton = /*#__PURE__*/React.createElement(_AccessibleTooltipButton.default, {
        className: (0, _classnames.default)("mx_LeftPanel_dialPadButton", {}),
        onClick: this.onDialPad,
        title: (0, _languageHandler._t)("Open dial pad")
      });
    }

    const space = this.state.activeSpace[0] === "!" ? this.context.getRoom(this.state.activeSpace) : null;
    return /*#__PURE__*/React.createElement("div", {
      className: "mx_LeftPanel_filterContainer",
      onFocus: this.onFocus,
      onBlur: this.onBlur,
      onKeyDown: this.onKeyDown
    }, /*#__PURE__*/React.createElement(_RoomSearch.default, {
      isMinimized: this.props.isMinimized,
      ref: this.roomSearchRef,
      onSelectRoom: this.selectRoom
    }), dialPadButton, /*#__PURE__*/React.createElement(_AccessibleTooltipButton.default, {
      className: (0, _classnames.default)("mx_LeftPanel_exploreButton", {
        mx_LeftPanel_exploreButton_space: !!this.state.activeSpace
      }),
      onClick: this.onExplore,
      title: space ? (0, _languageHandler._t)("Explore %(spaceName)s", {
        spaceName: space.name
      }) : (0, _languageHandler._t)("Explore rooms")
    }));
  }

  render() {
    const roomList = /*#__PURE__*/React.createElement(_RoomList.default, {
      onKeyDown: this.onKeyDown,
      resizeNotifier: this.props.resizeNotifier,
      onFocus: this.onFocus,
      onBlur: this.onBlur,
      isMinimized: this.props.isMinimized,
      activeSpace: this.state.activeSpace,
      onResize: this.refreshStickyHeaders,
      onListCollapse: this.refreshStickyHeaders,
      ref: this.roomListRef
    });
    const containerClasses = (0, _classnames.default)({
      "mx_LeftPanel": true,
      "mx_LeftPanel_minimized": this.props.isMinimized
    });
    const roomListClasses = (0, _classnames.default)("mx_LeftPanel_actualRoomListContainer", "mx_AutoHideScrollbar");
    return /*#__PURE__*/React.createElement("div", {
      className: containerClasses,
      ref: this.ref
    }, /*#__PURE__*/React.createElement("aside", {
      className: "mx_LeftPanel_roomListContainer"
    }, this.renderHeader(), this.renderSearchDialExplore(), this.renderBreadcrumbs(), /*#__PURE__*/React.createElement(_RoomListNumResults.default, {
      onVisibilityChange: this.refreshStickyHeaders
    }), /*#__PURE__*/React.createElement("div", {
      className: "mx_LeftPanel_roomListWrapper"
    }, /*#__PURE__*/React.createElement("div", {
      className: roomListClasses,
      ref: this.listContainerRef // Firefox sometimes makes this element focusable due to
      // overflow:scroll;, so force it out of tab order.
      ,
      tabIndex: -1,
      onKeyDown: this.onRoomListKeydown
    }, roomList)), !this.props.isMinimized && /*#__PURE__*/React.createElement(_LeftPanelWidget.default, null)));
  }

}, (0, _defineProperty2.default)(_class2, "contextType", _MatrixClientContext.default), _temp)) || _class);
exports.default = LeftPanel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,