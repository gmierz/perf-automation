"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _matrix = require("matrix-js-sdk/src/matrix");

var _react = _interopRequireDefault(require("react"));

var _languageHandler = require("../../../languageHandler");

var _ErrorUtils = require("../../../utils/ErrorUtils");

var _AutoDiscoveryUtils = _interopRequireDefault(require("../../../utils/AutoDiscoveryUtils"));

var _classnames = _interopRequireDefault(require("classnames"));

var Lifecycle = _interopRequireWildcard(require("../../../Lifecycle"));

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _AuthPage = _interopRequireDefault(require("../../views/auth/AuthPage"));

var _Login = _interopRequireDefault(require("../../../Login"));

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _SSOButtons = _interopRequireDefault(require("../../views/elements/SSOButtons"));

var _ServerPicker = _interopRequireDefault(require("../../views/elements/ServerPicker"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _RegistrationForm = _interopRequireDefault(require("../../views/auth/RegistrationForm"));

var _AccessibleButton = _interopRequireDefault(require("../../views/elements/AccessibleButton"));

var _AuthBody = _interopRequireDefault(require("../../views/auth/AuthBody"));

var _AuthHeader = _interopRequireDefault(require("../../views/auth/AuthHeader"));

var _InteractiveAuth = _interopRequireDefault(require("../InteractiveAuth"));

var _Spinner = _interopRequireDefault(require("../../views/elements/Spinner"));

var _logger = require("matrix-js-sdk/src/logger");

var _dec, _class;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

let Registration = (_dec = (0, _replaceableComponent.replaceableComponent)("structures.auth.Registration"), _dec(_class = class Registration extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "loginLogic", void 0);
    (0, _defineProperty2.default)(this, "onFormSubmit", async formVals => {
      this.setState({
        errorText: "",
        busy: true,
        formVals: formVals,
        doingUIAuth: true
      });
    });
    (0, _defineProperty2.default)(this, "requestEmailToken", (emailAddress, clientSecret, sendAttempt, sessionId) => {
      return this.state.matrixClient.requestRegisterEmailToken(emailAddress, clientSecret, sendAttempt, this.props.makeRegistrationUrl({
        client_secret: clientSecret,
        hs_url: this.state.matrixClient.getHomeserverUrl(),
        is_url: this.state.matrixClient.getIdentityServerUrl(),
        session_id: sessionId
      }));
    });
    (0, _defineProperty2.default)(this, "onUIAuthFinished", async (success, response) => {
      if (!success) {
        let errorText = response.message || response.toString(); // can we give a better error message?

        if (response.errcode === 'M_RESOURCE_LIMIT_EXCEEDED') {
          const errorTop = (0, _ErrorUtils.messageForResourceLimitError)(response.data.limit_type, response.data.admin_contact, {
            'monthly_active_user': (0, _languageHandler._td)("This homeserver has hit its Monthly Active User limit."),
            'hs_blocked': (0, _languageHandler._td)("This homeserver has been blocked by it's administrator."),
            '': (0, _languageHandler._td)("This homeserver has exceeded one of its resource limits.")
          });
          const errorDetail = (0, _ErrorUtils.messageForResourceLimitError)(response.data.limit_type, response.data.admin_contact, {
            '': (0, _languageHandler._td)("Please <a>contact your service administrator</a> to continue using this service.")
          });
          errorText = /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("p", null, errorTop), /*#__PURE__*/_react.default.createElement("p", null, errorDetail));
        } else if (response.required_stages && response.required_stages.indexOf('m.login.msisdn') > -1) {
          let msisdnAvailable = false;

          for (const flow of response.available_flows) {
            msisdnAvailable = msisdnAvailable || flow.stages.includes('m.login.msisdn');
          }

          if (!msisdnAvailable) {
            errorText = (0, _languageHandler._t)('This server does not support authentication with a phone number.');
          }
        } else if (response.errcode === "M_USER_IN_USE") {
          errorText = (0, _languageHandler._t)("Someone already has that username, please try another.");
        } else if (response.errcode === "M_THREEPID_IN_USE") {
          errorText = (0, _languageHandler._t)("That e-mail address is already in use.");
        }

        this.setState({
          busy: false,
          doingUIAuth: false,
          errorText
        });
        return;
      }

      _MatrixClientPeg.MatrixClientPeg.setJustRegisteredUserId(response.user_id);

      const newState = {
        doingUIAuth: false,
        registeredUsername: response.user_id,
        differentLoggedInUserId: null,
        completedNoSignin: false,
        // we're still busy until we get unmounted: don't show the registration form again
        busy: true
      }; // The user came in through an email validation link. To avoid overwriting
      // their session, check to make sure the session isn't someone else, and
      // isn't a guest user since we'll usually have set a guest user session before
      // starting the registration process. This isn't perfect since it's possible
      // the user had a separate guest session they didn't actually mean to replace.

      const [sessionOwner, sessionIsGuest] = await Lifecycle.getStoredSessionOwner();

      if (sessionOwner && !sessionIsGuest && sessionOwner !== response.userId) {
        _logger.logger.log(`Found a session for ${sessionOwner} but ${response.userId} has just registered.`);

        newState.differentLoggedInUserId = sessionOwner;
      }

      if (response.access_token) {
        await this.props.onLoggedIn({
          userId: response.user_id,
          deviceId: response.device_id,
          homeserverUrl: this.state.matrixClient.getHomeserverUrl(),
          identityServerUrl: this.state.matrixClient.getIdentityServerUrl(),
          accessToken: response.access_token
        }, this.state.formVals.password);
        this.setupPushers();
      } else {
        newState.busy = false;
        newState.completedNoSignin = true;
      }

      this.setState(newState);
    });
    (0, _defineProperty2.default)(this, "onLoginClick", ev => {
      ev.preventDefault();
      ev.stopPropagation();
      this.props.onLoginClick();
    });
    (0, _defineProperty2.default)(this, "onGoToFormClicked", ev => {
      ev.preventDefault();
      ev.stopPropagation();
      this.replaceClient(this.props.serverConfig);
      this.setState({
        busy: false,
        doingUIAuth: false
      });
    });
    (0, _defineProperty2.default)(this, "makeRegisterRequest", auth => {
      // We inhibit login if we're trying to register with an email address: this
      // avoids a lot of complex race conditions that can occur if we try to log
      // the user in one one or both of the tabs they might end up with after
      // clicking the email link.
      let inhibitLogin = Boolean(this.state.formVals.email); // Only send inhibitLogin if we're sending username / pw params
      // (Since we need to send no params at all to use the ones saved in the
      // session).

      if (!this.state.formVals.password) inhibitLogin = null;
      const registerParams = {
        username: this.state.formVals.username,
        password: this.state.formVals.password,
        initial_device_display_name: this.props.defaultDeviceDisplayName,
        auth: undefined,
        inhibit_login: undefined
      };
      if (auth) registerParams.auth = auth;
      if (inhibitLogin !== undefined && inhibitLogin !== null) registerParams.inhibit_login = inhibitLogin;
      return this.state.matrixClient.registerRequest(registerParams);
    });
    (0, _defineProperty2.default)(this, "onLoginClickWithCheck", async ev => {
      ev.preventDefault();
      const sessionLoaded = await Lifecycle.loadSession({
        ignoreGuest: true
      });

      if (!sessionLoaded) {
        // ok fine, there's still no session: really go to the login page
        this.props.onLoginClick();
      }

      return sessionLoaded;
    });
    this.state = {
      busy: false,
      errorText: null,
      formVals: {
        email: this.props.email
      },
      doingUIAuth: Boolean(this.props.sessionId),
      flows: null,
      completedNoSignin: false,
      serverIsAlive: true,
      serverErrorIsFatal: false,
      serverDeadError: ""
    };
    const {
      hsUrl,
      isUrl
    } = this.props.serverConfig;
    this.loginLogic = new _Login.default(hsUrl, isUrl, null, {
      defaultDeviceDisplayName: "Element login check" // We shouldn't ever be used

    });
  }

  componentDidMount() {
    this.replaceClient(this.props.serverConfig);
  } // TODO: [REACT-WARNING] Replace with appropriate lifecycle event
  // eslint-disable-next-line


  UNSAFE_componentWillReceiveProps(newProps) {
    if (newProps.serverConfig.hsUrl === this.props.serverConfig.hsUrl && newProps.serverConfig.isUrl === this.props.serverConfig.isUrl) return;
    this.replaceClient(newProps.serverConfig);
  }

  async replaceClient(serverConfig) {
    this.setState({
      errorText: null,
      serverDeadError: null,
      serverErrorIsFatal: false,
      // busy while we do liveness check (we need to avoid trying to render
      // the UI auth component while we don't have a matrix client)
      busy: true
    }); // Do a liveliness check on the URLs

    try {
      await _AutoDiscoveryUtils.default.validateServerConfigWithStaticUrls(serverConfig.hsUrl, serverConfig.isUrl);
      this.setState({
        serverIsAlive: true,
        serverErrorIsFatal: false
      });
    } catch (e) {
      this.setState(_objectSpread({
        busy: false
      }, _AutoDiscoveryUtils.default.authComponentStateForError(e, "register")));

      if (this.state.serverErrorIsFatal) {
        return; // Server is dead - do not continue.
      }
    }

    const {
      hsUrl,
      isUrl
    } = serverConfig;
    const cli = (0, _matrix.createClient)({
      baseUrl: hsUrl,
      idBaseUrl: isUrl
    });
    this.loginLogic.setHomeserverUrl(hsUrl);
    this.loginLogic.setIdentityServerUrl(isUrl);
    let ssoFlow;

    try {
      const loginFlows = await this.loginLogic.getFlows();
      ssoFlow = loginFlows.find(f => f.type === "m.login.sso" || f.type === "m.login.cas");
    } catch (e) {
      _logger.logger.error("Failed to get login flows to check for SSO support", e);
    }

    this.setState({
      matrixClient: cli,
      ssoFlow,
      busy: false
    });

    const showGenericError = e => {
      this.setState({
        errorText: (0, _languageHandler._t)("Unable to query for supported registration methods."),
        // add empty flows array to get rid of spinner
        flows: []
      });
    };

    try {
      // We do the first registration request ourselves to discover whether we need to
      // do SSO instead. If we've already started the UI Auth process though, we don't
      // need to.
      if (!this.state.doingUIAuth) {
        await this.makeRegisterRequest(null); // This should never succeed since we specified no auth object.

        _logger.logger.log("Expecting 401 from register request but got success!");
      }
    } catch (e) {
      if (e.httpStatus === 401) {
        this.setState({
          flows: e.data.flows
        });
      } else if (e.httpStatus === 403 || e.errcode === "M_FORBIDDEN") {
        // Check for 403 or M_FORBIDDEN, Synapse used to send 403 M_UNKNOWN but now sends 403 M_FORBIDDEN.
        // At this point registration is pretty much disabled, but before we do that let's
        // quickly check to see if the server supports SSO instead. If it does, we'll send
        // the user off to the login page to figure their account out.
        if (ssoFlow) {
          // Redirect to login page - server probably expects SSO only
          _dispatcher.default.dispatch({
            action: 'start_login'
          });
        } else {
          this.setState({
            serverErrorIsFatal: true,
            // fatal because user cannot continue on this server
            errorText: (0, _languageHandler._t)("Registration has been disabled on this homeserver."),
            // add empty flows array to get rid of spinner
            flows: []
          });
        }
      } else {
        _logger.logger.log("Unable to query for supported registration methods.", e);

        showGenericError(e);
      }
    }
  }

  setupPushers() {
    if (!this.props.brand) {
      return Promise.resolve();
    }

    const matrixClient = _MatrixClientPeg.MatrixClientPeg.get();

    return matrixClient.getPushers().then(resp => {
      const pushers = resp.pushers;

      for (let i = 0; i < pushers.length; ++i) {
        if (pushers[i].kind === 'email') {
          const emailPusher = pushers[i];
          emailPusher.data = {
            brand: this.props.brand
          };
          matrixClient.setPusher(emailPusher).then(() => {
            _logger.logger.log("Set email branding to " + this.props.brand);
          }, error => {
            _logger.logger.error("Couldn't set email branding: " + error);
          });
        }
      }
    }, error => {
      _logger.logger.error("Couldn't get pushers: " + error);
    });
  }

  getUIAuthInputs() {
    return {
      emailAddress: this.state.formVals.email,
      phoneCountry: this.state.formVals.phoneCountry,
      phoneNumber: this.state.formVals.phoneNumber
    };
  } // Links to the login page shown after registration is completed are routed through this
  // which checks the user hasn't already logged in somewhere else (perhaps we should do
  // this more generally?)


  renderRegisterComponent() {
    if (this.state.matrixClient && this.state.doingUIAuth) {
      return /*#__PURE__*/_react.default.createElement(_InteractiveAuth.default, {
        matrixClient: this.state.matrixClient,
        makeRequest: this.makeRegisterRequest,
        onAuthFinished: this.onUIAuthFinished,
        inputs: this.getUIAuthInputs(),
        requestEmailToken: this.requestEmailToken,
        sessionId: this.props.sessionId,
        clientSecret: this.props.clientSecret,
        emailSid: this.props.idSid,
        poll: true
      });
    } else if (!this.state.matrixClient && !this.state.busy) {
      return null;
    } else if (this.state.busy || !this.state.flows) {
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_AuthBody_spinner"
      }, /*#__PURE__*/_react.default.createElement(_Spinner.default, null));
    } else if (this.state.flows.length) {
      let ssoSection;

      if (this.state.ssoFlow) {
        let continueWithSection;
        const providers = this.state.ssoFlow.identity_providers || []; // when there is only a single (or 0) providers we show a wide button with `Continue with X` text

        if (providers.length > 1) {
          // i18n: ssoButtons is a placeholder to help translators understand context
          continueWithSection = /*#__PURE__*/_react.default.createElement("h3", {
            className: "mx_AuthBody_centered"
          }, (0, _languageHandler._t)("Continue with %(ssoButtons)s", {
            ssoButtons: ""
          }).trim());
        } // i18n: ssoButtons & usernamePassword are placeholders to help translators understand context


        ssoSection = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, continueWithSection, /*#__PURE__*/_react.default.createElement(_SSOButtons.default, {
          matrixClient: this.loginLogic.createTemporaryClient(),
          flow: this.state.ssoFlow,
          loginType: this.state.ssoFlow.type === "m.login.sso" ? "sso" : "cas",
          fragmentAfterLogin: this.props.fragmentAfterLogin
        }), /*#__PURE__*/_react.default.createElement("h3", {
          className: "mx_AuthBody_centered"
        }, (0, _languageHandler._t)("%(ssoButtons)s Or %(usernamePassword)s", {
          ssoButtons: "",
          usernamePassword: ""
        }).trim()));
      }

      return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, ssoSection, /*#__PURE__*/_react.default.createElement(_RegistrationForm.default, {
        defaultUsername: this.state.formVals.username,
        defaultEmail: this.state.formVals.email,
        defaultPhoneCountry: this.state.formVals.phoneCountry,
        defaultPhoneNumber: this.state.formVals.phoneNumber,
        defaultPassword: this.state.formVals.password,
        onRegisterClick: this.onFormSubmit,
        flows: this.state.flows,
        serverConfig: this.props.serverConfig,
        canSubmit: !this.state.serverErrorIsFatal,
        matrixClient: this.state.matrixClient
      }));
    }
  }

  render() {
    let errorText;
    const err = this.state.errorText;

    if (err) {
      errorText = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_Login_error"
      }, err);
    }

    let serverDeadSection;

    if (!this.state.serverIsAlive) {
      const classes = (0, _classnames.default)({
        "mx_Login_error": true,
        "mx_Login_serverError": true,
        "mx_Login_serverErrorNonFatal": !this.state.serverErrorIsFatal
      });
      serverDeadSection = /*#__PURE__*/_react.default.createElement("div", {
        className: classes
      }, this.state.serverDeadError);
    }

    const signIn = /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_AuthBody_changeFlow"
    }, (0, _languageHandler._t)("Already have an account? <a>Sign in here</a>", {}, {
      a: sub => /*#__PURE__*/_react.default.createElement("a", {
        onClick: this.onLoginClick,
        href: "#"
      }, sub)
    })); // Only show the 'go back' button if you're not looking at the form


    let goBack;

    if (this.state.doingUIAuth) {
      goBack = /*#__PURE__*/_react.default.createElement("a", {
        className: "mx_AuthBody_changeFlow",
        onClick: this.onGoToFormClicked,
        href: "#"
      }, (0, _languageHandler._t)('Go back'));
    }

    let body;

    if (this.state.completedNoSignin) {
      let regDoneText;

      if (this.state.differentLoggedInUserId) {
        regDoneText = /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Your new account (%(newAccountId)s) is registered, but you're already " + "logged into a different account (%(loggedInUserId)s).", {
          newAccountId: this.state.registeredUsername,
          loggedInUserId: this.state.differentLoggedInUserId
        })), /*#__PURE__*/_react.default.createElement("p", null, /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
          element: "span",
          className: "mx_linkButton",
          onClick: async event => {
            const sessionLoaded = await this.onLoginClickWithCheck(event);

            if (sessionLoaded) {
              _dispatcher.default.dispatch({
                action: "view_welcome_page"
              });
            }
          }
        }, (0, _languageHandler._t)("Continue with previous account"))));
      } else if (this.state.formVals.password) {
        // We're the client that started the registration
        regDoneText = /*#__PURE__*/_react.default.createElement("h3", null, (0, _languageHandler._t)("<a>Log in</a> to your new account.", {}, {
          a: sub => /*#__PURE__*/_react.default.createElement("a", {
            href: "#/login",
            onClick: this.onLoginClickWithCheck
          }, sub)
        }));
      } else {
        // We're not the original client: the user probably got to us by clicking the
        // email validation link. We can't offer a 'go straight to your account' link
        // as we don't have the original creds.
        regDoneText = /*#__PURE__*/_react.default.createElement("h3", null, (0, _languageHandler._t)("You can now close this window or <a>log in</a> to your new account.", {}, {
          a: sub => /*#__PURE__*/_react.default.createElement("a", {
            href: "#/login",
            onClick: this.onLoginClickWithCheck
          }, sub)
        }));
      }

      body = /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("h2", null, (0, _languageHandler._t)("Registration Successful")), regDoneText);
    } else {
      body = /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("h2", null, (0, _languageHandler._t)('Create account')), errorText, serverDeadSection, /*#__PURE__*/_react.default.createElement(_ServerPicker.default, {
        title: (0, _languageHandler._t)("Host account on"),
        dialogTitle: (0, _languageHandler._t)("Decide where your account is hosted"),
        serverConfig: this.props.serverConfig,
        onServerConfigChange: this.state.doingUIAuth ? undefined : this.props.onServerConfigChange
      }), this.renderRegisterComponent(), goBack, signIn);
    }

    return /*#__PURE__*/_react.default.createElement(_AuthPage.default, null, /*#__PURE__*/_react.default.createElement(_AuthHeader.default, null), /*#__PURE__*/_react.default.createElement(_AuthBody.default, null, body));
  }

}) || _class);
exports.default = Registration;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,