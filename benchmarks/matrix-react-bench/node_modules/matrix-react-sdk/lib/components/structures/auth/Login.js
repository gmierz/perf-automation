"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _languageHandler = require("../../../languageHandler");

var _Login = _interopRequireDefault(require("../../../Login"));

var _SdkConfig = _interopRequireDefault(require("../../../SdkConfig"));

var _ErrorUtils = require("../../../utils/ErrorUtils");

var _AutoDiscoveryUtils = _interopRequireDefault(require("../../../utils/AutoDiscoveryUtils"));

var _classnames = _interopRequireDefault(require("classnames"));

var _AuthPage = _interopRequireDefault(require("../../views/auth/AuthPage"));

var _PlatformPeg = _interopRequireDefault(require("../../../PlatformPeg"));

var _SettingsStore = _interopRequireDefault(require("../../../settings/SettingsStore"));

var _UIFeature = require("../../../settings/UIFeature");

var _CountlyAnalytics = _interopRequireDefault(require("../../../CountlyAnalytics"));

var _PasswordLogin = _interopRequireDefault(require("../../views/auth/PasswordLogin"));

var _InlineSpinner = _interopRequireDefault(require("../../views/elements/InlineSpinner"));

var _Spinner = _interopRequireDefault(require("../../views/elements/Spinner"));

var _SSOButtons = _interopRequireDefault(require("../../views/elements/SSOButtons"));

var _ServerPicker = _interopRequireDefault(require("../../views/elements/ServerPicker"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _AuthBody = _interopRequireDefault(require("../../views/auth/AuthBody"));

var _AuthHeader = _interopRequireDefault(require("../../views/auth/AuthHeader"));

var _logger = require("matrix-js-sdk/src/logger");

var _dec, _class;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

// These are used in several places, and come from the js-sdk's autodiscovery
// stuff. We define them here so that they'll be picked up by i18n.
(0, _languageHandler._td)("Invalid homeserver discovery response");
(0, _languageHandler._td)("Failed to get autodiscovery configuration from server");
(0, _languageHandler._td)("Invalid base_url for m.homeserver");
(0, _languageHandler._td)("Homeserver URL does not appear to be a valid Matrix homeserver");
(0, _languageHandler._td)("Invalid identity server discovery response");
(0, _languageHandler._td)("Invalid base_url for m.identity_server");
(0, _languageHandler._td)("Identity server URL does not appear to be a valid identity server");
(0, _languageHandler._td)("General failure");
let LoginComponent = (
/*
 * A wire component which glues together login UI components and Login logic
 */
_dec = (0, _replaceableComponent.replaceableComponent)("structures.auth.LoginComponent"), _dec(_class = class LoginComponent extends _react.default.PureComponent {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "unmounted", false);
    (0, _defineProperty2.default)(this, "loginLogic", void 0);
    (0, _defineProperty2.default)(this, "stepRendererMap", void 0);
    (0, _defineProperty2.default)(this, "isBusy", () => this.state.busy || this.props.busy);
    (0, _defineProperty2.default)(this, "onPasswordLogin", async (username, phoneCountry, phoneNumber, password) => {
      if (!this.state.serverIsAlive) {
        this.setState({
          busy: true
        }); // Do a quick liveliness check on the URLs

        let aliveAgain = true;

        try {
          await _AutoDiscoveryUtils.default.validateServerConfigWithStaticUrls(this.props.serverConfig.hsUrl, this.props.serverConfig.isUrl);
          this.setState({
            serverIsAlive: true,
            errorText: ""
          });
        } catch (e) {
          const componentState = _AutoDiscoveryUtils.default.authComponentStateForError(e);

          this.setState(_objectSpread({
            busy: false,
            busyLoggingIn: false
          }, componentState));
          aliveAgain = !componentState.serverErrorIsFatal;
        } // Prevent people from submitting their password when something isn't right.


        if (!aliveAgain) {
          return;
        }
      }

      this.setState({
        busy: true,
        busyLoggingIn: true,
        errorText: null,
        loginIncorrect: false
      });
      this.loginLogic.loginViaPassword(username, phoneCountry, phoneNumber, password).then(data => {
        this.setState({
          serverIsAlive: true
        }); // it must be, we logged in.

        this.props.onLoggedIn(data, password);
      }, error => {
        if (this.unmounted) {
          return;
        }

        let errorText; // Some error strings only apply for logging in

        const usingEmail = username.indexOf("@") > 0;

        if (error.httpStatus === 400 && usingEmail) {
          errorText = (0, _languageHandler._t)('This homeserver does not support login using email address.');
        } else if (error.errcode === 'M_RESOURCE_LIMIT_EXCEEDED') {
          const errorTop = (0, _ErrorUtils.messageForResourceLimitError)(error.data.limit_type, error.data.admin_contact, {
            'monthly_active_user': (0, _languageHandler._td)("This homeserver has hit its Monthly Active User limit."),
            'hs_blocked': (0, _languageHandler._td)("This homeserver has been blocked by it's administrator."),
            '': (0, _languageHandler._td)("This homeserver has exceeded one of its resource limits.")
          });
          const errorDetail = (0, _ErrorUtils.messageForResourceLimitError)(error.data.limit_type, error.data.admin_contact, {
            '': (0, _languageHandler._td)("Please <a>contact your service administrator</a> to continue using this service.")
          });
          errorText = /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("div", null, errorTop), /*#__PURE__*/_react.default.createElement("div", {
            className: "mx_Login_smallError"
          }, errorDetail));
        } else if (error.httpStatus === 401 || error.httpStatus === 403) {
          if (error.errcode === 'M_USER_DEACTIVATED') {
            errorText = (0, _languageHandler._t)('This account has been deactivated.');
          } else if (_SdkConfig.default.get()['disable_custom_urls']) {
            errorText = /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("div", null, (0, _languageHandler._t)('Incorrect username and/or password.')), /*#__PURE__*/_react.default.createElement("div", {
              className: "mx_Login_smallError"
            }, (0, _languageHandler._t)('Please note you are logging into the %(hs)s server, not matrix.org.', {
              hs: this.props.serverConfig.hsName
            })));
          } else {
            errorText = (0, _languageHandler._t)('Incorrect username and/or password.');
          }
        } else {
          // other errors, not specific to doing a password login
          errorText = this.errorTextFromError(error);
        }

        this.setState({
          busy: false,
          busyLoggingIn: false,
          errorText: errorText,
          // 401 would be the sensible status code for 'incorrect password'
          // but the login API gives a 403 https://matrix.org/jira/browse/SYN-744
          // mentions this (although the bug is for UI auth which is not this)
          // We treat both as an incorrect password
          loginIncorrect: error.httpStatus === 401 || error.httpStatus === 403
        });
      });
    });
    (0, _defineProperty2.default)(this, "onUsernameChanged", username => {
      this.setState({
        username: username
      });
    });
    (0, _defineProperty2.default)(this, "onUsernameBlur", async username => {
      const doWellknownLookup = username[0] === "@";
      this.setState({
        username: username,
        busy: doWellknownLookup,
        errorText: null,
        canTryLogin: true
      });

      if (doWellknownLookup) {
        const serverName = username.split(':').slice(1).join(':');

        try {
          const result = await _AutoDiscoveryUtils.default.validateServerName(serverName);
          this.props.onServerConfigChange(result); // We'd like to rely on new props coming in via `onServerConfigChange`
          // so that we know the servers have definitely updated before clearing
          // the busy state. In the case of a full MXID that resolves to the same
          // HS as Element's default HS though, there may not be any server change.
          // To avoid this trap, we clear busy here. For cases where the server
          // actually has changed, `initLoginLogic` will be called and manages
          // busy state for its own liveness check.

          this.setState({
            busy: false
          });
        } catch (e) {
          _logger.logger.error("Problem parsing URL or unhandled error doing .well-known discovery:", e);

          let message = (0, _languageHandler._t)("Failed to perform homeserver discovery");

          if (e.translatedMessage) {
            message = e.translatedMessage;
          }

          let errorText = message;
          let discoveryState = {};

          if (_AutoDiscoveryUtils.default.isLivelinessError(e)) {
            errorText = this.state.errorText;
            discoveryState = _AutoDiscoveryUtils.default.authComponentStateForError(e);
          }

          this.setState(_objectSpread({
            busy: false,
            errorText
          }, discoveryState));
        }
      }
    });
    (0, _defineProperty2.default)(this, "onPhoneCountryChanged", phoneCountry => {
      this.setState({
        phoneCountry: phoneCountry
      });
    });
    (0, _defineProperty2.default)(this, "onPhoneNumberChanged", phoneNumber => {
      this.setState({
        phoneNumber: phoneNumber
      });
    });
    (0, _defineProperty2.default)(this, "onRegisterClick", ev => {
      ev.preventDefault();
      ev.stopPropagation();
      this.props.onRegisterClick();
    });
    (0, _defineProperty2.default)(this, "onTryRegisterClick", ev => {
      var _this$state$flows, _this$state$flows2;

      const hasPasswordFlow = (_this$state$flows = this.state.flows) === null || _this$state$flows === void 0 ? void 0 : _this$state$flows.find(flow => flow.type === "m.login.password");
      const ssoFlow = (_this$state$flows2 = this.state.flows) === null || _this$state$flows2 === void 0 ? void 0 : _this$state$flows2.find(flow => flow.type === "m.login.sso" || flow.type === "m.login.cas"); // If has no password flow but an SSO flow guess that the user wants to register with SSO.
      // TODO: instead hide the Register button if registration is disabled by checking with the server,
      // has no specific errCode currently and uses M_FORBIDDEN.

      if (ssoFlow && !hasPasswordFlow) {
        ev.preventDefault();
        ev.stopPropagation();
        const ssoKind = ssoFlow.type === 'm.login.sso' ? 'sso' : 'cas';

        _PlatformPeg.default.get().startSingleSignOn(this.loginLogic.createTemporaryClient(), ssoKind, this.props.fragmentAfterLogin);
      } else {
        // Don't intercept - just go through to the register page
        this.onRegisterClick(ev);
      }
    });
    (0, _defineProperty2.default)(this, "isSupportedFlow", flow => {
      // technically the flow can have multiple steps, but no one does this
      // for login and loginLogic doesn't support it so we can ignore it.
      if (!this.stepRendererMap[flow.type]) {
        _logger.logger.log("Skipping flow", flow, "due to unsupported login type", flow.type);

        return false;
      }

      return true;
    });
    (0, _defineProperty2.default)(this, "renderPasswordStep", () => {
      return /*#__PURE__*/_react.default.createElement(_PasswordLogin.default, {
        onSubmit: this.onPasswordLogin,
        username: this.state.username,
        phoneCountry: this.state.phoneCountry,
        phoneNumber: this.state.phoneNumber,
        onUsernameChanged: this.onUsernameChanged,
        onUsernameBlur: this.onUsernameBlur,
        onPhoneCountryChanged: this.onPhoneCountryChanged,
        onPhoneNumberChanged: this.onPhoneNumberChanged,
        onForgotPasswordClick: this.props.onForgotPasswordClick,
        loginIncorrect: this.state.loginIncorrect,
        serverConfig: this.props.serverConfig,
        disableSubmit: this.isBusy(),
        busy: this.props.isSyncing || this.state.busyLoggingIn
      });
    });
    (0, _defineProperty2.default)(this, "renderSsoStep", loginType => {
      const flow = this.state.flows.find(flow => flow.type === "m.login." + loginType);
      return /*#__PURE__*/_react.default.createElement(_SSOButtons.default, {
        matrixClient: this.loginLogic.createTemporaryClient(),
        flow: flow,
        loginType: loginType,
        fragmentAfterLogin: this.props.fragmentAfterLogin,
        primary: !this.state.flows.find(flow => flow.type === "m.login.password")
      });
    });
    this.state = {
      busy: false,
      busyLoggingIn: null,
      errorText: null,
      loginIncorrect: false,
      canTryLogin: true,
      flows: null,
      username: props.defaultUsername ? props.defaultUsername : '',
      phoneCountry: null,
      phoneNumber: "",
      serverIsAlive: true,
      serverErrorIsFatal: false,
      serverDeadError: ""
    }; // map from login step type to a function which will render a control
    // letting you do that login type

    this.stepRendererMap = {
      'm.login.password': this.renderPasswordStep,
      // CAS and SSO are the same thing, modulo the url we link to
      'm.login.cas': () => this.renderSsoStep("cas"),
      'm.login.sso': () => this.renderSsoStep("sso")
    };

    _CountlyAnalytics.default.instance.track("onboarding_login_begin");
  } // TODO: [REACT-WARNING] Replace with appropriate lifecycle event
  // eslint-disable-next-line


  UNSAFE_componentWillMount() {
    this.initLoginLogic(this.props.serverConfig);
  }

  componentWillUnmount() {
    this.unmounted = true;
  } // TODO: [REACT-WARNING] Replace with appropriate lifecycle event
  // eslint-disable-next-line


  UNSAFE_componentWillReceiveProps(newProps) {
    if (newProps.serverConfig.hsUrl === this.props.serverConfig.hsUrl && newProps.serverConfig.isUrl === this.props.serverConfig.isUrl) return; // Ensure that we end up actually logging in to the right place

    this.initLoginLogic(newProps.serverConfig);
  }

  async initLoginLogic({
    hsUrl,
    isUrl
  }) {
    let isDefaultServer = false;

    if (this.props.serverConfig.isDefault && hsUrl === this.props.serverConfig.hsUrl && isUrl === this.props.serverConfig.isUrl) {
      isDefaultServer = true;
    }

    const fallbackHsUrl = isDefaultServer ? this.props.fallbackHsUrl : null;
    const loginLogic = new _Login.default(hsUrl, isUrl, fallbackHsUrl, {
      defaultDeviceDisplayName: this.props.defaultDeviceDisplayName
    });
    this.loginLogic = loginLogic;
    this.setState({
      busy: true,
      loginIncorrect: false
    }); // Do a quick liveliness check on the URLs

    try {
      const {
        warning
      } = await _AutoDiscoveryUtils.default.validateServerConfigWithStaticUrls(hsUrl, isUrl);

      if (warning) {
        this.setState(_objectSpread(_objectSpread({}, _AutoDiscoveryUtils.default.authComponentStateForError(warning)), {}, {
          errorText: ""
        }));
      } else {
        this.setState({
          serverIsAlive: true,
          errorText: ""
        });
      }
    } catch (e) {
      this.setState(_objectSpread({
        busy: false
      }, _AutoDiscoveryUtils.default.authComponentStateForError(e)));
    }

    loginLogic.getFlows().then(flows => {
      // look for a flow where we understand all of the steps.
      const supportedFlows = flows.filter(this.isSupportedFlow);

      if (supportedFlows.length > 0) {
        this.setState({
          flows: supportedFlows
        });
        return;
      } // we got to the end of the list without finding a suitable flow.


      this.setState({
        errorText: (0, _languageHandler._t)("This homeserver doesn't offer any login flows which are supported by this client.")
      });
    }, err => {
      this.setState({
        errorText: this.errorTextFromError(err),
        loginIncorrect: false,
        canTryLogin: false
      });
    }).finally(() => {
      this.setState({
        busy: false
      });
    });
  }

  errorTextFromError(err) {
    let errCode = err.errcode;

    if (!errCode && err.httpStatus) {
      errCode = "HTTP " + err.httpStatus;
    }

    let errorText = (0, _languageHandler._t)("There was a problem communicating with the homeserver, " + "please try again later.") + (errCode ? " (" + errCode + ")" : "");

    if (err.cors === 'rejected') {
      if (window.location.protocol === 'https:' && (this.props.serverConfig.hsUrl.startsWith("http:") || !this.props.serverConfig.hsUrl.startsWith("http"))) {
        errorText = /*#__PURE__*/_react.default.createElement("span", null, (0, _languageHandler._t)("Can't connect to homeserver via HTTP when an HTTPS URL is in your browser bar. " + "Either use HTTPS or <a>enable unsafe scripts</a>.", {}, {
          'a': sub => {
            return /*#__PURE__*/_react.default.createElement("a", {
              target: "_blank",
              rel: "noreferrer noopener",
              href: "https://www.google.com/search?&q=enable%20unsafe%20scripts"
            }, sub);
          }
        }));
      } else {
        errorText = /*#__PURE__*/_react.default.createElement("span", null, (0, _languageHandler._t)("Can't connect to homeserver - please check your connectivity, ensure your " + "<a>homeserver's SSL certificate</a> is trusted, and that a browser extension " + "is not blocking requests.", {}, {
          'a': sub => /*#__PURE__*/_react.default.createElement("a", {
            target: "_blank",
            rel: "noreferrer noopener",
            href: this.props.serverConfig.hsUrl
          }, sub)
        }));
      }
    }

    return errorText;
  }

  renderLoginComponentForFlows() {
    if (!this.state.flows) return null; // this is the ideal order we want to show the flows in

    const order = ["m.login.password", "m.login.sso"];
    const flows = order.map(type => this.state.flows.find(flow => flow.type === type)).filter(Boolean);
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, flows.map(flow => {
      const stepRenderer = this.stepRendererMap[flow.type];
      return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, {
        key: flow.type
      }, stepRenderer());
    }));
  }

  render() {
    const loader = this.isBusy() && !this.state.busyLoggingIn ? /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_Login_loader"
    }, /*#__PURE__*/_react.default.createElement(_Spinner.default, null)) : null;
    const errorText = this.state.errorText;
    let errorTextSection;

    if (errorText) {
      errorTextSection = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_Login_error"
      }, errorText);
    }

    let serverDeadSection;

    if (!this.state.serverIsAlive) {
      const classes = (0, _classnames.default)({
        "mx_Login_error": true,
        "mx_Login_serverError": true,
        "mx_Login_serverErrorNonFatal": !this.state.serverErrorIsFatal
      });
      serverDeadSection = /*#__PURE__*/_react.default.createElement("div", {
        className: classes
      }, this.state.serverDeadError);
    }

    let footer;

    if (this.props.isSyncing || this.state.busyLoggingIn) {
      footer = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_AuthBody_paddedFooter"
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_AuthBody_paddedFooter_title"
      }, /*#__PURE__*/_react.default.createElement(_InlineSpinner.default, {
        w: 20,
        h: 20
      }), this.props.isSyncing ? (0, _languageHandler._t)("Syncing...") : (0, _languageHandler._t)("Signing In...")), this.props.isSyncing && /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_AuthBody_paddedFooter_subtitle"
      }, (0, _languageHandler._t)("If you've joined lots of rooms, this might take a while")));
    } else if (_SettingsStore.default.getValue(_UIFeature.UIFeature.Registration)) {
      footer = /*#__PURE__*/_react.default.createElement("span", {
        className: "mx_AuthBody_changeFlow"
      }, (0, _languageHandler._t)("New? <a>Create account</a>", {}, {
        a: sub => /*#__PURE__*/_react.default.createElement("a", {
          onClick: this.onTryRegisterClick,
          href: "#"
        }, sub)
      }));
    }

    return /*#__PURE__*/_react.default.createElement(_AuthPage.default, null, /*#__PURE__*/_react.default.createElement(_AuthHeader.default, {
      disableLanguageSelector: this.props.isSyncing || this.state.busyLoggingIn
    }), /*#__PURE__*/_react.default.createElement(_AuthBody.default, null, /*#__PURE__*/_react.default.createElement("h2", null, (0, _languageHandler._t)('Sign in'), loader), errorTextSection, serverDeadSection, /*#__PURE__*/_react.default.createElement(_ServerPicker.default, {
      serverConfig: this.props.serverConfig,
      onServerConfigChange: this.props.onServerConfigChange
    }), this.renderLoginComponentForFlows(), footer));
  }

}) || _class);
exports.default = LoginComponent;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,