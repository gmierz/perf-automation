"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _languageHandler = require("../../../languageHandler");

var _SetupEncryptionStore = require("../../../stores/SetupEncryptionStore");

var _SetupEncryptionBody = _interopRequireDefault(require("./SetupEncryptionBody"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _AccessibleButton = _interopRequireDefault(require("../../views/elements/AccessibleButton"));

var _CompleteSecurityBody = _interopRequireDefault(require("../../views/auth/CompleteSecurityBody"));

var _AuthPage = _interopRequireDefault(require("../../views/auth/AuthPage"));

var _dec, _class;

let CompleteSecurity = (_dec = (0, _replaceableComponent.replaceableComponent)("structures.auth.CompleteSecurity"), _dec(_class = class CompleteSecurity extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "onStoreUpdate", () => {
      const store = _SetupEncryptionStore.SetupEncryptionStore.sharedInstance();

      this.setState({
        phase: store.phase,
        lostKeys: store.lostKeys()
      });
    });
    (0, _defineProperty2.default)(this, "onSkipClick", () => {
      const store = _SetupEncryptionStore.SetupEncryptionStore.sharedInstance();

      store.skip();
    });

    const _store = _SetupEncryptionStore.SetupEncryptionStore.sharedInstance();

    _store.on("update", this.onStoreUpdate);

    _store.start();

    this.state = {
      phase: _store.phase,
      lostKeys: _store.lostKeys()
    };
  }

  componentWillUnmount() {
    const store = _SetupEncryptionStore.SetupEncryptionStore.sharedInstance();

    store.off("update", this.onStoreUpdate);
    store.stop();
  }

  render() {
    const {
      phase,
      lostKeys
    } = this.state;
    let icon;
    let title;

    if (phase === _SetupEncryptionStore.Phase.Loading) {
      return null;
    } else if (phase === _SetupEncryptionStore.Phase.Intro) {
      if (lostKeys) {
        icon = /*#__PURE__*/_react.default.createElement("span", {
          className: "mx_CompleteSecurity_headerIcon mx_E2EIcon_warning"
        });
        title = (0, _languageHandler._t)("Unable to verify this login");
      } else {
        icon = /*#__PURE__*/_react.default.createElement("span", {
          className: "mx_CompleteSecurity_headerIcon mx_E2EIcon_warning"
        });
        title = (0, _languageHandler._t)("Verify this login");
      }
    } else if (phase === _SetupEncryptionStore.Phase.Done) {
      icon = /*#__PURE__*/_react.default.createElement("span", {
        className: "mx_CompleteSecurity_headerIcon mx_E2EIcon_verified"
      });
      title = (0, _languageHandler._t)("Session verified");
    } else if (phase === _SetupEncryptionStore.Phase.ConfirmSkip) {
      icon = /*#__PURE__*/_react.default.createElement("span", {
        className: "mx_CompleteSecurity_headerIcon mx_E2EIcon_warning"
      });
      title = (0, _languageHandler._t)("Are you sure?");
    } else if (phase === _SetupEncryptionStore.Phase.Busy) {
      icon = /*#__PURE__*/_react.default.createElement("span", {
        className: "mx_CompleteSecurity_headerIcon mx_E2EIcon_warning"
      });
      title = (0, _languageHandler._t)("Verify this login");
    } else if (phase === _SetupEncryptionStore.Phase.ConfirmReset) {
      icon = /*#__PURE__*/_react.default.createElement("span", {
        className: "mx_CompleteSecurity_headerIcon mx_E2EIcon_warning"
      });
      title = (0, _languageHandler._t)("Really reset verification keys?");
    } else if (phase === _SetupEncryptionStore.Phase.Finished) {// SetupEncryptionBody will take care of calling onFinished, we don't need to do anything
    } else {
      throw new Error(`Unknown phase ${phase}`);
    }

    let skipButton;

    if (phase === _SetupEncryptionStore.Phase.Intro || phase === _SetupEncryptionStore.Phase.ConfirmReset) {
      skipButton = /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        onClick: this.onSkipClick,
        className: "mx_CompleteSecurity_skip",
        "aria-label": (0, _languageHandler._t)("Skip verification for now")
      });
    }

    return /*#__PURE__*/_react.default.createElement(_AuthPage.default, null, /*#__PURE__*/_react.default.createElement(_CompleteSecurityBody.default, null, /*#__PURE__*/_react.default.createElement("h2", {
      className: "mx_CompleteSecurity_header"
    }, icon, title, skipButton), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_CompleteSecurity_body"
    }, /*#__PURE__*/_react.default.createElement(_SetupEncryptionBody.default, {
      onFinished: this.props.onFinished
    }))));
  }

}) || _class);
exports.default = CompleteSecurity;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,