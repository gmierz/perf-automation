"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _languageHandler = require("../../../languageHandler");

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var Lifecycle = _interopRequireWildcard(require("../../../Lifecycle"));

var _Modal = _interopRequireDefault(require("../../../Modal"));

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _Login = require("../../../Login");

var _AuthPage = _interopRequireDefault(require("../../views/auth/AuthPage"));

var _BasePlatform = require("../../../BasePlatform");

var _SSOButtons = _interopRequireDefault(require("../../views/elements/SSOButtons"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _ConfirmWipeDeviceDialog = _interopRequireDefault(require("../../views/dialogs/ConfirmWipeDeviceDialog"));

var _Field = _interopRequireDefault(require("../../views/elements/Field"));

var _AccessibleButton = _interopRequireDefault(require("../../views/elements/AccessibleButton"));

var _Spinner = _interopRequireDefault(require("../../views/elements/Spinner"));

var _AuthHeader = _interopRequireDefault(require("../../views/auth/AuthHeader"));

var _AuthBody = _interopRequireDefault(require("../../views/auth/AuthBody"));

var _logger = require("matrix-js-sdk/src/logger");

var _dec, _class;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const LOGIN_VIEW = {
  LOADING: 1,
  PASSWORD: 2,
  CAS: 3,
  // SSO, but old
  SSO: 4,
  UNSUPPORTED: 5
};
const FLOWS_TO_VIEWS = {
  "m.login.password": LOGIN_VIEW.PASSWORD,
  "m.login.cas": LOGIN_VIEW.CAS,
  "m.login.sso": LOGIN_VIEW.SSO
};
let SoftLogout = (_dec = (0, _replaceableComponent.replaceableComponent)("structures.auth.SoftLogout"), _dec(_class = class SoftLogout extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "onClearAll", () => {
      _Modal.default.createTrackedDialog('Clear Data', 'Soft Logout', _ConfirmWipeDeviceDialog.default, {
        onFinished: wipeData => {
          if (!wipeData) return;

          _logger.logger.log("Clearing data from soft-logged-out session");

          Lifecycle.logout();
        }
      });
    });
    (0, _defineProperty2.default)(this, "onPasswordChange", ev => {
      this.setState({
        password: ev.target.value
      });
    });
    (0, _defineProperty2.default)(this, "onForgotPassword", () => {
      _dispatcher.default.dispatch({
        action: 'start_password_recovery'
      });
    });
    (0, _defineProperty2.default)(this, "onPasswordLogin", async ev => {
      ev.preventDefault();
      ev.stopPropagation();
      this.setState({
        busy: true
      });

      const hsUrl = _MatrixClientPeg.MatrixClientPeg.get().getHomeserverUrl();

      const isUrl = _MatrixClientPeg.MatrixClientPeg.get().getIdentityServerUrl();

      const loginType = "m.login.password";
      const loginParams = {
        identifier: {
          type: "m.id.user",
          user: _MatrixClientPeg.MatrixClientPeg.get().getUserId()
        },
        password: this.state.password,
        device_id: _MatrixClientPeg.MatrixClientPeg.get().getDeviceId()
      };
      let credentials = null;

      try {
        credentials = await (0, _Login.sendLoginRequest)(hsUrl, isUrl, loginType, loginParams);
      } catch (e) {
        let errorText = (0, _languageHandler._t)("Failed to re-authenticate due to a homeserver problem");

        if (e.errcode === "M_FORBIDDEN" && (e.httpStatus === 401 || e.httpStatus === 403)) {
          errorText = (0, _languageHandler._t)("Incorrect password");
        }

        this.setState({
          busy: false,
          errorText: errorText
        });
        return;
      }

      Lifecycle.hydrateSession(credentials).catch(e => {
        _logger.logger.error(e);

        this.setState({
          busy: false,
          errorText: (0, _languageHandler._t)("Failed to re-authenticate")
        });
      });
    });
    this.state = {
      loginView: LOGIN_VIEW.LOADING,
      keyBackupNeeded: true,
      // assume we do while we figure it out (see componentDidMount)
      busy: false,
      password: "",
      errorText: "",
      flows: []
    };
  }

  componentDidMount() {
    // We've ended up here when we don't need to - navigate to login
    if (!Lifecycle.isSoftLogout()) {
      _dispatcher.default.dispatch({
        action: "start_login"
      });

      return;
    }

    this.initLogin();

    const cli = _MatrixClientPeg.MatrixClientPeg.get();

    if (cli.isCryptoEnabled()) {
      cli.countSessionsNeedingBackup().then(remaining => {
        this.setState({
          keyBackupNeeded: remaining > 0
        });
      });
    }
  }

  async initLogin() {
    const queryParams = this.props.realQueryParams;
    const hasAllParams = queryParams && queryParams['loginToken'];

    if (hasAllParams) {
      this.setState({
        loginView: LOGIN_VIEW.LOADING
      });
      this.trySsoLogin();
      return;
    } // Note: we don't use the existing Login class because it is heavily flow-based. We don't
    // care about login flows here, unless it is the single flow we support.


    const client = _MatrixClientPeg.MatrixClientPeg.get();

    const flows = (await client.loginFlows()).flows;
    const loginViews = flows.map(f => FLOWS_TO_VIEWS[f.type]);
    const chosenView = loginViews.filter(f => !!f)[0] || LOGIN_VIEW.UNSUPPORTED;
    this.setState({
      flows,
      loginView: chosenView
    });
  }

  async trySsoLogin() {
    this.setState({
      busy: true
    });
    const hsUrl = localStorage.getItem(_BasePlatform.SSO_HOMESERVER_URL_KEY);

    const isUrl = localStorage.getItem(_BasePlatform.SSO_ID_SERVER_URL_KEY) || _MatrixClientPeg.MatrixClientPeg.get().getIdentityServerUrl();

    const loginType = "m.login.token";
    const loginParams = {
      token: this.props.realQueryParams['loginToken'],
      device_id: _MatrixClientPeg.MatrixClientPeg.get().getDeviceId()
    };
    let credentials = null;

    try {
      credentials = await (0, _Login.sendLoginRequest)(hsUrl, isUrl, loginType, loginParams);
    } catch (e) {
      _logger.logger.error(e);

      this.setState({
        busy: false,
        loginView: LOGIN_VIEW.UNSUPPORTED
      });
      return;
    }

    Lifecycle.hydrateSession(credentials).then(() => {
      if (this.props.onTokenLoginCompleted) this.props.onTokenLoginCompleted();
    }).catch(e => {
      _logger.logger.error(e);

      this.setState({
        busy: false,
        loginView: LOGIN_VIEW.UNSUPPORTED
      });
    });
  }

  renderSignInSection() {
    if (this.state.loginView === LOGIN_VIEW.LOADING) {
      return /*#__PURE__*/_react.default.createElement(_Spinner.default, null);
    }

    let introText = null; // null is translated to something area specific in this function

    if (this.state.keyBackupNeeded) {
      introText = (0, _languageHandler._t)("Regain access to your account and recover encryption keys stored in this session. " + "Without them, you won't be able to read all of your secure messages in any session.");
    }

    if (this.state.loginView === LOGIN_VIEW.PASSWORD) {
      let error = null;

      if (this.state.errorText) {
        error = /*#__PURE__*/_react.default.createElement("span", {
          className: "mx_Login_error"
        }, this.state.errorText);
      }

      if (!introText) {
        introText = (0, _languageHandler._t)("Enter your password to sign in and regain access to your account.");
      } // else we already have a message and should use it (key backup warning)


      return /*#__PURE__*/_react.default.createElement("form", {
        onSubmit: this.onPasswordLogin
      }, /*#__PURE__*/_react.default.createElement("p", null, introText), error, /*#__PURE__*/_react.default.createElement(_Field.default, {
        type: "password",
        label: (0, _languageHandler._t)("Password"),
        onChange: this.onPasswordChange,
        value: this.state.password,
        disabled: this.state.busy
      }), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        onClick: this.onPasswordLogin,
        kind: "primary",
        type: "submit",
        disabled: this.state.busy
      }, (0, _languageHandler._t)("Sign In")), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        onClick: this.onForgotPassword,
        kind: "link"
      }, (0, _languageHandler._t)("Forgotten your password?")));
    }

    if (this.state.loginView === LOGIN_VIEW.SSO || this.state.loginView === LOGIN_VIEW.CAS) {
      if (!introText) {
        introText = (0, _languageHandler._t)("Sign in and regain access to your account.");
      } // else we already have a message and should use it (key backup warning)


      const loginType = this.state.loginView === LOGIN_VIEW.CAS ? "cas" : "sso";
      const flow = this.state.flows.find(flow => flow.type === "m.login." + loginType);
      return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("p", null, introText), /*#__PURE__*/_react.default.createElement(_SSOButtons.default, {
        matrixClient: _MatrixClientPeg.MatrixClientPeg.get(),
        flow: flow,
        loginType: loginType,
        fragmentAfterLogin: this.props.fragmentAfterLogin,
        primary: !this.state.flows.find(flow => flow.type === "m.login.password")
      }));
    } // Default: assume unsupported/error


    return /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("You cannot sign in to your account. Please contact your " + "homeserver admin for more information."));
  }

  render() {
    return /*#__PURE__*/_react.default.createElement(_AuthPage.default, null, /*#__PURE__*/_react.default.createElement(_AuthHeader.default, null), /*#__PURE__*/_react.default.createElement(_AuthBody.default, null, /*#__PURE__*/_react.default.createElement("h2", null, (0, _languageHandler._t)("You're signed out")), /*#__PURE__*/_react.default.createElement("h3", null, (0, _languageHandler._t)("Sign in")), /*#__PURE__*/_react.default.createElement("div", null, this.renderSignInSection()), /*#__PURE__*/_react.default.createElement("h3", null, (0, _languageHandler._t)("Clear personal data")), /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Warning: Your personal data (including encryption keys) is still stored " + "in this session. Clear it if you're finished using this session, or want to sign " + "in to another account.")), /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      onClick: this.onClearAll,
      kind: "danger"
    }, (0, _languageHandler._t)("Clear all data")))));
  }

}) || _class);
exports.default = SoftLogout;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,