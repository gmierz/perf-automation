"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _languageHandler = require("../../../languageHandler");

var _Modal = _interopRequireDefault(require("../../../Modal"));

var _PasswordReset = _interopRequireDefault(require("../../../PasswordReset"));

var _AutoDiscoveryUtils = _interopRequireDefault(require("../../../utils/AutoDiscoveryUtils"));

var _classnames = _interopRequireDefault(require("classnames"));

var _AuthPage = _interopRequireDefault(require("../../views/auth/AuthPage"));

var _CountlyAnalytics = _interopRequireDefault(require("../../../CountlyAnalytics"));

var _ServerPicker = _interopRequireDefault(require("../../views/elements/ServerPicker"));

var _EmailField = _interopRequireDefault(require("../../views/auth/EmailField"));

var _PassphraseField = _interopRequireDefault(require("../../views/auth/PassphraseField"));

var _replaceableComponent = require("../../../utils/replaceableComponent");

var _RegistrationForm = require("../../views/auth/RegistrationForm");

var _InlineSpinner = _interopRequireDefault(require("../../views/elements/InlineSpinner"));

var _logger = require("matrix-js-sdk/src/logger");

var _Spinner = _interopRequireDefault(require("../../views/elements/Spinner"));

var _QuestionDialog = _interopRequireDefault(require("../../views/dialogs/QuestionDialog"));

var _ErrorDialog = _interopRequireDefault(require("../../views/dialogs/ErrorDialog"));

var _AuthHeader = _interopRequireDefault(require("../../views/auth/AuthHeader"));

var _AuthBody = _interopRequireDefault(require("../../views/auth/AuthBody"));

var _PassphraseConfirmField = _interopRequireDefault(require("../../views/auth/PassphraseConfirmField"));

var _dec, _class;

var Phase;

(function (Phase) {
  Phase[Phase["Forgot"] = 1] = "Forgot";
  Phase[Phase["SendingEmail"] = 2] = "SendingEmail";
  Phase[Phase["EmailSent"] = 3] = "EmailSent";
  Phase[Phase["Done"] = 4] = "Done";
})(Phase || (Phase = {}));

var ForgotPasswordField;

(function (ForgotPasswordField) {
  ForgotPasswordField["Email"] = "field_email";
  ForgotPasswordField["Password"] = "field_password";
  ForgotPasswordField["PasswordConfirm"] = "field_password_confirm";
})(ForgotPasswordField || (ForgotPasswordField = {}));

let ForgotPassword = (_dec = (0, _replaceableComponent.replaceableComponent)("structures.auth.ForgotPassword"), _dec(_class = class ForgotPassword extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "reset", void 0);
    (0, _defineProperty2.default)(this, "state", {
      phase: Phase.Forgot,
      email: "",
      password: "",
      password2: "",
      errorText: null,
      // We perform liveliness checks later, but for now suppress the errors.
      // We also track the server dead errors independently of the regular errors so
      // that we can render it differently, and override any other error the user may
      // be seeing.
      serverIsAlive: true,
      serverErrorIsFatal: false,
      serverDeadError: ""
    });
    (0, _defineProperty2.default)(this, "onVerify", async ev => {
      ev.preventDefault();

      if (!this.reset) {
        _logger.logger.error("onVerify called before submitPasswordReset!");

        return;
      }

      if (this.state.currentHttpRequest) return;

      try {
        await this.handleHttpRequest(this.reset.checkEmailLinkClicked());
        this.setState({
          phase: Phase.Done
        });
      } catch (err) {
        this.showErrorDialog(err.message);
      }
    });
    (0, _defineProperty2.default)(this, "onSubmitForm", async ev => {
      ev.preventDefault();
      if (this.state.currentHttpRequest) return; // refresh the server errors, just in case the server came back online

      await this.handleHttpRequest(this.checkServerLiveliness(this.props.serverConfig));
      const allFieldsValid = await this.verifyFieldsBeforeSubmit();

      if (!allFieldsValid) {
        return;
      }

      _Modal.default.createTrackedDialog('Forgot Password Warning', '', _QuestionDialog.default, {
        title: (0, _languageHandler._t)('Warning!'),
        description: /*#__PURE__*/_react.default.createElement("div", null, (0, _languageHandler._t)("Changing your password will reset any end-to-end encryption keys " + "on all of your sessions, making encrypted chat history unreadable. Set up " + "Key Backup or export your room keys from another session before resetting your " + "password.")),
        button: (0, _languageHandler._t)('Continue'),
        onFinished: confirmed => {
          if (confirmed) {
            this.submitPasswordReset(this.state.email, this.state.password);
          }
        }
      });
    });
    (0, _defineProperty2.default)(this, "onInputChanged", (stateKey, ev) => {
      this.setState({
        [stateKey]: ev.currentTarget.value
      });
    });
    (0, _defineProperty2.default)(this, "onLoginClick", ev => {
      ev.preventDefault();
      ev.stopPropagation();
      this.props.onLoginClick();
    });

    _CountlyAnalytics.default.instance.track("onboarding_forgot_password_begin");
  }

  componentDidMount() {
    this.reset = null;
    this.checkServerLiveliness(this.props.serverConfig);
  } // TODO: [REACT-WARNING] Replace with appropriate lifecycle event
  // eslint-disable-next-line


  UNSAFE_componentWillReceiveProps(newProps) {
    if (newProps.serverConfig.hsUrl === this.props.serverConfig.hsUrl && newProps.serverConfig.isUrl === this.props.serverConfig.isUrl) return; // Do a liveliness check on the new URLs

    this.checkServerLiveliness(newProps.serverConfig);
  }

  async checkServerLiveliness(serverConfig) {
    try {
      await _AutoDiscoveryUtils.default.validateServerConfigWithStaticUrls(serverConfig.hsUrl, serverConfig.isUrl);
      this.setState({
        serverIsAlive: true
      });
    } catch (e) {
      this.setState(_AutoDiscoveryUtils.default.authComponentStateForError(e, "forgot_password"));
    }
  }

  submitPasswordReset(email, password) {
    this.setState({
      phase: Phase.SendingEmail
    });
    this.reset = new _PasswordReset.default(this.props.serverConfig.hsUrl, this.props.serverConfig.isUrl);
    this.reset.resetPassword(email, password).then(() => {
      this.setState({
        phase: Phase.EmailSent
      });
    }, err => {
      this.showErrorDialog((0, _languageHandler._t)('Failed to send email') + ": " + err.message);
      this.setState({
        phase: Phase.Forgot
      });
    });
  }

  async verifyFieldsBeforeSubmit() {
    const fieldIdsInDisplayOrder = [ForgotPasswordField.Email, ForgotPasswordField.Password, ForgotPasswordField.PasswordConfirm];
    const invalidFields = [];

    for (const fieldId of fieldIdsInDisplayOrder) {
      const valid = await this[fieldId].validate({
        allowEmpty: false
      });

      if (!valid) {
        invalidFields.push(this[fieldId]);
      }
    }

    if (invalidFields.length === 0) {
      return true;
    } // Focus on the first invalid field, then re-validate,
    // which will result in the error tooltip being displayed for that field.


    invalidFields[0].focus();
    invalidFields[0].validate({
      allowEmpty: false,
      focused: true
    });
    return false;
  }

  showErrorDialog(description, title) {
    _Modal.default.createTrackedDialog('Forgot Password Error', '', _ErrorDialog.default, {
      title,
      description
    });
  }

  handleHttpRequest(request) {
    this.setState({
      currentHttpRequest: request
    });
    return request.finally(() => {
      this.setState({
        currentHttpRequest: undefined
      });
    });
  }

  renderForgot() {
    let errorText = null;
    const err = this.state.errorText;

    if (err) {
      errorText = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_Login_error"
      }, err);
    }

    let serverDeadSection;

    if (!this.state.serverIsAlive) {
      const classes = (0, _classnames.default)({
        "mx_Login_error": true,
        "mx_Login_serverError": true,
        "mx_Login_serverErrorNonFatal": !this.state.serverErrorIsFatal
      });
      serverDeadSection = /*#__PURE__*/_react.default.createElement("div", {
        className: classes
      }, this.state.serverDeadError);
    }

    return /*#__PURE__*/_react.default.createElement("div", null, errorText, serverDeadSection, /*#__PURE__*/_react.default.createElement(_ServerPicker.default, {
      serverConfig: this.props.serverConfig,
      onServerConfigChange: this.props.onServerConfigChange
    }), /*#__PURE__*/_react.default.createElement("form", {
      onSubmit: this.onSubmitForm
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_AuthBody_fieldRow"
    }, /*#__PURE__*/_react.default.createElement(_EmailField.default, {
      name: "reset_email" // define a name so browser's password autofill gets less confused
      ,
      labelRequired: (0, _languageHandler._t)('The email address linked to your account must be entered.'),
      labelInvalid: (0, _languageHandler._t)("The email address doesn't appear to be valid."),
      value: this.state.email,
      fieldRef: field => this[ForgotPasswordField.Email] = field,
      autoFocus: true,
      onChange: this.onInputChanged.bind(this, "email"),
      onFocus: () => _CountlyAnalytics.default.instance.track("onboarding_forgot_password_email_focus"),
      onBlur: () => _CountlyAnalytics.default.instance.track("onboarding_forgot_password_email_blur")
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_AuthBody_fieldRow"
    }, /*#__PURE__*/_react.default.createElement(_PassphraseField.default, {
      name: "reset_password",
      type: "password",
      label: (0, _languageHandler._td)('New Password'),
      value: this.state.password,
      minScore: _RegistrationForm.PASSWORD_MIN_SCORE,
      fieldRef: field => this[ForgotPasswordField.Password] = field,
      onChange: this.onInputChanged.bind(this, "password"),
      onFocus: () => _CountlyAnalytics.default.instance.track("onboarding_forgot_password_newPassword_focus"),
      onBlur: () => _CountlyAnalytics.default.instance.track("onboarding_forgot_password_newPassword_blur"),
      autoComplete: "new-password"
    }), /*#__PURE__*/_react.default.createElement(_PassphraseConfirmField.default, {
      name: "reset_password_confirm",
      label: (0, _languageHandler._t)('Confirm'),
      labelRequired: (0, _languageHandler._t)("A new password must be entered."),
      labelInvalid: (0, _languageHandler._t)("New passwords must match each other."),
      value: this.state.password2,
      password: this.state.password,
      fieldRef: field => this[ForgotPasswordField.PasswordConfirm] = field,
      onChange: this.onInputChanged.bind(this, "password2"),
      onFocus: () => _CountlyAnalytics.default.instance.track("onboarding_forgot_password_newPassword2_focus"),
      onBlur: () => _CountlyAnalytics.default.instance.track("onboarding_forgot_password_newPassword2_blur"),
      autoComplete: "new-password"
    })), /*#__PURE__*/_react.default.createElement("span", null, (0, _languageHandler._t)('A verification email will be sent to your inbox to confirm ' + 'setting your new password.')), /*#__PURE__*/_react.default.createElement("input", {
      className: "mx_Login_submit",
      type: "submit",
      value: (0, _languageHandler._t)('Send Reset Email')
    })), /*#__PURE__*/_react.default.createElement("a", {
      className: "mx_AuthBody_changeFlow",
      onClick: this.onLoginClick,
      href: "#"
    }, (0, _languageHandler._t)('Sign in instead')));
  }

  renderSendingEmail() {
    return /*#__PURE__*/_react.default.createElement(_Spinner.default, null);
  }

  renderEmailSent() {
    return /*#__PURE__*/_react.default.createElement("div", null, (0, _languageHandler._t)("An email has been sent to %(emailAddress)s. Once you've followed the " + "link it contains, click below.", {
      emailAddress: this.state.email
    }), /*#__PURE__*/_react.default.createElement("br", null), /*#__PURE__*/_react.default.createElement("input", {
      className: "mx_Login_submit",
      type: "button",
      onClick: this.onVerify,
      value: (0, _languageHandler._t)('I have verified my email address')
    }), this.state.currentHttpRequest && /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_Login_spinner"
    }, /*#__PURE__*/_react.default.createElement(_InlineSpinner.default, {
      w: 64,
      h: 64
    })));
  }

  renderDone() {
    return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Your password has been reset.")), /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("You have been logged out of all sessions and will no longer receive " + "push notifications. To re-enable notifications, sign in again on each " + "device.")), /*#__PURE__*/_react.default.createElement("input", {
      className: "mx_Login_submit",
      type: "button",
      onClick: this.props.onComplete,
      value: (0, _languageHandler._t)('Return to login screen')
    }));
  }

  render() {
    let resetPasswordJsx;

    switch (this.state.phase) {
      case Phase.Forgot:
        resetPasswordJsx = this.renderForgot();
        break;

      case Phase.SendingEmail:
        resetPasswordJsx = this.renderSendingEmail();
        break;

      case Phase.EmailSent:
        resetPasswordJsx = this.renderEmailSent();
        break;

      case Phase.Done:
        resetPasswordJsx = this.renderDone();
        break;

      default:
        resetPasswordJsx = /*#__PURE__*/_react.default.createElement("div", {
          className: "mx_Login_spinner"
        }, /*#__PURE__*/_react.default.createElement(_InlineSpinner.default, {
          w: 64,
          h: 64
        }));
    }

    return /*#__PURE__*/_react.default.createElement(_AuthPage.default, null, /*#__PURE__*/_react.default.createElement(_AuthHeader.default, null), /*#__PURE__*/_react.default.createElement(_AuthBody.default, null, /*#__PURE__*/_react.default.createElement("h2", null, " ", (0, _languageHandler._t)('Set a new password'), " "), resetPasswordJsx));
  }

}) || _class);
exports.default = ForgotPassword;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,