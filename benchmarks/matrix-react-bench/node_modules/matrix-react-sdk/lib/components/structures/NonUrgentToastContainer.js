"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var React = _interopRequireWildcard(require("react"));

var _NonUrgentToastStore = _interopRequireDefault(require("../../stores/NonUrgentToastStore"));

var _AsyncStore = require("../../stores/AsyncStore");

var _replaceableComponent = require("../../utils/replaceableComponent");

var _dec, _class;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

let NonUrgentToastContainer = (_dec = (0, _replaceableComponent.replaceableComponent)("structures.NonUrgentToastContainer"), _dec(_class = class NonUrgentToastContainer extends React.PureComponent {
  constructor(props, context) {
    super(props, context);
    (0, _defineProperty2.default)(this, "onUpdateToasts", () => {
      this.setState({
        toasts: _NonUrgentToastStore.default.instance.components
      });
    });
    this.state = {
      toasts: _NonUrgentToastStore.default.instance.components
    };

    _NonUrgentToastStore.default.instance.on(_AsyncStore.UPDATE_EVENT, this.onUpdateToasts);
  }

  componentWillUnmount() {
    _NonUrgentToastStore.default.instance.off(_AsyncStore.UPDATE_EVENT, this.onUpdateToasts);
  }

  render() {
    const toasts = this.state.toasts.map((t, i) => {
      return /*#__PURE__*/React.createElement("div", {
        className: "mx_NonUrgentToastContainer_toast",
        key: `toast-${i}`
      }, /*#__PURE__*/React.createElement(t, {}));
    });
    return /*#__PURE__*/React.createElement("div", {
      className: "mx_NonUrgentToastContainer",
      role: "alert"
    }, toasts);
  }

}) || _class);
exports.default = NonUrgentToastContainer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3N0cnVjdHVyZXMvTm9uVXJnZW50VG9hc3RDb250YWluZXIudHN4Il0sIm5hbWVzIjpbIk5vblVyZ2VudFRvYXN0Q29udGFpbmVyIiwiUmVhY3QiLCJQdXJlQ29tcG9uZW50IiwiY29uc3RydWN0b3IiLCJwcm9wcyIsImNvbnRleHQiLCJzZXRTdGF0ZSIsInRvYXN0cyIsIk5vblVyZ2VudFRvYXN0U3RvcmUiLCJpbnN0YW5jZSIsImNvbXBvbmVudHMiLCJzdGF0ZSIsIm9uIiwiVVBEQVRFX0VWRU5UIiwib25VcGRhdGVUb2FzdHMiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsIm9mZiIsInJlbmRlciIsIm1hcCIsInQiLCJpIiwiY3JlYXRlRWxlbWVudCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFnQkE7O0FBRUE7O0FBQ0E7O0FBQ0E7Ozs7Ozs7O0lBVXFCQSx1QixXQURwQixnREFBcUIsb0NBQXJCLEMsZ0JBQUQsTUFDcUJBLHVCQURyQixTQUNxREMsS0FBSyxDQUFDQyxhQUQzRCxDQUN5RjtBQUM5RUMsRUFBQUEsV0FBVyxDQUFDQyxLQUFELEVBQVFDLE9BQVIsRUFBaUI7QUFDL0IsVUFBTUQsS0FBTixFQUFhQyxPQUFiO0FBRCtCLDBEQWNWLE1BQU07QUFDM0IsV0FBS0MsUUFBTCxDQUFjO0FBQUVDLFFBQUFBLE1BQU0sRUFBRUMsNkJBQW9CQyxRQUFwQixDQUE2QkM7QUFBdkMsT0FBZDtBQUNILEtBaEJrQztBQUcvQixTQUFLQyxLQUFMLEdBQWE7QUFDVEosTUFBQUEsTUFBTSxFQUFFQyw2QkFBb0JDLFFBQXBCLENBQTZCQztBQUQ1QixLQUFiOztBQUlBRixpQ0FBb0JDLFFBQXBCLENBQTZCRyxFQUE3QixDQUFnQ0Msd0JBQWhDLEVBQThDLEtBQUtDLGNBQW5EO0FBQ0g7O0FBRU1DLEVBQUFBLG9CQUFvQixHQUFHO0FBQzFCUCxpQ0FBb0JDLFFBQXBCLENBQTZCTyxHQUE3QixDQUFpQ0gsd0JBQWpDLEVBQStDLEtBQUtDLGNBQXBEO0FBQ0g7O0FBTU1HLEVBQUFBLE1BQU0sR0FBRztBQUNaLFVBQU1WLE1BQU0sR0FBRyxLQUFLSSxLQUFMLENBQVdKLE1BQVgsQ0FBa0JXLEdBQWxCLENBQXNCLENBQUNDLENBQUQsRUFBSUMsQ0FBSixLQUFVO0FBQzNDLDBCQUNJO0FBQUssUUFBQSxTQUFTLEVBQUMsa0NBQWY7QUFBa0QsUUFBQSxHQUFHLEVBQUcsU0FBUUEsQ0FBRTtBQUFsRSxzQkFDTW5CLEtBQUssQ0FBQ29CLGFBQU4sQ0FBb0JGLENBQXBCLEVBQXVCLEVBQXZCLENBRE4sQ0FESjtBQUtILEtBTmMsQ0FBZjtBQVFBLHdCQUNJO0FBQUssTUFBQSxTQUFTLEVBQUMsNEJBQWY7QUFBNEMsTUFBQSxJQUFJLEVBQUM7QUFBakQsT0FDTVosTUFETixDQURKO0FBS0g7O0FBakNvRixDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbkNvcHlyaWdodCAyMDIwIFRoZSBNYXRyaXgub3JnIEZvdW5kYXRpb24gQy5JLkMuXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBDb21wb25lbnRDbGFzcyB9IGZyb20gXCIuLi8uLi9AdHlwZXMvY29tbW9uXCI7XG5pbXBvcnQgTm9uVXJnZW50VG9hc3RTdG9yZSBmcm9tIFwiLi4vLi4vc3RvcmVzL05vblVyZ2VudFRvYXN0U3RvcmVcIjtcbmltcG9ydCB7IFVQREFURV9FVkVOVCB9IGZyb20gXCIuLi8uLi9zdG9yZXMvQXN5bmNTdG9yZVwiO1xuaW1wb3J0IHsgcmVwbGFjZWFibGVDb21wb25lbnQgfSBmcm9tIFwiLi4vLi4vdXRpbHMvcmVwbGFjZWFibGVDb21wb25lbnRcIjtcblxuaW50ZXJmYWNlIElQcm9wcyB7XG59XG5cbmludGVyZmFjZSBJU3RhdGUge1xuICAgIHRvYXN0czogQ29tcG9uZW50Q2xhc3NbXTtcbn1cblxuQHJlcGxhY2VhYmxlQ29tcG9uZW50KFwic3RydWN0dXJlcy5Ob25VcmdlbnRUb2FzdENvbnRhaW5lclwiKVxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTm9uVXJnZW50VG9hc3RDb250YWluZXIgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50PElQcm9wcywgSVN0YXRlPiB7XG4gICAgcHVibGljIGNvbnN0cnVjdG9yKHByb3BzLCBjb250ZXh0KSB7XG4gICAgICAgIHN1cGVyKHByb3BzLCBjb250ZXh0KTtcblxuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgdG9hc3RzOiBOb25VcmdlbnRUb2FzdFN0b3JlLmluc3RhbmNlLmNvbXBvbmVudHMsXG4gICAgICAgIH07XG5cbiAgICAgICAgTm9uVXJnZW50VG9hc3RTdG9yZS5pbnN0YW5jZS5vbihVUERBVEVfRVZFTlQsIHRoaXMub25VcGRhdGVUb2FzdHMpO1xuICAgIH1cblxuICAgIHB1YmxpYyBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgICAgTm9uVXJnZW50VG9hc3RTdG9yZS5pbnN0YW5jZS5vZmYoVVBEQVRFX0VWRU5ULCB0aGlzLm9uVXBkYXRlVG9hc3RzKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG9uVXBkYXRlVG9hc3RzID0gKCkgPT4ge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHsgdG9hc3RzOiBOb25VcmdlbnRUb2FzdFN0b3JlLmluc3RhbmNlLmNvbXBvbmVudHMgfSk7XG4gICAgfTtcblxuICAgIHB1YmxpYyByZW5kZXIoKSB7XG4gICAgICAgIGNvbnN0IHRvYXN0cyA9IHRoaXMuc3RhdGUudG9hc3RzLm1hcCgodCwgaSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm14X05vblVyZ2VudFRvYXN0Q29udGFpbmVyX3RvYXN0XCIga2V5PXtgdG9hc3QtJHtpfWB9PlxuICAgICAgICAgICAgICAgICAgICB7IFJlYWN0LmNyZWF0ZUVsZW1lbnQodCwge30pIH1cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm14X05vblVyZ2VudFRvYXN0Q29udGFpbmVyXCIgcm9sZT1cImFsZXJ0XCI+XG4gICAgICAgICAgICAgICAgeyB0b2FzdHMgfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgfVxufVxuIl19