"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reResizable = require("re-resizable");

var _classnames = _interopRequireDefault(require("classnames"));

var _AccessibleButton = _interopRequireDefault(require("../views/elements/AccessibleButton"));

var _RovingTabIndex = require("../../accessibility/RovingTabIndex");

var _Keyboard = require("../../Keyboard");

var _useLocalStorageState = require("../../hooks/useLocalStorageState");

var _MatrixClientContext = _interopRequireDefault(require("../../contexts/MatrixClientContext"));

var _WidgetUtils = _interopRequireDefault(require("../../utils/WidgetUtils"));

var _useAccountData = require("../../hooks/useAccountData");

var _AppTile = _interopRequireDefault(require("../views/elements/AppTile"));

var _useSettings = require("../../hooks/useSettings");

var _UIStore = _interopRequireDefault(require("../../stores/UIStore"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
Copyright 2020 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const MIN_HEIGHT = 100;
const MAX_HEIGHT = 500; // or 50% of the window height

const INITIAL_HEIGHT = 280;

const LeftPanelWidget = () => {
  const cli = (0, _react.useContext)(_MatrixClientContext.default);
  const mWidgetsEvent = (0, _useAccountData.useAccountData)(cli, "m.widgets");
  const leftPanelWidgetId = (0, _useSettings.useSettingValue)("Widgets.leftPanel");
  const app = (0, _react.useMemo)(() => {
    if (!mWidgetsEvent || !leftPanelWidgetId) return null;
    const widgetConfig = Object.values(mWidgetsEvent).find(w => w.id === leftPanelWidgetId);
    if (!widgetConfig) return null;
    return _WidgetUtils.default.makeAppConfig(widgetConfig.state_key, widgetConfig.content, widgetConfig.sender, null, widgetConfig.id);
  }, [mWidgetsEvent, leftPanelWidgetId]);
  const [height, setHeight] = (0, _useLocalStorageState.useLocalStorageState)("left-panel-widget-height", INITIAL_HEIGHT);
  const [expanded, setExpanded] = (0, _useLocalStorageState.useLocalStorageState)("left-panel-widget-expanded", true);
  const [onFocus, isActive, ref] = (0, _RovingTabIndex.useRovingTabIndex)();
  const tabIndex = isActive ? 0 : -1;
  if (!app) return null;
  let content;

  if (expanded) {
    content = /*#__PURE__*/_react.default.createElement(_reResizable.Resizable, {
      size: {
        height
      },
      minHeight: MIN_HEIGHT,
      maxHeight: Math.min(_UIStore.default.instance.windowHeight / 2, MAX_HEIGHT),
      onResizeStop: (e, dir, ref, d) => {
        setHeight(height + d.height);
      },
      handleWrapperClass: "mx_LeftPanelWidget_resizerHandles",
      handleClasses: {
        top: "mx_LeftPanelWidget_resizerHandle"
      },
      className: "mx_LeftPanelWidget_resizeBox",
      enable: {
        top: true
      }
    }, /*#__PURE__*/_react.default.createElement(_AppTile.default, {
      app: app,
      fullWidth: true,
      showMenubar: false,
      userWidget: true,
      userId: cli.getUserId(),
      creatorUserId: app.creatorUserId,
      widgetPageTitle: _WidgetUtils.default.getWidgetDataTitle(app),
      waitForIframeLoad: app.waitForIframeLoad
    }));
  }

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_LeftPanelWidget"
  }, /*#__PURE__*/_react.default.createElement("div", {
    onFocus: onFocus,
    className: "mx_LeftPanelWidget_headerContainer",
    onKeyDown: ev => {
      switch (ev.key) {
        case _Keyboard.Key.ARROW_LEFT:
          ev.stopPropagation();
          setExpanded(false);
          break;

        case _Keyboard.Key.ARROW_RIGHT:
          {
            ev.stopPropagation();
            setExpanded(true);
            break;
          }
      }
    }
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_LeftPanelWidget_stickable"
  }, /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
    onFocus: onFocus,
    inputRef: ref,
    tabIndex: tabIndex,
    className: "mx_LeftPanelWidget_headerText",
    role: "treeitem",
    "aria-expanded": expanded,
    "aria-level": 1,
    onClick: () => {
      setExpanded(!expanded);
    }
  }, /*#__PURE__*/_react.default.createElement("span", {
    className: (0, _classnames.default)({
      "mx_LeftPanelWidget_collapseBtn": true,
      "mx_LeftPanelWidget_collapseBtn_collapsed": !expanded
    })
  }), /*#__PURE__*/_react.default.createElement("span", null, _WidgetUtils.default.getWidgetName(app))))), content);
};

var _default = LeftPanelWidget;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,