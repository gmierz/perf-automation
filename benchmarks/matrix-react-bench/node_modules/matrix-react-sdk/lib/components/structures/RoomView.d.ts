import React from 'react';
import { IRecommendedVersion, Room } from "matrix-js-sdk/src/models/room";
import { MatrixEvent } from "matrix-js-sdk/src/models/event";
import { ISearchResults } from 'matrix-js-sdk/src/@types/search';
import ResizeNotifier from '../../utils/ResizeNotifier';
import { Layout } from "../../settings/enums/Layout";
import { TimelineRenderingType } from "../../contexts/RoomContext";
import { MatrixClientProps } from "../../contexts/MatrixClientContext";
import { E2EStatus } from '../../utils/ShieldUtils';
import { IMatrixClientCreds } from "../../MatrixClientPeg";
import { SearchScope } from "../views/rooms/SearchBar";
import { XOR } from "../../@types/common";
import { IOOBData, IThreepidInvite } from "../../stores/ThreepidInviteStore";
import { CallState } from "matrix-js-sdk/src/webrtc/call";
import { IOpts } from "../../createRoom";
import EditorStateTransfer from "../../utils/EditorStateTransfer";
import { EventTimeline } from 'matrix-js-sdk/src/models/event-timeline';
interface IRoomProps extends MatrixClientProps {
    threepidInvite: IThreepidInvite;
    oobData?: IOOBData;
    resizeNotifier: ResizeNotifier;
    justCreatedOpts?: IOpts;
    forceTimeline?: boolean;
    onRegistered?(credentials: IMatrixClientCreds): void;
}
declare enum MainSplitContentType {
    Timeline = 0,
    MaximisedWidget = 1
}
export interface IRoomState {
    room?: Room;
    roomId?: string;
    roomAlias?: string;
    roomLoading: boolean;
    peekLoading: boolean;
    shouldPeek: boolean;
    membersLoaded: boolean;
    initialEventId?: string;
    initialEventPixelOffset?: number;
    isInitialEventHighlighted?: boolean;
    replyToEvent?: MatrixEvent;
    numUnreadMessages: number;
    draggingFile: boolean;
    searching: boolean;
    searchTerm?: string;
    searchScope?: SearchScope;
    searchResults?: XOR<{}, ISearchResults>;
    searchHighlights?: string[];
    searchInProgress?: boolean;
    callState?: CallState;
    guestsCanJoin: boolean;
    canPeek: boolean;
    showApps: boolean;
    isPeeking: boolean;
    showRightPanel: boolean;
    roomLoadError?: Error;
    joining: boolean;
    atEndOfLiveTimeline: boolean;
    atEndOfLiveTimelineInit: boolean;
    showTopUnreadMessagesBar: boolean;
    statusBarVisible: boolean;
    upgradeRecommendation?: IRecommendedVersion;
    canReact: boolean;
    canReply: boolean;
    layout: Layout;
    lowBandwidth: boolean;
    alwaysShowTimestamps: boolean;
    showTwelveHourTimestamps: boolean;
    readMarkerInViewThresholdMs: number;
    readMarkerOutOfViewThresholdMs: number;
    showHiddenEventsInTimeline: boolean;
    showReadReceipts: boolean;
    showRedactions: boolean;
    showJoinLeaves: boolean;
    showAvatarChanges: boolean;
    showDisplaynameChanges: boolean;
    matrixClientIsReady: boolean;
    showUrlPreview?: boolean;
    e2eStatus?: E2EStatus;
    rejecting?: boolean;
    rejectError?: Error;
    hasPinnedWidgets?: boolean;
    mainSplitContentType?: MainSplitContentType;
    dragCounter: number;
    wasContextSwitch?: boolean;
    editState?: EditorStateTransfer;
    timelineRenderingType: TimelineRenderingType;
    liveTimeline?: EventTimeline;
}
export declare class RoomView extends React.Component<IRoomProps, IRoomState> {
    private readonly dispatcherRef;
    private readonly roomStoreToken;
    private readonly rightPanelStoreToken;
    private settingWatchers;
    private unmounted;
    private permalinkCreators;
    private searchId;
    private roomView;
    private searchResultsPanel;
    private messagePanel;
    static contextType: React.Context<import("matrix-js-sdk").MatrixClient>;
    constructor(props: any, context: any);
    private onWidgetStoreUpdate;
    private onWidgetEchoStoreUpdate;
    private onWidgetLayoutChange;
    private checkWidgets;
    private getMainSplitContentType;
    private checkRightPanel;
    private onReadReceiptsChange;
    private onRoomViewStoreUpdate;
    private getRoomId;
    private getPermalinkCreatorForRoom;
    private stopAllPermalinkCreators;
    private setupRoom;
    private shouldShowApps;
    componentDidMount(): void;
    shouldComponentUpdate(nextProps: any, nextState: any): boolean;
    componentDidUpdate(): void;
    componentWillUnmount(): void;
    private onUserScroll;
    private onRightPanelStoreUpdate;
    private onPageUnload;
    private onReactKeyDown;
    private onAction;
    private onRoomTimeline;
    private onEventDecrypted;
    private handleEffects;
    private onRoomName;
    private onKeyBackupStatus;
    canResetTimeline: () => boolean;
    private onRoomLoaded;
    private calculateRecommendedVersion;
    private loadMembersIfJoined;
    private calculatePeekRules;
    private updatePreviewUrlVisibility;
    private onRoom;
    private onDeviceVerificationChanged;
    private onUserVerificationChanged;
    private onCrossSigningKeysChanged;
    private updateE2EStatus;
    private onAccountData;
    private onRoomAccountData;
    private onRoomStateEvents;
    private onRoomStateMember;
    private onMyMembership;
    private updatePermissions;
    private updateRoomMembers;
    private checkDesktopNotifications;
    private updateDMState;
    private onSearchResultsFillRequest;
    private onInviteButtonClick;
    private onJoinButtonClicked;
    private onMessageListScroll;
    private onDragEnter;
    private onDragLeave;
    private onDragOver;
    private onDrop;
    private injectSticker;
    private onSearch;
    private handleSearchResult;
    private getSearchResultTiles;
    private onCallPlaced;
    private onAppsClick;
    private onForgetClick;
    private onRejectButtonClicked;
    private onRejectAndIgnoreClick;
    private onRejectThreepidInviteButtonClicked;
    private onSearchClick;
    private onCancelSearchClick;
    private jumpToLiveTimeline;
    private jumpToReadMarker;
    private forgetReadMarker;
    private updateTopUnreadMessagesBar;
    private getScrollState;
    private onStatusBarVisible;
    private onStatusBarHidden;
    /**
     * called by the parent component when PageUp/Down/etc is pressed.
     *
     * We pass it down to the scroll panel.
     */
    private handleScrollKey;
    /**
     * get any current call for this room
     */
    private getCallForRoom;
    private gatherTimelinePanelRef;
    private getOldRoom;
    getHiddenHighlightCount(): any;
    onHiddenHighlightsClick: () => void;
    render(): JSX.Element;
}
declare const RoomViewWithMatrixClient: React.ForwardRefExoticComponent<Pick<Omit<any, "mxClient">, string | number | symbol> & React.RefAttributes<React.Component<any, any, any>>>;
export default RoomViewWithMatrixClient;
