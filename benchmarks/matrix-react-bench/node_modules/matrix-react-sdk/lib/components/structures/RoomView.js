"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.RoomView = void 0;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _room = require("matrix-js-sdk/src/models/room");

var _shouldHideEvent = _interopRequireDefault(require("../../shouldHideEvent"));

var _languageHandler = require("../../languageHandler");

var _Permalinks = require("../../utils/permalinks/Permalinks");

var _ContentMessages = _interopRequireDefault(require("../../ContentMessages"));

var _Modal = _interopRequireDefault(require("../../Modal"));

var _CallHandler = _interopRequireDefault(require("../../CallHandler"));

var _dispatcher = _interopRequireDefault(require("../../dispatcher/dispatcher"));

var Rooms = _interopRequireWildcard(require("../../Rooms"));

var _Searching = _interopRequireWildcard(require("../../Searching"));

var _MainSplit = _interopRequireDefault(require("./MainSplit"));

var _RightPanel = _interopRequireDefault(require("./RightPanel"));

var _RoomViewStore = _interopRequireDefault(require("../../stores/RoomViewStore"));

var _RoomScrollStateStore = _interopRequireDefault(require("../../stores/RoomScrollStateStore"));

var _WidgetEchoStore = _interopRequireDefault(require("../../stores/WidgetEchoStore"));

var _SettingsStore = _interopRequireDefault(require("../../settings/SettingsStore"));

var _Layout = require("../../settings/enums/Layout");

var _AccessibleButton = _interopRequireDefault(require("../views/elements/AccessibleButton"));

var _RightPanelStore = _interopRequireDefault(require("../../stores/RightPanelStore"));

var _EventTile = require("../views/rooms/EventTile");

var _RoomContext = _interopRequireWildcard(require("../../contexts/RoomContext"));

var _MatrixClientContext = _interopRequireWildcard(require("../../contexts/MatrixClientContext"));

var _ShieldUtils = require("../../utils/ShieldUtils");

var _actions = require("../../dispatcher/actions");

var _ScrollPanel = _interopRequireDefault(require("./ScrollPanel"));

var _TimelinePanel = _interopRequireDefault(require("./TimelinePanel"));

var _ErrorBoundary = _interopRequireDefault(require("../views/elements/ErrorBoundary"));

var _RoomPreviewBar = _interopRequireDefault(require("../views/rooms/RoomPreviewBar"));

var _SearchBar = _interopRequireWildcard(require("../views/rooms/SearchBar"));

var _RoomUpgradeWarningBar = _interopRequireDefault(require("../views/rooms/RoomUpgradeWarningBar"));

var _AuxPanel = _interopRequireDefault(require("../views/rooms/AuxPanel"));

var _RoomHeader = _interopRequireDefault(require("../views/rooms/RoomHeader"));

var _EffectsOverlay = _interopRequireDefault(require("../views/elements/EffectsOverlay"));

var _utils = require("../../effects/utils");

var _effects = require("../../effects");

var _WidgetStore = _interopRequireDefault(require("../../stores/WidgetStore"));

var _AsyncStore = require("../../stores/AsyncStore");

var _Notifier = _interopRequireDefault(require("../../Notifier"));

var _DesktopNotificationsToast = require("../../toasts/DesktopNotificationsToast");

var _RoomNotificationStateStore = require("../../stores/notifications/RoomNotificationStateStore");

var _WidgetLayoutStore = require("../../stores/widgets/WidgetLayoutStore");

var _KeyBindingsManager = require("../../KeyBindingsManager");

var _objects = require("../../utils/objects");

var _SpaceRoomView = _interopRequireDefault(require("./SpaceRoomView"));

var _replaceableComponent = require("../../utils/replaceableComponent");

var _EditorStateTransfer = _interopRequireDefault(require("../../utils/EditorStateTransfer"));

var _lodash = require("lodash");

var _ErrorDialog = _interopRequireDefault(require("../views/dialogs/ErrorDialog"));

var _SearchResultTile = _interopRequireDefault(require("../views/rooms/SearchResultTile"));

var _Spinner = _interopRequireDefault(require("../views/elements/Spinner"));

var _UploadBar = _interopRequireDefault(require("./UploadBar"));

var _RoomStatusBar = _interopRequireDefault(require("./RoomStatusBar"));

var _MessageComposer = _interopRequireDefault(require("../views/rooms/MessageComposer"));

var _JumpToBottomButton = _interopRequireDefault(require("../views/rooms/JumpToBottomButton"));

var _TopUnreadMessagesBar = _interopRequireDefault(require("../views/rooms/TopUnreadMessagesBar"));

var _SpaceStore = _interopRequireDefault(require("../../stores/spaces/SpaceStore"));

var _logger = require("matrix-js-sdk/src/logger");

var _threads = require("../../dispatcher/dispatch-actions/threads");

var _EventUtils = require("../../utils/EventUtils");

var _ComposerInsertPayload = require("../../dispatcher/payloads/ComposerInsertPayload");

var _AppsDrawer = _interopRequireDefault(require("../views/rooms/AppsDrawer"));

var _RightPanelStorePhases = require("../../stores/RightPanelStorePhases");

const _excluded = ["upgradeRecommendation"],
      _excluded2 = ["upgradeRecommendation"];

var _dec, _class, _class2, _temp;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const DEBUG = false;

let debuglog = function (msg) {};

const BROWSER_SUPPORTS_SANDBOX = ('sandbox' in document.createElement('iframe'));

if (DEBUG) {
  // using bind means that we get to keep useful line numbers in the console
  debuglog = _logger.logger.log.bind(console);
}

// This defines the content of the mainSplit.
// If the mainSplit does not contain the Timeline, the chat is shown in the right panel.
var MainSplitContentType;

(function (MainSplitContentType) {
  MainSplitContentType[MainSplitContentType["Timeline"] = 0] = "Timeline";
  MainSplitContentType[MainSplitContentType["MaximisedWidget"] = 1] = "MaximisedWidget";
})(MainSplitContentType || (MainSplitContentType = {}));

let RoomView = (_dec = (0, _replaceableComponent.replaceableComponent)("structures.RoomView"), _dec(_class = (_temp = _class2 = class RoomView extends _react.default.Component {
  constructor(props, context) {
    super(props, context);
    (0, _defineProperty2.default)(this, "dispatcherRef", void 0);
    (0, _defineProperty2.default)(this, "roomStoreToken", void 0);
    (0, _defineProperty2.default)(this, "rightPanelStoreToken", void 0);
    (0, _defineProperty2.default)(this, "settingWatchers", void 0);
    (0, _defineProperty2.default)(this, "unmounted", false);
    (0, _defineProperty2.default)(this, "permalinkCreators", {});
    (0, _defineProperty2.default)(this, "searchId", void 0);
    (0, _defineProperty2.default)(this, "roomView", /*#__PURE__*/(0, _react.createRef)());
    (0, _defineProperty2.default)(this, "searchResultsPanel", /*#__PURE__*/(0, _react.createRef)());
    (0, _defineProperty2.default)(this, "messagePanel", void 0);
    (0, _defineProperty2.default)(this, "onWidgetStoreUpdate", () => {
      if (!this.state.room) return;
      this.checkWidgets(this.state.room);
    });
    (0, _defineProperty2.default)(this, "onWidgetEchoStoreUpdate", () => {
      if (!this.state.room) return;
      this.checkWidgets(this.state.room);
    });
    (0, _defineProperty2.default)(this, "onWidgetLayoutChange", () => {
      if (!this.state.room) return;

      if (_WidgetLayoutStore.WidgetLayoutStore.instance.hasMaximisedWidget(this.state.room)) {
        // Show chat in right panel when a widget is maximised
        _dispatcher.default.dispatch({
          action: _actions.Action.SetRightPanelPhase,
          phase: _RightPanelStorePhases.RightPanelPhases.Timeline
        });
      }

      this.checkWidgets(this.state.room);
      this.checkRightPanel(this.state.room);
    });
    (0, _defineProperty2.default)(this, "checkWidgets", room => {
      this.setState({
        hasPinnedWidgets: _WidgetLayoutStore.WidgetLayoutStore.instance.hasPinnedWidgets(room),
        mainSplitContentType: this.getMainSplitContentType(room),
        showApps: this.shouldShowApps(room)
      });
    });
    (0, _defineProperty2.default)(this, "getMainSplitContentType", room => {
      // TODO-video check if video should be displayed in main panel
      return _WidgetLayoutStore.WidgetLayoutStore.instance.hasMaximisedWidget(room) ? MainSplitContentType.MaximisedWidget : MainSplitContentType.Timeline;
    });
    (0, _defineProperty2.default)(this, "checkRightPanel", room => {
      // This is a hack to hide the chat. This should not be necessary once the right panel
      // phase is stored per room. (need to be done after check widget so that mainSplitContentType is updated)
      if (_RightPanelStore.default.getSharedInstance().roomPanelPhase === _RightPanelStorePhases.RightPanelPhases.Timeline && this.state.showRightPanel && !_WidgetLayoutStore.WidgetLayoutStore.instance.hasMaximisedWidget(this.state.room)) {
        // Two timelines are shown prevent this by hiding the right panel
        _dispatcher.default.dispatch({
          action: _actions.Action.ToggleRightPanel,
          type: "room"
        });
      }
    });
    (0, _defineProperty2.default)(this, "onReadReceiptsChange", () => {
      this.setState({
        showReadReceipts: _SettingsStore.default.getValue("showReadReceipts", this.state.roomId)
      });
    });
    (0, _defineProperty2.default)(this, "onRoomViewStoreUpdate", async initial => {
      if (this.unmounted) {
        return;
      }

      if (!initial && this.state.roomId !== _RoomViewStore.default.getRoomId()) {
        // RoomView explicitly does not support changing what room
        // is being viewed: instead it should just be re-mounted when
        // switching rooms. Therefore, if the room ID changes, we
        // ignore this. We either need to do this or add code to handle
        // saving the scroll position (otherwise we end up saving the
        // scroll position against the wrong room).
        // Given that doing the setState here would cause a bunch of
        // unnecessary work, we just ignore the change since we know
        // that if the current room ID has changed from what we thought
        // it was, it means we're about to be unmounted.
        return;
      }

      const roomId = _RoomViewStore.default.getRoomId();

      const newState = {
        roomId,
        roomAlias: _RoomViewStore.default.getRoomAlias(),
        roomLoading: _RoomViewStore.default.isRoomLoading(),
        roomLoadError: _RoomViewStore.default.getRoomLoadError(),
        joining: _RoomViewStore.default.isJoining(),
        replyToEvent: _RoomViewStore.default.getQuotingEvent(),
        // we should only peek once we have a ready client
        shouldPeek: this.state.matrixClientIsReady && _RoomViewStore.default.shouldPeek(),
        showReadReceipts: _SettingsStore.default.getValue("showReadReceipts", roomId),
        showRedactions: _SettingsStore.default.getValue("showRedactions", roomId),
        showJoinLeaves: _SettingsStore.default.getValue("showJoinLeaves", roomId),
        showAvatarChanges: _SettingsStore.default.getValue("showAvatarChanges", roomId),
        showDisplaynameChanges: _SettingsStore.default.getValue("showDisplaynameChanges", roomId),
        wasContextSwitch: _RoomViewStore.default.getWasContextSwitch()
      };

      const initialEventId = _RoomViewStore.default.getInitialEventId();

      if (initialEventId) {
        var _initialEvent, _initialEvent2;

        const room = this.context.getRoom(roomId);
        let initialEvent = room === null || room === void 0 ? void 0 : room.findEventById(initialEventId); // The event does not exist in the current sync data
        // We need to fetch it to know whether to route this request
        // to the main timeline or to a threaded one
        // In the current state, if a thread does not exist in the sync data
        // We will only display the event targeted by the `matrix.to` link
        // and the root event.
        // The rest will be lost for now, until the aggregation API on the server
        // becomes available to fetch a whole thread

        if (!initialEvent) {
          initialEvent = await (0, _EventUtils.fetchInitialEvent)(this.context, roomId, initialEventId);
        }

        const thread = (_initialEvent = initialEvent) === null || _initialEvent === void 0 ? void 0 : _initialEvent.getThread();

        if (thread && !((_initialEvent2 = initialEvent) !== null && _initialEvent2 !== void 0 && _initialEvent2.isThreadRoot)) {
          (0, _threads.dispatchShowThreadEvent)(thread.rootEvent, initialEvent, _RoomViewStore.default.isInitialEventHighlighted());
        } else {
          var _initialEvent3;

          newState.initialEventId = initialEventId;
          newState.isInitialEventHighlighted = _RoomViewStore.default.isInitialEventHighlighted();

          if (thread && (_initialEvent3 = initialEvent) !== null && _initialEvent3 !== void 0 && _initialEvent3.isThreadRoot) {
            (0, _threads.dispatchShowThreadEvent)(thread.rootEvent, initialEvent, _RoomViewStore.default.isInitialEventHighlighted());
          }
        }
      } // Add watchers for each of the settings we just looked up


      this.settingWatchers = this.settingWatchers.concat([_SettingsStore.default.watchSetting("showReadReceipts", roomId, (...[,,, value]) => this.setState({
        showReadReceipts: value
      })), _SettingsStore.default.watchSetting("showRedactions", roomId, (...[,,, value]) => this.setState({
        showRedactions: value
      })), _SettingsStore.default.watchSetting("showJoinLeaves", roomId, (...[,,, value]) => this.setState({
        showJoinLeaves: value
      })), _SettingsStore.default.watchSetting("showAvatarChanges", roomId, (...[,,, value]) => this.setState({
        showAvatarChanges: value
      })), _SettingsStore.default.watchSetting("showDisplaynameChanges", roomId, (...[,,, value]) => this.setState({
        showDisplaynameChanges: value
      }))]);

      if (!initial && this.state.shouldPeek && !newState.shouldPeek) {
        // Stop peeking because we have joined this room now
        this.context.stopPeeking();
      } // Temporary logging to diagnose https://github.com/vector-im/element-web/issues/4307


      _logger.logger.log('RVS update:', newState.roomId, newState.roomAlias, 'loading?', newState.roomLoading, 'joining?', newState.joining, 'initial?', initial, 'shouldPeek?', newState.shouldPeek); // NB: This does assume that the roomID will not change for the lifetime of
      // the RoomView instance


      if (initial) {
        newState.room = this.context.getRoom(newState.roomId);

        if (newState.room) {
          newState.showApps = this.shouldShowApps(newState.room);
          this.onRoomLoaded(newState.room);
        }
      }

      if (this.state.roomId === null && newState.roomId !== null) {
        // Get the scroll state for the new room
        // If an event ID wasn't specified, default to the one saved for this room
        // in the scroll state store. Assume initialEventPixelOffset should be set.
        if (!newState.initialEventId) {
          const roomScrollState = _RoomScrollStateStore.default.getScrollState(newState.roomId);

          if (roomScrollState) {
            newState.initialEventId = roomScrollState.focussedEvent;
            newState.initialEventPixelOffset = roomScrollState.pixelOffset;
          }
        }
      } // Clear the search results when clicking a search result (which changes the
      // currently scrolled to event, this.state.initialEventId).


      if (this.state.initialEventId !== newState.initialEventId) {
        newState.searchResults = null;
      }

      this.setState(newState); // At this point, newState.roomId could be null (e.g. the alias might not
      // have been resolved yet) so anything called here must handle this case.
      // We pass the new state into this function for it to read: it needs to
      // observe the new state but we don't want to put it in the setState
      // callback because this would prevent the setStates from being batched,
      // ie. cause it to render RoomView twice rather than the once that is necessary.

      if (initial) {
        this.setupRoom(newState.room, newState.roomId, newState.joining, newState.shouldPeek);
      }
    });
    (0, _defineProperty2.default)(this, "getRoomId", () => {
      // According to `onRoomViewStoreUpdate`, `state.roomId` can be null
      // if we have a room alias we haven't resolved yet. To work around this,
      // first we'll try the room object if it's there, and then fallback to
      // the bare room ID. (We may want to update `state.roomId` after
      // resolving aliases, so we could always trust it.)
      return this.state.room ? this.state.room.roomId : this.state.roomId;
    });
    (0, _defineProperty2.default)(this, "onUserScroll", () => {
      if (this.state.initialEventId && this.state.isInitialEventHighlighted) {
        _dispatcher.default.dispatch({
          action: _actions.Action.ViewRoom,
          room_id: this.state.room.roomId,
          event_id: this.state.initialEventId,
          highlighted: false,
          replyingToEvent: this.state.replyToEvent
        });
      }
    });
    (0, _defineProperty2.default)(this, "onRightPanelStoreUpdate", () => {
      this.setState({
        showRightPanel: _RightPanelStore.default.getSharedInstance().isOpenForRoom
      });
    });
    (0, _defineProperty2.default)(this, "onPageUnload", event => {
      if (_ContentMessages.default.sharedInstance().getCurrentUploads().length > 0) {
        return event.returnValue = (0, _languageHandler._t)("You seem to be uploading files, are you sure you want to quit?");
      } else if (this.getCallForRoom() && this.state.callState !== 'ended') {
        return event.returnValue = (0, _languageHandler._t)("You seem to be in a call, are you sure you want to quit?");
      }
    });
    (0, _defineProperty2.default)(this, "onReactKeyDown", ev => {
      let handled = false;
      const action = (0, _KeyBindingsManager.getKeyBindingsManager)().getRoomAction(ev);

      switch (action) {
        case _KeyBindingsManager.RoomAction.DismissReadMarker:
          this.messagePanel.forgetReadMarker();
          this.jumpToLiveTimeline();
          handled = true;
          break;

        case _KeyBindingsManager.RoomAction.JumpToOldestUnread:
          this.jumpToReadMarker();
          handled = true;
          break;

        case _KeyBindingsManager.RoomAction.UploadFile:
          _dispatcher.default.dispatch({
            action: "upload_file"
          }, true);

          handled = true;
          break;
      }

      if (handled) {
        ev.stopPropagation();
        ev.preventDefault();
      }
    });
    (0, _defineProperty2.default)(this, "onAction", payload => {
      switch (payload.action) {
        case 'message_sent':
          this.checkDesktopNotifications();
          break;

        case 'post_sticker_message':
          this.injectSticker(payload.data.content.url, payload.data.content.info, payload.data.description || payload.data.name);
          break;

        case 'picture_snapshot':
          _ContentMessages.default.sharedInstance().sendContentListToRoom([payload.file], this.state.room.roomId, null, this.context);

          break;

        case 'notifier_enabled':
        case _actions.Action.UploadStarted:
        case _actions.Action.UploadFinished:
        case _actions.Action.UploadCanceled:
          this.forceUpdate();
          break;

        case 'call_state':
          {
            // don't filter out payloads for room IDs other than props.room because
            // we may be interested in the conf 1:1 room
            if (!payload.room_id) {
              return;
            }

            const call = this.getCallForRoom();
            this.setState({
              callState: call ? call.state : null
            });
            break;
          }

        case 'appsDrawer':
          this.setState({
            showApps: payload.show
          });
          break;

        case 'reply_to_event':
          if (this.state.searchResults && payload.event.getRoomId() === this.state.roomId && !this.unmounted && payload.context === _RoomContext.TimelineRenderingType.Room) {
            this.onCancelSearchClick();
          }

          break;

        case 'quote':
          if (this.state.searchResults) {
            const roomId = payload.event.getRoomId();

            if (roomId === this.state.roomId) {
              this.onCancelSearchClick();
            }

            setImmediate(() => {
              _dispatcher.default.dispatch({
                action: _actions.Action.ViewRoom,
                room_id: roomId,
                deferred_action: payload
              });
            });
          }

          break;

        case 'sync_state':
          if (!this.state.matrixClientIsReady) {
            this.setState({
              matrixClientIsReady: this.context && this.context.isInitialSyncComplete()
            }, () => {
              // send another "initial" RVS update to trigger peeking if needed
              this.onRoomViewStoreUpdate(true);
            });
          }

          break;

        case 'focus_search':
          this.onSearchClick();
          break;

        case _actions.Action.EditEvent:
          {
            // Quit early if we're trying to edit events in wrong rendering context
            if (payload.timelineRenderingType !== this.state.timelineRenderingType) return;
            const editState = payload.event ? new _EditorStateTransfer.default(payload.event) : null;
            this.setState({
              editState
            }, () => {
              if (payload.event) {
                var _this$messagePanel;

                (_this$messagePanel = this.messagePanel) === null || _this$messagePanel === void 0 ? void 0 : _this$messagePanel.scrollToEventIfNeeded(payload.event.getId());
              }
            });
            break;
          }

        case _actions.Action.ComposerInsert:
          {
            if (payload.composerType) break; // re-dispatch to the correct composer

            _dispatcher.default.dispatch(_objectSpread(_objectSpread({}, payload), {}, {
              composerType: this.state.editState ? _ComposerInsertPayload.ComposerType.Edit : _ComposerInsertPayload.ComposerType.Send
            }));

            break;
          }

        case _actions.Action.FocusAComposer:
          {
            // re-dispatch to the correct composer
            _dispatcher.default.fire(this.state.editState ? _actions.Action.FocusEditMessageComposer : _actions.Action.FocusSendMessageComposer);

            break;
          }

        case "scroll_to_bottom":
          if (payload.timelineRenderingType === this.context.timelineRenderingType) {
            var _this$messagePanel2;

            (_this$messagePanel2 = this.messagePanel) === null || _this$messagePanel2 === void 0 ? void 0 : _this$messagePanel2.jumpToLiveTimeline();
          }

          break;
      }
    });
    (0, _defineProperty2.default)(this, "onRoomTimeline", (ev, room, toStartOfTimeline, removed, data) => {
      var _this$state$room;

      if (this.unmounted) return; // ignore events for other rooms

      if (!room || room.roomId !== ((_this$state$room = this.state.room) === null || _this$state$room === void 0 ? void 0 : _this$state$room.roomId)) return; // ignore events from filtered timelines

      if (data.timeline.getTimelineSet() !== room.getUnfilteredTimelineSet()) return;

      if (ev.getType() === "org.matrix.room.preview_urls") {
        this.updatePreviewUrlVisibility(room);
      }

      if (ev.getType() === "m.room.encryption") {
        this.updateE2EStatus(room);
      } // ignore anything but real-time updates at the end of the room:
      // updates from pagination will happen when the paginate completes.


      if (toStartOfTimeline || !data || !data.liveEvent) return; // no point handling anything while we're waiting for the join to finish:
      // we'll only be showing a spinner.

      if (this.state.joining) return;

      if (!ev.isBeingDecrypted() && !ev.isDecryptionFailure()) {
        this.handleEffects(ev);
      }

      if (ev.getSender() !== this.context.credentials.userId) {
        // update unread count when scrolled up
        if (!this.state.searchResults && this.state.atEndOfLiveTimeline) {// no change
        } else if (!(0, _shouldHideEvent.default)(ev, this.state)) {
          this.setState((state, props) => {
            return {
              numUnreadMessages: state.numUnreadMessages + 1
            };
          });
        }
      }
    });
    (0, _defineProperty2.default)(this, "onEventDecrypted", ev => {
      if (!this.state.room || !this.state.matrixClientIsReady) return; // not ready at all

      if (ev.getRoomId() !== this.state.room.roomId) return; // not for us

      if (ev.isDecryptionFailure()) return;
      this.handleEffects(ev);
    });
    (0, _defineProperty2.default)(this, "handleEffects", ev => {
      const notifState = _RoomNotificationStateStore.RoomNotificationStateStore.instance.getRoomState(this.state.room);

      if (!notifState.isUnread) return;

      _effects.CHAT_EFFECTS.forEach(effect => {
        if ((0, _utils.containsEmoji)(ev.getContent(), effect.emojis) || ev.getContent().msgtype === effect.msgType) {
          // For initial threads launch, chat effects are disabled
          // see #19731
          if (!_SettingsStore.default.getValue("feature_thread") || !ev.isThreadRelation) {
            _dispatcher.default.dispatch({
              action: `effects.${effect.command}`
            });
          }
        }
      });
    });
    (0, _defineProperty2.default)(this, "onRoomName", room => {
      if (this.state.room && room.roomId == this.state.room.roomId) {
        this.forceUpdate();
      }
    });
    (0, _defineProperty2.default)(this, "onKeyBackupStatus", () => {
      // Key backup status changes affect whether the in-room recovery
      // reminder is displayed.
      this.forceUpdate();
    });
    (0, _defineProperty2.default)(this, "canResetTimeline", () => {
      if (!this.messagePanel) {
        return true;
      }

      return this.messagePanel.canResetTimeline();
    });
    (0, _defineProperty2.default)(this, "onRoomLoaded", room => {
      if (this.unmounted) return; // Attach a widget store listener only when we get a room

      _WidgetLayoutStore.WidgetLayoutStore.instance.on(_WidgetLayoutStore.WidgetLayoutStore.emissionForRoom(room), this.onWidgetLayoutChange);

      this.calculatePeekRules(room);
      this.updatePreviewUrlVisibility(room);
      this.loadMembersIfJoined(room);
      this.calculateRecommendedVersion(room);
      this.updateE2EStatus(room);
      this.updatePermissions(room);
      this.checkWidgets(room);
      this.checkRightPanel(room);
      this.setState({
        liveTimeline: room.getLiveTimeline()
      });
    });
    (0, _defineProperty2.default)(this, "onRoom", room => {
      if (!room || room.roomId !== this.state.roomId) {
        return;
      } // Detach the listener if the room is changing for some reason


      if (this.state.room) {
        _WidgetLayoutStore.WidgetLayoutStore.instance.off(_WidgetLayoutStore.WidgetLayoutStore.emissionForRoom(this.state.room), this.onWidgetLayoutChange);
      }

      this.setState({
        room: room
      }, () => {
        this.onRoomLoaded(room);
      });
    });
    (0, _defineProperty2.default)(this, "onDeviceVerificationChanged", (userId, device) => {
      const room = this.state.room;

      if (!room.currentState.getMember(userId)) {
        return;
      }

      this.updateE2EStatus(room);
    });
    (0, _defineProperty2.default)(this, "onUserVerificationChanged", (userId, trustStatus) => {
      const room = this.state.room;

      if (!room || !room.currentState.getMember(userId)) {
        return;
      }

      this.updateE2EStatus(room);
    });
    (0, _defineProperty2.default)(this, "onCrossSigningKeysChanged", () => {
      const room = this.state.room;

      if (room) {
        this.updateE2EStatus(room);
      }
    });
    (0, _defineProperty2.default)(this, "onAccountData", event => {
      const type = event.getType();

      if ((type === "org.matrix.preview_urls" || type === "im.vector.web.settings") && this.state.room) {
        // non-e2ee url previews are stored in legacy event type `org.matrix.room.preview_urls`
        this.updatePreviewUrlVisibility(this.state.room);
      }
    });
    (0, _defineProperty2.default)(this, "onRoomAccountData", (event, room) => {
      if (room.roomId == this.state.roomId) {
        const type = event.getType();

        if (type === "org.matrix.room.preview_urls" || type === "im.vector.web.settings") {
          // non-e2ee url previews are stored in legacy event type `org.matrix.room.preview_urls`
          this.updatePreviewUrlVisibility(room);
        }
      }
    });
    (0, _defineProperty2.default)(this, "onRoomStateEvents", (ev, state) => {
      // ignore if we don't have a room yet
      if (!this.state.room || this.state.room.roomId !== state.roomId) {
        return;
      }

      this.updatePermissions(this.state.room);
    });
    (0, _defineProperty2.default)(this, "onRoomStateMember", (ev, state, member) => {
      // ignore if we don't have a room yet
      if (!this.state.room) {
        return;
      } // ignore members in other rooms


      if (member.roomId !== this.state.room.roomId) {
        return;
      }

      this.updateRoomMembers();
    });
    (0, _defineProperty2.default)(this, "onMyMembership", (room, membership, oldMembership) => {
      if (room.roomId === this.state.roomId) {
        this.forceUpdate();
        this.loadMembersIfJoined(room);
        this.updatePermissions(room);
      }
    });
    (0, _defineProperty2.default)(this, "updateRoomMembers", (0, _lodash.throttle)(() => {
      this.updateDMState();
      this.updateE2EStatus(this.state.room);
    }, 500, {
      leading: true,
      trailing: true
    }));
    (0, _defineProperty2.default)(this, "onSearchResultsFillRequest", backwards => {
      if (!backwards) {
        return Promise.resolve(false);
      }

      if (this.state.searchResults.next_batch) {
        debuglog("requesting more search results");
        const searchPromise = (0, _Searching.searchPagination)(this.state.searchResults);
        return this.handleSearchResult(searchPromise);
      } else {
        debuglog("no more search results");
        return Promise.resolve(false);
      }
    });
    (0, _defineProperty2.default)(this, "onInviteButtonClick", () => {
      // call AddressPickerDialog
      _dispatcher.default.dispatch({
        action: 'view_invite',
        roomId: this.state.room.roomId
      });
    });
    (0, _defineProperty2.default)(this, "onJoinButtonClicked", () => {
      // If the user is a ROU, allow them to transition to a PWLU
      if (this.context && this.context.isGuest()) {
        // Join this room once the user has registered and logged in
        // (If we failed to peek, we may not have a valid room object.)
        _dispatcher.default.dispatch({
          action: 'do_after_sync_prepared',
          deferred_action: {
            action: _actions.Action.ViewRoom,
            room_id: this.getRoomId()
          }
        });

        _dispatcher.default.dispatch({
          action: 'require_registration'
        });
      } else {
        Promise.resolve().then(() => {
          var _this$props$threepidI;

          const signUrl = (_this$props$threepidI = this.props.threepidInvite) === null || _this$props$threepidI === void 0 ? void 0 : _this$props$threepidI.signUrl;

          _dispatcher.default.dispatch({
            action: _actions.Action.JoinRoom,
            roomId: this.getRoomId(),
            opts: {
              inviteSignUrl: signUrl
            },
            _type: "unknown" // TODO: instrumentation

          });

          return Promise.resolve();
        });
      }
    });
    (0, _defineProperty2.default)(this, "onMessageListScroll", ev => {
      if (this.messagePanel.isAtEndOfLiveTimeline()) {
        this.setState({
          numUnreadMessages: 0,
          atEndOfLiveTimeline: true
        });
      } else {
        this.setState({
          atEndOfLiveTimeline: false
        });
      }

      this.updateTopUnreadMessagesBar();
    });
    (0, _defineProperty2.default)(this, "onDragEnter", ev => {
      ev.stopPropagation();
      ev.preventDefault(); // We always increment the counter no matter the types, because dragging is
      // still happening. If we didn't, the drag counter would get out of sync.

      this.setState({
        dragCounter: this.state.dragCounter + 1
      }); // See:
      // https://docs.w3cub.com/dom/datatransfer/types
      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#file

      if (ev.dataTransfer.types.includes("Files") || ev.dataTransfer.types.includes("application/x-moz-file")) {
        this.setState({
          draggingFile: true
        });
      }
    });
    (0, _defineProperty2.default)(this, "onDragLeave", ev => {
      ev.stopPropagation();
      ev.preventDefault();
      this.setState({
        dragCounter: this.state.dragCounter - 1
      });

      if (this.state.dragCounter === 0) {
        this.setState({
          draggingFile: false
        });
      }
    });
    (0, _defineProperty2.default)(this, "onDragOver", ev => {
      ev.stopPropagation();
      ev.preventDefault();
      ev.dataTransfer.dropEffect = 'none'; // See:
      // https://docs.w3cub.com/dom/datatransfer/types
      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#file

      if (ev.dataTransfer.types.includes("Files") || ev.dataTransfer.types.includes("application/x-moz-file")) {
        ev.dataTransfer.dropEffect = 'copy';
      }
    });
    (0, _defineProperty2.default)(this, "onDrop", ev => {
      ev.stopPropagation();
      ev.preventDefault();

      _ContentMessages.default.sharedInstance().sendContentListToRoom(ev.dataTransfer.files, this.state.room.roomId, null, this.context);

      _dispatcher.default.fire(_actions.Action.FocusSendMessageComposer);

      this.setState({
        draggingFile: false,
        dragCounter: this.state.dragCounter - 1
      });
    });
    (0, _defineProperty2.default)(this, "onSearch", (term, scope) => {
      this.setState({
        searchTerm: term,
        searchScope: scope,
        searchResults: {},
        searchHighlights: []
      }); // if we already have a search panel, we need to tell it to forget
      // about its scroll state.

      if (this.searchResultsPanel.current) {
        this.searchResultsPanel.current.resetScrollState();
      } // make sure that we don't end up showing results from
      // an aborted search by keeping a unique id.
      //
      // todo: should cancel any previous search requests.


      this.searchId = new Date().getTime();
      let roomId;
      if (scope === _SearchBar.SearchScope.Room) roomId = this.state.room.roomId;
      debuglog("sending search request");
      const searchPromise = (0, _Searching.default)(term, roomId);
      this.handleSearchResult(searchPromise);
    });
    (0, _defineProperty2.default)(this, "onCallPlaced", type => {
      _dispatcher.default.dispatch({
        action: 'place_call',
        type: type,
        room_id: this.state.room.roomId
      });
    });
    (0, _defineProperty2.default)(this, "onAppsClick", () => {
      _dispatcher.default.dispatch({
        action: "appsDrawer",
        show: !this.state.showApps
      });
    });
    (0, _defineProperty2.default)(this, "onForgetClick", () => {
      _dispatcher.default.dispatch({
        action: 'forget_room',
        room_id: this.state.room.roomId
      });
    });
    (0, _defineProperty2.default)(this, "onRejectButtonClicked", () => {
      this.setState({
        rejecting: true
      });
      this.context.leave(this.state.roomId).then(() => {
        _dispatcher.default.dispatch({
          action: 'view_home_page'
        });

        this.setState({
          rejecting: false
        });
      }, error => {
        _logger.logger.error("Failed to reject invite: %s", error);

        const msg = error.message ? error.message : JSON.stringify(error);

        _Modal.default.createTrackedDialog('Failed to reject invite', '', _ErrorDialog.default, {
          title: (0, _languageHandler._t)("Failed to reject invite"),
          description: msg
        });

        this.setState({
          rejecting: false,
          rejectError: error
        });
      });
    });
    (0, _defineProperty2.default)(this, "onRejectAndIgnoreClick", async () => {
      this.setState({
        rejecting: true
      });

      try {
        const myMember = this.state.room.getMember(this.context.getUserId());
        const inviteEvent = myMember.events.member;
        const ignoredUsers = this.context.getIgnoredUsers();
        ignoredUsers.push(inviteEvent.getSender()); // de-duped internally in the js-sdk

        await this.context.setIgnoredUsers(ignoredUsers);
        await this.context.leave(this.state.roomId);

        _dispatcher.default.dispatch({
          action: 'view_home_page'
        });

        this.setState({
          rejecting: false
        });
      } catch (error) {
        _logger.logger.error("Failed to reject invite: %s", error);

        const msg = error.message ? error.message : JSON.stringify(error);

        _Modal.default.createTrackedDialog('Failed to reject invite', '', _ErrorDialog.default, {
          title: (0, _languageHandler._t)("Failed to reject invite"),
          description: msg
        });

        this.setState({
          rejecting: false,
          rejectError: error
        });
      }
    });
    (0, _defineProperty2.default)(this, "onRejectThreepidInviteButtonClicked", () => {
      // We can reject 3pid invites in the same way that we accept them,
      // using /leave rather than /join. In the short term though, we
      // just ignore them.
      // https://github.com/vector-im/vector-web/issues/1134
      _dispatcher.default.fire(_actions.Action.ViewRoomDirectory);
    });
    (0, _defineProperty2.default)(this, "onSearchClick", () => {
      this.setState({
        searching: !this.state.searching
      });
    });
    (0, _defineProperty2.default)(this, "onCancelSearchClick", () => {
      this.setState({
        searching: false,
        searchResults: null
      });
    });
    (0, _defineProperty2.default)(this, "jumpToLiveTimeline", () => {
      if (this.state.initialEventId && this.state.isInitialEventHighlighted) {
        // If we were viewing a highlighted event, firing view_room without
        // an event will take care of both clearing the URL fragment and
        // jumping to the bottom
        _dispatcher.default.dispatch({
          action: _actions.Action.ViewRoom,
          room_id: this.state.room.roomId
        });
      } else {
        // Otherwise we have to jump manually
        this.messagePanel.jumpToLiveTimeline();

        _dispatcher.default.fire(_actions.Action.FocusSendMessageComposer);
      }
    });
    (0, _defineProperty2.default)(this, "jumpToReadMarker", () => {
      this.messagePanel.jumpToReadMarker();
    });
    (0, _defineProperty2.default)(this, "forgetReadMarker", ev => {
      ev.stopPropagation();
      this.messagePanel.forgetReadMarker();
    });
    (0, _defineProperty2.default)(this, "updateTopUnreadMessagesBar", () => {
      if (!this.messagePanel) {
        return;
      }

      const showBar = this.messagePanel.canJumpToReadMarker();

      if (this.state.showTopUnreadMessagesBar != showBar) {
        this.setState({
          showTopUnreadMessagesBar: showBar
        });
      }
    });
    (0, _defineProperty2.default)(this, "onStatusBarVisible", () => {
      if (this.unmounted || this.state.statusBarVisible) return;
      this.setState({
        statusBarVisible: true
      });
    });
    (0, _defineProperty2.default)(this, "onStatusBarHidden", () => {
      // This is currently not desired as it is annoying if it keeps expanding and collapsing
      if (this.unmounted || !this.state.statusBarVisible) return;
      this.setState({
        statusBarVisible: false
      });
    });
    (0, _defineProperty2.default)(this, "handleScrollKey", ev => {
      let panel;

      if (this.searchResultsPanel.current) {
        panel = this.searchResultsPanel.current;
      } else if (this.messagePanel) {
        panel = this.messagePanel;
      }

      if (panel) {
        panel.handleScrollKey(ev);
      }
    });
    (0, _defineProperty2.default)(this, "gatherTimelinePanelRef", r => {
      this.messagePanel = r;
    });
    (0, _defineProperty2.default)(this, "onHiddenHighlightsClick", () => {
      const oldRoom = this.getOldRoom();
      if (!oldRoom) return;

      _dispatcher.default.dispatch({
        action: "view_room",
        room_id: oldRoom.roomId
      });
    });
    const llMembers = this.context.hasLazyLoadMembersEnabled();
    this.state = {
      roomId: null,
      roomLoading: true,
      peekLoading: false,
      shouldPeek: true,
      membersLoaded: !llMembers,
      numUnreadMessages: 0,
      draggingFile: false,
      searching: false,
      searchResults: null,
      callState: null,
      guestsCanJoin: false,
      canPeek: false,
      showApps: false,
      isPeeking: false,
      showRightPanel: _RightPanelStore.default.getSharedInstance().isOpenForRoom,
      joining: false,
      atEndOfLiveTimeline: true,
      atEndOfLiveTimelineInit: false,
      showTopUnreadMessagesBar: false,
      statusBarVisible: false,
      canReact: false,
      canReply: false,
      layout: _SettingsStore.default.getValue("layout"),
      lowBandwidth: _SettingsStore.default.getValue("lowBandwidth"),
      alwaysShowTimestamps: _SettingsStore.default.getValue("alwaysShowTimestamps"),
      showTwelveHourTimestamps: _SettingsStore.default.getValue("showTwelveHourTimestamps"),
      readMarkerInViewThresholdMs: _SettingsStore.default.getValue("readMarkerInViewThresholdMs"),
      readMarkerOutOfViewThresholdMs: _SettingsStore.default.getValue("readMarkerOutOfViewThresholdMs"),
      showHiddenEventsInTimeline: _SettingsStore.default.getValue("showHiddenEventsInTimeline"),
      showReadReceipts: true,
      showRedactions: true,
      showJoinLeaves: true,
      showAvatarChanges: true,
      showDisplaynameChanges: true,
      matrixClientIsReady: this.context && this.context.isInitialSyncComplete(),
      mainSplitContentType: MainSplitContentType.Timeline,
      dragCounter: 0,
      timelineRenderingType: _RoomContext.TimelineRenderingType.Room,
      liveTimeline: undefined
    };
    this.dispatcherRef = _dispatcher.default.register(this.onAction);
    this.context.on("Room", this.onRoom);
    this.context.on("Room.timeline", this.onRoomTimeline);
    this.context.on("Room.name", this.onRoomName);
    this.context.on("Room.accountData", this.onRoomAccountData);
    this.context.on("RoomState.events", this.onRoomStateEvents);
    this.context.on("RoomState.members", this.onRoomStateMember);
    this.context.on("Room.myMembership", this.onMyMembership);
    this.context.on("accountData", this.onAccountData);
    this.context.on("crypto.keyBackupStatus", this.onKeyBackupStatus);
    this.context.on("deviceVerificationChanged", this.onDeviceVerificationChanged);
    this.context.on("userTrustStatusChanged", this.onUserVerificationChanged);
    this.context.on("crossSigning.keysChanged", this.onCrossSigningKeysChanged);
    this.context.on("Event.decrypted", this.onEventDecrypted); // Start listening for RoomViewStore updates

    this.roomStoreToken = _RoomViewStore.default.addListener(this.onRoomViewStoreUpdate);
    this.rightPanelStoreToken = _RightPanelStore.default.getSharedInstance().addListener(this.onRightPanelStoreUpdate);

    _WidgetEchoStore.default.on(_AsyncStore.UPDATE_EVENT, this.onWidgetEchoStoreUpdate);

    _WidgetStore.default.instance.on(_AsyncStore.UPDATE_EVENT, this.onWidgetStoreUpdate);

    this.settingWatchers = [_SettingsStore.default.watchSetting("layout", null, (...[,,, value]) => this.setState({
      layout: value
    })), _SettingsStore.default.watchSetting("lowBandwidth", null, (...[,,, value]) => this.setState({
      lowBandwidth: value
    })), _SettingsStore.default.watchSetting("alwaysShowTimestamps", null, (...[,,, value]) => this.setState({
      alwaysShowTimestamps: value
    })), _SettingsStore.default.watchSetting("showTwelveHourTimestamps", null, (...[,,, value]) => this.setState({
      showTwelveHourTimestamps: value
    })), _SettingsStore.default.watchSetting("readMarkerInViewThresholdMs", null, (...[,,, value]) => this.setState({
      readMarkerInViewThresholdMs: value
    })), _SettingsStore.default.watchSetting("readMarkerOutOfViewThresholdMs", null, (...[,,, value]) => this.setState({
      readMarkerOutOfViewThresholdMs: value
    })), _SettingsStore.default.watchSetting("showHiddenEventsInTimeline", null, (...[,,, value]) => this.setState({
      showHiddenEventsInTimeline: value
    }))];
  }

  getPermalinkCreatorForRoom(room) {
    if (this.permalinkCreators[room.roomId]) return this.permalinkCreators[room.roomId];
    this.permalinkCreators[room.roomId] = new _Permalinks.RoomPermalinkCreator(room);

    if (this.state.room && room.roomId === this.state.room.roomId) {
      // We want to watch for changes in the creator for the primary room in the view, but
      // don't need to do so for search results.
      this.permalinkCreators[room.roomId].start();
    } else {
      this.permalinkCreators[room.roomId].load();
    }

    return this.permalinkCreators[room.roomId];
  }

  stopAllPermalinkCreators() {
    if (!this.permalinkCreators) return;

    for (const roomId of Object.keys(this.permalinkCreators)) {
      this.permalinkCreators[roomId].stop();
    }
  }

  setupRoom(room, roomId, joining, shouldPeek) {
    // if this is an unknown room then we're in one of three states:
    // - This is a room we can peek into (search engine) (we can /peek)
    // - This is a room we can publicly join or were invited to. (we can /join)
    // - This is a room we cannot join at all. (no action can help us)
    // We can't try to /join because this may implicitly accept invites (!)
    // We can /peek though. If it fails then we present the join UI. If it
    // succeeds then great, show the preview (but we still may be able to /join!).
    // Note that peeking works by room ID and room ID only, as opposed to joining
    // which must be by alias or invite wherever possible (peeking currently does
    // not work over federation).
    // NB. We peek if we have never seen the room before (i.e. js-sdk does not know
    // about it). We don't peek in the historical case where we were joined but are
    // now not joined because the js-sdk peeking API will clobber our historical room,
    // making it impossible to indicate a newly joined room.
    if (!joining && roomId) {
      if (!room && shouldPeek) {
        _logger.logger.info("Attempting to peek into room %s", roomId);

        this.setState({
          peekLoading: true,
          isPeeking: true // this will change to false if peeking fails

        });
        this.context.peekInRoom(roomId).then(room => {
          if (this.unmounted) {
            return;
          }

          this.setState({
            room: room,
            peekLoading: false
          });
          this.onRoomLoaded(room);
        }).catch(err => {
          if (this.unmounted) {
            return;
          } // Stop peeking if anything went wrong


          this.setState({
            isPeeking: false
          }); // This won't necessarily be a MatrixError, but we duck-type
          // here and say if it's got an 'errcode' key with the right value,
          // it means we can't peek.

          if (err.errcode === "M_GUEST_ACCESS_FORBIDDEN" || err.errcode === 'M_FORBIDDEN') {
            // This is fine: the room just isn't peekable (we assume).
            this.setState({
              peekLoading: false
            });
          } else {
            throw err;
          }
        });
      } else if (room) {
        // Stop peeking because we have joined this room previously
        this.context.stopPeeking();
        this.setState({
          isPeeking: false
        });
      }
    }
  }

  shouldShowApps(room) {
    if (!BROWSER_SUPPORTS_SANDBOX || !room) return false; // Check if user has previously chosen to hide the app drawer for this
    // room. If so, do not show apps

    const hideWidgetKey = room.roomId + "_hide_widget_drawer";
    const hideWidgetDrawer = localStorage.getItem(hideWidgetKey); // If unset show the Tray
    // Otherwise (in case the user set hideWidgetDrawer by clicking the button) follow the parameter.

    const isManuallyShown = hideWidgetDrawer ? hideWidgetDrawer === "false" : true;

    const widgets = _WidgetLayoutStore.WidgetLayoutStore.instance.getContainerWidgets(room, _WidgetLayoutStore.Container.Top);

    return isManuallyShown && widgets.length > 0;
  }

  componentDidMount() {
    this.onRoomViewStoreUpdate(true);
    const call = this.getCallForRoom();
    const callState = call ? call.state : null;
    this.setState({
      callState: callState
    });
    window.addEventListener('beforeunload', this.onPageUnload);
  }

  shouldComponentUpdate(nextProps, nextState) {
    const hasPropsDiff = (0, _objects.objectHasDiff)(this.props, nextProps);
    const _this$state = this.state,
          {
      upgradeRecommendation
    } = _this$state,
          state = (0, _objectWithoutProperties2.default)(_this$state, _excluded);
    const {
      upgradeRecommendation: newUpgradeRecommendation
    } = nextState,
          newState = (0, _objectWithoutProperties2.default)(nextState, _excluded2);
    const hasStateDiff = (newUpgradeRecommendation === null || newUpgradeRecommendation === void 0 ? void 0 : newUpgradeRecommendation.needsUpgrade) !== (upgradeRecommendation === null || upgradeRecommendation === void 0 ? void 0 : upgradeRecommendation.needsUpgrade) || (0, _objects.objectHasDiff)(state, newState);
    return hasPropsDiff || hasStateDiff;
  }

  componentDidUpdate() {
    if (this.roomView.current) {
      const roomView = this.roomView.current;

      if (!roomView.ondrop) {
        roomView.addEventListener('drop', this.onDrop);
        roomView.addEventListener('dragover', this.onDragOver);
        roomView.addEventListener('dragenter', this.onDragEnter);
        roomView.addEventListener('dragleave', this.onDragLeave);
      }
    } // Note: We check the ref here with a flag because componentDidMount, despite
    // documentation, does not define our messagePanel ref. It looks like our spinner
    // in render() prevents the ref from being set on first mount, so we try and
    // catch the messagePanel when it does mount. Because we only want the ref once,
    // we use a boolean flag to avoid duplicate work.


    if (this.messagePanel && !this.state.atEndOfLiveTimelineInit) {
      this.setState({
        atEndOfLiveTimelineInit: true,
        atEndOfLiveTimeline: this.messagePanel.isAtEndOfLiveTimeline()
      });
    }
  }

  componentWillUnmount() {
    // set a boolean to say we've been unmounted, which any pending
    // promises can use to throw away their results.
    //
    // (We could use isMounted, but facebook have deprecated that.)
    this.unmounted = true; // update the scroll map before we get unmounted

    if (this.state.roomId) {
      _RoomScrollStateStore.default.setScrollState(this.state.roomId, this.getScrollState());
    }

    if (this.state.shouldPeek) {
      this.context.stopPeeking();
    } // stop tracking room changes to format permalinks


    this.stopAllPermalinkCreators();

    if (this.roomView.current) {
      // disconnect the D&D event listeners from the room view. This
      // is really just for hygiene - we're going to be
      // deleted anyway, so it doesn't matter if the event listeners
      // don't get cleaned up.
      const roomView = this.roomView.current;
      roomView.removeEventListener('drop', this.onDrop);
      roomView.removeEventListener('dragover', this.onDragOver);
      roomView.removeEventListener('dragenter', this.onDragEnter);
      roomView.removeEventListener('dragleave', this.onDragLeave);
    }

    _dispatcher.default.unregister(this.dispatcherRef);

    if (this.context) {
      this.context.removeListener("Room", this.onRoom);
      this.context.removeListener("Room.timeline", this.onRoomTimeline);
      this.context.removeListener("Room.name", this.onRoomName);
      this.context.removeListener("Room.accountData", this.onRoomAccountData);
      this.context.removeListener("RoomState.events", this.onRoomStateEvents);
      this.context.removeListener("Room.myMembership", this.onMyMembership);
      this.context.removeListener("RoomState.members", this.onRoomStateMember);
      this.context.removeListener("accountData", this.onAccountData);
      this.context.removeListener("crypto.keyBackupStatus", this.onKeyBackupStatus);
      this.context.removeListener("deviceVerificationChanged", this.onDeviceVerificationChanged);
      this.context.removeListener("userTrustStatusChanged", this.onUserVerificationChanged);
      this.context.removeListener("crossSigning.keysChanged", this.onCrossSigningKeysChanged);
      this.context.removeListener("Event.decrypted", this.onEventDecrypted);
    }

    window.removeEventListener('beforeunload', this.onPageUnload); // Remove RoomStore listener

    if (this.roomStoreToken) {
      this.roomStoreToken.remove();
    } // Remove RightPanelStore listener


    if (this.rightPanelStoreToken) {
      this.rightPanelStoreToken.remove();
    }

    _WidgetEchoStore.default.removeListener(_AsyncStore.UPDATE_EVENT, this.onWidgetEchoStoreUpdate);

    _WidgetStore.default.instance.removeListener(_AsyncStore.UPDATE_EVENT, this.onWidgetStoreUpdate);

    if (this.state.room) {
      _WidgetLayoutStore.WidgetLayoutStore.instance.off(_WidgetLayoutStore.WidgetLayoutStore.emissionForRoom(this.state.room), this.onWidgetLayoutChange);
    } // cancel any pending calls to the throttled updated


    this.updateRoomMembers.cancel();

    for (const watcher of this.settingWatchers) {
      _SettingsStore.default.unwatchSetting(watcher);
    }
  }

  async calculateRecommendedVersion(room) {
    const upgradeRecommendation = await room.getRecommendedVersion();
    if (this.unmounted) return;
    this.setState({
      upgradeRecommendation
    });
  }

  async loadMembersIfJoined(room) {
    // lazy load members if enabled
    if (this.context.hasLazyLoadMembersEnabled()) {
      if (room && room.getMyMembership() === 'join') {
        try {
          await room.loadMembersIfNeeded();

          if (!this.unmounted) {
            this.setState({
              membersLoaded: true
            });
          }
        } catch (err) {
          const errorMessage = `Fetching room members for ${room.roomId} failed.` + " Room members will appear incomplete.";

          _logger.logger.error(errorMessage);

          _logger.logger.error(err);
        }
      }
    }
  }

  calculatePeekRules(room) {
    const guestAccessEvent = room.currentState.getStateEvents("m.room.guest_access", "");

    if (guestAccessEvent && guestAccessEvent.getContent().guest_access === "can_join") {
      this.setState({
        guestsCanJoin: true
      });
    }

    const historyVisibility = room.currentState.getStateEvents("m.room.history_visibility", "");

    if (historyVisibility && historyVisibility.getContent().history_visibility === "world_readable") {
      this.setState({
        canPeek: true
      });
    }
  }

  updatePreviewUrlVisibility({
    roomId
  }) {
    // URL Previews in E2EE rooms can be a privacy leak so use a different setting which is per-room explicit
    const key = this.context.isRoomEncrypted(roomId) ? 'urlPreviewsEnabled_e2ee' : 'urlPreviewsEnabled';
    this.setState({
      showUrlPreview: _SettingsStore.default.getValue(key, roomId)
    });
  }

  async updateE2EStatus(room) {
    if (!this.context.isRoomEncrypted(room.roomId)) return; // If crypto is not currently enabled, we aren't tracking devices at all,
    // so we don't know what the answer is. Let's error on the safe side and show
    // a warning for this case.

    let e2eStatus = _ShieldUtils.E2EStatus.Warning;

    if (this.context.isCryptoEnabled()) {
      /* At this point, the user has encryption on and cross-signing on */
      e2eStatus = await (0, _ShieldUtils.shieldStatusForRoom)(this.context, room);
    }

    if (this.unmounted) return;
    this.setState({
      e2eStatus
    });
  }

  updatePermissions(room) {
    if (room) {
      const me = this.context.getUserId();
      const canReact = room.getMyMembership() === "join" && room.currentState.maySendEvent("m.reaction", me);
      const canReply = room.maySendMessage();
      this.setState({
        canReact,
        canReply
      });
    }
  } // rate limited because a power level change will emit an event for every member in the room.


  checkDesktopNotifications() {
    const memberCount = this.state.room.getJoinedMemberCount() + this.state.room.getInvitedMemberCount(); // if they are not alone prompt the user about notifications so they don't miss replies

    if (memberCount > 1 && _Notifier.default.shouldShowPrompt()) {
      (0, _DesktopNotificationsToast.showToast)(true);
    }
  }

  updateDMState() {
    const room = this.state.room;

    if (room.getMyMembership() != "join") {
      return;
    }

    const dmInviter = room.getDMInviter();

    if (dmInviter) {
      Rooms.setDMRoom(room.roomId, dmInviter);
    }
  }

  injectSticker(url, info, text) {
    if (this.context.isGuest()) {
      _dispatcher.default.dispatch({
        action: 'require_registration'
      });

      return;
    }

    _ContentMessages.default.sharedInstance().sendStickerContentToRoom(url, this.state.room.roomId, info, text, this.context).then(undefined, error => {
      if (error.name === "UnknownDeviceError") {
        // Let the staus bar handle this
        return;
      }
    });
  }

  handleSearchResult(searchPromise) {
    // keep a record of the current search id, so that if the search terms
    // change before we get a response, we can ignore the results.
    const localSearchId = this.searchId;
    this.setState({
      searchInProgress: true
    });
    return searchPromise.then(results => {
      debuglog("search complete");

      if (this.unmounted || !this.state.searching || this.searchId != localSearchId) {
        _logger.logger.error("Discarding stale search results");

        return false;
      } // postgres on synapse returns us precise details of the strings
      // which actually got matched for highlighting.
      //
      // In either case, we want to highlight the literal search term
      // whether it was used by the search engine or not.


      let highlights = results.highlights;

      if (highlights.indexOf(this.state.searchTerm) < 0) {
        highlights = highlights.concat(this.state.searchTerm);
      } // For overlapping highlights,
      // favour longer (more specific) terms first


      highlights = highlights.sort(function (a, b) {
        return b.length - a.length;
      });
      this.setState({
        searchHighlights: highlights,
        searchResults: results
      });
    }, error => {
      _logger.logger.error("Search failed", error);

      _Modal.default.createTrackedDialog('Search failed', '', _ErrorDialog.default, {
        title: (0, _languageHandler._t)("Search failed"),
        description: error && error.message ? error.message : (0, _languageHandler._t)("Server may be unavailable, overloaded, or search timed out :(")
      });

      return false;
    }).finally(() => {
      this.setState({
        searchInProgress: false
      });
    });
  }

  getSearchResultTiles() {
    // XXX: todo: merge overlapping results somehow?
    // XXX: why doesn't searching on name work?
    const ret = [];

    if (this.state.searchInProgress) {
      ret.push( /*#__PURE__*/_react.default.createElement("li", {
        key: "search-spinner"
      }, /*#__PURE__*/_react.default.createElement(_Spinner.default, null)));
    }

    if (!this.state.searchResults.next_batch) {
      var _this$state$searchRes, _this$state$searchRes2;

      if (!((_this$state$searchRes = this.state.searchResults) !== null && _this$state$searchRes !== void 0 && (_this$state$searchRes2 = _this$state$searchRes.results) !== null && _this$state$searchRes2 !== void 0 && _this$state$searchRes2.length)) {
        ret.push( /*#__PURE__*/_react.default.createElement("li", {
          key: "search-top-marker"
        }, /*#__PURE__*/_react.default.createElement("h2", {
          className: "mx_RoomView_topMarker"
        }, (0, _languageHandler._t)("No results"))));
      } else {
        ret.push( /*#__PURE__*/_react.default.createElement("li", {
          key: "search-top-marker"
        }, /*#__PURE__*/_react.default.createElement("h2", {
          className: "mx_RoomView_topMarker"
        }, (0, _languageHandler._t)("No more results"))));
      }
    } // once dynamic content in the search results load, make the scrollPanel check
    // the scroll offsets.


    const onHeightChanged = () => {
      const scrollPanel = this.searchResultsPanel.current;

      if (scrollPanel) {
        scrollPanel.checkScroll();
      }
    };

    let lastRoomId;

    for (let i = (((_this$state$searchRes3 = this.state.searchResults) === null || _this$state$searchRes3 === void 0 ? void 0 : (_this$state$searchRes4 = _this$state$searchRes3.results) === null || _this$state$searchRes4 === void 0 ? void 0 : _this$state$searchRes4.length) || 0) - 1; i >= 0; i--) {
      var _this$state$searchRes3, _this$state$searchRes4;

      const result = this.state.searchResults.results[i];
      const mxEv = result.context.getEvent();
      const roomId = mxEv.getRoomId();
      const room = this.context.getRoom(roomId);

      if (!room) {
        // if we do not have the room in js-sdk stores then hide it as we cannot easily show it
        // As per the spec, an all rooms search can create this condition,
        // it happens with Seshat but not Synapse.
        // It will make the result count not match the displayed count.
        _logger.logger.log("Hiding search result from an unknown room", roomId);

        continue;
      }

      if (!(0, _EventTile.haveTileForEvent)(mxEv, this.state.showHiddenEventsInTimeline)) {
        // XXX: can this ever happen? It will make the result count
        // not match the displayed count.
        continue;
      }

      if (this.state.searchScope === 'All') {
        if (roomId !== lastRoomId) {
          ret.push( /*#__PURE__*/_react.default.createElement("li", {
            key: mxEv.getId() + "-room"
          }, /*#__PURE__*/_react.default.createElement("h2", null, (0, _languageHandler._t)("Room"), ": ", room.name)));
          lastRoomId = roomId;
        }
      }

      const resultLink = "#/room/" + roomId + "/" + mxEv.getId();
      ret.push( /*#__PURE__*/_react.default.createElement(_SearchResultTile.default, {
        key: mxEv.getId(),
        searchResult: result,
        searchHighlights: this.state.searchHighlights,
        resultLink: resultLink,
        permalinkCreator: this.getPermalinkCreatorForRoom(room),
        onHeightChanged: onHeightChanged
      }));
    }

    return ret;
  }

  // get the current scroll position of the room, so that it can be
  // restored when we switch back to it.
  //
  getScrollState() {
    const messagePanel = this.messagePanel;
    if (!messagePanel) return null; // if we're following the live timeline, we want to return null; that
    // means that, if we switch back, we will jump to the read-up-to mark.
    //
    // That should be more intuitive than slavishly preserving the current
    // scroll state, in the case where the room advances in the meantime
    // (particularly in the case that the user reads some stuff on another
    // device).
    //

    if (this.state.atEndOfLiveTimeline) {
      return null;
    }

    const scrollState = messagePanel.getScrollState(); // getScrollState on TimelinePanel *may* return null, so guard against that

    if (!scrollState || scrollState.stuckAtBottom) {
      // we don't really expect to be in this state, but it will
      // occasionally happen when no scroll state has been set on the
      // messagePanel (ie, we didn't have an initial event (so it's
      // probably a new room), there has been no user-initiated scroll, and
      // no read-receipts have arrived to update the scroll position).
      //
      // Return null, which will cause us to scroll to last unread on
      // reload.
      return null;
    }

    return {
      focussedEvent: scrollState.trackedScrollToken,
      pixelOffset: scrollState.pixelOffset
    };
  }

  /**
   * get any current call for this room
   */
  getCallForRoom() {
    if (!this.state.room) {
      return null;
    }

    return _CallHandler.default.sharedInstance().getCallForRoom(this.state.room.roomId);
  } // this has to be a proper method rather than an unnamed function,
  // otherwise react calls it with null on each update.


  getOldRoom() {
    const createEvent = this.state.room.currentState.getStateEvents("m.room.create", "");
    if (!createEvent || !createEvent.getContent()['predecessor']) return null;
    return this.context.getRoom(createEvent.getContent()['predecessor']['room_id']);
  }

  getHiddenHighlightCount() {
    const oldRoom = this.getOldRoom();
    if (!oldRoom) return 0;
    return oldRoom.getUnreadNotificationCount('highlight');
  }

  render() {
    var _this$state$room3;

    if (!this.state.room) {
      const loading = !this.state.matrixClientIsReady || this.state.roomLoading || this.state.peekLoading;

      if (loading) {
        // Assume preview loading if we don't have a ready client or a room ID (still resolving the alias)
        const previewLoading = !this.state.matrixClientIsReady || !this.state.roomId || this.state.peekLoading;
        return /*#__PURE__*/_react.default.createElement("div", {
          className: "mx_RoomView"
        }, /*#__PURE__*/_react.default.createElement(_ErrorBoundary.default, null, /*#__PURE__*/_react.default.createElement(_RoomPreviewBar.default, {
          canPreview: false,
          previewLoading: previewLoading && !this.state.roomLoadError,
          error: this.state.roomLoadError,
          loading: loading,
          joining: this.state.joining,
          oobData: this.props.oobData
        })));
      } else {
        var _this$props$threepidI2, _this$props$threepidI3;

        let inviterName = undefined;

        if (this.props.oobData) {
          inviterName = this.props.oobData.inviterName;
        }

        const invitedEmail = (_this$props$threepidI2 = this.props.threepidInvite) === null || _this$props$threepidI2 === void 0 ? void 0 : _this$props$threepidI2.toEmail; // We have no room object for this room, only the ID.
        // We've got to this room by following a link, possibly a third party invite.

        const roomAlias = this.state.roomAlias;
        return /*#__PURE__*/_react.default.createElement("div", {
          className: "mx_RoomView"
        }, /*#__PURE__*/_react.default.createElement(_ErrorBoundary.default, null, /*#__PURE__*/_react.default.createElement(_RoomPreviewBar.default, {
          onJoinClick: this.onJoinButtonClicked,
          onForgetClick: this.onForgetClick,
          onRejectClick: this.onRejectThreepidInviteButtonClicked,
          canPreview: false,
          error: this.state.roomLoadError,
          roomAlias: roomAlias,
          joining: this.state.joining,
          inviterName: inviterName,
          invitedEmail: invitedEmail,
          oobData: this.props.oobData,
          signUrl: (_this$props$threepidI3 = this.props.threepidInvite) === null || _this$props$threepidI3 === void 0 ? void 0 : _this$props$threepidI3.signUrl,
          room: this.state.room
        })));
      }
    }

    const myMembership = this.state.room.getMyMembership(); // SpaceRoomView handles invites itself

    if (myMembership === "invite" && (!_SpaceStore.default.spacesEnabled || !this.state.room.isSpaceRoom())) {
      if (this.state.joining || this.state.rejecting) {
        return /*#__PURE__*/_react.default.createElement(_ErrorBoundary.default, null, /*#__PURE__*/_react.default.createElement(_RoomPreviewBar.default, {
          canPreview: false,
          error: this.state.roomLoadError,
          joining: this.state.joining,
          rejecting: this.state.rejecting
        }));
      } else {
        const myUserId = this.context.credentials.userId;
        const myMember = this.state.room.getMember(myUserId);
        const inviteEvent = myMember ? myMember.events.member : null;
        let inviterName = (0, _languageHandler._t)("Unknown");

        if (inviteEvent) {
          inviterName = inviteEvent.sender ? inviteEvent.sender.name : inviteEvent.getSender();
        } // We deliberately don't try to peek into invites, even if we have permission to peek
        // as they could be a spam vector.
        // XXX: in future we could give the option of a 'Preview' button which lets them view anyway.
        // We have a regular invite for this room.


        return /*#__PURE__*/_react.default.createElement("div", {
          className: "mx_RoomView"
        }, /*#__PURE__*/_react.default.createElement(_ErrorBoundary.default, null, /*#__PURE__*/_react.default.createElement(_RoomPreviewBar.default, {
          onJoinClick: this.onJoinButtonClicked,
          onForgetClick: this.onForgetClick,
          onRejectClick: this.onRejectButtonClicked,
          onRejectAndIgnoreClick: this.onRejectAndIgnoreClick,
          inviterName: inviterName,
          canPreview: false,
          joining: this.state.joining,
          room: this.state.room
        })));
      }
    }

    let fileDropTarget = null;

    if (this.state.draggingFile) {
      fileDropTarget = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_RoomView_fileDropTarget"
      }, /*#__PURE__*/_react.default.createElement("img", {
        src: require("../../../res/img/upload-big.svg"),
        className: "mx_RoomView_fileDropTarget_image"
      }), (0, _languageHandler._t)("Drop file here to upload"));
    } // We have successfully loaded this room, and are not previewing.
    // Display the "normal" room view.


    let activeCall = null;
    {
      // New block because this variable doesn't need to hang around for the rest of the function
      const call = this.getCallForRoom();

      if (call && this.state.callState !== 'ended' && this.state.callState !== 'ringing') {
        activeCall = call;
      }
    }
    const scrollheaderClasses = (0, _classnames.default)({
      mx_RoomView_scrollheader: true
    });
    let statusBar;
    let isStatusAreaExpanded = true;

    if (_ContentMessages.default.sharedInstance().getCurrentUploads().length > 0) {
      statusBar = /*#__PURE__*/_react.default.createElement(_UploadBar.default, {
        room: this.state.room
      });
    } else if (!this.state.searchResults) {
      isStatusAreaExpanded = this.state.statusBarVisible;
      statusBar = /*#__PURE__*/_react.default.createElement(_RoomStatusBar.default, {
        room: this.state.room,
        isPeeking: myMembership !== "join",
        onInviteClick: this.onInviteButtonClick,
        onVisible: this.onStatusBarVisible,
        onHidden: this.onStatusBarHidden
      });
    }

    const statusBarAreaClass = (0, _classnames.default)("mx_RoomView_statusArea", {
      "mx_RoomView_statusArea_expanded": isStatusAreaExpanded
    }); // if statusBar does not exist then statusBarArea is blank and takes up unnecessary space on the screen
    // show statusBarArea only if statusBar is present

    const statusBarArea = statusBar && /*#__PURE__*/_react.default.createElement("div", {
      className: statusBarAreaClass
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_RoomView_statusAreaBox"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_RoomView_statusAreaBox_line"
    }), statusBar));

    const roomVersionRecommendation = this.state.upgradeRecommendation;
    const showRoomUpgradeBar = roomVersionRecommendation && roomVersionRecommendation.needsUpgrade && this.state.room.userMayUpgradeRoom(this.context.credentials.userId);
    const hiddenHighlightCount = this.getHiddenHighlightCount();
    let aux = null;
    let previewBar;

    if (this.state.searching) {
      aux = /*#__PURE__*/_react.default.createElement(_SearchBar.default, {
        searchInProgress: this.state.searchInProgress,
        onCancelClick: this.onCancelSearchClick,
        onSearch: this.onSearch,
        isRoomEncrypted: this.context.isRoomEncrypted(this.state.room.roomId)
      });
    } else if (showRoomUpgradeBar) {
      aux = /*#__PURE__*/_react.default.createElement(_RoomUpgradeWarningBar.default, {
        room: this.state.room
      });
    } else if (myMembership !== "join") {
      var _this$props$threepidI4, _this$state$room2;

      // We do have a room object for this room, but we're not currently in it.
      // We may have a 3rd party invite to it.
      let inviterName = undefined;

      if (this.props.oobData) {
        inviterName = this.props.oobData.inviterName;
      }

      const invitedEmail = (_this$props$threepidI4 = this.props.threepidInvite) === null || _this$props$threepidI4 === void 0 ? void 0 : _this$props$threepidI4.toEmail;
      previewBar = /*#__PURE__*/_react.default.createElement(_RoomPreviewBar.default, {
        onJoinClick: this.onJoinButtonClicked,
        onForgetClick: this.onForgetClick,
        onRejectClick: this.onRejectThreepidInviteButtonClicked,
        joining: this.state.joining,
        inviterName: inviterName,
        invitedEmail: invitedEmail,
        oobData: this.props.oobData,
        canPreview: this.state.canPeek,
        room: this.state.room
      });

      if (!this.state.canPeek && (!_SpaceStore.default.spacesEnabled || !((_this$state$room2 = this.state.room) !== null && _this$state$room2 !== void 0 && _this$state$room2.isSpaceRoom()))) {
        return /*#__PURE__*/_react.default.createElement("div", {
          className: "mx_RoomView"
        }, previewBar);
      }
    } else if (hiddenHighlightCount > 0) {
      aux = /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        element: "div",
        className: "mx_RoomView_auxPanel_hiddenHighlights",
        onClick: this.onHiddenHighlightsClick
      }, (0, _languageHandler._t)("You have %(count)s unread notifications in a prior version of this room.", {
        count: hiddenHighlightCount
      }));
    }

    if ((_this$state$room3 = this.state.room) !== null && _this$state$room3 !== void 0 && _this$state$room3.isSpaceRoom() && !this.props.forceTimeline) {
      return /*#__PURE__*/_react.default.createElement(_SpaceRoomView.default, {
        space: this.state.room,
        justCreatedOpts: this.props.justCreatedOpts,
        resizeNotifier: this.props.resizeNotifier,
        onJoinButtonClicked: this.onJoinButtonClicked,
        onRejectButtonClicked: this.props.threepidInvite ? this.onRejectThreepidInviteButtonClicked : this.onRejectButtonClicked
      });
    }

    const auxPanel = /*#__PURE__*/_react.default.createElement(_AuxPanel.default, {
      room: this.state.room,
      userId: this.context.credentials.userId,
      showApps: this.state.showApps,
      resizeNotifier: this.props.resizeNotifier
    }, aux);

    let messageComposer;
    let searchInfo;
    const canSpeak = // joined and not showing search results
    myMembership === 'join' && !this.state.searchResults;

    if (canSpeak) {
      messageComposer = /*#__PURE__*/_react.default.createElement(_MessageComposer.default, {
        room: this.state.room,
        e2eStatus: this.state.e2eStatus,
        resizeNotifier: this.props.resizeNotifier,
        replyToEvent: this.state.replyToEvent,
        permalinkCreator: this.getPermalinkCreatorForRoom(this.state.room)
      });
    } // TODO: Why aren't we storing the term/scope/count in this format
    // in this.state if this is what RoomHeader desires?


    if (this.state.searchResults) {
      searchInfo = {
        searchTerm: this.state.searchTerm,
        searchScope: this.state.searchScope,
        searchCount: this.state.searchResults.count
      };
    } // if we have search results, we keep the messagepanel (so that it preserves its
    // scroll state), but hide it.


    let searchResultsPanel;
    let hideMessagePanel = false;

    if (this.state.searchResults) {
      // show searching spinner
      if (this.state.searchResults.count === undefined) {
        searchResultsPanel = /*#__PURE__*/_react.default.createElement("div", {
          className: "mx_RoomView_messagePanel mx_RoomView_messagePanelSearchSpinner"
        });
      } else {
        searchResultsPanel = /*#__PURE__*/_react.default.createElement(_ScrollPanel.default, {
          ref: this.searchResultsPanel,
          className: "mx_RoomView_messagePanel mx_RoomView_searchResultsPanel mx_GroupLayout",
          onFillRequest: this.onSearchResultsFillRequest,
          resizeNotifier: this.props.resizeNotifier
        }, /*#__PURE__*/_react.default.createElement("li", {
          className: scrollheaderClasses
        }), this.getSearchResultTiles());
      }

      hideMessagePanel = true;
    }

    let highlightedEventId = null;

    if (this.state.isInitialEventHighlighted) {
      highlightedEventId = this.state.initialEventId;
    }

    const messagePanelClassNames = (0, _classnames.default)("mx_RoomView_messagePanel", {
      "mx_IRCLayout": this.state.layout == _Layout.Layout.IRC,
      "mx_GroupLayout": this.state.layout == _Layout.Layout.Group
    }); // console.info("ShowUrlPreview for %s is %s", this.state.room.roomId, this.state.showUrlPreview);

    const messagePanel = /*#__PURE__*/_react.default.createElement(_TimelinePanel.default, {
      ref: this.gatherTimelinePanelRef,
      timelineSet: this.state.room.getUnfilteredTimelineSet(),
      showReadReceipts: this.state.showReadReceipts,
      manageReadReceipts: !this.state.isPeeking,
      sendReadReceiptOnLoad: !this.state.wasContextSwitch,
      manageReadMarkers: !this.state.isPeeking,
      hidden: hideMessagePanel,
      highlightedEventId: highlightedEventId,
      eventId: this.state.initialEventId,
      eventPixelOffset: this.state.initialEventPixelOffset,
      onScroll: this.onMessageListScroll,
      onUserScroll: this.onUserScroll,
      onReadMarkerUpdated: this.updateTopUnreadMessagesBar,
      showUrlPreview: this.state.showUrlPreview,
      className: messagePanelClassNames,
      membersLoaded: this.state.membersLoaded,
      permalinkCreator: this.getPermalinkCreatorForRoom(this.state.room),
      resizeNotifier: this.props.resizeNotifier,
      showReactions: true,
      layout: this.state.layout,
      editState: this.state.editState
    });

    let topUnreadMessagesBar = null; // Do not show TopUnreadMessagesBar if we have search results showing, it makes no sense

    if (this.state.showTopUnreadMessagesBar && !this.state.searchResults) {
      topUnreadMessagesBar = /*#__PURE__*/_react.default.createElement(_TopUnreadMessagesBar.default, {
        onScrollUpClick: this.jumpToReadMarker,
        onCloseClick: this.forgetReadMarker
      });
    }

    let jumpToBottom; // Do not show JumpToBottomButton if we have search results showing, it makes no sense

    if (!this.state.atEndOfLiveTimeline && !this.state.searchResults) {
      jumpToBottom = /*#__PURE__*/_react.default.createElement(_JumpToBottomButton.default, {
        highlight: this.state.room.getUnreadNotificationCount(_room.NotificationCountType.Highlight) > 0,
        numUnreadMessages: this.state.numUnreadMessages,
        onScrollToBottomClick: this.jumpToLiveTimeline
      });
    }

    const showRightPanel = this.state.room && this.state.showRightPanel;
    const rightPanel = showRightPanel ? /*#__PURE__*/_react.default.createElement(_RightPanel.default, {
      room: this.state.room,
      resizeNotifier: this.props.resizeNotifier,
      permalinkCreator: this.getPermalinkCreatorForRoom(this.state.room),
      e2eStatus: this.state.e2eStatus
    }) : null;
    const timelineClasses = (0, _classnames.default)("mx_RoomView_timeline", {
      mx_RoomView_timeline_rr_enabled: this.state.showReadReceipts
    });
    const mainClasses = (0, _classnames.default)("mx_RoomView", {
      mx_RoomView_inCall: Boolean(activeCall)
    });

    const showChatEffects = _SettingsStore.default.getValue('showChatEffects'); // Decide what to show in the main split


    let mainSplitBody = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, auxPanel, /*#__PURE__*/_react.default.createElement("div", {
      className: timelineClasses
    }, fileDropTarget, topUnreadMessagesBar, jumpToBottom, messagePanel, searchResultsPanel), statusBarArea, previewBar, messageComposer);

    switch (this.state.mainSplitContentType) {
      case MainSplitContentType.Timeline:
        // keep the timeline in as the mainSplitBody
        break;

      case MainSplitContentType.MaximisedWidget:
        if (!_SettingsStore.default.getValue("feature_maximised_widgets")) break;
        mainSplitBody = /*#__PURE__*/_react.default.createElement(_AppsDrawer.default, {
          room: this.state.room,
          userId: this.context.credentials.userId,
          resizeNotifier: this.props.resizeNotifier,
          showApps: true
        });
        break;
      // TODO-video MainSplitContentType.Video:
      //     break;
    }

    let excludedRightPanelPhaseButtons = [_RightPanelStorePhases.RightPanelPhases.Timeline];
    let onAppsClick = this.onAppsClick;
    let onForgetClick = this.onForgetClick;
    let onSearchClick = this.onSearchClick;

    if (this.state.mainSplitContentType === MainSplitContentType.MaximisedWidget) {
      // Disable phase buttons and action button to have a simplified header when a widget is maximised
      // and enable (not disable) the RightPanelPhases.Timeline button
      excludedRightPanelPhaseButtons = [_RightPanelStorePhases.RightPanelPhases.ThreadPanel, _RightPanelStorePhases.RightPanelPhases.PinnedMessages];
      onAppsClick = null;
      onForgetClick = null;
      onSearchClick = null;
    }

    return /*#__PURE__*/_react.default.createElement(_RoomContext.default.Provider, {
      value: this.state
    }, /*#__PURE__*/_react.default.createElement("main", {
      className: mainClasses,
      ref: this.roomView,
      onKeyDown: this.onReactKeyDown
    }, showChatEffects && this.roomView.current && /*#__PURE__*/_react.default.createElement(_EffectsOverlay.default, {
      roomWidth: this.roomView.current.offsetWidth
    }), /*#__PURE__*/_react.default.createElement(_ErrorBoundary.default, null, /*#__PURE__*/_react.default.createElement(_RoomHeader.default, {
      room: this.state.room,
      searchInfo: searchInfo,
      oobData: this.props.oobData,
      inRoom: myMembership === 'join',
      onSearchClick: onSearchClick,
      onForgetClick: myMembership === "leave" ? onForgetClick : null,
      e2eStatus: this.state.e2eStatus,
      onAppsClick: this.state.hasPinnedWidgets ? onAppsClick : null,
      appsShown: this.state.showApps,
      onCallPlaced: this.onCallPlaced,
      excludedRightPanelPhaseButtons: excludedRightPanelPhaseButtons
    }), /*#__PURE__*/_react.default.createElement(_MainSplit.default, {
      panel: rightPanel,
      resizeNotifier: this.props.resizeNotifier
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_RoomView_body"
    }, mainSplitBody)))));
  }

}, (0, _defineProperty2.default)(_class2, "contextType", _MatrixClientContext.default), _temp)) || _class);
exports.RoomView = RoomView;
const RoomViewWithMatrixClient = (0, _MatrixClientContext.withMatrixClientHOC)(RoomView);
var _default = RoomViewWithMatrixClient;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,