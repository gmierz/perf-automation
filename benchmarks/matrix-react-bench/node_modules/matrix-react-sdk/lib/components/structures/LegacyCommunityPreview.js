"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _MatrixClientContext = _interopRequireDefault(require("../../contexts/MatrixClientContext"));

var _languageHandler = require("../../languageHandler");

var _AccessibleButton = _interopRequireDefault(require("../views/elements/AccessibleButton"));

var _ErrorBoundary = _interopRequireDefault(require("../views/elements/ErrorBoundary"));

var _useAsyncMemo = require("../../hooks/useAsyncMemo");

var _Spinner = _interopRequireDefault(require("../views/elements/Spinner"));

var _GroupAvatar = _interopRequireDefault(require("../views/avatars/GroupAvatar"));

var _HtmlUtils = require("../../HtmlUtils");

var _dispatcher = _interopRequireDefault(require("../../dispatcher/dispatcher"));

var _actions = require("../../dispatcher/actions");

var _UserSettingsDialog = require("../views/dialogs/UserSettingsDialog");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
Copyright 2021 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const onSwapClick = () => {
  _dispatcher.default.dispatch({
    action: _actions.Action.ViewUserSettings,
    initialTabId: _UserSettingsDialog.UserTab.Preferences
  });
}; // XXX: temporary community migration component, reuses SpaceRoomView & SpacePreview classes for simplicity


const LegacyCommunityPreview = ({
  groupId
}) => {
  var _groupSummary$user;

  const cli = (0, _react.useContext)(_MatrixClientContext.default);
  const groupSummary = (0, _useAsyncMemo.useAsyncMemo)(() => cli.getGroupSummary(groupId), [cli, groupId]);

  if (!groupSummary) {
    return /*#__PURE__*/_react.default.createElement("main", {
      className: "mx_SpaceRoomView"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_MainSplit"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SpaceRoomView_preview"
    }, /*#__PURE__*/_react.default.createElement(_Spinner.default, null))));
  }

  let visibilitySection;

  if (groupSummary.profile.is_public) {
    visibilitySection = /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_SpaceRoomView_info_public"
    }, (0, _languageHandler._t)("Public community"));
  } else {
    visibilitySection = /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_SpaceRoomView_info_private"
    }, (0, _languageHandler._t)("Private community"));
  }

  return /*#__PURE__*/_react.default.createElement("main", {
    className: "mx_SpaceRoomView"
  }, /*#__PURE__*/_react.default.createElement(_ErrorBoundary.default, null, /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_MainSplit"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_SpaceRoomView_preview"
  }, /*#__PURE__*/_react.default.createElement(_GroupAvatar.default, {
    groupId: groupId,
    groupName: groupSummary.profile.name,
    groupAvatarUrl: groupSummary.profile.avatar_url,
    height: 80,
    width: 80,
    resizeMethod: "crop"
  }), /*#__PURE__*/_react.default.createElement("h1", {
    className: "mx_SpaceRoomView_preview_name"
  }, groupSummary.profile.name), /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_SpaceRoomView_info"
  }, visibilitySection), /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_SpaceRoomView_preview_topic",
    ref: e => e && (0, _HtmlUtils.linkifyElement)(e)
  }, groupSummary.profile.short_description), /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_SpaceRoomView_preview_spaceBetaPrompt"
  }, ((_groupSummary$user = groupSummary.user) === null || _groupSummary$user === void 0 ? void 0 : _groupSummary$user.membership) === "join" ? (0, _languageHandler._t)("To view %(communityName)s, swap to communities in your <a>preferences</a>", {
    communityName: groupSummary.profile.name
  }, {
    a: sub => /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      onClick: onSwapClick,
      kind: "link"
    }, sub)
  }) : (0, _languageHandler._t)("To join %(communityName)s, swap to communities in your <a>preferences</a>", {
    communityName: groupSummary.profile.name
  }, {
    a: sub => /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      onClick: onSwapClick,
      kind: "link"
    }, sub)
  }))))));
};

var _default = LegacyCommunityPreview;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,