"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _SyntaxHighlight = _interopRequireDefault(require("../views/elements/SyntaxHighlight"));

var _languageHandler = require("../../languageHandler");

var _MatrixClientContext = _interopRequireDefault(require("../../contexts/MatrixClientContext"));

var _DevtoolsDialog = require("../views/dialogs/DevtoolsDialog");

var _EventUtils = require("../../utils/EventUtils");

var _MatrixClientPeg = require("../../MatrixClientPeg");

var _replaceableComponent = require("../../utils/replaceableComponent");

var _BaseDialog = _interopRequireDefault(require("../views/dialogs/BaseDialog"));

var _dec, _class;

let ViewSource = (_dec = (0, _replaceableComponent.replaceableComponent)("structures.ViewSource"), _dec(_class = class ViewSource extends _react.default.Component {
  constructor(props) {
    super(props);
    this.state = {
      isEditing: false
    };
  }

  onBack() {
    // TODO: refresh the "Event ID:" modal header
    this.setState({
      isEditing: false
    });
  }

  onEdit() {
    this.setState({
      isEditing: true
    });
  } // returns the dialog body for viewing the event source


  viewSourceContent() {
    const mxEvent = this.props.mxEvent.replacingEvent() || this.props.mxEvent; // show the replacing event, not the original, if it is an edit

    const isEncrypted = mxEvent.isEncrypted(); // @ts-ignore

    const decryptedEventSource = mxEvent.clearEvent; // FIXME: clearEvent is private

    const originalEventSource = mxEvent.event;

    if (isEncrypted) {
      return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("details", {
        open: true,
        className: "mx_ViewSource_details"
      }, /*#__PURE__*/_react.default.createElement("summary", null, /*#__PURE__*/_react.default.createElement("span", {
        className: "mx_ViewSource_heading"
      }, (0, _languageHandler._t)("Decrypted event source"))), /*#__PURE__*/_react.default.createElement(_SyntaxHighlight.default, {
        className: "json"
      }, JSON.stringify(decryptedEventSource, null, 2))), /*#__PURE__*/_react.default.createElement("details", {
        className: "mx_ViewSource_details"
      }, /*#__PURE__*/_react.default.createElement("summary", null, /*#__PURE__*/_react.default.createElement("span", {
        className: "mx_ViewSource_heading"
      }, (0, _languageHandler._t)("Original event source"))), /*#__PURE__*/_react.default.createElement(_SyntaxHighlight.default, {
        className: "json"
      }, JSON.stringify(originalEventSource, null, 2))));
    } else {
      return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_ViewSource_heading"
      }, (0, _languageHandler._t)("Original event source")), /*#__PURE__*/_react.default.createElement(_SyntaxHighlight.default, {
        className: "json"
      }, JSON.stringify(originalEventSource, null, 2)));
    }
  } // returns the id of the initial message, not the id of the previous edit


  getBaseEventId() {
    const mxEvent = this.props.mxEvent.replacingEvent() || this.props.mxEvent; // show the replacing event, not the original, if it is an edit

    const isEncrypted = mxEvent.isEncrypted();
    const baseMxEvent = this.props.mxEvent;

    if (isEncrypted) {
      var _mxEvent$event$conten;

      // `relates_to` field is inside the encrypted event
      return ((_mxEvent$event$conten = mxEvent.event.content["m.relates_to"]) === null || _mxEvent$event$conten === void 0 ? void 0 : _mxEvent$event$conten.event_id) ?? baseMxEvent.getId();
    } else {
      var _mxEvent$getContent$m;

      return ((_mxEvent$getContent$m = mxEvent.getContent()["m.relates_to"]) === null || _mxEvent$getContent$m === void 0 ? void 0 : _mxEvent$getContent$m.event_id) ?? baseMxEvent.getId();
    }
  } // returns the SendCustomEvent component prefilled with the correct details


  editSourceContent() {
    const mxEvent = this.props.mxEvent.replacingEvent() || this.props.mxEvent; // show the replacing event, not the original, if it is an edit

    const isStateEvent = mxEvent.isState();
    const roomId = mxEvent.getRoomId();
    const originalContent = mxEvent.getContent();

    if (isStateEvent) {
      return /*#__PURE__*/_react.default.createElement(_MatrixClientContext.default.Consumer, null, cli => /*#__PURE__*/_react.default.createElement(_DevtoolsDialog.SendCustomEvent, {
        room: cli.getRoom(roomId),
        forceStateEvent: true,
        onBack: () => this.onBack(),
        inputs: {
          eventType: mxEvent.getType(),
          evContent: JSON.stringify(originalContent, null, "\t"),
          stateKey: mxEvent.getStateKey()
        }
      }));
    } else {
      var _originalContent$mNe;

      // prefill an edit-message event
      // keep only the `body` and `msgtype` fields of originalContent
      const bodyToStartFrom = ((_originalContent$mNe = originalContent["m.new_content"]) === null || _originalContent$mNe === void 0 ? void 0 : _originalContent$mNe.body) ?? originalContent.body; // prefill the last edit body, to start editing from there

      const newContent = {
        "body": ` * ${bodyToStartFrom}`,
        "msgtype": originalContent.msgtype,
        "m.new_content": {
          body: bodyToStartFrom,
          msgtype: originalContent.msgtype
        },
        "m.relates_to": {
          rel_type: "m.replace",
          event_id: this.getBaseEventId()
        }
      };
      return /*#__PURE__*/_react.default.createElement(_MatrixClientContext.default.Consumer, null, cli => /*#__PURE__*/_react.default.createElement(_DevtoolsDialog.SendCustomEvent, {
        room: cli.getRoom(roomId),
        forceStateEvent: false,
        forceGeneralEvent: true,
        onBack: () => this.onBack(),
        inputs: {
          eventType: mxEvent.getType(),
          evContent: JSON.stringify(newContent, null, "\t")
        }
      }));
    }
  }

  canSendStateEvent(mxEvent) {
    const cli = _MatrixClientPeg.MatrixClientPeg.get();

    const room = cli.getRoom(mxEvent.getRoomId());
    return room.currentState.mayClientSendStateEvent(mxEvent.getType(), cli);
  }

  render() {
    const mxEvent = this.props.mxEvent.replacingEvent() || this.props.mxEvent; // show the replacing event, not the original, if it is an edit

    const isEditing = this.state.isEditing;
    const roomId = mxEvent.getRoomId();
    const eventId = mxEvent.getId();
    const canEdit = mxEvent.isState() ? this.canSendStateEvent(mxEvent) : (0, _EventUtils.canEditContent)(this.props.mxEvent);
    return /*#__PURE__*/_react.default.createElement(_BaseDialog.default, {
      className: "mx_ViewSource",
      onFinished: this.props.onFinished,
      title: (0, _languageHandler._t)("View Source")
    }, /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("div", null, "Room ID: ", roomId), /*#__PURE__*/_react.default.createElement("div", null, "Event ID: ", eventId), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_ViewSource_separator"
    }), isEditing ? this.editSourceContent() : this.viewSourceContent()), !isEditing && canEdit && /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_Dialog_buttons"
    }, /*#__PURE__*/_react.default.createElement("button", {
      onClick: () => this.onEdit()
    }, (0, _languageHandler._t)("Edit"))));
  }

}) || _class);
exports.default = ViewSource;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,