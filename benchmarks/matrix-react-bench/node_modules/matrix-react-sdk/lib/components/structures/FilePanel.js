"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _filter = require("matrix-js-sdk/src/filter");

var _MatrixClientPeg = require("../../MatrixClientPeg");

var _EventIndexPeg = _interopRequireDefault(require("../../indexing/EventIndexPeg"));

var _languageHandler = require("../../languageHandler");

var _BaseCard = _interopRequireDefault(require("../views/right_panel/BaseCard"));

var _RightPanelStorePhases = require("../../stores/RightPanelStorePhases");

var _DesktopBuildsNotice = _interopRequireWildcard(require("../views/elements/DesktopBuildsNotice"));

var _replaceableComponent = require("../../utils/replaceableComponent");

var _TimelinePanel = _interopRequireDefault(require("./TimelinePanel"));

var _Spinner = _interopRequireDefault(require("../views/elements/Spinner"));

var _EventTile = require("../views/rooms/EventTile");

var _Layout = require("../../settings/enums/Layout");

var _RoomContext = _interopRequireWildcard(require("../../contexts/RoomContext"));

var _logger = require("matrix-js-sdk/src/logger");

var _dec, _class, _class2, _temp;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/*
 * Component which shows the filtered file using a TimelinePanel
 */
let FilePanel = (_dec = (0, _replaceableComponent.replaceableComponent)("structures.FilePanel"), _dec(_class = (_temp = _class2 = class FilePanel extends _react.default.Component {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "decryptingEvents", new Set());
    (0, _defineProperty2.default)(this, "noRoom", void 0);
    (0, _defineProperty2.default)(this, "state", {
      timelineSet: null
    });
    (0, _defineProperty2.default)(this, "onRoomTimeline", (ev, room, toStartOfTimeline, removed, data) => {
      var _this$props;

      if ((room === null || room === void 0 ? void 0 : room.roomId) !== ((_this$props = this.props) === null || _this$props === void 0 ? void 0 : _this$props.roomId)) return;
      if (toStartOfTimeline || !data || !data.liveEvent || ev.isRedacted()) return;

      const client = _MatrixClientPeg.MatrixClientPeg.get();

      client.decryptEventIfNeeded(ev);

      if (ev.isBeingDecrypted()) {
        this.decryptingEvents.add(ev.getId());
      } else {
        this.addEncryptedLiveEvent(ev);
      }
    });
    (0, _defineProperty2.default)(this, "onEventDecrypted", (ev, err) => {
      if (ev.getRoomId() !== this.props.roomId) return;
      const eventId = ev.getId();
      if (!this.decryptingEvents.delete(eventId)) return;
      if (err) return;
      this.addEncryptedLiveEvent(ev);
    });
    (0, _defineProperty2.default)(this, "onPaginationRequest", (timelineWindow, direction, limit) => {
      const client = _MatrixClientPeg.MatrixClientPeg.get();

      const eventIndex = _EventIndexPeg.default.get();

      const roomId = this.props.roomId;
      const room = client.getRoom(roomId); // We override the pagination request for encrypted rooms so that we ask
      // the event index to fulfill the pagination request. Asking the server
      // to paginate won't ever work since the server can't correctly filter
      // out events containing URLs

      if (client.isRoomEncrypted(roomId) && eventIndex !== null) {
        return eventIndex.paginateTimelineWindow(room, timelineWindow, direction, limit);
      } else {
        return timelineWindow.paginate(direction, limit);
      }
    });
  }

  addEncryptedLiveEvent(ev) {
    if (!this.state.timelineSet) return;
    const timeline = this.state.timelineSet.getLiveTimeline();
    if (ev.getType() !== "m.room.message") return;

    if (["m.file", "m.image", "m.video", "m.audio"].indexOf(ev.getContent().msgtype) == -1) {
      return;
    }

    if (!this.state.timelineSet.eventIdToTimeline(ev.getId())) {
      this.state.timelineSet.addEventToTimeline(ev, timeline, false);
    }
  }

  async componentDidMount() {
    const client = _MatrixClientPeg.MatrixClientPeg.get();

    await this.updateTimelineSet(this.props.roomId);
    if (!_MatrixClientPeg.MatrixClientPeg.get().isRoomEncrypted(this.props.roomId)) return; // The timelineSets filter makes sure that encrypted events that contain
    // URLs never get added to the timeline, even if they are live events.
    // These methods are here to manually listen for such events and add
    // them despite the filter's best efforts.
    //
    // We do this only for encrypted rooms and if an event index exists,
    // this could be made more general in the future or the filter logic
    // could be fixed.

    if (_EventIndexPeg.default.get() !== null) {
      client.on('Room.timeline', this.onRoomTimeline);
      client.on('Event.decrypted', this.onEventDecrypted);
    }
  }

  componentWillUnmount() {
    const client = _MatrixClientPeg.MatrixClientPeg.get();

    if (client === null) return;
    if (!_MatrixClientPeg.MatrixClientPeg.get().isRoomEncrypted(this.props.roomId)) return;

    if (_EventIndexPeg.default.get() !== null) {
      client.removeListener('Room.timeline', this.onRoomTimeline);
      client.removeListener('Event.decrypted', this.onEventDecrypted);
    }
  }

  async fetchFileEventsServer(room) {
    const client = _MatrixClientPeg.MatrixClientPeg.get();

    const filter = new _filter.Filter(client.credentials.userId);
    filter.setDefinition({
      "room": {
        "timeline": {
          "contains_url": true,
          "types": ["m.room.message"]
        }
      }
    });
    const filterId = await client.getOrCreateFilter("FILTER_FILES_" + client.credentials.userId, filter);
    filter.filterId = filterId;
    const timelineSet = room.getOrCreateFilteredTimelineSet(filter);
    return timelineSet;
  }

  async updateTimelineSet(roomId) {
    const client = _MatrixClientPeg.MatrixClientPeg.get();

    const room = client.getRoom(roomId);

    const eventIndex = _EventIndexPeg.default.get();

    this.noRoom = !room;

    if (room) {
      let timelineSet;

      try {
        timelineSet = await this.fetchFileEventsServer(room); // If this room is encrypted the file panel won't be populated
        // correctly since the defined filter doesn't support encrypted
        // events and the server can't check if encrypted events contain
        // URLs.
        //
        // This is where our event index comes into place, we ask the
        // event index to populate the timelineSet for us. This call
        // will add 10 events to the live timeline of the set. More can
        // be requested using pagination.

        if (client.isRoomEncrypted(roomId) && eventIndex !== null) {
          const timeline = timelineSet.getLiveTimeline();
          await eventIndex.populateFileTimeline(timelineSet, timeline, room, 10);
        }

        this.setState({
          timelineSet: timelineSet
        });
      } catch (error) {
        _logger.logger.error("Failed to get or create file panel filter", error);
      }
    } else {
      _logger.logger.error("Failed to add filtered timelineSet for FilePanel as no room!");
    }
  }

  render() {
    if (_MatrixClientPeg.MatrixClientPeg.get().isGuest()) {
      return /*#__PURE__*/_react.default.createElement(_BaseCard.default, {
        className: "mx_FilePanel mx_RoomView_messageListWrapper",
        onClose: this.props.onClose,
        previousPhase: _RightPanelStorePhases.RightPanelPhases.RoomSummary
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_RoomView_empty"
      }, (0, _languageHandler._t)("You must <a>register</a> to use this functionality", {}, {
        'a': sub => /*#__PURE__*/_react.default.createElement("a", {
          href: "#/register",
          key: "sub"
        }, sub)
      })));
    } else if (this.noRoom) {
      return /*#__PURE__*/_react.default.createElement(_BaseCard.default, {
        className: "mx_FilePanel mx_RoomView_messageListWrapper",
        onClose: this.props.onClose,
        previousPhase: _RightPanelStorePhases.RightPanelPhases.RoomSummary
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_RoomView_empty"
      }, (0, _languageHandler._t)("You must join the room to see its files")));
    } // wrap a TimelinePanel with the jump-to-event bits turned off.


    const emptyState = /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_RightPanel_empty mx_FilePanel_empty"
    }, /*#__PURE__*/_react.default.createElement("h2", null, (0, _languageHandler._t)('No files visible in this room')), /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)('Attach files from chat or just drag and drop them anywhere in a room.')));

    const isRoomEncrypted = this.noRoom ? false : _MatrixClientPeg.MatrixClientPeg.get().isRoomEncrypted(this.props.roomId);

    if (this.state.timelineSet) {
      return /*#__PURE__*/_react.default.createElement(_RoomContext.default.Provider, {
        value: _objectSpread(_objectSpread({}, this.context), {}, {
          timelineRenderingType: _RoomContext.TimelineRenderingType.File
        })
      }, /*#__PURE__*/_react.default.createElement(_BaseCard.default, {
        className: "mx_FilePanel",
        onClose: this.props.onClose,
        previousPhase: _RightPanelStorePhases.RightPanelPhases.RoomSummary,
        withoutScrollContainer: true
      }, /*#__PURE__*/_react.default.createElement(_DesktopBuildsNotice.default, {
        isRoomEncrypted: isRoomEncrypted,
        kind: _DesktopBuildsNotice.WarningKind.Files
      }), /*#__PURE__*/_react.default.createElement(_TimelinePanel.default, {
        manageReadReceipts: false,
        manageReadMarkers: false,
        timelineSet: this.state.timelineSet,
        showUrlPreview: false,
        onPaginationRequest: this.onPaginationRequest,
        tileShape: _EventTile.TileShape.FileGrid,
        resizeNotifier: this.props.resizeNotifier,
        empty: emptyState,
        layout: _Layout.Layout.Group
      })));
    } else {
      return /*#__PURE__*/_react.default.createElement(_RoomContext.default.Provider, {
        value: _objectSpread(_objectSpread({}, this.context), {}, {
          timelineRenderingType: _RoomContext.TimelineRenderingType.File
        })
      }, /*#__PURE__*/_react.default.createElement(_BaseCard.default, {
        className: "mx_FilePanel",
        onClose: this.props.onClose,
        previousPhase: _RightPanelStorePhases.RightPanelPhases.RoomSummary
      }, /*#__PURE__*/_react.default.createElement(_Spinner.default, null)));
    }
  }

}, (0, _defineProperty2.default)(_class2, "contextType", _RoomContext.default), _temp)) || _class);
var _default = FilePanel;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,