"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _Keyboard = require("../../Keyboard");

var _PageTypes = _interopRequireDefault(require("../../PageTypes"));

var _MediaDeviceHandler = _interopRequireDefault(require("../../MediaDeviceHandler"));

var _FontManager = require("../../utils/FontManager");

var _dispatcher = _interopRequireDefault(require("../../dispatcher/dispatcher"));

var _SettingsStore = _interopRequireDefault(require("../../settings/SettingsStore"));

var _ResizeHandle = _interopRequireDefault(require("../views/elements/ResizeHandle"));

var _resizer = require("../../resizer");

var _MatrixClientContext = _interopRequireDefault(require("../../contexts/MatrixClientContext"));

var KeyboardShortcuts = _interopRequireWildcard(require("../../accessibility/KeyboardShortcuts"));

var _HomePage = _interopRequireDefault(require("./HomePage"));

var _PlatformPeg = _interopRequireDefault(require("../../PlatformPeg"));

var _models = require("../../stores/room-list/models");

var _ServerLimitToast = require("../../toasts/ServerLimitToast");

var _actions = require("../../dispatcher/actions");

var _LeftPanel = _interopRequireDefault(require("./LeftPanel"));

var _CallContainer = _interopRequireDefault(require("../views/voip/CallContainer"));

var _RoomListStore = _interopRequireDefault(require("../../stores/room-list/RoomListStore"));

var _NonUrgentToastContainer = _interopRequireDefault(require("./NonUrgentToastContainer"));

var _Modal = _interopRequireDefault(require("../../Modal"));

var _HostSignupContainer = _interopRequireDefault(require("../views/host_signup/HostSignupContainer"));

var _KeyBindingsManager = require("../../KeyBindingsManager");

var _SpacePanel = _interopRequireDefault(require("../views/spaces/SpacePanel"));

var _replaceableComponent = require("../../utils/replaceableComponent");

var _CallHandler = _interopRequireDefault(require("../../CallHandler"));

var _AudioFeedArrayForCall = _interopRequireDefault(require("../views/voip/AudioFeedArrayForCall"));

var _OwnProfileStore = require("../../stores/OwnProfileStore");

var _AsyncStore = require("../../stores/AsyncStore");

var _RoomView = _interopRequireDefault(require("./RoomView"));

var _ToastContainer = _interopRequireDefault(require("./ToastContainer"));

var _MyGroups = _interopRequireDefault(require("./MyGroups"));

var _UserView = _interopRequireDefault(require("./UserView"));

var _GroupView = _interopRequireDefault(require("./GroupView"));

var _BackdropPanel = _interopRequireDefault(require("./BackdropPanel"));

var _SpaceStore = _interopRequireDefault(require("../../stores/spaces/SpaceStore"));

var _classnames = _interopRequireDefault(require("classnames"));

var _GroupFilterPanel = _interopRequireDefault(require("./GroupFilterPanel"));

var _CustomRoomTagPanel = _interopRequireDefault(require("./CustomRoomTagPanel"));

var _Media = require("../../customisations/Media");

var _LegacyCommunityPreview = _interopRequireDefault(require("./LegacyCommunityPreview"));

var _dec, _class, _class2, _temp;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// We need to fetch each pinned message individually (if we don't already have it)
// so each pinned message may trigger a request. Limit the number per room for sanity.
// NB. this is just for server notices rather than pinned messages in general.
const MAX_PINNED_NOTICES_PER_ROOM = 2;

function getInputableElement(el) {
  return el.closest("input, textarea, select, [contenteditable=true]");
}

/**
 * This is what our MatrixChat shows when we are logged in. The precise view is
 * determined by the page_type property.
 *
 * Currently it's very tightly coupled with MatrixChat. We should try to do
 * something about that.
 *
 * Components mounted below us can access the matrix client via the react context.
 */
let LoggedInView = (_dec = (0, _replaceableComponent.replaceableComponent)("structures.LoggedInView"), _dec(_class = (_temp = _class2 = class LoggedInView extends _react.default.Component {
  constructor(props, context) {
    super(props, context);
    (0, _defineProperty2.default)(this, "dispatcherRef", void 0);
    (0, _defineProperty2.default)(this, "_matrixClient", void 0);
    (0, _defineProperty2.default)(this, "_roomView", void 0);
    (0, _defineProperty2.default)(this, "_resizeContainer", void 0);
    (0, _defineProperty2.default)(this, "resizeHandler", void 0);
    (0, _defineProperty2.default)(this, "compactLayoutWatcherRef", void 0);
    (0, _defineProperty2.default)(this, "backgroundImageWatcherRef", void 0);
    (0, _defineProperty2.default)(this, "resizer", void 0);
    (0, _defineProperty2.default)(this, "refreshBackgroundImage", async () => {
      let backgroundImage = _SettingsStore.default.getValue("RoomList.backgroundImage");

      if (backgroundImage) {
        // convert to http before going much further
        backgroundImage = (0, _Media.mediaFromMxc)(backgroundImage).srcHttp;
      } else {
        backgroundImage = _OwnProfileStore.OwnProfileStore.instance.getHttpAvatarUrl();
      }

      this.setState({
        backgroundImage
      });
    });
    (0, _defineProperty2.default)(this, "onAction", payload => {
      switch (payload.action) {
        case 'call_state':
          {
            const activeCalls = _CallHandler.default.sharedInstance().getAllActiveCalls();

            if (activeCalls !== this.state.activeCalls) {
              this.setState({
                activeCalls
              });
            }

            break;
          }
      }
    });
    (0, _defineProperty2.default)(this, "canResetTimelineInRoom", roomId => {
      if (!this._roomView.current) {
        return true;
      }

      return this._roomView.current.canResetTimeline();
    });
    (0, _defineProperty2.default)(this, "onAccountData", event => {
      if (event.getType() === "m.ignored_user_list") {
        _dispatcher.default.dispatch({
          action: "ignore_state_changed"
        });
      }
    });
    (0, _defineProperty2.default)(this, "onCompactLayoutChanged", (setting, roomId, level, valueAtLevel, newValue) => {
      this.setState({
        useCompactLayout: valueAtLevel
      });
    });
    (0, _defineProperty2.default)(this, "onSync", (syncState, oldSyncState, data) => {
      const oldErrCode = this.state.syncErrorData && this.state.syncErrorData.error && this.state.syncErrorData.error.errcode;
      const newErrCode = data && data.error && data.error.errcode;
      if (syncState === oldSyncState && oldErrCode === newErrCode) return;

      if (syncState === 'ERROR') {
        this.setState({
          syncErrorData: data
        });
      } else {
        this.setState({
          syncErrorData: null
        });
      }

      if (oldSyncState === 'PREPARED' && syncState === 'SYNCING') {
        this.updateServerNoticeEvents();
      } else {
        this.calculateServerLimitToast(this.state.syncErrorData, this.state.usageLimitEventContent);
      }
    });
    (0, _defineProperty2.default)(this, "onRoomStateEvents", (ev, state) => {
      const serverNoticeList = _RoomListStore.default.instance.orderedLists[_models.DefaultTagID.ServerNotice];

      if (serverNoticeList && serverNoticeList.some(r => r.roomId === ev.getRoomId())) {
        this.updateServerNoticeEvents();
      }
    });
    (0, _defineProperty2.default)(this, "onUsageLimitDismissed", () => {
      this.setState({
        usageLimitDismissed: true
      });
    });
    (0, _defineProperty2.default)(this, "updateServerNoticeEvents", async () => {
      const serverNoticeList = _RoomListStore.default.instance.orderedLists[_models.DefaultTagID.ServerNotice];
      if (!serverNoticeList) return [];
      const events = [];
      let pinnedEventTs = 0;

      for (const room of serverNoticeList) {
        const pinStateEvent = room.currentState.getStateEvents("m.room.pinned_events", "");
        if (!pinStateEvent || !pinStateEvent.getContent().pinned) continue;
        pinnedEventTs = pinStateEvent.getTs();
        const pinnedEventIds = pinStateEvent.getContent().pinned.slice(0, MAX_PINNED_NOTICES_PER_ROOM);

        for (const eventId of pinnedEventIds) {
          const timeline = await this._matrixClient.getEventTimeline(room.getUnfilteredTimelineSet(), eventId);
          const event = timeline.getEvents().find(ev => ev.getId() === eventId);
          if (event) events.push(event);
        }
      }

      if (pinnedEventTs && this.state.usageLimitEventTs > pinnedEventTs) {
        // We've processed a newer event than this one, so ignore it.
        return;
      }

      const usageLimitEvent = events.find(e => {
        return e && e.getType() === 'm.room.message' && e.getContent()['server_notice_type'] === 'm.server_notice.usage_limit_reached';
      });
      const usageLimitEventContent = usageLimitEvent && usageLimitEvent.getContent();
      this.calculateServerLimitToast(this.state.syncErrorData, usageLimitEventContent);
      this.setState({
        usageLimitEventContent,
        usageLimitEventTs: pinnedEventTs,
        // This is a fresh toast, we can show toasts again
        usageLimitDismissed: false
      });
    });
    (0, _defineProperty2.default)(this, "onPaste", ev => {
      const element = ev.target;
      const inputableElement = getInputableElement(element);

      if (inputableElement) {
        inputableElement.focus();
      } else {
        // refocusing during a paste event will make the
        // paste end up in the newly focused element,
        // so dispatch synchronously before paste happens
        _dispatcher.default.fire(_actions.Action.FocusSendMessageComposer, true);
      }
    });
    (0, _defineProperty2.default)(this, "onReactKeyDown", ev => {
      // events caught while bubbling up on the root element
      // of this component, so something must be focused.
      this.onKeyDown(ev);
    });
    (0, _defineProperty2.default)(this, "onNativeKeyDown", ev => {
      // only pass this if there is no focused element.
      // if there is, onKeyDown will be called by the
      // react keydown handler that respects the react bubbling order.
      if (ev.target === document.body) {
        this.onKeyDown(ev);
      }
    });
    (0, _defineProperty2.default)(this, "onKeyDown", ev => {
      let handled = false;
      const roomAction = (0, _KeyBindingsManager.getKeyBindingsManager)().getRoomAction(ev);

      switch (roomAction) {
        case _KeyBindingsManager.RoomAction.ScrollUp:
        case _KeyBindingsManager.RoomAction.RoomScrollDown:
        case _KeyBindingsManager.RoomAction.JumpToFirstMessage:
        case _KeyBindingsManager.RoomAction.JumpToLatestMessage:
          // pass the event down to the scroll panel
          this.onScrollKeyPressed(ev);
          handled = true;
          break;

        case _KeyBindingsManager.RoomAction.FocusSearch:
          _dispatcher.default.dispatch({
            action: 'focus_search'
          });

          handled = true;
          break;
      }

      if (handled) {
        ev.stopPropagation();
        ev.preventDefault();
        return;
      }

      const navAction = (0, _KeyBindingsManager.getKeyBindingsManager)().getNavigationAction(ev);

      switch (navAction) {
        case _KeyBindingsManager.NavigationAction.FocusRoomSearch:
          _dispatcher.default.dispatch({
            action: 'focus_room_filter'
          });

          handled = true;
          break;

        case _KeyBindingsManager.NavigationAction.ToggleUserMenu:
          _dispatcher.default.fire(_actions.Action.ToggleUserMenu);

          handled = true;
          break;

        case _KeyBindingsManager.NavigationAction.ToggleShortCutDialog:
          KeyboardShortcuts.toggleDialog();
          handled = true;
          break;

        case _KeyBindingsManager.NavigationAction.GoToHome:
          _dispatcher.default.dispatch({
            action: 'view_home_page'
          });

          _Modal.default.closeCurrentModal("homeKeyboardShortcut");

          handled = true;
          break;

        case _KeyBindingsManager.NavigationAction.ToggleRoomSidePanel:
          if (this.props.page_type === "room_view" || this.props.page_type === "group_view") {
            _dispatcher.default.dispatch({
              action: _actions.Action.ToggleRightPanel,
              type: this.props.page_type === "room_view" ? "room" : "group"
            });

            handled = true;
          }

          break;

        case _KeyBindingsManager.NavigationAction.SelectPrevRoom:
          _dispatcher.default.dispatch({
            action: _actions.Action.ViewRoomDelta,
            delta: -1,
            unread: false
          });

          handled = true;
          break;

        case _KeyBindingsManager.NavigationAction.SelectNextRoom:
          _dispatcher.default.dispatch({
            action: _actions.Action.ViewRoomDelta,
            delta: 1,
            unread: false
          });

          handled = true;
          break;

        case _KeyBindingsManager.NavigationAction.SelectPrevUnreadRoom:
          _dispatcher.default.dispatch({
            action: _actions.Action.ViewRoomDelta,
            delta: -1,
            unread: true
          });

          break;

        case _KeyBindingsManager.NavigationAction.SelectNextUnreadRoom:
          _dispatcher.default.dispatch({
            action: _actions.Action.ViewRoomDelta,
            delta: 1,
            unread: true
          });

          break;

        default:
          // if we do not have a handler for it, pass it to the platform which might
          handled = _PlatformPeg.default.get().onKeyDown(ev);
      }

      if (handled) {
        ev.stopPropagation();
        ev.preventDefault();
        return;
      }

      const isModifier = ev.key === _Keyboard.Key.ALT || ev.key === _Keyboard.Key.CONTROL || ev.key === _Keyboard.Key.META || ev.key === _Keyboard.Key.SHIFT;

      if (!isModifier && !ev.ctrlKey && !ev.metaKey) {
        // The above condition is crafted to _allow_ characters with Shift
        // already pressed (but not the Shift key down itself).
        const isClickShortcut = ev.target !== document.body && (ev.key === _Keyboard.Key.SPACE || ev.key === _Keyboard.Key.ENTER); // We explicitly allow alt to be held due to it being a common accent modifier.
        // XXX: Forwarding Dead keys in this way does not work as intended but better to at least
        // move focus to the composer so the user can re-type the dead key correctly.

        const isPrintable = ev.key.length === 1 || ev.key === "Dead"; // If the user is entering a printable character outside of an input field
        // redirect it to the composer for them.

        if (!isClickShortcut && isPrintable && !getInputableElement(ev.target)) {
          // synchronous dispatch so we focus before key generates input
          _dispatcher.default.fire(_actions.Action.FocusSendMessageComposer, true);

          ev.stopPropagation(); // we should *not* preventDefault() here as that would prevent typing in the now-focused composer
        }
      }
    });
    (0, _defineProperty2.default)(this, "onScrollKeyPressed", ev => {
      if (this._roomView.current) {
        this._roomView.current.handleScrollKey(ev);
      }
    });
    this.state = {
      syncErrorData: undefined,
      // use compact timeline view
      useCompactLayout: _SettingsStore.default.getValue('useCompactLayout'),
      usageLimitDismissed: false,
      activeCalls: _CallHandler.default.sharedInstance().getAllActiveCalls()
    }; // stash the MatrixClient in case we log out before we are unmounted

    this._matrixClient = this.props.matrixClient;

    _MediaDeviceHandler.default.loadDevices();

    (0, _FontManager.fixupColorFonts)();
    this._roomView = /*#__PURE__*/_react.default.createRef();
    this._resizeContainer = /*#__PURE__*/_react.default.createRef();
    this.resizeHandler = /*#__PURE__*/_react.default.createRef();
  }

  componentDidMount() {
    document.addEventListener('keydown', this.onNativeKeyDown, false);
    this.dispatcherRef = _dispatcher.default.register(this.onAction);
    this.updateServerNoticeEvents();

    this._matrixClient.on("accountData", this.onAccountData);

    this._matrixClient.on("sync", this.onSync); // Call `onSync` with the current state as well


    this.onSync(this._matrixClient.getSyncState(), null, this._matrixClient.getSyncStateData());

    this._matrixClient.on("RoomState.events", this.onRoomStateEvents);

    this.compactLayoutWatcherRef = _SettingsStore.default.watchSetting("useCompactLayout", null, this.onCompactLayoutChanged);
    this.backgroundImageWatcherRef = _SettingsStore.default.watchSetting("RoomList.backgroundImage", null, this.refreshBackgroundImage);
    this.resizer = this.createResizer();
    this.resizer.attach();

    _OwnProfileStore.OwnProfileStore.instance.on(_AsyncStore.UPDATE_EVENT, this.refreshBackgroundImage);

    this.loadResizerPreferences();
    this.refreshBackgroundImage();
  }

  componentWillUnmount() {
    document.removeEventListener('keydown', this.onNativeKeyDown, false);

    _dispatcher.default.unregister(this.dispatcherRef);

    this._matrixClient.removeListener("accountData", this.onAccountData);

    this._matrixClient.removeListener("sync", this.onSync);

    this._matrixClient.removeListener("RoomState.events", this.onRoomStateEvents);

    _OwnProfileStore.OwnProfileStore.instance.off(_AsyncStore.UPDATE_EVENT, this.refreshBackgroundImage);

    _SettingsStore.default.unwatchSetting(this.compactLayoutWatcherRef);

    _SettingsStore.default.unwatchSetting(this.backgroundImageWatcherRef);

    this.resizer.detach();
  }

  createResizer() {
    let panelSize;
    let panelCollapsed;
    const collapseConfig = {
      // TODO decrease this once Spaces launches as it'll no longer need to include the 56px Community Panel
      toggleSize: 206 - 50,
      onCollapsed: collapsed => {
        panelCollapsed = collapsed;

        if (collapsed) {
          _dispatcher.default.dispatch({
            action: "hide_left_panel"
          });

          window.localStorage.setItem("mx_lhs_size", '0');
        } else {
          _dispatcher.default.dispatch({
            action: "show_left_panel"
          });
        }
      },
      onResized: size => {
        panelSize = size;
        this.props.resizeNotifier.notifyLeftHandleResized();
      },
      onResizeStart: () => {
        this.props.resizeNotifier.startResizing();
      },
      onResizeStop: () => {
        if (!panelCollapsed) window.localStorage.setItem("mx_lhs_size", '' + panelSize);
        this.props.resizeNotifier.stopResizing();
      },
      isItemCollapsed: domNode => {
        return domNode.classList.contains("mx_LeftPanel_minimized");
      },
      handler: this.resizeHandler.current
    };
    const resizer = new _resizer.Resizer(this._resizeContainer.current, _resizer.CollapseDistributor, collapseConfig);
    resizer.setClassNames({
      handle: "mx_ResizeHandle",
      vertical: "mx_ResizeHandle_vertical",
      reverse: "mx_ResizeHandle_reverse"
    });
    return resizer;
  }

  loadResizerPreferences() {
    let lhsSize = parseInt(window.localStorage.getItem("mx_lhs_size"), 10);

    if (isNaN(lhsSize)) {
      lhsSize = 350;
    }

    this.resizer.forHandleWithId('lp-resizer').resize(lhsSize);
  }

  calculateServerLimitToast(syncError, usageLimitEventContent) {
    const error = syncError && syncError.error && syncError.error.errcode === "M_RESOURCE_LIMIT_EXCEEDED";

    if (error) {
      usageLimitEventContent = syncError.error.data;
    } // usageLimitDismissed is true when the user has explicitly hidden the toast
    // and it will be reset to false if a *new* usage alert comes in.


    if (usageLimitEventContent && this.state.usageLimitDismissed) {
      (0, _ServerLimitToast.showToast)(usageLimitEventContent.limit_type, this.onUsageLimitDismissed, usageLimitEventContent.admin_contact, error);
    } else {
      (0, _ServerLimitToast.hideToast)();
    }
  }

  render() {
    let pageElement;

    switch (this.props.page_type) {
      case _PageTypes.default.RoomView:
        pageElement = /*#__PURE__*/_react.default.createElement(_RoomView.default, {
          ref: this._roomView,
          onRegistered: this.props.onRegistered,
          threepidInvite: this.props.threepidInvite,
          oobData: this.props.roomOobData,
          key: this.props.currentRoomId || 'roomview',
          resizeNotifier: this.props.resizeNotifier,
          justCreatedOpts: this.props.roomJustCreatedOpts,
          forceTimeline: this.props.forceTimeline
        });
        break;

      case _PageTypes.default.MyGroups:
        pageElement = /*#__PURE__*/_react.default.createElement(_MyGroups.default, null);
        break;

      case _PageTypes.default.RoomDirectory:
        // handled by MatrixChat for now
        break;

      case _PageTypes.default.HomePage:
        pageElement = /*#__PURE__*/_react.default.createElement(_HomePage.default, {
          justRegistered: this.props.justRegistered
        });
        break;

      case _PageTypes.default.UserView:
        pageElement = /*#__PURE__*/_react.default.createElement(_UserView.default, {
          userId: this.props.currentUserId,
          resizeNotifier: this.props.resizeNotifier
        });
        break;

      case _PageTypes.default.GroupView:
        if (_SpaceStore.default.spacesEnabled) {
          pageElement = /*#__PURE__*/_react.default.createElement(_LegacyCommunityPreview.default, {
            groupId: this.props.currentGroupId
          });
        } else {
          pageElement = /*#__PURE__*/_react.default.createElement(_GroupView.default, {
            groupId: this.props.currentGroupId,
            isNew: this.props.currentGroupIsNew,
            resizeNotifier: this.props.resizeNotifier
          });
        }

        break;
    }

    const wrapperClasses = (0, _classnames.default)({
      'mx_MatrixChat_wrapper': true,
      'mx_MatrixChat_useCompactLayout': this.state.useCompactLayout
    });
    const bodyClasses = (0, _classnames.default)({
      'mx_MatrixChat': true,
      'mx_MatrixChat--with-avatar': this.state.backgroundImage
    });
    const audioFeedArraysForCalls = this.state.activeCalls.map(call => {
      return /*#__PURE__*/_react.default.createElement(_AudioFeedArrayForCall.default, {
        call: call,
        key: call.callId
      });
    });
    return /*#__PURE__*/_react.default.createElement(_MatrixClientContext.default.Provider, {
      value: this._matrixClient
    }, /*#__PURE__*/_react.default.createElement("div", {
      onPaste: this.onPaste,
      onKeyDown: this.onReactKeyDown,
      className: wrapperClasses,
      "aria-hidden": this.props.hideToSRUsers
    }, /*#__PURE__*/_react.default.createElement(_ToastContainer.default, null), /*#__PURE__*/_react.default.createElement("div", {
      className: bodyClasses
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_LeftPanel_wrapper"
    }, _SettingsStore.default.getValue('TagPanel.enableTagPanel') && /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_GroupFilterPanelContainer"
    }, /*#__PURE__*/_react.default.createElement(_BackdropPanel.default, {
      blurMultiplier: 0.5,
      backgroundImage: this.state.backgroundImage
    }), /*#__PURE__*/_react.default.createElement(_GroupFilterPanel.default, null), _SettingsStore.default.getValue("feature_custom_tags") ? /*#__PURE__*/_react.default.createElement(_CustomRoomTagPanel.default, null) : null), _SpaceStore.default.spacesEnabled ? /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_BackdropPanel.default, {
      blurMultiplier: 0.5,
      backgroundImage: this.state.backgroundImage
    }), /*#__PURE__*/_react.default.createElement(_SpacePanel.default, null)) : null, /*#__PURE__*/_react.default.createElement(_BackdropPanel.default, {
      backgroundImage: this.state.backgroundImage
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_LeftPanel_wrapper--user",
      ref: this._resizeContainer,
      "data-collapsed": this.props.collapseLhs ? true : undefined
    }, /*#__PURE__*/_react.default.createElement(_LeftPanel.default, {
      isMinimized: this.props.collapseLhs || false,
      resizeNotifier: this.props.resizeNotifier
    }))), /*#__PURE__*/_react.default.createElement(_ResizeHandle.default, {
      passRef: this.resizeHandler,
      id: "lp-resizer"
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_RoomView_wrapper"
    }, pageElement))), /*#__PURE__*/_react.default.createElement(_CallContainer.default, null), /*#__PURE__*/_react.default.createElement(_NonUrgentToastContainer.default, null), /*#__PURE__*/_react.default.createElement(_HostSignupContainer.default, null), audioFeedArraysForCalls);
  }

}, (0, _defineProperty2.default)(_class2, "displayName", 'LoggedInView'), _temp)) || _class);
var _default = LoggedInView;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,