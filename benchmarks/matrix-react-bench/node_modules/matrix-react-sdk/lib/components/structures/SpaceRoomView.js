"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _event = require("matrix-js-sdk/src/@types/event");

var _partials = require("matrix-js-sdk/src/@types/partials");

var _MatrixClientContext = _interopRequireDefault(require("../../contexts/MatrixClientContext"));

var _RoomAvatar = _interopRequireDefault(require("../views/avatars/RoomAvatar"));

var _languageHandler = require("../../languageHandler");

var _AccessibleButton = _interopRequireDefault(require("../views/elements/AccessibleButton"));

var _RoomName = _interopRequireDefault(require("../views/elements/RoomName"));

var _RoomTopic = _interopRequireDefault(require("../views/elements/RoomTopic"));

var _InlineSpinner = _interopRequireDefault(require("../views/elements/InlineSpinner"));

var _RoomInvite = require("../../RoomInvite");

var _useRoomMembers = require("../../hooks/useRoomMembers");

var _createRoom = _interopRequireDefault(require("../../createRoom"));

var _Field = _interopRequireDefault(require("../views/elements/Field"));

var _useEventEmitter = require("../../hooks/useEventEmitter");

var _Validation = _interopRequireDefault(require("../views/elements/Validation"));

var Email = _interopRequireWildcard(require("../../email"));

var _dispatcher = _interopRequireDefault(require("../../dispatcher/dispatcher"));

var _actions = require("../../dispatcher/actions");

var _MainSplit = _interopRequireDefault(require("./MainSplit"));

var _ErrorBoundary = _interopRequireDefault(require("../views/elements/ErrorBoundary"));

var _RightPanel = _interopRequireDefault(require("./RightPanel"));

var _RightPanelStore = _interopRequireDefault(require("../../stores/RightPanelStore"));

var _RightPanelStorePhases = require("../../stores/RightPanelStorePhases");

var _useStateArray = require("../../hooks/useStateArray");

var _SpacePublicShare = _interopRequireDefault(require("../views/spaces/SpacePublicShare"));

var _space = require("../../utils/space");

var _SpaceHierarchy = _interopRequireWildcard(require("./SpaceHierarchy"));

var _MemberAvatar = _interopRequireDefault(require("../views/avatars/MemberAvatar"));

var _SpaceStore = _interopRequireDefault(require("../../stores/spaces/SpaceStore"));

var _FacePile = _interopRequireDefault(require("../views/elements/FacePile"));

var _AddExistingToSpaceDialog = require("../views/dialogs/AddExistingToSpaceDialog");

var _ContextMenu = require("./ContextMenu");

var _IconizedContextMenu = _interopRequireWildcard(require("../views/context_menus/IconizedContextMenu"));

var _AccessibleTooltipButton = _interopRequireDefault(require("../views/elements/AccessibleTooltipButton"));

var _BetaCard = require("../views/beta/BetaCard");

var _UserSettingsDialog = require("../views/dialogs/UserSettingsDialog");

var _membership = require("../../utils/membership");

var _SpaceCreateMenu = require("../views/spaces/SpaceCreateMenu");

var _CreateSpaceFromCommunityDialog = require("../views/dialogs/CreateSpaceFromCommunityDialog");

var _useAsyncMemo = require("../../hooks/useAsyncMemo");

var _Spinner = _interopRequireDefault(require("../views/elements/Spinner"));

var _GroupAvatar = _interopRequireDefault(require("../views/avatars/GroupAvatar"));

var _useDispatcher = require("../../hooks/useDispatcher");

var _useRoomState = require("../../hooks/useRoomState");

var _logger = require("matrix-js-sdk/src/logger");

var _UIComponents = require("../../customisations/helpers/UIComponents");

var _UIFeature = require("../../settings/UIFeature");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
Copyright 2021 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
var Phase;

(function (Phase) {
  Phase[Phase["Landing"] = 0] = "Landing";
  Phase[Phase["PublicCreateRooms"] = 1] = "PublicCreateRooms";
  Phase[Phase["PublicShare"] = 2] = "PublicShare";
  Phase[Phase["PrivateScope"] = 3] = "PrivateScope";
  Phase[Phase["PrivateInvite"] = 4] = "PrivateInvite";
  Phase[Phase["PrivateCreateRooms"] = 5] = "PrivateCreateRooms";
  Phase[Phase["PrivateExistingRooms"] = 6] = "PrivateExistingRooms";
})(Phase || (Phase = {}));

const RoomMemberCount = ({
  room,
  children
}) => {
  const members = (0, _useRoomMembers.useRoomMembers)(room);
  const count = members.length;
  if (children) return children(count);
  return count;
};

const useMyRoomMembership = room => {
  const [membership, setMembership] = (0, _react.useState)(room.getMyMembership());
  (0, _useEventEmitter.useEventEmitter)(room, "Room.myMembership", () => {
    setMembership(room.getMyMembership());
  });
  return membership;
};

const SpaceInfo = ({
  space
}) => {
  // summary will begin as undefined whilst loading and go null if it fails to load.
  const summary = (0, _useAsyncMemo.useAsyncMemo)(async () => {
    if (space.getMyMembership() !== "invite") return;

    try {
      return space.client.getRoomSummary(space.roomId);
    } catch (e) {
      return null;
    }
  }, [space]);
  const joinRule = (0, _useRoomState.useRoomState)(space, state => state.getJoinRule());
  const membership = useMyRoomMembership(space);
  let visibilitySection;

  if (joinRule === "public") {
    visibilitySection = /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_SpaceRoomView_info_public"
    }, (0, _languageHandler._t)("Public space"));
  } else {
    visibilitySection = /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_SpaceRoomView_info_private"
    }, (0, _languageHandler._t)("Private space"));
  }

  let memberSection;

  if (membership === "invite" && summary) {
    // Don't trust local state and instead use the summary API
    memberSection = /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_SpaceRoomView_info_memberCount"
    }, (0, _languageHandler._t)("%(count)s members", {
      count: summary.num_joined_members
    }));
  } else if (summary !== undefined) {
    // summary is not still loading
    memberSection = /*#__PURE__*/_react.default.createElement(RoomMemberCount, {
      room: space
    }, count => count > 0 ? /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      kind: "link",
      className: "mx_SpaceRoomView_info_memberCount",
      onClick: () => {
        _dispatcher.default.dispatch({
          action: _actions.Action.SetRightPanelPhase,
          phase: _RightPanelStorePhases.RightPanelPhases.RoomMemberList,
          refireParams: {
            space
          }
        });
      }
    }, (0, _languageHandler._t)("%(count)s members", {
      count
    })) : null);
  }

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_SpaceRoomView_info"
  }, visibilitySection, memberSection);
};

const onPreferencesClick = () => {
  _dispatcher.default.dispatch({
    action: _actions.Action.ViewUserSettings,
    initialTabId: _UserSettingsDialog.UserTab.Preferences
  });
}; // XXX: temporary community migration component


const GroupTile = ({
  groupId
}) => {
  const cli = (0, _react.useContext)(_MatrixClientContext.default);
  const groupSummary = (0, _useAsyncMemo.useAsyncMemo)(() => cli.getGroupSummary(groupId), [cli, groupId]);
  if (!groupSummary) return /*#__PURE__*/_react.default.createElement(_Spinner.default, null);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_GroupAvatar.default, {
    groupId: groupId,
    groupName: groupSummary.profile.name,
    groupAvatarUrl: groupSummary.profile.avatar_url,
    width: 16,
    height: 16,
    resizeMethod: "crop"
  }), groupSummary.profile.name);
};

const SpacePreview = ({
  space,
  onJoinButtonClicked,
  onRejectButtonClicked
}) => {
  var _space$currentState$g;

  const cli = (0, _react.useContext)(_MatrixClientContext.default);
  const myMembership = useMyRoomMembership(space);
  (0, _useDispatcher.useDispatcher)(_dispatcher.default, payload => {
    if (payload.action === _actions.Action.JoinRoomError && payload.roomId === space.roomId) {
      setBusy(false); // stop the spinner, join failed
    }
  });
  const [busy, setBusy] = (0, _react.useState)(false);
  const spacesEnabled = _SpaceStore.default.spacesEnabled;
  const joinRule = (0, _useRoomState.useRoomState)(space, state => state.getJoinRule());

  const cannotJoin = (0, _membership.getEffectiveMembership)(myMembership) === _membership.EffectiveMembership.Leave && joinRule !== _partials.JoinRule.Public;

  let inviterSection;
  let joinButtons;

  if (myMembership === "join") {
    // XXX remove this when spaces leaves Beta
    joinButtons = /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      kind: "danger_outline",
      onClick: () => {
        _dispatcher.default.dispatch({
          action: "leave_room",
          room_id: space.roomId
        });
      }
    }, (0, _languageHandler._t)("Leave"));
  } else if (myMembership === "invite") {
    var _space$getMember, _space$getMember$even;

    const inviteSender = (_space$getMember = space.getMember(cli.getUserId())) === null || _space$getMember === void 0 ? void 0 : (_space$getMember$even = _space$getMember.events.member) === null || _space$getMember$even === void 0 ? void 0 : _space$getMember$even.getSender();
    const inviter = inviteSender && space.getMember(inviteSender);

    if (inviteSender) {
      inviterSection = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_SpaceRoomView_preview_inviter"
      }, /*#__PURE__*/_react.default.createElement(_MemberAvatar.default, {
        member: inviter,
        fallbackUserId: inviteSender,
        width: 32,
        height: 32
      }), /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_SpaceRoomView_preview_inviter_name"
      }, (0, _languageHandler._t)("<inviter/> invites you", {}, {
        inviter: () => /*#__PURE__*/_react.default.createElement("b", null, (inviter === null || inviter === void 0 ? void 0 : inviter.name) || inviteSender)
      })), inviter ? /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_SpaceRoomView_preview_inviter_mxid"
      }, inviteSender) : null));
    }

    joinButtons = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      kind: "secondary",
      onClick: () => {
        setBusy(true);
        onRejectButtonClicked();
      }
    }, (0, _languageHandler._t)("Reject")), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      kind: "primary",
      onClick: () => {
        setBusy(true);
        onJoinButtonClicked();
      },
      disabled: !spacesEnabled
    }, (0, _languageHandler._t)("Accept")));
  } else {
    joinButtons = /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      kind: "primary",
      onClick: () => {
        onJoinButtonClicked();

        if (!cli.isGuest()) {
          // user will be shown a modal that won't fire a room join error
          setBusy(true);
        }
      },
      disabled: !spacesEnabled || cannotJoin
    }, (0, _languageHandler._t)("Join"));
  }

  if (busy) {
    joinButtons = /*#__PURE__*/_react.default.createElement(_InlineSpinner.default, null);
  }

  let footer;

  if (!spacesEnabled) {
    footer = /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SpaceRoomView_preview_spaceBetaPrompt"
    }, myMembership === "join" ? (0, _languageHandler._t)("To view this Space, hide communities in your <a>preferences</a>", {}, {
      a: sub => /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        onClick: onPreferencesClick,
        kind: "link"
      }, sub)
    }) : (0, _languageHandler._t)("To join this Space, hide communities in your <a>preferences</a>", {}, {
      a: sub => /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        onClick: onPreferencesClick,
        kind: "link"
      }, sub)
    }));
  } else if (cannotJoin) {
    footer = /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SpaceRoomView_preview_spaceBetaPrompt"
    }, (0, _languageHandler._t)("To view %(spaceName)s, you need an invite", {
      spaceName: space.name
    }));
  }

  let migratedCommunitySection;
  const createContent = (_space$currentState$g = space.currentState.getStateEvents(_event.EventType.RoomCreate, "")) === null || _space$currentState$g === void 0 ? void 0 : _space$currentState$g.getContent();

  if (createContent[_CreateSpaceFromCommunityDialog.CreateEventField]) {
    migratedCommunitySection = /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SpaceRoomView_preview_migratedCommunity"
    }, (0, _languageHandler._t)("Created from <Community />", {}, {
      Community: () => /*#__PURE__*/_react.default.createElement(GroupTile, {
        groupId: createContent[_CreateSpaceFromCommunityDialog.CreateEventField]
      })
    }));
  }

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_SpaceRoomView_preview"
  }, migratedCommunitySection, inviterSection, /*#__PURE__*/_react.default.createElement(_RoomAvatar.default, {
    room: space,
    height: 80,
    width: 80,
    viewAvatarOnClick: true
  }), /*#__PURE__*/_react.default.createElement("h1", {
    className: "mx_SpaceRoomView_preview_name"
  }, /*#__PURE__*/_react.default.createElement(_RoomName.default, {
    room: space
  })), /*#__PURE__*/_react.default.createElement(SpaceInfo, {
    space: space
  }), /*#__PURE__*/_react.default.createElement(_RoomTopic.default, {
    room: space
  }, (topic, ref) => /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_SpaceRoomView_preview_topic",
    ref: ref
  }, topic)), space.getJoinRule() === "public" && /*#__PURE__*/_react.default.createElement(_FacePile.default, {
    room: space
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_SpaceRoomView_preview_joinButtons"
  }, joinButtons), footer);
};

const SpaceLandingAddButton = ({
  space
}) => {
  const [menuDisplayed, handle, openMenu, closeMenu] = (0, _ContextMenu.useContextMenu)();
  let contextMenu;

  if (menuDisplayed) {
    const rect = handle.current.getBoundingClientRect();
    contextMenu = /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.default, {
      left: rect.left + window.pageXOffset + 0,
      top: rect.bottom + window.pageYOffset + 8,
      chevronFace: _ContextMenu.ChevronFace.None,
      onFinished: closeMenu,
      className: "mx_RoomTile_contextMenu",
      compact: true
    }, /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOptionList, {
      first: true
    }, /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
      label: (0, _languageHandler._t)("Create new room"),
      iconClassName: "mx_RoomList_iconPlus",
      onClick: async e => {
        e.preventDefault();
        e.stopPropagation();
        closeMenu();

        if (await (0, _space.showCreateNewRoom)(space)) {
          _dispatcher.default.fire(_actions.Action.UpdateSpaceHierarchy);
        }
      }
    }), /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
      label: (0, _languageHandler._t)("Add existing room"),
      iconClassName: "mx_RoomList_iconHash",
      onClick: e => {
        e.preventDefault();
        e.stopPropagation();
        closeMenu();
        (0, _space.showAddExistingRooms)(space);
      }
    }), /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
      label: (0, _languageHandler._t)("Add space"),
      iconClassName: "mx_RoomList_iconPlus",
      onClick: e => {
        e.preventDefault();
        e.stopPropagation();
        closeMenu();
        (0, _space.showCreateNewSubspace)(space);
      }
    }, /*#__PURE__*/_react.default.createElement(_BetaCard.BetaPill, null))));
  }

  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_ContextMenu.ContextMenuButton, {
    kind: "primary",
    inputRef: handle,
    onClick: openMenu,
    isExpanded: menuDisplayed,
    label: (0, _languageHandler._t)("Add")
  }, (0, _languageHandler._t)("Add")), contextMenu);
};

const SpaceLanding = ({
  space
}) => {
  const cli = (0, _react.useContext)(_MatrixClientContext.default);
  const myMembership = useMyRoomMembership(space);
  const userId = cli.getUserId();
  let inviteButton;

  if ((myMembership === "join" && space.canInvite(userId) || space.getJoinRule() === _partials.JoinRule.Public) && (0, _UIComponents.shouldShowComponent)(_UIFeature.UIComponent.InviteUsers)) {
    inviteButton = /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      kind: "primary",
      className: "mx_SpaceRoomView_landing_inviteButton",
      onClick: () => {
        (0, _space.showSpaceInvite)(space);
      }
    }, (0, _languageHandler._t)("Invite"));
  }

  const canAddRooms = myMembership === "join" && space.currentState.maySendStateEvent(_event.EventType.SpaceChild, userId);
  let addRoomButton;

  if (canAddRooms) {
    addRoomButton = /*#__PURE__*/_react.default.createElement(SpaceLandingAddButton, {
      space: space
    });
  }

  let settingsButton;

  if ((0, _space.shouldShowSpaceSettings)(space)) {
    settingsButton = /*#__PURE__*/_react.default.createElement(_AccessibleTooltipButton.default, {
      className: "mx_SpaceRoomView_landing_settingsButton",
      onClick: () => {
        (0, _space.showSpaceSettings)(space);
      },
      title: (0, _languageHandler._t)("Settings")
    });
  }

  const onMembersClick = () => {
    _dispatcher.default.dispatch({
      action: _actions.Action.SetRightPanelPhase,
      phase: _RightPanelStorePhases.RightPanelPhases.RoomMemberList,
      refireParams: {
        space
      }
    });
  };

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_SpaceRoomView_landing"
  }, /*#__PURE__*/_react.default.createElement(_SpaceCreateMenu.SpaceFeedbackPrompt, null), /*#__PURE__*/_react.default.createElement(_RoomAvatar.default, {
    room: space,
    height: 80,
    width: 80,
    viewAvatarOnClick: true
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_SpaceRoomView_landing_name"
  }, /*#__PURE__*/_react.default.createElement(_RoomName.default, {
    room: space
  }, name => {
    const tags = {
      name: () => /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_SpaceRoomView_landing_nameRow"
      }, /*#__PURE__*/_react.default.createElement("h1", null, name))
    };
    return (0, _languageHandler._t)("Welcome to <name/>", {}, tags);
  })), /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_SpaceRoomView_landing_info"
  }, /*#__PURE__*/_react.default.createElement(SpaceInfo, {
    space: space
  }), /*#__PURE__*/_react.default.createElement(_FacePile.default, {
    room: space,
    onlyKnownUsers: false,
    numShown: 7,
    onClick: onMembersClick
  }), inviteButton, settingsButton), /*#__PURE__*/_react.default.createElement(_RoomTopic.default, {
    room: space
  }, (topic, ref) => /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_SpaceRoomView_landing_topic",
    ref: ref
  }, topic)), /*#__PURE__*/_react.default.createElement(_SpaceHierarchy.default, {
    space: space,
    showRoom: _SpaceHierarchy.showRoom,
    additionalButtons: addRoomButton
  }));
};

const SpaceSetupFirstRooms = ({
  space,
  title,
  description,
  onFinished
}) => {
  const [busy, setBusy] = (0, _react.useState)(false);
  const [error, setError] = (0, _react.useState)("");
  const numFields = 3;
  const placeholders = [(0, _languageHandler._t)("General"), (0, _languageHandler._t)("Random"), (0, _languageHandler._t)("Support")];
  const [roomNames, setRoomName] = (0, _useStateArray.useStateArray)(numFields, [(0, _languageHandler._t)("General"), (0, _languageHandler._t)("Random"), ""]);
  const fields = new Array(numFields).fill(0).map((x, i) => {
    const name = "roomName" + i;
    return /*#__PURE__*/_react.default.createElement(_Field.default, {
      key: name,
      name: name,
      type: "text",
      label: (0, _languageHandler._t)("Room name"),
      placeholder: placeholders[i],
      value: roomNames[i],
      onChange: ev => setRoomName(i, ev.target.value),
      autoFocus: i === 2,
      disabled: busy,
      autoComplete: "off"
    });
  });

  const onNextClick = async ev => {
    ev.preventDefault();
    if (busy) return;
    setError("");
    setBusy(true);

    try {
      const isPublic = space.getJoinRule() === _partials.JoinRule.Public;

      const filteredRoomNames = roomNames.map(name => name.trim()).filter(Boolean);
      const roomIds = await Promise.all(filteredRoomNames.map(name => {
        return (0, _createRoom.default)({
          createOpts: {
            preset: isPublic ? _partials.Preset.PublicChat : _partials.Preset.PrivateChat,
            name
          },
          spinner: false,
          encryption: false,
          andView: false,
          inlineErrors: true,
          parentSpace: space,
          joinRule: !isPublic ? _partials.JoinRule.Restricted : undefined,
          suggested: true
        });
      }));
      onFinished(roomIds[0]);
    } catch (e) {
      _logger.logger.error("Failed to create initial space rooms", e);

      setError((0, _languageHandler._t)("Failed to create initial space rooms"));
    }

    setBusy(false);
  };

  let onClick = ev => {
    ev.preventDefault();
    onFinished();
  };

  let buttonLabel = (0, _languageHandler._t)("Skip for now");

  if (roomNames.some(name => name.trim())) {
    onClick = onNextClick;
    buttonLabel = busy ? (0, _languageHandler._t)("Creating rooms...") : (0, _languageHandler._t)("Continue");
  }

  return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("h1", null, title), /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_SpaceRoomView_description"
  }, description), error && /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_SpaceRoomView_errorText"
  }, error), /*#__PURE__*/_react.default.createElement("form", {
    onSubmit: onClick,
    id: "mx_SpaceSetupFirstRooms"
  }, fields), /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_SpaceRoomView_buttons"
  }, /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
    kind: "primary",
    disabled: busy,
    onClick: onClick,
    element: "input",
    type: "submit",
    form: "mx_SpaceSetupFirstRooms",
    value: buttonLabel
  })));
};

const SpaceAddExistingRooms = ({
  space,
  onFinished
}) => {
  return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("h1", null, (0, _languageHandler._t)("What do you want to organise?")), /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_SpaceRoomView_description"
  }, (0, _languageHandler._t)("Pick rooms or conversations to add. This is just a space for you, " + "no one will be informed. You can add more later.")), /*#__PURE__*/_react.default.createElement(_AddExistingToSpaceDialog.AddExistingToSpace, {
    space: space,
    emptySelectionButton: /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      kind: "primary",
      onClick: onFinished
    }, (0, _languageHandler._t)("Skip for now")),
    filterPlaceholder: (0, _languageHandler._t)("Search for rooms or spaces"),
    onFinished: onFinished,
    roomsRenderer: _AddExistingToSpaceDialog.defaultRoomsRenderer,
    spacesRenderer: _AddExistingToSpaceDialog.defaultSpacesRenderer,
    dmsRenderer: _AddExistingToSpaceDialog.defaultDmsRenderer
  }));
};

const SpaceSetupPublicShare = ({
  justCreatedOpts,
  space,
  onFinished,
  firstRoomId
}) => {
  var _justCreatedOpts$crea;

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_SpaceRoomView_publicShare"
  }, /*#__PURE__*/_react.default.createElement("h1", null, (0, _languageHandler._t)("Share %(name)s", {
    name: (justCreatedOpts === null || justCreatedOpts === void 0 ? void 0 : (_justCreatedOpts$crea = justCreatedOpts.createOpts) === null || _justCreatedOpts$crea === void 0 ? void 0 : _justCreatedOpts$crea.name) || space.name
  })), /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_SpaceRoomView_description"
  }, (0, _languageHandler._t)("It's just you at the moment, it will be even better with others.")), /*#__PURE__*/_react.default.createElement(_SpacePublicShare.default, {
    space: space
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_SpaceRoomView_buttons"
  }, /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
    kind: "primary",
    onClick: onFinished
  }, firstRoomId ? (0, _languageHandler._t)("Go to my first room") : (0, _languageHandler._t)("Go to my space"))));
};

const SpaceSetupPrivateScope = ({
  space,
  justCreatedOpts,
  onFinished
}) => {
  var _justCreatedOpts$crea2;

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_SpaceRoomView_privateScope"
  }, /*#__PURE__*/_react.default.createElement("h1", null, (0, _languageHandler._t)("Who are you working with?")), /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_SpaceRoomView_description"
  }, (0, _languageHandler._t)("Make sure the right people have access to %(name)s", {
    name: (justCreatedOpts === null || justCreatedOpts === void 0 ? void 0 : (_justCreatedOpts$crea2 = justCreatedOpts.createOpts) === null || _justCreatedOpts$crea2 === void 0 ? void 0 : _justCreatedOpts$crea2.name) || space.name
  })), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
    className: "mx_SpaceRoomView_privateScope_justMeButton",
    onClick: () => {
      onFinished(false);
    }
  }, /*#__PURE__*/_react.default.createElement("h3", null, (0, _languageHandler._t)("Just me")), /*#__PURE__*/_react.default.createElement("div", null, (0, _languageHandler._t)("A private space to organise your rooms"))), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
    className: "mx_SpaceRoomView_privateScope_meAndMyTeammatesButton",
    onClick: () => {
      onFinished(true);
    }
  }, /*#__PURE__*/_react.default.createElement("h3", null, (0, _languageHandler._t)("Me and my teammates")), /*#__PURE__*/_react.default.createElement("div", null, (0, _languageHandler._t)("A private space for you and your teammates"))));
};

const validateEmailRules = (0, _Validation.default)({
  rules: [{
    key: "email",
    test: ({
      value
    }) => !value || Email.looksValid(value),
    invalid: () => (0, _languageHandler._t)("Doesn't look like a valid email address")
  }]
});

const SpaceSetupPrivateInvite = ({
  space,
  onFinished
}) => {
  const [busy, setBusy] = (0, _react.useState)(false);
  const [error, setError] = (0, _react.useState)("");
  const numFields = 3;
  const fieldRefs = [(0, _react.useRef)(), (0, _react.useRef)(), (0, _react.useRef)()];
  const [emailAddresses, setEmailAddress] = (0, _useStateArray.useStateArray)(numFields, "");
  const fields = new Array(numFields).fill(0).map((x, i) => {
    const name = "emailAddress" + i;
    return /*#__PURE__*/_react.default.createElement(_Field.default, {
      key: name,
      name: name,
      type: "text",
      label: (0, _languageHandler._t)("Email address"),
      placeholder: (0, _languageHandler._t)("Email"),
      value: emailAddresses[i],
      onChange: ev => setEmailAddress(i, ev.target.value),
      ref: fieldRefs[i],
      onValidate: validateEmailRules,
      autoFocus: i === 0,
      disabled: busy
    });
  });

  const onNextClick = async ev => {
    ev.preventDefault();
    if (busy) return;
    setError("");

    for (let i = 0; i < fieldRefs.length; i++) {
      const fieldRef = fieldRefs[i];
      const valid = await fieldRef.current.validate({
        allowEmpty: true
      });

      if (valid === false) {
        // true/null are allowed
        fieldRef.current.focus();
        fieldRef.current.validate({
          allowEmpty: true,
          focused: true
        });
        return;
      }
    }

    setBusy(true);
    const targetIds = emailAddresses.map(name => name.trim()).filter(Boolean);

    try {
      const result = await (0, _RoomInvite.inviteMultipleToRoom)(space.roomId, targetIds);
      const failedUsers = Object.keys(result.states).filter(a => result.states[a] === "error");

      if (failedUsers.length > 0) {
        _logger.logger.log("Failed to invite users to space: ", result);

        setError((0, _languageHandler._t)("Failed to invite the following users to your space: %(csvUsers)s", {
          csvUsers: failedUsers.join(", ")
        }));
      } else {
        onFinished();
      }
    } catch (err) {
      _logger.logger.error("Failed to invite users to space: ", err);

      setError((0, _languageHandler._t)("We couldn't invite those users. Please check the users you want to invite and try again."));
    }

    setBusy(false);
  };

  let onClick = ev => {
    ev.preventDefault();
    onFinished();
  };

  let buttonLabel = (0, _languageHandler._t)("Skip for now");

  if (emailAddresses.some(name => name.trim())) {
    onClick = onNextClick;
    buttonLabel = busy ? (0, _languageHandler._t)("Inviting...") : (0, _languageHandler._t)("Continue");
  }

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_SpaceRoomView_inviteTeammates"
  }, /*#__PURE__*/_react.default.createElement("h1", null, (0, _languageHandler._t)("Invite your teammates")), /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_SpaceRoomView_description"
  }, (0, _languageHandler._t)("Make sure the right people have access. You can invite more later.")), /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_SpaceRoomView_inviteTeammates_betaDisclaimer"
  }, (0, _languageHandler._t)("<b>This is an experimental feature.</b> For now, " + "new users receiving an invite will have to open the invite on <link/> to actually join.", {}, {
    b: sub => /*#__PURE__*/_react.default.createElement("b", null, sub),
    link: () => /*#__PURE__*/_react.default.createElement("a", {
      href: "https://app.element.io/",
      rel: "noreferrer noopener",
      target: "_blank"
    }, "app.element.io")
  })), error && /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_SpaceRoomView_errorText"
  }, error), /*#__PURE__*/_react.default.createElement("form", {
    onSubmit: onClick,
    id: "mx_SpaceSetupPrivateInvite"
  }, fields), /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_SpaceRoomView_inviteTeammates_buttons"
  }, /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
    className: "mx_SpaceRoomView_inviteTeammates_inviteDialogButton",
    onClick: () => (0, _RoomInvite.showRoomInviteDialog)(space.roomId)
  }, (0, _languageHandler._t)("Invite by username"))), /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_SpaceRoomView_buttons"
  }, /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
    kind: "primary",
    disabled: busy,
    onClick: onClick,
    element: "input",
    type: "submit",
    form: "mx_SpaceSetupPrivateInvite",
    value: buttonLabel
  })));
};

class SpaceRoomView extends _react.default.PureComponent {
  constructor(props, context) {
    var _this$props$space$cur;

    super(props, context);
    (0, _defineProperty2.default)(this, "creator", void 0);
    (0, _defineProperty2.default)(this, "dispatcherRef", void 0);
    (0, _defineProperty2.default)(this, "rightPanelStoreToken", void 0);
    (0, _defineProperty2.default)(this, "onMyMembership", (room, myMembership) => {
      if (room.roomId === this.props.space.roomId) {
        this.setState({
          myMembership
        });
      }
    });
    (0, _defineProperty2.default)(this, "onRightPanelStoreUpdate", () => {
      this.setState({
        showRightPanel: _RightPanelStore.default.getSharedInstance().isOpenForRoom
      });
    });
    (0, _defineProperty2.default)(this, "onAction", payload => {
      if (payload.action === "view_room" && payload.room_id === this.props.space.roomId) {
        this.setState({
          phase: Phase.Landing
        });
        return;
      }

      if (payload.action !== _actions.Action.ViewUser && payload.action !== "view_3pid_invite") return;

      if (payload.action === _actions.Action.ViewUser && payload.member) {
        _dispatcher.default.dispatch({
          action: _actions.Action.SetRightPanelPhase,
          phase: _RightPanelStorePhases.RightPanelPhases.SpaceMemberInfo,
          refireParams: {
            space: this.props.space,
            member: payload.member
          }
        });
      } else if (payload.action === "view_3pid_invite" && payload.event) {
        _dispatcher.default.dispatch({
          action: _actions.Action.SetRightPanelPhase,
          phase: _RightPanelStorePhases.RightPanelPhases.Space3pidMemberInfo,
          refireParams: {
            space: this.props.space,
            event: payload.event
          }
        });
      } else {
        _dispatcher.default.dispatch({
          action: _actions.Action.SetRightPanelPhase,
          phase: _RightPanelStorePhases.RightPanelPhases.SpaceMemberList,
          refireParams: {
            space: this.props.space
          }
        });
      }
    });
    (0, _defineProperty2.default)(this, "goToFirstRoom", async () => {
      if (this.state.firstRoomId) {
        _dispatcher.default.dispatch({
          action: "view_room",
          room_id: this.state.firstRoomId
        });

        return;
      }

      this.setState({
        phase: Phase.Landing
      });
    });
    let phase = Phase.Landing;
    this.creator = (_this$props$space$cur = this.props.space.currentState.getStateEvents(_event.EventType.RoomCreate, "")) === null || _this$props$space$cur === void 0 ? void 0 : _this$props$space$cur.getSender();
    const showSetup = this.props.justCreatedOpts && this.context.getUserId() === this.creator;

    if (showSetup) {
      phase = this.props.justCreatedOpts.createOpts.preset === _partials.Preset.PublicChat ? Phase.PublicCreateRooms : Phase.PrivateScope;
    }

    this.state = {
      phase,
      showRightPanel: _RightPanelStore.default.getSharedInstance().isOpenForRoom,
      myMembership: this.props.space.getMyMembership()
    };
    this.dispatcherRef = _dispatcher.default.register(this.onAction);
    this.rightPanelStoreToken = _RightPanelStore.default.getSharedInstance().addListener(this.onRightPanelStoreUpdate);
    this.context.on("Room.myMembership", this.onMyMembership);
  }

  componentWillUnmount() {
    _dispatcher.default.unregister(this.dispatcherRef);

    this.rightPanelStoreToken.remove();
    this.context.off("Room.myMembership", this.onMyMembership);
  }

  renderBody() {
    var _this$props$justCreat, _this$props$justCreat2;

    switch (this.state.phase) {
      case Phase.Landing:
        if (this.state.myMembership === "join" && _SpaceStore.default.spacesEnabled) {
          return /*#__PURE__*/_react.default.createElement(SpaceLanding, {
            space: this.props.space
          });
        } else {
          return /*#__PURE__*/_react.default.createElement(SpacePreview, {
            space: this.props.space,
            onJoinButtonClicked: this.props.onJoinButtonClicked,
            onRejectButtonClicked: this.props.onRejectButtonClicked
          });
        }

      case Phase.PublicCreateRooms:
        return /*#__PURE__*/_react.default.createElement(SpaceSetupFirstRooms, {
          space: this.props.space,
          title: (0, _languageHandler._t)("What are some things you want to discuss in %(spaceName)s?", {
            spaceName: ((_this$props$justCreat = this.props.justCreatedOpts) === null || _this$props$justCreat === void 0 ? void 0 : (_this$props$justCreat2 = _this$props$justCreat.createOpts) === null || _this$props$justCreat2 === void 0 ? void 0 : _this$props$justCreat2.name) || this.props.space.name
          }),
          description: (0, _languageHandler._t)("Let's create a room for each of them.") + "\n" + (0, _languageHandler._t)("You can add more later too, including already existing ones."),
          onFinished: firstRoomId => this.setState({
            phase: Phase.PublicShare,
            firstRoomId
          })
        });

      case Phase.PublicShare:
        return /*#__PURE__*/_react.default.createElement(SpaceSetupPublicShare, {
          justCreatedOpts: this.props.justCreatedOpts,
          space: this.props.space,
          onFinished: this.goToFirstRoom,
          firstRoomId: this.state.firstRoomId
        });

      case Phase.PrivateScope:
        return /*#__PURE__*/_react.default.createElement(SpaceSetupPrivateScope, {
          space: this.props.space,
          justCreatedOpts: this.props.justCreatedOpts,
          onFinished: invite => {
            this.setState({
              phase: invite ? Phase.PrivateCreateRooms : Phase.PrivateExistingRooms
            });
          }
        });

      case Phase.PrivateInvite:
        return /*#__PURE__*/_react.default.createElement(SpaceSetupPrivateInvite, {
          space: this.props.space,
          onFinished: () => this.setState({
            phase: Phase.Landing
          })
        });

      case Phase.PrivateCreateRooms:
        return /*#__PURE__*/_react.default.createElement(SpaceSetupFirstRooms, {
          space: this.props.space,
          title: (0, _languageHandler._t)("What projects are your team working on?"),
          description: (0, _languageHandler._t)("We'll create rooms for each of them. " + "You can add more later too, including already existing ones."),
          onFinished: firstRoomId => this.setState({
            phase: Phase.PrivateInvite,
            firstRoomId
          })
        });

      case Phase.PrivateExistingRooms:
        return /*#__PURE__*/_react.default.createElement(SpaceAddExistingRooms, {
          space: this.props.space,
          onFinished: () => this.setState({
            phase: Phase.Landing
          })
        });
    }
  }

  render() {
    const rightPanel = this.state.showRightPanel && this.state.phase === Phase.Landing ? /*#__PURE__*/_react.default.createElement(_RightPanel.default, {
      room: this.props.space,
      resizeNotifier: this.props.resizeNotifier
    }) : null;
    return /*#__PURE__*/_react.default.createElement("main", {
      className: "mx_SpaceRoomView"
    }, /*#__PURE__*/_react.default.createElement(_ErrorBoundary.default, null, /*#__PURE__*/_react.default.createElement(_MainSplit.default, {
      panel: rightPanel,
      resizeNotifier: this.props.resizeNotifier
    }, this.renderBody())));
  }

}

exports.default = SpaceRoomView;
(0, _defineProperty2.default)(SpaceRoomView, "contextType", _MatrixClientContext.default);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,