"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Analytics = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _languageHandler = require("./languageHandler");

var _PlatformPeg = _interopRequireDefault(require("./PlatformPeg"));

var _SdkConfig = _interopRequireDefault(require("./SdkConfig"));

var _Modal = _interopRequireDefault(require("./Modal"));

var sdk = _interopRequireWildcard(require("./index"));

var _logger = require("matrix-js-sdk/src/logger");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const hashRegex = /#\/(groups?|room|user|settings|register|login|forgot_password|home|directory)/;
const hashVarRegex = /#\/(group|room|user)\/.*$/; // Remove all but the first item in the hash path. Redact unexpected hashes.

function getRedactedHash(hash) {
  // Don't leak URLs we aren't expecting - they could contain tokens/PII
  const match = hashRegex.exec(hash);

  if (!match) {
    _logger.logger.warn(`Unexpected hash location "${hash}"`);

    return '#/<unexpected hash location>';
  }

  if (hashVarRegex.test(hash)) {
    return hash.replace(hashVarRegex, "#/$1/<redacted>");
  }

  return hash.replace(hashRegex, "#/$1");
} // Return the current origin, path and hash separated with a `/`. This does
// not include query parameters.


function getRedactedUrl() {
  const {
    origin,
    hash
  } = window.location;
  let {
    pathname
  } = window.location; // Redact paths which could contain unexpected PII

  if (origin.startsWith('file://')) {
    pathname = "/<redacted>/";
  }

  return origin + pathname + getRedactedHash(hash);
}

const customVariables = {
  // The Matomo installation at https://matomo.riot.im is currently configured
  // with a limit of 10 custom variables.
  'App Platform': {
    id: 1,
    expl: (0, _languageHandler._td)('The platform you\'re on'),
    example: 'Electron Platform'
  },
  'App Version': {
    id: 2,
    expl: (0, _languageHandler._td)('The version of %(brand)s'),
    getTextVariables: () => ({
      brand: _SdkConfig.default.get().brand
    }),
    example: '15.0.0'
  },
  'User Type': {
    id: 3,
    expl: (0, _languageHandler._td)('Whether or not you\'re logged in (we don\'t record your username)'),
    example: 'Logged In'
  },
  'Chosen Language': {
    id: 4,
    expl: (0, _languageHandler._td)('Your language of choice'),
    example: 'en'
  },
  'Instance': {
    id: 5,
    expl: (0, _languageHandler._td)('Which officially provided instance you are using, if any'),
    example: 'app'
  },
  'RTE: Uses Richtext Mode': {
    id: 6,
    expl: (0, _languageHandler._td)('Whether or not you\'re using the Richtext mode of the Rich Text Editor'),
    example: 'off'
  },
  'Homeserver URL': {
    id: 7,
    expl: (0, _languageHandler._td)('Your homeserver\'s URL'),
    example: 'https://matrix.org'
  },
  'Touch Input': {
    id: 8,
    expl: (0, _languageHandler._td)("Whether you're using %(brand)s on a device where touch is the primary input mechanism"),
    getTextVariables: () => ({
      brand: _SdkConfig.default.get().brand
    }),
    example: 'false'
  },
  'Breadcrumbs': {
    id: 9,
    expl: (0, _languageHandler._td)("Whether or not you're using the 'breadcrumbs' feature (avatars above the room list)"),
    example: 'disabled'
  },
  'Installed PWA': {
    id: 10,
    expl: (0, _languageHandler._td)("Whether you're using %(brand)s as an installed Progressive Web App"),
    getTextVariables: () => ({
      brand: _SdkConfig.default.get().brand
    }),
    example: 'false'
  }
};

function whitelistRedact(whitelist, str) {
  if (whitelist.includes(str)) return str;
  return '<redacted>';
}

const UID_KEY = "mx_Riot_Analytics_uid";
const CREATION_TS_KEY = "mx_Riot_Analytics_cts";
const VISIT_COUNT_KEY = "mx_Riot_Analytics_vc";
const LAST_VISIT_TS_KEY = "mx_Riot_Analytics_lvts";

function getUid() {
  try {
    let data = localStorage && localStorage.getItem(UID_KEY);

    if (!data && localStorage) {
      localStorage.setItem(UID_KEY, data = [...Array(16)].map(() => Math.random().toString(16)[2]).join(''));
    }

    return data;
  } catch (e) {
    _logger.logger.error("Analytics error: ", e);

    return "";
  }
}

const HEARTBEAT_INTERVAL = 30 * 1000; // seconds

class Analytics {
  // {[id: number]: [name: string, value: string]}
  constructor() {
    (0, _defineProperty2.default)(this, "baseUrl", null);
    (0, _defineProperty2.default)(this, "siteId", null);
    (0, _defineProperty2.default)(this, "visitVariables", {});
    (0, _defineProperty2.default)(this, "firstPage", true);
    (0, _defineProperty2.default)(this, "heartbeatIntervalID", null);
    (0, _defineProperty2.default)(this, "creationTs", void 0);
    (0, _defineProperty2.default)(this, "lastVisitTs", void 0);
    (0, _defineProperty2.default)(this, "visitCount", void 0);
    (0, _defineProperty2.default)(this, "showDetailsModal", () => {
      let rows = [];

      if (!this.disabled) {
        rows = Object.values(this.visitVariables);
      } else {
        rows = Object.keys(customVariables).map(k => [k, (0, _languageHandler._t)('e.g. %(exampleValue)s', {
          exampleValue: customVariables[k].example
        })]);
      }

      const resolution = `${window.screen.width}x${window.screen.height}`;
      const otherVariables = [{
        expl: (0, _languageHandler._td)('Every page you use in the app'),
        value: (0, _languageHandler._t)('e.g. <CurrentPageURL>', {}, {
          CurrentPageURL: getRedactedUrl
        })
      }, {
        expl: (0, _languageHandler._td)('Your user agent'),
        value: navigator.userAgent
      }, {
        expl: (0, _languageHandler._td)('Your device resolution'),
        value: resolution
      }]; // FIXME: Using an import will result in test failures

      const ErrorDialog = sdk.getComponent('dialogs.ErrorDialog');

      _Modal.default.createTrackedDialog('Analytics Details', '', ErrorDialog, {
        title: (0, _languageHandler._t)('Analytics'),
        description: /*#__PURE__*/_react.default.createElement("div", {
          className: "mx_AnalyticsModal"
        }, /*#__PURE__*/_react.default.createElement("div", null, (0, _languageHandler._t)('The information being sent to us to help make %(brand)s better includes:', {
          brand: _SdkConfig.default.get().brand
        })), /*#__PURE__*/_react.default.createElement("table", null, rows.map(row => /*#__PURE__*/_react.default.createElement("tr", {
          key: row[0]
        }, /*#__PURE__*/_react.default.createElement("td", null, (0, _languageHandler._t)(customVariables[row[0]].expl, customVariables[row[0]].getTextVariables ? customVariables[row[0]].getTextVariables() : null)), row[1] !== undefined && /*#__PURE__*/_react.default.createElement("td", null, /*#__PURE__*/_react.default.createElement("code", null, row[1])))), otherVariables.map((item, index) => /*#__PURE__*/_react.default.createElement("tr", {
          key: index
        }, /*#__PURE__*/_react.default.createElement("td", null, (0, _languageHandler._t)(item.expl)), /*#__PURE__*/_react.default.createElement("td", null, /*#__PURE__*/_react.default.createElement("code", null, item.value))))), /*#__PURE__*/_react.default.createElement("div", null, (0, _languageHandler._t)('Where this page includes identifiable information, such as a room, ' + 'user or group ID, that data is removed before being sent to the server.')))
      });
    });
    this.creationTs = localStorage && localStorage.getItem(CREATION_TS_KEY);

    if (!this.creationTs && localStorage) {
      localStorage.setItem(CREATION_TS_KEY, this.creationTs = String(new Date().getTime()));
    }

    this.lastVisitTs = localStorage && localStorage.getItem(LAST_VISIT_TS_KEY);
    this.visitCount = localStorage && localStorage.getItem(VISIT_COUNT_KEY) || "0";
    this.visitCount = String(parseInt(this.visitCount, 10) + 1); // increment

    if (localStorage) {
      localStorage.setItem(VISIT_COUNT_KEY, this.visitCount);
    }
  }

  get disabled() {
    return !this.baseUrl;
  }

  canEnable() {
    const config = _SdkConfig.default.get();

    return navigator.doNotTrack !== "1" && config && config.piwik && config.piwik.url && config.piwik.siteId;
  }
  /**
   * Enable Analytics if initialized but disabled
   * otherwise try and initalize, no-op if piwik config missing
   */


  async enable() {
    if (!this.disabled) return;
    if (!this.canEnable()) return;

    const config = _SdkConfig.default.get();

    this.baseUrl = new URL("piwik.php", config.piwik.url); // set constants

    this.baseUrl.searchParams.set("rec", "1"); // rec is required for tracking

    this.baseUrl.searchParams.set("idsite", config.piwik.siteId); // rec is required for tracking

    this.baseUrl.searchParams.set("apiv", "1"); // API version to use

    this.baseUrl.searchParams.set("send_image", "0"); // we want a 204, not a tiny GIF
    // set user parameters

    this.baseUrl.searchParams.set("_id", getUid()); // uuid

    this.baseUrl.searchParams.set("_idts", this.creationTs); // first ts

    this.baseUrl.searchParams.set("_idvc", this.visitCount); // visit count

    if (this.lastVisitTs) {
      this.baseUrl.searchParams.set("_viewts", this.lastVisitTs); // last visit ts
    }

    const platform = _PlatformPeg.default.get();

    this.setVisitVariable('App Platform', platform.getHumanReadableName());

    try {
      this.setVisitVariable('App Version', await platform.getAppVersion());
    } catch (e) {
      this.setVisitVariable('App Version', 'unknown');
    }

    this.setVisitVariable('Chosen Language', (0, _languageHandler.getCurrentLanguage)());
    const hostname = window.location.hostname;

    if (hostname === 'riot.im') {
      this.setVisitVariable('Instance', window.location.pathname);
    } else if (hostname.endsWith('.element.io')) {
      this.setVisitVariable('Instance', hostname.replace('.element.io', ''));
    }

    let installedPWA = "unknown";

    try {
      // Known to work at least for desktop Chrome
      installedPWA = String(window.matchMedia('(display-mode: standalone)').matches);
    } catch (e) {}

    this.setVisitVariable('Installed PWA', installedPWA);
    let touchInput = "unknown";

    try {
      // MDN claims broad support across browsers
      touchInput = String(window.matchMedia('(pointer: coarse)').matches);
    } catch (e) {}

    this.setVisitVariable('Touch Input', touchInput); // start heartbeat

    this.heartbeatIntervalID = window.setInterval(this.ping.bind(this), HEARTBEAT_INTERVAL);
  }
  /**
   * Disable Analytics, stop the heartbeat and clear identifiers from localStorage
   */


  disable() {
    if (this.disabled) return;
    this.trackEvent('Analytics', 'opt-out');
    window.clearInterval(this.heartbeatIntervalID);
    this.baseUrl = null;
    this.visitVariables = {};
    localStorage.removeItem(UID_KEY);
    localStorage.removeItem(CREATION_TS_KEY);
    localStorage.removeItem(VISIT_COUNT_KEY);
    localStorage.removeItem(LAST_VISIT_TS_KEY);
  }

  async track(data) {
    if (this.disabled) return;
    const now = new Date();

    const params = _objectSpread(_objectSpread({}, data), {}, {
      url: getRedactedUrl(),
      _cvar: JSON.stringify(this.visitVariables),
      // user custom vars
      res: `${window.screen.width}x${window.screen.height}`,
      // resolution as WWWWxHHHH
      rand: String(Math.random()).slice(2, 8),
      // random nonce to cache-bust
      h: now.getHours(),
      m: now.getMinutes(),
      s: now.getSeconds()
    });

    const url = new URL(this.baseUrl.toString()); // copy

    for (const key in params) {
      url.searchParams.set(key, params[key]);
    }

    try {
      await window.fetch(url.toString(), {
        method: "GET",
        mode: "no-cors",
        cache: "no-cache",
        redirect: "follow"
      });
    } catch (e) {
      _logger.logger.error("Analytics error: ", e);
    }
  }

  ping() {
    this.track({
      ping: "1"
    });
    localStorage.setItem(LAST_VISIT_TS_KEY, String(new Date().getTime())); // update last visit ts
  }

  trackPageChange(generationTimeMs) {
    if (this.disabled) return;

    if (this.firstPage) {
      // De-duplicate first page
      // router seems to hit the fn twice
      this.firstPage = false;
      return;
    }

    if (typeof generationTimeMs !== 'number') {
      _logger.logger.warn('Analytics.trackPageChange: expected generationTimeMs to be a number'); // But continue anyway because we still want to track the change

    }

    this.track({
      gt_ms: String(generationTimeMs)
    });
  }

  trackEvent(category, action, name, value) {
    if (this.disabled) return;
    this.track({
      e_c: category,
      e_a: action,
      e_n: name,
      e_v: value
    });
  }

  setVisitVariable(key, value) {
    if (this.disabled) return;
    this.visitVariables[customVariables[key].id] = [key, value];
  }

  setLoggedIn(isGuest, homeserverUrl) {
    if (this.disabled) return;

    const config = _SdkConfig.default.get();

    if (!config.piwik) return;
    const whitelistedHSUrls = config.piwik.whitelistedHSUrls || [];
    this.setVisitVariable('User Type', isGuest ? 'Guest' : 'Logged In');
    this.setVisitVariable('Homeserver URL', whitelistRedact(whitelistedHSUrls, homeserverUrl));
  }

  setBreadcrumbs(state) {
    if (this.disabled) return;
    this.setVisitVariable('Breadcrumbs', state ? 'enabled' : 'disabled');
  }

}

exports.Analytics = Analytics;

if (!window.mxAnalytics) {
  window.mxAnalytics = new Analytics();
}

var _default = window.mxAnalytics;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,