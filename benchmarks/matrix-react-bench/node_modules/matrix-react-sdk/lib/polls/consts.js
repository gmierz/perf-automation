"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.POLL_START_EVENT_TYPE = exports.POLL_RESPONSE_EVENT_TYPE = exports.POLL_KIND_UNDISCLOSED = exports.POLL_KIND_DISCLOSED = void 0;
exports.makePollContent = makePollContent;

var _NamespacedValue = require("matrix-js-sdk/src/NamespacedValue");

/*
Copyright 2021 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const POLL_START_EVENT_TYPE = new _NamespacedValue.UnstableValue("m.poll.start", "org.matrix.msc3381.poll.start");
exports.POLL_START_EVENT_TYPE = POLL_START_EVENT_TYPE;
const POLL_RESPONSE_EVENT_TYPE = new _NamespacedValue.UnstableValue("m.poll.response", "org.matrix.msc3381.poll.response");
exports.POLL_RESPONSE_EVENT_TYPE = POLL_RESPONSE_EVENT_TYPE;
const POLL_KIND_DISCLOSED = new _NamespacedValue.UnstableValue("m.poll.disclosed", "org.matrix.msc3381.poll.disclosed");
exports.POLL_KIND_DISCLOSED = POLL_KIND_DISCLOSED;
const POLL_KIND_UNDISCLOSED = new _NamespacedValue.UnstableValue("m.poll.undisclosed", "org.matrix.msc3381.poll.undisclosed"); // TODO: [TravisR] Use extensible events library when ready

exports.POLL_KIND_UNDISCLOSED = POLL_KIND_UNDISCLOSED;
const TEXT_NODE_TYPE = "org.matrix.msc1767.text";

function makePollContent(question, answers, kind) {
  question = question.trim();
  answers = answers.map(a => a.trim()).filter(a => !!a);
  return {
    [TEXT_NODE_TYPE]: `${question}\n${answers.map((a, i) => `${i + 1}. ${a}`).join('\n')}`,
    [POLL_START_EVENT_TYPE.name]: {
      kind: kind,
      question: {
        [TEXT_NODE_TYPE]: question
      },
      answers: answers.map((a, i) => ({
        id: `${i}-${a}`,
        [TEXT_NODE_TYPE]: a
      }))
    }
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wb2xscy9jb25zdHMudHMiXSwibmFtZXMiOlsiUE9MTF9TVEFSVF9FVkVOVF9UWVBFIiwiVW5zdGFibGVWYWx1ZSIsIlBPTExfUkVTUE9OU0VfRVZFTlRfVFlQRSIsIlBPTExfS0lORF9ESVNDTE9TRUQiLCJQT0xMX0tJTkRfVU5ESVNDTE9TRUQiLCJURVhUX05PREVfVFlQRSIsIm1ha2VQb2xsQ29udGVudCIsInF1ZXN0aW9uIiwiYW5zd2VycyIsImtpbmQiLCJ0cmltIiwibWFwIiwiYSIsImZpbHRlciIsImkiLCJqb2luIiwibmFtZSIsImlkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQWdCQTs7QUFoQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBS08sTUFBTUEscUJBQXFCLEdBQUcsSUFBSUMsOEJBQUosQ0FBa0IsY0FBbEIsRUFBa0MsK0JBQWxDLENBQTlCOztBQUNBLE1BQU1DLHdCQUF3QixHQUFHLElBQUlELDhCQUFKLENBQWtCLGlCQUFsQixFQUFxQyxrQ0FBckMsQ0FBakM7O0FBQ0EsTUFBTUUsbUJBQW1CLEdBQUcsSUFBSUYsOEJBQUosQ0FBa0Isa0JBQWxCLEVBQXNDLG1DQUF0QyxDQUE1Qjs7QUFDQSxNQUFNRyxxQkFBcUIsR0FBRyxJQUFJSCw4QkFBSixDQUFrQixvQkFBbEIsRUFBd0MscUNBQXhDLENBQTlCLEMsQ0FFUDs7O0FBQ0EsTUFBTUksY0FBYyxHQUFHLHlCQUF2Qjs7QUF3Qk8sU0FBU0MsZUFBVCxDQUF5QkMsUUFBekIsRUFBMkNDLE9BQTNDLEVBQThEQyxJQUE5RCxFQUEwRjtBQUM3RkYsRUFBQUEsUUFBUSxHQUFHQSxRQUFRLENBQUNHLElBQVQsRUFBWDtBQUNBRixFQUFBQSxPQUFPLEdBQUdBLE9BQU8sQ0FBQ0csR0FBUixDQUFZQyxDQUFDLElBQUlBLENBQUMsQ0FBQ0YsSUFBRixFQUFqQixFQUEyQkcsTUFBM0IsQ0FBa0NELENBQUMsSUFBSSxDQUFDLENBQUNBLENBQXpDLENBQVY7QUFDQSxTQUFPO0FBQ0gsS0FBQ1AsY0FBRCxHQUFtQixHQUFFRSxRQUFTLEtBQUlDLE9BQU8sQ0FBQ0csR0FBUixDQUFZLENBQUNDLENBQUQsRUFBSUUsQ0FBSixLQUFXLEdBQUVBLENBQUMsR0FBRyxDQUFFLEtBQUlGLENBQUUsRUFBckMsRUFBd0NHLElBQXhDLENBQTZDLElBQTdDLENBQW1ELEVBRGxGO0FBRUgsS0FBQ2YscUJBQXFCLENBQUNnQixJQUF2QixHQUE4QjtBQUMxQlAsTUFBQUEsSUFBSSxFQUFFQSxJQURvQjtBQUUxQkYsTUFBQUEsUUFBUSxFQUFFO0FBQ04sU0FBQ0YsY0FBRCxHQUFrQkU7QUFEWixPQUZnQjtBQUsxQkMsTUFBQUEsT0FBTyxFQUFFQSxPQUFPLENBQUNHLEdBQVIsQ0FBWSxDQUFDQyxDQUFELEVBQUlFLENBQUosTUFBVztBQUFFRyxRQUFBQSxFQUFFLEVBQUcsR0FBRUgsQ0FBRSxJQUFHRixDQUFFLEVBQWhCO0FBQW1CLFNBQUNQLGNBQUQsR0FBa0JPO0FBQXJDLE9BQVgsQ0FBWjtBQUxpQjtBQUYzQixHQUFQO0FBVUgiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuQ29weXJpZ2h0IDIwMjEgVGhlIE1hdHJpeC5vcmcgRm91bmRhdGlvbiBDLkkuQy5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG5pbXBvcnQgeyBVbnN0YWJsZVZhbHVlIH0gZnJvbSBcIm1hdHJpeC1qcy1zZGsvc3JjL05hbWVzcGFjZWRWYWx1ZVwiO1xuaW1wb3J0IHsgSUNvbnRlbnQgfSBmcm9tIFwibWF0cml4LWpzLXNkay9zcmMvbW9kZWxzL2V2ZW50XCI7XG5cbmV4cG9ydCBjb25zdCBQT0xMX1NUQVJUX0VWRU5UX1RZUEUgPSBuZXcgVW5zdGFibGVWYWx1ZShcIm0ucG9sbC5zdGFydFwiLCBcIm9yZy5tYXRyaXgubXNjMzM4MS5wb2xsLnN0YXJ0XCIpO1xuZXhwb3J0IGNvbnN0IFBPTExfUkVTUE9OU0VfRVZFTlRfVFlQRSA9IG5ldyBVbnN0YWJsZVZhbHVlKFwibS5wb2xsLnJlc3BvbnNlXCIsIFwib3JnLm1hdHJpeC5tc2MzMzgxLnBvbGwucmVzcG9uc2VcIik7XG5leHBvcnQgY29uc3QgUE9MTF9LSU5EX0RJU0NMT1NFRCA9IG5ldyBVbnN0YWJsZVZhbHVlKFwibS5wb2xsLmRpc2Nsb3NlZFwiLCBcIm9yZy5tYXRyaXgubXNjMzM4MS5wb2xsLmRpc2Nsb3NlZFwiKTtcbmV4cG9ydCBjb25zdCBQT0xMX0tJTkRfVU5ESVNDTE9TRUQgPSBuZXcgVW5zdGFibGVWYWx1ZShcIm0ucG9sbC51bmRpc2Nsb3NlZFwiLCBcIm9yZy5tYXRyaXgubXNjMzM4MS5wb2xsLnVuZGlzY2xvc2VkXCIpO1xuXG4vLyBUT0RPOiBbVHJhdmlzUl0gVXNlIGV4dGVuc2libGUgZXZlbnRzIGxpYnJhcnkgd2hlbiByZWFkeVxuY29uc3QgVEVYVF9OT0RFX1RZUEUgPSBcIm9yZy5tYXRyaXgubXNjMTc2Ny50ZXh0XCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVBvbGxBbnN3ZXIgZXh0ZW5kcyBJQ29udGVudCB7XG4gICAgaWQ6IHN0cmluZztcbiAgICBbVEVYVF9OT0RFX1RZUEVdOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVBvbGxDb250ZW50IGV4dGVuZHMgSUNvbnRlbnQge1xuICAgIFtQT0xMX1NUQVJUX0VWRU5UX1RZUEUubmFtZV06IHtcbiAgICAgICAga2luZDogc3RyaW5nOyAvLyBkaXNjbG9zZWQgb3IgdW5kaXNjbG9zZWQgKHVudHlwZWFibGUgZm9yIG5vdylcbiAgICAgICAgcXVlc3Rpb246IHtcbiAgICAgICAgICAgIFtURVhUX05PREVfVFlQRV06IHN0cmluZztcbiAgICAgICAgfTtcbiAgICAgICAgYW5zd2VyczogSVBvbGxBbnN3ZXJbXTtcbiAgICB9O1xuICAgIFtURVhUX05PREVfVFlQRV06IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJUG9sbFJlc3BvbnNlIGV4dGVuZHMgSUNvbnRlbnQge1xuICAgIFtQT0xMX1JFU1BPTlNFX0VWRU5UX1RZUEUubmFtZV06IHtcbiAgICAgICAgYW5zd2Vyczogc3RyaW5nW107XG4gICAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1ha2VQb2xsQ29udGVudChxdWVzdGlvbjogc3RyaW5nLCBhbnN3ZXJzOiBzdHJpbmdbXSwga2luZDogc3RyaW5nKTogSVBvbGxDb250ZW50IHtcbiAgICBxdWVzdGlvbiA9IHF1ZXN0aW9uLnRyaW0oKTtcbiAgICBhbnN3ZXJzID0gYW5zd2Vycy5tYXAoYSA9PiBhLnRyaW0oKSkuZmlsdGVyKGEgPT4gISFhKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBbVEVYVF9OT0RFX1RZUEVdOiBgJHtxdWVzdGlvbn1cXG4ke2Fuc3dlcnMubWFwKChhLCBpKSA9PiBgJHtpICsgMX0uICR7YX1gKS5qb2luKCdcXG4nKX1gLFxuICAgICAgICBbUE9MTF9TVEFSVF9FVkVOVF9UWVBFLm5hbWVdOiB7XG4gICAgICAgICAgICBraW5kOiBraW5kLFxuICAgICAgICAgICAgcXVlc3Rpb246IHtcbiAgICAgICAgICAgICAgICBbVEVYVF9OT0RFX1RZUEVdOiBxdWVzdGlvbixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhbnN3ZXJzOiBhbnN3ZXJzLm1hcCgoYSwgaSkgPT4gKHsgaWQ6IGAke2l9LSR7YX1gLCBbVEVYVF9OT0RFX1RZUEVdOiBhIH0pKSxcbiAgICAgICAgfSxcbiAgICB9O1xufVxuIl19