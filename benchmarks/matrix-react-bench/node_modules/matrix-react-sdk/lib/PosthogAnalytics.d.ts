import { PostHog } from 'posthog-js';
import { MatrixClient } from "matrix-js-sdk/src/client";
interface IEvent {
    eventName: string;
    properties: {};
}
export declare enum Anonymity {
    Disabled = 0,
    Anonymous = 1,
    Pseudonymous = 2
}
export interface IPseudonymousEvent extends IEvent {
}
export interface IAnonymousEvent extends IEvent {
}
export interface IRoomEvent extends IPseudonymousEvent {
    hashedRoomId: string;
}
export declare function getRedactedCurrentLocation(origin: string, hash: string, pathname: string, anonymity: Anonymity): Promise<string>;
export declare class PosthogAnalytics {
    private readonly posthog;
    private anonymity;
    private enabled;
    private static _instance;
    private platformSuperProperties;
    private static ANALYTICS_ID_EVENT_TYPE;
    static get instance(): PosthogAnalytics;
    constructor(posthog: PostHog);
    private sanitizeProperties;
    private static getAnonymityFromSettings;
    private registerSuperProperties;
    private static getPlatformProperties;
    private capture;
    isEnabled(): boolean;
    setAnonymity(anonymity: Anonymity): void;
    private static getRandomAnalyticsId;
    identifyUser(client: MatrixClient, analyticsIdGenerator: () => string): Promise<void>;
    getAnonymity(): Anonymity;
    logout(): void;
    trackPseudonymousEvent<E extends IPseudonymousEvent>(eventName: E["eventName"], properties?: E["properties"]): Promise<void>;
    trackAnonymousEvent<E extends IAnonymousEvent>(eventName: E["eventName"], properties?: E["properties"]): Promise<void>;
    trackPageView(durationMs: number): Promise<void>;
    updatePlatformSuperProperties(): Promise<void>;
    updateAnonymityFromSettings(userId?: string): Promise<void>;
}
export {};
