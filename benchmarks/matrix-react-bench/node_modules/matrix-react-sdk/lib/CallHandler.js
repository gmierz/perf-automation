"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.VIRTUAL_ROOM_EVENT_TYPE = exports.PlaceCallType = exports.PROTOCOL_SIP_VIRTUAL = exports.PROTOCOL_SIP_NATIVE = exports.PROTOCOL_PSTN_PREFIXED = exports.PROTOCOL_PSTN = exports.CallHandlerEvent = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _MatrixClientPeg = require("./MatrixClientPeg");

var _Modal = _interopRequireDefault(require("./Modal"));

var _languageHandler = require("./languageHandler");

var _dispatcher = _interopRequireDefault(require("./dispatcher/dispatcher"));

var _WidgetUtils = _interopRequireDefault(require("./utils/WidgetUtils"));

var _SettingsStore = _interopRequireDefault(require("./settings/SettingsStore"));

var _Jitsi = require("./widgets/Jitsi");

var _WidgetType = require("./widgets/WidgetType");

var _SettingLevel = require("./settings/SettingLevel");

var _rfc = require("rfc4648");

var _QuestionDialog = _interopRequireDefault(require("./components/views/dialogs/QuestionDialog"));

var _ErrorDialog = _interopRequireDefault(require("./components/views/dialogs/ErrorDialog"));

var _WidgetStore = _interopRequireDefault(require("./stores/WidgetStore"));

var _WidgetMessagingStore = require("./stores/widgets/WidgetMessagingStore");

var _ElementWidgetActions = require("./stores/widgets/ElementWidgetActions");

var _call = require("matrix-js-sdk/src/webrtc/call");

var _Analytics = _interopRequireDefault(require("./Analytics"));

var _CountlyAnalytics = _interopRequireDefault(require("./CountlyAnalytics"));

var _UIFeature = require("./settings/UIFeature");

var _logger = require("matrix-js-sdk/src/logger");

var _actions = require("./dispatcher/actions");

var _VoipUserMapper = _interopRequireDefault(require("./VoipUserMapper"));

var _ManagedHybrid = require("./widgets/ManagedHybrid");

var _randomstring = require("matrix-js-sdk/src/randomstring");

var _events = _interopRequireDefault(require("events"));

var _SdkConfig = _interopRequireDefault(require("./SdkConfig"));

var _createRoom = require("./createRoom");

var _PushRules = require("matrix-js-sdk/src/@types/PushRules");

var _pushprocessor = require("matrix-js-sdk/src/pushprocessor");

var _WidgetLayoutStore = require("./stores/widgets/WidgetLayoutStore");

var _IncomingCallToast = _interopRequireWildcard(require("./toasts/IncomingCallToast"));

var _ToastStore = _interopRequireDefault(require("./stores/ToastStore"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
Copyright 2015, 2016 OpenMarket Ltd
Copyright 2017, 2018 New Vector Ltd
Copyright 2019 - 2021 The Matrix.org Foundation C.I.C.
Copyright 2021 Å imon Brandner <simon.bra.ag@gmail.com>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/*
 * Manages a list of all the currently active calls.
 *
 * This handler dispatches when voip calls are added/updated/removed from this list:
 * {
 *   action: 'call_state'
 *   room_id: <room ID of the call>
 * }
 *
 * To know the state of the call, this handler exposes a getter to
 * obtain the call for a room:
 *   var call = CallHandler.getCall(roomId)
 *   var state = call.call_state; // ringing|ringback|connected|ended|busy|stop_ringback|stop_ringing
 *
 * This handler listens for and handles the following actions:
 * {
 *   action: 'place_call',
 *   type: 'voice|video',
 *   room_id: <room that the place call button was pressed in>
 * }
 *
 * {
 *   action: 'incoming_call'
 *   call: MatrixCall
 * }
 *
 * {
 *   action: 'hangup'
 *   room_id: <room that the hangup button was pressed in>
 * }
 *
 * {
 *   action: 'answer'
 *   room_id: <room that the answer button was pressed in>
 * }
 */
const PROTOCOL_PSTN = 'm.protocol.pstn';
exports.PROTOCOL_PSTN = PROTOCOL_PSTN;
const PROTOCOL_PSTN_PREFIXED = 'im.vector.protocol.pstn';
exports.PROTOCOL_PSTN_PREFIXED = PROTOCOL_PSTN_PREFIXED;
const PROTOCOL_SIP_NATIVE = 'im.vector.protocol.sip_native';
exports.PROTOCOL_SIP_NATIVE = PROTOCOL_SIP_NATIVE;
const PROTOCOL_SIP_VIRTUAL = 'im.vector.protocol.sip_virtual';
exports.PROTOCOL_SIP_VIRTUAL = PROTOCOL_SIP_VIRTUAL;
const CHECK_PROTOCOLS_ATTEMPTS = 3; // Event type for room account data and room creation content used to mark rooms as virtual rooms
// (and store the ID of their native room)

const VIRTUAL_ROOM_EVENT_TYPE = 'im.vector.is_virtual_room';
exports.VIRTUAL_ROOM_EVENT_TYPE = VIRTUAL_ROOM_EVENT_TYPE;
var AudioID;

(function (AudioID) {
  AudioID["Ring"] = "ringAudio";
  AudioID["Ringback"] = "ringbackAudio";
  AudioID["CallEnd"] = "callendAudio";
  AudioID["Busy"] = "busyAudio";
})(AudioID || (AudioID = {}));

let PlaceCallType;
exports.PlaceCallType = PlaceCallType;

(function (PlaceCallType) {
  PlaceCallType["Voice"] = "voice";
  PlaceCallType["Video"] = "video";
})(PlaceCallType || (exports.PlaceCallType = PlaceCallType = {}));

let CallHandlerEvent;
exports.CallHandlerEvent = CallHandlerEvent;

(function (CallHandlerEvent) {
  CallHandlerEvent["CallsChanged"] = "calls_changed";
  CallHandlerEvent["CallChangeRoom"] = "call_change_room";
  CallHandlerEvent["SilencedCallsChanged"] = "silenced_calls_changed";
})(CallHandlerEvent || (exports.CallHandlerEvent = CallHandlerEvent = {}));

class CallHandler extends _events.default {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "calls", new Map());
    (0, _defineProperty2.default)(this, "transferees", new Map());
    (0, _defineProperty2.default)(this, "audioPromises", new Map());
    (0, _defineProperty2.default)(this, "dispatcherRef", null);
    (0, _defineProperty2.default)(this, "supportsPstnProtocol", null);
    (0, _defineProperty2.default)(this, "pstnSupportPrefixed", null);
    (0, _defineProperty2.default)(this, "supportsSipNativeVirtual", null);
    (0, _defineProperty2.default)(this, "pstnSupportCheckTimer", void 0);
    (0, _defineProperty2.default)(this, "invitedRoomsAreVirtual", new Map());
    (0, _defineProperty2.default)(this, "invitedRoomCheckInProgress", false);
    (0, _defineProperty2.default)(this, "assertedIdentityNativeUsers", new Map());
    (0, _defineProperty2.default)(this, "silencedCalls", new Set());
    (0, _defineProperty2.default)(this, "onCallIncoming", call => {
      // we dispatch this synchronously to make sure that the event
      // handlers on the call are set up immediately (so that if
      // we get an immediate hangup, we don't get a stuck call)
      _dispatcher.default.dispatch({
        action: 'incoming_call',
        call: call
      }, true);
    });
    (0, _defineProperty2.default)(this, "onCallStateChanged", (newState, oldState, call) => {
      if (!this.matchesCallForThisRoom(call)) return;
      const mappedRoomId = this.roomIdForCall(call);
      this.setCallState(call, newState);

      switch (oldState) {
        case _call.CallState.Ringing:
          this.pause(AudioID.Ring);
          break;

        case _call.CallState.InviteSent:
          this.pause(AudioID.Ringback);
          break;
      }

      if (newState !== _call.CallState.Ringing) {
        this.silencedCalls.delete(call.callId);
      }

      switch (newState) {
        case _call.CallState.Ringing:
          {
            const incomingCallPushRule = new _pushprocessor.PushProcessor(_MatrixClientPeg.MatrixClientPeg.get()).getPushRuleById(_PushRules.RuleId.IncomingCall);
            const pushRuleEnabled = incomingCallPushRule === null || incomingCallPushRule === void 0 ? void 0 : incomingCallPushRule.enabled;
            const tweakSetToRing = incomingCallPushRule === null || incomingCallPushRule === void 0 ? void 0 : incomingCallPushRule.actions.some(action => action.set_tweak === _PushRules.TweakName.Sound && action.value === "ring");

            if (pushRuleEnabled && tweakSetToRing) {
              this.play(AudioID.Ring);
            } else {
              this.silenceCall(call.callId);
            }

            break;
          }

        case _call.CallState.InviteSent:
          {
            this.play(AudioID.Ringback);
            break;
          }

        case _call.CallState.Ended:
          {
            const hangupReason = call.hangupReason;

            _Analytics.default.trackEvent('voip', 'callEnded', 'hangupReason', hangupReason);

            this.removeCallForRoom(mappedRoomId);

            if (oldState === _call.CallState.InviteSent && call.hangupParty === _call.CallParty.Remote) {
              this.play(AudioID.Busy); // Don't show a modal when we got rejected/the call was hung up

              if (!hangupReason || [_call.CallErrorCode.UserHangup, "user hangup"].includes(hangupReason)) break;
              let title;
              let description; // TODO: We should either do away with these or figure out a copy for each code (expect user_hangup...)

              if (call.hangupReason === _call.CallErrorCode.UserBusy) {
                title = (0, _languageHandler._t)("User Busy");
                description = (0, _languageHandler._t)("The user you called is busy.");
              } else {
                title = (0, _languageHandler._t)("Call Failed");
                description = (0, _languageHandler._t)("The call could not be established");
              }

              _Modal.default.createTrackedDialog('Call Handler', 'Call Failed', _ErrorDialog.default, {
                title,
                description
              });
            } else if (hangupReason === _call.CallErrorCode.AnsweredElsewhere && oldState === _call.CallState.Connecting) {
              _Modal.default.createTrackedDialog('Call Handler', 'Call Failed', _ErrorDialog.default, {
                title: (0, _languageHandler._t)("Answered Elsewhere"),
                description: (0, _languageHandler._t)("The call was answered on another device.")
              });
            } else if (oldState !== _call.CallState.Fledgling && oldState !== _call.CallState.Ringing) {
              // don't play the end-call sound for calls that never got off the ground
              this.play(AudioID.CallEnd);
            }

            this.logCallStats(call, mappedRoomId);
            break;
          }
      }
    });
    (0, _defineProperty2.default)(this, "onAction", payload => {
      switch (payload.action) {
        case 'place_call':
          {
            // We might be using managed hybrid widgets
            if ((0, _ManagedHybrid.isManagedHybridWidgetEnabled)()) {
              (0, _ManagedHybrid.addManagedHybridWidget)(payload.room_id);
              return;
            } // if the runtime env doesn't do VoIP, whine.


            if (!_MatrixClientPeg.MatrixClientPeg.get().supportsVoip()) {
              _Modal.default.createTrackedDialog('Call Handler', 'VoIP is unsupported', _ErrorDialog.default, {
                title: (0, _languageHandler._t)('VoIP is unsupported'),
                description: (0, _languageHandler._t)('You cannot place VoIP calls in this browser.')
              });

              return;
            } // don't allow > 2 calls to be placed.


            if (this.getAllActiveCalls().length > 1) {
              _Modal.default.createTrackedDialog('Call Handler', 'Existing Call', _ErrorDialog.default, {
                title: (0, _languageHandler._t)('Too Many Calls'),
                description: (0, _languageHandler._t)("You've reached the maximum number of simultaneous calls.")
              });

              return;
            }

            const room = _MatrixClientPeg.MatrixClientPeg.get().getRoom(payload.room_id);

            if (!room) {
              _logger.logger.error(`Room ${payload.room_id} does not exist.`);

              return;
            } // We leave the check for whether there's already a call in this room until later,
            // otherwise it can race.


            const members = room.getJoinedMembers();

            if (members.length <= 1) {
              _Modal.default.createTrackedDialog('Call Handler', 'Cannot place call with self', _ErrorDialog.default, {
                description: (0, _languageHandler._t)('You cannot place a call with yourself.')
              });

              return;
            } else if (members.length === 2) {
              _logger.logger.info(`Place ${payload.type} call in ${payload.room_id}`);

              this.placeCall(payload.room_id, payload.type, payload.transferee);
            } else {
              // > 2
              _dispatcher.default.dispatch({
                action: "place_conference_call",
                room_id: payload.room_id,
                type: payload.type
              });
            }
          }
          break;

        case 'place_conference_call':
          _logger.logger.info("Place conference call in " + payload.room_id);

          _Analytics.default.trackEvent('voip', 'placeConferenceCall');

          _CountlyAnalytics.default.instance.trackStartCall(payload.room_id, payload.type === PlaceCallType.Video, true);

          this.startCallApp(payload.room_id, payload.type);
          break;

        case 'end_conference':
          _logger.logger.info("Terminating conference call in " + payload.room_id);

          this.terminateCallApp(payload.room_id);
          break;

        case 'hangup_conference':
          _logger.logger.info("Leaving conference call in " + payload.room_id);

          this.hangupCallApp(payload.room_id);
          break;

        case 'incoming_call':
          {
            // if the runtime env doesn't do VoIP, stop here.
            if (!_MatrixClientPeg.MatrixClientPeg.get().supportsVoip()) {
              return;
            }

            const call = payload.call;
            const mappedRoomId = CallHandler.sharedInstance().roomIdForCall(call);

            if (this.getCallForRoom(mappedRoomId)) {
              _logger.logger.log("Got incoming call for room " + mappedRoomId + " but there's already a call for this room: ignoring");

              return;
            }

            _Analytics.default.trackEvent('voip', 'receiveCall', 'type', call.type);

            this.addCallForRoom(mappedRoomId, call);
            this.setCallListeners(call); // Explicitly handle first state change

            this.onCallStateChanged(call.state, null, call); // get ready to send encrypted events in the room, so if the user does answer
            // the call, we'll be ready to send. NB. This is the protocol-level room ID not
            // the mapped one: that's where we'll send the events.

            const cli = _MatrixClientPeg.MatrixClientPeg.get();

            cli.prepareToEncrypt(cli.getRoom(call.roomId));
          }
          break;

        case 'hangup':
        case 'reject':
          this.stopRingingIfPossible(this.calls.get(payload.room_id).callId);

          if (!this.calls.get(payload.room_id)) {
            return; // no call to hangup
          }

          if (payload.action === 'reject') {
            this.calls.get(payload.room_id).reject();
          } else {
            this.calls.get(payload.room_id).hangup(_call.CallErrorCode.UserHangup, false);
          } // don't remove the call yet: let the hangup event handler do it (otherwise it will throw
          // the hangup event away)


          break;

        case 'hangup_all':
          this.stopRingingIfPossible(this.calls.get(payload.room_id).callId);

          for (const call of this.calls.values()) {
            call.hangup(_call.CallErrorCode.UserHangup, false);
          }

          break;

        case 'answer':
          {
            this.stopRingingIfPossible(this.calls.get(payload.room_id).callId);

            if (!this.calls.has(payload.room_id)) {
              return; // no call to answer
            }

            if (this.getAllActiveCalls().length > 1) {
              _Modal.default.createTrackedDialog('Call Handler', 'Existing Call', _ErrorDialog.default, {
                title: (0, _languageHandler._t)('Too Many Calls'),
                description: (0, _languageHandler._t)("You've reached the maximum number of simultaneous calls.")
              });

              return;
            }

            const call = this.calls.get(payload.room_id);
            call.answer();
            this.setActiveCallRoomId(payload.room_id);

            _CountlyAnalytics.default.instance.trackJoinCall(payload.room_id, call.type === _call.CallType.Video, false);

            _dispatcher.default.dispatch({
              action: _actions.Action.ViewRoom,
              room_id: payload.room_id
            });

            break;
          }

        case _actions.Action.DialNumber:
          this.dialNumber(payload.number);
          break;

        case _actions.Action.TransferCallToMatrixID:
          this.startTransferToMatrixID(payload.call, payload.destination, payload.consultFirst);
          break;

        case _actions.Action.TransferCallToPhoneNumber:
          this.startTransferToPhoneNumber(payload.call, payload.destination, payload.consultFirst);
          break;
      }
    });
  }

  // callIds
  static sharedInstance() {
    if (!window.mxCallHandler) {
      window.mxCallHandler = new CallHandler();
    }

    return window.mxCallHandler;
  }
  /*
   * Gets the user-facing room associated with a call (call.roomId may be the call "virtual room"
   * if a voip_mxid_translate_pattern is set in the config)
   */


  roomIdForCall(call) {
    if (!call) return null;

    const voipConfig = _SdkConfig.default.get()['voip'];

    if (voipConfig && voipConfig.obeyAssertedIdentity) {
      const nativeUser = this.assertedIdentityNativeUsers[call.callId];

      if (nativeUser) {
        const room = (0, _createRoom.findDMForUser)(_MatrixClientPeg.MatrixClientPeg.get(), nativeUser);
        if (room) return room.roomId;
      }
    }

    return _VoipUserMapper.default.sharedInstance().nativeRoomForVirtualRoom(call.roomId) || call.roomId;
  }

  start() {
    this.dispatcherRef = _dispatcher.default.register(this.onAction); // add empty handlers for media actions, otherwise the media keys
    // end up causing the audio elements with our ring/ringback etc
    // audio clips in to play.

    if (navigator.mediaSession) {
      navigator.mediaSession.setActionHandler('play', function () {});
      navigator.mediaSession.setActionHandler('pause', function () {});
      navigator.mediaSession.setActionHandler('seekbackward', function () {});
      navigator.mediaSession.setActionHandler('seekforward', function () {});
      navigator.mediaSession.setActionHandler('previoustrack', function () {});
      navigator.mediaSession.setActionHandler('nexttrack', function () {});
    }

    if (_SettingsStore.default.getValue(_UIFeature.UIFeature.Voip)) {
      _MatrixClientPeg.MatrixClientPeg.get().on('Call.incoming', this.onCallIncoming);
    }

    this.checkProtocols(CHECK_PROTOCOLS_ATTEMPTS);
  }

  stop() {
    const cli = _MatrixClientPeg.MatrixClientPeg.get();

    if (cli) {
      cli.removeListener('Call.incoming', this.onCallIncoming);
    }

    if (this.dispatcherRef !== null) {
      _dispatcher.default.unregister(this.dispatcherRef);

      this.dispatcherRef = null;
    }
  }

  silenceCall(callId) {
    this.silencedCalls.add(callId);
    this.emit(CallHandlerEvent.SilencedCallsChanged, this.silencedCalls); // Don't pause audio if we have calls which are still ringing

    if (this.areAnyCallsUnsilenced()) return;
    this.pause(AudioID.Ring);
  }

  unSilenceCall(callId) {
    this.silencedCalls.delete(callId);
    this.emit(CallHandlerEvent.SilencedCallsChanged, this.silencedCalls);
    this.play(AudioID.Ring);
  }

  isCallSilenced(callId) {
    return this.silencedCalls.has(callId);
  }
  /**
   * Returns true if there is at least one unsilenced call
   * @returns {boolean}
   */


  areAnyCallsUnsilenced() {
    for (const call of this.calls.values()) {
      if (call.state === _call.CallState.Ringing && !this.isCallSilenced(call.callId)) {
        return true;
      }
    }

    return false;
  }

  async checkProtocols(maxTries) {
    try {
      const protocols = await _MatrixClientPeg.MatrixClientPeg.get().getThirdpartyProtocols();

      if (protocols[PROTOCOL_PSTN] !== undefined) {
        this.supportsPstnProtocol = Boolean(protocols[PROTOCOL_PSTN]);
        if (this.supportsPstnProtocol) this.pstnSupportPrefixed = false;
      } else if (protocols[PROTOCOL_PSTN_PREFIXED] !== undefined) {
        this.supportsPstnProtocol = Boolean(protocols[PROTOCOL_PSTN_PREFIXED]);
        if (this.supportsPstnProtocol) this.pstnSupportPrefixed = true;
      } else {
        this.supportsPstnProtocol = null;
      }

      _dispatcher.default.dispatch({
        action: _actions.Action.PstnSupportUpdated
      });

      if (protocols[PROTOCOL_SIP_NATIVE] !== undefined && protocols[PROTOCOL_SIP_VIRTUAL] !== undefined) {
        this.supportsSipNativeVirtual = Boolean(protocols[PROTOCOL_SIP_NATIVE] && protocols[PROTOCOL_SIP_VIRTUAL]);
      }

      _dispatcher.default.dispatch({
        action: _actions.Action.VirtualRoomSupportUpdated
      });
    } catch (e) {
      if (maxTries === 1) {
        _logger.logger.log("Failed to check for protocol support and no retries remain: assuming no support", e);
      } else {
        _logger.logger.log("Failed to check for protocol support: will retry", e);

        this.pstnSupportCheckTimer = setTimeout(() => {
          this.checkProtocols(maxTries - 1);
        }, 10000);
      }
    }
  }

  getSupportsPstnProtocol() {
    return this.supportsPstnProtocol;
  }

  getSupportsVirtualRooms() {
    return this.supportsSipNativeVirtual;
  }

  pstnLookup(phoneNumber) {
    return _MatrixClientPeg.MatrixClientPeg.get().getThirdpartyUser(this.pstnSupportPrefixed ? PROTOCOL_PSTN_PREFIXED : PROTOCOL_PSTN, {
      'm.id.phone': phoneNumber
    });
  }

  sipVirtualLookup(nativeMxid) {
    return _MatrixClientPeg.MatrixClientPeg.get().getThirdpartyUser(PROTOCOL_SIP_VIRTUAL, {
      'native_mxid': nativeMxid
    });
  }

  sipNativeLookup(virtualMxid) {
    return _MatrixClientPeg.MatrixClientPeg.get().getThirdpartyUser(PROTOCOL_SIP_NATIVE, {
      'virtual_mxid': virtualMxid
    });
  }

  getCallById(callId) {
    for (const call of this.calls.values()) {
      if (call.callId === callId) return call;
    }

    return null;
  }

  getCallForRoom(roomId) {
    return this.calls.get(roomId) || null;
  }

  getAnyActiveCall() {
    for (const call of this.calls.values()) {
      if (call.state !== _call.CallState.Ended) {
        return call;
      }
    }

    return null;
  }

  getAllActiveCalls() {
    const activeCalls = [];

    for (const call of this.calls.values()) {
      if (call.state !== _call.CallState.Ended && call.state !== _call.CallState.Ringing) {
        activeCalls.push(call);
      }
    }

    return activeCalls;
  }

  getAllActiveCallsNotInRoom(notInThisRoomId) {
    const callsNotInThatRoom = [];

    for (const [roomId, call] of this.calls.entries()) {
      if (roomId !== notInThisRoomId && call.state !== _call.CallState.Ended) {
        callsNotInThatRoom.push(call);
      }
    }

    return callsNotInThatRoom;
  }

  getAllActiveCallsForPip(roomId) {
    const room = _MatrixClientPeg.MatrixClientPeg.get().getRoom(roomId);

    if (_WidgetLayoutStore.WidgetLayoutStore.instance.hasMaximisedWidget(room)) {
      // This checks if there is space for the call view in the aux panel
      // If there is no space any call should be displayed in PiP
      return this.getAllActiveCalls();
    }

    return this.getAllActiveCallsNotInRoom(roomId);
  }

  getTransfereeForCallId(callId) {
    return this.transferees[callId];
  }

  play(audioId) {
    // TODO: Attach an invisible element for this instead
    // which listens?
    const audio = document.getElementById(audioId);

    if (audio) {
      const playAudio = async () => {
        try {
          // This still causes the chrome debugger to break on promise rejection if
          // the promise is rejected, even though we're catching the exception.
          await audio.play();
        } catch (e) {
          // This is usually because the user hasn't interacted with the document,
          // or chrome doesn't think so and is denying the request. Not sure what
          // we can really do here...
          // https://github.com/vector-im/element-web/issues/7657
          _logger.logger.log("Unable to play audio clip", e);
        }
      };

      if (this.audioPromises.has(audioId)) {
        this.audioPromises.set(audioId, this.audioPromises.get(audioId).then(() => {
          audio.load();
          return playAudio();
        }));
      } else {
        this.audioPromises.set(audioId, playAudio());
      }
    }
  }

  pause(audioId) {
    // TODO: Attach an invisible element for this instead
    // which listens?
    const audio = document.getElementById(audioId);

    if (audio) {
      if (this.audioPromises.has(audioId)) {
        this.audioPromises.set(audioId, this.audioPromises.get(audioId).then(() => audio.pause()));
      } else {
        // pause doesn't return a promise, so just do it
        audio.pause();
      }
    }
  }

  matchesCallForThisRoom(call) {
    // We don't allow placing more than one call per room, but that doesn't mean there
    // can't be more than one, eg. in a glare situation. This checks that the given call
    // is the call we consider 'the' call for its room.
    const mappedRoomId = this.roomIdForCall(call);
    const callForThisRoom = this.getCallForRoom(mappedRoomId);
    return callForThisRoom && call.callId === callForThisRoom.callId;
  }

  setCallListeners(call) {
    let mappedRoomId = this.roomIdForCall(call);
    call.on(_call.CallEvent.Error, err => {
      if (!this.matchesCallForThisRoom(call)) return;

      _Analytics.default.trackEvent('voip', 'callError', 'error', err.toString());

      _logger.logger.error("Call error:", err);

      if (err.code === _call.CallErrorCode.NoUserMedia) {
        this.showMediaCaptureError(call);
        return;
      }

      if (_MatrixClientPeg.MatrixClientPeg.get().getTurnServers().length === 0 && _SettingsStore.default.getValue("fallbackICEServerAllowed") === null) {
        this.showICEFallbackPrompt();
        return;
      }

      _Modal.default.createTrackedDialog('Call Failed', '', _ErrorDialog.default, {
        title: (0, _languageHandler._t)('Call Failed'),
        description: err.message
      });
    });
    call.on(_call.CallEvent.Hangup, () => {
      if (!this.matchesCallForThisRoom(call)) return;

      _Analytics.default.trackEvent('voip', 'callHangup');

      this.removeCallForRoom(mappedRoomId);
    });
    call.on(_call.CallEvent.State, (newState, oldState) => {
      this.onCallStateChanged(newState, oldState, call);
    });
    call.on(_call.CallEvent.Replaced, newCall => {
      if (!this.matchesCallForThisRoom(call)) return;

      _logger.logger.log(`Call ID ${call.callId} is being replaced by call ID ${newCall.callId}`);

      if (call.state === _call.CallState.Ringing) {
        this.pause(AudioID.Ring);
      } else if (call.state === _call.CallState.InviteSent) {
        this.pause(AudioID.Ringback);
      }

      this.removeCallForRoom(mappedRoomId);
      this.addCallForRoom(mappedRoomId, newCall);
      this.setCallListeners(newCall);
      this.setCallState(newCall, newCall.state);
    });
    call.on(_call.CallEvent.AssertedIdentityChanged, async () => {
      if (!this.matchesCallForThisRoom(call)) return;

      _logger.logger.log(`Call ID ${call.callId} got new asserted identity:`, call.getRemoteAssertedIdentity());

      const newAssertedIdentity = call.getRemoteAssertedIdentity().id;
      let newNativeAssertedIdentity = newAssertedIdentity;

      if (newAssertedIdentity) {
        const response = await this.sipNativeLookup(newAssertedIdentity);

        if (response.length && response[0].fields.lookup_success) {
          newNativeAssertedIdentity = response[0].userid;
        }
      }

      _logger.logger.log(`Asserted identity ${newAssertedIdentity} mapped to ${newNativeAssertedIdentity}`);

      if (newNativeAssertedIdentity) {
        this.assertedIdentityNativeUsers[call.callId] = newNativeAssertedIdentity; // If we don't already have a room with this user, make one. This will be slightly odd
        // if they called us because we'll be inviting them, but there's not much we can do about
        // this if we want the actual, native room to exist (which we do). This is why it's
        // important to only obey asserted identity in trusted environments, since anyone you're
        // on a call with can cause you to send a room invite to someone.

        await (0, _createRoom.ensureDMExists)(_MatrixClientPeg.MatrixClientPeg.get(), newNativeAssertedIdentity);
        const newMappedRoomId = this.roomIdForCall(call);

        _logger.logger.log(`Old room ID: ${mappedRoomId}, new room ID: ${newMappedRoomId}`);

        if (newMappedRoomId !== mappedRoomId) {
          this.removeCallForRoom(mappedRoomId);
          mappedRoomId = newMappedRoomId;

          _logger.logger.log("Moving call to room " + mappedRoomId);

          this.addCallForRoom(mappedRoomId, call, true);
        }
      }
    });
  }

  async logCallStats(call, mappedRoomId) {
    const stats = await call.getCurrentCallStats();

    _logger.logger.debug(`Call completed. Call ID: ${call.callId}, virtual room ID: ${call.roomId}, ` + `user-facing room ID: ${mappedRoomId}, direction: ${call.direction}, ` + `our Party ID: ${call.ourPartyId}, hangup party: ${call.hangupParty}, ` + `hangup reason: ${call.hangupReason}`);

    if (!stats) {
      _logger.logger.debug("Call statistics are undefined. The call has " + "probably failed before a peerConn was established");

      return;
    }

    _logger.logger.debug("Local candidates:");

    for (const cand of stats.filter(item => item.type === 'local-candidate')) {
      const address = cand.address || cand.ip; // firefox uses 'address', chrome uses 'ip'

      _logger.logger.debug(`${cand.id} - type: ${cand.candidateType}, address: ${address}, port: ${cand.port}, ` + `protocol: ${cand.protocol}, relay protocol: ${cand.relayProtocol}, network type: ${cand.networkType}`);
    }

    _logger.logger.debug("Remote candidates:");

    for (const cand of stats.filter(item => item.type === 'remote-candidate')) {
      const address = cand.address || cand.ip; // firefox uses 'address', chrome uses 'ip'

      _logger.logger.debug(`${cand.id} - type: ${cand.candidateType}, address: ${address}, port: ${cand.port}, ` + `protocol: ${cand.protocol}`);
    }

    _logger.logger.debug("Candidate pairs:");

    for (const pair of stats.filter(item => item.type === 'candidate-pair')) {
      _logger.logger.debug(`${pair.localCandidateId} / ${pair.remoteCandidateId} - state: ${pair.state}, ` + `nominated: ${pair.nominated}, ` + `requests sent ${pair.requestsSent}, requests received  ${pair.requestsReceived},  ` + `responses received: ${pair.responsesReceived}, responses sent: ${pair.responsesSent}, ` + `bytes received: ${pair.bytesReceived}, bytes sent: ${pair.bytesSent}, `);
    }
  }

  setCallState(call, status) {
    const mappedRoomId = CallHandler.sharedInstance().roomIdForCall(call);

    _logger.logger.log(`Call state in ${mappedRoomId} changed to ${status}`);

    const toastKey = (0, _IncomingCallToast.getIncomingCallToastKey)(call.callId);

    if (status === _call.CallState.Ringing) {
      _ToastStore.default.sharedInstance().addOrReplaceToast({
        key: toastKey,
        priority: 100,
        component: _IncomingCallToast.default,
        bodyClassName: "mx_IncomingCallToast",
        props: {
          call
        }
      });
    } else {
      _ToastStore.default.sharedInstance().dismissToast(toastKey);
    }

    _dispatcher.default.dispatch({
      action: 'call_state',
      room_id: mappedRoomId,
      state: status
    });
  }

  removeCallForRoom(roomId) {
    _logger.logger.log("Removing call for room ", roomId);

    this.calls.delete(roomId);
    this.emit(CallHandlerEvent.CallsChanged, this.calls);
  }

  showICEFallbackPrompt() {
    const cli = _MatrixClientPeg.MatrixClientPeg.get();

    const code = sub => /*#__PURE__*/_react.default.createElement("code", null, sub);

    _Modal.default.createTrackedDialog('No TURN servers', '', _QuestionDialog.default, {
      title: (0, _languageHandler._t)("Call failed due to misconfigured server"),
      description: /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Please ask the administrator of your homeserver " + "(<code>%(homeserverDomain)s</code>) to configure a TURN server in " + "order for calls to work reliably.", {
        homeserverDomain: cli.getDomain()
      }, {
        code
      })), /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Alternatively, you can try to use the public server at " + "<code>turn.matrix.org</code>, but this will not be as reliable, and " + "it will share your IP address with that server. You can also manage " + "this in Settings.", null, {
        code
      }))),
      button: (0, _languageHandler._t)('Try using turn.matrix.org'),
      cancelButton: (0, _languageHandler._t)('OK'),
      onFinished: allow => {
        _SettingsStore.default.setValue("fallbackICEServerAllowed", null, _SettingLevel.SettingLevel.DEVICE, allow);

        cli.setFallbackICEServerAllowed(allow);
      }
    }, null, true);
  }

  showMediaCaptureError(call) {
    let title;
    let description;

    if (call.type === _call.CallType.Voice) {
      title = (0, _languageHandler._t)("Unable to access microphone");
      description = /*#__PURE__*/_react.default.createElement("div", null, (0, _languageHandler._t)("Call failed because microphone could not be accessed. " + "Check that a microphone is plugged in and set up correctly."));
    } else if (call.type === _call.CallType.Video) {
      title = (0, _languageHandler._t)("Unable to access webcam / microphone");
      description = /*#__PURE__*/_react.default.createElement("div", null, (0, _languageHandler._t)("Call failed because webcam or microphone could not be accessed. Check that:"), /*#__PURE__*/_react.default.createElement("ul", null, /*#__PURE__*/_react.default.createElement("li", null, (0, _languageHandler._t)("A microphone and webcam are plugged in and set up correctly")), /*#__PURE__*/_react.default.createElement("li", null, (0, _languageHandler._t)("Permission is granted to use the webcam")), /*#__PURE__*/_react.default.createElement("li", null, (0, _languageHandler._t)("No other application is using the webcam"))));
    }

    _Modal.default.createTrackedDialog('Media capture failed', '', _ErrorDialog.default, {
      title,
      description
    }, null, true);
  }

  async placeCall(roomId, type, transferee) {
    _Analytics.default.trackEvent('voip', 'placeCall', 'type', type);

    _CountlyAnalytics.default.instance.trackStartCall(roomId, type === PlaceCallType.Video, false);

    const mappedRoomId = (await _VoipUserMapper.default.sharedInstance().getOrCreateVirtualRoomForRoom(roomId)) || roomId;

    _logger.logger.debug("Mapped real room " + roomId + " to room ID " + mappedRoomId);

    const timeUntilTurnCresExpire = _MatrixClientPeg.MatrixClientPeg.get().getTurnServersExpiry() - Date.now();

    _logger.logger.log("Current turn creds expire in " + timeUntilTurnCresExpire + " ms");

    const call = _MatrixClientPeg.MatrixClientPeg.get().createCall(mappedRoomId);

    try {
      this.addCallForRoom(roomId, call);
    } catch (e) {
      _Modal.default.createTrackedDialog('Call Handler', 'Existing Call with user', _ErrorDialog.default, {
        title: (0, _languageHandler._t)('Already in call'),
        description: (0, _languageHandler._t)("You're already in a call with this person.")
      });

      return;
    }

    if (transferee) {
      this.transferees[call.callId] = transferee;
    }

    this.setCallListeners(call);
    this.setActiveCallRoomId(roomId);

    if (type === PlaceCallType.Voice) {
      call.placeVoiceCall();
    } else if (type === 'video') {
      call.placeVideoCall();
    } else {
      _logger.logger.error("Unknown conf call type: " + type);
    }
  }

  stopRingingIfPossible(callId) {
    this.silencedCalls.delete(callId);
    if (this.areAnyCallsUnsilenced()) return;
    this.pause(AudioID.Ring);
  }

  async dialNumber(number) {
    const results = await this.pstnLookup(number);

    if (!results || results.length === 0 || !results[0].userid) {
      _Modal.default.createTrackedDialog('', '', _ErrorDialog.default, {
        title: (0, _languageHandler._t)("Unable to look up phone number"),
        description: (0, _languageHandler._t)("There was an error looking up the phone number")
      });

      return;
    }

    const userId = results[0].userid; // Now check to see if this is a virtual user, in which case we should find the
    // native user

    let nativeUserId;

    if (this.getSupportsVirtualRooms()) {
      const nativeLookupResults = await this.sipNativeLookup(userId);
      const lookupSuccess = nativeLookupResults.length > 0 && nativeLookupResults[0].fields.lookup_success;
      nativeUserId = lookupSuccess ? nativeLookupResults[0].userid : userId;

      _logger.logger.log("Looked up " + number + " to " + userId + " and mapped to native user " + nativeUserId);
    } else {
      nativeUserId = userId;
    }

    const roomId = await (0, _createRoom.ensureDMExists)(_MatrixClientPeg.MatrixClientPeg.get(), nativeUserId);

    _dispatcher.default.dispatch({
      action: _actions.Action.ViewRoom,
      room_id: roomId
    });

    await this.placeCall(roomId, PlaceCallType.Voice, null);
  }

  async startTransferToPhoneNumber(call, destination, consultFirst) {
    const results = await this.pstnLookup(destination);

    if (!results || results.length === 0 || !results[0].userid) {
      _Modal.default.createTrackedDialog('', '', _ErrorDialog.default, {
        title: (0, _languageHandler._t)("Unable to transfer call"),
        description: (0, _languageHandler._t)("There was an error looking up the phone number")
      });

      return;
    }

    await this.startTransferToMatrixID(call, results[0].userid, consultFirst);
  }

  async startTransferToMatrixID(call, destination, consultFirst) {
    if (consultFirst) {
      const dmRoomId = await (0, _createRoom.ensureDMExists)(_MatrixClientPeg.MatrixClientPeg.get(), destination);

      _dispatcher.default.dispatch({
        action: 'place_call',
        type: call.type,
        room_id: dmRoomId,
        transferee: call
      });

      _dispatcher.default.dispatch({
        action: _actions.Action.ViewRoom,
        room_id: dmRoomId,
        should_peek: false,
        joining: false
      });
    } else {
      try {
        await call.transfer(destination);
      } catch (e) {
        _logger.logger.log("Failed to transfer call", e);

        _Modal.default.createTrackedDialog('Failed to transfer call', '', _ErrorDialog.default, {
          title: (0, _languageHandler._t)('Transfer Failed'),
          description: (0, _languageHandler._t)('Failed to transfer call')
        });
      }
    }
  }

  setActiveCallRoomId(activeCallRoomId) {
    _logger.logger.info("Setting call in room " + activeCallRoomId + " active");

    for (const [roomId, call] of this.calls.entries()) {
      if (call.state === _call.CallState.Ended) continue;

      if (roomId === activeCallRoomId) {
        call.setRemoteOnHold(false);
      } else {
        _logger.logger.info("Holding call in room " + roomId + " because another call is being set active");

        call.setRemoteOnHold(true);
      }
    }
  }
  /**
   * @returns true if we are currently in any call where we haven't put the remote party on hold
   */


  hasAnyUnheldCall() {
    for (const call of this.calls.values()) {
      if (call.state === _call.CallState.Ended) continue;
      if (!call.isRemoteOnHold()) return true;
    }

    return false;
  }

  async startCallApp(roomId, type) {
    _dispatcher.default.dispatch({
      action: 'appsDrawer',
      show: true
    }); // prevent double clicking the call button


    const room = _MatrixClientPeg.MatrixClientPeg.get().getRoom(roomId);

    const jitsiWidget = _WidgetStore.default.instance.getApps(roomId).find(app => _WidgetType.WidgetType.JITSI.matches(app.type));

    if (jitsiWidget) {
      // If there already is a Jitsi widget pin it
      _WidgetLayoutStore.WidgetLayoutStore.instance.moveToContainer(room, jitsiWidget, _WidgetLayoutStore.Container.Top);

      return;
    }

    const jitsiDomain = _Jitsi.Jitsi.getInstance().preferredDomain;

    const jitsiAuth = await _Jitsi.Jitsi.getInstance().getJitsiAuth();
    let confId;

    if (jitsiAuth === 'openidtoken-jwt') {
      // Create conference ID from room ID
      // For compatibility with Jitsi, use base32 without padding.
      // More details here:
      // https://github.com/matrix-org/prosody-mod-auth-matrix-user-verification
      confId = _rfc.base32.stringify(Buffer.from(roomId), {
        pad: false
      });
    } else {
      // Create a random conference ID
      const random = (0, _randomstring.randomUppercaseString)(1) + (0, _randomstring.randomLowercaseString)(23);
      confId = 'Jitsi' + random;
    }

    let widgetUrl = _WidgetUtils.default.getLocalJitsiWrapperUrl({
      auth: jitsiAuth
    }); // TODO: Remove URL hacks when the mobile clients eventually support v2 widgets


    const parsedUrl = new URL(widgetUrl);
    parsedUrl.search = ''; // set to empty string to make the URL class use searchParams instead

    parsedUrl.searchParams.set('confId', confId);
    widgetUrl = parsedUrl.toString();
    const widgetData = {
      conferenceId: confId,
      isAudioOnly: type === 'voice',
      domain: jitsiDomain,
      auth: jitsiAuth,
      roomName: room.name
    };
    const widgetId = 'jitsi_' + _MatrixClientPeg.MatrixClientPeg.get().credentials.userId + '_' + Date.now();

    _WidgetUtils.default.setRoomWidget(roomId, widgetId, _WidgetType.WidgetType.JITSI, widgetUrl, 'Jitsi', widgetData).then(() => {
      _logger.logger.log('Jitsi widget added');
    }).catch(e => {
      if (e.errcode === 'M_FORBIDDEN') {
        _Modal.default.createTrackedDialog('Call Failed', '', _ErrorDialog.default, {
          title: (0, _languageHandler._t)('Permission Required'),
          description: (0, _languageHandler._t)("You do not have permission to start a conference call in this room")
        });
      }

      _logger.logger.error(e);
    });
  }

  terminateCallApp(roomId) {
    _Modal.default.createTrackedDialog('Confirm Jitsi Terminate', '', _QuestionDialog.default, {
      hasCancelButton: true,
      title: (0, _languageHandler._t)("End conference"),
      description: (0, _languageHandler._t)("This will end the conference for everyone. Continue?"),
      button: (0, _languageHandler._t)("End conference"),
      onFinished: proceed => {
        if (!proceed) return; // We'll just obliterate them all. There should only ever be one, but might as well
        // be safe.

        const roomInfo = _WidgetStore.default.instance.getRoom(roomId);

        const jitsiWidgets = roomInfo.widgets.filter(w => _WidgetType.WidgetType.JITSI.matches(w.type));
        jitsiWidgets.forEach(w => {
          // setting invalid content removes it
          _WidgetUtils.default.setRoomWidget(roomId, w.id);
        });
      }
    });
  }

  hangupCallApp(roomId) {
    const roomInfo = _WidgetStore.default.instance.getRoom(roomId);

    if (!roomInfo) return; // "should never happen" clauses go here

    const jitsiWidgets = roomInfo.widgets.filter(w => _WidgetType.WidgetType.JITSI.matches(w.type));
    jitsiWidgets.forEach(w => {
      const messaging = _WidgetMessagingStore.WidgetMessagingStore.instance.getMessagingForId(w.id);

      if (!messaging) return; // more "should never happen" words

      messaging.transport.send(_ElementWidgetActions.ElementWidgetActions.HangupCall, {});
    });
  }

  addCallForRoom(roomId, call, changedRooms = false) {
    if (this.calls.has(roomId)) {
      _logger.logger.log(`Couldn't add call to room ${roomId}: already have a call for this room`);

      throw new Error("Already have a call for room " + roomId);
    }

    _logger.logger.log("setting call for room " + roomId);

    this.calls.set(roomId, call); // Should we always emit CallsChanged too?

    if (changedRooms) {
      this.emit(CallHandlerEvent.CallChangeRoom, call);
    } else {
      this.emit(CallHandlerEvent.CallsChanged, this.calls);
    }
  }

}

exports.default = CallHandler;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,