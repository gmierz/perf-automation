"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ModalWidgetStore = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _AsyncStoreWithClient = require("./AsyncStoreWithClient");

var _dispatcher = _interopRequireDefault(require("../dispatcher/dispatcher"));

var _Modal = _interopRequireDefault(require("../Modal"));

var _ModalWidgetDialog = _interopRequireDefault(require("../components/views/dialogs/ModalWidgetDialog"));

var _WidgetMessagingStore = require("./widgets/WidgetMessagingStore");

var _logger = require("matrix-js-sdk/src/logger");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

class ModalWidgetStore extends _AsyncStoreWithClient.AsyncStoreWithClient {
  constructor() {
    super(_dispatcher.default, {});
    (0, _defineProperty2.default)(this, "modalInstance", null);
    (0, _defineProperty2.default)(this, "openSourceWidgetId", null);
    (0, _defineProperty2.default)(this, "canOpenModalWidget", () => {
      return !this.modalInstance;
    });
    (0, _defineProperty2.default)(this, "openModalWidget", (requestData, sourceWidget, widgetRoomId) => {
      if (this.modalInstance) return;
      this.openSourceWidgetId = sourceWidget.id;
      this.modalInstance = _Modal.default.createTrackedDialog('Modal Widget', '', _ModalWidgetDialog.default, {
        widgetDefinition: _objectSpread({}, requestData),
        widgetRoomId,
        sourceWidgetId: sourceWidget.id,
        onFinished: (success, data) => {
          if (!success) {
            this.closeModalWidget(sourceWidget, {
              "m.exited": true
            });
          } else {
            this.closeModalWidget(sourceWidget, data);
          }

          this.openSourceWidgetId = null;
          this.modalInstance = null;
        }
      }, null,
      /* priority = */
      false,
      /* static = */
      true);
    });
    (0, _defineProperty2.default)(this, "closeModalWidget", (sourceWidget, data) => {
      if (!this.modalInstance) return;

      if (this.openSourceWidgetId === sourceWidget.id) {
        this.openSourceWidgetId = null;
        this.modalInstance.close();
        this.modalInstance = null;

        const sourceMessaging = _WidgetMessagingStore.WidgetMessagingStore.instance.getMessaging(sourceWidget);

        if (!sourceMessaging) {
          _logger.logger.error("No source widget messaging for modal widget");

          return;
        }

        sourceMessaging.notifyModalWidgetClose(data);
      }
    });
  }

  static get instance() {
    return ModalWidgetStore.internalInstance;
  }

  async onAction(payload) {// nothing
  }

}

exports.ModalWidgetStore = ModalWidgetStore;
(0, _defineProperty2.default)(ModalWidgetStore, "internalInstance", new ModalWidgetStore());
window.mxModalWidgetStore = ModalWidgetStore.instance;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdG9yZXMvTW9kYWxXaWRnZXRTdG9yZS50cyJdLCJuYW1lcyI6WyJNb2RhbFdpZGdldFN0b3JlIiwiQXN5bmNTdG9yZVdpdGhDbGllbnQiLCJjb25zdHJ1Y3RvciIsImRlZmF1bHREaXNwYXRjaGVyIiwibW9kYWxJbnN0YW5jZSIsInJlcXVlc3REYXRhIiwic291cmNlV2lkZ2V0Iiwid2lkZ2V0Um9vbUlkIiwib3BlblNvdXJjZVdpZGdldElkIiwiaWQiLCJNb2RhbCIsImNyZWF0ZVRyYWNrZWREaWFsb2ciLCJNb2RhbFdpZGdldERpYWxvZyIsIndpZGdldERlZmluaXRpb24iLCJzb3VyY2VXaWRnZXRJZCIsIm9uRmluaXNoZWQiLCJzdWNjZXNzIiwiZGF0YSIsImNsb3NlTW9kYWxXaWRnZXQiLCJjbG9zZSIsInNvdXJjZU1lc3NhZ2luZyIsIldpZGdldE1lc3NhZ2luZ1N0b3JlIiwiaW5zdGFuY2UiLCJnZXRNZXNzYWdpbmciLCJsb2dnZXIiLCJlcnJvciIsIm5vdGlmeU1vZGFsV2lkZ2V0Q2xvc2UiLCJpbnRlcm5hbEluc3RhbmNlIiwib25BY3Rpb24iLCJwYXlsb2FkIiwid2luZG93IiwibXhNb2RhbFdpZGdldFN0b3JlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQWdCQTs7QUFDQTs7QUFFQTs7QUFDQTs7QUFDQTs7QUFHQTs7Ozs7O0FBT08sTUFBTUEsZ0JBQU4sU0FBK0JDLDBDQUEvQixDQUE0RDtBQUt2REMsRUFBQUEsV0FBVyxHQUFHO0FBQ2xCLFVBQU1DLG1CQUFOLEVBQXlCLEVBQXpCO0FBRGtCLHlEQUhtQixJQUduQjtBQUFBLDhEQUZlLElBRWY7QUFBQSw4REFZTSxNQUFNO0FBQzlCLGFBQU8sQ0FBQyxLQUFLQyxhQUFiO0FBQ0gsS0FkcUI7QUFBQSwyREFnQkcsQ0FDckJDLFdBRHFCLEVBRXJCQyxZQUZxQixFQUdyQkMsWUFIcUIsS0FJcEI7QUFDRCxVQUFJLEtBQUtILGFBQVQsRUFBd0I7QUFDeEIsV0FBS0ksa0JBQUwsR0FBMEJGLFlBQVksQ0FBQ0csRUFBdkM7QUFDQSxXQUFLTCxhQUFMLEdBQXFCTSxlQUFNQyxtQkFBTixDQUEwQixjQUExQixFQUEwQyxFQUExQyxFQUE4Q0MsMEJBQTlDLEVBQWlFO0FBQ2xGQyxRQUFBQSxnQkFBZ0Isb0JBQU9SLFdBQVAsQ0FEa0U7QUFFbEZFLFFBQUFBLFlBRmtGO0FBR2xGTyxRQUFBQSxjQUFjLEVBQUVSLFlBQVksQ0FBQ0csRUFIcUQ7QUFJbEZNLFFBQUFBLFVBQVUsRUFBRSxDQUFDQyxPQUFELEVBQW1CQyxJQUFuQixLQUFxRDtBQUM3RCxjQUFJLENBQUNELE9BQUwsRUFBYztBQUNWLGlCQUFLRSxnQkFBTCxDQUFzQlosWUFBdEIsRUFBb0M7QUFBRSwwQkFBWTtBQUFkLGFBQXBDO0FBQ0gsV0FGRCxNQUVPO0FBQ0gsaUJBQUtZLGdCQUFMLENBQXNCWixZQUF0QixFQUFvQ1csSUFBcEM7QUFDSDs7QUFFRCxlQUFLVCxrQkFBTCxHQUEwQixJQUExQjtBQUNBLGVBQUtKLGFBQUwsR0FBcUIsSUFBckI7QUFDSDtBQWJpRixPQUFqRSxFQWNsQixJQWRrQjtBQWNaO0FBQWlCLFdBZEw7QUFjWTtBQUFlLFVBZDNCLENBQXJCO0FBZUgsS0F0Q3FCO0FBQUEsNERBd0NJLENBQUNFLFlBQUQsRUFBdUJXLElBQXZCLEtBQXlEO0FBQy9FLFVBQUksQ0FBQyxLQUFLYixhQUFWLEVBQXlCOztBQUN6QixVQUFJLEtBQUtJLGtCQUFMLEtBQTRCRixZQUFZLENBQUNHLEVBQTdDLEVBQWlEO0FBQzdDLGFBQUtELGtCQUFMLEdBQTBCLElBQTFCO0FBQ0EsYUFBS0osYUFBTCxDQUFtQmUsS0FBbkI7QUFDQSxhQUFLZixhQUFMLEdBQXFCLElBQXJCOztBQUVBLGNBQU1nQixlQUFlLEdBQUdDLDJDQUFxQkMsUUFBckIsQ0FBOEJDLFlBQTlCLENBQTJDakIsWUFBM0MsQ0FBeEI7O0FBQ0EsWUFBSSxDQUFDYyxlQUFMLEVBQXNCO0FBQ2xCSSx5QkFBT0MsS0FBUCxDQUFhLDZDQUFiOztBQUNBO0FBQ0g7O0FBQ0RMLFFBQUFBLGVBQWUsQ0FBQ00sc0JBQWhCLENBQXVDVCxJQUF2QztBQUNIO0FBQ0osS0F0RHFCO0FBRXJCOztBQUV5QixhQUFSSyxRQUFRLEdBQXFCO0FBQzNDLFdBQU90QixnQkFBZ0IsQ0FBQzJCLGdCQUF4QjtBQUNIOztBQUV1QixRQUFSQyxRQUFRLENBQUNDLE9BQUQsRUFBdUMsQ0FDM0Q7QUFDSDs7QUFmOEQ7Ozs4QkFBdEQ3QixnQixzQkFDeUIsSUFBSUEsZ0JBQUosRTtBQTZEdEM4QixNQUFNLENBQUNDLGtCQUFQLEdBQTRCL0IsZ0JBQWdCLENBQUNzQixRQUE3QyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5Db3B5cmlnaHQgMjAyMCBUaGUgTWF0cml4Lm9yZyBGb3VuZGF0aW9uIEMuSS5DLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbmltcG9ydCB7IEFzeW5jU3RvcmVXaXRoQ2xpZW50IH0gZnJvbSBcIi4vQXN5bmNTdG9yZVdpdGhDbGllbnRcIjtcbmltcG9ydCBkZWZhdWx0RGlzcGF0Y2hlciBmcm9tIFwiLi4vZGlzcGF0Y2hlci9kaXNwYXRjaGVyXCI7XG5pbXBvcnQgeyBBY3Rpb25QYXlsb2FkIH0gZnJvbSBcIi4uL2Rpc3BhdGNoZXIvcGF5bG9hZHNcIjtcbmltcG9ydCBNb2RhbCwgeyBJSGFuZGxlLCBJTW9kYWwgfSBmcm9tIFwiLi4vTW9kYWxcIjtcbmltcG9ydCBNb2RhbFdpZGdldERpYWxvZyBmcm9tIFwiLi4vY29tcG9uZW50cy92aWV3cy9kaWFsb2dzL01vZGFsV2lkZ2V0RGlhbG9nXCI7XG5pbXBvcnQgeyBXaWRnZXRNZXNzYWdpbmdTdG9yZSB9IGZyb20gXCIuL3dpZGdldHMvV2lkZ2V0TWVzc2FnaW5nU3RvcmVcIjtcbmltcG9ydCB7IElNb2RhbFdpZGdldE9wZW5SZXF1ZXN0RGF0YSwgSU1vZGFsV2lkZ2V0UmV0dXJuRGF0YSwgV2lkZ2V0IH0gZnJvbSBcIm1hdHJpeC13aWRnZXQtYXBpXCI7XG5cbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gXCJtYXRyaXgtanMtc2RrL3NyYy9sb2dnZXJcIjtcblxuaW50ZXJmYWNlIElTdGF0ZSB7XG4gICAgbW9kYWw/OiBJTW9kYWw8YW55PjtcbiAgICBvcGVuZWRGcm9tSWQ/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjbGFzcyBNb2RhbFdpZGdldFN0b3JlIGV4dGVuZHMgQXN5bmNTdG9yZVdpdGhDbGllbnQ8SVN0YXRlPiB7XG4gICAgcHJpdmF0ZSBzdGF0aWMgaW50ZXJuYWxJbnN0YW5jZSA9IG5ldyBNb2RhbFdpZGdldFN0b3JlKCk7XG4gICAgcHJpdmF0ZSBtb2RhbEluc3RhbmNlOiBJSGFuZGxlPHZvaWRbXT4gPSBudWxsO1xuICAgIHByaXZhdGUgb3BlblNvdXJjZVdpZGdldElkOiBzdHJpbmcgPSBudWxsO1xuXG4gICAgcHJpdmF0ZSBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoZGVmYXVsdERpc3BhdGNoZXIsIHt9KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGdldCBpbnN0YW5jZSgpOiBNb2RhbFdpZGdldFN0b3JlIHtcbiAgICAgICAgcmV0dXJuIE1vZGFsV2lkZ2V0U3RvcmUuaW50ZXJuYWxJbnN0YW5jZTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgYXN5bmMgb25BY3Rpb24ocGF5bG9hZDogQWN0aW9uUGF5bG9hZCk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIC8vIG5vdGhpbmdcbiAgICB9XG5cbiAgICBwdWJsaWMgY2FuT3Blbk1vZGFsV2lkZ2V0ID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gIXRoaXMubW9kYWxJbnN0YW5jZTtcbiAgICB9O1xuXG4gICAgcHVibGljIG9wZW5Nb2RhbFdpZGdldCA9IChcbiAgICAgICAgcmVxdWVzdERhdGE6IElNb2RhbFdpZGdldE9wZW5SZXF1ZXN0RGF0YSxcbiAgICAgICAgc291cmNlV2lkZ2V0OiBXaWRnZXQsXG4gICAgICAgIHdpZGdldFJvb21JZD86IHN0cmluZyxcbiAgICApID0+IHtcbiAgICAgICAgaWYgKHRoaXMubW9kYWxJbnN0YW5jZSkgcmV0dXJuO1xuICAgICAgICB0aGlzLm9wZW5Tb3VyY2VXaWRnZXRJZCA9IHNvdXJjZVdpZGdldC5pZDtcbiAgICAgICAgdGhpcy5tb2RhbEluc3RhbmNlID0gTW9kYWwuY3JlYXRlVHJhY2tlZERpYWxvZygnTW9kYWwgV2lkZ2V0JywgJycsIE1vZGFsV2lkZ2V0RGlhbG9nLCB7XG4gICAgICAgICAgICB3aWRnZXREZWZpbml0aW9uOiB7IC4uLnJlcXVlc3REYXRhIH0sXG4gICAgICAgICAgICB3aWRnZXRSb29tSWQsXG4gICAgICAgICAgICBzb3VyY2VXaWRnZXRJZDogc291cmNlV2lkZ2V0LmlkLFxuICAgICAgICAgICAgb25GaW5pc2hlZDogKHN1Y2Nlc3M6IGJvb2xlYW4sIGRhdGE/OiBJTW9kYWxXaWRnZXRSZXR1cm5EYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFzdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2xvc2VNb2RhbFdpZGdldChzb3VyY2VXaWRnZXQsIHsgXCJtLmV4aXRlZFwiOiB0cnVlIH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2xvc2VNb2RhbFdpZGdldChzb3VyY2VXaWRnZXQsIGRhdGEpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMub3BlblNvdXJjZVdpZGdldElkID0gbnVsbDtcbiAgICAgICAgICAgICAgICB0aGlzLm1vZGFsSW5zdGFuY2UgPSBudWxsO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSwgbnVsbCwgLyogcHJpb3JpdHkgPSAqLyBmYWxzZSwgLyogc3RhdGljID0gKi8gdHJ1ZSk7XG4gICAgfTtcblxuICAgIHB1YmxpYyBjbG9zZU1vZGFsV2lkZ2V0ID0gKHNvdXJjZVdpZGdldDogV2lkZ2V0LCBkYXRhPzogSU1vZGFsV2lkZ2V0UmV0dXJuRGF0YSkgPT4ge1xuICAgICAgICBpZiAoIXRoaXMubW9kYWxJbnN0YW5jZSkgcmV0dXJuO1xuICAgICAgICBpZiAodGhpcy5vcGVuU291cmNlV2lkZ2V0SWQgPT09IHNvdXJjZVdpZGdldC5pZCkge1xuICAgICAgICAgICAgdGhpcy5vcGVuU291cmNlV2lkZ2V0SWQgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5tb2RhbEluc3RhbmNlLmNsb3NlKCk7XG4gICAgICAgICAgICB0aGlzLm1vZGFsSW5zdGFuY2UgPSBudWxsO1xuXG4gICAgICAgICAgICBjb25zdCBzb3VyY2VNZXNzYWdpbmcgPSBXaWRnZXRNZXNzYWdpbmdTdG9yZS5pbnN0YW5jZS5nZXRNZXNzYWdpbmcoc291cmNlV2lkZ2V0KTtcbiAgICAgICAgICAgIGlmICghc291cmNlTWVzc2FnaW5nKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKFwiTm8gc291cmNlIHdpZGdldCBtZXNzYWdpbmcgZm9yIG1vZGFsIHdpZGdldFwiKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzb3VyY2VNZXNzYWdpbmcubm90aWZ5TW9kYWxXaWRnZXRDbG9zZShkYXRhKTtcbiAgICAgICAgfVxuICAgIH07XG59XG5cbndpbmRvdy5teE1vZGFsV2lkZ2V0U3RvcmUgPSBNb2RhbFdpZGdldFN0b3JlLmluc3RhbmNlO1xuIl19