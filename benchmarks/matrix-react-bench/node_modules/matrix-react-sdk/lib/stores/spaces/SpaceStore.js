"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getChildOrder = exports.default = exports.SpaceStoreClass = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _lodash = require("lodash");

var _event = require("matrix-js-sdk/src/@types/event");

var _logger = require("matrix-js-sdk/src/logger");

var _AsyncStoreWithClient = require("../AsyncStoreWithClient");

var _dispatcher = _interopRequireDefault(require("../../dispatcher/dispatcher"));

var _RoomListStore = _interopRequireDefault(require("../room-list/RoomListStore"));

var _SettingsStore = _interopRequireDefault(require("../../settings/SettingsStore"));

var _DMRoomMap = _interopRequireDefault(require("../../utils/DMRoomMap"));

var _SpaceNotificationState = require("../notifications/SpaceNotificationState");

var _RoomNotificationStateStore = require("../notifications/RoomNotificationStateStore");

var _models = require("../room-list/models");

var _maps = require("../../utils/maps");

var _sets = require("../../utils/sets");

var _RoomViewStore = _interopRequireDefault(require("../RoomViewStore"));

var _actions = require("../../dispatcher/actions");

var _arrays = require("../../utils/arrays");

var _objects = require("../../utils/objects");

var _stringOrderField = require("../../utils/stringOrderField");

var _RoomList = require("../../components/views/rooms/RoomList");

var _ = require(".");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const ACTIVE_SPACE_LS_KEY = "mx_active_space";
const metaSpaceOrder = [_.MetaSpace.Home, _.MetaSpace.Favourites, _.MetaSpace.People, _.MetaSpace.Orphans];
const MAX_SUGGESTED_ROOMS = 20; // This setting causes the page to reload and can be costly if read frequently, so read it here only

const spacesEnabled = !_SettingsStore.default.getValue("showCommunitiesInsteadOfSpaces");

const getSpaceContextKey = space => `mx_space_context_${space}`;

const partitionSpacesAndRooms = arr => {
  // [spaces, rooms]
  return arr.reduce((result, room) => {
    result[room.isSpaceRoom() ? 0 : 1].push(room);
    return result;
  }, [[], []]);
};

const validOrder = order => {
  if (typeof order === "string" && order.length <= 50 && Array.from(order).every(c => {
    const charCode = c.charCodeAt(0);
    return charCode >= 0x20 && charCode <= 0x7E;
  })) {
    return order;
  }
}; // For sorting space children using a validated `order`, `m.room.create`'s `origin_server_ts`, `room_id`


const getChildOrder = (order, creationTs, roomId) => {
  return [validOrder(order) ?? NaN, creationTs, roomId]; // NaN has lodash sort it at the end in asc
};

exports.getChildOrder = getChildOrder;

const getRoomFn = room => {
  return _RoomNotificationStateStore.RoomNotificationStateStore.instance.getRoomState(room);
};

class SpaceStoreClass extends _AsyncStoreWithClient.AsyncStoreWithClient {
  // The spaces representing the roots of the various tree-like hierarchies
  // The list of rooms not present in any currently joined spaces
  // Map from room ID to set of spaces which list it as a child
  // Map from SpaceKey to SpaceNotificationState instance representing that space
  // Map from space key to Set of room IDs that should be shown as part of that space's filter
  // The space currently selected in the Space Panel
  // set properly by onReady
  // set by onReady
  constructor() {
    super(_dispatcher.default, {});
    (0, _defineProperty2.default)(this, "rootSpaces", []);
    (0, _defineProperty2.default)(this, "orphanedRooms", new Set());
    (0, _defineProperty2.default)(this, "parentMap", new _maps.EnhancedMap());
    (0, _defineProperty2.default)(this, "notificationStateMap", new Map());
    (0, _defineProperty2.default)(this, "spaceFilteredRooms", new Map());
    (0, _defineProperty2.default)(this, "_activeSpace", _.MetaSpace.Home);
    (0, _defineProperty2.default)(this, "_suggestedRooms", []);
    (0, _defineProperty2.default)(this, "_invitedSpaces", new Set());
    (0, _defineProperty2.default)(this, "spaceOrderLocalEchoMap", new Map());
    (0, _defineProperty2.default)(this, "_restrictedJoinRuleSupport", void 0);
    (0, _defineProperty2.default)(this, "_allRoomsInHome", _SettingsStore.default.getValue("Spaces.allRoomsInHome"));
    (0, _defineProperty2.default)(this, "_enabledMetaSpaces", []);
    (0, _defineProperty2.default)(this, "fetchSuggestedRooms", async (space, limit = MAX_SUGGESTED_ROOMS) => {
      try {
        const {
          rooms
        } = await this.matrixClient.getRoomHierarchy(space.roomId, limit, 1, true);
        const viaMap = new _maps.EnhancedMap();
        rooms.forEach(room => {
          room.children_state.forEach(ev => {
            var _ev$content$via;

            if (ev.type === _event.EventType.SpaceChild && (_ev$content$via = ev.content.via) !== null && _ev$content$via !== void 0 && _ev$content$via.length) {
              ev.content.via.forEach(via => {
                viaMap.getOrCreate(ev.state_key, new Set()).add(via);
              });
            }
          });
        });
        return rooms.filter(roomInfo => {
          var _this$matrixClient$ge;

          return roomInfo.room_type !== _event.RoomType.Space && ((_this$matrixClient$ge = this.matrixClient.getRoom(roomInfo.room_id)) === null || _this$matrixClient$ge === void 0 ? void 0 : _this$matrixClient$ge.getMyMembership()) !== "join";
        }).map(roomInfo => _objectSpread(_objectSpread({}, roomInfo), {}, {
          viaServers: Array.from(viaMap.get(roomInfo.room_id) || [])
        }));
      } catch (e) {
        _logger.logger.error(e);
      }

      return [];
    });
    (0, _defineProperty2.default)(this, "getSpaceFilteredRoomIds", space => {
      if (space === _.MetaSpace.Home && this.allRoomsInHome) {
        return new Set(this.matrixClient.getVisibleRooms().map(r => r.roomId));
      }

      return this.spaceFilteredRooms.get(space) || new Set();
    });
    (0, _defineProperty2.default)(this, "rebuild", (0, _lodash.throttle)(() => {
      if (!this.matrixClient) return;
      const [visibleSpaces, visibleRooms] = partitionSpacesAndRooms(this.matrixClient.getVisibleRooms());
      const [joinedSpaces, invitedSpaces] = visibleSpaces.reduce((arr, s) => {
        if (s.getMyMembership() === "join") {
          arr[0].push(s);
        } else if (s.getMyMembership() === "invite") {
          arr[1].push(s);
        }

        return arr;
      }, [[], []]); // exclude invited spaces from unseenChildren as they will be forcibly shown at the top level of the treeview

      const unseenChildren = new Set([...visibleRooms, ...joinedSpaces]);
      const backrefs = new _maps.EnhancedMap(); // Sort spaces by room ID to force the cycle breaking to be deterministic

      const spaces = (0, _lodash.sortBy)(joinedSpaces, space => space.roomId); // TODO handle cleaning up links when a Space is removed

      spaces.forEach(space => {
        const children = this.getChildren(space.roomId);
        children.forEach(child => {
          unseenChildren.delete(child);
          backrefs.getOrCreate(child.roomId, new Set()).add(space.roomId);
        });
      });
      const [rootSpaces, orphanedRooms] = partitionSpacesAndRooms(Array.from(unseenChildren)); // somewhat algorithm to handle full-cycles

      const detachedNodes = new Set(spaces);

      const markTreeChildren = (rootSpace, unseen) => {
        const stack = [rootSpace];

        while (stack.length) {
          const op = stack.pop();
          unseen.delete(op);
          this.getChildSpaces(op.roomId).forEach(space => {
            if (unseen.has(space)) {
              stack.push(space);
            }
          });
        }
      };

      rootSpaces.forEach(rootSpace => {
        markTreeChildren(rootSpace, detachedNodes);
      }); // Handle spaces forming fully cyclical relationships.
      // In order, assume each detachedNode is a root unless it has already
      // been claimed as the child of prior detached node.
      // Work from a copy of the detachedNodes set as it will be mutated as part of this operation.

      Array.from(detachedNodes).forEach(detachedNode => {
        if (!detachedNodes.has(detachedNode)) return; // declare this detached node a new root, find its children, without ever looping back to it

        detachedNodes.delete(detachedNode);
        rootSpaces.push(detachedNode);
        markTreeChildren(detachedNode, detachedNodes); // TODO only consider a detached node a root space if it has no *parents other than the ones forming cycles
      }); // TODO neither of these handle an A->B->C->A with an additional C->D
      // detachedNodes.forEach(space => {
      //     rootSpaces.push(space);
      // });

      this.orphanedRooms = new Set(orphanedRooms.map(r => r.roomId));
      this.rootSpaces = this.sortRootSpaces(rootSpaces);
      this.parentMap = backrefs; // if the currently selected space no longer exists, remove its selection

      if (this._activeSpace[0] === "!" && detachedNodes.has(this.matrixClient.getRoom(this._activeSpace))) {
        this.goToFirstSpace();
      }

      this.onRoomsUpdate(); // TODO only do this if a change has happened

      this.emit(_.UPDATE_TOP_LEVEL_SPACES, this.spacePanelSpaces, this.enabledMetaSpaces); // build initial state of invited spaces as we would have missed the emitted events about the room at launch

      this._invitedSpaces = new Set(this.sortRootSpaces(invitedSpaces));
      this.emit(_.UPDATE_INVITED_SPACES, this.invitedSpaces);
    }, 100, {
      trailing: true,
      leading: true
    }));
    (0, _defineProperty2.default)(this, "onSpaceUpdate", () => {
      this.rebuild();
    });
    (0, _defineProperty2.default)(this, "showInHomeSpace", room => {
      var _this$parentMap$get;

      if (this.allRoomsInHome) return true;
      if (room.isSpaceRoom()) return false;
      return !((_this$parentMap$get = this.parentMap.get(room.roomId)) !== null && _this$parentMap$get !== void 0 && _this$parentMap$get.size) // put all orphaned rooms in the Home Space
      || _DMRoomMap.default.shared().getUserIdForRoomId(room.roomId); // put all DMs in the Home Space
    });
    (0, _defineProperty2.default)(this, "onRoomUpdate", room => {
      const enabledMetaSpaces = new Set(this.enabledMetaSpaces); // TODO more metaspace stuffs

      if (enabledMetaSpaces.has(_.MetaSpace.Home)) {
        if (this.showInHomeSpace(room)) {
          var _this$spaceFilteredRo;

          (_this$spaceFilteredRo = this.spaceFilteredRooms.get(_.MetaSpace.Home)) === null || _this$spaceFilteredRo === void 0 ? void 0 : _this$spaceFilteredRo.add(room.roomId);
          this.emit(_.MetaSpace.Home);
        } else if (!this.orphanedRooms.has(room.roomId)) {
          var _this$spaceFilteredRo2;

          (_this$spaceFilteredRo2 = this.spaceFilteredRooms.get(_.MetaSpace.Home)) === null || _this$spaceFilteredRo2 === void 0 ? void 0 : _this$spaceFilteredRo2.delete(room.roomId);
          this.emit(_.MetaSpace.Home);
        }
      }
    });
    (0, _defineProperty2.default)(this, "onSpaceMembersChange", ev => {
      // skip this update if we do not have a DM with this user
      if (_DMRoomMap.default.shared().getDMRoomsForUserId(ev.getStateKey()).length < 1) return;
      this.onRoomsUpdate();
    });
    (0, _defineProperty2.default)(this, "onRoomsUpdate", (0, _lodash.throttle)(() => {
      // TODO resolve some updates as deltas
      const visibleRooms = this.matrixClient.getVisibleRooms();
      const oldFilteredRooms = this.spaceFilteredRooms;
      this.spaceFilteredRooms = new Map();
      const enabledMetaSpaces = new Set(this.enabledMetaSpaces); // populate the Home metaspace if it is enabled and is not set to all rooms

      if (enabledMetaSpaces.has(_.MetaSpace.Home) && !this.allRoomsInHome) {
        // put all room invites in the Home Space
        const invites = visibleRooms.filter(r => !r.isSpaceRoom() && r.getMyMembership() === "invite");
        this.spaceFilteredRooms.set(_.MetaSpace.Home, new Set(invites.map(r => r.roomId)));
        visibleRooms.forEach(room => {
          if (this.showInHomeSpace(room)) {
            this.spaceFilteredRooms.get(_.MetaSpace.Home).add(room.roomId);
          }
        });
      } // populate the Favourites metaspace if it is enabled


      if (enabledMetaSpaces.has(_.MetaSpace.Favourites)) {
        const favourites = visibleRooms.filter(r => r.tags[_models.DefaultTagID.Favourite]);
        this.spaceFilteredRooms.set(_.MetaSpace.Favourites, new Set(favourites.map(r => r.roomId)));
      } // populate the People metaspace if it is enabled


      if (enabledMetaSpaces.has(_.MetaSpace.People)) {
        const people = visibleRooms.filter(r => _DMRoomMap.default.shared().getUserIdForRoomId(r.roomId));
        this.spaceFilteredRooms.set(_.MetaSpace.People, new Set(people.map(r => r.roomId)));
      } // populate the Orphans metaspace if it is enabled


      if (enabledMetaSpaces.has(_.MetaSpace.Orphans)) {
        const orphans = visibleRooms.filter(r => {
          var _this$parentMap$get2;

          // filter out DMs and rooms with >0 parents
          return !((_this$parentMap$get2 = this.parentMap.get(r.roomId)) !== null && _this$parentMap$get2 !== void 0 && _this$parentMap$get2.size) && !_DMRoomMap.default.shared().getUserIdForRoomId(r.roomId);
        });
        this.spaceFilteredRooms.set(_.MetaSpace.Orphans, new Set(orphans.map(r => r.roomId)));
      }

      const hiddenChildren = new _maps.EnhancedMap();
      visibleRooms.forEach(room => {
        if (room.getMyMembership() !== "join") return;
        this.getParents(room.roomId).forEach(parent => {
          hiddenChildren.getOrCreate(parent.roomId, new Set()).add(room.roomId);
        });
      });
      this.rootSpaces.forEach(s => {
        // traverse each space tree in DFS to build up the supersets as you go up,
        // reusing results from like subtrees.
        const fn = (spaceId, parentPath) => {
          var _this$matrixClient, _hiddenChildren$get;

          if (parentPath.has(spaceId)) return; // prevent cycles
          // reuse existing results if multiple similar branches exist

          if (this.spaceFilteredRooms.has(spaceId)) {
            return this.spaceFilteredRooms.get(spaceId);
          }

          const [childSpaces, childRooms] = partitionSpacesAndRooms(this.getChildren(spaceId));
          const roomIds = new Set(childRooms.map(r => r.roomId));
          const space = (_this$matrixClient = this.matrixClient) === null || _this$matrixClient === void 0 ? void 0 : _this$matrixClient.getRoom(spaceId); // Add relevant DMs

          space === null || space === void 0 ? void 0 : space.getMembers().forEach(member => {
            if (member.membership !== "join" && member.membership !== "invite") return;

            _DMRoomMap.default.shared().getDMRoomsForUserId(member.userId).forEach(roomId => {
              roomIds.add(roomId);
            });
          });
          const newPath = new Set(parentPath).add(spaceId);
          childSpaces.forEach(childSpace => {
            var _fn;

            (_fn = fn(childSpace.roomId, newPath)) === null || _fn === void 0 ? void 0 : _fn.forEach(roomId => {
              roomIds.add(roomId);
            });
          });
          (_hiddenChildren$get = hiddenChildren.get(spaceId)) === null || _hiddenChildren$get === void 0 ? void 0 : _hiddenChildren$get.forEach(roomId => {
            roomIds.add(roomId);
          }); // Expand room IDs to all known versions of the given rooms

          const expandedRoomIds = new Set(Array.from(roomIds).flatMap(roomId => {
            return this.matrixClient.getRoomUpgradeHistory(roomId, true).map(r => r.roomId);
          }));
          this.spaceFilteredRooms.set(spaceId, expandedRoomIds);
          return expandedRoomIds;
        };

        fn(s.roomId, new Set());
      });
      const diff = (0, _maps.mapDiff)(oldFilteredRooms, this.spaceFilteredRooms); // filter out keys which changed by reference only by checking whether the sets differ

      const changed = diff.changed.filter(k => (0, _sets.setHasDiff)(oldFilteredRooms.get(k), this.spaceFilteredRooms.get(k)));
      [...diff.added, ...diff.removed, ...changed].forEach(k => {
        this.emit(k);
      });
      let dmBadgeSpace; // only show badges on dms on the most relevant space if such exists

      if (enabledMetaSpaces.has(_.MetaSpace.People)) {
        dmBadgeSpace = _.MetaSpace.People;
      } else if (enabledMetaSpaces.has(_.MetaSpace.Home)) {
        dmBadgeSpace = _.MetaSpace.Home;
      }

      this.spaceFilteredRooms.forEach((roomIds, s) => {
        if (this.allRoomsInHome && s === _.MetaSpace.Home) return; // we'll be using the global notification state, skip
        // Update NotificationStates

        this.getNotificationState(s).setRooms(visibleRooms.filter(room => {
          if (!roomIds.has(room.roomId) || room.isSpaceRoom()) return false;

          if (dmBadgeSpace && _DMRoomMap.default.shared().getUserIdForRoomId(room.roomId)) {
            return s === dmBadgeSpace;
          }

          return true;
        }));
      });
    }, 100, {
      trailing: true,
      leading: true
    }));
    (0, _defineProperty2.default)(this, "switchToRelatedSpace", roomId => {
      var _parent;

      if (this.suggestedRooms.find(r => r.room_id === roomId)) return;
      let parent = this.getCanonicalParent(roomId);

      if (!parent) {
        parent = this.rootSpaces.find(s => {
          var _this$spaceFilteredRo3;

          return (_this$spaceFilteredRo3 = this.spaceFilteredRooms.get(s.roomId)) === null || _this$spaceFilteredRo3 === void 0 ? void 0 : _this$spaceFilteredRo3.has(roomId);
        });
      }

      if (!parent) {
        const parentIds = Array.from(this.parentMap.get(roomId) || []);

        for (const parentId of parentIds) {
          const room = this.matrixClient.getRoom(parentId);

          if (room) {
            parent = room;
            break;
          }
        }
      } // don't trigger a context switch when we are switching a space to match the chosen room


      this.setActiveSpace(((_parent = parent) === null || _parent === void 0 ? void 0 : _parent.roomId) ?? _.MetaSpace.Home, false); // TODO
    });
    (0, _defineProperty2.default)(this, "onRoom", (room, newMembership, oldMembership) => {
      const roomMembership = room.getMyMembership();

      if (!roomMembership) {
        // room is still being baked in the js-sdk, we'll process it at Room.myMembership instead
        return;
      }

      const membership = newMembership || roomMembership;

      if (!room.isSpaceRoom()) {
        // this.onRoomUpdate(room);
        // this.onRoomsUpdate();
        // ideally we only need onRoomsUpdate here but it doesn't rebuild parentMap so always adds new rooms to Home
        this.rebuild();

        if (membership === "join") {
          // the user just joined a room, remove it from the suggested list if it was there
          const numSuggestedRooms = this._suggestedRooms.length;
          this._suggestedRooms = this._suggestedRooms.filter(r => r.room_id !== room.roomId);

          if (numSuggestedRooms !== this._suggestedRooms.length) {
            this.emit(_.UPDATE_SUGGESTED_ROOMS, this._suggestedRooms);
          } // if the room currently being viewed was just joined then switch to its related space


          if (newMembership === "join" && room.roomId === _RoomViewStore.default.getRoomId()) {
            this.switchToRelatedSpace(room.roomId);
          }
        }

        return;
      } // Space


      if (membership === "invite") {
        this._invitedSpaces.add(room);

        this.emit(_.UPDATE_INVITED_SPACES, this.invitedSpaces);
      } else if (oldMembership === "invite" && membership !== "join") {
        this._invitedSpaces.delete(room);

        this.emit(_.UPDATE_INVITED_SPACES, this.invitedSpaces);
      } else {
        this.onSpaceUpdate();
        this.emit(room.roomId);
      }

      if (membership === "join" && room.roomId === _RoomViewStore.default.getRoomId()) {
        // if the user was looking at the space and then joined: select that space
        this.setActiveSpace(room.roomId, false);
      } else if (membership === "leave" && room.roomId === this.activeSpace) {
        // user's active space has gone away, go back to home
        this.goToFirstSpace(true);
      }
    });
    (0, _defineProperty2.default)(this, "onRoomState", ev => {
      var _this$matrixClient$ge2;

      const room = this.matrixClient.getRoom(ev.getRoomId());
      if (!room) return;

      switch (ev.getType()) {
        case _event.EventType.SpaceChild:
          if (room.isSpaceRoom()) {
            this.onSpaceUpdate();
            this.emit(room.roomId);
          }

          if (room.roomId === this.activeSpace && // current space
          ((_this$matrixClient$ge2 = this.matrixClient.getRoom(ev.getStateKey())) === null || _this$matrixClient$ge2 === void 0 ? void 0 : _this$matrixClient$ge2.getMyMembership()) !== "join" && // target not joined
          ev.getPrevContent().suggested !== ev.getContent().suggested // suggested flag changed
          ) {
            this.loadSuggestedRooms(room);
          }

          break;

        case _event.EventType.SpaceParent:
          // TODO rebuild the space parent and not the room - check permissions?
          // TODO confirm this after implementing parenting behaviour
          if (room.isSpaceRoom()) {
            this.onSpaceUpdate();
          } else if (!this.allRoomsInHome) {
            this.onRoomUpdate(room);
          }

          this.emit(room.roomId);
          break;

        case _event.EventType.RoomPowerLevels:
          if (room.isSpaceRoom()) {
            this.onRoomsUpdate();
          }

          break;
      }
    });
    (0, _defineProperty2.default)(this, "onRoomStateMembers", ev => {
      const room = this.matrixClient.getRoom(ev.getRoomId());

      if (room !== null && room !== void 0 && room.isSpaceRoom()) {
        this.onSpaceMembersChange(ev);
      }
    });
    (0, _defineProperty2.default)(this, "onRoomAccountData", (ev, room, lastEv) => {
      if (!room.isSpaceRoom()) return;

      if (ev.getType() === _event.EventType.SpaceOrder) {
        var _ev$getContent, _lastEv$getContent;

        this.spaceOrderLocalEchoMap.delete(room.roomId); // clear any local echo

        const order = (_ev$getContent = ev.getContent()) === null || _ev$getContent === void 0 ? void 0 : _ev$getContent.order;
        const lastOrder = lastEv === null || lastEv === void 0 ? void 0 : (_lastEv$getContent = lastEv.getContent()) === null || _lastEv$getContent === void 0 ? void 0 : _lastEv$getContent.order;

        if (order !== lastOrder) {
          this.notifyIfOrderChanged();
        }
      } else if (ev.getType() === _event.EventType.Tag) {
        var _lastEv$getContent2, _ev$getContent2;

        // If the room was in favourites and now isn't or the opposite then update its position in the trees
        const oldTags = (lastEv === null || lastEv === void 0 ? void 0 : (_lastEv$getContent2 = lastEv.getContent()) === null || _lastEv$getContent2 === void 0 ? void 0 : _lastEv$getContent2.tags) || {};
        const newTags = ((_ev$getContent2 = ev.getContent()) === null || _ev$getContent2 === void 0 ? void 0 : _ev$getContent2.tags) || {};

        if (!!oldTags[_models.DefaultTagID.Favourite] !== !!newTags[_models.DefaultTagID.Favourite]) {
          this.onRoomUpdate(room);
        }
      }
    });
    (0, _defineProperty2.default)(this, "onAccountData", (ev, prevEvent) => {
      if (!this.allRoomsInHome && ev.getType() === _event.EventType.Direct) {
        const lastContent = (prevEvent === null || prevEvent === void 0 ? void 0 : prevEvent.getContent()) ?? {};
        const content = ev.getContent();
        const diff = (0, _objects.objectDiff)(lastContent, content); // filter out keys which changed by reference only by checking whether the sets differ

        const changed = diff.changed.filter(k => (0, _arrays.arrayHasDiff)(lastContent[k], content[k])); // DM tag changes, refresh relevant rooms

        new Set([...diff.added, ...diff.removed, ...changed]).forEach(roomId => {
          var _this$matrixClient2;

          const room = (_this$matrixClient2 = this.matrixClient) === null || _this$matrixClient2 === void 0 ? void 0 : _this$matrixClient2.getRoom(roomId);

          if (room) {
            this.onRoomUpdate(room);
          }
        });
      }
    });
    (0, _defineProperty2.default)(this, "getSpaceTagOrdering", space => {
      var _space$getAccountData, _space$getAccountData2;

      if (this.spaceOrderLocalEchoMap.has(space.roomId)) return this.spaceOrderLocalEchoMap.get(space.roomId);
      return validOrder((_space$getAccountData = space.getAccountData(_event.EventType.SpaceOrder)) === null || _space$getAccountData === void 0 ? void 0 : (_space$getAccountData2 = _space$getAccountData.getContent()) === null || _space$getAccountData2 === void 0 ? void 0 : _space$getAccountData2.order);
    });

    _SettingsStore.default.monitorSetting("Spaces.allRoomsInHome", null);

    _SettingsStore.default.monitorSetting("Spaces.enabledMetaSpaces", null);
  }

  get invitedSpaces() {
    return Array.from(this._invitedSpaces);
  }

  get enabledMetaSpaces() {
    return this._enabledMetaSpaces;
  }

  get spacePanelSpaces() {
    return this.rootSpaces;
  }

  get activeSpace() {
    return this._activeSpace;
  }

  get activeSpaceRoom() {
    var _this$matrixClient3;

    if (this._activeSpace[0] !== "!") return null;
    return (_this$matrixClient3 = this.matrixClient) === null || _this$matrixClient3 === void 0 ? void 0 : _this$matrixClient3.getRoom(this._activeSpace);
  }

  get suggestedRooms() {
    return this._suggestedRooms;
  }

  get allRoomsInHome() {
    return this._allRoomsInHome;
  }

  setActiveRoomInSpace(space) {
    var _this$matrixClient4, _this$matrixClient4$g;

    if (space[0] === "!" && !((_this$matrixClient4 = this.matrixClient) !== null && _this$matrixClient4 !== void 0 && (_this$matrixClient4$g = _this$matrixClient4.getRoom(space)) !== null && _this$matrixClient4$g !== void 0 && _this$matrixClient4$g.isSpaceRoom())) return;
    if (space !== this.activeSpace) this.setActiveSpace(space);

    if (space) {
      const roomId = this.getNotificationState(space).getFirstRoomWithNotifications();

      _dispatcher.default.dispatch({
        action: "view_room",
        room_id: roomId,
        context_switch: true
      });
    } else {
      const lists = _RoomListStore.default.instance.unfilteredLists;

      for (let i = 0; i < _RoomList.TAG_ORDER.length; i++) {
        const t = _RoomList.TAG_ORDER[i];
        const listRooms = lists[t];
        const unreadRoom = listRooms.find(r => {
          if (this.showInHomeSpace(r)) {
            const state = _RoomNotificationStateStore.RoomNotificationStateStore.instance.getRoomState(r);

            return state.isUnread;
          }
        });

        if (unreadRoom) {
          _dispatcher.default.dispatch({
            action: "view_room",
            room_id: unreadRoom.roomId,
            context_switch: true
          });

          break;
        }
      }
    }
  }

  get restrictedJoinRuleSupport() {
    return this._restrictedJoinRuleSupport;
  }
  /**
   * Sets the active space, updates room list filters,
   * optionally switches the user's room back to where they were when they last viewed that space.
   * @param space which space to switch to.
   * @param contextSwitch whether to switch the user's context,
   * should not be done when the space switch is done implicitly due to another event like switching room.
   */


  setActiveSpace(space, contextSwitch = true) {
    if (!space || !this.matrixClient || space === this.activeSpace) return;
    let cliSpace;

    if (space[0] === "!") {
      var _cliSpace;

      cliSpace = this.matrixClient.getRoom(space);
      if (!((_cliSpace = cliSpace) !== null && _cliSpace !== void 0 && _cliSpace.isSpaceRoom())) return;
    } else if (!this.enabledMetaSpaces.includes(space)) {
      return;
    }

    this._activeSpace = space;
    this.emit(_.UPDATE_SELECTED_SPACE, this.activeSpace);
    this.emit(_.UPDATE_SUGGESTED_ROOMS, this._suggestedRooms = []);

    if (contextSwitch) {
      var _cliSpace2, _this$matrixClient$ge3;

      // view last selected room from space
      const roomId = window.localStorage.getItem(getSpaceContextKey(this.activeSpace)); // if the space being selected is an invite then always view that invite
      // else if the last viewed room in this space is joined then view that
      // else view space home or home depending on what is being clicked on

      if (((_cliSpace2 = cliSpace) === null || _cliSpace2 === void 0 ? void 0 : _cliSpace2.getMyMembership()) !== "invite" && ((_this$matrixClient$ge3 = this.matrixClient.getRoom(roomId)) === null || _this$matrixClient$ge3 === void 0 ? void 0 : _this$matrixClient$ge3.getMyMembership()) === "join" && this.getSpaceFilteredRoomIds(space).has(roomId)) {
        _dispatcher.default.dispatch({
          action: "view_room",
          room_id: roomId,
          context_switch: true
        });
      } else if (cliSpace) {
        _dispatcher.default.dispatch({
          action: "view_room",
          room_id: space,
          context_switch: true
        });
      } else {
        _dispatcher.default.dispatch({
          action: "view_home_page",
          context_switch: true
        });
      }
    } // persist space selected


    window.localStorage.setItem(ACTIVE_SPACE_LS_KEY, space);

    if (cliSpace) {
      this.loadSuggestedRooms(cliSpace);
    }
  }

  async loadSuggestedRooms(space) {
    const suggestedRooms = await this.fetchSuggestedRooms(space);

    if (this._activeSpace === space.roomId) {
      this._suggestedRooms = suggestedRooms;
      this.emit(_.UPDATE_SUGGESTED_ROOMS, this._suggestedRooms);
    }
  }

  addRoomToSpace(space, roomId, via, suggested = false, autoJoin = false) {
    return this.matrixClient.sendStateEvent(space.roomId, _event.EventType.SpaceChild, {
      via,
      suggested,
      auto_join: autoJoin
    }, roomId);
  }

  getChildren(spaceId) {
    var _this$matrixClient5;

    const room = (_this$matrixClient5 = this.matrixClient) === null || _this$matrixClient5 === void 0 ? void 0 : _this$matrixClient5.getRoom(spaceId);
    const childEvents = room === null || room === void 0 ? void 0 : room.currentState.getStateEvents(_event.EventType.SpaceChild).filter(ev => {
      var _ev$getContent3;

      return (_ev$getContent3 = ev.getContent()) === null || _ev$getContent3 === void 0 ? void 0 : _ev$getContent3.via;
    });
    return (0, _lodash.sortBy)(childEvents, ev => {
      var _this$matrixClient6, _childRoom$currentSta;

      const roomId = ev.getStateKey();
      const childRoom = (_this$matrixClient6 = this.matrixClient) === null || _this$matrixClient6 === void 0 ? void 0 : _this$matrixClient6.getRoom(roomId);
      const createTs = childRoom === null || childRoom === void 0 ? void 0 : (_childRoom$currentSta = childRoom.currentState.getStateEvents(_event.EventType.RoomCreate, "")) === null || _childRoom$currentSta === void 0 ? void 0 : _childRoom$currentSta.getTs();
      return getChildOrder(ev.getContent().order, createTs, roomId);
    }).map(ev => {
      const history = this.matrixClient.getRoomUpgradeHistory(ev.getStateKey(), true);
      return history[history.length - 1];
    }).filter(room => {
      return (room === null || room === void 0 ? void 0 : room.getMyMembership()) === "join" || (room === null || room === void 0 ? void 0 : room.getMyMembership()) === "invite";
    }) || [];
  }

  getChildRooms(spaceId) {
    return this.getChildren(spaceId).filter(r => !r.isSpaceRoom());
  }

  getChildSpaces(spaceId) {
    // don't show invited subspaces as they surface at the top level for better visibility
    return this.getChildren(spaceId).filter(r => r.isSpaceRoom() && r.getMyMembership() === "join");
  }

  getParents(roomId, canonicalOnly = false) {
    var _this$matrixClient7, _this$matrixClient8;

    const userId = (_this$matrixClient7 = this.matrixClient) === null || _this$matrixClient7 === void 0 ? void 0 : _this$matrixClient7.getUserId();
    const room = (_this$matrixClient8 = this.matrixClient) === null || _this$matrixClient8 === void 0 ? void 0 : _this$matrixClient8.getRoom(roomId);
    return (room === null || room === void 0 ? void 0 : room.currentState.getStateEvents(_event.EventType.SpaceParent).map(ev => {
      const content = ev.getContent();

      if (!Array.isArray(content.via) || canonicalOnly && !content.canonical) {
        return; // skip
      } // only respect the relationship if the sender has sufficient permissions in the parent to set
      // child relations, as per MSC1772.
      // https://github.com/matrix-org/matrix-doc/blob/main/proposals/1772-groups-as-rooms.md#relationship-between-rooms-and-spaces


      const parent = this.matrixClient.getRoom(ev.getStateKey());
      const relation = parent === null || parent === void 0 ? void 0 : parent.currentState.getStateEvents(_event.EventType.SpaceChild, roomId);

      if (!(parent !== null && parent !== void 0 && parent.currentState.maySendStateEvent(_event.EventType.SpaceChild, userId)) || // also skip this relation if the parent had this child added but then since removed it
      relation && !Array.isArray(relation.getContent().via)) {
        return; // skip
      }

      return parent;
    }).filter(Boolean)) || [];
  }

  getCanonicalParent(roomId) {
    var _sortBy;

    const parents = this.getParents(roomId, true);
    return ((_sortBy = (0, _lodash.sortBy)(parents, r => r.roomId)) === null || _sortBy === void 0 ? void 0 : _sortBy[0]) || null;
  }

  getKnownParents(roomId) {
    return this.parentMap.get(roomId) || new Set();
  }

  notifyIfOrderChanged() {
    const rootSpaces = this.sortRootSpaces(this.rootSpaces);

    if ((0, _arrays.arrayHasOrderChange)(this.rootSpaces, rootSpaces)) {
      this.rootSpaces = rootSpaces;
      this.emit(_.UPDATE_TOP_LEVEL_SPACES, this.spacePanelSpaces, this.enabledMetaSpaces);
    }
  }

  async reset() {
    this.rootSpaces = [];
    this.orphanedRooms = new Set();
    this.parentMap = new _maps.EnhancedMap();
    this.notificationStateMap = new Map();
    this.spaceFilteredRooms = new Map();
    this._activeSpace = _.MetaSpace.Home; // set properly by onReady

    this._suggestedRooms = [];
    this._invitedSpaces = new Set();
    this._enabledMetaSpaces = [];
  }

  async onNotReady() {
    if (!SpaceStore.spacesEnabled) return;

    if (this.matrixClient) {
      this.matrixClient.removeListener("Room", this.onRoom);
      this.matrixClient.removeListener("Room.myMembership", this.onRoom);
      this.matrixClient.removeListener("Room.accountData", this.onRoomAccountData);
      this.matrixClient.removeListener("RoomState.events", this.onRoomState);
      this.matrixClient.removeListener("RoomState.members", this.onRoomStateMembers);
      this.matrixClient.removeListener("accountData", this.onAccountData);
    }

    await this.reset();
  }

  async onReady() {
    if (!spacesEnabled) return;
    this.matrixClient.on("Room", this.onRoom);
    this.matrixClient.on("Room.myMembership", this.onRoom);
    this.matrixClient.on("Room.accountData", this.onRoomAccountData);
    this.matrixClient.on("RoomState.events", this.onRoomState);
    this.matrixClient.on("RoomState.members", this.onRoomStateMembers);
    this.matrixClient.on("accountData", this.onAccountData);
    this.matrixClient.getCapabilities().then(capabilities => {
      var _capabilities$mRoom_, _capabilities$mRoom_$;

      this._restrictedJoinRuleSupport = capabilities === null || capabilities === void 0 ? void 0 : (_capabilities$mRoom_ = capabilities["m.room_versions"]) === null || _capabilities$mRoom_ === void 0 ? void 0 : (_capabilities$mRoom_$ = _capabilities$mRoom_["org.matrix.msc3244.room_capabilities"]) === null || _capabilities$mRoom_$ === void 0 ? void 0 : _capabilities$mRoom_$["restricted"];
    });

    const enabledMetaSpaces = _SettingsStore.default.getValue("Spaces.enabledMetaSpaces");

    this._enabledMetaSpaces = metaSpaceOrder.filter(k => enabledMetaSpaces[k]);
    await this.onSpaceUpdate(); // trigger an initial update
    // restore selected state from last session if any and still valid

    const lastSpaceId = window.localStorage.getItem(ACTIVE_SPACE_LS_KEY);

    if (lastSpaceId && (lastSpaceId[0] === "!" ? this.matrixClient.getRoom(lastSpaceId) : enabledMetaSpaces[lastSpaceId])) {
      // don't context switch here as it may break permalinks
      this.setActiveSpace(lastSpaceId, false);
    } else {
      this.goToFirstSpace();
    }
  }

  goToFirstSpace(contextSwitch = false) {
    var _this$spacePanelSpace;

    this.setActiveSpace(this.enabledMetaSpaces[0] ?? ((_this$spacePanelSpace = this.spacePanelSpaces[0]) === null || _this$spacePanelSpace === void 0 ? void 0 : _this$spacePanelSpace.roomId), contextSwitch);
  }

  async onAction(payload) {
    if (!spacesEnabled) return;

    switch (payload.action) {
      case "view_room":
        {
          var _this$matrixClient9;

          // Don't auto-switch rooms when reacting to a context-switch
          // as this is not helpful and can create loops of rooms/space switching
          if (payload.context_switch) break;
          const roomId = payload.room_id;
          const room = (_this$matrixClient9 = this.matrixClient) === null || _this$matrixClient9 === void 0 ? void 0 : _this$matrixClient9.getRoom(roomId);

          if (room !== null && room !== void 0 && room.isSpaceRoom()) {
            // Don't context switch when navigating to the space room
            // as it will cause you to end up in the wrong room
            this.setActiveSpace(room.roomId, false);
          } else if ((!this.allRoomsInHome || this.activeSpace[0] === "!") && !this.getSpaceFilteredRoomIds(this.activeSpace).has(roomId)) {
            this.switchToRelatedSpace(roomId);
          } // Persist last viewed room from a space
          // we don't await setActiveSpace above as we only care about this.activeSpace being up to date
          // synchronously for the below code - everything else can and should be async.


          window.localStorage.setItem(getSpaceContextKey(this.activeSpace), payload.room_id);
          break;
        }

      case "view_home_page":
        if (!payload.context_switch && this.enabledMetaSpaces.includes(_.MetaSpace.Home)) {
          this.setActiveSpace(_.MetaSpace.Home, false);
          window.localStorage.setItem(getSpaceContextKey(this.activeSpace), "");
        }

        break;

      case "after_leave_room":
        if (this._activeSpace[0] === "!" && payload.room_id === this._activeSpace) {
          // User has left the current space, go to first space
          this.goToFirstSpace();
        }

        break;

      case _actions.Action.SwitchSpace:
        {
          // Metaspaces start at 1, Spaces follow
          if (payload.num < 1 || payload.num > 9) break;
          const numMetaSpaces = this.enabledMetaSpaces.length;

          if (payload.num <= numMetaSpaces) {
            this.setActiveSpace(this.enabledMetaSpaces[payload.num - 1]);
          } else if (this.spacePanelSpaces.length > payload.num - numMetaSpaces - 1) {
            this.setActiveSpace(this.spacePanelSpaces[payload.num - numMetaSpaces - 1].roomId);
          }

          break;
        }

      case _actions.Action.SettingUpdated:
        {
          const settingUpdatedPayload = payload;

          switch (settingUpdatedPayload.settingName) {
            case "Spaces.allRoomsInHome":
              {
                const newValue = _SettingsStore.default.getValue("Spaces.allRoomsInHome");

                if (this.allRoomsInHome !== newValue) {
                  this._allRoomsInHome = newValue;
                  this.emit(_.UPDATE_HOME_BEHAVIOUR, this.allRoomsInHome);
                  this.rebuild(); // rebuild everything
                }

                break;
              }

            case "Spaces.enabledMetaSpaces":
              {
                const newValue = _SettingsStore.default.getValue("Spaces.enabledMetaSpaces");

                const enabledMetaSpaces = metaSpaceOrder.filter(k => newValue[k]);

                if ((0, _arrays.arrayHasDiff)(this._enabledMetaSpaces, enabledMetaSpaces)) {
                  this._enabledMetaSpaces = enabledMetaSpaces; // if a metaspace currently being viewed was remove, go to another one

                  if (this.activeSpace[0] !== "!" && !enabledMetaSpaces.includes(this.activeSpace)) {
                    this.goToFirstSpace();
                  }

                  this.emit(_.UPDATE_TOP_LEVEL_SPACES, this.spacePanelSpaces, this.enabledMetaSpaces);
                  this.rebuild(); // rebuild everything
                }

                break;
              }
          }
        }
    }
  }

  getNotificationState(key) {
    if (this.notificationStateMap.has(key)) {
      return this.notificationStateMap.get(key);
    }

    const state = new _SpaceNotificationState.SpaceNotificationState(key, getRoomFn);
    this.notificationStateMap.set(key, state);
    return state;
  } // traverse space tree with DFS calling fn on each space including the given root one,
  // if includeRooms is true then fn will be called on each leaf room, if it is present in multiple sub-spaces
  // then fn will be called with it multiple times.


  traverseSpace(spaceId, fn, includeRooms = false, parentPath) {
    if (parentPath && parentPath.has(spaceId)) return; // prevent cycles

    fn(spaceId);
    const newPath = new Set(parentPath).add(spaceId);
    const [childSpaces, childRooms] = partitionSpacesAndRooms(this.getChildren(spaceId));

    if (includeRooms) {
      childRooms.forEach(r => fn(r.roomId));
    }

    childSpaces.forEach(s => this.traverseSpace(s.roomId, fn, includeRooms, newPath));
  }

  sortRootSpaces(spaces) {
    return (0, _lodash.sortBy)(spaces, [this.getSpaceTagOrdering, "roomId"]);
  }

  async setRootSpaceOrder(space, order) {
    this.spaceOrderLocalEchoMap.set(space.roomId, order);

    try {
      await this.matrixClient.setRoomAccountData(space.roomId, _event.EventType.SpaceOrder, {
        order
      });
    } catch (e) {
      _logger.logger.warn("Failed to set root space order", e);

      if (this.spaceOrderLocalEchoMap.get(space.roomId) === order) {
        this.spaceOrderLocalEchoMap.delete(space.roomId);
      }
    }
  }

  moveRootSpace(fromIndex, toIndex) {
    const currentOrders = this.rootSpaces.map(this.getSpaceTagOrdering);
    const changes = (0, _stringOrderField.reorderLexicographically)(currentOrders, fromIndex, toIndex);
    changes.forEach(({
      index,
      order
    }) => {
      this.setRootSpaceOrder(this.rootSpaces[index], order);
    });
    this.notifyIfOrderChanged();
  }

}

exports.SpaceStoreClass = SpaceStoreClass;

class SpaceStore {
  static get instance() {
    return SpaceStore.internalInstance;
  }

}

exports.default = SpaceStore;
(0, _defineProperty2.default)(SpaceStore, "spacesEnabled", spacesEnabled);
(0, _defineProperty2.default)(SpaceStore, "internalInstance", new SpaceStoreClass());
window.mxSpaceStore = SpaceStore.instance;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,