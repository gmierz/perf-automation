"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _dispatcher = _interopRequireDefault(require("../dispatcher/dispatcher"));

var _verification = require("../verification");

var _utils = require("flux/utils");

var _SettingsStore = _interopRequireDefault(require("../settings/SettingsStore"));

var _RightPanelStorePhases = require("./RightPanelStorePhases");

var _actions = require("../dispatcher/actions");

var _SettingLevel = require("../settings/SettingLevel");

var _logger = require("matrix-js-sdk/src/logger");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const INITIAL_STATE = {
  showRoomPanel: _SettingsStore.default.getValue("showRightPanelInRoom"),
  showGroupPanel: _SettingsStore.default.getValue("showRightPanelInGroup"),
  lastRoomPhase: _SettingsStore.default.getValue("lastRightPanelPhaseForRoom"),
  lastGroupPhase: _SettingsStore.default.getValue("lastRightPanelPhaseForGroup"),
  lastRoomPhaseParams: {}
};
const GROUP_PHASES = [_RightPanelStorePhases.RightPanelPhases.GroupMemberList, _RightPanelStorePhases.RightPanelPhases.GroupRoomList, _RightPanelStorePhases.RightPanelPhases.GroupRoomInfo, _RightPanelStorePhases.RightPanelPhases.GroupMemberInfo];
const MEMBER_INFO_PHASES = [_RightPanelStorePhases.RightPanelPhases.RoomMemberInfo, _RightPanelStorePhases.RightPanelPhases.Room3pidMemberInfo, _RightPanelStorePhases.RightPanelPhases.EncryptionPanel];
/**
 * A class for tracking the state of the right panel between layouts and
 * sessions.
 */

class RightPanelStore extends _utils.Store {
  constructor() {
    super(_dispatcher.default); // Initialise state

    (0, _defineProperty2.default)(this, "state", void 0);
    (0, _defineProperty2.default)(this, "lastRoomId", void 0);
    this.state = INITIAL_STATE;
  }

  get isOpenForRoom() {
    return this.state.showRoomPanel;
  }

  get isOpenForGroup() {
    return this.state.showGroupPanel;
  }

  get roomPanelPhase() {
    return this.state.lastRoomPhase;
  }

  get groupPanelPhase() {
    return this.state.lastGroupPhase;
  }

  get previousPhase() {
    return _RightPanelStorePhases.RIGHT_PANEL_PHASES_NO_ARGS.includes(this.state.previousPhase) ? this.state.previousPhase : null;
  }

  get visibleRoomPanelPhase() {
    return this.isOpenForRoom ? this.roomPanelPhase : null;
  }

  get visibleGroupPanelPhase() {
    return this.isOpenForGroup ? this.groupPanelPhase : null;
  }

  get roomPanelPhaseParams() {
    return this.state.lastRoomPhaseParams || {};
  }

  setState(newState) {
    this.state = Object.assign(this.state, newState);

    _SettingsStore.default.setValue("showRightPanelInRoom", null, _SettingLevel.SettingLevel.DEVICE, this.state.showRoomPanel);

    _SettingsStore.default.setValue("showRightPanelInGroup", null, _SettingLevel.SettingLevel.DEVICE, this.state.showGroupPanel);

    if (_RightPanelStorePhases.RIGHT_PANEL_PHASES_NO_ARGS.includes(this.state.lastRoomPhase)) {
      _SettingsStore.default.setValue("lastRightPanelPhaseForRoom", null, _SettingLevel.SettingLevel.DEVICE, this.state.lastRoomPhase);
    }

    if (_RightPanelStorePhases.RIGHT_PANEL_PHASES_NO_ARGS.includes(this.state.lastGroupPhase)) {
      _SettingsStore.default.setValue("lastRightPanelPhaseForGroup", null, _SettingLevel.SettingLevel.DEVICE, this.state.lastGroupPhase);
    }

    this.__emitChange();
  }

  __onDispatch(payload) {
    // eslint-disable-line @typescript-eslint/naming-convention
    switch (payload.action) {
      case _actions.Action.ViewRoom:
        if (payload.room_id === this.lastRoomId) break;
      // skip this transition, probably a permalink
      // fallthrough

      case 'view_group':
        this.lastRoomId = payload.room_id; // Reset to the member list if we're viewing member info

        if (MEMBER_INFO_PHASES.includes(this.state.lastRoomPhase)) {
          this.setState({
            lastRoomPhase: _RightPanelStorePhases.RightPanelPhases.RoomMemberList,
            lastRoomPhaseParams: {}
          });
        } // Do the same for groups


        if (this.state.lastGroupPhase === _RightPanelStorePhases.RightPanelPhases.GroupMemberInfo) {
          this.setState({
            lastGroupPhase: _RightPanelStorePhases.RightPanelPhases.GroupMemberList
          });
        }

        break;

      case _actions.Action.SetRightPanelPhase:
        {
          let targetPhase = payload.phase;
          let refireParams = payload.refireParams;
          const allowClose = payload.allowClose ?? true; // redirect to EncryptionPanel if there is an ongoing verification request

          if (targetPhase === _RightPanelStorePhases.RightPanelPhases.RoomMemberInfo && payload.refireParams) {
            const {
              member
            } = payload.refireParams;
            const pendingRequest = (0, _verification.pendingVerificationRequestForUser)(member);

            if (pendingRequest) {
              targetPhase = _RightPanelStorePhases.RightPanelPhases.EncryptionPanel;
              refireParams = {
                verificationRequest: pendingRequest,
                member
              };
            }
          }

          if (!_RightPanelStorePhases.RightPanelPhases[targetPhase]) {
            _logger.logger.warn(`Tried to switch right panel to unknown phase: ${targetPhase}`);

            return;
          }

          if (GROUP_PHASES.includes(targetPhase)) {
            if (targetPhase === this.state.lastGroupPhase) {
              this.setState({
                showGroupPanel: !this.state.showGroupPanel,
                previousPhase: null
              });
            } else {
              this.setState({
                lastGroupPhase: targetPhase,
                showGroupPanel: true,
                previousPhase: this.state.lastGroupPhase
              });
            }
          } else {
            if (targetPhase === this.state.lastRoomPhase && !refireParams && allowClose) {
              this.setState({
                showRoomPanel: !this.state.showRoomPanel,
                previousPhase: null
              });
            } else {
              this.setState({
                lastRoomPhase: targetPhase,
                showRoomPanel: true,
                lastRoomPhaseParams: refireParams || {},
                previousPhase: this.state.lastRoomPhase
              });
            }
          } // Let things like the member info panel actually open to the right member.


          _dispatcher.default.dispatch(_objectSpread({
            action: _actions.Action.AfterRightPanelPhaseChange,
            phase: targetPhase
          }, refireParams || {}));

          break;
        }

      case _actions.Action.ToggleRightPanel:
        if (payload.type === "room") {
          this.setState({
            showRoomPanel: !this.state.showRoomPanel
          });
        } else {
          // group
          this.setState({
            showGroupPanel: !this.state.showGroupPanel
          });
        }

        break;
    }
  }

  static getSharedInstance() {
    if (!RightPanelStore.instance) {
      RightPanelStore.instance = new RightPanelStore();
    }

    return RightPanelStore.instance;
  }

}

exports.default = RightPanelStore;
(0, _defineProperty2.default)(RightPanelStore, "instance", void 0);
window.mxRightPanelStore = RightPanelStore.getSharedInstance();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,