"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VoiceRecordingStore = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _AsyncStoreWithClient = require("./AsyncStoreWithClient");

var _dispatcher = _interopRequireDefault(require("../dispatcher/dispatcher"));

var _VoiceRecording = require("../audio/VoiceRecording");

/*
Copyright 2021 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
class VoiceRecordingStore extends _AsyncStoreWithClient.AsyncStoreWithClient {
  constructor() {
    super(_dispatcher.default, {});
  }
  /**
   * Gets the active recording instance, if any.
   */


  get activeRecording() {
    return this.state.recording;
  }

  static get instance() {
    if (!VoiceRecordingStore.internalInstance) {
      VoiceRecordingStore.internalInstance = new VoiceRecordingStore();
    }

    return VoiceRecordingStore.internalInstance;
  }

  async onAction(payload) {
    // Nothing to do, but we're required to override the function
    return;
  }
  /**
   * Starts a new recording if one isn't already in progress. Note that this simply
   * creates a recording instance - whether or not recording is actively in progress
   * can be seen via the VoiceRecording class.
   * @returns {VoiceRecording} The recording.
   */


  startRecording() {
    if (!this.matrixClient) throw new Error("Cannot start a recording without a MatrixClient");
    if (this.state.recording) throw new Error("A recording is already in progress");
    const recording = new _VoiceRecording.VoiceRecording(this.matrixClient); // noinspection JSIgnoredPromiseFromCall - we can safely run this async

    this.updateState({
      recording
    });
    return recording;
  }
  /**
   * Disposes of the current recording, no matter the state of it.
   * @returns {Promise<void>} Resolves when complete.
   */


  disposeRecording() {
    if (this.state.recording) {
      this.state.recording.destroy(); // stops internally
    }

    return this.updateState({
      recording: null
    });
  }

}

exports.VoiceRecordingStore = VoiceRecordingStore;
(0, _defineProperty2.default)(VoiceRecordingStore, "internalInstance", void 0);
window.mxVoiceRecordingStore = VoiceRecordingStore.instance;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdG9yZXMvVm9pY2VSZWNvcmRpbmdTdG9yZS50cyJdLCJuYW1lcyI6WyJWb2ljZVJlY29yZGluZ1N0b3JlIiwiQXN5bmNTdG9yZVdpdGhDbGllbnQiLCJjb25zdHJ1Y3RvciIsImRlZmF1bHREaXNwYXRjaGVyIiwiYWN0aXZlUmVjb3JkaW5nIiwic3RhdGUiLCJyZWNvcmRpbmciLCJpbnN0YW5jZSIsImludGVybmFsSW5zdGFuY2UiLCJvbkFjdGlvbiIsInBheWxvYWQiLCJzdGFydFJlY29yZGluZyIsIm1hdHJpeENsaWVudCIsIkVycm9yIiwiVm9pY2VSZWNvcmRpbmciLCJ1cGRhdGVTdGF0ZSIsImRpc3Bvc2VSZWNvcmRpbmciLCJkZXN0cm95Iiwid2luZG93IiwibXhWb2ljZVJlY29yZGluZ1N0b3JlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQWdCQTs7QUFDQTs7QUFFQTs7QUFuQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBV08sTUFBTUEsbUJBQU4sU0FBa0NDLDBDQUFsQyxDQUErRDtBQUczREMsRUFBQUEsV0FBVyxHQUFHO0FBQ2pCLFVBQU1DLG1CQUFOLEVBQXlCLEVBQXpCO0FBQ0g7QUFFRDtBQUNKO0FBQ0E7OztBQUM4QixNQUFmQyxlQUFlLEdBQTBCO0FBQ2hELFdBQU8sS0FBS0MsS0FBTCxDQUFXQyxTQUFsQjtBQUNIOztBQUV5QixhQUFSQyxRQUFRLEdBQXdCO0FBQzlDLFFBQUksQ0FBQ1AsbUJBQW1CLENBQUNRLGdCQUF6QixFQUEyQztBQUN2Q1IsTUFBQUEsbUJBQW1CLENBQUNRLGdCQUFwQixHQUF1QyxJQUFJUixtQkFBSixFQUF2QztBQUNIOztBQUNELFdBQU9BLG1CQUFtQixDQUFDUSxnQkFBM0I7QUFDSDs7QUFFdUIsUUFBUkMsUUFBUSxDQUFDQyxPQUFELEVBQXdDO0FBQzVEO0FBQ0E7QUFDSDtBQUVEO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ1dDLEVBQUFBLGNBQWMsR0FBbUI7QUFDcEMsUUFBSSxDQUFDLEtBQUtDLFlBQVYsRUFBd0IsTUFBTSxJQUFJQyxLQUFKLENBQVUsaURBQVYsQ0FBTjtBQUN4QixRQUFJLEtBQUtSLEtBQUwsQ0FBV0MsU0FBZixFQUEwQixNQUFNLElBQUlPLEtBQUosQ0FBVSxvQ0FBVixDQUFOO0FBRTFCLFVBQU1QLFNBQVMsR0FBRyxJQUFJUSw4QkFBSixDQUFtQixLQUFLRixZQUF4QixDQUFsQixDQUpvQyxDQU1wQzs7QUFDQSxTQUFLRyxXQUFMLENBQWlCO0FBQUVULE1BQUFBO0FBQUYsS0FBakI7QUFFQSxXQUFPQSxTQUFQO0FBQ0g7QUFFRDtBQUNKO0FBQ0E7QUFDQTs7O0FBQ1dVLEVBQUFBLGdCQUFnQixHQUFrQjtBQUNyQyxRQUFJLEtBQUtYLEtBQUwsQ0FBV0MsU0FBZixFQUEwQjtBQUN0QixXQUFLRCxLQUFMLENBQVdDLFNBQVgsQ0FBcUJXLE9BQXJCLEdBRHNCLENBQ1U7QUFDbkM7O0FBQ0QsV0FBTyxLQUFLRixXQUFMLENBQWlCO0FBQUVULE1BQUFBLFNBQVMsRUFBRTtBQUFiLEtBQWpCLENBQVA7QUFDSDs7QUFyRGlFOzs7OEJBQXpETixtQjtBQXdEYmtCLE1BQU0sQ0FBQ0MscUJBQVAsR0FBK0JuQixtQkFBbUIsQ0FBQ08sUUFBbkQiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuQ29weXJpZ2h0IDIwMjEgVGhlIE1hdHJpeC5vcmcgRm91bmRhdGlvbiBDLkkuQy5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG5pbXBvcnQgeyBBc3luY1N0b3JlV2l0aENsaWVudCB9IGZyb20gXCIuL0FzeW5jU3RvcmVXaXRoQ2xpZW50XCI7XG5pbXBvcnQgZGVmYXVsdERpc3BhdGNoZXIgZnJvbSBcIi4uL2Rpc3BhdGNoZXIvZGlzcGF0Y2hlclwiO1xuaW1wb3J0IHsgQWN0aW9uUGF5bG9hZCB9IGZyb20gXCIuLi9kaXNwYXRjaGVyL3BheWxvYWRzXCI7XG5pbXBvcnQgeyBWb2ljZVJlY29yZGluZyB9IGZyb20gXCIuLi9hdWRpby9Wb2ljZVJlY29yZGluZ1wiO1xuXG5pbnRlcmZhY2UgSVN0YXRlIHtcbiAgICByZWNvcmRpbmc/OiBWb2ljZVJlY29yZGluZztcbn1cblxuZXhwb3J0IGNsYXNzIFZvaWNlUmVjb3JkaW5nU3RvcmUgZXh0ZW5kcyBBc3luY1N0b3JlV2l0aENsaWVudDxJU3RhdGU+IHtcbiAgICBwcml2YXRlIHN0YXRpYyBpbnRlcm5hbEluc3RhbmNlOiBWb2ljZVJlY29yZGluZ1N0b3JlO1xuXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcihkZWZhdWx0RGlzcGF0Y2hlciwge30pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGFjdGl2ZSByZWNvcmRpbmcgaW5zdGFuY2UsIGlmIGFueS5cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0IGFjdGl2ZVJlY29yZGluZygpOiBWb2ljZVJlY29yZGluZyB8IG51bGwge1xuICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZS5yZWNvcmRpbmc7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBnZXQgaW5zdGFuY2UoKTogVm9pY2VSZWNvcmRpbmdTdG9yZSB7XG4gICAgICAgIGlmICghVm9pY2VSZWNvcmRpbmdTdG9yZS5pbnRlcm5hbEluc3RhbmNlKSB7XG4gICAgICAgICAgICBWb2ljZVJlY29yZGluZ1N0b3JlLmludGVybmFsSW5zdGFuY2UgPSBuZXcgVm9pY2VSZWNvcmRpbmdTdG9yZSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBWb2ljZVJlY29yZGluZ1N0b3JlLmludGVybmFsSW5zdGFuY2U7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGFzeW5jIG9uQWN0aW9uKHBheWxvYWQ6IEFjdGlvblBheWxvYWQpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgLy8gTm90aGluZyB0byBkbywgYnV0IHdlJ3JlIHJlcXVpcmVkIHRvIG92ZXJyaWRlIHRoZSBmdW5jdGlvblxuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU3RhcnRzIGEgbmV3IHJlY29yZGluZyBpZiBvbmUgaXNuJ3QgYWxyZWFkeSBpbiBwcm9ncmVzcy4gTm90ZSB0aGF0IHRoaXMgc2ltcGx5XG4gICAgICogY3JlYXRlcyBhIHJlY29yZGluZyBpbnN0YW5jZSAtIHdoZXRoZXIgb3Igbm90IHJlY29yZGluZyBpcyBhY3RpdmVseSBpbiBwcm9ncmVzc1xuICAgICAqIGNhbiBiZSBzZWVuIHZpYSB0aGUgVm9pY2VSZWNvcmRpbmcgY2xhc3MuXG4gICAgICogQHJldHVybnMge1ZvaWNlUmVjb3JkaW5nfSBUaGUgcmVjb3JkaW5nLlxuICAgICAqL1xuICAgIHB1YmxpYyBzdGFydFJlY29yZGluZygpOiBWb2ljZVJlY29yZGluZyB7XG4gICAgICAgIGlmICghdGhpcy5tYXRyaXhDbGllbnQpIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBzdGFydCBhIHJlY29yZGluZyB3aXRob3V0IGEgTWF0cml4Q2xpZW50XCIpO1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS5yZWNvcmRpbmcpIHRocm93IG5ldyBFcnJvcihcIkEgcmVjb3JkaW5nIGlzIGFscmVhZHkgaW4gcHJvZ3Jlc3NcIik7XG5cbiAgICAgICAgY29uc3QgcmVjb3JkaW5nID0gbmV3IFZvaWNlUmVjb3JkaW5nKHRoaXMubWF0cml4Q2xpZW50KTtcblxuICAgICAgICAvLyBub2luc3BlY3Rpb24gSlNJZ25vcmVkUHJvbWlzZUZyb21DYWxsIC0gd2UgY2FuIHNhZmVseSBydW4gdGhpcyBhc3luY1xuICAgICAgICB0aGlzLnVwZGF0ZVN0YXRlKHsgcmVjb3JkaW5nIH0pO1xuXG4gICAgICAgIHJldHVybiByZWNvcmRpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGlzcG9zZXMgb2YgdGhlIGN1cnJlbnQgcmVjb3JkaW5nLCBubyBtYXR0ZXIgdGhlIHN0YXRlIG9mIGl0LlxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fSBSZXNvbHZlcyB3aGVuIGNvbXBsZXRlLlxuICAgICAqL1xuICAgIHB1YmxpYyBkaXNwb3NlUmVjb3JkaW5nKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS5yZWNvcmRpbmcpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUucmVjb3JkaW5nLmRlc3Ryb3koKTsgLy8gc3RvcHMgaW50ZXJuYWxseVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnVwZGF0ZVN0YXRlKHsgcmVjb3JkaW5nOiBudWxsIH0pO1xuICAgIH1cbn1cblxud2luZG93Lm14Vm9pY2VSZWNvcmRpbmdTdG9yZSA9IFZvaWNlUmVjb3JkaW5nU3RvcmUuaW5zdGFuY2U7XG4iXX0=