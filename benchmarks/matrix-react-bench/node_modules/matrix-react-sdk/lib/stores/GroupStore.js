"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.parseMembersResponse = parseMembersResponse;
exports.parseRoomsResponse = parseRoomsResponse;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _events = _interopRequireDefault(require("events"));

var _groups = require("../groups");

var _FlairStore = _interopRequireDefault(require("./FlairStore"));

var _MatrixClientPeg = require("../MatrixClientPeg");

var _dispatcher = _interopRequireDefault(require("../dispatcher/dispatcher"));

var _logger = require("matrix-js-sdk/src/logger");

/*
Copyright 2017 New Vector Ltd

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
function parseMembersResponse(response) {
  return response.chunk.map(apiMember => (0, _groups.groupMemberFromApiObject)(apiMember));
}

function parseRoomsResponse(response) {
  return response.chunk.map(apiRoom => (0, _groups.groupRoomFromApiObject)(apiRoom));
} // The number of ongoing group requests


let ongoingRequestCount = 0; // This has arbitrarily been set to a small number to lower the priority
// of doing group-related requests because we care about other important
// requests like hitting /sync.

const LIMIT = 3; // Maximum number of ongoing group requests
// FIFO queue of functions to call in the backlog

const backlogQueue = [// () => {...}
]; // Pull from the FIFO queue

function checkBacklog() {
  const item = backlogQueue.shift();
  if (typeof item === 'function') item();
} // Limit the maximum number of ongoing promises returned by fn to LIMIT and
// use a FIFO queue to handle the backlog.


async function limitConcurrency(fn) {
  if (ongoingRequestCount >= LIMIT) {
    // Enqueue this request for later execution
    await new Promise((resolve, reject) => {
      backlogQueue.push(resolve);
    });
  }

  ongoingRequestCount++;

  try {
    return await fn();
  } catch (err) {
    // We explicitly do not handle the error here, but let it propogate.
    throw err;
  } finally {
    ongoingRequestCount--;
    checkBacklog();
  }
}
/**
 * Global store for tracking group summary, members, invited members and rooms.
 */


class GroupStore extends _events.default {
  constructor() {
    super();
    (0, _defineProperty2.default)(this, "STATE_KEY", {
      GroupMembers: 'GroupMembers',
      GroupInvitedMembers: 'GroupInvitedMembers',
      Summary: 'Summary',
      GroupRooms: 'GroupRooms'
    });
    this._state = {};
    this._state[this.STATE_KEY.Summary] = {};
    this._state[this.STATE_KEY.GroupRooms] = {};
    this._state[this.STATE_KEY.GroupMembers] = {};
    this._state[this.STATE_KEY.GroupInvitedMembers] = {};
    this._ready = {};
    this._ready[this.STATE_KEY.Summary] = {};
    this._ready[this.STATE_KEY.GroupRooms] = {};
    this._ready[this.STATE_KEY.GroupMembers] = {};
    this._ready[this.STATE_KEY.GroupInvitedMembers] = {};
    this._fetchResourcePromise = {
      [this.STATE_KEY.Summary]: {},
      [this.STATE_KEY.GroupRooms]: {},
      [this.STATE_KEY.GroupMembers]: {},
      [this.STATE_KEY.GroupInvitedMembers]: {}
    };
    this._resourceFetcher = {
      [this.STATE_KEY.Summary]: groupId => {
        return limitConcurrency(() => _MatrixClientPeg.MatrixClientPeg.get().getGroupSummary(groupId));
      },
      [this.STATE_KEY.GroupRooms]: groupId => {
        return limitConcurrency(() => _MatrixClientPeg.MatrixClientPeg.get().getGroupRooms(groupId).then(parseRoomsResponse));
      },
      [this.STATE_KEY.GroupMembers]: groupId => {
        return limitConcurrency(() => _MatrixClientPeg.MatrixClientPeg.get().getGroupUsers(groupId).then(parseMembersResponse));
      },
      [this.STATE_KEY.GroupInvitedMembers]: groupId => {
        return limitConcurrency(() => _MatrixClientPeg.MatrixClientPeg.get().getGroupInvitedUsers(groupId).then(parseMembersResponse));
      }
    };
  }

  _fetchResource(stateKey, groupId) {
    // Ongoing request, ignore
    if (this._fetchResourcePromise[stateKey][groupId]) return;

    const clientPromise = this._resourceFetcher[stateKey](groupId); // Indicate ongoing request


    this._fetchResourcePromise[stateKey][groupId] = clientPromise;
    clientPromise.then(result => {
      this._state[stateKey][groupId] = result;
      this._ready[stateKey][groupId] = true;

      this._notifyListeners();
    }).catch(err => {
      // Invited users not visible to non-members
      if (stateKey === this.STATE_KEY.GroupInvitedMembers && err.httpStatus === 403) {
        return;
      }

      _logger.logger.error(`Failed to get resource ${stateKey} for ${groupId}`, err);

      this.emit('error', err, groupId, stateKey);
    }).finally(() => {
      // Indicate finished request, allow for future fetches
      delete this._fetchResourcePromise[stateKey][groupId];
    });
    return clientPromise;
  }

  _notifyListeners() {
    this.emit('update');
  }
  /**
   * Register a listener to recieve updates from the store. This also
   * immediately triggers an update to send the current state of the
   * store (which could be the initial state).
   *
   * If a group ID is specified, this also causes a fetch of all data
   * of the specified group, which might cause 4 separate HTTP
   * requests, but only if said requests aren't already ongoing.
   *
   * @param {string?} groupId the ID of the group to fetch data for.
   *                          Optional.
   * @param {function} fn the function to call when the store updates.
   * @return {Object} tok a registration "token" with a single
   *                      property `unregister`, a function that can
   *                      be called to unregister the listener such
   *                      that it won't be called any more.
   */


  registerListener(groupId, fn) {
    this.on('update', fn); // Call to set initial state (before fetching starts)

    this.emit('update');

    if (groupId) {
      this._fetchResource(this.STATE_KEY.Summary, groupId);

      this._fetchResource(this.STATE_KEY.GroupRooms, groupId);

      this._fetchResource(this.STATE_KEY.GroupMembers, groupId);

      this._fetchResource(this.STATE_KEY.GroupInvitedMembers, groupId);
    } // Similar to the Store of flux/utils, we return a "token" that
    // can be used to unregister the listener.


    return {
      unregister: () => {
        this.unregisterListener(fn);
      }
    };
  }

  unregisterListener(fn) {
    this.removeListener('update', fn);
  }

  isStateReady(groupId, id) {
    return this._ready[id][groupId];
  }

  getGroupIdsForRoomId(roomId) {
    const groupIds = Object.keys(this._state[this.STATE_KEY.GroupRooms]);
    return groupIds.filter(groupId => {
      const rooms = this._state[this.STATE_KEY.GroupRooms][groupId] || [];
      return rooms.some(room => room.roomId === roomId);
    });
  }

  getSummary(groupId) {
    return this._state[this.STATE_KEY.Summary][groupId] || {};
  }

  getGroupRooms(groupId) {
    return this._state[this.STATE_KEY.GroupRooms][groupId] || [];
  }

  getGroupMembers(groupId) {
    return this._state[this.STATE_KEY.GroupMembers][groupId] || [];
  }

  getGroupInvitedMembers(groupId) {
    return this._state[this.STATE_KEY.GroupInvitedMembers][groupId] || [];
  }

  getGroupPublicity(groupId) {
    return (this._state[this.STATE_KEY.Summary][groupId] || {}).user ? (this._state[this.STATE_KEY.Summary][groupId] || {}).user.is_publicised : null;
  }

  isUserPrivileged(groupId) {
    return (this._state[this.STATE_KEY.Summary][groupId] || {}).user ? (this._state[this.STATE_KEY.Summary][groupId] || {}).user.is_privileged : null;
  }

  refreshGroupRooms(groupId) {
    return this._fetchResource(this.STATE_KEY.GroupRooms, groupId);
  }

  refreshGroupMembers(groupId) {
    return this._fetchResource(this.STATE_KEY.GroupMembers, groupId);
  }

  addRoomToGroup(groupId, roomId, isPublic) {
    return _MatrixClientPeg.MatrixClientPeg.get().addRoomToGroup(groupId, roomId, isPublic).then(this._fetchResource.bind(this, this.STATE_KEY.GroupRooms, groupId));
  }

  updateGroupRoomVisibility(groupId, roomId, isPublic) {
    return _MatrixClientPeg.MatrixClientPeg.get().updateGroupRoomVisibility(groupId, roomId, isPublic).then(this._fetchResource.bind(this, this.STATE_KEY.GroupRooms, groupId));
  }

  removeRoomFromGroup(groupId, roomId) {
    return _MatrixClientPeg.MatrixClientPeg.get().removeRoomFromGroup(groupId, roomId) // Room might be in the summary, refresh just in case
    .then(this._fetchResource.bind(this, this.STATE_KEY.Summary, groupId)).then(this._fetchResource.bind(this, this.STATE_KEY.GroupRooms, groupId));
  }

  inviteUserToGroup(groupId, userId) {
    return _MatrixClientPeg.MatrixClientPeg.get().inviteUserToGroup(groupId, userId).then(this._fetchResource.bind(this, this.STATE_KEY.GroupInvitedMembers, groupId));
  }

  acceptGroupInvite(groupId) {
    return _MatrixClientPeg.MatrixClientPeg.get().acceptGroupInvite(groupId) // The user should now be able to access (personal) group settings
    .then(this._fetchResource.bind(this, this.STATE_KEY.Summary, groupId)) // The user might be able to see more rooms now
    .then(this._fetchResource.bind(this, this.STATE_KEY.GroupRooms, groupId)) // The user should now appear as a member
    .then(this._fetchResource.bind(this, this.STATE_KEY.GroupMembers, groupId)) // The user should now not appear as an invited member
    .then(this._fetchResource.bind(this, this.STATE_KEY.GroupInvitedMembers, groupId));
  }

  joinGroup(groupId) {
    return _MatrixClientPeg.MatrixClientPeg.get().joinGroup(groupId) // The user should now be able to access (personal) group settings
    .then(this._fetchResource.bind(this, this.STATE_KEY.Summary, groupId)) // The user might be able to see more rooms now
    .then(this._fetchResource.bind(this, this.STATE_KEY.GroupRooms, groupId)) // The user should now appear as a member
    .then(this._fetchResource.bind(this, this.STATE_KEY.GroupMembers, groupId)) // The user should now not appear as an invited member
    .then(this._fetchResource.bind(this, this.STATE_KEY.GroupInvitedMembers, groupId));
  }

  leaveGroup(groupId) {
    // ensure the tag panel filter is cleared if the group was selected
    _dispatcher.default.dispatch({
      action: "deselect_tags",
      tag: groupId
    });

    return _MatrixClientPeg.MatrixClientPeg.get().leaveGroup(groupId) // The user should now not be able to access group settings
    .then(this._fetchResource.bind(this, this.STATE_KEY.Summary, groupId)) // The user might only be able to see a subset of rooms now
    .then(this._fetchResource.bind(this, this.STATE_KEY.GroupRooms, groupId)) // The user should now not appear as a member
    .then(this._fetchResource.bind(this, this.STATE_KEY.GroupMembers, groupId));
  }

  addRoomToGroupSummary(groupId, roomId, categoryId) {
    return _MatrixClientPeg.MatrixClientPeg.get().addRoomToGroupSummary(groupId, roomId, categoryId).then(this._fetchResource.bind(this, this.STATE_KEY.Summary, groupId));
  }

  addUserToGroupSummary(groupId, userId, roleId) {
    return _MatrixClientPeg.MatrixClientPeg.get().addUserToGroupSummary(groupId, userId, roleId).then(this._fetchResource.bind(this, this.STATE_KEY.Summary, groupId));
  }

  removeRoomFromGroupSummary(groupId, roomId) {
    return _MatrixClientPeg.MatrixClientPeg.get().removeRoomFromGroupSummary(groupId, roomId).then(this._fetchResource.bind(this, this.STATE_KEY.Summary, groupId));
  }

  removeUserFromGroupSummary(groupId, userId) {
    return _MatrixClientPeg.MatrixClientPeg.get().removeUserFromGroupSummary(groupId, userId).then(this._fetchResource.bind(this, this.STATE_KEY.Summary, groupId));
  }

  setGroupPublicity(groupId, isPublished) {
    return _MatrixClientPeg.MatrixClientPeg.get().setGroupPublicity(groupId, isPublished).then(() => {
      _FlairStore.default.invalidatePublicisedGroups(_MatrixClientPeg.MatrixClientPeg.get().credentials.userId);
    }).then(this._fetchResource.bind(this, this.STATE_KEY.Summary, groupId));
  }

}

let singletonGroupStore = null;

if (!singletonGroupStore) {
  singletonGroupStore = new GroupStore();
}

var _default = singletonGroupStore;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdG9yZXMvR3JvdXBTdG9yZS5qcyJdLCJuYW1lcyI6WyJwYXJzZU1lbWJlcnNSZXNwb25zZSIsInJlc3BvbnNlIiwiY2h1bmsiLCJtYXAiLCJhcGlNZW1iZXIiLCJwYXJzZVJvb21zUmVzcG9uc2UiLCJhcGlSb29tIiwib25nb2luZ1JlcXVlc3RDb3VudCIsIkxJTUlUIiwiYmFja2xvZ1F1ZXVlIiwiY2hlY2tCYWNrbG9nIiwiaXRlbSIsInNoaWZ0IiwibGltaXRDb25jdXJyZW5jeSIsImZuIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJwdXNoIiwiZXJyIiwiR3JvdXBTdG9yZSIsIkV2ZW50RW1pdHRlciIsImNvbnN0cnVjdG9yIiwiR3JvdXBNZW1iZXJzIiwiR3JvdXBJbnZpdGVkTWVtYmVycyIsIlN1bW1hcnkiLCJHcm91cFJvb21zIiwiX3N0YXRlIiwiU1RBVEVfS0VZIiwiX3JlYWR5IiwiX2ZldGNoUmVzb3VyY2VQcm9taXNlIiwiX3Jlc291cmNlRmV0Y2hlciIsImdyb3VwSWQiLCJNYXRyaXhDbGllbnRQZWciLCJnZXQiLCJnZXRHcm91cFN1bW1hcnkiLCJnZXRHcm91cFJvb21zIiwidGhlbiIsImdldEdyb3VwVXNlcnMiLCJnZXRHcm91cEludml0ZWRVc2VycyIsIl9mZXRjaFJlc291cmNlIiwic3RhdGVLZXkiLCJjbGllbnRQcm9taXNlIiwicmVzdWx0IiwiX25vdGlmeUxpc3RlbmVycyIsImNhdGNoIiwiaHR0cFN0YXR1cyIsImxvZ2dlciIsImVycm9yIiwiZW1pdCIsImZpbmFsbHkiLCJyZWdpc3Rlckxpc3RlbmVyIiwib24iLCJ1bnJlZ2lzdGVyIiwidW5yZWdpc3Rlckxpc3RlbmVyIiwicmVtb3ZlTGlzdGVuZXIiLCJpc1N0YXRlUmVhZHkiLCJpZCIsImdldEdyb3VwSWRzRm9yUm9vbUlkIiwicm9vbUlkIiwiZ3JvdXBJZHMiLCJPYmplY3QiLCJrZXlzIiwiZmlsdGVyIiwicm9vbXMiLCJzb21lIiwicm9vbSIsImdldFN1bW1hcnkiLCJnZXRHcm91cE1lbWJlcnMiLCJnZXRHcm91cEludml0ZWRNZW1iZXJzIiwiZ2V0R3JvdXBQdWJsaWNpdHkiLCJ1c2VyIiwiaXNfcHVibGljaXNlZCIsImlzVXNlclByaXZpbGVnZWQiLCJpc19wcml2aWxlZ2VkIiwicmVmcmVzaEdyb3VwUm9vbXMiLCJyZWZyZXNoR3JvdXBNZW1iZXJzIiwiYWRkUm9vbVRvR3JvdXAiLCJpc1B1YmxpYyIsImJpbmQiLCJ1cGRhdGVHcm91cFJvb21WaXNpYmlsaXR5IiwicmVtb3ZlUm9vbUZyb21Hcm91cCIsImludml0ZVVzZXJUb0dyb3VwIiwidXNlcklkIiwiYWNjZXB0R3JvdXBJbnZpdGUiLCJqb2luR3JvdXAiLCJsZWF2ZUdyb3VwIiwiZGlzIiwiZGlzcGF0Y2giLCJhY3Rpb24iLCJ0YWciLCJhZGRSb29tVG9Hcm91cFN1bW1hcnkiLCJjYXRlZ29yeUlkIiwiYWRkVXNlclRvR3JvdXBTdW1tYXJ5Iiwicm9sZUlkIiwicmVtb3ZlUm9vbUZyb21Hcm91cFN1bW1hcnkiLCJyZW1vdmVVc2VyRnJvbUdyb3VwU3VtbWFyeSIsInNldEdyb3VwUHVibGljaXR5IiwiaXNQdWJsaXNoZWQiLCJGbGFpclN0b3JlIiwiaW52YWxpZGF0ZVB1YmxpY2lzZWRHcm91cHMiLCJjcmVkZW50aWFscyIsInNpbmdsZXRvbkdyb3VwU3RvcmUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFnQkE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRUE7O0FBdEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVVPLFNBQVNBLG9CQUFULENBQThCQyxRQUE5QixFQUF3QztBQUMzQyxTQUFPQSxRQUFRLENBQUNDLEtBQVQsQ0FBZUMsR0FBZixDQUFvQkMsU0FBRCxJQUFlLHNDQUF5QkEsU0FBekIsQ0FBbEMsQ0FBUDtBQUNIOztBQUVNLFNBQVNDLGtCQUFULENBQTRCSixRQUE1QixF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TyxPQUF2RCxDQUZILENBQVA7QUFHSDs7QUFFRGdFLEVBQUFBLDBCQUEwQixDQUFDaEUsT0FBRCxFQUFVbUQsTUFBVixFQUFrQjtBQUN4QyxXQUFPbEQsaUNBQWdCQyxHQUFoQixHQUNGOEQsMEJBREUsQ0FDeUJoRSxPQUR6QixFQUNrQ21ELE1BRGxDLEVBRUY5QyxJQUZFLENBRUcsS0FBS0csY0FBTCxDQUFvQnVDLElBQXBCLENBQXlCLElBQXpCLEVBQStCLEtBQUtuRCxTQUFMLENBQWVILE9BQTlDLEVBQXVETyxPQUF2RCxDQUZILENBQVA7QUFHSDs7QUFFRGlFLEVBQUFBLGlCQUFpQixDQUFDakUsT0FBRCxFQUFVa0UsV0FBVixFQUF1QjtBQUNwQyxXQUFPakUsaUNBQWdCQyxHQUFoQixHQUNGK0QsaUJBREUsQ0FDZ0JqRSxPQURoQixFQUN5QmtFLFdBRHpCLEVBRUY3RCxJQUZFLENBRUcsTUFBTTtBQUFFOEQsMEJBQVdDLDBCQUFYLENBQXNDbkUsaUNBQWdCQyxHQUFoQixHQUFzQm1FLFdBQXRCLENBQWtDbEIsTUFBeEU7QUFBa0YsS0FGN0YsRUFHRjlDLElBSEUsQ0FHRyxLQUFLRyxjQUFMLENBQW9CdUMsSUFBcEIsQ0FBeUIsSUFBekIsRUFBK0IsS0FBS25ELFNBQUwsQ0FBZUgsT0FBOUMsRUFBdURPLE9BQXZELENBSEgsQ0FBUDtBQUlIOztBQTNRaUM7O0FBOFF0QyxJQUFJc0UsbUJBQW1CLEdBQUcsSUFBMUI7O0FBQ0EsSUFBSSxDQUFDQSxtQkFBTCxFQUEwQjtBQUN0QkEsRUFBQUEsbUJBQW1CLEdBQUcsSUFBSWxGLFVBQUosRUFBdEI7QUFDSDs7ZUFDY2tGLG1CIiwic291cmNlc0NvbnRlbnQiOlsiLypcbkNvcHlyaWdodCAyMDE3IE5ldyBWZWN0b3IgTHRkXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuaW1wb3J0IEV2ZW50RW1pdHRlciBmcm9tICdldmVudHMnO1xuaW1wb3J0IHsgZ3JvdXBNZW1iZXJGcm9tQXBpT2JqZWN0LCBncm91cFJvb21Gcm9tQXBpT2JqZWN0IH0gZnJvbSAnLi4vZ3JvdXBzJztcbmltcG9ydCBGbGFpclN0b3JlIGZyb20gJy4vRmxhaXJTdG9yZSc7XG5pbXBvcnQgeyBNYXRyaXhDbGllbnRQZWcgfSBmcm9tICcuLi9NYXRyaXhDbGllbnRQZWcnO1xuaW1wb3J0IGRpcyBmcm9tICcuLi9kaXNwYXRjaGVyL2Rpc3BhdGNoZXInO1xuXG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tIFwibWF0cml4LWpzLXNkay9zcmMvbG9nZ2VyXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZU1lbWJlcnNSZXNwb25zZShyZXNwb25zZSkge1xuICAgIHJldHVybiByZXNwb25zZS5jaHVuay5tYXAoKGFwaU1lbWJlcikgPT4gZ3JvdXBNZW1iZXJGcm9tQXBpT2JqZWN0KGFwaU1lbWJlcikpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VSb29tc1Jlc3BvbnNlKHJlc3BvbnNlKSB7XG4gICAgcmV0dXJuIHJlc3BvbnNlLmNodW5rLm1hcCgoYXBpUm9vbSkgPT4gZ3JvdXBSb29tRnJvbUFwaU9iamVjdChhcGlSb29tKSk7XG59XG5cbi8vIFRoZSBudW1iZXIgb2Ygb25nb2luZyBncm91cCByZXF1ZXN0c1xubGV0IG9uZ29pbmdSZXF1ZXN0Q291bnQgPSAwO1xuXG4vLyBUaGlzIGhhcyBhcmJpdHJhcmlseSBiZWVuIHNldCB0byBhIHNtYWxsIG51bWJlciB0byBsb3dlciB0aGUgcHJpb3JpdHlcbi8vIG9mIGRvaW5nIGdyb3VwLXJlbGF0ZWQgcmVxdWVzdHMgYmVjYXVzZSB3ZSBjYXJlIGFib3V0IG90aGVyIGltcG9ydGFudFxuLy8gcmVxdWVzdHMgbGlrZSBoaXR0aW5nIC9zeW5jLlxuY29uc3QgTElNSVQgPSAzOyAvLyBNYXhpbXVtIG51bWJlciBvZiBvbmdvaW5nIGdyb3VwIHJlcXVlc3RzXG5cbi8vIEZJRk8gcXVldWUgb2YgZnVuY3Rpb25zIHRvIGNhbGwgaW4gdGhlIGJhY2tsb2dcbmNvbnN0IGJhY2tsb2dRdWV1ZSA9IFtcbiAgICAvLyAoKSA9PiB7Li4ufVxuXTtcblxuLy8gUHVsbCBmcm9tIHRoZSBGSUZPIHF1ZXVlXG5mdW5jdGlvbiBjaGVja0JhY2tsb2coKSB7XG4gICAgY29uc3QgaXRlbSA9IGJhY2tsb2dRdWV1ZS5zaGlmdCgpO1xuICAgIGlmICh0eXBlb2YgaXRlbSA9PT0gJ2Z1bmN0aW9uJykgaXRlbSgpO1xufVxuXG4vLyBMaW1pdCB0aGUgbWF4aW11bSBudW1iZXIgb2Ygb25nb2luZyBwcm9taXNlcyByZXR1cm5lZCBieSBmbiB0byBMSU1JVCBhbmRcbi8vIHVzZSBhIEZJRk8gcXVldWUgdG8gaGFuZGxlIHRoZSBiYWNrbG9nLlxuYXN5bmMgZnVuY3Rpb24gbGltaXRDb25jdXJyZW5jeShmbikge1xuICAgIGlmIChvbmdvaW5nUmVxdWVzdENvdW50ID49IExJTUlUKSB7XG4gICAgICAgIC8vIEVucXVldWUgdGhpcyByZXF1ZXN0IGZvciBsYXRlciBleGVjdXRpb25cbiAgICAgICAgYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgYmFja2xvZ1F1ZXVlLnB1c2gocmVzb2x2ZSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIG9uZ29pbmdSZXF1ZXN0Q291bnQrKztcbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gYXdhaXQgZm4oKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgLy8gV2UgZXhwbGljaXRseSBkbyBub3QgaGFuZGxlIHRoZSBlcnJvciBoZXJlLCBidXQgbGV0IGl0IHByb3BvZ2F0ZS5cbiAgICAgICAgdGhyb3cgZXJyO1xuICAgIH0gZmluYWxseSB7XG4gICAgICAgIG9uZ29pbmdSZXF1ZXN0Q291bnQtLTtcbiAgICAgICAgY2hlY2tCYWNrbG9nKCk7XG4gICAgfVxufVxuXG4vKipcbiAqIEdsb2JhbCBzdG9yZSBmb3IgdHJhY2tpbmcgZ3JvdXAgc3VtbWFyeSwgbWVtYmVycywgaW52aXRlZCBtZW1iZXJzIGFuZCByb29tcy5cbiAqL1xuY2xhc3MgR3JvdXBTdG9yZSBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG4gICAgU1RBVEVfS0VZID0ge1xuICAgICAgICBHcm91cE1lbWJlcnM6ICdHcm91cE1lbWJlcnMnLFxuICAgICAgICBHcm91cEludml0ZWRNZW1iZXJzOiAnR3JvdXBJbnZpdGVkTWVtYmVycycsXG4gICAgICAgIFN1bW1hcnk6ICdTdW1tYXJ5JyxcbiAgICAgICAgR3JvdXBSb29tczogJ0dyb3VwUm9vbXMnLFxuICAgIH07XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSB7fTtcbiAgICAgICAgdGhpcy5fc3RhdGVbdGhpcy5TVEFURV9LRVkuU3VtbWFyeV0gPSB7fTtcbiAgICAgICAgdGhpcy5fc3RhdGVbdGhpcy5TVEFURV9LRVkuR3JvdXBSb29tc10gPSB7fTtcbiAgICAgICAgdGhpcy5fc3RhdGVbdGhpcy5TVEFURV9LRVkuR3JvdXBNZW1iZXJzXSA9IHt9O1xuICAgICAgICB0aGlzLl9zdGF0ZVt0aGlzLlNUQVRFX0tFWS5Hcm91cEludml0ZWRNZW1iZXJzXSA9IHt9O1xuXG4gICAgICAgIHRoaXMuX3JlYWR5ID0ge307XG4gICAgICAgIHRoaXMuX3JlYWR5W3RoaXMuU1RBVEVfS0VZLlN1bW1hcnldID0ge307XG4gICAgICAgIHRoaXMuX3JlYWR5W3RoaXMuU1RBVEVfS0VZLkdyb3VwUm9vbXNdID0ge307XG4gICAgICAgIHRoaXMuX3JlYWR5W3RoaXMuU1RBVEVfS0VZLkdyb3VwTWVtYmVyc10gPSB7fTtcbiAgICAgICAgdGhpcy5fcmVhZHlbdGhpcy5TVEFURV9LRVkuR3JvdXBJbnZpdGVkTWVtYmVyc10gPSB7fTtcblxuICAgICAgICB0aGlzLl9mZXRjaFJlc291cmNlUHJvbWlzZSA9IHtcbiAgICAgICAgICAgIFt0aGlzLlNUQVRFX0tFWS5TdW1tYXJ5XToge30sXG4gICAgICAgICAgICBbdGhpcy5TVEFURV9LRVkuR3JvdXBSb29tc106IHt9LFxuICAgICAgICAgICAgW3RoaXMuU1RBVEVfS0VZLkdyb3VwTWVtYmVyc106IHt9LFxuICAgICAgICAgICAgW3RoaXMuU1RBVEVfS0VZLkdyb3VwSW52aXRlZE1lbWJlcnNdOiB7fSxcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLl9yZXNvdXJjZUZldGNoZXIgPSB7XG4gICAgICAgICAgICBbdGhpcy5TVEFURV9LRVkuU3VtbWFyeV06IChncm91cElkKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxpbWl0Q29uY3VycmVuY3koXG4gICAgICAgICAgICAgICAgICAgICgpID0+IE1hdHJpeENsaWVudFBlZy5nZXQoKS5nZXRHcm91cFN1bW1hcnkoZ3JvdXBJZCksXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBbdGhpcy5TVEFURV9LRVkuR3JvdXBSb29tc106IChncm91cElkKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxpbWl0Q29uY3VycmVuY3koXG4gICAgICAgICAgICAgICAgICAgICgpID0+IE1hdHJpeENsaWVudFBlZy5nZXQoKS5nZXRHcm91cFJvb21zKGdyb3VwSWQpLnRoZW4ocGFyc2VSb29tc1Jlc3BvbnNlKSxcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFt0aGlzLlNUQVRFX0tFWS5Hcm91cE1lbWJlcnNdOiAoZ3JvdXBJZCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBsaW1pdENvbmN1cnJlbmN5KFxuICAgICAgICAgICAgICAgICAgICAoKSA9PiBNYXRyaXhDbGllbnRQZWcuZ2V0KCkuZ2V0R3JvdXBVc2Vycyhncm91cElkKS50aGVuKHBhcnNlTWVtYmVyc1Jlc3BvbnNlKSxcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFt0aGlzLlNUQVRFX0tFWS5Hcm91cEludml0ZWRNZW1iZXJzXTogKGdyb3VwSWQpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbGltaXRDb25jdXJyZW5jeShcbiAgICAgICAgICAgICAgICAgICAgKCkgPT4gTWF0cml4Q2xpZW50UGVnLmdldCgpLmdldEdyb3VwSW52aXRlZFVzZXJzKGdyb3VwSWQpLnRoZW4ocGFyc2VNZW1iZXJzUmVzcG9uc2UpLFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIF9mZXRjaFJlc291cmNlKHN0YXRlS2V5LCBncm91cElkKSB7XG4gICAgICAgIC8vIE9uZ29pbmcgcmVxdWVzdCwgaWdub3JlXG4gICAgICAgIGlmICh0aGlzLl9mZXRjaFJlc291cmNlUHJvbWlzZVtzdGF0ZUtleV1bZ3JvdXBJZF0pIHJldHVybjtcblxuICAgICAgICBjb25zdCBjbGllbnRQcm9taXNlID0gdGhpcy5fcmVzb3VyY2VGZXRjaGVyW3N0YXRlS2V5XShncm91cElkKTtcblxuICAgICAgICAvLyBJbmRpY2F0ZSBvbmdvaW5nIHJlcXVlc3RcbiAgICAgICAgdGhpcy5fZmV0Y2hSZXNvdXJjZVByb21pc2Vbc3RhdGVLZXldW2dyb3VwSWRdID0gY2xpZW50UHJvbWlzZTtcblxuICAgICAgICBjbGllbnRQcm9taXNlLnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVbc3RhdGVLZXldW2dyb3VwSWRdID0gcmVzdWx0O1xuICAgICAgICAgICAgdGhpcy5fcmVhZHlbc3RhdGVLZXldW2dyb3VwSWRdID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuX25vdGlmeUxpc3RlbmVycygpO1xuICAgICAgICB9KS5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgICAvLyBJbnZpdGVkIHVzZXJzIG5vdCB2aXNpYmxlIHRvIG5vbi1tZW1iZXJzXG4gICAgICAgICAgICBpZiAoc3RhdGVLZXkgPT09IHRoaXMuU1RBVEVfS0VZLkdyb3VwSW52aXRlZE1lbWJlcnMgJiYgZXJyLmh0dHBTdGF0dXMgPT09IDQwMykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbG9nZ2VyLmVycm9yKGBGYWlsZWQgdG8gZ2V0IHJlc291cmNlICR7c3RhdGVLZXl9IGZvciAke2dyb3VwSWR9YCwgZXJyKTtcbiAgICAgICAgICAgIHRoaXMuZW1pdCgnZXJyb3InLCBlcnIsIGdyb3VwSWQsIHN0YXRlS2V5KTtcbiAgICAgICAgfSkuZmluYWxseSgoKSA9PiB7XG4gICAgICAgICAgICAvLyBJbmRpY2F0ZSBmaW5pc2hlZCByZXF1ZXN0LCBhbGxvdyBmb3IgZnV0dXJlIGZldGNoZXNcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9mZXRjaFJlc291cmNlUHJvbWlzZVtzdGF0ZUtleV1bZ3JvdXBJZF07XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBjbGllbnRQcm9taXNlO1xuICAgIH1cblxuICAgIF9ub3RpZnlMaXN0ZW5lcnMoKSB7XG4gICAgICAgIHRoaXMuZW1pdCgndXBkYXRlJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXIgYSBsaXN0ZW5lciB0byByZWNpZXZlIHVwZGF0ZXMgZnJvbSB0aGUgc3RvcmUuIFRoaXMgYWxzb1xuICAgICAqIGltbWVkaWF0ZWx5IHRyaWdnZXJzIGFuIHVwZGF0ZSB0byBzZW5kIHRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZVxuICAgICAqIHN0b3JlICh3aGljaCBjb3VsZCBiZSB0aGUgaW5pdGlhbCBzdGF0ZSkuXG4gICAgICpcbiAgICAgKiBJZiBhIGdyb3VwIElEIGlzIHNwZWNpZmllZCwgdGhpcyBhbHNvIGNhdXNlcyBhIGZldGNoIG9mIGFsbCBkYXRhXG4gICAgICogb2YgdGhlIHNwZWNpZmllZCBncm91cCwgd2hpY2ggbWlnaHQgY2F1c2UgNCBzZXBhcmF0ZSBIVFRQXG4gICAgICogcmVxdWVzdHMsIGJ1dCBvbmx5IGlmIHNhaWQgcmVxdWVzdHMgYXJlbid0IGFscmVhZHkgb25nb2luZy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nP30gZ3JvdXBJZCB0aGUgSUQgb2YgdGhlIGdyb3VwIHRvIGZldGNoIGRhdGEgZm9yLlxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICBPcHRpb25hbC5cbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBmbiB0aGUgZnVuY3Rpb24gdG8gY2FsbCB3aGVuIHRoZSBzdG9yZSB1cGRhdGVzLlxuICAgICAqIEByZXR1cm4ge09iamVjdH0gdG9rIGEgcmVnaXN0cmF0aW9uIFwidG9rZW5cIiB3aXRoIGEgc2luZ2xlXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgcHJvcGVydHkgYHVucmVnaXN0ZXJgLCBhIGZ1bmN0aW9uIHRoYXQgY2FuXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgYmUgY2FsbGVkIHRvIHVucmVnaXN0ZXIgdGhlIGxpc3RlbmVyIHN1Y2hcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICB0aGF0IGl0IHdvbid0IGJlIGNhbGxlZCBhbnkgbW9yZS5cbiAgICAgKi9cbiAgICByZWdpc3Rlckxpc3RlbmVyKGdyb3VwSWQsIGZuKSB7XG4gICAgICAgIHRoaXMub24oJ3VwZGF0ZScsIGZuKTtcbiAgICAgICAgLy8gQ2FsbCB0byBzZXQgaW5pdGlhbCBzdGF0ZSAoYmVmb3JlIGZldGNoaW5nIHN0YXJ0cylcbiAgICAgICAgdGhpcy5lbWl0KCd1cGRhdGUnKTtcblxuICAgICAgICBpZiAoZ3JvdXBJZCkge1xuICAgICAgICAgICAgdGhpcy5fZmV0Y2hSZXNvdXJjZSh0aGlzLlNUQVRFX0tFWS5TdW1tYXJ5LCBncm91cElkKTtcbiAgICAgICAgICAgIHRoaXMuX2ZldGNoUmVzb3VyY2UodGhpcy5TVEFURV9LRVkuR3JvdXBSb29tcywgZ3JvdXBJZCk7XG4gICAgICAgICAgICB0aGlzLl9mZXRjaFJlc291cmNlKHRoaXMuU1RBVEVfS0VZLkdyb3VwTWVtYmVycywgZ3JvdXBJZCk7XG4gICAgICAgICAgICB0aGlzLl9mZXRjaFJlc291cmNlKHRoaXMuU1RBVEVfS0VZLkdyb3VwSW52aXRlZE1lbWJlcnMsIGdyb3VwSWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2ltaWxhciB0byB0aGUgU3RvcmUgb2YgZmx1eC91dGlscywgd2UgcmV0dXJuIGEgXCJ0b2tlblwiIHRoYXRcbiAgICAgICAgLy8gY2FuIGJlIHVzZWQgdG8gdW5yZWdpc3RlciB0aGUgbGlzdGVuZXIuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB1bnJlZ2lzdGVyOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy51bnJlZ2lzdGVyTGlzdGVuZXIoZm4pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICB1bnJlZ2lzdGVyTGlzdGVuZXIoZm4pIHtcbiAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcigndXBkYXRlJywgZm4pO1xuICAgIH1cblxuICAgIGlzU3RhdGVSZWFkeShncm91cElkLCBpZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVhZHlbaWRdW2dyb3VwSWRdO1xuICAgIH1cblxuICAgIGdldEdyb3VwSWRzRm9yUm9vbUlkKHJvb21JZCkge1xuICAgICAgICBjb25zdCBncm91cElkcyA9IE9iamVjdC5rZXlzKHRoaXMuX3N0YXRlW3RoaXMuU1RBVEVfS0VZLkdyb3VwUm9vbXNdKTtcbiAgICAgICAgcmV0dXJuIGdyb3VwSWRzLmZpbHRlcihncm91cElkID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHJvb21zID0gdGhpcy5fc3RhdGVbdGhpcy5TVEFURV9LRVkuR3JvdXBSb29tc11bZ3JvdXBJZF0gfHwgW107XG4gICAgICAgICAgICByZXR1cm4gcm9vbXMuc29tZShyb29tID0+IHJvb20ucm9vbUlkID09PSByb29tSWQpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBnZXRTdW1tYXJ5KGdyb3VwSWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3N0YXRlW3RoaXMuU1RBVEVfS0VZLlN1bW1hcnldW2dyb3VwSWRdIHx8IHt9O1xuICAgIH1cblxuICAgIGdldEdyb3VwUm9vbXMoZ3JvdXBJZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc3RhdGVbdGhpcy5TVEFURV9LRVkuR3JvdXBSb29tc11bZ3JvdXBJZF0gfHwgW107XG4gICAgfVxuXG4gICAgZ2V0R3JvdXBNZW1iZXJzKGdyb3VwSWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3N0YXRlW3RoaXMuU1RBVEVfS0VZLkdyb3VwTWVtYmVyc11bZ3JvdXBJZF0gfHwgW107XG4gICAgfVxuXG4gICAgZ2V0R3JvdXBJbnZpdGVkTWVtYmVycyhncm91cElkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zdGF0ZVt0aGlzLlNUQVRFX0tFWS5Hcm91cEludml0ZWRNZW1iZXJzXVtncm91cElkXSB8fCBbXTtcbiAgICB9XG5cbiAgICBnZXRHcm91cFB1YmxpY2l0eShncm91cElkKSB7XG4gICAgICAgIHJldHVybiAodGhpcy5fc3RhdGVbdGhpcy5TVEFURV9LRVkuU3VtbWFyeV1bZ3JvdXBJZF0gfHwge30pLnVzZXIgP1xuICAgICAgICAgICAgKHRoaXMuX3N0YXRlW3RoaXMuU1RBVEVfS0VZLlN1bW1hcnldW2dyb3VwSWRdIHx8IHt9KS51c2VyLmlzX3B1YmxpY2lzZWQgOiBudWxsO1xuICAgIH1cblxuICAgIGlzVXNlclByaXZpbGVnZWQoZ3JvdXBJZCkge1xuICAgICAgICByZXR1cm4gKHRoaXMuX3N0YXRlW3RoaXMuU1RBVEVfS0VZLlN1bW1hcnldW2dyb3VwSWRdIHx8IHt9KS51c2VyID9cbiAgICAgICAgICAgICh0aGlzLl9zdGF0ZVt0aGlzLlNUQVRFX0tFWS5TdW1tYXJ5XVtncm91cElkXSB8fCB7fSkudXNlci5pc19wcml2aWxlZ2VkIDogbnVsbDtcbiAgICB9XG5cbiAgICByZWZyZXNoR3JvdXBSb29tcyhncm91cElkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9mZXRjaFJlc291cmNlKHRoaXMuU1RBVEVfS0VZLkdyb3VwUm9vbXMsIGdyb3VwSWQpO1xuICAgIH1cblxuICAgIHJlZnJlc2hHcm91cE1lbWJlcnMoZ3JvdXBJZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZmV0Y2hSZXNvdXJjZSh0aGlzLlNUQVRFX0tFWS5Hcm91cE1lbWJlcnMsIGdyb3VwSWQpO1xuICAgIH1cblxuICAgIGFkZFJvb21Ub0dyb3VwKGdyb3VwSWQsIHJvb21JZCwgaXNQdWJsaWMpIHtcbiAgICAgICAgcmV0dXJuIE1hdHJpeENsaWVudFBlZy5nZXQoKVxuICAgICAgICAgICAgLmFkZFJvb21Ub0dyb3VwKGdyb3VwSWQsIHJvb21JZCwgaXNQdWJsaWMpXG4gICAgICAgICAgICAudGhlbih0aGlzLl9mZXRjaFJlc291cmNlLmJpbmQodGhpcywgdGhpcy5TVEFURV9LRVkuR3JvdXBSb29tcywgZ3JvdXBJZCkpO1xuICAgIH1cblxuICAgIHVwZGF0ZUdyb3VwUm9vbVZpc2liaWxpdHkoZ3JvdXBJZCwgcm9vbUlkLCBpc1B1YmxpYykge1xuICAgICAgICByZXR1cm4gTWF0cml4Q2xpZW50UGVnLmdldCgpXG4gICAgICAgICAgICAudXBkYXRlR3JvdXBSb29tVmlzaWJpbGl0eShncm91cElkLCByb29tSWQsIGlzUHVibGljKVxuICAgICAgICAgICAgLnRoZW4odGhpcy5fZmV0Y2hSZXNvdXJjZS5iaW5kKHRoaXMsIHRoaXMuU1RBVEVfS0VZLkdyb3VwUm9vbXMsIGdyb3VwSWQpKTtcbiAgICB9XG5cbiAgICByZW1vdmVSb29tRnJvbUdyb3VwKGdyb3VwSWQsIHJvb21JZCkge1xuICAgICAgICByZXR1cm4gTWF0cml4Q2xpZW50UGVnLmdldCgpXG4gICAgICAgICAgICAucmVtb3ZlUm9vbUZyb21Hcm91cChncm91cElkLCByb29tSWQpXG4gICAgICAgICAgICAvLyBSb29tIG1pZ2h0IGJlIGluIHRoZSBzdW1tYXJ5LCByZWZyZXNoIGp1c3QgaW4gY2FzZVxuICAgICAgICAgICAgLnRoZW4odGhpcy5fZmV0Y2hSZXNvdXJjZS5iaW5kKHRoaXMsIHRoaXMuU1RBVEVfS0VZLlN1bW1hcnksIGdyb3VwSWQpKVxuICAgICAgICAgICAgLnRoZW4odGhpcy5fZmV0Y2hSZXNvdXJjZS5iaW5kKHRoaXMsIHRoaXMuU1RBVEVfS0VZLkdyb3VwUm9vbXMsIGdyb3VwSWQpKTtcbiAgICB9XG5cbiAgICBpbnZpdGVVc2VyVG9Hcm91cChncm91cElkLCB1c2VySWQpIHtcbiAgICAgICAgcmV0dXJuIE1hdHJpeENsaWVudFBlZy5nZXQoKS5pbnZpdGVVc2VyVG9Hcm91cChncm91cElkLCB1c2VySWQpXG4gICAgICAgICAgICAudGhlbih0aGlzLl9mZXRjaFJlc291cmNlLmJpbmQodGhpcywgdGhpcy5TVEFURV9LRVkuR3JvdXBJbnZpdGVkTWVtYmVycywgZ3JvdXBJZCkpO1xuICAgIH1cblxuICAgIGFjY2VwdEdyb3VwSW52aXRlKGdyb3VwSWQpIHtcbiAgICAgICAgcmV0dXJuIE1hdHJpeENsaWVudFBlZy5nZXQoKS5hY2NlcHRHcm91cEludml0ZShncm91cElkKVxuICAgICAgICAgICAgLy8gVGhlIHVzZXIgc2hvdWxkIG5vdyBiZSBhYmxlIHRvIGFjY2VzcyAocGVyc29uYWwpIGdyb3VwIHNldHRpbmdzXG4gICAgICAgICAgICAudGhlbih0aGlzLl9mZXRjaFJlc291cmNlLmJpbmQodGhpcywgdGhpcy5TVEFURV9LRVkuU3VtbWFyeSwgZ3JvdXBJZCkpXG4gICAgICAgICAgICAvLyBUaGUgdXNlciBtaWdodCBiZSBhYmxlIHRvIHNlZSBtb3JlIHJvb21zIG5vd1xuICAgICAgICAgICAgLnRoZW4odGhpcy5fZmV0Y2hSZXNvdXJjZS5iaW5kKHRoaXMsIHRoaXMuU1RBVEVfS0VZLkdyb3VwUm9vbXMsIGdyb3VwSWQpKVxuICAgICAgICAgICAgLy8gVGhlIHVzZXIgc2hvdWxkIG5vdyBhcHBlYXIgYXMgYSBtZW1iZXJcbiAgICAgICAgICAgIC50aGVuKHRoaXMuX2ZldGNoUmVzb3VyY2UuYmluZCh0aGlzLCB0aGlzLlNUQVRFX0tFWS5Hcm91cE1lbWJlcnMsIGdyb3VwSWQpKVxuICAgICAgICAgICAgLy8gVGhlIHVzZXIgc2hvdWxkIG5vdyBub3QgYXBwZWFyIGFzIGFuIGludml0ZWQgbWVtYmVyXG4gICAgICAgICAgICAudGhlbih0aGlzLl9mZXRjaFJlc291cmNlLmJpbmQodGhpcywgdGhpcy5TVEFURV9LRVkuR3JvdXBJbnZpdGVkTWVtYmVycywgZ3JvdXBJZCkpO1xuICAgIH1cblxuICAgIGpvaW5Hcm91cChncm91cElkKSB7XG4gICAgICAgIHJldHVybiBNYXRyaXhDbGllbnRQZWcuZ2V0KCkuam9pbkdyb3VwKGdyb3VwSWQpXG4gICAgICAgICAgICAvLyBUaGUgdXNlciBzaG91bGQgbm93IGJlIGFibGUgdG8gYWNjZXNzIChwZXJzb25hbCkgZ3JvdXAgc2V0dGluZ3NcbiAgICAgICAgICAgIC50aGVuKHRoaXMuX2ZldGNoUmVzb3VyY2UuYmluZCh0aGlzLCB0aGlzLlNUQVRFX0tFWS5TdW1tYXJ5LCBncm91cElkKSlcbiAgICAgICAgICAgIC8vIFRoZSB1c2VyIG1pZ2h0IGJlIGFibGUgdG8gc2VlIG1vcmUgcm9vbXMgbm93XG4gICAgICAgICAgICAudGhlbih0aGlzLl9mZXRjaFJlc291cmNlLmJpbmQodGhpcywgdGhpcy5TVEFURV9LRVkuR3JvdXBSb29tcywgZ3JvdXBJZCkpXG4gICAgICAgICAgICAvLyBUaGUgdXNlciBzaG91bGQgbm93IGFwcGVhciBhcyBhIG1lbWJlclxuICAgICAgICAgICAgLnRoZW4odGhpcy5fZmV0Y2hSZXNvdXJjZS5iaW5kKHRoaXMsIHRoaXMuU1RBVEVfS0VZLkdyb3VwTWVtYmVycywgZ3JvdXBJZCkpXG4gICAgICAgICAgICAvLyBUaGUgdXNlciBzaG91bGQgbm93IG5vdCBhcHBlYXIgYXMgYW4gaW52aXRlZCBtZW1iZXJcbiAgICAgICAgICAgIC50aGVuKHRoaXMuX2ZldGNoUmVzb3VyY2UuYmluZCh0aGlzLCB0aGlzLlNUQVRFX0tFWS5Hcm91cEludml0ZWRNZW1iZXJzLCBncm91cElkKSk7XG4gICAgfVxuXG4gICAgbGVhdmVHcm91cChncm91cElkKSB7XG4gICAgICAgIC8vIGVuc3VyZSB0aGUgdGFnIHBhbmVsIGZpbHRlciBpcyBjbGVhcmVkIGlmIHRoZSBncm91cCB3YXMgc2VsZWN0ZWRcbiAgICAgICAgZGlzLmRpc3BhdGNoKHtcbiAgICAgICAgICAgIGFjdGlvbjogXCJkZXNlbGVjdF90YWdzXCIsXG4gICAgICAgICAgICB0YWc6IGdyb3VwSWQsXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gTWF0cml4Q2xpZW50UGVnLmdldCgpLmxlYXZlR3JvdXAoZ3JvdXBJZClcbiAgICAgICAgICAgIC8vIFRoZSB1c2VyIHNob3VsZCBub3cgbm90IGJlIGFibGUgdG8gYWNjZXNzIGdyb3VwIHNldHRpbmdzXG4gICAgICAgICAgICAudGhlbih0aGlzLl9mZXRjaFJlc291cmNlLmJpbmQodGhpcywgdGhpcy5TVEFURV9LRVkuU3VtbWFyeSwgZ3JvdXBJZCkpXG4gICAgICAgICAgICAvLyBUaGUgdXNlciBtaWdodCBvbmx5IGJlIGFibGUgdG8gc2VlIGEgc3Vic2V0IG9mIHJvb21zIG5vd1xuICAgICAgICAgICAgLnRoZW4odGhpcy5fZmV0Y2hSZXNvdXJjZS5iaW5kKHRoaXMsIHRoaXMuU1RBVEVfS0VZLkdyb3VwUm9vbXMsIGdyb3VwSWQpKVxuICAgICAgICAgICAgLy8gVGhlIHVzZXIgc2hvdWxkIG5vdyBub3QgYXBwZWFyIGFzIGEgbWVtYmVyXG4gICAgICAgICAgICAudGhlbih0aGlzLl9mZXRjaFJlc291cmNlLmJpbmQodGhpcywgdGhpcy5TVEFURV9LRVkuR3JvdXBNZW1iZXJzLCBncm91cElkKSk7XG4gICAgfVxuXG4gICAgYWRkUm9vbVRvR3JvdXBTdW1tYXJ5KGdyb3VwSWQsIHJvb21JZCwgY2F0ZWdvcnlJZCkge1xuICAgICAgICByZXR1cm4gTWF0cml4Q2xpZW50UGVnLmdldCgpXG4gICAgICAgICAgICAuYWRkUm9vbVRvR3JvdXBTdW1tYXJ5KGdyb3VwSWQsIHJvb21JZCwgY2F0ZWdvcnlJZClcbiAgICAgICAgICAgIC50aGVuKHRoaXMuX2ZldGNoUmVzb3VyY2UuYmluZCh0aGlzLCB0aGlzLlNUQVRFX0tFWS5TdW1tYXJ5LCBncm91cElkKSk7XG4gICAgfVxuXG4gICAgYWRkVXNlclRvR3JvdXBTdW1tYXJ5KGdyb3VwSWQsIHVzZXJJZCwgcm9sZUlkKSB7XG4gICAgICAgIHJldHVybiBNYXRyaXhDbGllbnRQZWcuZ2V0KClcbiAgICAgICAgICAgIC5hZGRVc2VyVG9Hcm91cFN1bW1hcnkoZ3JvdXBJZCwgdXNlcklkLCByb2xlSWQpXG4gICAgICAgICAgICAudGhlbih0aGlzLl9mZXRjaFJlc291cmNlLmJpbmQodGhpcywgdGhpcy5TVEFURV9LRVkuU3VtbWFyeSwgZ3JvdXBJZCkpO1xuICAgIH1cblxuICAgIHJlbW92ZVJvb21Gcm9tR3JvdXBTdW1tYXJ5KGdyb3VwSWQsIHJvb21JZCkge1xuICAgICAgICByZXR1cm4gTWF0cml4Q2xpZW50UGVnLmdldCgpXG4gICAgICAgICAgICAucmVtb3ZlUm9vbUZyb21Hcm91cFN1bW1hcnkoZ3JvdXBJZCwgcm9vbUlkKVxuICAgICAgICAgICAgLnRoZW4odGhpcy5fZmV0Y2hSZXNvdXJjZS5iaW5kKHRoaXMsIHRoaXMuU1RBVEVfS0VZLlN1bW1hcnksIGdyb3VwSWQpKTtcbiAgICB9XG5cbiAgICByZW1vdmVVc2VyRnJvbUdyb3VwU3VtbWFyeShncm91cElkLCB1c2VySWQpIHtcbiAgICAgICAgcmV0dXJuIE1hdHJpeENsaWVudFBlZy5nZXQoKVxuICAgICAgICAgICAgLnJlbW92ZVVzZXJGcm9tR3JvdXBTdW1tYXJ5KGdyb3VwSWQsIHVzZXJJZClcbiAgICAgICAgICAgIC50aGVuKHRoaXMuX2ZldGNoUmVzb3VyY2UuYmluZCh0aGlzLCB0aGlzLlNUQVRFX0tFWS5TdW1tYXJ5LCBncm91cElkKSk7XG4gICAgfVxuXG4gICAgc2V0R3JvdXBQdWJsaWNpdHkoZ3JvdXBJZCwgaXNQdWJsaXNoZWQpIHtcbiAgICAgICAgcmV0dXJuIE1hdHJpeENsaWVudFBlZy5nZXQoKVxuICAgICAgICAgICAgLnNldEdyb3VwUHVibGljaXR5KGdyb3VwSWQsIGlzUHVibGlzaGVkKVxuICAgICAgICAgICAgLnRoZW4oKCkgPT4geyBGbGFpclN0b3JlLmludmFsaWRhdGVQdWJsaWNpc2VkR3JvdXBzKE1hdHJpeENsaWVudFBlZy5nZXQoKS5jcmVkZW50aWFscy51c2VySWQpOyB9KVxuICAgICAgICAgICAgLnRoZW4odGhpcy5fZmV0Y2hSZXNvdXJjZS5iaW5kKHRoaXMsIHRoaXMuU1RBVEVfS0VZLlN1bW1hcnksIGdyb3VwSWQpKTtcbiAgICB9XG59XG5cbmxldCBzaW5nbGV0b25Hcm91cFN0b3JlID0gbnVsbDtcbmlmICghc2luZ2xldG9uR3JvdXBTdG9yZSkge1xuICAgIHNpbmdsZXRvbkdyb3VwU3RvcmUgPSBuZXcgR3JvdXBTdG9yZSgpO1xufVxuZXhwb3J0IGRlZmF1bHQgc2luZ2xldG9uR3JvdXBTdG9yZTtcbiJdfQ==