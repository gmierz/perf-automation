"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _utils = require("flux/utils");

var _dispatcher = _interopRequireDefault(require("../dispatcher/dispatcher"));

var _MatrixClientPeg = require("../MatrixClientPeg");

var sdk = _interopRequireWildcard(require("../index"));

var _Modal = _interopRequireDefault(require("../Modal"));

var _languageHandler = require("../languageHandler");

var _RoomAliasCache = require("../RoomAliasCache");

var _actions = require("../dispatcher/actions");

var _promise = require("../utils/promise");

var _CountlyAnalytics = _interopRequireDefault(require("../CountlyAnalytics"));

var _logger = require("matrix-js-sdk/src/logger");

var _RoomContext = require("../contexts/RoomContext");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const NUM_JOIN_RETRY = 5;
const INITIAL_STATE = {
  // Whether we're joining the currently viewed room (see isJoining())
  joining: false,
  // Any error that has occurred during joining
  joinError: null,
  // The room ID of the room currently being viewed
  roomId: null,
  // The event to scroll to when the room is first viewed
  initialEventId: null,
  initialEventPixelOffset: null,
  // Whether to highlight the initial event
  isInitialEventHighlighted: false,
  // The room alias of the room (or null if not originally specified in view_room)
  roomAlias: null,
  // Whether the current room is loading
  roomLoading: false,
  // Any error that has occurred during loading
  roomLoadError: null,
  quotingEvent: null,
  replyingToEvent: null,
  shouldPeek: false,
  viaServers: [],
  wasContextSwitch: false
};
/**
 * A class for storing application state for RoomView. This is the RoomView's interface
*  with a subset of the js-sdk.
 *  ```
 */

class RoomViewStore extends _utils.Store {
  // initialize state
  constructor() {
    super(_dispatcher.default);
    (0, _defineProperty2.default)(this, "state", INITIAL_STATE);
  }

  setState(newState) {
    // If values haven't changed, there's nothing to do.
    // This only tries a shallow comparison, so unchanged objects will slip
    // through, but that's probably okay for now.
    let stateChanged = false;

    for (const key of Object.keys(newState)) {
      if (this.state[key] !== newState[key]) {
        stateChanged = true;
        break;
      }
    }

    if (!stateChanged) {
      return;
    }

    this.state = Object.assign(this.state, newState);

    this.__emitChange();
  }

  __onDispatch(payload) {
    // eslint-disable-line @typescript-eslint/naming-convention
    switch (payload.action) {
      // view_room:
      //      - room_alias:   '#somealias:matrix.org'
      //      - room_id:      '!roomid123:matrix.org'
      //      - event_id:     '$213456782:matrix.org'
      //      - event_offset: 100
      //      - highlighted:  true
      case _actions.Action.ViewRoom:
        this.viewRoom(payload);
        break;
      // for these events blank out the roomId as we are no longer in the RoomView

      case 'view_create_group':
      case 'view_welcome_page':
      case 'view_home_page':
      case 'view_my_groups':
      case 'view_group':
        this.setState({
          roomId: null,
          roomAlias: null,
          viaServers: [],
          wasContextSwitch: false
        });
        break;

      case 'view_room_error':
        this.viewRoomError(payload);
        break;

      case 'will_join':
        this.setState({
          joining: true
        });
        break;

      case 'cancel_join':
        this.setState({
          joining: false
        });
        break;
      // join_room:
      //      - opts: options for joinRoom

      case _actions.Action.JoinRoom:
        this.joinRoom(payload);
        break;

      case _actions.Action.JoinRoomError:
        this.joinRoomError(payload);
        break;

      case _actions.Action.JoinRoomReady:
        this.setState({
          shouldPeek: false
        });
        break;

      case 'on_client_not_viable':
      case 'on_logged_out':
        this.reset();
        break;

      case 'reply_to_event':
        // If currently viewed room does not match the room in which we wish to reply then change rooms
        // this can happen when performing a search across all rooms
        if (payload.context === _RoomContext.TimelineRenderingType.Room) {
          if (payload.event && payload.event.getRoomId() !== this.state.roomId) {
            _dispatcher.default.dispatch({
              action: _actions.Action.ViewRoom,
              room_id: payload.event.getRoomId(),
              replyingToEvent: payload.event
            });
          } else {
            this.setState({
              replyingToEvent: payload.event
            });
          }
        }

        break;

      case 'open_room_settings':
        {
          // FIXME: Using an import will result in test failures
          const RoomSettingsDialog = sdk.getComponent("dialogs.RoomSettingsDialog");

          _Modal.default.createTrackedDialog('Room settings', '', RoomSettingsDialog, {
            roomId: payload.room_id || this.state.roomId,
            initialTabId: payload.initial_tab_id
          },
          /*className=*/
          null,
          /*isPriority=*/
          false,
          /*isStatic=*/
          true);

          break;
        }
    }
  }

  async viewRoom(payload) {
    if (payload.room_id) {
      const newState = {
        roomId: payload.room_id,
        roomAlias: payload.room_alias,
        initialEventId: payload.event_id,
        isInitialEventHighlighted: payload.highlighted,
        roomLoading: false,
        roomLoadError: null,
        // should peek by default
        shouldPeek: payload.should_peek === undefined ? true : payload.should_peek,
        // have we sent a join request for this room and are waiting for a response?
        joining: payload.joining || false,
        // Reset replyingToEvent because we don't want cross-room because bad UX
        replyingToEvent: null,
        // pull the user out of Room Settings
        isEditingSettings: false,
        viaServers: payload.via_servers,
        wasContextSwitch: payload.context_switch
      }; // Allow being given an event to be replied to when switching rooms but sanity check its for this room

      if (payload.replyingToEvent && payload.replyingToEvent.getRoomId() === payload.room_id) {
        newState.replyingToEvent = payload.replyingToEvent;
      }

      this.setState(newState);

      if (payload.auto_join) {
        _dispatcher.default.dispatch(_objectSpread(_objectSpread({}, payload), {}, {
          action: _actions.Action.JoinRoom,
          roomId: payload.room_id
        }));
      }
    } else if (payload.room_alias) {
      // Try the room alias to room ID navigation cache first to avoid
      // blocking room navigation on the homeserver.
      let roomId = (0, _RoomAliasCache.getCachedRoomIDForAlias)(payload.room_alias);

      if (!roomId) {
        // Room alias cache miss, so let's ask the homeserver. Resolve the alias
        // and then do a second dispatch with the room ID acquired.
        this.setState({
          roomId: null,
          initialEventId: null,
          initialEventPixelOffset: null,
          isInitialEventHighlighted: null,
          roomAlias: payload.room_alias,
          roomLoading: true,
          roomLoadError: null,
          viaServers: payload.via_servers,
          wasContextSwitch: payload.context_switch
        });

        try {
          const result = await _MatrixClientPeg.MatrixClientPeg.get().getRoomIdForAlias(payload.room_alias);
          (0, _RoomAliasCache.storeRoomAliasInCache)(payload.room_alias, result.room_id);
          roomId = result.room_id;
        } catch (err) {
          _logger.logger.error("RVS failed to get room id for alias: ", err);

          _dispatcher.default.dispatch({
            action: 'view_room_error',
            room_id: null,
            room_alias: payload.room_alias,
            err
          });

          return;
        }
      }

      _dispatcher.default.dispatch({
        action: _actions.Action.ViewRoom,
        room_id: roomId,
        event_id: payload.event_id,
        highlighted: payload.highlighted,
        room_alias: payload.room_alias,
        auto_join: payload.auto_join,
        oob_data: payload.oob_data,
        viaServers: payload.via_servers,
        wasContextSwitch: payload.context_switch
      });
    }
  }

  viewRoomError(payload) {
    this.setState({
      roomId: payload.room_id,
      roomAlias: payload.room_alias,
      roomLoading: false,
      roomLoadError: payload.err
    });
  }

  async joinRoom(payload) {
    const startTime = _CountlyAnalytics.default.getTimestamp();

    this.setState({
      joining: true
    });

    const cli = _MatrixClientPeg.MatrixClientPeg.get();

    const address = this.state.roomAlias || this.state.roomId;
    const viaServers = this.state.viaServers || [];

    try {
      await (0, _promise.retry)(() => cli.joinRoom(address, _objectSpread({
        viaServers
      }, payload.opts)), NUM_JOIN_RETRY, err => {
        // if we received a Gateway timeout then retry
        return err.httpStatus === 504;
      });

      _CountlyAnalytics.default.instance.trackRoomJoin(startTime, this.state.roomId, payload._type); // We do *not* clear the 'joining' flag because the Room object and/or our 'joined' member event may not
      // have come down the sync stream yet, and that's the point at which we'd consider the user joined to the
      // room.


      _dispatcher.default.dispatch({
        action: _actions.Action.JoinRoomReady,
        roomId: this.state.roomId
      });
    } catch (err) {
      _dispatcher.default.dispatch({
        action: _actions.Action.JoinRoomError,
        roomId: this.state.roomId,
        err: err
      });
    }
  }

  static getInvitingUserId(roomId) {
    const cli = _MatrixClientPeg.MatrixClientPeg.get();

    const room = cli.getRoom(roomId);

    if (room && room.getMyMembership() === "invite") {
      const myMember = room.getMember(cli.getUserId());
      const inviteEvent = myMember ? myMember.events.member : null;
      return inviteEvent && inviteEvent.getSender();
    }
  }

  showJoinRoomError(err, roomId) {
    let msg = err.message ? err.message : JSON.stringify(err);

    _logger.logger.log("Failed to join room:", msg);

    if (err.name === "ConnectionError") {
      msg = (0, _languageHandler._t)("There was an error joining the room");
    } else if (err.errcode === 'M_INCOMPATIBLE_ROOM_VERSION') {
      msg = /*#__PURE__*/_react.default.createElement("div", null, (0, _languageHandler._t)("Sorry, your homeserver is too old to participate in this room."), /*#__PURE__*/_react.default.createElement("br", null), (0, _languageHandler._t)("Please contact your homeserver administrator."));
    } else if (err.httpStatus === 404) {
      const invitingUserId = RoomViewStore.getInvitingUserId(roomId); // only provide a better error message for invites

      if (invitingUserId) {
        // if the inviting user is on the same HS, there can only be one cause: they left.
        if (invitingUserId.endsWith(`:${_MatrixClientPeg.MatrixClientPeg.get().getDomain()}`)) {
          msg = (0, _languageHandler._t)("The person who invited you already left the room.");
        } else {
          msg = (0, _languageHandler._t)("The person who invited you already left the room, or their server is offline.");
        }
      }
    } // FIXME: Using an import will result in test failures


    const ErrorDialog = sdk.getComponent("dialogs.ErrorDialog");

    _Modal.default.createTrackedDialog('Failed to join room', '', ErrorDialog, {
      title: (0, _languageHandler._t)("Failed to join room"),
      description: msg
    });
  }

  joinRoomError(payload) {
    this.setState({
      joining: false,
      joinError: payload.err
    });
    this.showJoinRoomError(payload.err, this.state.roomId);
  }

  reset() {
    this.state = Object.assign({}, INITIAL_STATE);
  } // The room ID of the room currently being viewed


  getRoomId() {
    return this.state.roomId;
  } // The event to scroll to when the room is first viewed


  getInitialEventId() {
    return this.state.initialEventId;
  } // Whether to highlight the initial event


  isInitialEventHighlighted() {
    return this.state.isInitialEventHighlighted;
  } // The room alias of the room (or null if not originally specified in view_room)


  getRoomAlias() {
    return this.state.roomAlias;
  } // Whether the current room is loading (true whilst resolving an alias)


  isRoomLoading() {
    return this.state.roomLoading;
  } // Any error that has occurred during loading


  getRoomLoadError() {
    return this.state.roomLoadError;
  } // True if we're expecting the user to be joined to the room currently being
  // viewed. Note that this is left true after the join request has finished,
  // since we should still consider a join to be in progress until the room
  // & member events come down the sync.
  //
  // This flag remains true after the room has been sucessfully joined,
  // (this store doesn't listen for the appropriate member events)
  // so you should always observe the joined state from the member event
  // if a room object is present.
  // ie. The correct logic is:
  // if (room) {
  //     if (myMember.membership == 'joined') {
  //         // user is joined to the room
  //     } else {
  //         // Not joined
  //     }
  // } else {
  //     if (RoomViewStore.isJoining()) {
  //         // show spinner
  //     } else {
  //         // show join prompt
  //     }
  // }


  isJoining() {
    return this.state.joining;
  } // Any error that has occurred during joining


  getJoinError() {
    return this.state.joinError;
  } // The mxEvent if one is currently being replied to/quoted


  getQuotingEvent() {
    return this.state.replyingToEvent;
  }

  shouldPeek() {
    return this.state.shouldPeek;
  }

  getWasContextSwitch() {
    return this.state.wasContextSwitch;
  }

}

let singletonRoomViewStore = null;

if (!singletonRoomViewStore) {
  singletonRoomViewStore = new RoomViewStore();
}

var _default = singletonRoomViewStore;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,