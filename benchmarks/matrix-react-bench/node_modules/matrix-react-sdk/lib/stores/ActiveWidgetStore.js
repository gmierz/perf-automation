"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ActiveWidgetStoreEvent = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _events = _interopRequireDefault(require("events"));

var _MatrixClientPeg = require("../MatrixClientPeg");

var _WidgetMessagingStore = require("./widgets/WidgetMessagingStore");

/*
Copyright 2018 New Vector Ltd

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
let ActiveWidgetStoreEvent;
/**
 * Stores information about the widgets active in the app right now:
 *  * What widget is set to remain always-on-screen, if any
 *    Only one widget may be 'always on screen' at any one time.
 *  * Negotiated capabilities for active apps
 */

exports.ActiveWidgetStoreEvent = ActiveWidgetStoreEvent;

(function (ActiveWidgetStoreEvent) {
  ActiveWidgetStoreEvent["Update"] = "update";
})(ActiveWidgetStoreEvent || (exports.ActiveWidgetStoreEvent = ActiveWidgetStoreEvent = {}));

class ActiveWidgetStore extends _events.default {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "persistentWidgetId", void 0);
    (0, _defineProperty2.default)(this, "roomIdByWidgetId", new Map());
    (0, _defineProperty2.default)(this, "onRoomStateEvents", ev => {
      // XXX: This listens for state events in order to remove the active widget.
      // Everything else relies on views listening for events and calling setters
      // on this class which is terrible. This store should just listen for events
      // and keep itself up to date.
      // TODO: Enable support for m.widget event type (https://github.com/vector-im/element-web/issues/13111)
      if (ev.getType() !== 'im.vector.modular.widgets') return;

      if (ev.getStateKey() === this.persistentWidgetId) {
        this.destroyPersistentWidget(this.persistentWidgetId);
      }
    });
  }

  static get instance() {
    if (!ActiveWidgetStore.internalInstance) {
      ActiveWidgetStore.internalInstance = new ActiveWidgetStore();
    }

    return ActiveWidgetStore.internalInstance;
  }

  start() {
    _MatrixClientPeg.MatrixClientPeg.get().on('RoomState.events', this.onRoomStateEvents);
  }

  stop() {
    if (_MatrixClientPeg.MatrixClientPeg.get()) {
      _MatrixClientPeg.MatrixClientPeg.get().removeListener('RoomState.events', this.onRoomStateEvents);
    }

    this.roomIdByWidgetId.clear();
  }

  destroyPersistentWidget(id) {
    if (id !== this.persistentWidgetId) return;
    const toDeleteId = this.persistentWidgetId;

    _WidgetMessagingStore.WidgetMessagingStore.instance.stopMessagingById(id);

    this.setWidgetPersistence(toDeleteId, false);
    this.delRoomId(toDeleteId);
  }

  setWidgetPersistence(widgetId, val) {
    if (this.persistentWidgetId === widgetId && !val) {
      this.persistentWidgetId = null;
    } else if (this.persistentWidgetId !== widgetId && val) {
      this.persistentWidgetId = widgetId;
    }

    this.emit(ActiveWidgetStoreEvent.Update);
  }

  getWidgetPersistence(widgetId) {
    return this.persistentWidgetId === widgetId;
  }

  getPersistentWidgetId() {
    return this.persistentWidgetId;
  }

  getRoomId(widgetId) {
    return this.roomIdByWidgetId.get(widgetId);
  }

  setRoomId(widgetId, roomId) {
    this.roomIdByWidgetId.set(widgetId, roomId);
    this.emit(ActiveWidgetStoreEvent.Update);
  }

  delRoomId(widgetId) {
    this.roomIdByWidgetId.delete(widgetId);
    this.emit(ActiveWidgetStoreEvent.Update);
  }

}

exports.default = ActiveWidgetStore;
(0, _defineProperty2.default)(ActiveWidgetStore, "internalInstance", void 0);
window.mxActiveWidgetStore = ActiveWidgetStore.instance;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,