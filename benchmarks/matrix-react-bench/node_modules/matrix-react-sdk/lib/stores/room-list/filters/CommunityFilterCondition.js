"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CommunityFilterCondition = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _IFilterCondition = require("./IFilterCondition");

var _events = require("events");

var _GroupStore = _interopRequireDefault(require("../../GroupStore"));

var _DMRoomMap = _interopRequireDefault(require("../../../utils/DMRoomMap"));

var _sets = require("../../../utils/sets");

/*
Copyright 2020, 2021 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/**
 * A filter condition for the room list which reveals rooms which
 * are a member of a given community.
 */
class CommunityFilterCondition extends _events.EventEmitter {
  constructor(community) {
    super();
    this.community = community;
    (0, _defineProperty2.default)(this, "roomIds", new Set());
    (0, _defineProperty2.default)(this, "userIds", new Set());
    (0, _defineProperty2.default)(this, "onStoreUpdate", async () => {
      // We don't actually know if the room list changed for the community, so just check it again.
      const beforeRoomIds = this.roomIds;
      this.roomIds = new Set((await _GroupStore.default.getGroupRooms(this.community.groupId)).map(r => r.roomId));
      const beforeUserIds = this.userIds;
      this.userIds = new Set((await _GroupStore.default.getGroupMembers(this.community.groupId)).map(u => u.userId));

      if ((0, _sets.setHasDiff)(beforeRoomIds, this.roomIds) || (0, _sets.setHasDiff)(beforeUserIds, this.userIds)) {
        this.emit(_IFilterCondition.FILTER_CHANGED);
      }
    });

    _GroupStore.default.on("update", this.onStoreUpdate); // noinspection JSIgnoredPromiseFromCall


    this.onStoreUpdate(); // trigger a false update to seed the store
  }

  get kind() {
    return _IFilterCondition.FilterKind.Prefilter;
  }

  isVisible(room) {
    return this.roomIds.has(room.roomId) || this.userIds.has(_DMRoomMap.default.shared().getUserIdForRoomId(room.roomId));
  }

  destroy() {
    _GroupStore.default.off("update", this.onStoreUpdate);
  }

}

exports.CommunityFilterCondition = CommunityFilterCondition;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9zdG9yZXMvcm9vbS1saXN0L2ZpbHRlcnMvQ29tbXVuaXR5RmlsdGVyQ29uZGl0aW9uLnRzIl0sIm5hbWVzIjpbIkNvbW11bml0eUZpbHRlckNvbmRpdGlvbiIsIkV2ZW50RW1pdHRlciIsImNvbnN0cnVjdG9yIiwiY29tbXVuaXR5IiwiU2V0IiwiYmVmb3JlUm9vbUlkcyIsInJvb21JZHMiLCJHcm91cFN0b3JlIiwiZ2V0R3JvdXBSb29tcyIsImdyb3VwSWQiLCJtYXAiLCJyIiwicm9vbUlkIiwiYmVmb3JlVXNlcklkcyIsInVzZXJJZHMiLCJnZXRHcm91cE1lbWJlcnMiLCJ1IiwidXNlcklkIiwiZW1pdCIsIkZJTFRFUl9DSEFOR0VEIiwib24iLCJvblN0b3JlVXBkYXRlIiwia2luZCIsIkZpbHRlcktpbmQiLCJQcmVmaWx0ZXIiLCJpc1Zpc2libGUiLCJyb29tIiwiaGFzIiwiRE1Sb29tTWFwIiwic2hhcmVkIiwiZ2V0VXNlcklkRm9yUm9vbUlkIiwiZGVzdHJveSIsIm9mZiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFpQkE7O0FBRUE7O0FBQ0E7O0FBRUE7O0FBQ0E7O0FBdkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFXQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLE1BQU1BLHdCQUFOLFNBQXVDQyxvQkFBdkMsQ0FBOEY7QUFJakdDLEVBQUFBLFdBQVcsQ0FBU0MsU0FBVCxFQUEyQjtBQUNsQztBQURrQyxTQUFsQkEsU0FBa0IsR0FBbEJBLFNBQWtCO0FBQUEsbURBSHBCLElBQUlDLEdBQUosRUFHb0I7QUFBQSxtREFGcEIsSUFBSUEsR0FBSixFQUVvQjtBQUFBLHlEQWdCZCxZQUEwQjtBQUM5QztBQUNBLFlBQU1DLGFBQWEsR0FBRyxLQUFLQyxPQUEzQjtBQUNBLFdBQUtBLE9BQUwsR0FBZSxJQUFJRixHQUFKLENBQVEsQ0FBQyxNQUFNRyxvQkFBV0MsYUFBWCxDQUF5QixLQUFLTCxTQUFMLENBQWVNLE9BQXhDLENBQVAsRUFBeURDLEdBQXpELENBQTZEQyxDQUFDLElBQUlBLENBQUMsQ0FBQ0MsTUFBcEUsQ0FBUixDQUFmO0FBRUEsWUFBTUMsYUFBYSxHQUFHLEtBQUtDLE9BQTNCO0FBQ0EsV0FBS0EsT0FBTCxHQUFlLElBQUlWLEdBQUosQ0FBUSxDQUFDLE1BQU1HLG9CQUFXUSxlQUFYLENBQTJCLEtBQUtaLFNBQUwsQ0FBZU0sT0FBMUMsQ0FBUCxFQUEyREMsR0FBM0QsQ0FBK0RNLENBQUMsSUFBSUEsQ0FBQyxDQUFDQyxNQUF0RSxDQUFSLENBQWY7O0FBRUEsVUFBSSxzQkFBV1osYUFBWCxFQUEwQixLQUFLQyxPQUEvQixLQUEyQyxzQkFBV08sYUFBWCxFQUEwQixLQUFLQyxPQUEvQixDQUEvQyxFQUF3RjtBQUNwRixhQUFLSSxJQUFMLENBQVVDLGdDQUFWO0FBQ0g7QUFDSixLQTNCcUM7O0FBRWxDWix3QkFBV2EsRUFBWCxDQUFjLFFBQWQsRUFBd0IsS0FBS0MsYUFBN0IsRUFGa0MsQ0FJbEM7OztBQUNBLFNBQUtBLGFBQUwsR0FMa0MsQ0FLWjtBQUN6Qjs7QUFFYyxNQUFKQyxJQUFJLEdBQWU7QUFDMUIsV0FBT0MsNkJBQVdDLFNBQWxCO0FBQ0g7O0FBRU1DLEVBQUFBLFNBQVMsQ0FBQ0MsSUFBRCxFQUFzQjtBQUNsQyxXQUFPLEtBQUtwQixPQUFMLENBQWFxQixHQUFiLENBQWlCRCxJQUFJLENBQUNkLE1BQXRCLEtBQWlDLEtBQUtFLE9BQUwsQ0FBYWEsR0FBYixDQUFpQkMsbUJBQVVDLE1BQVYsR0FBbUJDLGtCQUFuQixDQUFzQ0osSUFBSSxDQUFDZCxNQUEzQyxDQUFqQixDQUF4QztBQUNIOztBQWVNbUIsRUFBQUEsT0FBTyxHQUFTO0FBQ25CeEIsd0JBQVd5QixHQUFYLENBQWUsUUFBZixFQUF5QixLQUFLWCxhQUE5QjtBQUNIOztBQW5DZ0ciLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuQ29weXJpZ2h0IDIwMjAsIDIwMjEgVGhlIE1hdHJpeC5vcmcgRm91bmRhdGlvbiBDLkkuQy5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG5pbXBvcnQgeyBSb29tIH0gZnJvbSBcIm1hdHJpeC1qcy1zZGsvc3JjL21vZGVscy9yb29tXCI7XG5pbXBvcnQgeyBGSUxURVJfQ0hBTkdFRCwgRmlsdGVyS2luZCwgSUZpbHRlckNvbmRpdGlvbiB9IGZyb20gXCIuL0lGaWx0ZXJDb25kaXRpb25cIjtcbmltcG9ydCB7IEdyb3VwIH0gZnJvbSBcIm1hdHJpeC1qcy1zZGsvc3JjL21vZGVscy9ncm91cFwiO1xuaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSBcImV2ZW50c1wiO1xuaW1wb3J0IEdyb3VwU3RvcmUgZnJvbSBcIi4uLy4uL0dyb3VwU3RvcmVcIjtcbmltcG9ydCB7IElEZXN0cm95YWJsZSB9IGZyb20gXCIuLi8uLi8uLi91dGlscy9JRGVzdHJveWFibGVcIjtcbmltcG9ydCBETVJvb21NYXAgZnJvbSBcIi4uLy4uLy4uL3V0aWxzL0RNUm9vbU1hcFwiO1xuaW1wb3J0IHsgc2V0SGFzRGlmZiB9IGZyb20gXCIuLi8uLi8uLi91dGlscy9zZXRzXCI7XG5cbi8qKlxuICogQSBmaWx0ZXIgY29uZGl0aW9uIGZvciB0aGUgcm9vbSBsaXN0IHdoaWNoIHJldmVhbHMgcm9vbXMgd2hpY2hcbiAqIGFyZSBhIG1lbWJlciBvZiBhIGdpdmVuIGNvbW11bml0eS5cbiAqL1xuZXhwb3J0IGNsYXNzIENvbW11bml0eUZpbHRlckNvbmRpdGlvbiBleHRlbmRzIEV2ZW50RW1pdHRlciBpbXBsZW1lbnRzIElGaWx0ZXJDb25kaXRpb24sIElEZXN0cm95YWJsZSB7XG4gICAgcHJpdmF0ZSByb29tSWRzID0gbmV3IFNldDxzdHJpbmc+KCk7XG4gICAgcHJpdmF0ZSB1c2VySWRzID0gbmV3IFNldDxzdHJpbmc+KCk7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNvbW11bml0eTogR3JvdXApIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgR3JvdXBTdG9yZS5vbihcInVwZGF0ZVwiLCB0aGlzLm9uU3RvcmVVcGRhdGUpO1xuXG4gICAgICAgIC8vIG5vaW5zcGVjdGlvbiBKU0lnbm9yZWRQcm9taXNlRnJvbUNhbGxcbiAgICAgICAgdGhpcy5vblN0b3JlVXBkYXRlKCk7IC8vIHRyaWdnZXIgYSBmYWxzZSB1cGRhdGUgdG8gc2VlZCB0aGUgc3RvcmVcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGtpbmQoKTogRmlsdGVyS2luZCB7XG4gICAgICAgIHJldHVybiBGaWx0ZXJLaW5kLlByZWZpbHRlcjtcbiAgICB9XG5cbiAgICBwdWJsaWMgaXNWaXNpYmxlKHJvb206IFJvb20pOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucm9vbUlkcy5oYXMocm9vbS5yb29tSWQpIHx8IHRoaXMudXNlcklkcy5oYXMoRE1Sb29tTWFwLnNoYXJlZCgpLmdldFVzZXJJZEZvclJvb21JZChyb29tLnJvb21JZCkpO1xuICAgIH1cblxuICAgIHByaXZhdGUgb25TdG9yZVVwZGF0ZSA9IGFzeW5jICgpOiBQcm9taXNlPGFueT4gPT4ge1xuICAgICAgICAvLyBXZSBkb24ndCBhY3R1YWxseSBrbm93IGlmIHRoZSByb29tIGxpc3QgY2hhbmdlZCBmb3IgdGhlIGNvbW11bml0eSwgc28ganVzdCBjaGVjayBpdCBhZ2Fpbi5cbiAgICAgICAgY29uc3QgYmVmb3JlUm9vbUlkcyA9IHRoaXMucm9vbUlkcztcbiAgICAgICAgdGhpcy5yb29tSWRzID0gbmV3IFNldCgoYXdhaXQgR3JvdXBTdG9yZS5nZXRHcm91cFJvb21zKHRoaXMuY29tbXVuaXR5Lmdyb3VwSWQpKS5tYXAociA9PiByLnJvb21JZCkpO1xuXG4gICAgICAgIGNvbnN0IGJlZm9yZVVzZXJJZHMgPSB0aGlzLnVzZXJJZHM7XG4gICAgICAgIHRoaXMudXNlcklkcyA9IG5ldyBTZXQoKGF3YWl0IEdyb3VwU3RvcmUuZ2V0R3JvdXBNZW1iZXJzKHRoaXMuY29tbXVuaXR5Lmdyb3VwSWQpKS5tYXAodSA9PiB1LnVzZXJJZCkpO1xuXG4gICAgICAgIGlmIChzZXRIYXNEaWZmKGJlZm9yZVJvb21JZHMsIHRoaXMucm9vbUlkcykgfHwgc2V0SGFzRGlmZihiZWZvcmVVc2VySWRzLCB0aGlzLnVzZXJJZHMpKSB7XG4gICAgICAgICAgICB0aGlzLmVtaXQoRklMVEVSX0NIQU5HRUQpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHB1YmxpYyBkZXN0cm95KCk6IHZvaWQge1xuICAgICAgICBHcm91cFN0b3JlLm9mZihcInVwZGF0ZVwiLCB0aGlzLm9uU3RvcmVVcGRhdGUpO1xuICAgIH1cbn1cbiJdfQ==