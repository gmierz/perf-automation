"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VisibilityProvider = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _CallHandler = _interopRequireDefault(require("../../../CallHandler"));

var _RoomList = require("../../../customisations/RoomList");

var _VoipUserMapper = _interopRequireDefault(require("../../../VoipUserMapper"));

var _SpaceStore = _interopRequireDefault(require("../../spaces/SpaceStore"));

/*
 * Copyright 2020 The Matrix.org Foundation C.I.C.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class VisibilityProvider {
  constructor() {}

  static get instance() {
    if (!VisibilityProvider.internalInstance) {
      VisibilityProvider.internalInstance = new VisibilityProvider();
    }

    return VisibilityProvider.internalInstance;
  }

  async onNewInvitedRoom(room) {
    await _VoipUserMapper.default.sharedInstance().onNewInvitedRoom(room);
  }

  isRoomVisible(room) {
    if (!room) {
      return false;
    }

    if (_CallHandler.default.sharedInstance().getSupportsVirtualRooms() && _VoipUserMapper.default.sharedInstance().isVirtualRoom(room)) {
      return false;
    } // hide space rooms as they'll be shown in the SpacePanel


    if (_SpaceStore.default.spacesEnabled && room.isSpaceRoom()) {
      return false;
    }

    const isVisibleFn = _RoomList.RoomListCustomisations.isRoomVisible;

    if (isVisibleFn) {
      return isVisibleFn(room);
    }

    return true; // default
  }

}

exports.VisibilityProvider = VisibilityProvider;
(0, _defineProperty2.default)(VisibilityProvider, "internalInstance", void 0);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9zdG9yZXMvcm9vbS1saXN0L2ZpbHRlcnMvVmlzaWJpbGl0eVByb3ZpZGVyLnRzIl0sIm5hbWVzIjpbIlZpc2liaWxpdHlQcm92aWRlciIsImNvbnN0cnVjdG9yIiwiaW5zdGFuY2UiLCJpbnRlcm5hbEluc3RhbmNlIiwib25OZXdJbnZpdGVkUm9vbSIsInJvb20iLCJWb2lwVXNlck1hcHBlciIsInNoYXJlZEluc3RhbmNlIiwiaXNSb29tVmlzaWJsZSIsIkNhbGxIYW5kbGVyIiwiZ2V0U3VwcG9ydHNWaXJ0dWFsUm9vbXMiLCJpc1ZpcnR1YWxSb29tIiwiU3BhY2VTdG9yZSIsInNwYWNlc0VuYWJsZWQiLCJpc1NwYWNlUm9vbSIsImlzVmlzaWJsZUZuIiwiUm9vbUxpc3RDdXN0b21pc2F0aW9ucyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFpQkE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBcEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVFPLE1BQU1BLGtCQUFOLENBQXlCO0FBR3BCQyxFQUFBQSxXQUFXLEdBQUcsQ0FDckI7O0FBRXlCLGFBQVJDLFFBQVEsR0FBdUI7QUFDN0MsUUFBSSxDQUFDRixrQkFBa0IsQ0FBQ0csZ0JBQXhCLEVBQTBDO0FBQ3RDSCxNQUFBQSxrQkFBa0IsQ0FBQ0csZ0JBQW5CLEdBQXNDLElBQUlILGtCQUFKLEVBQXRDO0FBQ0g7O0FBQ0QsV0FBT0Esa0JBQWtCLENBQUNHLGdCQUExQjtBQUNIOztBQUU0QixRQUFoQkMsZ0JBQWdCLENBQUNDLElBQUQsRUFBYTtBQUN0QyxVQUFNQyx3QkFBZUMsY0FBZixHQUFnQ0gsZ0JBQWhDLENBQWlEQyxJQUFqRCxDQUFOO0FBQ0g7O0FBRU1HLEVBQUFBLGFBQWEsQ0FBQ0gsSUFBRCxFQUF1QjtBQUN2QyxRQUFJLENBQUNBLElBQUwsRUFBVztBQUNQLGFBQU8sS0FBUDtBQUNIOztBQUVELFFBQ0lJLHFCQUFZRixjQUFaLEdBQTZCRyx1QkFBN0IsTUFDQUosd0JBQWVDLGNBQWYsR0FBZ0NJLGFBQWhDLENBQThDTixJQUE5QyxDQUZKLEVBR0U7QUFDRSxhQUFPLEtBQVA7QUFDSCxLQVZzQyxDQVl2Qzs7O0FBQ0EsUUFBSU8sb0JBQVdDLGFBQVgsSUFBNEJSLElBQUksQ0FBQ1MsV0FBTCxFQUFoQyxFQUFvRDtBQUNoRCxhQUFPLEtBQVA7QUFDSDs7QUFFRCxVQUFNQyxXQUFXLEdBQUdDLGlDQUF1QlIsYUFBM0M7O0FBQ0EsUUFBSU8sV0FBSixFQUFpQjtBQUNiLGFBQU9BLFdBQVcsQ0FBQ1YsSUFBRCxDQUFsQjtBQUNIOztBQUVELFdBQU8sSUFBUCxDQXRCdUMsQ0FzQjFCO0FBQ2hCOztBQXhDMkI7Ozs4QkFBbkJMLGtCIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAyMDIwIFRoZSBNYXRyaXgub3JnIEZvdW5kYXRpb24gQy5JLkMuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBSb29tIH0gZnJvbSBcIm1hdHJpeC1qcy1zZGsvc3JjL21vZGVscy9yb29tXCI7XG5pbXBvcnQgQ2FsbEhhbmRsZXIgZnJvbSBcIi4uLy4uLy4uL0NhbGxIYW5kbGVyXCI7XG5pbXBvcnQgeyBSb29tTGlzdEN1c3RvbWlzYXRpb25zIH0gZnJvbSBcIi4uLy4uLy4uL2N1c3RvbWlzYXRpb25zL1Jvb21MaXN0XCI7XG5pbXBvcnQgVm9pcFVzZXJNYXBwZXIgZnJvbSBcIi4uLy4uLy4uL1ZvaXBVc2VyTWFwcGVyXCI7XG5pbXBvcnQgU3BhY2VTdG9yZSBmcm9tIFwiLi4vLi4vc3BhY2VzL1NwYWNlU3RvcmVcIjtcblxuZXhwb3J0IGNsYXNzIFZpc2liaWxpdHlQcm92aWRlciB7XG4gICAgcHJpdmF0ZSBzdGF0aWMgaW50ZXJuYWxJbnN0YW5jZTogVmlzaWJpbGl0eVByb3ZpZGVyO1xuXG4gICAgcHJpdmF0ZSBjb25zdHJ1Y3RvcigpIHtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGdldCBpbnN0YW5jZSgpOiBWaXNpYmlsaXR5UHJvdmlkZXIge1xuICAgICAgICBpZiAoIVZpc2liaWxpdHlQcm92aWRlci5pbnRlcm5hbEluc3RhbmNlKSB7XG4gICAgICAgICAgICBWaXNpYmlsaXR5UHJvdmlkZXIuaW50ZXJuYWxJbnN0YW5jZSA9IG5ldyBWaXNpYmlsaXR5UHJvdmlkZXIoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gVmlzaWJpbGl0eVByb3ZpZGVyLmludGVybmFsSW5zdGFuY2U7XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIG9uTmV3SW52aXRlZFJvb20ocm9vbTogUm9vbSkge1xuICAgICAgICBhd2FpdCBWb2lwVXNlck1hcHBlci5zaGFyZWRJbnN0YW5jZSgpLm9uTmV3SW52aXRlZFJvb20ocm9vbSk7XG4gICAgfVxuXG4gICAgcHVibGljIGlzUm9vbVZpc2libGUocm9vbT86IFJvb20pOiBib29sZWFuIHtcbiAgICAgICAgaWYgKCFyb29tKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXG4gICAgICAgICAgICBDYWxsSGFuZGxlci5zaGFyZWRJbnN0YW5jZSgpLmdldFN1cHBvcnRzVmlydHVhbFJvb21zKCkgJiZcbiAgICAgICAgICAgIFZvaXBVc2VyTWFwcGVyLnNoYXJlZEluc3RhbmNlKCkuaXNWaXJ0dWFsUm9vbShyb29tKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGhpZGUgc3BhY2Ugcm9vbXMgYXMgdGhleSdsbCBiZSBzaG93biBpbiB0aGUgU3BhY2VQYW5lbFxuICAgICAgICBpZiAoU3BhY2VTdG9yZS5zcGFjZXNFbmFibGVkICYmIHJvb20uaXNTcGFjZVJvb20oKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgaXNWaXNpYmxlRm4gPSBSb29tTGlzdEN1c3RvbWlzYXRpb25zLmlzUm9vbVZpc2libGU7XG4gICAgICAgIGlmIChpc1Zpc2libGVGbikge1xuICAgICAgICAgICAgcmV0dXJuIGlzVmlzaWJsZUZuKHJvb20pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRydWU7IC8vIGRlZmF1bHRcbiAgICB9XG59XG4iXX0=