"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NameFilterCondition = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _IFilterCondition = require("./IFilterCondition");

var _events = require("events");

var _utils = require("matrix-js-sdk/src/utils");

var _lodash = require("lodash");

/*
Copyright 2020, 2021 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/**
 * A filter condition for the room list which reveals rooms of a particular
 * name, or associated name (like a room alias).
 */
class NameFilterCondition extends _events.EventEmitter {
  constructor() {
    super();
    (0, _defineProperty2.default)(this, "_search", "");
    (0, _defineProperty2.default)(this, "callUpdate", (0, _lodash.throttle)(() => {
      this.emit(_IFilterCondition.FILTER_CHANGED);
    }, 200, {
      trailing: true,
      leading: true
    }));
  }

  get kind() {
    return _IFilterCondition.FilterKind.Runtime;
  }

  get search() {
    return this._search;
  }

  set search(val) {
    this._search = val;
    this.callUpdate();
  }

  isVisible(room) {
    const lcFilter = this.search.toLowerCase();

    if (this.search[0] === '#') {
      // Try and find rooms by alias
      if (room.getCanonicalAlias() && room.getCanonicalAlias().toLowerCase().startsWith(lcFilter)) {
        return true;
      }

      if (room.getAltAliases().some(a => a.toLowerCase().startsWith(lcFilter))) {
        return true;
      }
    }

    if (!room.name) return false; // should realistically not happen: the js-sdk always calculates a name

    return this.matches(room.normalizedName);
  }

  matches(normalizedName) {
    return normalizedName.includes((0, _utils.normalize)(this.search));
  }

}

exports.NameFilterCondition = NameFilterCondition;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9zdG9yZXMvcm9vbS1saXN0L2ZpbHRlcnMvTmFtZUZpbHRlckNvbmRpdGlvbi50cyJdLCJuYW1lcyI6WyJOYW1lRmlsdGVyQ29uZGl0aW9uIiwiRXZlbnRFbWl0dGVyIiwiY29uc3RydWN0b3IiLCJlbWl0IiwiRklMVEVSX0NIQU5HRUQiLCJ0cmFpbGluZyIsImxlYWRpbmciLCJraW5kIiwiRmlsdGVyS2luZCIsIlJ1bnRpbWUiLCJzZWFyY2giLCJfc2VhcmNoIiwidmFsIiwiY2FsbFVwZGF0ZSIsImlzVmlzaWJsZSIsInJvb20iLCJsY0ZpbHRlciIsInRvTG93ZXJDYXNlIiwiZ2V0Q2Fub25pY2FsQWxpYXMiLCJzdGFydHNXaXRoIiwiZ2V0QWx0QWxpYXNlcyIsInNvbWUiLCJhIiwibmFtZSIsIm1hdGNoZXMiLCJub3JtYWxpemVkTmFtZSIsImluY2x1ZGVzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQWlCQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFwQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sTUFBTUEsbUJBQU4sU0FBa0NDLG9CQUFsQyxDQUEyRTtBQUc5RUMsRUFBQUEsV0FBVyxHQUFHO0FBQ1Y7QUFEVSxtREFGSSxFQUVKO0FBQUEsc0RBaUJPLHNCQUFTLE1BQU07QUFDaEMsV0FBS0MsSUFBTCxDQUFVQyxnQ0FBVjtBQUNILEtBRm9CLEVBRWxCLEdBRmtCLEVBRWI7QUFBRUMsTUFBQUEsUUFBUSxFQUFFLElBQVo7QUFBa0JDLE1BQUFBLE9BQU8sRUFBRTtBQUEzQixLQUZhLENBakJQO0FBRWI7O0FBRWMsTUFBSkMsSUFBSSxHQUFlO0FBQzFCLFdBQU9DLDZCQUFXQyxPQUFsQjtBQUNIOztBQUVnQixNQUFOQyxNQUFNLEdBQVc7QUFDeEIsV0FBTyxLQUFLQyxPQUFaO0FBQ0g7O0FBRWdCLE1BQU5ELE1BQU0sQ0FBQ0UsR0FBRCxFQUFjO0FBQzNCLFNBQUtELE9BQUwsR0FBZUMsR0FBZjtBQUNBLFNBQUtDLFVBQUw7QUFDSDs7QUFNTUMsRUFBQUEsU0FBUyxDQUFDQyxJQUFELEVBQXNCO0FBQ2xDLFVBQU1DLFFBQVEsR0FBRyxLQUFLTixNQUFMLENBQVlPLFdBQVosRUFBakI7O0FBQ0EsUUFBSSxLQUFLUCxNQUFMLENBQVksQ0FBWixNQUFtQixHQUF2QixFQUE0QjtBQUN4QjtBQUNBLFVBQUlLLElBQUksQ0FBQ0csaUJBQUwsTUFBNEJILElBQUksQ0FBQ0csaUJBQUwsR0FBeUJELFdBQXpCLEdBQXVDRSxVQUF2QyxDQUFrREgsUUFBbEQsQ0FBaEMsRUFBNkY7QUFDekYsZUFBTyxJQUFQO0FBQ0g7O0FBQ0QsVUFBSUQsSUFBSSxDQUFDSyxhQUFMLEdBQXFCQyxJQUFyQixDQUEwQkMsQ0FBQyxJQUFJQSxDQUFDLENBQUNMLFdBQUYsR0FBZ0JFLFVBQWhCLENBQTJCSCxRQUEzQixDQUEvQixDQUFKLEVBQTBFO0FBQ3RFLGVBQU8sSUFBUDtBQUNIO0FBQ0o7O0FBRUQsUUFBSSxDQUFDRCxJQUFJLENBQUNRLElBQVYsRUFBZ0IsT0FBTyxLQUFQLENBWmtCLENBWUo7O0FBRTlCLFdBQU8sS0FBS0MsT0FBTCxDQUFhVCxJQUFJLENBQUNVLGNBQWxCLENBQVA7QUFDSDs7QUFFTUQsRUFBQUEsT0FBTyxDQUFDQyxjQUFELEVBQWtDO0FBQzVDLFdBQU9BLGNBQWMsQ0FBQ0MsUUFBZixDQUF3QixzQkFBVSxLQUFLaEIsTUFBZixDQUF4QixDQUFQO0FBQ0g7O0FBM0M2RSIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5Db3B5cmlnaHQgMjAyMCwgMjAyMSBUaGUgTWF0cml4Lm9yZyBGb3VuZGF0aW9uIEMuSS5DLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbmltcG9ydCB7IFJvb20gfSBmcm9tIFwibWF0cml4LWpzLXNkay9zcmMvbW9kZWxzL3Jvb21cIjtcbmltcG9ydCB7IEZJTFRFUl9DSEFOR0VELCBGaWx0ZXJLaW5kLCBJRmlsdGVyQ29uZGl0aW9uIH0gZnJvbSBcIi4vSUZpbHRlckNvbmRpdGlvblwiO1xuaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSBcImV2ZW50c1wiO1xuaW1wb3J0IHsgbm9ybWFsaXplIH0gZnJvbSBcIm1hdHJpeC1qcy1zZGsvc3JjL3V0aWxzXCI7XG5pbXBvcnQgeyB0aHJvdHRsZSB9IGZyb20gXCJsb2Rhc2hcIjtcblxuLyoqXG4gKiBBIGZpbHRlciBjb25kaXRpb24gZm9yIHRoZSByb29tIGxpc3Qgd2hpY2ggcmV2ZWFscyByb29tcyBvZiBhIHBhcnRpY3VsYXJcbiAqIG5hbWUsIG9yIGFzc29jaWF0ZWQgbmFtZSAobGlrZSBhIHJvb20gYWxpYXMpLlxuICovXG5leHBvcnQgY2xhc3MgTmFtZUZpbHRlckNvbmRpdGlvbiBleHRlbmRzIEV2ZW50RW1pdHRlciBpbXBsZW1lbnRzIElGaWx0ZXJDb25kaXRpb24ge1xuICAgIHByaXZhdGUgX3NlYXJjaCA9IFwiXCI7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGtpbmQoKTogRmlsdGVyS2luZCB7XG4gICAgICAgIHJldHVybiBGaWx0ZXJLaW5kLlJ1bnRpbWU7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBzZWFyY2goKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NlYXJjaDtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0IHNlYXJjaCh2YWw6IHN0cmluZykge1xuICAgICAgICB0aGlzLl9zZWFyY2ggPSB2YWw7XG4gICAgICAgIHRoaXMuY2FsbFVwZGF0ZSgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgY2FsbFVwZGF0ZSA9IHRocm90dGxlKCgpID0+IHtcbiAgICAgICAgdGhpcy5lbWl0KEZJTFRFUl9DSEFOR0VEKTtcbiAgICB9LCAyMDAsIHsgdHJhaWxpbmc6IHRydWUsIGxlYWRpbmc6IHRydWUgfSk7XG5cbiAgICBwdWJsaWMgaXNWaXNpYmxlKHJvb206IFJvb20pOiBib29sZWFuIHtcbiAgICAgICAgY29uc3QgbGNGaWx0ZXIgPSB0aGlzLnNlYXJjaC50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAodGhpcy5zZWFyY2hbMF0gPT09ICcjJykge1xuICAgICAgICAgICAgLy8gVHJ5IGFuZCBmaW5kIHJvb21zIGJ5IGFsaWFzXG4gICAgICAgICAgICBpZiAocm9vbS5nZXRDYW5vbmljYWxBbGlhcygpICYmIHJvb20uZ2V0Q2Fub25pY2FsQWxpYXMoKS50b0xvd2VyQ2FzZSgpLnN0YXJ0c1dpdGgobGNGaWx0ZXIpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocm9vbS5nZXRBbHRBbGlhc2VzKCkuc29tZShhID0+IGEudG9Mb3dlckNhc2UoKS5zdGFydHNXaXRoKGxjRmlsdGVyKSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghcm9vbS5uYW1lKSByZXR1cm4gZmFsc2U7IC8vIHNob3VsZCByZWFsaXN0aWNhbGx5IG5vdCBoYXBwZW46IHRoZSBqcy1zZGsgYWx3YXlzIGNhbGN1bGF0ZXMgYSBuYW1lXG5cbiAgICAgICAgcmV0dXJuIHRoaXMubWF0Y2hlcyhyb29tLm5vcm1hbGl6ZWROYW1lKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgbWF0Y2hlcyhub3JtYWxpemVkTmFtZTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiBub3JtYWxpemVkTmFtZS5pbmNsdWRlcyhub3JtYWxpemUodGhpcy5zZWFyY2gpKTtcbiAgICB9XG59XG4iXX0=