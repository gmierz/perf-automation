"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SpaceWatcher = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _SpaceFilterCondition = require("./filters/SpaceFilterCondition");

var _SpaceStore = _interopRequireDefault(require("../spaces/SpaceStore"));

var _spaces = require("../spaces");

/*
Copyright 2021 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/**
 * Watches for changes in spaces to manage the filter on the provided RoomListStore
 */
class SpaceWatcher {
  // we track these separately to the SpaceStore as we need to observe transitions
  constructor(store) {
    this.store = store;
    (0, _defineProperty2.default)(this, "filter", new _SpaceFilterCondition.SpaceFilterCondition());
    (0, _defineProperty2.default)(this, "activeSpace", _SpaceStore.default.instance.activeSpace);
    (0, _defineProperty2.default)(this, "allRoomsInHome", _SpaceStore.default.instance.allRoomsInHome);
    (0, _defineProperty2.default)(this, "onSelectedSpaceUpdated", (activeSpace, allRoomsInHome = this.allRoomsInHome) => {
      if (activeSpace === this.activeSpace && allRoomsInHome === this.allRoomsInHome) return; // nop

      const neededFilter = SpaceWatcher.needsFilter(this.activeSpace, this.allRoomsInHome);
      const needsFilter = SpaceWatcher.needsFilter(activeSpace, allRoomsInHome);
      this.activeSpace = activeSpace;
      this.allRoomsInHome = allRoomsInHome;

      if (needsFilter) {
        this.updateFilter();
      }

      if (!neededFilter && needsFilter) {
        this.store.addFilter(this.filter);
      } else if (neededFilter && !needsFilter) {
        this.store.removeFilter(this.filter);
      }
    });
    (0, _defineProperty2.default)(this, "onHomeBehaviourUpdated", allRoomsInHome => {
      this.onSelectedSpaceUpdated(this.activeSpace, allRoomsInHome);
    });
    (0, _defineProperty2.default)(this, "updateFilter", () => {
      if (this.activeSpace[0] === "!") {
        _SpaceStore.default.instance.traverseSpace(this.activeSpace, roomId => {
          var _this$store$matrixCli, _this$store$matrixCli2;

          (_this$store$matrixCli = this.store.matrixClient) === null || _this$store$matrixCli === void 0 ? void 0 : (_this$store$matrixCli2 = _this$store$matrixCli.getRoom(roomId)) === null || _this$store$matrixCli2 === void 0 ? void 0 : _this$store$matrixCli2.loadMembersIfNeeded();
        });
      }

      this.filter.updateSpace(this.activeSpace);
    });

    if (SpaceWatcher.needsFilter(this.activeSpace, this.allRoomsInHome)) {
      this.updateFilter();
      store.addFilter(this.filter);
    }

    _SpaceStore.default.instance.on(_spaces.UPDATE_SELECTED_SPACE, this.onSelectedSpaceUpdated);

    _SpaceStore.default.instance.on(_spaces.UPDATE_HOME_BEHAVIOUR, this.onHomeBehaviourUpdated);
  }

  static needsFilter(spaceKey, allRoomsInHome) {
    return !(spaceKey === _spaces.MetaSpace.Home && allRoomsInHome);
  }

}

exports.SpaceWatcher = SpaceWatcher;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zdG9yZXMvcm9vbS1saXN0L1NwYWNlV2F0Y2hlci50cyJdLCJuYW1lcyI6WyJTcGFjZVdhdGNoZXIiLCJjb25zdHJ1Y3RvciIsInN0b3JlIiwiU3BhY2VGaWx0ZXJDb25kaXRpb24iLCJTcGFjZVN0b3JlIiwiaW5zdGFuY2UiLCJhY3RpdmVTcGFjZSIsImFsbFJvb21zSW5Ib21lIiwibmVlZGVkRmlsdGVyIiwibmVlZHNGaWx0ZXIiLCJ1cGRhdGVGaWx0ZXIiLCJhZGRGaWx0ZXIiLCJmaWx0ZXIiLCJyZW1vdmVGaWx0ZXIiLCJvblNlbGVjdGVkU3BhY2VVcGRhdGVkIiwidHJhdmVyc2VTcGFjZSIsInJvb21JZCIsIm1hdHJpeENsaWVudCIsImdldFJvb20iLCJsb2FkTWVtYmVyc0lmTmVlZGVkIiwidXBkYXRlU3BhY2UiLCJvbiIsIlVQREFURV9TRUxFQ1RFRF9TUEFDRSIsIlVQREFURV9IT01FX0JFSEFWSU9VUiIsIm9uSG9tZUJlaGF2aW91clVwZGF0ZWQiLCJzcGFjZUtleSIsIk1ldGFTcGFjZSIsIkhvbWUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBaUJBOztBQUNBOztBQUNBOztBQW5CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBT0E7QUFDQTtBQUNBO0FBQ08sTUFBTUEsWUFBTixDQUFtQjtBQUV0QjtBQUlBQyxFQUFBQSxXQUFXLENBQVNDLEtBQVQsRUFBb0M7QUFBQSxTQUEzQkEsS0FBMkIsR0FBM0JBLEtBQTJCO0FBQUEsa0RBTHJCLElBQUlDLDBDQUFKLEVBS3FCO0FBQUEsdURBSGZDLG9CQUFXQyxRQUFYLENBQW9CQyxXQUdMO0FBQUEsMERBRmJGLG9CQUFXQyxRQUFYLENBQW9CRSxjQUVQO0FBQUEsa0VBYWQsQ0FBQ0QsV0FBRCxFQUF3QkMsY0FBYyxHQUFHLEtBQUtBLGNBQTlDLEtBQWlFO0FBQzlGLFVBQUlELFdBQVcsS0FBSyxLQUFLQSxXQUFyQixJQUFvQ0MsY0FBYyxLQUFLLEtBQUtBLGNBQWhFLEVBQWdGLE9BRGMsQ0FDTjs7QUFFeEYsWUFBTUMsWUFBWSxHQUFHUixZQUFZLENBQUNTLFdBQWIsQ0FBeUIsS0FBS0gsV0FBOUIsRUFBMkMsS0FBS0MsY0FBaEQsQ0FBckI7QUFDQSxZQUFNRSxXQUFXLEdBQUdULFlBQVksQ0FBQ1MsV0FBYixDQUF5QkgsV0FBekIsRUFBc0NDLGNBQXRDLENBQXBCO0FBRUEsV0FBS0QsV0FBTCxHQUFtQkEsV0FBbkI7QUFDQSxXQUFLQyxjQUFMLEdBQXNCQSxjQUF0Qjs7QUFFQSxVQUFJRSxXQUFKLEVBQWlCO0FBQ2IsYUFBS0MsWUFBTDtBQUNIOztBQUVELFVBQUksQ0FBQ0YsWUFBRCxJQUFpQkMsV0FBckIsRUFBa0M7QUFDOUIsYUFBS1AsS0FBTCxDQUFXUyxTQUFYLENBQXFCLEtBQUtDLE1BQTFCO0FBQ0gsT0FGRCxNQUVPLElBQUlKLFlBQVksSUFBSSxDQUFDQyxXQUFyQixFQUFrQztBQUNyQyxhQUFLUCxLQUFMLENBQVdXLFlBQVgsQ0FBd0IsS0FBS0QsTUFBN0I7QUFDSDtBQUNKLEtBL0I4QztBQUFBLGtFQWlDYkwsY0FBRCxJQUE2QjtBQUMxRCxXQUFLTyxzQkFBTCxDQUE0QixLQUFLUixXQUFqQyxFQUE4Q0MsY0FBOUM7QUFDSCxLQW5DOEM7QUFBQSx3REFxQ3hCLE1BQU07QUFDekIsVUFBSSxLQUFLRCxXQUFMLENBQWlCLENBQWpCLE1BQXdCLEdBQTVCLEVBQWlDO0FBQzdCRiw0QkFBV0MsUUFBWCxDQUFvQlUsYUFBcEIsQ0FBa0MsS0FBS1QsV0FBdkMsRUFBb0RVLE1BQU0sSUFBSTtBQUFBOztBQUMxRCx3Q0FBS2QsS0FBTCxDQUFXZSxZQUFYLDBHQUF5QkMsT0FBekIsQ0FBaUNGLE1BQWpDLG1GQUEwQ0csbUJBQTFDO0FBQ0gsU0FGRDtBQUdIOztBQUNELFdBQUtQLE1BQUwsQ0FBWVEsV0FBWixDQUF3QixLQUFLZCxXQUE3QjtBQUNILEtBNUM4Qzs7QUFDM0MsUUFBSU4sWUFBWSxDQUFDUyxXQUFiLENBQXlCLEtBQUtILFdBQTlCLEVBQTJDLEtBQUtDLGNBQWhELENBQUosRUFBcUU7QUFDakUsV0FBS0csWUFBTDtBQUNBUixNQUFBQSxLQUFLLENBQUNTLFNBQU4sQ0FBZ0IsS0FBS0MsTUFBckI7QUFDSDs7QUFDRFIsd0JBQVdDLFFBQVgsQ0FBb0JnQixFQUFwQixDQUF1QkMsNkJBQXZCLEVBQThDLEtBQUtSLHNCQUFuRDs7QUFDQVYsd0JBQVdDLFFBQVgsQ0FBb0JnQixFQUFwQixDQUF1QkUsNkJBQXZCLEVBQThDLEtBQUtDLHNCQUFuRDtBQUNIOztBQUV5QixTQUFYZixXQUFXLENBQUNnQixRQUFELEVBQXFCbEIsY0FBckIsRUFBdUQ7QUFDN0UsV0FBTyxFQUFFa0IsUUFBUSxLQUFLQyxrQkFBVUMsSUFBdkIsSUFBK0JwQixjQUFqQyxDQUFQO0FBQ0g7O0FBakJxQiIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5Db3B5cmlnaHQgMjAyMSBUaGUgTWF0cml4Lm9yZyBGb3VuZGF0aW9uIEMuSS5DLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbmltcG9ydCB7IFJvb21MaXN0U3RvcmVDbGFzcyB9IGZyb20gXCIuL1Jvb21MaXN0U3RvcmVcIjtcbmltcG9ydCB7IFNwYWNlRmlsdGVyQ29uZGl0aW9uIH0gZnJvbSBcIi4vZmlsdGVycy9TcGFjZUZpbHRlckNvbmRpdGlvblwiO1xuaW1wb3J0IFNwYWNlU3RvcmUgZnJvbSBcIi4uL3NwYWNlcy9TcGFjZVN0b3JlXCI7XG5pbXBvcnQgeyBNZXRhU3BhY2UsIFNwYWNlS2V5LCBVUERBVEVfSE9NRV9CRUhBVklPVVIsIFVQREFURV9TRUxFQ1RFRF9TUEFDRSB9IGZyb20gXCIuLi9zcGFjZXNcIjtcblxuLyoqXG4gKiBXYXRjaGVzIGZvciBjaGFuZ2VzIGluIHNwYWNlcyB0byBtYW5hZ2UgdGhlIGZpbHRlciBvbiB0aGUgcHJvdmlkZWQgUm9vbUxpc3RTdG9yZVxuICovXG5leHBvcnQgY2xhc3MgU3BhY2VXYXRjaGVyIHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGZpbHRlciA9IG5ldyBTcGFjZUZpbHRlckNvbmRpdGlvbigpO1xuICAgIC8vIHdlIHRyYWNrIHRoZXNlIHNlcGFyYXRlbHkgdG8gdGhlIFNwYWNlU3RvcmUgYXMgd2UgbmVlZCB0byBvYnNlcnZlIHRyYW5zaXRpb25zXG4gICAgcHJpdmF0ZSBhY3RpdmVTcGFjZTogU3BhY2VLZXkgPSBTcGFjZVN0b3JlLmluc3RhbmNlLmFjdGl2ZVNwYWNlO1xuICAgIHByaXZhdGUgYWxsUm9vbXNJbkhvbWU6IGJvb2xlYW4gPSBTcGFjZVN0b3JlLmluc3RhbmNlLmFsbFJvb21zSW5Ib21lO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBzdG9yZTogUm9vbUxpc3RTdG9yZUNsYXNzKSB7XG4gICAgICAgIGlmIChTcGFjZVdhdGNoZXIubmVlZHNGaWx0ZXIodGhpcy5hY3RpdmVTcGFjZSwgdGhpcy5hbGxSb29tc0luSG9tZSkpIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlRmlsdGVyKCk7XG4gICAgICAgICAgICBzdG9yZS5hZGRGaWx0ZXIodGhpcy5maWx0ZXIpO1xuICAgICAgICB9XG4gICAgICAgIFNwYWNlU3RvcmUuaW5zdGFuY2Uub24oVVBEQVRFX1NFTEVDVEVEX1NQQUNFLCB0aGlzLm9uU2VsZWN0ZWRTcGFjZVVwZGF0ZWQpO1xuICAgICAgICBTcGFjZVN0b3JlLmluc3RhbmNlLm9uKFVQREFURV9IT01FX0JFSEFWSU9VUiwgdGhpcy5vbkhvbWVCZWhhdmlvdXJVcGRhdGVkKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHN0YXRpYyBuZWVkc0ZpbHRlcihzcGFjZUtleTogU3BhY2VLZXksIGFsbFJvb21zSW5Ib21lOiBib29sZWFuKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiAhKHNwYWNlS2V5ID09PSBNZXRhU3BhY2UuSG9tZSAmJiBhbGxSb29tc0luSG9tZSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvblNlbGVjdGVkU3BhY2VVcGRhdGVkID0gKGFjdGl2ZVNwYWNlOiBTcGFjZUtleSwgYWxsUm9vbXNJbkhvbWUgPSB0aGlzLmFsbFJvb21zSW5Ib21lKSA9PiB7XG4gICAgICAgIGlmIChhY3RpdmVTcGFjZSA9PT0gdGhpcy5hY3RpdmVTcGFjZSAmJiBhbGxSb29tc0luSG9tZSA9PT0gdGhpcy5hbGxSb29tc0luSG9tZSkgcmV0dXJuOyAvLyBub3BcblxuICAgICAgICBjb25zdCBuZWVkZWRGaWx0ZXIgPSBTcGFjZVdhdGNoZXIubmVlZHNGaWx0ZXIodGhpcy5hY3RpdmVTcGFjZSwgdGhpcy5hbGxSb29tc0luSG9tZSk7XG4gICAgICAgIGNvbnN0IG5lZWRzRmlsdGVyID0gU3BhY2VXYXRjaGVyLm5lZWRzRmlsdGVyKGFjdGl2ZVNwYWNlLCBhbGxSb29tc0luSG9tZSk7XG5cbiAgICAgICAgdGhpcy5hY3RpdmVTcGFjZSA9IGFjdGl2ZVNwYWNlO1xuICAgICAgICB0aGlzLmFsbFJvb21zSW5Ib21lID0gYWxsUm9vbXNJbkhvbWU7XG5cbiAgICAgICAgaWYgKG5lZWRzRmlsdGVyKSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUZpbHRlcigpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFuZWVkZWRGaWx0ZXIgJiYgbmVlZHNGaWx0ZXIpIHtcbiAgICAgICAgICAgIHRoaXMuc3RvcmUuYWRkRmlsdGVyKHRoaXMuZmlsdGVyKTtcbiAgICAgICAgfSBlbHNlIGlmIChuZWVkZWRGaWx0ZXIgJiYgIW5lZWRzRmlsdGVyKSB7XG4gICAgICAgICAgICB0aGlzLnN0b3JlLnJlbW92ZUZpbHRlcih0aGlzLmZpbHRlcik7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcHJpdmF0ZSBvbkhvbWVCZWhhdmlvdXJVcGRhdGVkID0gKGFsbFJvb21zSW5Ib21lOiBib29sZWFuKSA9PiB7XG4gICAgICAgIHRoaXMub25TZWxlY3RlZFNwYWNlVXBkYXRlZCh0aGlzLmFjdGl2ZVNwYWNlLCBhbGxSb29tc0luSG9tZSk7XG4gICAgfTtcblxuICAgIHByaXZhdGUgdXBkYXRlRmlsdGVyID0gKCkgPT4ge1xuICAgICAgICBpZiAodGhpcy5hY3RpdmVTcGFjZVswXSA9PT0gXCIhXCIpIHtcbiAgICAgICAgICAgIFNwYWNlU3RvcmUuaW5zdGFuY2UudHJhdmVyc2VTcGFjZSh0aGlzLmFjdGl2ZVNwYWNlLCByb29tSWQgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RvcmUubWF0cml4Q2xpZW50Py5nZXRSb29tKHJvb21JZCk/LmxvYWRNZW1iZXJzSWZOZWVkZWQoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZmlsdGVyLnVwZGF0ZVNwYWNlKHRoaXMuYWN0aXZlU3BhY2UpO1xuICAgIH07XG59XG4iXX0=