"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WidgetLayoutStore = exports.WIDGET_LAYOUT_EVENT_TYPE = exports.MAX_PINNED = exports.Container = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _SettingsStore = _interopRequireDefault(require("../../settings/SettingsStore"));

var _WidgetStore = _interopRequireDefault(require("../WidgetStore"));

var _WidgetType = require("../../widgets/WidgetType");

var _numbers = require("../../utils/numbers");

var _dispatcher = _interopRequireDefault(require("../../dispatcher/dispatcher"));

var _ReadyWatchingStore = require("../ReadyWatchingStore");

var _SettingLevel = require("../../settings/SettingLevel");

var _arrays = require("../../utils/arrays");

var _AsyncStore = require("../AsyncStore");

var _strings = require("../../utils/strings");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const WIDGET_LAYOUT_EVENT_TYPE = "io.element.widgets.layout";
exports.WIDGET_LAYOUT_EVENT_TYPE = WIDGET_LAYOUT_EVENT_TYPE;
let Container;
exports.Container = Container;

(function (Container) {
  Container["Top"] = "top";
  Container["Right"] = "right";
  Container["Center"] = "center";
})(Container || (exports.Container = Container = {}));

// Dev note: "Pinned" widgets are ones in the top container.
const MAX_PINNED = 3; // These two are whole percentages and don't really mean anything. Later values will decide
// minimum, but these help determine proportions during our calculations here. In fact, these
// values should be *smaller* than the actual minimums imposed by later components.

exports.MAX_PINNED = MAX_PINNED;
const MIN_WIDGET_WIDTH_PCT = 10; // 10%

const MIN_WIDGET_HEIGHT_PCT = 2; // 2%

class WidgetLayoutStore extends _ReadyWatchingStore.ReadyWatchingStore {
  constructor() {
    super(_dispatcher.default);
    (0, _defineProperty2.default)(this, "byRoom", {});
    (0, _defineProperty2.default)(this, "pinnedRef", void 0);
    (0, _defineProperty2.default)(this, "layoutRef", void 0);
    (0, _defineProperty2.default)(this, "updateAllRooms", () => {
      this.byRoom = {};

      for (const room of this.matrixClient.getVisibleRooms()) {
        this.recalculateRoom(room);
      }
    });
    (0, _defineProperty2.default)(this, "updateFromWidgetStore", roomId => {
      if (roomId) {
        const room = this.matrixClient.getRoom(roomId);
        if (room) this.recalculateRoom(room);
      } else {
        this.updateAllRooms();
      }
    });
    (0, _defineProperty2.default)(this, "updateRoomFromState", ev => {
      if (ev.getType() !== WIDGET_LAYOUT_EVENT_TYPE) return;
      const room = this.matrixClient.getRoom(ev.getRoomId());
      if (room) this.recalculateRoom(room);
    });
    (0, _defineProperty2.default)(this, "updateFromSettings", (settingName, roomId) => {
      if (roomId) {
        const room = this.matrixClient.getRoom(roomId);
        if (room) this.recalculateRoom(room);
      } else {
        this.updateAllRooms();
      }
    });
  }

  static get instance() {
    if (!WidgetLayoutStore.internalInstance) {
      WidgetLayoutStore.internalInstance = new WidgetLayoutStore();
    }

    return WidgetLayoutStore.internalInstance;
  }

  static emissionForRoom(room) {
    return `update_${room.roomId}`;
  }

  emitFor(room) {
    this.emit(WidgetLayoutStore.emissionForRoom(room));
  }

  async onReady() {
    this.updateAllRooms();
    this.matrixClient.on("RoomState.events", this.updateRoomFromState);
    this.pinnedRef = _SettingsStore.default.watchSetting("Widgets.pinned", null, this.updateFromSettings);
    this.layoutRef = _SettingsStore.default.watchSetting("Widgets.layout", null, this.updateFromSettings);

    _WidgetStore.default.instance.on(_AsyncStore.UPDATE_EVENT, this.updateFromWidgetStore);
  }

  async onNotReady() {
    this.byRoom = {};

    _SettingsStore.default.unwatchSetting(this.pinnedRef);

    _SettingsStore.default.unwatchSetting(this.layoutRef);

    _WidgetStore.default.instance.off(_AsyncStore.UPDATE_EVENT, this.updateFromWidgetStore);
  }

  recalculateRoom(room) {
    const widgets = _WidgetStore.default.instance.getApps(room.roomId);

    if (!(widgets !== null && widgets !== void 0 && widgets.length)) {
      this.byRoom[room.roomId] = {};
      this.emitFor(room);
      return;
    }

    const beforeChanges = JSON.stringify(this.byRoom[room.roomId]);
    const layoutEv = room.currentState.getStateEvents(WIDGET_LAYOUT_EVENT_TYPE, "");

    const legacyPinned = _SettingsStore.default.getValue("Widgets.pinned", room.roomId);

    let userLayout = _SettingsStore.default.getValue("Widgets.layout", room.roomId);

    if (layoutEv && userLayout && userLayout.overrides !== layoutEv.getId()) {
      // For some other layout that we don't really care about. The user can reset this
      // by updating their personal layout.
      userLayout = null;
    }

    const roomLayout = layoutEv ? layoutEv.getContent() : null; // We filter for the center container first.
    // (An error is raised, if there are multiple widgets marked for the center container)
    // For the right and top container multiple widgets are allowed.

    const topWidgets = [];
    const rightWidgets = [];
    const centerWidgets = [];

    for (const widget of widgets) {
      var _roomLayout$widgets, _roomLayout$widgets$w, _userLayout, _userLayout$widgets, _userLayout$widgets$w;

      const stateContainer = roomLayout === null || roomLayout === void 0 ? void 0 : (_roomLayout$widgets = roomLayout.widgets) === null || _roomLayout$widgets === void 0 ? void 0 : (_roomLayout$widgets$w = _roomLayout$widgets[widget.id]) === null || _roomLayout$widgets$w === void 0 ? void 0 : _roomLayout$widgets$w.container;
      const manualContainer = (_userLayout = userLayout) === null || _userLayout === void 0 ? void 0 : (_userLayout$widgets = _userLayout.widgets) === null || _userLayout$widgets === void 0 ? void 0 : (_userLayout$widgets$w = _userLayout$widgets[widget.id]) === null || _userLayout$widgets$w === void 0 ? void 0 : _userLayout$widgets$w.container;
      const isLegacyPinned = !!(legacyPinned !== null && legacyPinned !== void 0 && legacyPinned[widget.id]);
      const defaultContainer = _WidgetType.WidgetType.JITSI.matches(widget.type) ? Container.Top : Container.Right;

      if (manualContainer ? manualContainer === Container.Center : stateContainer === Container.Center) {
        if (centerWidgets.length) {
          console.error("Tried to push a second widget into the center container");
        } else {
          centerWidgets.push(widget);
        } // The widget won't need to be put in any other container.


        continue;
      }

      let targetContainer = defaultContainer;

      if (!!manualContainer || !!stateContainer) {
        targetContainer = manualContainer ? manualContainer : stateContainer;
      } else if (isLegacyPinned && !stateContainer) {
        // Special legacy case
        targetContainer = Container.Top;
      }

      (targetContainer === Container.Top ? topWidgets : rightWidgets).push(widget);
    } // Trim to MAX_PINNED


    const runoff = topWidgets.slice(MAX_PINNED);
    rightWidgets.push(...runoff); // Order the widgets in the top container, putting autopinned Jitsi widgets first
    // unless they have a specific order in mind

    topWidgets.sort((a, b) => {
      var _roomLayout$widgets2, _roomLayout$widgets3, _userLayout2, _userLayout2$widgets, _userLayout3, _userLayout3$widgets;

      const layoutA = roomLayout === null || roomLayout === void 0 ? void 0 : (_roomLayout$widgets2 = roomLayout.widgets) === null || _roomLayout$widgets2 === void 0 ? void 0 : _roomLayout$widgets2[a.id];
      const layoutB = roomLayout === null || roomLayout === void 0 ? void 0 : (_roomLayout$widgets3 = roomLayout.widgets) === null || _roomLayout$widgets3 === void 0 ? void 0 : _roomLayout$widgets3[b.id];
      const userLayoutA = (_userLayout2 = userLayout) === null || _userLayout2 === void 0 ? void 0 : (_userLayout2$widgets = _userLayout2.widgets) === null || _userLayout2$widgets === void 0 ? void 0 : _userLayout2$widgets[a.id];
      const userLayoutB = (_userLayout3 = userLayout) === null || _userLayout3 === void 0 ? void 0 : (_userLayout3$widgets = _userLayout3.widgets) === null || _userLayout3$widgets === void 0 ? void 0 : _userLayout3$widgets[b.id]; // Jitsi widgets are defaulted to be the leftmost widget whereas other widgets
      // default to the right side.

      const defaultA = _WidgetType.WidgetType.JITSI.matches(a.type) ? Number.MIN_SAFE_INTEGER : Number.MAX_SAFE_INTEGER;
      const defaultB = _WidgetType.WidgetType.JITSI.matches(b.type) ? Number.MIN_SAFE_INTEGER : Number.MAX_SAFE_INTEGER;
      const orderA = (0, _numbers.defaultNumber)(userLayoutA === null || userLayoutA === void 0 ? void 0 : userLayoutA.index, (0, _numbers.defaultNumber)(layoutA === null || layoutA === void 0 ? void 0 : layoutA.index, defaultA));
      const orderB = (0, _numbers.defaultNumber)(userLayoutB === null || userLayoutB === void 0 ? void 0 : userLayoutB.index, (0, _numbers.defaultNumber)(layoutB === null || layoutB === void 0 ? void 0 : layoutB.index, defaultB));

      if (orderA === orderB) {
        // We just need a tiebreak
        return (0, _strings.compare)(a.id, b.id);
      }

      return orderA - orderB;
    }); // Determine width distribution and height of the top container now (the only relevant one)

    const widths = [];
    let maxHeight = null; // null == default

    let doAutobalance = true;

    for (let i = 0; i < topWidgets.length; i++) {
      var _roomLayout$widgets4, _userLayout4, _userLayout4$widgets;

      const widget = topWidgets[i];
      const widgetLayout = roomLayout === null || roomLayout === void 0 ? void 0 : (_roomLayout$widgets4 = roomLayout.widgets) === null || _roomLayout$widgets4 === void 0 ? void 0 : _roomLayout$widgets4[widget.id];
      const userWidgetLayout = (_userLayout4 = userLayout) === null || _userLayout4 === void 0 ? void 0 : (_userLayout4$widgets = _userLayout4.widgets) === null || _userLayout4$widgets === void 0 ? void 0 : _userLayout4$widgets[widget.id];

      if (Number.isFinite(userWidgetLayout === null || userWidgetLayout === void 0 ? void 0 : userWidgetLayout.width) || Number.isFinite(widgetLayout === null || widgetLayout === void 0 ? void 0 : widgetLayout.width)) {
        const val = (userWidgetLayout === null || userWidgetLayout === void 0 ? void 0 : userWidgetLayout.width) || (widgetLayout === null || widgetLayout === void 0 ? void 0 : widgetLayout.width);
        const normalized = (0, _numbers.clamp)(val, MIN_WIDGET_WIDTH_PCT, 100);
        widths.push(normalized);
        doAutobalance = false; // a manual width was specified
      } else {
        widths.push(100); // we'll figure this out later
      }

      if (widgetLayout !== null && widgetLayout !== void 0 && widgetLayout.height || userWidgetLayout !== null && userWidgetLayout !== void 0 && userWidgetLayout.height) {
        const defRoomHeight = (0, _numbers.defaultNumber)(widgetLayout === null || widgetLayout === void 0 ? void 0 : widgetLayout.height, MIN_WIDGET_HEIGHT_PCT);
        const h = (0, _numbers.defaultNumber)(userWidgetLayout === null || userWidgetLayout === void 0 ? void 0 : userWidgetLayout.height, defRoomHeight);
        maxHeight = Math.max(maxHeight, (0, _numbers.clamp)(h, MIN_WIDGET_HEIGHT_PCT, 100));
      }
    }

    if (doAutobalance) {
      for (let i = 0; i < widths.length; i++) {
        widths[i] = 100 / widths.length;
      }
    } else {
      // If we're not autobalancing then it means that we're trying to make
      // sure that widgets make up exactly 100% of space (not over, not under)
      const difference = (0, _numbers.sum)(...widths) - 100; // positive = over, negative = under

      if (difference < 0) {
        // For a deficit we just fill everything in equally
        for (let i = 0; i < widths.length; i++) {
          widths[i] += Math.abs(difference) / widths.length;
        }
      } else if (difference > 0) {
        // When we're over, we try to scale all the widgets within range first.
        // We clamp values to try and keep ourselves sane and within range.
        for (let i = 0; i < widths.length; i++) {
          widths[i] = (0, _numbers.clamp)(widths[i] - difference / widths.length, MIN_WIDGET_WIDTH_PCT, 100);
        } // If we're still over, find the widgets which have more width than the minimum
        // and balance them out until we're at 100%. This should keep us as close as possible
        // to the intended distributions.
        //
        // Note: if we ever decide to set a minimum which is larger than 100%/MAX_WIDGETS then
        // we probably have other issues - this code assumes we don't do that.


        const toReclaim = (0, _numbers.sum)(...widths) - 100;

        if (toReclaim > 0) {
          const largeIndices = widths.map((v, i) => [i, v]).filter(p => p[1] > MIN_WIDGET_WIDTH_PCT).map(p => p[0]);

          for (const idx of largeIndices) {
            widths[idx] -= toReclaim / largeIndices.length;
          }
        }
      }
    } // Finally, fill in our cache and update


    this.byRoom[room.roomId] = {};

    if (topWidgets.length) {
      this.byRoom[room.roomId][Container.Top] = {
        ordered: topWidgets,
        distributions: widths,
        height: maxHeight
      };
    }

    if (rightWidgets.length) {
      this.byRoom[room.roomId][Container.Right] = {
        ordered: rightWidgets
      };
    }

    if (centerWidgets.length) {
      this.byRoom[room.roomId][Container.Center] = {
        ordered: centerWidgets
      };
    }

    const afterChanges = JSON.stringify(this.byRoom[room.roomId]);

    if (afterChanges !== beforeChanges) {
      this.emitFor(room);
    }
  }

  getContainerWidgets(room, container) {
    var _this$byRoom$room$roo, _this$byRoom$room$roo2;

    return ((_this$byRoom$room$roo = this.byRoom[room === null || room === void 0 ? void 0 : room.roomId]) === null || _this$byRoom$room$roo === void 0 ? void 0 : (_this$byRoom$room$roo2 = _this$byRoom$room$roo[container]) === null || _this$byRoom$room$roo2 === void 0 ? void 0 : _this$byRoom$room$roo2.ordered) || [];
  }

  isInContainer(room, widget, container) {
    return this.getContainerWidgets(room, container).some(w => w.id === widget.id);
  }

  canAddToContainer(room, container) {
    switch (container) {
      case Container.Top:
        return this.getContainerWidgets(room, container).length < MAX_PINNED;

      case Container.Right:
        return this.getContainerWidgets(room, container).length < MAX_PINNED;

      case Container.Center:
        return this.getContainerWidgets(room, container).length < 1;
    }
  }

  getResizerDistributions(room, container) {
    var _this$byRoom$room$roo3, _this$byRoom$room$roo4;

    // yes, string.
    let distributions = (_this$byRoom$room$roo3 = this.byRoom[room.roomId]) === null || _this$byRoom$room$roo3 === void 0 ? void 0 : (_this$byRoom$room$roo4 = _this$byRoom$room$roo3[container]) === null || _this$byRoom$room$roo4 === void 0 ? void 0 : _this$byRoom$room$roo4.distributions;
    if (!distributions || distributions.length < 2) return []; // The distributor actually expects to be fed N-1 sizes and expands the middle section
    // instead of the edges. Therefore, we need to return [0] when there's two widgets or
    // [0, 2] when there's three (skipping [1] because it's irrelevant).

    if (distributions.length === 2) distributions = [distributions[0]];
    if (distributions.length === 3) distributions = [distributions[0], distributions[2]];
    return distributions.map(d => `${d.toFixed(1)}%`); // actual percents - these are decoded later
  }

  setResizerDistributions(room, container, distributions) {
    if (container !== Container.Top) return; // ignore - not relevant

    const numbers = distributions.map(d => Number(Number(d.substring(0, d.length - 1)).toFixed(1)));
    const widgets = this.getContainerWidgets(room, container); // From getResizerDistributions, we need to fill in the middle size if applicable.

    const remaining = 100 - (0, _numbers.sum)(...numbers);
    if (numbers.length === 2) numbers.splice(1, 0, remaining);
    if (numbers.length === 1) numbers.push(remaining);
    const localLayout = {};
    widgets.forEach((w, i) => {
      var _this$byRoom$room$roo5, _this$byRoom$room$roo6;

      localLayout[w.id] = {
        container: container,
        width: numbers[i],
        index: i,
        height: ((_this$byRoom$room$roo5 = this.byRoom[room.roomId]) === null || _this$byRoom$room$roo5 === void 0 ? void 0 : (_this$byRoom$room$roo6 = _this$byRoom$room$roo5[container]) === null || _this$byRoom$room$roo6 === void 0 ? void 0 : _this$byRoom$room$roo6.height) || MIN_WIDGET_HEIGHT_PCT
      };
    });
    this.updateUserLayout(room, localLayout);
  }

  getContainerHeight(room, container) {
    var _this$byRoom$room$roo7, _this$byRoom$room$roo8;

    return (_this$byRoom$room$roo7 = this.byRoom[room.roomId]) === null || _this$byRoom$room$roo7 === void 0 ? void 0 : (_this$byRoom$room$roo8 = _this$byRoom$room$roo7[container]) === null || _this$byRoom$room$roo8 === void 0 ? void 0 : _this$byRoom$room$roo8.height; // let the default get returned if needed
  }

  setContainerHeight(room, container, height) {
    var _this$byRoom$room$roo9, _this$byRoom$room$roo10;

    const widgets = this.getContainerWidgets(room, container);
    const widths = (_this$byRoom$room$roo9 = this.byRoom[room.roomId]) === null || _this$byRoom$room$roo9 === void 0 ? void 0 : (_this$byRoom$room$roo10 = _this$byRoom$room$roo9[container]) === null || _this$byRoom$room$roo10 === void 0 ? void 0 : _this$byRoom$room$roo10.distributions;
    const localLayout = {};
    widgets.forEach((w, i) => {
      localLayout[w.id] = {
        container: container,
        width: widths[i],
        index: i,
        height: height
      };
    });
    this.updateUserLayout(room, localLayout);
  }

  moveWithinContainer(room, container, widget, delta) {
    var _this$byRoom$room$roo11, _this$byRoom$room$roo12, _this$byRoom$room$roo13, _this$byRoom$room$roo14;

    const widgets = (0, _arrays.arrayFastClone)(this.getContainerWidgets(room, container));
    const currentIdx = widgets.findIndex(w => w.id === widget.id);
    if (currentIdx < 0) return; // no change needed

    widgets.splice(currentIdx, 1); // remove existing widget

    const newIdx = (0, _numbers.clamp)(currentIdx + delta, 0, widgets.length);
    widgets.splice(newIdx, 0, widget);
    const widths = (_this$byRoom$room$roo11 = this.byRoom[room.roomId]) === null || _this$byRoom$room$roo11 === void 0 ? void 0 : (_this$byRoom$room$roo12 = _this$byRoom$room$roo11[container]) === null || _this$byRoom$room$roo12 === void 0 ? void 0 : _this$byRoom$room$roo12.distributions;
    const height = (_this$byRoom$room$roo13 = this.byRoom[room.roomId]) === null || _this$byRoom$room$roo13 === void 0 ? void 0 : (_this$byRoom$room$roo14 = _this$byRoom$room$roo13[container]) === null || _this$byRoom$room$roo14 === void 0 ? void 0 : _this$byRoom$room$roo14.height;
    const localLayout = {};
    widgets.forEach((w, i) => {
      localLayout[w.id] = {
        container: container,
        width: widths[i],
        index: i,
        height: height
      };
    });
    this.updateUserLayout(room, localLayout);
  }

  moveToContainer(room, widget, toContainer) {
    const allWidgets = this.getAllWidgets(room);
    if (!allWidgets.some(([w]) => w.id === widget.id)) return; // invalid
    // Prepare other containers (potentially move widgets to obay the following rules)

    switch (toContainer) {
      case Container.Right:
        // new "right" widget
        break;

      case Container.Center:
        // new "center" widget => all other widgets go into "right"
        for (const w of this.getContainerWidgets(room, Container.Top)) {
          this.moveToContainer(room, w, Container.Right);
        }

        for (const w of this.getContainerWidgets(room, Container.Center)) {
          this.moveToContainer(room, w, Container.Right);
        }

        break;

      case Container.Top:
        // new "top" widget => the center widget moves into "right"
        if (this.hasMaximisedWidget(room)) {
          this.moveToContainer(room, this.getContainerWidgets(room, Container.Center)[0], Container.Right);
        }

        break;
    } // move widgets into requested container.


    this.updateUserLayout(room, {
      [widget.id]: {
        container: toContainer
      }
    });
  }

  hasMaximisedWidget(room) {
    return this.getContainerWidgets(room, Container.Center).length > 0;
  }

  hasPinnedWidgets(room) {
    return this.getContainerWidgets(room, Container.Top).length > 0;
  }

  canCopyLayoutToRoom(room) {
    if (!this.matrixClient) return false; // not ready yet

    return room.currentState.maySendStateEvent(WIDGET_LAYOUT_EVENT_TYPE, this.matrixClient.getUserId());
  }

  copyLayoutToRoom(room) {
    const allWidgets = this.getAllWidgets(room);
    const evContent = {
      widgets: {}
    };

    for (const [widget, container] of allWidgets) {
      evContent.widgets[widget.id] = {
        container
      };

      if (container === Container.Top) {
        var _this$byRoom$room$roo15, _this$byRoom$room$roo16, _this$byRoom$room$roo17, _this$byRoom$room$roo18;

        const containerWidgets = this.getContainerWidgets(room, container);
        const idx = containerWidgets.findIndex(w => w.id === widget.id);
        const widths = (_this$byRoom$room$roo15 = this.byRoom[room.roomId]) === null || _this$byRoom$room$roo15 === void 0 ? void 0 : (_this$byRoom$room$roo16 = _this$byRoom$room$roo15[container]) === null || _this$byRoom$room$roo16 === void 0 ? void 0 : _this$byRoom$room$roo16.distributions;
        const height = (_this$byRoom$room$roo17 = this.byRoom[room.roomId]) === null || _this$byRoom$room$roo17 === void 0 ? void 0 : (_this$byRoom$room$roo18 = _this$byRoom$room$roo17[container]) === null || _this$byRoom$room$roo18 === void 0 ? void 0 : _this$byRoom$room$roo18.height;
        evContent.widgets[widget.id] = _objectSpread(_objectSpread({}, evContent.widgets[widget.id]), {}, {
          height: height ? Math.round(height) : null,
          width: widths[idx] ? Math.round(widths[idx]) : null,
          index: idx
        });
      }
    }

    this.matrixClient.sendStateEvent(room.roomId, WIDGET_LAYOUT_EVENT_TYPE, evContent, "");
  }

  getAllWidgets(room) {
    const containers = this.byRoom[room.roomId];
    if (!containers) return [];
    const ret = [];

    for (const container of Object.keys(containers)) {
      const widgets = containers[container].ordered;

      for (const widget of widgets) {
        ret.push([widget, container]);
      }
    }

    return ret;
  }

  updateUserLayout(room, newLayout) {
    // Polyfill any missing widgets
    const allWidgets = this.getAllWidgets(room);

    for (const [widget, container] of allWidgets) {
      var _this$byRoom$room$roo19, _this$byRoom$room$roo20;

      const containerWidgets = this.getContainerWidgets(room, container);
      const idx = containerWidgets.findIndex(w => w.id === widget.id);
      const widths = (_this$byRoom$room$roo19 = this.byRoom[room.roomId]) === null || _this$byRoom$room$roo19 === void 0 ? void 0 : (_this$byRoom$room$roo20 = _this$byRoom$room$roo19[container]) === null || _this$byRoom$room$roo20 === void 0 ? void 0 : _this$byRoom$room$roo20.distributions;

      if (!newLayout[widget.id]) {
        var _this$byRoom$room$roo21, _this$byRoom$room$roo22;

        newLayout[widget.id] = {
          container: container,
          index: idx,
          height: (_this$byRoom$room$roo21 = this.byRoom[room.roomId]) === null || _this$byRoom$room$roo21 === void 0 ? void 0 : (_this$byRoom$room$roo22 = _this$byRoom$room$roo21[container]) === null || _this$byRoom$room$roo22 === void 0 ? void 0 : _this$byRoom$room$roo22.height,
          width: widths === null || widths === void 0 ? void 0 : widths[idx]
        };
      }
    }

    const layoutEv = room.currentState.getStateEvents(WIDGET_LAYOUT_EVENT_TYPE, "");

    _SettingsStore.default.setValue("Widgets.layout", room.roomId, _SettingLevel.SettingLevel.ROOM_ACCOUNT, {
      overrides: layoutEv === null || layoutEv === void 0 ? void 0 : layoutEv.getId(),
      widgets: newLayout
    }).catch(() => this.recalculateRoom(room));

    this.recalculateRoom(room); // call to try local echo on changes (the catch above undoes any errors)
  }

}

exports.WidgetLayoutStore = WidgetLayoutStore;
(0, _defineProperty2.default)(WidgetLayoutStore, "internalInstance", void 0);
window.mxWidgetLayoutStore = WidgetLayoutStore.instance;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,