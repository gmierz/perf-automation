"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StopGapWidget = exports.ElementWidget = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _matrixWidgetApi = require("matrix-widget-api");

var _StopGapWidgetDriver = require("./StopGapWidgetDriver");

var _events = require("events");

var _WidgetMessagingStore = require("./WidgetMessagingStore");

var _RoomViewStore = _interopRequireDefault(require("../RoomViewStore"));

var _MatrixClientPeg = require("../../MatrixClientPeg");

var _OwnProfileStore = require("../OwnProfileStore");

var _WidgetUtils = _interopRequireDefault(require("../../utils/WidgetUtils"));

var _IntegrationManagers = require("../../integrations/IntegrationManagers");

var _SettingsStore = _interopRequireDefault(require("../../settings/SettingsStore"));

var _WidgetType = require("../../widgets/WidgetType");

var _ActiveWidgetStore = _interopRequireDefault(require("../ActiveWidgetStore"));

var _objects = require("../../utils/objects");

var _dispatcher = _interopRequireDefault(require("../../dispatcher/dispatcher"));

var _actions = require("../../dispatcher/actions");

var _ElementWidgetActions = require("./ElementWidgetActions");

var _ModalWidgetStore = require("../ModalWidgetStore");

var _ThemeWatcher = _interopRequireDefault(require("../../settings/watchers/ThemeWatcher"));

var _theme = require("../../theme");

var _CountlyAnalytics = _interopRequireDefault(require("../../CountlyAnalytics"));

var _ElementWidgetCapabilities = require("./ElementWidgetCapabilities");

var _identifiers = require("../../identifiers");

var _languageHandler = require("../../languageHandler");

var _WidgetVariables = require("../../customisations/WidgetVariables");

var _arrays = require("../../utils/arrays");

var _logger = require("matrix-js-sdk/src/logger");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

// TODO: Don't use this because it's wrong
class ElementWidget extends _matrixWidgetApi.Widget {
  constructor(rawDefinition) {
    super(rawDefinition);
    this.rawDefinition = rawDefinition;
  }

  get templateUrl() {
    if (_WidgetType.WidgetType.JITSI.matches(this.type)) {
      var _super$rawData;

      return _WidgetUtils.default.getLocalJitsiWrapperUrl({
        forLocalRender: true,
        auth: (_super$rawData = super.rawData) === null || _super$rawData === void 0 ? void 0 : _super$rawData.auth // this.rawData can call templateUrl, do this to prevent looping

      });
    }

    return super.templateUrl;
  }

  get popoutTemplateUrl() {
    if (_WidgetType.WidgetType.JITSI.matches(this.type)) {
      var _super$rawData2;

      return _WidgetUtils.default.getLocalJitsiWrapperUrl({
        forLocalRender: false,
        // The only important difference between this and templateUrl()
        auth: (_super$rawData2 = super.rawData) === null || _super$rawData2 === void 0 ? void 0 : _super$rawData2.auth
      });
    }

    return this.templateUrl; // use this instead of super to ensure we get appropriate templating
  }

  get rawData() {
    let conferenceId = super.rawData['conferenceId'];

    if (conferenceId === undefined) {
      // we'll need to parse the conference ID out of the URL for v1 Jitsi widgets
      const parsedUrl = new URL(super.templateUrl); // use super to get the raw widget URL

      conferenceId = parsedUrl.searchParams.get("confId");
    }

    let domain = super.rawData['domain'];

    if (domain === undefined) {
      // v1 widgets default to jitsi.riot.im regardless of user settings
      domain = "jitsi.riot.im";
    }

    let theme = new _ThemeWatcher.default().getEffectiveTheme();

    if (theme.startsWith("custom-")) {
      const customTheme = (0, _theme.getCustomTheme)(theme.substr(7)); // Jitsi only understands light/dark

      theme = customTheme.is_dark ? "dark" : "light";
    } // only allow light/dark through, defaulting to dark as that was previously the only state
    // accounts for legacy-light/legacy-dark themes too


    if (theme.includes("light")) {
      theme = "light";
    } else {
      theme = "dark";
    }

    return _objectSpread(_objectSpread({}, super.rawData), {}, {
      theme,
      conferenceId,
      domain
    });
  }

  getCompleteUrl(params, asPopout = false) {
    return (0, _matrixWidgetApi.runTemplate)(asPopout ? this.popoutTemplateUrl : this.templateUrl, _objectSpread(_objectSpread({}, this.rawDefinition), {}, {
      data: this.rawData
    }), params);
  }

}

exports.ElementWidget = ElementWidget;

class StopGapWidget extends _events.EventEmitter {
  // room ID to event ID
  constructor(appTileProps) {
    var _appTileProps$room;

    super();
    this.appTileProps = appTileProps;
    (0, _defineProperty2.default)(this, "messaging", void 0);
    (0, _defineProperty2.default)(this, "mockWidget", void 0);
    (0, _defineProperty2.default)(this, "scalarToken", void 0);
    (0, _defineProperty2.default)(this, "roomId", void 0);
    (0, _defineProperty2.default)(this, "kind", void 0);
    (0, _defineProperty2.default)(this, "readUpToMap", {});
    (0, _defineProperty2.default)(this, "onOpenModal", async ev => {
      ev.preventDefault();

      if (_ModalWidgetStore.ModalWidgetStore.instance.canOpenModalWidget()) {
        _ModalWidgetStore.ModalWidgetStore.instance.openModalWidget(ev.detail.data, this.mockWidget);

        this.messaging.transport.reply(ev.detail, {}); // ack
      } else {
        this.messaging.transport.reply(ev.detail, {
          error: {
            message: "Unable to open modal at this time"
          }
        });
      }
    });
    (0, _defineProperty2.default)(this, "onEvent", ev => {
      _MatrixClientPeg.MatrixClientPeg.get().decryptEventIfNeeded(ev);

      if (ev.isBeingDecrypted() || ev.isDecryptionFailure()) return;
      this.feedEvent(ev);
    });
    (0, _defineProperty2.default)(this, "onEventDecrypted", ev => {
      if (ev.isDecryptionFailure()) return;
      this.feedEvent(ev);
    });
    let app = appTileProps.app; // Backwards compatibility: not all old widgets have a creatorUserId

    if (!app.creatorUserId) {
      app = (0, _objects.objectShallowClone)(app); // clone to prevent accidental mutation

      app.creatorUserId = _MatrixClientPeg.MatrixClientPeg.get().getUserId();
    }

    this.mockWidget = new ElementWidget(app);
    this.roomId = (_appTileProps$room = appTileProps.room) === null || _appTileProps$room === void 0 ? void 0 : _appTileProps$room.roomId;
    this.kind = appTileProps.userWidget ? _matrixWidgetApi.WidgetKind.Account : _matrixWidgetApi.WidgetKind.Room; // probably
  }

  get eventListenerRoomId() {
    // When widgets are listening to events, we need to make sure they're only
    // receiving events for the right room. In particular, room widgets get locked
    // to the room they were added in while account widgets listen to the currently
    // active room.
    if (this.roomId) return this.roomId;
    return _RoomViewStore.default.getRoomId();
  }

  get widgetApi() {
    return this.messaging;
  }
  /**
   * The URL to use in the iframe
   */


  get embedUrl() {
    return this.runUrlTemplate({
      asPopout: false
    });
  }
  /**
   * The URL to use in the popout
   */


  get popoutUrl() {
    return this.runUrlTemplate({
      asPopout: true
    });
  }

  runUrlTemplate(opts = {
    asPopout: false
  }) {
    var _WidgetVariableCustom;

    const fromCustomisation = (_WidgetVariables.WidgetVariableCustomisations === null || _WidgetVariables.WidgetVariableCustomisations === void 0 ? void 0 : (_WidgetVariableCustom = _WidgetVariables.WidgetVariableCustomisations.provideVariables) === null || _WidgetVariableCustom === void 0 ? void 0 : _WidgetVariableCustom.call(_WidgetVariables.WidgetVariableCustomisations)) ?? {};
    const defaults = {
      widgetRoomId: this.roomId,
      currentUserId: _MatrixClientPeg.MatrixClientPeg.get().getUserId(),
      userDisplayName: _OwnProfileStore.OwnProfileStore.instance.displayName,
      userHttpAvatarUrl: _OwnProfileStore.OwnProfileStore.instance.getHttpAvatarUrl(),
      clientId: _identifiers.ELEMENT_CLIENT_ID,
      clientTheme: _SettingsStore.default.getValue("theme"),
      clientLanguage: (0, _languageHandler.getUserLanguage)()
    };
    const templated = this.mockWidget.getCompleteUrl(Object.assign(defaults, fromCustomisation), opts === null || opts === void 0 ? void 0 : opts.asPopout);
    const parsed = new URL(templated); // Add in some legacy support sprinkles (for non-popout widgets)
    // TODO: Replace these with proper widget params
    // See https://github.com/matrix-org/matrix-doc/pull/1958/files#r405714833

    if (!(opts !== null && opts !== void 0 && opts.asPopout)) {
      parsed.searchParams.set('widgetId', this.mockWidget.id);
      parsed.searchParams.set('parentUrl', window.location.href.split('#', 2)[0]); // Give the widget a scalar token if we're supposed to (more legacy)
      // TODO: Stop doing this

      if (this.scalarToken) {
        parsed.searchParams.set('scalar_token', this.scalarToken);
      }
    } // Replace the encoded dollar signs back to dollar signs. They have no special meaning
    // in HTTP, but URL parsers encode them anyways.


    return parsed.toString().replace(/%24/g, '$');
  }

  get isManagedByManager() {
    return !!this.scalarToken;
  }

  get started() {
    return !!this.messaging;
  }

  get widgetId() {
    return this.messaging.widget.id;
  }

  start(iframe) {
    if (this.started) return;
    const allowedCapabilities = this.appTileProps.whitelistCapabilities || [];
    const driver = new _StopGapWidgetDriver.StopGapWidgetDriver(allowedCapabilities, this.mockWidget, this.kind, this.roomId);
    this.messaging = new _matrixWidgetApi.ClientWidgetApi(this.mockWidget, iframe, driver);
    this.messaging.on("preparing", () => this.emit("preparing"));
    this.messaging.on("ready", () => this.emit("ready"));
    this.messaging.on("capabilitiesNotified", () => this.emit("capabilitiesNotified"));
    this.messaging.on(`action:${_matrixWidgetApi.WidgetApiFromWidgetAction.OpenModalWidget}`, this.onOpenModal);

    _WidgetMessagingStore.WidgetMessagingStore.instance.storeMessaging(this.mockWidget, this.messaging);

    if (!this.appTileProps.userWidget && this.appTileProps.room) {
      _ActiveWidgetStore.default.instance.setRoomId(this.mockWidget.id, this.appTileProps.room.roomId);
    } // Always attach a handler for ViewRoom, but permission check it internally


    this.messaging.on(`action:${_ElementWidgetActions.ElementWidgetActions.ViewRoom}`, ev => {
      ev.preventDefault(); // stop the widget API from auto-rejecting this
      // Check up front if this is even a valid request

      const targetRoomId = (ev.detail.data || {}).room_id;

      if (!targetRoomId) {
        return this.messaging.transport.reply(ev.detail, {
          error: {
            message: "Room ID not supplied."
          }
        });
      } // Check the widget's permission


      if (!this.messaging.hasCapability(_ElementWidgetCapabilities.ElementWidgetCapabilities.CanChangeViewedRoom)) {
        return this.messaging.transport.reply(ev.detail, {
          error: {
            message: "This widget does not have permission for this action (denied)."
          }
        });
      } // at this point we can change rooms, so do that


      _dispatcher.default.dispatch({
        action: _actions.Action.ViewRoom,
        room_id: targetRoomId
      }); // acknowledge so the widget doesn't freak out


      this.messaging.transport.reply(ev.detail, {});
    }); // Populate the map of "read up to" events for this widget with the current event in every room.
    // This is a bit inefficient, but should be okay. We do this for all rooms in case the widget
    // requests timeline capabilities in other rooms down the road. It's just easier to manage here.

    for (const room of _MatrixClientPeg.MatrixClientPeg.get().getRooms()) {
      var _room$getLiveTimeline;

      // Timelines are most recent last
      const events = ((_room$getLiveTimeline = room.getLiveTimeline()) === null || _room$getLiveTimeline === void 0 ? void 0 : _room$getLiveTimeline.getEvents()) || [];
      const roomEvent = events[events.length - 1];
      if (!roomEvent) continue; // force later code to think the room is fresh

      this.readUpToMap[room.roomId] = roomEvent.getId();
    } // Attach listeners for feeding events - the underlying widget classes handle permissions for us


    _MatrixClientPeg.MatrixClientPeg.get().on('event', this.onEvent);

    _MatrixClientPeg.MatrixClientPeg.get().on('Event.decrypted', this.onEventDecrypted);

    this.messaging.on(`action:${_matrixWidgetApi.WidgetApiFromWidgetAction.UpdateAlwaysOnScreen}`, ev => {
      if (this.messaging.hasCapability(_matrixWidgetApi.MatrixCapabilities.AlwaysOnScreen)) {
        if (_WidgetType.WidgetType.JITSI.matches(this.mockWidget.type)) {
          _CountlyAnalytics.default.instance.trackJoinCall(this.appTileProps.room.roomId, true, true);
        }

        _ActiveWidgetStore.default.instance.setWidgetPersistence(this.mockWidget.id, ev.detail.data.value);

        ev.preventDefault();
        this.messaging.transport.reply(ev.detail, {}); // ack
      }
    }); // TODO: Replace this event listener with appropriate driver functionality once the API
    // establishes a sane way to send events back and forth.

    this.messaging.on(`action:${_matrixWidgetApi.WidgetApiFromWidgetAction.SendSticker}`, ev => {
      if (this.messaging.hasCapability(_matrixWidgetApi.MatrixCapabilities.StickerSending)) {
        // Acknowledge first
        ev.preventDefault();
        this.messaging.transport.reply(ev.detail, {}); // Send the sticker

        _dispatcher.default.dispatch({
          action: 'm.sticker',
          data: ev.detail.data,
          widgetId: this.mockWidget.id
        });
      }
    });

    if (_WidgetType.WidgetType.STICKERPICKER.matches(this.mockWidget.type)) {
      this.messaging.on(`action:${_ElementWidgetActions.ElementWidgetActions.OpenIntegrationManager}`, ev => {
        // Acknowledge first
        ev.preventDefault();
        this.messaging.transport.reply(ev.detail, {}); // First close the stickerpicker

        _dispatcher.default.dispatch({
          action: "stickerpicker_close"
        }); // Now open the integration manager
        // TODO: Spec this interaction.


        const data = ev.detail.data;
        const integType = data === null || data === void 0 ? void 0 : data.integType;
        const integId = data === null || data === void 0 ? void 0 : data.integId; // TODO: Open the right integration manager for the widget

        if (_SettingsStore.default.getValue("feature_many_integration_managers")) {
          _IntegrationManagers.IntegrationManagers.sharedInstance().openAll(_MatrixClientPeg.MatrixClientPeg.get().getRoom(_RoomViewStore.default.getRoomId()), `type_${integType}`, integId);
        } else {
          _IntegrationManagers.IntegrationManagers.sharedInstance().getPrimaryManager().open(_MatrixClientPeg.MatrixClientPeg.get().getRoom(_RoomViewStore.default.getRoomId()), `type_${integType}`, integId);
        }
      });
    }
  }

  async prepare() {
    var _WidgetVariableCustom2;

    // Ensure the variables are ready for us to be rendered before continuing
    await ((_WidgetVariables.WidgetVariableCustomisations === null || _WidgetVariables.WidgetVariableCustomisations === void 0 ? void 0 : (_WidgetVariableCustom2 = _WidgetVariables.WidgetVariableCustomisations.isReady) === null || _WidgetVariableCustom2 === void 0 ? void 0 : _WidgetVariableCustom2.call(_WidgetVariables.WidgetVariableCustomisations)) ?? Promise.resolve());
    if (this.scalarToken) return;

    const existingMessaging = _WidgetMessagingStore.WidgetMessagingStore.instance.getMessaging(this.mockWidget);

    if (existingMessaging) this.messaging = existingMessaging;

    try {
      if (_WidgetUtils.default.isScalarUrl(this.mockWidget.templateUrl)) {
        const managers = _IntegrationManagers.IntegrationManagers.sharedInstance();

        if (managers.hasManager()) {
          // TODO: Pick the right manager for the widget
          const defaultManager = managers.getPrimaryManager();

          if (_WidgetUtils.default.isScalarUrl(defaultManager.apiUrl)) {
            const scalar = defaultManager.getScalarClient();
            this.scalarToken = await scalar.getScalarToken();
          }
        }
      }
    } catch (e) {
      // All errors are non-fatal
      _logger.logger.error("Error preparing widget communications: ", e);
    }
  }

  stop(opts = {
    forceDestroy: false
  }) {
    if (!(opts !== null && opts !== void 0 && opts.forceDestroy) && _ActiveWidgetStore.default.instance.getPersistentWidgetId() === this.mockWidget.id) {
      _logger.logger.log("Skipping destroy - persistent widget");

      return;
    }

    if (!this.started) return;

    _WidgetMessagingStore.WidgetMessagingStore.instance.stopMessaging(this.mockWidget);

    _ActiveWidgetStore.default.instance.delRoomId(this.mockWidget.id);

    if (_MatrixClientPeg.MatrixClientPeg.get()) {
      _MatrixClientPeg.MatrixClientPeg.get().off('event', this.onEvent);

      _MatrixClientPeg.MatrixClientPeg.get().off('Event.decrypted', this.onEventDecrypted);
    }
  }

  feedEvent(ev) {
    if (!this.messaging) return; // Check to see if this event would be before or after our "read up to" marker. If it's
    // before, or we can't decide, then we assume the widget will have already seen the event.
    // If the event is after, or we don't have a marker for the room, then we'll send it through.
    //
    // This approach of "read up to" prevents widgets receiving decryption spam from startup or
    // receiving out-of-order events from backfill and such.

    const upToEventId = this.readUpToMap[ev.getRoomId()];

    if (upToEventId) {
      // Small optimization for exact match (prevent search)
      if (upToEventId === ev.getId()) {
        return;
      }

      let isBeforeMark = true; // Timelines are most recent last, so reverse the order and limit ourselves to 100 events
      // to avoid overusing the CPU.

      const timeline = _MatrixClientPeg.MatrixClientPeg.get().getRoom(ev.getRoomId()).getLiveTimeline();

      const events = (0, _arrays.arrayFastClone)(timeline.getEvents()).reverse().slice(0, 100);

      for (const timelineEvent of events) {
        if (timelineEvent.getId() === upToEventId) {
          break;
        } else if (timelineEvent.getId() === ev.getId()) {
          isBeforeMark = false;
          break;
        }
      }

      if (isBeforeMark) {
        // Ignore the event: it is before our interest.
        return;
      }
    }

    this.readUpToMap[ev.getRoomId()] = ev.getId();
    const raw = ev.getEffectiveEvent();
    this.messaging.feedEvent(raw, this.eventListenerRoomId).catch(e => {
      _logger.logger.error("Error sending event to widget: ", e);
    });
  }

}

exports.StopGapWidget = StopGapWidget;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,