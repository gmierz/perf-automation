"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StopGapWidgetDriver = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _matrixWidgetApi = require("matrix-widget-api");

var _iterables = require("../../utils/iterables");

var _MatrixClientPeg = require("../../MatrixClientPeg");

var _ActiveRoomObserver = _interopRequireDefault(require("../../ActiveRoomObserver"));

var _Modal = _interopRequireDefault(require("../../Modal"));

var _WidgetOpenIDPermissionsDialog = _interopRequireDefault(require("../../components/views/dialogs/WidgetOpenIDPermissionsDialog"));

var _WidgetCapabilitiesPromptDialog = _interopRequireDefault(require("../../components/views/dialogs/WidgetCapabilitiesPromptDialog"));

var _WidgetPermissions = require("../../customisations/WidgetPermissions");

var _WidgetPermissionStore = require("./WidgetPermissionStore");

var _WidgetType = require("../../widgets/WidgetType");

var _event = require("matrix-js-sdk/src/@types/event");

var _effects = require("../../effects");

var _utils = require("../../effects/utils");

var _dispatcher = _interopRequireDefault(require("../../dispatcher/dispatcher"));

var _Permalinks = require("../../utils/permalinks/Permalinks");

var _logger = require("matrix-js-sdk/src/logger");

var _SettingsStore = _interopRequireDefault(require("../../settings/SettingsStore"));

/*
 * Copyright 2020 - 2021 The Matrix.org Foundation C.I.C.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// TODO: Purge this from the universe
function getRememberedCapabilitiesForWidget(widget) {
  return JSON.parse(localStorage.getItem(`widget_${widget.id}_approved_caps`) || "[]");
}

function setRememberedCapabilitiesForWidget(widget, caps) {
  localStorage.setItem(`widget_${widget.id}_approved_caps`, JSON.stringify(caps));
}

class StopGapWidgetDriver extends _matrixWidgetApi.WidgetDriver {
  // TODO: Refactor widgetKind into the Widget class
  constructor(allowedCapabilities, forWidget, forWidgetKind, inRoomId) {
    super(); // Always allow screenshots to be taken because it's a client-induced flow. The widget can't
    // spew screenshots at us and can't request screenshots of us, so it's up to us to provide the
    // button if the widget says it supports screenshots.

    this.forWidget = forWidget;
    this.forWidgetKind = forWidgetKind;
    this.inRoomId = inRoomId;
    (0, _defineProperty2.default)(this, "allowedCapabilities", void 0);
    this.allowedCapabilities = new Set([...allowedCapabilities, _matrixWidgetApi.MatrixCapabilities.Screenshots, _matrixWidgetApi.MatrixCapabilities.RequiresClient]); // Grant the permissions that are specific to given widget types

    if (_WidgetType.WidgetType.JITSI.matches(this.forWidget.type) && forWidgetKind === _matrixWidgetApi.WidgetKind.Room) {
      this.allowedCapabilities.add(_matrixWidgetApi.MatrixCapabilities.AlwaysOnScreen);
    } else if (_WidgetType.WidgetType.STICKERPICKER.matches(this.forWidget.type) && forWidgetKind === _matrixWidgetApi.WidgetKind.Account) {
      const stickerSendingCap = _matrixWidgetApi.WidgetEventCapability.forRoomEvent(_matrixWidgetApi.EventDirection.Send, _event.EventType.Sticker).raw;

      this.allowedCapabilities.add(_matrixWidgetApi.MatrixCapabilities.StickerSending); // legacy as far as MSC2762 is concerned

      this.allowedCapabilities.add(stickerSendingCap); // Auto-approve the legacy visibility capability. We send it regardless of capability.
      // Widgets don't technically need to request this capability, but Scalar still does.

      this.allowedCapabilities.add("visibility");
    }
  }

  async validateCapabilities(requested) {
    // Check to see if any capabilities aren't automatically accepted (such as sticker pickers
    // allowing stickers to be sent). If there are excess capabilities to be approved, the user
    // will be prompted to accept them.
    const diff = (0, _iterables.iterableDiff)(requested, this.allowedCapabilities);
    const missing = new Set(diff.removed); // "removed" is "in A (requested) but not in B (allowed)"

    const allowedSoFar = new Set(this.allowedCapabilities);
    getRememberedCapabilitiesForWidget(this.forWidget).forEach(cap => {
      allowedSoFar.add(cap);
      missing.delete(cap);
    });

    if (_WidgetPermissions.WidgetPermissionCustomisations.preapproveCapabilities) {
      const approved = await _WidgetPermissions.WidgetPermissionCustomisations.preapproveCapabilities(this.forWidget, requested);

      if (approved) {
        approved.forEach(cap => {
          allowedSoFar.add(cap);
          missing.delete(cap);
        });
      }
    } // TODO: Do something when the widget requests new capabilities not yet asked for


    let rememberApproved = false;

    if (missing.size > 0) {
      try {
        const [result] = await _Modal.default.createTrackedDialog('Approve Widget Caps', '', _WidgetCapabilitiesPromptDialog.default, {
          requestedCapabilities: missing,
          widget: this.forWidget,
          widgetKind: this.forWidgetKind
        }).finished;
        (result.approved || []).forEach(cap => allowedSoFar.add(cap));
        rememberApproved = result.remember;
      } catch (e) {
        _logger.logger.error("Non-fatal error getting capabilities: ", e);
      }
    }

    const allAllowed = new Set((0, _iterables.iterableUnion)(allowedSoFar, requested));

    if (rememberApproved) {
      setRememberedCapabilitiesForWidget(this.forWidget, Array.from(allAllowed));
    }

    return allAllowed;
  }

  async sendEvent(eventType, content, stateKey = null, targetRoomId = null) {
    const client = _MatrixClientPeg.MatrixClientPeg.get();

    const roomId = targetRoomId || _ActiveRoomObserver.default.activeRoomId;
    if (!client || !roomId) throw new Error("Not in a room or not attached to a client");
    let r = null; // eslint-disable-line camelcase

    if (stateKey !== null) {
      // state event
      r = await client.sendStateEvent(roomId, eventType, content, stateKey);
    } else if (eventType === _event.EventType.RoomRedaction) {
      // special case: extract the `redacts` property and call redact
      r = await client.redactEvent(roomId, content['redacts']);
    } else {
      // message event
      r = await client.sendEvent(roomId, eventType, content);

      if (eventType === _event.EventType.RoomMessage) {
        _effects.CHAT_EFFECTS.forEach(effect => {
          if ((0, _utils.containsEmoji)(content, effect.emojis)) {
            // For initial threads launch, chat effects are disabled
            // see #19731
            const isNotThread = content["m.relates_to"].rel_type !== _event.RelationType.Thread;

            if (!_SettingsStore.default.getValue("feature_thread") || isNotThread) {
              _dispatcher.default.dispatch({
                action: `effects.${effect.command}`
              });
            }
          }
        });
      }
    }

    return {
      roomId,
      eventId: r.event_id
    };
  }

  pickRooms(roomIds = null) {
    const client = _MatrixClientPeg.MatrixClientPeg.get();

    if (!client) throw new Error("Not attached to a client");
    const targetRooms = roomIds ? roomIds.includes(_matrixWidgetApi.Symbols.AnyRoom) ? client.getVisibleRooms() : roomIds.map(r => client.getRoom(r)) : [client.getRoom(_ActiveRoomObserver.default.activeRoomId)];
    return targetRooms.filter(r => !!r);
  }

  async readRoomEvents(eventType, msgtype, limitPerRoom, roomIds = null) {
    limitPerRoom = limitPerRoom > 0 ? Math.min(limitPerRoom, Number.MAX_SAFE_INTEGER) : Number.MAX_SAFE_INTEGER; // relatively arbitrary

    const rooms = this.pickRooms(roomIds);
    const allResults = [];

    for (const room of rooms) {
      const results = [];
      const events = room.getLiveTimeline().getEvents(); // timelines are most recent last

      for (let i = events.length - 1; i > 0; i--) {
        if (results.length >= limitPerRoom) break;
        const ev = events[i];
        if (ev.getType() !== eventType || ev.isState()) continue;
        if (eventType === _event.EventType.RoomMessage && msgtype && msgtype !== ev.getContent()['msgtype']) continue;
        results.push(ev);
      }

      results.forEach(e => allResults.push(e.getEffectiveEvent()));
    }

    return allResults;
  }

  async readStateEvents(eventType, stateKey, limitPerRoom, roomIds = null) {
    limitPerRoom = limitPerRoom > 0 ? Math.min(limitPerRoom, Number.MAX_SAFE_INTEGER) : Number.MAX_SAFE_INTEGER; // relatively arbitrary

    const rooms = this.pickRooms(roomIds);
    const allResults = [];

    for (const room of rooms) {
      const results = [];
      const state = room.currentState.events.get(eventType);

      if (state) {
        if (stateKey === "" || !!stateKey) {
          const forKey = state.get(stateKey);
          if (forKey) results.push(forKey);
        } else {
          results.push(...Array.from(state.values()));
        }
      }

      results.slice(0, limitPerRoom).forEach(e => allResults.push(e.getEffectiveEvent()));
    }

    return allResults;
  }

  async askOpenID(observer) {
    const oidcState = _WidgetPermissionStore.WidgetPermissionStore.instance.getOIDCState(this.forWidget, this.forWidgetKind, this.inRoomId);

    const getToken = () => {
      return _MatrixClientPeg.MatrixClientPeg.get().getOpenIdToken();
    };

    if (oidcState === _WidgetPermissionStore.OIDCState.Denied) {
      return observer.update({
        state: _matrixWidgetApi.OpenIDRequestState.Blocked
      });
    }

    if (oidcState === _WidgetPermissionStore.OIDCState.Allowed) {
      return observer.update({
        state: _matrixWidgetApi.OpenIDRequestState.Allowed,
        token: await getToken()
      });
    }

    observer.update({
      state: _matrixWidgetApi.OpenIDRequestState.PendingUserConfirmation
    });

    _Modal.default.createTrackedDialog("OpenID widget permissions", '', _WidgetOpenIDPermissionsDialog.default, {
      widget: this.forWidget,
      widgetKind: this.forWidgetKind,
      inRoomId: this.inRoomId,
      onFinished: async confirm => {
        if (!confirm) {
          return observer.update({
            state: _matrixWidgetApi.OpenIDRequestState.Blocked
          });
        }

        return observer.update({
          state: _matrixWidgetApi.OpenIDRequestState.Allowed,
          token: await getToken()
        });
      }
    });
  }

  async navigate(uri) {
    const localUri = (0, _Permalinks.tryTransformPermalinkToLocalHref)(uri);

    if (!localUri || localUri === uri) {
      // parse failure can lead to an unmodified URL
      throw new Error("Failed to transform URI");
    }

    window.location.hash = localUri; // it'll just be a fragment
  }

}

exports.StopGapWidgetDriver = StopGapWidgetDriver;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zdG9yZXMvd2lkZ2V0cy9TdG9wR2FwV2lkZ2V0RHJpdmVyLnRzIl0sIm5hbWVzIjpbImdldFJlbWVtYmVyZWRDYXBhYmlsaXRpZXNGb3JXaWRnZXQiLCJ3aWRnZXQiLCJKU09OIiwicGFyc2UiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwiaWQiLCJzZXRSZW1lbWJlcmVkQ2FwYWJpbGl0aWVzRm9yV2lkZ2V0IiwiY2FwcyIsInNldEl0ZW0iLCJzdHJpbmdpZnkiLCJTdG9wR2FwV2lkZ2V0RHJpdmVyIiwiV2lkZ2V0RHJpdmVyIiwiY29uc3RydWN0b3IiLCJhbGxvd2VkQ2FwYWJpbGl0aWVzIiwiZm9yV2lkZ2V0IiwiZm9yV2lkZ2V0S2luZCIsImluUm9vbUlkIiwiU2V0IiwiTWF0cml4Q2FwYWJpbGl0aWVzIiwiU2NyZWVuc2hvdHMiLCJSZXF1aXJlc0NsaWVudCIsIldpZGdldFR5cGUiLCJKSVRTSSIsIm1hdGNoZXMiLCJ0eXBlIiwiV2lkZ2V0S2luZCIsIlJvb20iLCJhZGQiLCJBbHdheXNPblNjcmVlbiIsIlNUSUNLRVJQSUNLRVIiLCJBY2NvdW50Iiwic3RpY2tlclNlbmRpbmdDYXAiLCJXaWRnZXRFdmVudENhcGFiaWxpdHkiLCJmb3JSb29tRXZlbnQiLCJFdmVudERpcmVjdGlvbiIsIlNlbmQiLCJFdmVudFR5cGUiLCJTdGlja2VyIiwicmF3IiwiU3RpY2tlclNlbmRpbmciLCJ2YWxpZGF0ZUNhcGFiaWxpdGllcyIsInJlcXVlc3RlZCIsImRpZmYiLCJtaXNzaW5nIiwicmVtb3ZlZCIsImFsbG93ZWRTb0ZhciIsImZvckVhY2giLCJjYXAiLCJkZWxldGUiLCJXaWRnZXRQZXJtaXNzaW9uQ3VzdG9taXNhdGlvbnMiLCJwcmVhcHByb3ZlQ2FwYWJpbGl0aWVzIiwiYXBwcm92ZWQiLCJyZW1lbWJlckFwcHJvdmVkIiwic2l6ZSIsInJlc3VsdCIsIk1vZGFsIiwiY3JlYXRlVHJhY2tlZERpYWxvZyIsIldpZGdldENhcGFiaWxpdGllc1Byb21wdERpYWxvZyIsInJlcXVlc3RlZENhcGFiaWxpdGllcyIsIndpZGdldEtpbmQiLCJmaW5pc2hlZCIsInJlbWVtYmVyIiwiZSIsImxvZ2dlciIsImVycm9yIiwiYWxsQWxsb3dlZCIsIkFycmF5IiwiZnJvbSIsInNlbmRFdmVudCIsImV2ZW50VHlwZSIsImNvbnRlbnQiLCJzdGF0ZUtleSIsInRhcmdldFJvb21JZCIsImNsaWVudCIsIk1hdHJpeENsaWVudFBlZyIsImdldCIsInJvb21JZCIsIkFjdGl2ZVJvb21PYnNlcnZlciIsImFjdGl2ZVJvb21JZCIsIkVycm9yIiwiciIsInNlbmRTdGF0ZUV2ZW50IiwiUm9vbVJlZGFjdGlvbiIsInJlZGFjdEV2ZW50IiwiUm9vbU1lc3NhZ2UiLCJDSEFUX0VGRkVDVFMiLCJlZmZlY3QiLCJlbW9qaXMiLCJpc05vdFRocmVhZCIsInJlbF90eXBlIiwiUmVsYXRpb25UeXBlIiwiVGhyZWFkIiwiU2V0dGluZ3NTdG9yZSIsImdldFZhbHVlIiwiZGlzIiwiZGlzcGF0Y2giLCJhY3Rpb24iLCJjb21tYW5kIiwiZXZlbnRJZCIsImV2ZW50X2lkIiwicGlja1Jvb21zIiwicm9vbUlkcyIsInRhcmdldFJvb21zIiwiaW5jbHVkZXMiLCJTeW1ib2xzIiwiQW55Um9vbSIsImdldFZpc2libGVSb29tcyIsIm1hcCIsImdldFJvb20iLCJmaWx0ZXIiLCJyZWFkUm9vbUV2ZW50cyIsIm1zZ3R5cGUiLCJsaW1pdFBlclJvb20iLCJNYXRoIiwibWluIiwiTnVtYmVyIiwiTUFYX1NBRkVfSU5URUdFUiIsInJvb21zIiwiYWxsUmVzdWx0cyIsInJvb20iLCJyZXN1bHRzIiwiZXZlbnRzIiwiZ2V0TGl2ZVRpbWVsaW5lIiwiZ2V0RXZlbnRzIiwiaSIsImxlbmd0aCIsImV2IiwiZ2V0VHlwZSIsImlzU3RhdGUiLCJnZXRDb250ZW50IiwicHVzaCIsImdldEVmZmVjdGl2ZUV2ZW50IiwicmVhZFN0YXRlRXZlbnRzIiwic3RhdGUiLCJjdXJyZW50U3RhdGUiLCJmb3JLZXkiLCJ2YWx1ZXMiLCJzbGljZSIsImFza09wZW5JRCIsIm9ic2VydmVyIiwib2lkY1N0YXRlIiwiV2lkZ2V0UGVybWlzc2lvblN0b3JlIiwiaW5zdGFuY2UiLCJnZXRPSURDU3RhdGUiLCJnZXRUb2tlbiIsImdldE9wZW5JZFRva2VuIiwiT0lEQ1N0YXRlIiwiRGVuaWVkIiwidXBkYXRlIiwiT3BlbklEUmVxdWVzdFN0YXRlIiwiQmxvY2tlZCIsIkFsbG93ZWQiLCJ0b2tlbiIsIlBlbmRpbmdVc2VyQ29uZmlybWF0aW9uIiwiV2lkZ2V0T3BlbklEUGVybWlzc2lvbnNEaWFsb2ciLCJvbkZpbmlzaGVkIiwiY29uZmlybSIsIm5hdmlnYXRlIiwidXJpIiwibG9jYWxVcmkiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsImhhc2giXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBZ0JBOztBQWVBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUlBOztBQUNBOztBQWpEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFxQ0E7QUFFQSxTQUFTQSxrQ0FBVCxDQUE0Q0MsTUFBNUMsRUFBMEU7QUFDdEUsU0FBT0MsSUFBSSxDQUFDQyxLQUFMLENBQVdDLFlBQVksQ0FBQ0MsT0FBYixDQUFzQixVQUFTSixNQUFNLENBQUNLLEVBQUcsZ0JBQXpDLEtBQTZELElBQXhFLENBQVA7QUFDSDs7QUFFRCxTQUFTQyxrQ0FBVCxDQUE0Q04sTUFBNUMsRUFBNERPLElBQTVELEVBQWdGO0FBQzVFSixFQUFBQSxZQUFZLENBQUNLLE9BQWIsQ0FBc0IsVUFBU1IsTUFBTSxDQUFDSyxFQUFHLGdCQUF6QyxFQUEwREosSUFBSSxDQUFDUSxTQUFMLENBQWVGLElBQWYsQ0FBMUQ7QUFDSDs7QUFFTSxNQUFNRyxtQkFBTixTQUFrQ0MsNkJBQWxDLENBQStDO0FBR2xEO0FBQ0FDLEVBQUFBLFdBQVcsQ0FDUEMsbUJBRE8sRUFFQ0MsU0FGRCxFQUdDQyxhQUhELEVBSUNDLFFBSkQsRUFLVDtBQUNFLFlBREYsQ0FHRTtBQUNBO0FBQ0E7O0FBTEYsU0FIVUYsU0FHVixHQUhVQSxTQUdWO0FBQUEsU0FGVUMsYUFFVixHQUZVQSxhQUVWO0FBQUEsU0FEVUMsUUFDVixHQURVQSxRQUNWO0FBQUE7QUFNRSxTQUFLSCxtQkFBTCxHQUEyQixJQUFJSSxHQUFKLENBQVEsQ0FBQyxHQUFHSixtQkFBSixFQUMvQkssb0NBQW1CQyxXQURZLEVBRS9CRCxvQ0FBbUJFLGNBRlksQ0FBUixDQUEzQixDQU5GLENBVUU7O0FBQ0EsUUFBSUMsdUJBQVdDLEtBQVgsQ0FBaUJDLE9BQWpCLENBQXlCLEtBQUtULFNBQUwsQ0FBZVUsSUFBeEMsS0FBaURULGFBQWEsS0FBS1UsNEJBQVdDLElBQWxGLEVBQXdGO0FBQ3BGLFdBQUtiLG1CQUFMLENBQXlCYyxHQUF6QixDQUE2QlQsb0NBQW1CVSxjQUFoRDtBQUNILEtBRkQsTUFFTyxJQUFJUCx1QkFBV1EsYUFBWCxDQUF5Qk4sT0FBekIsQ0FBaUMsS0FBS1QsU0FBTCxDQUFlVSxJQUFoRCxLQUF5RFQsYUFBYSxLQUFLVSw0QkFBV0ssT0FBMUYsRUFBbUc7QUFDdEcsWUFBTUMsaUJBQWlCLEdBQUdDLHVDQUFzQkMsWUFBdEIsQ0FBbUNDLGdDQUFlQyxJQUFsRCxFQUF3REMsaUJBQVVDLE9BQWxFLEVBQTJFQyxHQUFyRzs7QUFDQSxXQUFLekIsbUJBQUwsQ0FBeUJjLEdBQXpCLENBQTZCVCxvQ0FBbUJxQixjQUFoRCxFQUZzRyxDQUVyQzs7QUFDakUsV0FBSzFCLG1CQUFMLENBQXlCYyxHQUF6QixDQUE2QkksaUJBQTdCLEVBSHNHLENBS3RHO0FBQ0E7O0FBQ0EsV0FBS2xCLG1CQUFMLENBQXlCYyxHQUF6QixDQUE2QixZQUE3QjtBQUNIO0FBQ0o7O0FBRWdDLFFBQXBCYSxvQkFBb0IsQ0FBQ0MsU0FBRCxFQUF1RDtBQUNwRjtBQUNBO0FBQ0E7QUFDQSxVQUFNQyxJQUFJLEdBQUcsNkJBQWFELFNBQWIsRUFBd0IsS0FBSzVCLG1CQUE3QixDQUFiO0FBQ0EsVUFBTThCLE9BQU8sR0FBRyxJQUFJMUIsR0FBSixDQUFReUIsSUFBSSxDQUFDRSxPQUFiLENBQWhCLENBTG9GLENBSzdDOztBQUN2QyxVQUFNQyxZQUFZLEdBQUcsSUFBSTVCLEdBQUosQ0FBUSxLQUFLSixtQkFBYixDQUFyQjtBQUNBZCxJQUFBQSxrQ0FBa0MsQ0FBQyxLQUFLZSxTQUFOLENBQWxDLENBQW1EZ0MsT0FBbkQsQ0FBMkRDLEdBQUcsSUFBSTtBQUM5REYsTUFBQUEsWUFBWSxDQUFDbEIsR0FBYixDQUFpQm9CLEdBQWpCO0FBQ0FKLE1BQUFBLE9BQU8sQ0FBQ0ssTUFBUixDQUFlRCxHQUFmO0FBQ0gsS0FIRDs7QUFJQSxRQUFJRSxrREFBK0JDLHNCQUFuQyxFQUEyRDtBQUN2RCxZQUFNQyxRQUFRLEdBQUcsTUFBTUYsa0RBQStCQyxzQkFBL0IsQ0FBc0QsS0FBS3BDLFNBQTNELEVBQXNFMkIsU0FBdEUsQ0FBdkI7O0FBQ0EsVUFBSVUsUUFBSixFQUFjO0FBQ1ZBLFFBQUFBLFFBQVEsQ0FBQ0wsT0FBVCxDQUFpQkMsR0FBRyxJQUFJO0FBQ3BCRixVQUFBQSxZQUFZLENBQUNsQixHQUFiLENBQWlCb0IsR0FBakI7QUFDQUosVUFBQUEsT0FBTyxDQUFDSyxNQUFSLENBQWVELEdBQWY7QUFDSCxTQUhEO0FBSUg7QUFDSixLQW5CbUYsQ0FvQnBGOzs7QUFDQSxRQUFJSyxnQkFBZ0IsR0FBRyxLQUF2Qjs7QUFDQSxRQUFJVCxPQUFPLENBQUNVLElBQVIsR0FBZSxDQUFuQixFQUFzQjtBQUNsQixVQUFJO0FBQ0EsY0FBTSxDQUFDQyxNQUFELElBQVcsTUFBTUMsZUFBTUMsbUJBQU4sQ0FDbkIscUJBRG1CLEVBQ0ksRUFESixFQUVuQkMsdUNBRm1CLEVBR25CO0FBQ0lDLFVBQUFBLHFCQUFxQixFQUFFZixPQUQzQjtBQUVJM0MsVUFBQUEsTUFBTSxFQUFFLEtBQUtjLFNBRmpCO0FBR0k2QyxVQUFBQSxVQUFVLEVBQUUsS0FBSzVDO0FBSHJCLFNBSG1CLEVBT2hCNkMsUUFQUDtBQVFBLFNBQUNOLE1BQU0sQ0FBQ0gsUUFBUCxJQUFtQixFQUFwQixFQUF3QkwsT0FBeEIsQ0FBZ0NDLEdBQUcsSUFBSUYsWUFBWSxDQUFDbEIsR0FBYixDQUFpQm9CLEdBQWpCLENBQXZDO0FBQ0FLLFFBQUFBLGdCQUFnQixHQUFHRSxNQUFNLENBQUNPLFFBQTFCO0FBQ0gsT0FYRCxDQVdFLE9BQU9DLENBQVAsRUFBVTtBQUNSQyx1QkFBT0MsS0FBUCxDQUFhLHdDQUFiLEVBQXVERixDQUF2RDtBQUNIO0FBQ0o7O0FBRUQsVUFBTUcsVUFBVSxHQUFHLElBQUloRCxHQUFKLENBQVEsOEJBQWM0QixZQUFkLEVBQTRCSixTQUE1QixDQUFSLENBQW5COztBQUVBLFFBQUlXLGdCQUFKLEVBQXNCO0FBQ2xCOUMsTUFBQUEsa0NBQWtDLENBQUMsS0FBS1EsU0FBTixFQUFpQm9ELEtBQUssQ0FBQ0MsSUFBTixDQUFXRixVQUFYLENBQWpCLENBQWxDO0FBQ0g7O0FBRUQsV0FBT0EsVUFBUDtBQUNIOztBQUVxQixRQUFURyxTQUFTLENBQ2xCQyxTQURrQixFQUVsQkMsT0FGa0IsRUFHbEJDLFFBQWdCLEdBQUcsSUFIRCxFQUlsQkMsWUFBb0IsR0FBRyxJQUpMLEVBS1E7QUFDMUIsVUFBTUMsTUFBTSxHQUFHQyxpQ0FBZ0JDLEdBQWhCLEVBQWY7O0FBQ0EsVUFBTUMsTUFBTSxHQUFHSixZQUFZLElBQUlLLDRCQUFtQkMsWUFBbEQ7QUFFQSxRQUFJLENBQUNMLE1BQUQsSUFBVyxDQUFDRyxNQUFoQixFQUF3QixNQUFNLElBQUlHLEtBQUosQ0FBVSwyQ0FBVixDQUFOO0FBRXhCLFFBQUlDLENBQXVCLEdBQUcsSUFBOUIsQ0FOMEIsQ0FNVTs7QUFDcEMsUUFBSVQsUUFBUSxLQUFLLElBQWpCLEVBQXVCO0FBQ25CO0FBQ0FTLE1BQUFBLENBQUMsR0FBRyxNQUFNUCxNQUFNLENBQUNRLGNBQVAsQ0FBc0JMLE1BQXRCLEVBQThCUCxTQUE5QixFQUF5Q0MsT0FBekMsRUFBa0RDLFFBQWxELENBQVY7QUFDSCxLQUhELE1BR08sSUFBSUYsU0FBUyxLQUFLakMsaUJBQVU4QyxhQUE1QixFQUEyQztBQUM5QztBQUNBRixNQUFBQSxDQUFDLEdBQUcsTUFBTVAsTUFBTSxDQUFDVSxXQUFQLENBQW1CUCxNQUFuQixFQUEyQk4sT0FBTyxDQUFDLFNBQUQsQ0FBbEMsQ0FBVjtBQUNILEtBSE0sTUFHQTtBQUNIO0FBQ0FVLE1BQUFBLENBQUMsR0FBRyxNQUFNUCxNQUFNLENBQUNMLFNBQVAsQ0FBaUJRLE1BQWpCLEVBQXlCUCxTQUF6QixFQUFvQ0MsT0FBcEMsQ0FBVjs7QUFFQSxVQUFJRCxTQUFTLEtBQUtqQyxpQkFBVWdELFdBQTVCLEVBQXlDO0FBQ3JDQyw4QkFBYXZDLE9BQWIsQ0FBc0J3QyxNQUFELElBQVk7QUFDN0IsY0FBSSwwQkFBY2hCLE9BQWQsRUFBdUJnQixNQUFNLENBQUNDLE1BQTlCLENBQUosRUFBMkM7QUFDdkM7QUFDQTtBQUNBLGtCQUFNQyxXQUFXLEdBQUdsQixPQUFPLENBQUMsY0FBRCxDQUFQLENBQXdCbUIsUUFBeEIsS0FBcUNDLG9CQUFhQyxNQUF0RTs7QUFDQSxnQkFBSSxDQUFDQyx1QkFBY0MsUUFBZCxDQUF1QixnQkFBdkIsQ0FBRCxJQUE2Q0wsV0FBakQsRUFBOEQ7QUFDMURNLGtDQUFJQyxRQUFKLENBQWE7QUFBRUMsZ0JBQUFBLE1BQU0sRUFBRyxXQUFVVixNQUFNLENBQUNXLE9BQVE7QUFBcEMsZUFBYjtBQUNIO0FBQ0o7QUFDSixTQVREO0FBVUg7QUFDSjs7QUFFRCxXQUFPO0FBQUVyQixNQUFBQSxNQUFGO0FBQVVzQixNQUFBQSxPQUFPLEVBQUVsQixDQUFDLENBQUNtQjtBQUFyQixLQUFQO0FBQ0g7O0FBRU9DLEVBQUFBLFNBQVMsQ0FBQ0MsT0FBcUMsR0FBRyxJQUF6QyxFQUF1RDtBQUNwRSxVQUFNNUIsTUFBTSxHQUFHQyxpQ0FBZ0JDLEdBQWhCLEVBQWY7O0FBQ0EsUUFBSSxDQUFDRixNQUFMLEVBQWEsTUFBTSxJQUFJTSxLQUFKLENBQVUsMEJBQVYsQ0FBTjtBQUViLFVBQU11QixXQUFXLEdBQUdELE9BQU8sR0FDcEJBLE9BQU8sQ0FBQ0UsUUFBUixDQUFpQkMseUJBQVFDLE9BQXpCLElBQW9DaEMsTUFBTSxDQUFDaUMsZUFBUCxFQUFwQyxHQUErREwsT0FBTyxDQUFDTSxHQUFSLENBQVkzQixDQUFDLElBQUlQLE1BQU0sQ0FBQ21DLE9BQVAsQ0FBZTVCLENBQWYsQ0FBakIsQ0FEM0MsR0FFckIsQ0FBQ1AsTUFBTSxDQUFDbUMsT0FBUCxDQUFlL0IsNEJBQW1CQyxZQUFsQyxDQUFELENBRk47QUFHQSxXQUFPd0IsV0FBVyxDQUFDTyxNQUFaLENBQW1CN0IsQ0FBQyxJQUFJLENBQUMsQ0FBQ0EsQ0FBMUIsQ0FBUDtBQUNIOztBQUUwQixRQUFkOEIsY0FBYyxDQUN2QnpDLFNBRHVCLEVBRXZCMEMsT0FGdUIsRUFHdkJDLFlBSHVCLEVBSXZCWCxPQUFxQyxHQUFHLElBSmpCLEVBS047QUFDakJXLElBQUFBLFlBQVksR0FBR0EsWUFBWSxHQUFHLENBQWYsR0FBbUJDLElBQUksQ0FBQ0MsR0FBTCxDQUFTRixZQUFULEVBQXVCRyxNQUFNLENBQUNDLGdCQUE5QixDQUFuQixHQUFxRUQsTUFBTSxDQUFDQyxnQkFBM0YsQ0FEaUIsQ0FDNEY7O0FBRTdHLFVBQU1DLEtBQUssR0FBRyxLQUFLakIsU0FBTCxDQUFlQyxPQUFmLENBQWQ7QUFDQSxVQUFNaUIsVUFBb0IsR0FBRyxFQUE3Qjs7QUFDQSxTQUFLLE1BQU1DLElBQVgsSUFBbUJGLEtBQW5CLEVBQTBCO0FBQ3RCLFlBQU1HLE9BQXNCLEdBQUcsRUFBL0I7QUFDQSxZQUFNQyxNQUFNLEdBQUdGLElBQUksQ0FBQ0csZUFBTCxHQUF1QkMsU0FBdkIsRUFBZixDQUZzQixDQUU2Qjs7QUFDbkQsV0FBSyxJQUFJQyxDQUFDLEdBQUdILE1BQU0sQ0FBQ0ksTUFBUCxHQUFnQixDQUE3QixFQUFnQ0QsQ0FBQyxHQUFHLENBQXBDLEVBQXVDQSxDQUFDLEVBQXhDLEVBQTRDO0FBQ3hDLFlBQUlKLE9BQU8sQ0FBQ0ssTUFBUixJQUFrQmIsWUFBdEIsRUFBb0M7QUFFcEMsY0FBTWMsRUFBRSxHQUFHTCxNQUFNLENBQUNHLENBQUQsQ0FBakI7QUFDQSxZQUFJRSxFQUFFLENBQUNDLE9BQUgsT0FBaUIxRCxTQUFqQixJQUE4QnlELEVBQUUsQ0FBQ0UsT0FBSCxFQUFsQyxFQUFnRDtBQUNoRCxZQUFJM0QsU0FBUyxLQUFLakMsaUJBQVVnRCxXQUF4QixJQUF1QzJCLE9BQXZDLElBQWtEQSxPQUFPLEtBQUtlLEVBQUUsQ0FBQ0csVUFBSCxHQUFnQixTQUFoQixDQUFsRSxFQUE4RjtBQUM5RlQsUUFBQUEsT0FBTyxDQUFDVSxJQUFSLENBQWFKLEVBQWI7QUFDSDs7QUFFRE4sTUFBQUEsT0FBTyxDQUFDMUUsT0FBUixDQUFnQmdCLENBQUMsSUFBSXdELFVBQVUsQ0FBQ1ksSUFBWCxDQUFnQnBFLENBQUMsQ0FBQ3FFLGlCQUFGLEVBQWhCLENBQXJCO0FBQ0g7O0FBQ0QsV0FBT2IsVUFBUDtBQUNIOztBQUUyQixRQUFmYyxlQUFlLENBQ3hCL0QsU0FEd0IsRUFFeEJFLFFBRndCLEVBR3hCeUMsWUFId0IsRUFJeEJYLE9BQXFDLEdBQUcsSUFKaEIsRUFLUDtBQUNqQlcsSUFBQUEsWUFBWSxHQUFHQSxZQUFZLEdBQUcsQ0FBZixHQUFtQkMsSUFBSSxDQUFDQyxHQUFMLENBQVNGLFlBQVQsRUFBdUJHLE1BQU0sQ0FBQ0MsZ0JBQTlCLENBQW5CLEdBQXFFRCxNQUFNLENBQUNDLGdCQUEzRixDQURpQixDQUM0Rjs7QUFFN0csVUFBTUMsS0FBSyxHQUFHLEtBQUtqQixTQUFMLENBQWVDLE9BQWYsQ0FBZDtBQUNBLFVBQU1pQixVQUFvQixHQUFHLEVBQTdCOztBQUNBLFNBQUssTUFBTUMsSUFBWCxJQUFtQkYsS0FBbkIsRUFBMEI7QUFDdEIsWUFBTUcsT0FBc0IsR0FBRyxFQUEvQjtBQUNBLFlBQU1hLEtBQStCLEdBQUdkLElBQUksQ0FBQ2UsWUFBTCxDQUFrQmIsTUFBbEIsQ0FBeUI5QyxHQUF6QixDQUE2Qk4sU0FBN0IsQ0FBeEM7O0FBQ0EsVUFBSWdFLEtBQUosRUFBVztBQUNQLFlBQUk5RCxRQUFRLEtBQUssRUFBYixJQUFtQixDQUFDLENBQUNBLFFBQXpCLEVBQW1DO0FBQy9CLGdCQUFNZ0UsTUFBTSxHQUFHRixLQUFLLENBQUMxRCxHQUFOLENBQVVKLFFBQVYsQ0FBZjtBQUNBLGNBQUlnRSxNQUFKLEVBQVlmLE9BQU8sQ0FBQ1UsSUFBUixDQUFhSyxNQUFiO0FBQ2YsU0FIRCxNQUdPO0FBQ0hmLFVBQUFBLE9BQU8sQ0FBQ1UsSUFBUixDQUFhLEdBQUdoRSxLQUFLLENBQUNDLElBQU4sQ0FBV2tFLEtBQUssQ0FBQ0csTUFBTixFQUFYLENBQWhCO0FBQ0g7QUFDSjs7QUFFRGhCLE1BQUFBLE9BQU8sQ0FBQ2lCLEtBQVIsQ0FBYyxDQUFkLEVBQWlCekIsWUFBakIsRUFBK0JsRSxPQUEvQixDQUF1Q2dCLENBQUMsSUFBSXdELFVBQVUsQ0FBQ1ksSUFBWCxDQUFnQnBFLENBQUMsQ0FBQ3FFLGlCQUFGLEVBQWhCLENBQTVDO0FBQ0g7O0FBQ0QsV0FBT2IsVUFBUDtBQUNIOztBQUVxQixRQUFUb0IsU0FBUyxDQUFDQyxRQUFELEVBQTRDO0FBQzlELFVBQU1DLFNBQVMsR0FBR0MsNkNBQXNCQyxRQUF0QixDQUErQkMsWUFBL0IsQ0FDZCxLQUFLakksU0FEUyxFQUNFLEtBQUtDLGFBRFAsRUFDc0IsS0FBS0MsUUFEM0IsQ0FBbEI7O0FBSUEsVUFBTWdJLFFBQVEsR0FBRyxNQUFtQztBQUNoRCxhQUFPdEUsaUNBQWdCQyxHQUFoQixHQUFzQnNFLGNBQXRCLEVBQVA7QUFDSCxLQUZEOztBQUlBLFFBQUlMLFNBQVMsS0FBS00saUNBQVVDLE1BQTVCLEVBQW9DO0FBQ2hDLGFBQU9SLFFBQVEsQ0FBQ1MsTUFBVCxDQUFnQjtBQUFFZixRQUFBQSxLQUFLLEVBQUVnQixvQ0FBbUJDO0FBQTVCLE9BQWhCLENBQVA7QUFDSDs7QUFDRCxRQUFJVixTQUFTLEtBQUtNLGlDQUFVSyxPQUE1QixFQUFxQztBQUNqQyxhQUFPWixRQUFRLENBQUNTLE1BQVQsQ0FBZ0I7QUFBRWYsUUFBQUEsS0FBSyxFQUFFZ0Isb0NBQW1CRSxPQUE1QjtBQUFxQ0MsUUFBQUEsS0FBSyxFQUFFLE1BQU1SLFFBQVE7QUFBMUQsT0FBaEIsQ0FBUDtBQUNIOztBQUVETCxJQUFBQSxRQUFRLENBQUNTLE1BQVQsQ0FBZ0I7QUFBRWYsTUFBQUEsS0FBSyxFQUFFZ0Isb0NBQW1CSTtBQUE1QixLQUFoQjs7QUFFQWxHLG1CQUFNQyxtQkFBTixDQUEwQiwyQkFBMUIsRUFBdUQsRUFBdkQsRUFBMkRrRyxzQ0FBM0QsRUFBMEY7QUFDdEYxSixNQUFBQSxNQUFNLEVBQUUsS0FBS2MsU0FEeUU7QUFFdEY2QyxNQUFBQSxVQUFVLEVBQUUsS0FBSzVDLGFBRnFFO0FBR3RGQyxNQUFBQSxRQUFRLEVBQUUsS0FBS0EsUUFIdUU7QUFLdEYySSxNQUFBQSxVQUFVLEVBQUUsTUFBT0MsT0FBUCxJQUFtQjtBQUMzQixZQUFJLENBQUNBLE9BQUwsRUFBYztBQUNWLGlCQUFPakIsUUFBUSxDQUFDUyxNQUFULENBQWdCO0FBQUVmLFlBQUFBLEtBQUssRUFBRWdCLG9DQUFtQkM7QUFBNUIsV0FBaEIsQ0FBUDtBQUNIOztBQUVELGVBQU9YLFFBQVEsQ0FBQ1MsTUFBVCxDQUFnQjtBQUFFZixVQUFBQSxLQUFLLEVBQUVnQixvQ0FBbUJFLE9BQTVCO0FBQXFDQyxVQUFBQSxLQUFLLEVBQUUsTUFBTVIsUUFBUTtBQUExRCxTQUFoQixDQUFQO0FBQ0g7QUFYcUYsS0FBMUY7QUFhSDs7QUFFb0IsUUFBUmEsUUFBUSxDQUFDQyxHQUFELEVBQTZCO0FBQzlDLFVBQU1DLFFBQVEsR0FBRyxrREFBaUNELEdBQWpDLENBQWpCOztBQUNBLFFBQUksQ0FBQ0MsUUFBRCxJQUFhQSxRQUFRLEtBQUtELEdBQTlCLEVBQW1DO0FBQUU7QUFDakMsWUFBTSxJQUFJL0UsS0FBSixDQUFVLHlCQUFWLENBQU47QUFDSDs7QUFDRGlGLElBQUFBLE1BQU0sQ0FBQ0MsUUFBUCxDQUFnQkMsSUFBaEIsR0FBdUJILFFBQXZCLENBTDhDLENBS2I7QUFDcEM7O0FBL05pRCIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgMjAyMCAtIDIwMjEgVGhlIE1hdHJpeC5vcmcgRm91bmRhdGlvbiBDLkkuQy5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7XG4gICAgQ2FwYWJpbGl0eSxcbiAgICBFdmVudERpcmVjdGlvbixcbiAgICBJT3BlbklEQ3JlZGVudGlhbHMsXG4gICAgSU9wZW5JRFVwZGF0ZSxcbiAgICBJU2VuZEV2ZW50RGV0YWlscyxcbiAgICBNYXRyaXhDYXBhYmlsaXRpZXMsXG4gICAgT3BlbklEUmVxdWVzdFN0YXRlLFxuICAgIFNpbXBsZU9ic2VydmFibGUsXG4gICAgU3ltYm9scyxcbiAgICBXaWRnZXQsXG4gICAgV2lkZ2V0RHJpdmVyLFxuICAgIFdpZGdldEV2ZW50Q2FwYWJpbGl0eSxcbiAgICBXaWRnZXRLaW5kLFxufSBmcm9tIFwibWF0cml4LXdpZGdldC1hcGlcIjtcbmltcG9ydCB7IGl0ZXJhYmxlRGlmZiwgaXRlcmFibGVVbmlvbiB9IGZyb20gXCIuLi8uLi91dGlscy9pdGVyYWJsZXNcIjtcbmltcG9ydCB7IE1hdHJpeENsaWVudFBlZyB9IGZyb20gXCIuLi8uLi9NYXRyaXhDbGllbnRQZWdcIjtcbmltcG9ydCBBY3RpdmVSb29tT2JzZXJ2ZXIgZnJvbSBcIi4uLy4uL0FjdGl2ZVJvb21PYnNlcnZlclwiO1xuaW1wb3J0IE1vZGFsIGZyb20gXCIuLi8uLi9Nb2RhbFwiO1xuaW1wb3J0IFdpZGdldE9wZW5JRFBlcm1pc3Npb25zRGlhbG9nIGZyb20gXCIuLi8uLi9jb21wb25lbnRzL3ZpZXdzL2RpYWxvZ3MvV2lkZ2V0T3BlbklEUGVybWlzc2lvbnNEaWFsb2dcIjtcbmltcG9ydCBXaWRnZXRDYXBhYmlsaXRpZXNQcm9tcHREaWFsb2cgZnJvbSBcIi4uLy4uL2NvbXBvbmVudHMvdmlld3MvZGlhbG9ncy9XaWRnZXRDYXBhYmlsaXRpZXNQcm9tcHREaWFsb2dcIjtcbmltcG9ydCB7IFdpZGdldFBlcm1pc3Npb25DdXN0b21pc2F0aW9ucyB9IGZyb20gXCIuLi8uLi9jdXN0b21pc2F0aW9ucy9XaWRnZXRQZXJtaXNzaW9uc1wiO1xuaW1wb3J0IHsgT0lEQ1N0YXRlLCBXaWRnZXRQZXJtaXNzaW9uU3RvcmUgfSBmcm9tIFwiLi9XaWRnZXRQZXJtaXNzaW9uU3RvcmVcIjtcbmltcG9ydCB7IFdpZGdldFR5cGUgfSBmcm9tIFwiLi4vLi4vd2lkZ2V0cy9XaWRnZXRUeXBlXCI7XG5pbXBvcnQgeyBFdmVudFR5cGUsIFJlbGF0aW9uVHlwZSB9IGZyb20gXCJtYXRyaXgtanMtc2RrL3NyYy9AdHlwZXMvZXZlbnRcIjtcbmltcG9ydCB7IENIQVRfRUZGRUNUUyB9IGZyb20gXCIuLi8uLi9lZmZlY3RzXCI7XG5pbXBvcnQgeyBjb250YWluc0Vtb2ppIH0gZnJvbSBcIi4uLy4uL2VmZmVjdHMvdXRpbHNcIjtcbmltcG9ydCBkaXMgZnJvbSBcIi4uLy4uL2Rpc3BhdGNoZXIvZGlzcGF0Y2hlclwiO1xuaW1wb3J0IHsgdHJ5VHJhbnNmb3JtUGVybWFsaW5rVG9Mb2NhbEhyZWYgfSBmcm9tIFwiLi4vLi4vdXRpbHMvcGVybWFsaW5rcy9QZXJtYWxpbmtzXCI7XG5pbXBvcnQgeyBJQ29udGVudCwgSUV2ZW50LCBNYXRyaXhFdmVudCB9IGZyb20gXCJtYXRyaXgtanMtc2RrL3NyYy9tb2RlbHMvZXZlbnRcIjtcbmltcG9ydCB7IFJvb20gfSBmcm9tIFwibWF0cml4LWpzLXNkay9zcmMvbW9kZWxzL3Jvb21cIjtcblxuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSBcIm1hdHJpeC1qcy1zZGsvc3JjL2xvZ2dlclwiO1xuaW1wb3J0IFNldHRpbmdzU3RvcmUgZnJvbSBcIi4uLy4uL3NldHRpbmdzL1NldHRpbmdzU3RvcmVcIjtcblxuLy8gVE9ETzogUHVyZ2UgdGhpcyBmcm9tIHRoZSB1bml2ZXJzZVxuXG5mdW5jdGlvbiBnZXRSZW1lbWJlcmVkQ2FwYWJpbGl0aWVzRm9yV2lkZ2V0KHdpZGdldDogV2lkZ2V0KTogQ2FwYWJpbGl0eVtdIHtcbiAgICByZXR1cm4gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbShgd2lkZ2V0XyR7d2lkZ2V0LmlkfV9hcHByb3ZlZF9jYXBzYCkgfHwgXCJbXVwiKTtcbn1cblxuZnVuY3Rpb24gc2V0UmVtZW1iZXJlZENhcGFiaWxpdGllc0ZvcldpZGdldCh3aWRnZXQ6IFdpZGdldCwgY2FwczogQ2FwYWJpbGl0eVtdKSB7XG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oYHdpZGdldF8ke3dpZGdldC5pZH1fYXBwcm92ZWRfY2Fwc2AsIEpTT04uc3RyaW5naWZ5KGNhcHMpKTtcbn1cblxuZXhwb3J0IGNsYXNzIFN0b3BHYXBXaWRnZXREcml2ZXIgZXh0ZW5kcyBXaWRnZXREcml2ZXIge1xuICAgIHByaXZhdGUgYWxsb3dlZENhcGFiaWxpdGllczogU2V0PENhcGFiaWxpdHk+O1xuXG4gICAgLy8gVE9ETzogUmVmYWN0b3Igd2lkZ2V0S2luZCBpbnRvIHRoZSBXaWRnZXQgY2xhc3NcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgYWxsb3dlZENhcGFiaWxpdGllczogQ2FwYWJpbGl0eVtdLFxuICAgICAgICBwcml2YXRlIGZvcldpZGdldDogV2lkZ2V0LFxuICAgICAgICBwcml2YXRlIGZvcldpZGdldEtpbmQ6IFdpZGdldEtpbmQsXG4gICAgICAgIHByaXZhdGUgaW5Sb29tSWQ/OiBzdHJpbmcsXG4gICAgKSB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgLy8gQWx3YXlzIGFsbG93IHNjcmVlbnNob3RzIHRvIGJlIHRha2VuIGJlY2F1c2UgaXQncyBhIGNsaWVudC1pbmR1Y2VkIGZsb3cuIFRoZSB3aWRnZXQgY2FuJ3RcbiAgICAgICAgLy8gc3BldyBzY3JlZW5zaG90cyBhdCB1cyBhbmQgY2FuJ3QgcmVxdWVzdCBzY3JlZW5zaG90cyBvZiB1cywgc28gaXQncyB1cCB0byB1cyB0byBwcm92aWRlIHRoZVxuICAgICAgICAvLyBidXR0b24gaWYgdGhlIHdpZGdldCBzYXlzIGl0IHN1cHBvcnRzIHNjcmVlbnNob3RzLlxuICAgICAgICB0aGlzLmFsbG93ZWRDYXBhYmlsaXRpZXMgPSBuZXcgU2V0KFsuLi5hbGxvd2VkQ2FwYWJpbGl0aWVzLFxuICAgICAgICAgICAgTWF0cml4Q2FwYWJpbGl0aWVzLlNjcmVlbnNob3RzLFxuICAgICAgICAgICAgTWF0cml4Q2FwYWJpbGl0aWVzLlJlcXVpcmVzQ2xpZW50XSk7XG5cbiAgICAgICAgLy8gR3JhbnQgdGhlIHBlcm1pc3Npb25zIHRoYXQgYXJlIHNwZWNpZmljIHRvIGdpdmVuIHdpZGdldCB0eXBlc1xuICAgICAgICBpZiAoV2lkZ2V0VHlwZS5KSVRTSS5tYXRjaGVzKHRoaXMuZm9yV2lkZ2V0LnR5cGUpICYmIGZvcldpZGdldEtpbmQgPT09IFdpZGdldEtpbmQuUm9vbSkge1xuICAgICAgICAgICAgdGhpcy5hbGxvd2VkQ2FwYWJpbGl0aWVzLmFkZChNYXRyaXhDYXBhYmlsaXRpZXMuQWx3YXlzT25TY3JlZW4pO1xuICAgICAgICB9IGVsc2UgaWYgKFdpZGdldFR5cGUuU1RJQ0tFUlBJQ0tFUi5tYXRjaGVzKHRoaXMuZm9yV2lkZ2V0LnR5cGUpICYmIGZvcldpZGdldEtpbmQgPT09IFdpZGdldEtpbmQuQWNjb3VudCkge1xuICAgICAgICAgICAgY29uc3Qgc3RpY2tlclNlbmRpbmdDYXAgPSBXaWRnZXRFdmVudENhcGFiaWxpdHkuZm9yUm9vbUV2ZW50KEV2ZW50RGlyZWN0aW9uLlNlbmQsIEV2ZW50VHlwZS5TdGlja2VyKS5yYXc7XG4gICAgICAgICAgICB0aGlzLmFsbG93ZWRDYXBhYmlsaXRpZXMuYWRkKE1hdHJpeENhcGFiaWxpdGllcy5TdGlja2VyU2VuZGluZyk7IC8vIGxlZ2FjeSBhcyBmYXIgYXMgTVNDMjc2MiBpcyBjb25jZXJuZWRcbiAgICAgICAgICAgIHRoaXMuYWxsb3dlZENhcGFiaWxpdGllcy5hZGQoc3RpY2tlclNlbmRpbmdDYXApO1xuXG4gICAgICAgICAgICAvLyBBdXRvLWFwcHJvdmUgdGhlIGxlZ2FjeSB2aXNpYmlsaXR5IGNhcGFiaWxpdHkuIFdlIHNlbmQgaXQgcmVnYXJkbGVzcyBvZiBjYXBhYmlsaXR5LlxuICAgICAgICAgICAgLy8gV2lkZ2V0cyBkb24ndCB0ZWNobmljYWxseSBuZWVkIHRvIHJlcXVlc3QgdGhpcyBjYXBhYmlsaXR5LCBidXQgU2NhbGFyIHN0aWxsIGRvZXMuXG4gICAgICAgICAgICB0aGlzLmFsbG93ZWRDYXBhYmlsaXRpZXMuYWRkKFwidmlzaWJpbGl0eVwiKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyB2YWxpZGF0ZUNhcGFiaWxpdGllcyhyZXF1ZXN0ZWQ6IFNldDxDYXBhYmlsaXR5Pik6IFByb21pc2U8U2V0PENhcGFiaWxpdHk+PiB7XG4gICAgICAgIC8vIENoZWNrIHRvIHNlZSBpZiBhbnkgY2FwYWJpbGl0aWVzIGFyZW4ndCBhdXRvbWF0aWNhbGx5IGFjY2VwdGVkIChzdWNoIGFzIHN0aWNrZXIgcGlja2Vyc1xuICAgICAgICAvLyBhbGxvd2luZyBzdGlja2VycyB0byBiZSBzZW50KS4gSWYgdGhlcmUgYXJlIGV4Y2VzcyBjYXBhYmlsaXRpZXMgdG8gYmUgYXBwcm92ZWQsIHRoZSB1c2VyXG4gICAgICAgIC8vIHdpbGwgYmUgcHJvbXB0ZWQgdG8gYWNjZXB0IHRoZW0uXG4gICAgICAgIGNvbnN0IGRpZmYgPSBpdGVyYWJsZURpZmYocmVxdWVzdGVkLCB0aGlzLmFsbG93ZWRDYXBhYmlsaXRpZXMpO1xuICAgICAgICBjb25zdCBtaXNzaW5nID0gbmV3IFNldChkaWZmLnJlbW92ZWQpOyAvLyBcInJlbW92ZWRcIiBpcyBcImluIEEgKHJlcXVlc3RlZCkgYnV0IG5vdCBpbiBCIChhbGxvd2VkKVwiXG4gICAgICAgIGNvbnN0IGFsbG93ZWRTb0ZhciA9IG5ldyBTZXQodGhpcy5hbGxvd2VkQ2FwYWJpbGl0aWVzKTtcbiAgICAgICAgZ2V0UmVtZW1iZXJlZENhcGFiaWxpdGllc0ZvcldpZGdldCh0aGlzLmZvcldpZGdldCkuZm9yRWFjaChjYXAgPT4ge1xuICAgICAgICAgICAgYWxsb3dlZFNvRmFyLmFkZChjYXApO1xuICAgICAgICAgICAgbWlzc2luZy5kZWxldGUoY2FwKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChXaWRnZXRQZXJtaXNzaW9uQ3VzdG9taXNhdGlvbnMucHJlYXBwcm92ZUNhcGFiaWxpdGllcykge1xuICAgICAgICAgICAgY29uc3QgYXBwcm92ZWQgPSBhd2FpdCBXaWRnZXRQZXJtaXNzaW9uQ3VzdG9taXNhdGlvbnMucHJlYXBwcm92ZUNhcGFiaWxpdGllcyh0aGlzLmZvcldpZGdldCwgcmVxdWVzdGVkKTtcbiAgICAgICAgICAgIGlmIChhcHByb3ZlZCkge1xuICAgICAgICAgICAgICAgIGFwcHJvdmVkLmZvckVhY2goY2FwID0+IHtcbiAgICAgICAgICAgICAgICAgICAgYWxsb3dlZFNvRmFyLmFkZChjYXApO1xuICAgICAgICAgICAgICAgICAgICBtaXNzaW5nLmRlbGV0ZShjYXApO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIFRPRE86IERvIHNvbWV0aGluZyB3aGVuIHRoZSB3aWRnZXQgcmVxdWVzdHMgbmV3IGNhcGFiaWxpdGllcyBub3QgeWV0IGFza2VkIGZvclxuICAgICAgICBsZXQgcmVtZW1iZXJBcHByb3ZlZCA9IGZhbHNlO1xuICAgICAgICBpZiAobWlzc2luZy5zaXplID4gMCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCBbcmVzdWx0XSA9IGF3YWl0IE1vZGFsLmNyZWF0ZVRyYWNrZWREaWFsb2coXG4gICAgICAgICAgICAgICAgICAgICdBcHByb3ZlIFdpZGdldCBDYXBzJywgJycsXG4gICAgICAgICAgICAgICAgICAgIFdpZGdldENhcGFiaWxpdGllc1Byb21wdERpYWxvZyxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdGVkQ2FwYWJpbGl0aWVzOiBtaXNzaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgd2lkZ2V0OiB0aGlzLmZvcldpZGdldCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZGdldEtpbmQ6IHRoaXMuZm9yV2lkZ2V0S2luZCxcbiAgICAgICAgICAgICAgICAgICAgfSkuZmluaXNoZWQ7XG4gICAgICAgICAgICAgICAgKHJlc3VsdC5hcHByb3ZlZCB8fCBbXSkuZm9yRWFjaChjYXAgPT4gYWxsb3dlZFNvRmFyLmFkZChjYXApKTtcbiAgICAgICAgICAgICAgICByZW1lbWJlckFwcHJvdmVkID0gcmVzdWx0LnJlbWVtYmVyO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcihcIk5vbi1mYXRhbCBlcnJvciBnZXR0aW5nIGNhcGFiaWxpdGllczogXCIsIGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgYWxsQWxsb3dlZCA9IG5ldyBTZXQoaXRlcmFibGVVbmlvbihhbGxvd2VkU29GYXIsIHJlcXVlc3RlZCkpO1xuXG4gICAgICAgIGlmIChyZW1lbWJlckFwcHJvdmVkKSB7XG4gICAgICAgICAgICBzZXRSZW1lbWJlcmVkQ2FwYWJpbGl0aWVzRm9yV2lkZ2V0KHRoaXMuZm9yV2lkZ2V0LCBBcnJheS5mcm9tKGFsbEFsbG93ZWQpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhbGxBbGxvd2VkO1xuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBzZW5kRXZlbnQoXG4gICAgICAgIGV2ZW50VHlwZTogc3RyaW5nLFxuICAgICAgICBjb250ZW50OiBJQ29udGVudCxcbiAgICAgICAgc3RhdGVLZXk6IHN0cmluZyA9IG51bGwsXG4gICAgICAgIHRhcmdldFJvb21JZDogc3RyaW5nID0gbnVsbCxcbiAgICApOiBQcm9taXNlPElTZW5kRXZlbnREZXRhaWxzPiB7XG4gICAgICAgIGNvbnN0IGNsaWVudCA9IE1hdHJpeENsaWVudFBlZy5nZXQoKTtcbiAgICAgICAgY29uc3Qgcm9vbUlkID0gdGFyZ2V0Um9vbUlkIHx8IEFjdGl2ZVJvb21PYnNlcnZlci5hY3RpdmVSb29tSWQ7XG5cbiAgICAgICAgaWYgKCFjbGllbnQgfHwgIXJvb21JZCkgdGhyb3cgbmV3IEVycm9yKFwiTm90IGluIGEgcm9vbSBvciBub3QgYXR0YWNoZWQgdG8gYSBjbGllbnRcIik7XG5cbiAgICAgICAgbGV0IHI6IHsgZXZlbnRfaWQ6IHN0cmluZyB9ID0gbnVsbDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjYW1lbGNhc2VcbiAgICAgICAgaWYgKHN0YXRlS2V5ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAvLyBzdGF0ZSBldmVudFxuICAgICAgICAgICAgciA9IGF3YWl0IGNsaWVudC5zZW5kU3RhdGVFdmVudChyb29tSWQsIGV2ZW50VHlwZSwgY29udGVudCwgc3RhdGVLZXkpO1xuICAgICAgICB9IGVsc2UgaWYgKGV2ZW50VHlwZSA9PT0gRXZlbnRUeXBlLlJvb21SZWRhY3Rpb24pIHtcbiAgICAgICAgICAgIC8vIHNwZWNpYWwgY2FzZTogZXh0cmFjdCB0aGUgYHJlZGFjdHNgIHByb3BlcnR5IGFuZCBjYWxsIHJlZGFjdFxuICAgICAgICAgICAgciA9IGF3YWl0IGNsaWVudC5yZWRhY3RFdmVudChyb29tSWQsIGNvbnRlbnRbJ3JlZGFjdHMnXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBtZXNzYWdlIGV2ZW50XG4gICAgICAgICAgICByID0gYXdhaXQgY2xpZW50LnNlbmRFdmVudChyb29tSWQsIGV2ZW50VHlwZSwgY29udGVudCk7XG5cbiAgICAgICAgICAgIGlmIChldmVudFR5cGUgPT09IEV2ZW50VHlwZS5Sb29tTWVzc2FnZSkge1xuICAgICAgICAgICAgICAgIENIQVRfRUZGRUNUUy5mb3JFYWNoKChlZmZlY3QpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRhaW5zRW1vamkoY29udGVudCwgZWZmZWN0LmVtb2ppcykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZvciBpbml0aWFsIHRocmVhZHMgbGF1bmNoLCBjaGF0IGVmZmVjdHMgYXJlIGRpc2FibGVkXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzZWUgIzE5NzMxXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpc05vdFRocmVhZCA9IGNvbnRlbnRbXCJtLnJlbGF0ZXNfdG9cIl0ucmVsX3R5cGUgIT09IFJlbGF0aW9uVHlwZS5UaHJlYWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIVNldHRpbmdzU3RvcmUuZ2V0VmFsdWUoXCJmZWF0dXJlX3RocmVhZFwiKSB8fCBpc05vdFRocmVhZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpcy5kaXNwYXRjaCh7IGFjdGlvbjogYGVmZmVjdHMuJHtlZmZlY3QuY29tbWFuZH1gIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4geyByb29tSWQsIGV2ZW50SWQ6IHIuZXZlbnRfaWQgfTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHBpY2tSb29tcyhyb29tSWRzOiAoc3RyaW5nIHwgU3ltYm9scy5BbnlSb29tKVtdID0gbnVsbCk6IFJvb21bXSB7XG4gICAgICAgIGNvbnN0IGNsaWVudCA9IE1hdHJpeENsaWVudFBlZy5nZXQoKTtcbiAgICAgICAgaWYgKCFjbGllbnQpIHRocm93IG5ldyBFcnJvcihcIk5vdCBhdHRhY2hlZCB0byBhIGNsaWVudFwiKTtcblxuICAgICAgICBjb25zdCB0YXJnZXRSb29tcyA9IHJvb21JZHNcbiAgICAgICAgICAgID8gKHJvb21JZHMuaW5jbHVkZXMoU3ltYm9scy5BbnlSb29tKSA/IGNsaWVudC5nZXRWaXNpYmxlUm9vbXMoKSA6IHJvb21JZHMubWFwKHIgPT4gY2xpZW50LmdldFJvb20ocikpKVxuICAgICAgICAgICAgOiBbY2xpZW50LmdldFJvb20oQWN0aXZlUm9vbU9ic2VydmVyLmFjdGl2ZVJvb21JZCldO1xuICAgICAgICByZXR1cm4gdGFyZ2V0Um9vbXMuZmlsdGVyKHIgPT4gISFyKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgcmVhZFJvb21FdmVudHMoXG4gICAgICAgIGV2ZW50VHlwZTogc3RyaW5nLFxuICAgICAgICBtc2d0eXBlOiBzdHJpbmcgfCB1bmRlZmluZWQsXG4gICAgICAgIGxpbWl0UGVyUm9vbTogbnVtYmVyLFxuICAgICAgICByb29tSWRzOiAoc3RyaW5nIHwgU3ltYm9scy5BbnlSb29tKVtdID0gbnVsbCxcbiAgICApOiBQcm9taXNlPG9iamVjdFtdPiB7XG4gICAgICAgIGxpbWl0UGVyUm9vbSA9IGxpbWl0UGVyUm9vbSA+IDAgPyBNYXRoLm1pbihsaW1pdFBlclJvb20sIE51bWJlci5NQVhfU0FGRV9JTlRFR0VSKSA6IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSOyAvLyByZWxhdGl2ZWx5IGFyYml0cmFyeVxuXG4gICAgICAgIGNvbnN0IHJvb21zID0gdGhpcy5waWNrUm9vbXMocm9vbUlkcyk7XG4gICAgICAgIGNvbnN0IGFsbFJlc3VsdHM6IElFdmVudFtdID0gW107XG4gICAgICAgIGZvciAoY29uc3Qgcm9vbSBvZiByb29tcykge1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0czogTWF0cml4RXZlbnRbXSA9IFtdO1xuICAgICAgICAgICAgY29uc3QgZXZlbnRzID0gcm9vbS5nZXRMaXZlVGltZWxpbmUoKS5nZXRFdmVudHMoKTsgLy8gdGltZWxpbmVzIGFyZSBtb3N0IHJlY2VudCBsYXN0XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gZXZlbnRzLmxlbmd0aCAtIDE7IGkgPiAwOyBpLS0pIHtcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0cy5sZW5ndGggPj0gbGltaXRQZXJSb29tKSBicmVhaztcblxuICAgICAgICAgICAgICAgIGNvbnN0IGV2ID0gZXZlbnRzW2ldO1xuICAgICAgICAgICAgICAgIGlmIChldi5nZXRUeXBlKCkgIT09IGV2ZW50VHlwZSB8fCBldi5pc1N0YXRlKCkpIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGlmIChldmVudFR5cGUgPT09IEV2ZW50VHlwZS5Sb29tTWVzc2FnZSAmJiBtc2d0eXBlICYmIG1zZ3R5cGUgIT09IGV2LmdldENvbnRlbnQoKVsnbXNndHlwZSddKSBjb250aW51ZTtcbiAgICAgICAgICAgICAgICByZXN1bHRzLnB1c2goZXYpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXN1bHRzLmZvckVhY2goZSA9PiBhbGxSZXN1bHRzLnB1c2goZS5nZXRFZmZlY3RpdmVFdmVudCgpKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFsbFJlc3VsdHM7XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIHJlYWRTdGF0ZUV2ZW50cyhcbiAgICAgICAgZXZlbnRUeXBlOiBzdHJpbmcsXG4gICAgICAgIHN0YXRlS2V5OiBzdHJpbmcgfCB1bmRlZmluZWQsXG4gICAgICAgIGxpbWl0UGVyUm9vbTogbnVtYmVyLFxuICAgICAgICByb29tSWRzOiAoc3RyaW5nIHwgU3ltYm9scy5BbnlSb29tKVtdID0gbnVsbCxcbiAgICApOiBQcm9taXNlPG9iamVjdFtdPiB7XG4gICAgICAgIGxpbWl0UGVyUm9vbSA9IGxpbWl0UGVyUm9vbSA+IDAgPyBNYXRoLm1pbihsaW1pdFBlclJvb20sIE51bWJlci5NQVhfU0FGRV9JTlRFR0VSKSA6IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSOyAvLyByZWxhdGl2ZWx5IGFyYml0cmFyeVxuXG4gICAgICAgIGNvbnN0IHJvb21zID0gdGhpcy5waWNrUm9vbXMocm9vbUlkcyk7XG4gICAgICAgIGNvbnN0IGFsbFJlc3VsdHM6IElFdmVudFtdID0gW107XG4gICAgICAgIGZvciAoY29uc3Qgcm9vbSBvZiByb29tcykge1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0czogTWF0cml4RXZlbnRbXSA9IFtdO1xuICAgICAgICAgICAgY29uc3Qgc3RhdGU6IE1hcDxzdHJpbmcsIE1hdHJpeEV2ZW50PiA9IHJvb20uY3VycmVudFN0YXRlLmV2ZW50cy5nZXQoZXZlbnRUeXBlKTtcbiAgICAgICAgICAgIGlmIChzdGF0ZSkge1xuICAgICAgICAgICAgICAgIGlmIChzdGF0ZUtleSA9PT0gXCJcIiB8fCAhIXN0YXRlS2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZvcktleSA9IHN0YXRlLmdldChzdGF0ZUtleSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmb3JLZXkpIHJlc3VsdHMucHVzaChmb3JLZXkpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdHMucHVzaCguLi5BcnJheS5mcm9tKHN0YXRlLnZhbHVlcygpKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXN1bHRzLnNsaWNlKDAsIGxpbWl0UGVyUm9vbSkuZm9yRWFjaChlID0+IGFsbFJlc3VsdHMucHVzaChlLmdldEVmZmVjdGl2ZUV2ZW50KCkpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWxsUmVzdWx0cztcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgYXNrT3BlbklEKG9ic2VydmVyOiBTaW1wbGVPYnNlcnZhYmxlPElPcGVuSURVcGRhdGU+KSB7XG4gICAgICAgIGNvbnN0IG9pZGNTdGF0ZSA9IFdpZGdldFBlcm1pc3Npb25TdG9yZS5pbnN0YW5jZS5nZXRPSURDU3RhdGUoXG4gICAgICAgICAgICB0aGlzLmZvcldpZGdldCwgdGhpcy5mb3JXaWRnZXRLaW5kLCB0aGlzLmluUm9vbUlkLFxuICAgICAgICApO1xuXG4gICAgICAgIGNvbnN0IGdldFRva2VuID0gKCk6IFByb21pc2U8SU9wZW5JRENyZWRlbnRpYWxzPiA9PiB7XG4gICAgICAgICAgICByZXR1cm4gTWF0cml4Q2xpZW50UGVnLmdldCgpLmdldE9wZW5JZFRva2VuKCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKG9pZGNTdGF0ZSA9PT0gT0lEQ1N0YXRlLkRlbmllZCkge1xuICAgICAgICAgICAgcmV0dXJuIG9ic2VydmVyLnVwZGF0ZSh7IHN0YXRlOiBPcGVuSURSZXF1ZXN0U3RhdGUuQmxvY2tlZCB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob2lkY1N0YXRlID09PSBPSURDU3RhdGUuQWxsb3dlZCkge1xuICAgICAgICAgICAgcmV0dXJuIG9ic2VydmVyLnVwZGF0ZSh7IHN0YXRlOiBPcGVuSURSZXF1ZXN0U3RhdGUuQWxsb3dlZCwgdG9rZW46IGF3YWl0IGdldFRva2VuKCkgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBvYnNlcnZlci51cGRhdGUoeyBzdGF0ZTogT3BlbklEUmVxdWVzdFN0YXRlLlBlbmRpbmdVc2VyQ29uZmlybWF0aW9uIH0pO1xuXG4gICAgICAgIE1vZGFsLmNyZWF0ZVRyYWNrZWREaWFsb2coXCJPcGVuSUQgd2lkZ2V0IHBlcm1pc3Npb25zXCIsICcnLCBXaWRnZXRPcGVuSURQZXJtaXNzaW9uc0RpYWxvZywge1xuICAgICAgICAgICAgd2lkZ2V0OiB0aGlzLmZvcldpZGdldCxcbiAgICAgICAgICAgIHdpZGdldEtpbmQ6IHRoaXMuZm9yV2lkZ2V0S2luZCxcbiAgICAgICAgICAgIGluUm9vbUlkOiB0aGlzLmluUm9vbUlkLFxuXG4gICAgICAgICAgICBvbkZpbmlzaGVkOiBhc3luYyAoY29uZmlybSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghY29uZmlybSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2JzZXJ2ZXIudXBkYXRlKHsgc3RhdGU6IE9wZW5JRFJlcXVlc3RTdGF0ZS5CbG9ja2VkIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBvYnNlcnZlci51cGRhdGUoeyBzdGF0ZTogT3BlbklEUmVxdWVzdFN0YXRlLkFsbG93ZWQsIHRva2VuOiBhd2FpdCBnZXRUb2tlbigpIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIG5hdmlnYXRlKHVyaTogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IGxvY2FsVXJpID0gdHJ5VHJhbnNmb3JtUGVybWFsaW5rVG9Mb2NhbEhyZWYodXJpKTtcbiAgICAgICAgaWYgKCFsb2NhbFVyaSB8fCBsb2NhbFVyaSA9PT0gdXJpKSB7IC8vIHBhcnNlIGZhaWx1cmUgY2FuIGxlYWQgdG8gYW4gdW5tb2RpZmllZCBVUkxcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byB0cmFuc2Zvcm0gVVJJXCIpO1xuICAgICAgICB9XG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gbG9jYWxVcmk7IC8vIGl0J2xsIGp1c3QgYmUgYSBmcmFnbWVudFxuICAgIH1cbn1cbiJdfQ==