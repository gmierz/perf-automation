"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WidgetMessagingStore = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _AsyncStoreWithClient = require("../AsyncStoreWithClient");

var _dispatcher = _interopRequireDefault(require("../../dispatcher/dispatcher"));

var _maps = require("../../utils/maps");

/*
 * Copyright 2020 The Matrix.org Foundation C.I.C.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Temporary holding store for widget messaging instances. This is eventually
 * going to be merged with a more complete WidgetStore, but for now it's
 * easiest to split this into a single place.
 */
class WidgetMessagingStore extends _AsyncStoreWithClient.AsyncStoreWithClient {
  // TODO: Fix uniqueness problem (widget IDs are not unique across the whole app)
  // <widget ID, ClientWidgetAPi>
  constructor() {
    super(_dispatcher.default);
    (0, _defineProperty2.default)(this, "widgetMap", new _maps.EnhancedMap());
  }

  static get instance() {
    return WidgetMessagingStore.internalInstance;
  }

  async onAction(payload) {// nothing to do
  }

  async onReady() {
    // just in case
    this.widgetMap.clear();
  }

  storeMessaging(widget, widgetApi) {
    this.stopMessaging(widget);
    this.widgetMap.set(widget.id, widgetApi);
  }

  stopMessaging(widget) {
    var _this$widgetMap$remov;

    (_this$widgetMap$remov = this.widgetMap.remove(widget.id)) === null || _this$widgetMap$remov === void 0 ? void 0 : _this$widgetMap$remov.stop();
  }

  getMessaging(widget) {
    return this.widgetMap.get(widget.id);
  }
  /**
   * Stops the widget messaging instance for a given widget ID.
   * @param {string} widgetId The widget ID.
   * @deprecated Widget IDs are not globally unique.
   */


  stopMessagingById(widgetId) {
    var _this$widgetMap$remov2;

    (_this$widgetMap$remov2 = this.widgetMap.remove(widgetId)) === null || _this$widgetMap$remov2 === void 0 ? void 0 : _this$widgetMap$remov2.stop();
  }
  /**
   * Gets the widget messaging class for a given widget ID.
   * @param {string} widgetId The widget ID.
   * @returns {ClientWidgetApi} The widget API, or a falsey value if not found.
   * @deprecated Widget IDs are not globally unique.
   */


  getMessagingForId(widgetId) {
    return this.widgetMap.get(widgetId);
  }

}

exports.WidgetMessagingStore = WidgetMessagingStore;
(0, _defineProperty2.default)(WidgetMessagingStore, "internalInstance", new WidgetMessagingStore());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zdG9yZXMvd2lkZ2V0cy9XaWRnZXRNZXNzYWdpbmdTdG9yZS50cyJdLCJuYW1lcyI6WyJXaWRnZXRNZXNzYWdpbmdTdG9yZSIsIkFzeW5jU3RvcmVXaXRoQ2xpZW50IiwiY29uc3RydWN0b3IiLCJkZWZhdWx0RGlzcGF0Y2hlciIsIkVuaGFuY2VkTWFwIiwiaW5zdGFuY2UiLCJpbnRlcm5hbEluc3RhbmNlIiwib25BY3Rpb24iLCJwYXlsb2FkIiwib25SZWFkeSIsIndpZGdldE1hcCIsImNsZWFyIiwic3RvcmVNZXNzYWdpbmciLCJ3aWRnZXQiLCJ3aWRnZXRBcGkiLCJzdG9wTWVzc2FnaW5nIiwic2V0IiwiaWQiLCJyZW1vdmUiLCJzdG9wIiwiZ2V0TWVzc2FnaW5nIiwiZ2V0Iiwic3RvcE1lc3NhZ2luZ0J5SWQiLCJ3aWRnZXRJZCIsImdldE1lc3NhZ2luZ0ZvcklkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQWlCQTs7QUFDQTs7QUFFQTs7QUFwQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxNQUFNQSxvQkFBTixTQUFtQ0MsMENBQW5DLENBQWlFO0FBR3BFO0FBQ2dFO0FBRXpEQyxFQUFBQSxXQUFXLEdBQUc7QUFDakIsVUFBTUMsbUJBQU47QUFEaUIscURBRkQsSUFBSUMsaUJBQUosRUFFQztBQUVwQjs7QUFFeUIsYUFBUkMsUUFBUSxHQUF5QjtBQUMvQyxXQUFPTCxvQkFBb0IsQ0FBQ00sZ0JBQTVCO0FBQ0g7O0FBRXVCLFFBQVJDLFFBQVEsQ0FBQ0MsT0FBRCxFQUF1QyxDQUMzRDtBQUNIOztBQUVzQixRQUFQQyxPQUFPLEdBQWlCO0FBQ3BDO0FBQ0EsU0FBS0MsU0FBTCxDQUFlQyxLQUFmO0FBQ0g7O0FBRU1DLEVBQUFBLGNBQWMsQ0FBQ0MsTUFBRCxFQUFpQkMsU0FBakIsRUFBNkM7QUFDOUQsU0FBS0MsYUFBTCxDQUFtQkYsTUFBbkI7QUFDQSxTQUFLSCxTQUFMLENBQWVNLEdBQWYsQ0FBbUJILE1BQU0sQ0FBQ0ksRUFBMUIsRUFBOEJILFNBQTlCO0FBQ0g7O0FBRU1DLEVBQUFBLGFBQWEsQ0FBQ0YsTUFBRCxFQUFpQjtBQUFBOztBQUNqQyxrQ0FBS0gsU0FBTCxDQUFlUSxNQUFmLENBQXNCTCxNQUFNLENBQUNJLEVBQTdCLGlGQUFrQ0UsSUFBbEM7QUFDSDs7QUFFTUMsRUFBQUEsWUFBWSxDQUFDUCxNQUFELEVBQWtDO0FBQ2pELFdBQU8sS0FBS0gsU0FBTCxDQUFlVyxHQUFmLENBQW1CUixNQUFNLENBQUNJLEVBQTFCLENBQVA7QUFDSDtBQUVEO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7OztBQUNXSyxFQUFBQSxpQkFBaUIsQ0FBQ0MsUUFBRCxFQUFtQjtBQUFBOztBQUN2QyxtQ0FBS2IsU0FBTCxDQUFlUSxNQUFmLENBQXNCSyxRQUF0QixtRkFBaUNKLElBQWpDO0FBQ0g7QUFFRDtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNXSyxFQUFBQSxpQkFBaUIsQ0FBQ0QsUUFBRCxFQUFvQztBQUN4RCxXQUFPLEtBQUtiLFNBQUwsQ0FBZVcsR0FBZixDQUFtQkUsUUFBbkIsQ0FBUDtBQUNIOztBQXJEbUU7Ozs4QkFBM0R2QixvQixzQkFDeUIsSUFBSUEsb0JBQUosRSIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgMjAyMCBUaGUgTWF0cml4Lm9yZyBGb3VuZGF0aW9uIEMuSS5DLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQ2xpZW50V2lkZ2V0QXBpLCBXaWRnZXQgfSBmcm9tIFwibWF0cml4LXdpZGdldC1hcGlcIjtcbmltcG9ydCB7IEFzeW5jU3RvcmVXaXRoQ2xpZW50IH0gZnJvbSBcIi4uL0FzeW5jU3RvcmVXaXRoQ2xpZW50XCI7XG5pbXBvcnQgZGVmYXVsdERpc3BhdGNoZXIgZnJvbSBcIi4uLy4uL2Rpc3BhdGNoZXIvZGlzcGF0Y2hlclwiO1xuaW1wb3J0IHsgQWN0aW9uUGF5bG9hZCB9IGZyb20gXCIuLi8uLi9kaXNwYXRjaGVyL3BheWxvYWRzXCI7XG5pbXBvcnQgeyBFbmhhbmNlZE1hcCB9IGZyb20gXCIuLi8uLi91dGlscy9tYXBzXCI7XG5cbi8qKlxuICogVGVtcG9yYXJ5IGhvbGRpbmcgc3RvcmUgZm9yIHdpZGdldCBtZXNzYWdpbmcgaW5zdGFuY2VzLiBUaGlzIGlzIGV2ZW50dWFsbHlcbiAqIGdvaW5nIHRvIGJlIG1lcmdlZCB3aXRoIGEgbW9yZSBjb21wbGV0ZSBXaWRnZXRTdG9yZSwgYnV0IGZvciBub3cgaXQnc1xuICogZWFzaWVzdCB0byBzcGxpdCB0aGlzIGludG8gYSBzaW5nbGUgcGxhY2UuXG4gKi9cbmV4cG9ydCBjbGFzcyBXaWRnZXRNZXNzYWdpbmdTdG9yZSBleHRlbmRzIEFzeW5jU3RvcmVXaXRoQ2xpZW50PHVua25vd24+IHtcbiAgICBwcml2YXRlIHN0YXRpYyBpbnRlcm5hbEluc3RhbmNlID0gbmV3IFdpZGdldE1lc3NhZ2luZ1N0b3JlKCk7XG5cbiAgICAvLyBUT0RPOiBGaXggdW5pcXVlbmVzcyBwcm9ibGVtICh3aWRnZXQgSURzIGFyZSBub3QgdW5pcXVlIGFjcm9zcyB0aGUgd2hvbGUgYXBwKVxuICAgIHByaXZhdGUgd2lkZ2V0TWFwID0gbmV3IEVuaGFuY2VkTWFwPHN0cmluZywgQ2xpZW50V2lkZ2V0QXBpPigpOyAvLyA8d2lkZ2V0IElELCBDbGllbnRXaWRnZXRBUGk+XG5cbiAgICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKGRlZmF1bHREaXNwYXRjaGVyKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGdldCBpbnN0YW5jZSgpOiBXaWRnZXRNZXNzYWdpbmdTdG9yZSB7XG4gICAgICAgIHJldHVybiBXaWRnZXRNZXNzYWdpbmdTdG9yZS5pbnRlcm5hbEluc3RhbmNlO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBhc3luYyBvbkFjdGlvbihwYXlsb2FkOiBBY3Rpb25QYXlsb2FkKTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgLy8gbm90aGluZyB0byBkb1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBhc3luYyBvblJlYWR5KCk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIC8vIGp1c3QgaW4gY2FzZVxuICAgICAgICB0aGlzLndpZGdldE1hcC5jbGVhcigpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdG9yZU1lc3NhZ2luZyh3aWRnZXQ6IFdpZGdldCwgd2lkZ2V0QXBpOiBDbGllbnRXaWRnZXRBcGkpIHtcbiAgICAgICAgdGhpcy5zdG9wTWVzc2FnaW5nKHdpZGdldCk7XG4gICAgICAgIHRoaXMud2lkZ2V0TWFwLnNldCh3aWRnZXQuaWQsIHdpZGdldEFwaSk7XG4gICAgfVxuXG4gICAgcHVibGljIHN0b3BNZXNzYWdpbmcod2lkZ2V0OiBXaWRnZXQpIHtcbiAgICAgICAgdGhpcy53aWRnZXRNYXAucmVtb3ZlKHdpZGdldC5pZCk/LnN0b3AoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0TWVzc2FnaW5nKHdpZGdldDogV2lkZ2V0KTogQ2xpZW50V2lkZ2V0QXBpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMud2lkZ2V0TWFwLmdldCh3aWRnZXQuaWQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFN0b3BzIHRoZSB3aWRnZXQgbWVzc2FnaW5nIGluc3RhbmNlIGZvciBhIGdpdmVuIHdpZGdldCBJRC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gd2lkZ2V0SWQgVGhlIHdpZGdldCBJRC5cbiAgICAgKiBAZGVwcmVjYXRlZCBXaWRnZXQgSURzIGFyZSBub3QgZ2xvYmFsbHkgdW5pcXVlLlxuICAgICAqL1xuICAgIHB1YmxpYyBzdG9wTWVzc2FnaW5nQnlJZCh3aWRnZXRJZDogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMud2lkZ2V0TWFwLnJlbW92ZSh3aWRnZXRJZCk/LnN0b3AoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSB3aWRnZXQgbWVzc2FnaW5nIGNsYXNzIGZvciBhIGdpdmVuIHdpZGdldCBJRC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gd2lkZ2V0SWQgVGhlIHdpZGdldCBJRC5cbiAgICAgKiBAcmV0dXJucyB7Q2xpZW50V2lkZ2V0QXBpfSBUaGUgd2lkZ2V0IEFQSSwgb3IgYSBmYWxzZXkgdmFsdWUgaWYgbm90IGZvdW5kLlxuICAgICAqIEBkZXByZWNhdGVkIFdpZGdldCBJRHMgYXJlIG5vdCBnbG9iYWxseSB1bmlxdWUuXG4gICAgICovXG4gICAgcHVibGljIGdldE1lc3NhZ2luZ0ZvcklkKHdpZGdldElkOiBzdHJpbmcpOiBDbGllbnRXaWRnZXRBcGkge1xuICAgICAgICByZXR1cm4gdGhpcy53aWRnZXRNYXAuZ2V0KHdpZGdldElkKTtcbiAgICB9XG59XG4iXX0=