"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NotificationStateSnapshot = exports.NotificationState = exports.NOTIFICATION_STATE_UPDATE = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _events = require("events");

var _NotificationColor = require("./NotificationColor");

/*
Copyright 2020 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const NOTIFICATION_STATE_UPDATE = "update";
exports.NOTIFICATION_STATE_UPDATE = NOTIFICATION_STATE_UPDATE;

class NotificationState extends _events.EventEmitter {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "_symbol", void 0);
    (0, _defineProperty2.default)(this, "_count", void 0);
    (0, _defineProperty2.default)(this, "_color", void 0);
  }

  get symbol() {
    return this._symbol;
  }

  get count() {
    return this._count;
  }

  get color() {
    return this._color;
  }

  get isIdle() {
    return this.color <= _NotificationColor.NotificationColor.None;
  }

  get isUnread() {
    return this.color >= _NotificationColor.NotificationColor.Bold;
  }

  get hasUnreadCount() {
    return this.color >= _NotificationColor.NotificationColor.Grey && (!!this.count || !!this.symbol);
  }

  get hasMentions() {
    return this.color >= _NotificationColor.NotificationColor.Red;
  }

  emitIfUpdated(snapshot) {
    if (snapshot.isDifferentFrom(this)) {
      this.emit(NOTIFICATION_STATE_UPDATE);
    }
  }

  snapshot() {
    return new NotificationStateSnapshot(this);
  }

  destroy() {
    this.removeAllListeners(NOTIFICATION_STATE_UPDATE);
  }

}

exports.NotificationState = NotificationState;

class NotificationStateSnapshot {
  constructor(state) {
    (0, _defineProperty2.default)(this, "symbol", void 0);
    (0, _defineProperty2.default)(this, "count", void 0);
    (0, _defineProperty2.default)(this, "color", void 0);
    this.symbol = state.symbol;
    this.count = state.count;
    this.color = state.color;
  }

  isDifferentFrom(other) {
    const before = {
      count: this.count,
      symbol: this.symbol,
      color: this.color
    };
    const after = {
      count: other.count,
      symbol: other.symbol,
      color: other.color
    };
    return JSON.stringify(before) !== JSON.stringify(after);
  }

}

exports.NotificationStateSnapshot = NotificationStateSnapshot;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zdG9yZXMvbm90aWZpY2F0aW9ucy9Ob3RpZmljYXRpb25TdGF0ZS50cyJdLCJuYW1lcyI6WyJOT1RJRklDQVRJT05fU1RBVEVfVVBEQVRFIiwiTm90aWZpY2F0aW9uU3RhdGUiLCJFdmVudEVtaXR0ZXIiLCJzeW1ib2wiLCJfc3ltYm9sIiwiY291bnQiLCJfY291bnQiLCJjb2xvciIsIl9jb2xvciIsImlzSWRsZSIsIk5vdGlmaWNhdGlvbkNvbG9yIiwiTm9uZSIsImlzVW5yZWFkIiwiQm9sZCIsImhhc1VucmVhZENvdW50IiwiR3JleSIsImhhc01lbnRpb25zIiwiUmVkIiwiZW1pdElmVXBkYXRlZCIsInNuYXBzaG90IiwiaXNEaWZmZXJlbnRGcm9tIiwiZW1pdCIsIk5vdGlmaWNhdGlvblN0YXRlU25hcHNob3QiLCJkZXN0cm95IiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwiY29uc3RydWN0b3IiLCJzdGF0ZSIsIm90aGVyIiwiYmVmb3JlIiwiYWZ0ZXIiLCJKU09OIiwic3RyaW5naWZ5Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQWdCQTs7QUFDQTs7QUFqQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTU8sTUFBTUEseUJBQXlCLEdBQUcsUUFBbEM7OztBQUVBLE1BQWVDLGlCQUFmLFNBQXlDQyxvQkFBekMsQ0FBOEU7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBS2hFLE1BQU5DLE1BQU0sR0FBVztBQUN4QixXQUFPLEtBQUtDLE9BQVo7QUFDSDs7QUFFZSxNQUFMQyxLQUFLLEdBQVc7QUFDdkIsV0FBTyxLQUFLQyxNQUFaO0FBQ0g7O0FBRWUsTUFBTEMsS0FBSyxHQUFzQjtBQUNsQyxXQUFPLEtBQUtDLE1BQVo7QUFDSDs7QUFFZ0IsTUFBTkMsTUFBTSxHQUFZO0FBQ3pCLFdBQU8sS0FBS0YsS0FBTCxJQUFjRyxxQ0FBa0JDLElBQXZDO0FBQ0g7O0FBRWtCLE1BQVJDLFFBQVEsR0FBWTtBQUMzQixXQUFPLEtBQUtMLEtBQUwsSUFBY0cscUNBQWtCRyxJQUF2QztBQUNIOztBQUV3QixNQUFkQyxjQUFjLEdBQVk7QUFDakMsV0FBTyxLQUFLUCxLQUFMLElBQWNHLHFDQUFrQkssSUFBaEMsS0FBeUMsQ0FBQyxDQUFDLEtBQUtWLEtBQVAsSUFBZ0IsQ0FBQyxDQUFDLEtBQUtGLE1BQWhFLENBQVA7QUFDSDs7QUFFcUIsTUFBWGEsV0FBVyxHQUFZO0FBQzlCLFdBQU8sS0FBS1QsS0FBTCxJQUFjRyxxQ0FBa0JPLEdBQXZDO0FBQ0g7O0FBRVNDLEVBQUFBLGFBQWEsQ0FBQ0MsUUFBRCxFQUFzQztBQUN6RCxRQUFJQSxRQUFRLENBQUNDLGVBQVQsQ0FBeUIsSUFBekIsQ0FBSixFQUFvQztBQUNoQyxXQUFLQyxJQUFMLENBQVVyQix5QkFBVjtBQUNIO0FBQ0o7O0FBRVNtQixFQUFBQSxRQUFRLEdBQThCO0FBQzVDLFdBQU8sSUFBSUcseUJBQUosQ0FBOEIsSUFBOUIsQ0FBUDtBQUNIOztBQUVNQyxFQUFBQSxPQUFPLEdBQVM7QUFDbkIsU0FBS0Msa0JBQUwsQ0FBd0J4Qix5QkFBeEI7QUFDSDs7QUE3Q2dGOzs7O0FBZ0Q5RSxNQUFNc0IseUJBQU4sQ0FBZ0M7QUFLbkNHLEVBQUFBLFdBQVcsQ0FBQ0MsS0FBRCxFQUEyQjtBQUFBO0FBQUE7QUFBQTtBQUNsQyxTQUFLdkIsTUFBTCxHQUFjdUIsS0FBSyxDQUFDdkIsTUFBcEI7QUFDQSxTQUFLRSxLQUFMLEdBQWFxQixLQUFLLENBQUNyQixLQUFuQjtBQUNBLFNBQUtFLEtBQUwsR0FBYW1CLEtBQUssQ0FBQ25CLEtBQW5CO0FBQ0g7O0FBRU1hLEVBQUFBLGVBQWUsQ0FBQ08sS0FBRCxFQUFvQztBQUN0RCxVQUFNQyxNQUFNLEdBQUc7QUFBRXZCLE1BQUFBLEtBQUssRUFBRSxLQUFLQSxLQUFkO0FBQXFCRixNQUFBQSxNQUFNLEVBQUUsS0FBS0EsTUFBbEM7QUFBMENJLE1BQUFBLEtBQUssRUFBRSxLQUFLQTtBQUF0RCxLQUFmO0FBQ0EsVUFBTXNCLEtBQUssR0FBRztBQUFFeEIsTUFBQUEsS0FBSyxFQUFFc0IsS0FBSyxDQUFDdEIsS0FBZjtBQUFzQkYsTUFBQUEsTUFBTSxFQUFFd0IsS0FBSyxDQUFDeEIsTUFBcEM7QUFBNENJLE1BQUFBLEtBQUssRUFBRW9CLEtBQUssQ0FBQ3BCO0FBQXpELEtBQWQ7QUFDQSxXQUFPdUIsSUFBSSxDQUFDQyxTQUFMLENBQWVILE1BQWYsTUFBMkJFLElBQUksQ0FBQ0MsU0FBTCxDQUFlRixLQUFmLENBQWxDO0FBQ0g7O0FBZmtDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbkNvcHlyaWdodCAyMDIwIFRoZSBNYXRyaXgub3JnIEZvdW5kYXRpb24gQy5JLkMuXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSBcImV2ZW50c1wiO1xuaW1wb3J0IHsgTm90aWZpY2F0aW9uQ29sb3IgfSBmcm9tIFwiLi9Ob3RpZmljYXRpb25Db2xvclwiO1xuaW1wb3J0IHsgSURlc3Ryb3lhYmxlIH0gZnJvbSBcIi4uLy4uL3V0aWxzL0lEZXN0cm95YWJsZVwiO1xuXG5leHBvcnQgY29uc3QgTk9USUZJQ0FUSU9OX1NUQVRFX1VQREFURSA9IFwidXBkYXRlXCI7XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBOb3RpZmljYXRpb25TdGF0ZSBleHRlbmRzIEV2ZW50RW1pdHRlciBpbXBsZW1lbnRzIElEZXN0cm95YWJsZSB7XG4gICAgcHJvdGVjdGVkIF9zeW1ib2w6IHN0cmluZztcbiAgICBwcm90ZWN0ZWQgX2NvdW50OiBudW1iZXI7XG4gICAgcHJvdGVjdGVkIF9jb2xvcjogTm90aWZpY2F0aW9uQ29sb3I7XG5cbiAgICBwdWJsaWMgZ2V0IHN5bWJvbCgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5fc3ltYm9sO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgY291bnQoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvdW50O1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgY29sb3IoKTogTm90aWZpY2F0aW9uQ29sb3Ige1xuICAgICAgICByZXR1cm4gdGhpcy5fY29sb3I7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBpc0lkbGUoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbG9yIDw9IE5vdGlmaWNhdGlvbkNvbG9yLk5vbmU7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBpc1VucmVhZCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29sb3IgPj0gTm90aWZpY2F0aW9uQ29sb3IuQm9sZDtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGhhc1VucmVhZENvdW50KCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5jb2xvciA+PSBOb3RpZmljYXRpb25Db2xvci5HcmV5ICYmICghIXRoaXMuY291bnQgfHwgISF0aGlzLnN5bWJvbCk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBoYXNNZW50aW9ucygpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29sb3IgPj0gTm90aWZpY2F0aW9uQ29sb3IuUmVkO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBlbWl0SWZVcGRhdGVkKHNuYXBzaG90OiBOb3RpZmljYXRpb25TdGF0ZVNuYXBzaG90KSB7XG4gICAgICAgIGlmIChzbmFwc2hvdC5pc0RpZmZlcmVudEZyb20odGhpcykpIHtcbiAgICAgICAgICAgIHRoaXMuZW1pdChOT1RJRklDQVRJT05fU1RBVEVfVVBEQVRFKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByb3RlY3RlZCBzbmFwc2hvdCgpOiBOb3RpZmljYXRpb25TdGF0ZVNuYXBzaG90IHtcbiAgICAgICAgcmV0dXJuIG5ldyBOb3RpZmljYXRpb25TdGF0ZVNuYXBzaG90KHRoaXMpO1xuICAgIH1cblxuICAgIHB1YmxpYyBkZXN0cm95KCk6IHZvaWQge1xuICAgICAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycyhOT1RJRklDQVRJT05fU1RBVEVfVVBEQVRFKTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBOb3RpZmljYXRpb25TdGF0ZVNuYXBzaG90IHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IHN5bWJvbDogc3RyaW5nO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgY291bnQ6IG51bWJlcjtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGNvbG9yOiBOb3RpZmljYXRpb25Db2xvcjtcblxuICAgIGNvbnN0cnVjdG9yKHN0YXRlOiBOb3RpZmljYXRpb25TdGF0ZSkge1xuICAgICAgICB0aGlzLnN5bWJvbCA9IHN0YXRlLnN5bWJvbDtcbiAgICAgICAgdGhpcy5jb3VudCA9IHN0YXRlLmNvdW50O1xuICAgICAgICB0aGlzLmNvbG9yID0gc3RhdGUuY29sb3I7XG4gICAgfVxuXG4gICAgcHVibGljIGlzRGlmZmVyZW50RnJvbShvdGhlcjogTm90aWZpY2F0aW9uU3RhdGUpOiBib29sZWFuIHtcbiAgICAgICAgY29uc3QgYmVmb3JlID0geyBjb3VudDogdGhpcy5jb3VudCwgc3ltYm9sOiB0aGlzLnN5bWJvbCwgY29sb3I6IHRoaXMuY29sb3IgfTtcbiAgICAgICAgY29uc3QgYWZ0ZXIgPSB7IGNvdW50OiBvdGhlci5jb3VudCwgc3ltYm9sOiBvdGhlci5zeW1ib2wsIGNvbG9yOiBvdGhlci5jb2xvciB9O1xuICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoYmVmb3JlKSAhPT0gSlNPTi5zdHJpbmdpZnkoYWZ0ZXIpO1xuICAgIH1cbn1cbiJdfQ==