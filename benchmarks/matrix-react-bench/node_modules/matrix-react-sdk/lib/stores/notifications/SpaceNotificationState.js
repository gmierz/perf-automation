"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SpaceNotificationState = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _NotificationColor = require("./NotificationColor");

var _arrays = require("../../utils/arrays");

var _NotificationState = require("./NotificationState");

/*
Copyright 2021 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
class SpaceNotificationState extends _NotificationState.NotificationState {
  // exposed only for tests
  constructor(spaceId, getRoomFn) {
    super();
    this.spaceId = spaceId;
    this.getRoomFn = getRoomFn;
    (0, _defineProperty2.default)(this, "rooms", []);
    (0, _defineProperty2.default)(this, "states", {});
    (0, _defineProperty2.default)(this, "onRoomNotificationStateUpdate", () => {
      this.calculateTotalState();
    });
  }

  get symbol() {
    return this._color === _NotificationColor.NotificationColor.Unsent ? "!" : null;
  }

  setRooms(rooms) {
    const oldRooms = this.rooms;
    const diff = (0, _arrays.arrayDiff)(oldRooms, rooms);
    this.rooms = rooms;

    for (const oldRoom of diff.removed) {
      const state = this.states[oldRoom.roomId];
      if (!state) continue; // We likely just didn't have a badge (race condition)

      delete this.states[oldRoom.roomId];
      state.off(_NotificationState.NOTIFICATION_STATE_UPDATE, this.onRoomNotificationStateUpdate);
    }

    for (const newRoom of diff.added) {
      const state = this.getRoomFn(newRoom);
      state.on(_NotificationState.NOTIFICATION_STATE_UPDATE, this.onRoomNotificationStateUpdate);
      this.states[newRoom.roomId] = state;
    }

    this.calculateTotalState();
  }

  getFirstRoomWithNotifications() {
    var _Object$values$find;

    return (_Object$values$find = Object.values(this.states).find(state => state.color >= this.color)) === null || _Object$values$find === void 0 ? void 0 : _Object$values$find.room.roomId;
  }

  destroy() {
    super.destroy();

    for (const state of Object.values(this.states)) {
      state.off(_NotificationState.NOTIFICATION_STATE_UPDATE, this.onRoomNotificationStateUpdate);
    }

    this.states = {};
  }

  calculateTotalState() {
    const snapshot = this.snapshot();
    this._count = 0;
    this._color = _NotificationColor.NotificationColor.None;

    for (const state of Object.values(this.states)) {
      this._count += state.count;
      this._color = Math.max(this.color, state.color);
    } // finally, publish an update if needed


    this.emitIfUpdated(snapshot);
  }

}

exports.SpaceNotificationState = SpaceNotificationState;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zdG9yZXMvbm90aWZpY2F0aW9ucy9TcGFjZU5vdGlmaWNhdGlvblN0YXRlLnRzIl0sIm5hbWVzIjpbIlNwYWNlTm90aWZpY2F0aW9uU3RhdGUiLCJOb3RpZmljYXRpb25TdGF0ZSIsImNvbnN0cnVjdG9yIiwic3BhY2VJZCIsImdldFJvb21GbiIsImNhbGN1bGF0ZVRvdGFsU3RhdGUiLCJzeW1ib2wiLCJfY29sb3IiLCJOb3RpZmljYXRpb25Db2xvciIsIlVuc2VudCIsInNldFJvb21zIiwicm9vbXMiLCJvbGRSb29tcyIsImRpZmYiLCJvbGRSb29tIiwicmVtb3ZlZCIsInN0YXRlIiwic3RhdGVzIiwicm9vbUlkIiwib2ZmIiwiTk9USUZJQ0FUSU9OX1NUQVRFX1VQREFURSIsIm9uUm9vbU5vdGlmaWNhdGlvblN0YXRlVXBkYXRlIiwibmV3Um9vbSIsImFkZGVkIiwib24iLCJnZXRGaXJzdFJvb21XaXRoTm90aWZpY2F0aW9ucyIsIk9iamVjdCIsInZhbHVlcyIsImZpbmQiLCJjb2xvciIsInJvb20iLCJkZXN0cm95Iiwic25hcHNob3QiLCJfY291bnQiLCJOb25lIiwiY291bnQiLCJNYXRoIiwibWF4IiwiZW1pdElmVXBkYXRlZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFrQkE7O0FBQ0E7O0FBRUE7O0FBckJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVVPLE1BQU1BLHNCQUFOLFNBQXFDQyxvQ0FBckMsQ0FBdUQ7QUFDL0I7QUFHM0JDLEVBQUFBLFdBQVcsQ0FBU0MsT0FBVCxFQUEyQ0MsU0FBM0MsRUFBbUU7QUFDMUU7QUFEMEUsU0FBMURELE9BQTBELEdBQTFEQSxPQUEwRDtBQUFBLFNBQXhCQyxTQUF3QixHQUF4QkEsU0FBd0I7QUFBQSxpREFIdkQsRUFHdUQ7QUFBQSxrREFGZixFQUVlO0FBQUEseUVBdUN0QyxNQUFNO0FBQzFDLFdBQUtDLG1CQUFMO0FBQ0gsS0F6QzZFO0FBRTdFOztBQUVnQixNQUFOQyxNQUFNLEdBQVc7QUFDeEIsV0FBTyxLQUFLQyxNQUFMLEtBQWdCQyxxQ0FBa0JDLE1BQWxDLEdBQTJDLEdBQTNDLEdBQWlELElBQXhEO0FBQ0g7O0FBRU1DLEVBQUFBLFFBQVEsQ0FBQ0MsS0FBRCxFQUFnQjtBQUMzQixVQUFNQyxRQUFRLEdBQUcsS0FBS0QsS0FBdEI7QUFDQSxVQUFNRSxJQUFJLEdBQUcsdUJBQVVELFFBQVYsRUFBb0JELEtBQXBCLENBQWI7QUFDQSxTQUFLQSxLQUFMLEdBQWFBLEtBQWI7O0FBQ0EsU0FBSyxNQUFNRyxPQUFYLElBQXNCRCxJQUFJLENBQUNFLE9BQTNCLEVBQW9DO0FBQ2hDLFlBQU1DLEtBQUssR0FBRyxLQUFLQyxNQUFMLENBQVlILE9BQU8sQ0FBQ0ksTUFBcEIsQ0FBZDtBQUNBLFVBQUksQ0FBQ0YsS0FBTCxFQUFZLFNBRm9CLENBRVY7O0FBQ3RCLGFBQU8sS0FBS0MsTUFBTCxDQUFZSCxPQUFPLENBQUNJLE1BQXBCLENBQVA7QUFDQUYsTUFBQUEsS0FBSyxDQUFDRyxHQUFOLENBQVVDLDRDQUFWLEVBQXFDLEtBQUtDLDZCQUExQztBQUNIOztBQUNELFNBQUssTUFBTUMsT0FBWCxJQUFzQlQsSUFBSSxDQUFDVSxLQUEzQixFQUFrQztBQUM5QixZQUFNUCxLQUFLLEdBQUcsS0FBS1osU0FBTCxDQUFla0IsT0FBZixDQUFkO0FBQ0FOLE1BQUFBLEtBQUssQ0FBQ1EsRUFBTixDQUFTSiw0Q0FBVCxFQUFvQyxLQUFLQyw2QkFBekM7QUFDQSxXQUFLSixNQUFMLENBQVlLLE9BQU8sQ0FBQ0osTUFBcEIsSUFBOEJGLEtBQTlCO0FBQ0g7O0FBRUQsU0FBS1gsbUJBQUw7QUFDSDs7QUFFTW9CLEVBQUFBLDZCQUE2QixHQUFHO0FBQUE7O0FBQ25DLGtDQUFPQyxNQUFNLENBQUNDLE1BQVAsQ0FBYyxLQUFLVixNQUFuQixFQUEyQlcsSUFBM0IsQ0FBZ0NaLEtBQUssSUFBSUEsS0FBSyxDQUFDYSxLQUFOLElBQWUsS0FBS0EsS0FBN0QsQ0FBUCx3REFBTyxvQkFBcUVDLElBQXJFLENBQTBFWixNQUFqRjtBQUNIOztBQUVNYSxFQUFBQSxPQUFPLEdBQUc7QUFDYixVQUFNQSxPQUFOOztBQUNBLFNBQUssTUFBTWYsS0FBWCxJQUFvQlUsTUFBTSxDQUFDQyxNQUFQLENBQWMsS0FBS1YsTUFBbkIsQ0FBcEIsRUFBZ0Q7QUFDNUNELE1BQUFBLEtBQUssQ0FBQ0csR0FBTixDQUFVQyw0Q0FBVixFQUFxQyxLQUFLQyw2QkFBMUM7QUFDSDs7QUFDRCxTQUFLSixNQUFMLEdBQWMsRUFBZDtBQUNIOztBQU1PWixFQUFBQSxtQkFBbUIsR0FBRztBQUMxQixVQUFNMkIsUUFBUSxHQUFHLEtBQUtBLFFBQUwsRUFBakI7QUFFQSxTQUFLQyxNQUFMLEdBQWMsQ0FBZDtBQUNBLFNBQUsxQixNQUFMLEdBQWNDLHFDQUFrQjBCLElBQWhDOztBQUNBLFNBQUssTUFBTWxCLEtBQVgsSUFBb0JVLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjLEtBQUtWLE1BQW5CLENBQXBCLEVBQWdEO0FBQzVDLFdBQUtnQixNQUFMLElBQWVqQixLQUFLLENBQUNtQixLQUFyQjtBQUNBLFdBQUs1QixNQUFMLEdBQWM2QixJQUFJLENBQUNDLEdBQUwsQ0FBUyxLQUFLUixLQUFkLEVBQXFCYixLQUFLLENBQUNhLEtBQTNCLENBQWQ7QUFDSCxLQVJ5QixDQVUxQjs7O0FBQ0EsU0FBS1MsYUFBTCxDQUFtQk4sUUFBbkI7QUFDSDs7QUEzRHlEIiwic291cmNlc0NvbnRlbnQiOlsiLypcbkNvcHlyaWdodCAyMDIxIFRoZSBNYXRyaXgub3JnIEZvdW5kYXRpb24gQy5JLkMuXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuaW1wb3J0IHsgUm9vbSB9IGZyb20gXCJtYXRyaXgtanMtc2RrL3NyYy9tb2RlbHMvcm9vbVwiO1xuXG5pbXBvcnQgeyBOb3RpZmljYXRpb25Db2xvciB9IGZyb20gXCIuL05vdGlmaWNhdGlvbkNvbG9yXCI7XG5pbXBvcnQgeyBhcnJheURpZmYgfSBmcm9tIFwiLi4vLi4vdXRpbHMvYXJyYXlzXCI7XG5pbXBvcnQgeyBSb29tTm90aWZpY2F0aW9uU3RhdGUgfSBmcm9tIFwiLi9Sb29tTm90aWZpY2F0aW9uU3RhdGVcIjtcbmltcG9ydCB7IE5PVElGSUNBVElPTl9TVEFURV9VUERBVEUsIE5vdGlmaWNhdGlvblN0YXRlIH0gZnJvbSBcIi4vTm90aWZpY2F0aW9uU3RhdGVcIjtcbmltcG9ydCB7IEZldGNoUm9vbUZuIH0gZnJvbSBcIi4vTGlzdE5vdGlmaWNhdGlvblN0YXRlXCI7XG5cbmV4cG9ydCBjbGFzcyBTcGFjZU5vdGlmaWNhdGlvblN0YXRlIGV4dGVuZHMgTm90aWZpY2F0aW9uU3RhdGUge1xuICAgIHB1YmxpYyByb29tczogUm9vbVtdID0gW107IC8vIGV4cG9zZWQgb25seSBmb3IgdGVzdHNcbiAgICBwcml2YXRlIHN0YXRlczogeyBbc3BhY2VJZDogc3RyaW5nXTogUm9vbU5vdGlmaWNhdGlvblN0YXRlIH0gPSB7fTtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgc3BhY2VJZDogc3RyaW5nIHwgc3ltYm9sLCBwcml2YXRlIGdldFJvb21GbjogRmV0Y2hSb29tRm4pIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IHN5bWJvbCgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5fY29sb3IgPT09IE5vdGlmaWNhdGlvbkNvbG9yLlVuc2VudCA/IFwiIVwiIDogbnVsbDtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0Um9vbXMocm9vbXM6IFJvb21bXSkge1xuICAgICAgICBjb25zdCBvbGRSb29tcyA9IHRoaXMucm9vbXM7XG4gICAgICAgIGNvbnN0IGRpZmYgPSBhcnJheURpZmYob2xkUm9vbXMsIHJvb21zKTtcbiAgICAgICAgdGhpcy5yb29tcyA9IHJvb21zO1xuICAgICAgICBmb3IgKGNvbnN0IG9sZFJvb20gb2YgZGlmZi5yZW1vdmVkKSB7XG4gICAgICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMuc3RhdGVzW29sZFJvb20ucm9vbUlkXTtcbiAgICAgICAgICAgIGlmICghc3RhdGUpIGNvbnRpbnVlOyAvLyBXZSBsaWtlbHkganVzdCBkaWRuJ3QgaGF2ZSBhIGJhZGdlIChyYWNlIGNvbmRpdGlvbilcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnN0YXRlc1tvbGRSb29tLnJvb21JZF07XG4gICAgICAgICAgICBzdGF0ZS5vZmYoTk9USUZJQ0FUSU9OX1NUQVRFX1VQREFURSwgdGhpcy5vblJvb21Ob3RpZmljYXRpb25TdGF0ZVVwZGF0ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBuZXdSb29tIG9mIGRpZmYuYWRkZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5nZXRSb29tRm4obmV3Um9vbSk7XG4gICAgICAgICAgICBzdGF0ZS5vbihOT1RJRklDQVRJT05fU1RBVEVfVVBEQVRFLCB0aGlzLm9uUm9vbU5vdGlmaWNhdGlvblN0YXRlVXBkYXRlKTtcbiAgICAgICAgICAgIHRoaXMuc3RhdGVzW25ld1Jvb20ucm9vbUlkXSA9IHN0YXRlO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jYWxjdWxhdGVUb3RhbFN0YXRlKCk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldEZpcnN0Um9vbVdpdGhOb3RpZmljYXRpb25zKCkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyh0aGlzLnN0YXRlcykuZmluZChzdGF0ZSA9PiBzdGF0ZS5jb2xvciA+PSB0aGlzLmNvbG9yKT8ucm9vbS5yb29tSWQ7XG4gICAgfVxuXG4gICAgcHVibGljIGRlc3Ryb3koKSB7XG4gICAgICAgIHN1cGVyLmRlc3Ryb3koKTtcbiAgICAgICAgZm9yIChjb25zdCBzdGF0ZSBvZiBPYmplY3QudmFsdWVzKHRoaXMuc3RhdGVzKSkge1xuICAgICAgICAgICAgc3RhdGUub2ZmKE5PVElGSUNBVElPTl9TVEFURV9VUERBVEUsIHRoaXMub25Sb29tTm90aWZpY2F0aW9uU3RhdGVVcGRhdGUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3RhdGVzID0ge307XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvblJvb21Ob3RpZmljYXRpb25TdGF0ZVVwZGF0ZSA9ICgpID0+IHtcbiAgICAgICAgdGhpcy5jYWxjdWxhdGVUb3RhbFN0YXRlKCk7XG4gICAgfTtcblxuICAgIHByaXZhdGUgY2FsY3VsYXRlVG90YWxTdGF0ZSgpIHtcbiAgICAgICAgY29uc3Qgc25hcHNob3QgPSB0aGlzLnNuYXBzaG90KCk7XG5cbiAgICAgICAgdGhpcy5fY291bnQgPSAwO1xuICAgICAgICB0aGlzLl9jb2xvciA9IE5vdGlmaWNhdGlvbkNvbG9yLk5vbmU7XG4gICAgICAgIGZvciAoY29uc3Qgc3RhdGUgb2YgT2JqZWN0LnZhbHVlcyh0aGlzLnN0YXRlcykpIHtcbiAgICAgICAgICAgIHRoaXMuX2NvdW50ICs9IHN0YXRlLmNvdW50O1xuICAgICAgICAgICAgdGhpcy5fY29sb3IgPSBNYXRoLm1heCh0aGlzLmNvbG9yLCBzdGF0ZS5jb2xvcik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBmaW5hbGx5LCBwdWJsaXNoIGFuIHVwZGF0ZSBpZiBuZWVkZWRcbiAgICAgICAgdGhpcy5lbWl0SWZVcGRhdGVkKHNuYXBzaG90KTtcbiAgICB9XG59XG4iXX0=