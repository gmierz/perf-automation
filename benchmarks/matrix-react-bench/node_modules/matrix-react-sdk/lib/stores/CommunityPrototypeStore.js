"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CommunityPrototypeStore = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _AsyncStoreWithClient = require("./AsyncStoreWithClient");

var _dispatcher = _interopRequireDefault(require("../dispatcher/dispatcher"));

var _actions = require("../dispatcher/actions");

var _membership = require("../utils/membership");

var _SettingsStore = _interopRequireDefault(require("../settings/SettingsStore"));

var utils = _interopRequireWildcard(require("matrix-js-sdk/src/utils"));

var _AsyncStore = require("./AsyncStore");

var _FlairStore = _interopRequireDefault(require("./FlairStore"));

var _GroupFilterOrderStore = _interopRequireDefault(require("./GroupFilterOrderStore"));

var _GroupStore = _interopRequireDefault(require("./GroupStore"));

var _logger = require("matrix-js-sdk/src/logger");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
Copyright 2020 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
class CommunityPrototypeStore extends _AsyncStoreWithClient.AsyncStoreWithClient {
  constructor() {
    super(_dispatcher.default, {});
  }

  static get instance() {
    return CommunityPrototypeStore.internalInstance;
  }

  static getUpdateEventName(roomId) {
    return `${_AsyncStore.UPDATE_EVENT}:${roomId}`;
  }

  getSelectedCommunityId() {
    if (_SettingsStore.default.getValue("feature_communities_v2_prototypes")) {
      return _GroupFilterOrderStore.default.getSelectedTags()[0];
    }

    return null; // no selection as far as this function is concerned
  }

  getSelectedCommunityName() {
    return CommunityPrototypeStore.instance.getCommunityName(this.getSelectedCommunityId());
  }

  getSelectedCommunityGeneralChat() {
    const communityId = this.getSelectedCommunityId();

    if (communityId) {
      return this.getGeneralChat(communityId);
    }
  }

  getCommunityName(communityId) {
    const profile = _FlairStore.default.getGroupProfileCachedFast(this.matrixClient, communityId);

    return (profile === null || profile === void 0 ? void 0 : profile.name) || communityId;
  }

  getCommunityProfile(communityId) {
    return _FlairStore.default.getGroupProfileCachedFast(this.matrixClient, communityId);
  }

  getGeneralChat(communityId) {
    const rooms = _GroupStore.default.getGroupRooms(communityId).map(r => this.matrixClient.getRoom(r.roomId)).filter(r => !!r);

    let chat = rooms.find(r => {
      const idState = r.currentState.getStateEvents("im.vector.general_chat", "");
      if (!idState || idState.getContent()['groupId'] !== communityId) return false;
      return true;
    });
    if (!chat) chat = rooms[0];
    return chat; // can be null
  }

  isAdminOf(communityId) {
    const members = _GroupStore.default.getGroupMembers(communityId);

    const myMember = members.find(m => m.userId === this.matrixClient.getUserId());
    return myMember === null || myMember === void 0 ? void 0 : myMember.isPrivileged;
  }

  canInviteTo(communityId) {
    const generalChat = this.getGeneralChat(communityId);
    if (!generalChat) return this.isAdminOf(communityId);
    const myMember = generalChat.getMember(this.matrixClient.getUserId());
    if (!myMember) return this.isAdminOf(communityId);
    const pl = generalChat.currentState.getStateEvents("m.room.power_levels", "");
    if (!pl) return this.isAdminOf(communityId);
    const plContent = pl.getContent();
    const invitePl = (0, utils.isNullOrUndefined)(plContent.invite) ? 50 : Number(plContent.invite);
    return invitePl <= myMember.powerLevel;
  }

  async onAction(payload) {
    if (!this.matrixClient || !_SettingsStore.default.getValue("feature_communities_v2_prototypes")) {
      return;
    }

    if (payload.action === "MatrixActions.Room.myMembership") {
      const room = payload.room;
      const membership = (0, _membership.getEffectiveMembership)(payload.membership);
      const oldMembership = (0, _membership.getEffectiveMembership)(payload.oldMembership);
      if (membership === oldMembership) return;

      if (membership === _membership.EffectiveMembership.Invite) {
        try {
          const path = utils.encodeUri("/rooms/$roomId/group_info", {
            $roomId: room.roomId
          });
          const profile = await this.matrixClient.http.authedRequest(undefined, "GET", path, undefined, undefined, {
            prefix: "/_matrix/client/unstable/im.vector.custom"
          }); // we use global account data because per-room account data on invites is unreliable

          await this.matrixClient.setAccountData("im.vector.group_info." + room.roomId, profile);
        } catch (e) {
          _logger.logger.warn("Non-fatal error getting group information for invite:", e);
        }
      }
    } else if (payload.action === "MatrixActions.accountData") {
      if (payload.event_type.startsWith("im.vector.group_info.")) {
        const roomId = payload.event_type.substring("im.vector.group_info.".length);
        this.emit(CommunityPrototypeStore.getUpdateEventName(roomId), roomId);
      }
    } else if (payload.action === "select_tag") {
      // Automatically select the general chat when switching communities
      const chat = this.getGeneralChat(payload.tag);

      if (chat) {
        _dispatcher.default.dispatch({
          action: _actions.Action.ViewRoom,
          room_id: chat.roomId
        });
      }
    }
  }

  getInviteProfile(roomId) {
    if (!this.matrixClient) return {
      displayName: null,
      avatarMxc: null
    };
    const room = this.matrixClient.getRoom(roomId);

    if (_SettingsStore.default.getValue("feature_communities_v2_prototypes")) {
      const data = this.matrixClient.getAccountData("im.vector.group_info." + roomId);

      if (data && data.getContent()) {
        return {
          displayName: data.getContent().name,
          avatarMxc: data.getContent().avatar_url
        };
      }
    }

    return {
      displayName: room.name,
      avatarMxc: room.getMxcAvatarUrl()
    };
  }

  async onReady() {
    for (const room of this.matrixClient.getRooms()) {
      const myMember = room.currentState.getMembers().find(m => m.userId === this.matrixClient.getUserId());
      if (!myMember) continue;

      if ((0, _membership.getEffectiveMembership)(myMember.membership) === _membership.EffectiveMembership.Invite) {
        // Fake an update for anything that might have started listening before the invite
        // data was available (eg: RoomPreviewBar after a refresh)
        this.emit(CommunityPrototypeStore.getUpdateEventName(room.roomId), room.roomId);
      }
    }
  }

}

exports.CommunityPrototypeStore = CommunityPrototypeStore;
(0, _defineProperty2.default)(CommunityPrototypeStore, "internalInstance", new CommunityPrototypeStore());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdG9yZXMvQ29tbXVuaXR5UHJvdG90eXBlU3RvcmUudHMiXSwibmFtZXMiOlsiQ29tbXVuaXR5UHJvdG90eXBlU3RvcmUiLCJBc3luY1N0b3JlV2l0aENsaWVudCIsImNvbnN0cnVjdG9yIiwiZGVmYXVsdERpc3BhdGNoZXIiLCJpbnN0YW5jZSIsImludGVybmFsSW5zdGFuY2UiLCJnZXRVcGRhdGVFdmVudE5hbWUiLCJyb29tSWQiLCJVUERBVEVfRVZFTlQiLCJnZXRTZWxlY3RlZENvbW11bml0eUlkIiwiU2V0dGluZ3NTdG9yZSIsImdldFZhbHVlIiwiR3JvdXBGaWx0ZXJPcmRlclN0b3JlIiwiZ2V0U2VsZWN0ZWRUYWdzIiwiZ2V0U2VsZWN0ZWRDb21tdW5pdHlOYW1lIiwiZ2V0Q29tbXVuaXR5TmFtZSIsImdldFNlbGVjdGVkQ29tbXVuaXR5R2VuZXJhbENoYXQiLCJjb21tdW5pdHlJZCIsImdldEdlbmVyYWxDaGF0IiwicHJvZmlsZSIsIkZsYWlyU3RvcmUiLCJnZXRHcm91cFByb2ZpbGVDYWNoZWRGYXN0IiwibWF0cml4Q2xpZW50IiwibmFtZSIsImdldENvbW11bml0eVByb2ZpbGUiLCJyb29tcyIsIkdyb3VwU3RvcmUiLCJnZXRHcm91cFJvb21zIiwibWFwIiwiciIsImdldFJvb20iLCJmaWx0ZXIiLCJjaGF0IiwiZmluZCIsImlkU3RhdGUiLCJjdXJyZW50U3RhdGUiLCJnZXRTdGF0ZUV2ZW50cyIsImdldENvbnRlbnQiLCJpc0FkbWluT2YiLCJtZW1iZXJzIiwiZ2V0R3JvdXBNZW1iZXJzIiwibXlNZW1iZXIiLCJtIiwidXNlcklkIiwiZ2V0VXNlcklkIiwiaXNQcml2aWxlZ2VkIiwiY2FuSW52aXRlVG8iLCJnZW5lcmFsQ2hhdCIsImdldE1lbWJlciIsInBsIiwicGxDb250ZW50IiwiaW52aXRlUGwiLCJpbnZpdGUiLCJOdW1iZXIiLCJwb3dlckxldmVsIiwib25BY3Rpb24iLCJwYXlsb2FkIiwiYWN0aW9uIiwicm9vbSIsIm1lbWJlcnNoaXAiLCJvbGRNZW1iZXJzaGlwIiwiRWZmZWN0aXZlTWVtYmVyc2hpcCIsIkludml0ZSIsInBhdGgiLCJ1dGlscyIsImVuY29kZVVyaSIsIiRyb29tSWQiLCJodHRwIiwiYXV0aGVkUmVxdWVzdCIsInVuZGVmaW5lZCIsInByZWZpeCIsInNldEFjY291bnREYXRhIiwiZSIsImxvZ2dlciIsIndhcm4iLCJldmVudF90eXBlIiwic3RhcnRzV2l0aCIsInN1YnN0cmluZyIsImxlbmd0aCIsImVtaXQiLCJ0YWciLCJkaXMiLCJkaXNwYXRjaCIsIkFjdGlvbiIsIlZpZXdSb29tIiwicm9vbV9pZCIsImdldEludml0ZVByb2ZpbGUiLCJkaXNwbGF5TmFtZSIsImF2YXRhck14YyIsImRhdGEiLCJnZXRBY2NvdW50RGF0YSIsImF2YXRhcl91cmwiLCJnZXRNeGNBdmF0YXJVcmwiLCJvblJlYWR5IiwiZ2V0Um9vbXMiLCJnZXRNZW1iZXJzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQWdCQTs7QUFDQTs7QUFFQTs7QUFFQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFJQTs7Ozs7O0FBL0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQTRCTyxNQUFNQSx1QkFBTixTQUFzQ0MsMENBQXRDLENBQW1FO0FBRzlEQyxFQUFBQSxXQUFXLEdBQUc7QUFDbEIsVUFBTUMsbUJBQU4sRUFBeUIsRUFBekI7QUFDSDs7QUFFeUIsYUFBUkMsUUFBUSxHQUE0QjtBQUNsRCxXQUFPSix1QkFBdUIsQ0FBQ0ssZ0JBQS9CO0FBQ0g7O0FBRStCLFNBQWxCQyxrQkFBa0IsQ0FBQ0MsTUFBRCxFQUF5QjtBQUNyRCxXQUFRLEdBQUVDLHdCQUFhLElBQUdELE1BQU8sRUFBakM7QUFDSDs7QUFFTUUsRUFBQUEsc0JBQXNCLEdBQVc7QUFDcEMsUUFBSUMsdUJBQWNDLFFBQWQsQ0FBdUIsbUNBQXZCLENBQUosRUFB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SUFBSSxDQUFDbkQsTUFBaEQsQ0FBVixFQUFtRW1ELElBQUksQ0FBQ25ELE1BQXhFO0FBQ0g7QUFDSjtBQUNKOztBQWpKcUU7Ozs4QkFBN0RQLHVCLHNCQUN5QixJQUFJQSx1QkFBSixFIiwic291cmNlc0NvbnRlbnQiOlsiLypcbkNvcHlyaWdodCAyMDIwIFRoZSBNYXRyaXgub3JnIEZvdW5kYXRpb24gQy5JLkMuXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuaW1wb3J0IHsgQXN5bmNTdG9yZVdpdGhDbGllbnQgfSBmcm9tIFwiLi9Bc3luY1N0b3JlV2l0aENsaWVudFwiO1xuaW1wb3J0IGRlZmF1bHREaXNwYXRjaGVyIGZyb20gXCIuLi9kaXNwYXRjaGVyL2Rpc3BhdGNoZXJcIjtcbmltcG9ydCB7IEFjdGlvblBheWxvYWQgfSBmcm9tIFwiLi4vZGlzcGF0Y2hlci9wYXlsb2Fkc1wiO1xuaW1wb3J0IHsgQWN0aW9uIH0gZnJvbSBcIi4uL2Rpc3BhdGNoZXIvYWN0aW9uc1wiO1xuaW1wb3J0IHsgUm9vbSB9IGZyb20gXCJtYXRyaXgtanMtc2RrL3NyYy9tb2RlbHMvcm9vbVwiO1xuaW1wb3J0IHsgRWZmZWN0aXZlTWVtYmVyc2hpcCwgZ2V0RWZmZWN0aXZlTWVtYmVyc2hpcCB9IGZyb20gXCIuLi91dGlscy9tZW1iZXJzaGlwXCI7XG5pbXBvcnQgU2V0dGluZ3NTdG9yZSBmcm9tIFwiLi4vc2V0dGluZ3MvU2V0dGluZ3NTdG9yZVwiO1xuaW1wb3J0ICogYXMgdXRpbHMgZnJvbSBcIm1hdHJpeC1qcy1zZGsvc3JjL3V0aWxzXCI7XG5pbXBvcnQgeyBVUERBVEVfRVZFTlQgfSBmcm9tIFwiLi9Bc3luY1N0b3JlXCI7XG5pbXBvcnQgRmxhaXJTdG9yZSBmcm9tIFwiLi9GbGFpclN0b3JlXCI7XG5pbXBvcnQgR3JvdXBGaWx0ZXJPcmRlclN0b3JlIGZyb20gXCIuL0dyb3VwRmlsdGVyT3JkZXJTdG9yZVwiO1xuaW1wb3J0IEdyb3VwU3RvcmUgZnJvbSBcIi4vR3JvdXBTdG9yZVwiO1xuaW1wb3J0IGRpcyBmcm9tIFwiLi4vZGlzcGF0Y2hlci9kaXNwYXRjaGVyXCI7XG5pbXBvcnQgeyBpc051bGxPclVuZGVmaW5lZCB9IGZyb20gXCJtYXRyaXgtanMtc2RrL3NyYy91dGlsc1wiO1xuXG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tIFwibWF0cml4LWpzLXNkay9zcmMvbG9nZ2VyXCI7XG5cbmludGVyZmFjZSBJU3RhdGUge1xuICAgIC8vIG5vdGhpbmcgb2YgdmFsdWUgLSB3ZSB1c2UgYWNjb3VudCBkYXRhXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVJvb21Qcm9maWxlIHtcbiAgICBkaXNwbGF5TmFtZTogc3RyaW5nO1xuICAgIGF2YXRhck14Yzogc3RyaW5nO1xufVxuXG5leHBvcnQgY2xhc3MgQ29tbXVuaXR5UHJvdG90eXBlU3RvcmUgZXh0ZW5kcyBBc3luY1N0b3JlV2l0aENsaWVudDxJU3RhdGU+IHtcbiAgICBwcml2YXRlIHN0YXRpYyBpbnRlcm5hbEluc3RhbmNlID0gbmV3IENvbW11bml0eVByb3RvdHlwZVN0b3JlKCk7XG5cbiAgICBwcml2YXRlIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcihkZWZhdWx0RGlzcGF0Y2hlciwge30pO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0IGluc3RhbmNlKCk6IENvbW11bml0eVByb3RvdHlwZVN0b3JlIHtcbiAgICAgICAgcmV0dXJuIENvbW11bml0eVByb3RvdHlwZVN0b3JlLmludGVybmFsSW5zdGFuY2U7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBnZXRVcGRhdGVFdmVudE5hbWUocm9vbUlkOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gYCR7VVBEQVRFX0VWRU5UfToke3Jvb21JZH1gO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRTZWxlY3RlZENvbW11bml0eUlkKCk6IHN0cmluZyB7XG4gICAgICAgIGlmIChTZXR0aW5nc1N0b3JlLmdldFZhbHVlKFwiZmVhdHVyZV9jb21tdW5pdGllc192Ml9wcm90b3R5cGVzXCIpKSB7XG4gICAgICAgICAgICByZXR1cm4gR3JvdXBGaWx0ZXJPcmRlclN0b3JlLmdldFNlbGVjdGVkVGFncygpWzBdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsOyAvLyBubyBzZWxlY3Rpb24gYXMgZmFyIGFzIHRoaXMgZnVuY3Rpb24gaXMgY29uY2VybmVkXG4gICAgfVxuXG4gICAgcHVibGljIGdldFNlbGVjdGVkQ29tbXVuaXR5TmFtZSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gQ29tbXVuaXR5UHJvdG90eXBlU3RvcmUuaW5zdGFuY2UuZ2V0Q29tbXVuaXR5TmFtZSh0aGlzLmdldFNlbGVjdGVkQ29tbXVuaXR5SWQoKSk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldFNlbGVjdGVkQ29tbXVuaXR5R2VuZXJhbENoYXQoKTogUm9vbSB7XG4gICAgICAgIGNvbnN0IGNvbW11bml0eUlkID0gdGhpcy5nZXRTZWxlY3RlZENvbW11bml0eUlkKCk7XG4gICAgICAgIGlmIChjb21tdW5pdHlJZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0R2VuZXJhbENoYXQoY29tbXVuaXR5SWQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGdldENvbW11bml0eU5hbWUoY29tbXVuaXR5SWQ6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgIGNvbnN0IHByb2ZpbGUgPSBGbGFpclN0b3JlLmdldEdyb3VwUHJvZmlsZUNhY2hlZEZhc3QodGhpcy5tYXRyaXhDbGllbnQsIGNvbW11bml0eUlkKTtcbiAgICAgICAgcmV0dXJuIHByb2ZpbGU/Lm5hbWUgfHwgY29tbXVuaXR5SWQ7XG4gICAgfVxuXG4gICAgcHVibGljIGdldENvbW11bml0eVByb2ZpbGUoY29tbXVuaXR5SWQ6IHN0cmluZyk6IHsgbmFtZT86IHN0cmluZywgYXZhdGFyVXJsPzogc3RyaW5nIH0ge1xuICAgICAgICByZXR1cm4gRmxhaXJTdG9yZS5nZXRHcm91cFByb2ZpbGVDYWNoZWRGYXN0KHRoaXMubWF0cml4Q2xpZW50LCBjb21tdW5pdHlJZCk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldEdlbmVyYWxDaGF0KGNvbW11bml0eUlkOiBzdHJpbmcpOiBSb29tIHtcbiAgICAgICAgY29uc3Qgcm9vbXMgPSBHcm91cFN0b3JlLmdldEdyb3VwUm9vbXMoY29tbXVuaXR5SWQpXG4gICAgICAgICAgICAubWFwKHIgPT4gdGhpcy5tYXRyaXhDbGllbnQuZ2V0Um9vbShyLnJvb21JZCkpXG4gICAgICAgICAgICAuZmlsdGVyKHIgPT4gISFyKTtcbiAgICAgICAgbGV0IGNoYXQgPSByb29tcy5maW5kKHIgPT4ge1xuICAgICAgICAgICAgY29uc3QgaWRTdGF0ZSA9IHIuY3VycmVudFN0YXRlLmdldFN0YXRlRXZlbnRzKFwiaW0udmVjdG9yLmdlbmVyYWxfY2hhdFwiLCBcIlwiKTtcbiAgICAgICAgICAgIGlmICghaWRTdGF0ZSB8fCBpZFN0YXRlLmdldENvbnRlbnQoKVsnZ3JvdXBJZCddICE9PSBjb21tdW5pdHlJZCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIWNoYXQpIGNoYXQgPSByb29tc1swXTtcbiAgICAgICAgcmV0dXJuIGNoYXQ7IC8vIGNhbiBiZSBudWxsXG4gICAgfVxuXG4gICAgcHVibGljIGlzQWRtaW5PZihjb21tdW5pdHlJZDogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgIGNvbnN0IG1lbWJlcnMgPSBHcm91cFN0b3JlLmdldEdyb3VwTWVtYmVycyhjb21tdW5pdHlJZCk7XG4gICAgICAgIGNvbnN0IG15TWVtYmVyID0gbWVtYmVycy5maW5kKG0gPT4gbS51c2VySWQgPT09IHRoaXMubWF0cml4Q2xpZW50LmdldFVzZXJJZCgpKTtcbiAgICAgICAgcmV0dXJuIG15TWVtYmVyPy5pc1ByaXZpbGVnZWQ7XG4gICAgfVxuXG4gICAgcHVibGljIGNhbkludml0ZVRvKGNvbW11bml0eUlkOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICAgICAgY29uc3QgZ2VuZXJhbENoYXQgPSB0aGlzLmdldEdlbmVyYWxDaGF0KGNvbW11bml0eUlkKTtcbiAgICAgICAgaWYgKCFnZW5lcmFsQ2hhdCkgcmV0dXJuIHRoaXMuaXNBZG1pbk9mKGNvbW11bml0eUlkKTtcblxuICAgICAgICBjb25zdCBteU1lbWJlciA9IGdlbmVyYWxDaGF0LmdldE1lbWJlcih0aGlzLm1hdHJpeENsaWVudC5nZXRVc2VySWQoKSk7XG4gICAgICAgIGlmICghbXlNZW1iZXIpIHJldHVybiB0aGlzLmlzQWRtaW5PZihjb21tdW5pdHlJZCk7XG5cbiAgICAgICAgY29uc3QgcGwgPSBnZW5lcmFsQ2hhdC5jdXJyZW50U3RhdGUuZ2V0U3RhdGVFdmVudHMoXCJtLnJvb20ucG93ZXJfbGV2ZWxzXCIsIFwiXCIpO1xuICAgICAgICBpZiAoIXBsKSByZXR1cm4gdGhpcy5pc0FkbWluT2YoY29tbXVuaXR5SWQpO1xuICAgICAgICBjb25zdCBwbENvbnRlbnQgPSBwbC5nZXRDb250ZW50KCk7XG5cbiAgICAgICAgY29uc3QgaW52aXRlUGwgPSBpc051bGxPclVuZGVmaW5lZChwbENvbnRlbnQuaW52aXRlKSA/IDUwIDogTnVtYmVyKHBsQ29udGVudC5pbnZpdGUpO1xuICAgICAgICByZXR1cm4gaW52aXRlUGwgPD0gbXlNZW1iZXIucG93ZXJMZXZlbDtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgYXN5bmMgb25BY3Rpb24ocGF5bG9hZDogQWN0aW9uUGF5bG9hZCk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIGlmICghdGhpcy5tYXRyaXhDbGllbnQgfHwgIVNldHRpbmdzU3RvcmUuZ2V0VmFsdWUoXCJmZWF0dXJlX2NvbW11bml0aWVzX3YyX3Byb3RvdHlwZXNcIikpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwYXlsb2FkLmFjdGlvbiA9PT0gXCJNYXRyaXhBY3Rpb25zLlJvb20ubXlNZW1iZXJzaGlwXCIpIHtcbiAgICAgICAgICAgIGNvbnN0IHJvb206IFJvb20gPSBwYXlsb2FkLnJvb207XG4gICAgICAgICAgICBjb25zdCBtZW1iZXJzaGlwID0gZ2V0RWZmZWN0aXZlTWVtYmVyc2hpcChwYXlsb2FkLm1lbWJlcnNoaXApO1xuICAgICAgICAgICAgY29uc3Qgb2xkTWVtYmVyc2hpcCA9IGdldEVmZmVjdGl2ZU1lbWJlcnNoaXAocGF5bG9hZC5vbGRNZW1iZXJzaGlwKTtcbiAgICAgICAgICAgIGlmIChtZW1iZXJzaGlwID09PSBvbGRNZW1iZXJzaGlwKSByZXR1cm47XG5cbiAgICAgICAgICAgIGlmIChtZW1iZXJzaGlwID09PSBFZmZlY3RpdmVNZW1iZXJzaGlwLkludml0ZSkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhdGggPSB1dGlscy5lbmNvZGVVcmkoXCIvcm9vbXMvJHJvb21JZC9ncm91cF9pbmZvXCIsIHsgJHJvb21JZDogcm9vbS5yb29tSWQgfSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHByb2ZpbGUgPSBhd2FpdCB0aGlzLm1hdHJpeENsaWVudC5odHRwLmF1dGhlZFJlcXVlc3QoXG4gICAgICAgICAgICAgICAgICAgICAgICB1bmRlZmluZWQsIFwiR0VUXCIsIHBhdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICB1bmRlZmluZWQsIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHsgcHJlZml4OiBcIi9fbWF0cml4L2NsaWVudC91bnN0YWJsZS9pbS52ZWN0b3IuY3VzdG9tXCIgfSk7XG4gICAgICAgICAgICAgICAgICAgIC8vIHdlIHVzZSBnbG9iYWwgYWNjb3VudCBkYXRhIGJlY2F1c2UgcGVyLXJvb20gYWNjb3VudCBkYXRhIG9uIGludml0ZXMgaXMgdW5yZWxpYWJsZVxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLm1hdHJpeENsaWVudC5zZXRBY2NvdW50RGF0YShcImltLnZlY3Rvci5ncm91cF9pbmZvLlwiICsgcm9vbS5yb29tSWQsIHByb2ZpbGUpO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLndhcm4oXCJOb24tZmF0YWwgZXJyb3IgZ2V0dGluZyBncm91cCBpbmZvcm1hdGlvbiBmb3IgaW52aXRlOlwiLCBlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAocGF5bG9hZC5hY3Rpb24gPT09IFwiTWF0cml4QWN0aW9ucy5hY2NvdW50RGF0YVwiKSB7XG4gICAgICAgICAgICBpZiAocGF5bG9hZC5ldmVudF90eXBlLnN0YXJ0c1dpdGgoXCJpbS52ZWN0b3IuZ3JvdXBfaW5mby5cIikpIHtcbiAgICAgICAgICAgICAgICBjb25zdCByb29tSWQgPSBwYXlsb2FkLmV2ZW50X3R5cGUuc3Vic3RyaW5nKFwiaW0udmVjdG9yLmdyb3VwX2luZm8uXCIubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoQ29tbXVuaXR5UHJvdG90eXBlU3RvcmUuZ2V0VXBkYXRlRXZlbnROYW1lKHJvb21JZCksIHJvb21JZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAocGF5bG9hZC5hY3Rpb24gPT09IFwic2VsZWN0X3RhZ1wiKSB7XG4gICAgICAgICAgICAvLyBBdXRvbWF0aWNhbGx5IHNlbGVjdCB0aGUgZ2VuZXJhbCBjaGF0IHdoZW4gc3dpdGNoaW5nIGNvbW11bml0aWVzXG4gICAgICAgICAgICBjb25zdCBjaGF0ID0gdGhpcy5nZXRHZW5lcmFsQ2hhdChwYXlsb2FkLnRhZyk7XG4gICAgICAgICAgICBpZiAoY2hhdCkge1xuICAgICAgICAgICAgICAgIGRpcy5kaXNwYXRjaCh7XG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbjogQWN0aW9uLlZpZXdSb29tLFxuICAgICAgICAgICAgICAgICAgICByb29tX2lkOiBjaGF0LnJvb21JZCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBnZXRJbnZpdGVQcm9maWxlKHJvb21JZDogc3RyaW5nKTogSVJvb21Qcm9maWxlIHtcbiAgICAgICAgaWYgKCF0aGlzLm1hdHJpeENsaWVudCkgcmV0dXJuIHsgZGlzcGxheU5hbWU6IG51bGwsIGF2YXRhck14YzogbnVsbCB9O1xuICAgICAgICBjb25zdCByb29tID0gdGhpcy5tYXRyaXhDbGllbnQuZ2V0Um9vbShyb29tSWQpO1xuICAgICAgICBpZiAoU2V0dGluZ3NTdG9yZS5nZXRWYWx1ZShcImZlYXR1cmVfY29tbXVuaXRpZXNfdjJfcHJvdG90eXBlc1wiKSkge1xuICAgICAgICAgICAgY29uc3QgZGF0YSA9IHRoaXMubWF0cml4Q2xpZW50LmdldEFjY291bnREYXRhKFwiaW0udmVjdG9yLmdyb3VwX2luZm8uXCIgKyByb29tSWQpO1xuICAgICAgICAgICAgaWYgKGRhdGEgJiYgZGF0YS5nZXRDb250ZW50KCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZTogZGF0YS5nZXRDb250ZW50KCkubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgYXZhdGFyTXhjOiBkYXRhLmdldENvbnRlbnQoKS5hdmF0YXJfdXJsLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRpc3BsYXlOYW1lOiByb29tLm5hbWUsXG4gICAgICAgICAgICBhdmF0YXJNeGM6IHJvb20uZ2V0TXhjQXZhdGFyVXJsKCksXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGFzeW5jIG9uUmVhZHkoKTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgZm9yIChjb25zdCByb29tIG9mIHRoaXMubWF0cml4Q2xpZW50LmdldFJvb21zKCkpIHtcbiAgICAgICAgICAgIGNvbnN0IG15TWVtYmVyID0gcm9vbS5jdXJyZW50U3RhdGUuZ2V0TWVtYmVycygpLmZpbmQobSA9PiBtLnVzZXJJZCA9PT0gdGhpcy5tYXRyaXhDbGllbnQuZ2V0VXNlcklkKCkpO1xuICAgICAgICAgICAgaWYgKCFteU1lbWJlcikgY29udGludWU7XG4gICAgICAgICAgICBpZiAoZ2V0RWZmZWN0aXZlTWVtYmVyc2hpcChteU1lbWJlci5tZW1iZXJzaGlwKSA9PT0gRWZmZWN0aXZlTWVtYmVyc2hpcC5JbnZpdGUpIHtcbiAgICAgICAgICAgICAgICAvLyBGYWtlIGFuIHVwZGF0ZSBmb3IgYW55dGhpbmcgdGhhdCBtaWdodCBoYXZlIHN0YXJ0ZWQgbGlzdGVuaW5nIGJlZm9yZSB0aGUgaW52aXRlXG4gICAgICAgICAgICAgICAgLy8gZGF0YSB3YXMgYXZhaWxhYmxlIChlZzogUm9vbVByZXZpZXdCYXIgYWZ0ZXIgYSByZWZyZXNoKVxuICAgICAgICAgICAgICAgIHRoaXMuZW1pdChDb21tdW5pdHlQcm90b3R5cGVTdG9yZS5nZXRVcGRhdGVFdmVudE5hbWUocm9vbS5yb29tSWQpLCByb29tLnJvb21JZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=