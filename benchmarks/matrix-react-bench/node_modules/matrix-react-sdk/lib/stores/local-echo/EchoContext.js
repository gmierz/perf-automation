"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EchoContext = exports.ContextTransactionState = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _EchoTransaction = require("./EchoTransaction");

var _arrays = require("../../utils/arrays");

var _Whenable = require("../../utils/Whenable");

/*
Copyright 2020 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
let ContextTransactionState;
exports.ContextTransactionState = ContextTransactionState;

(function (ContextTransactionState) {
  ContextTransactionState[ContextTransactionState["NotStarted"] = 0] = "NotStarted";
  ContextTransactionState[ContextTransactionState["PendingErrors"] = 1] = "PendingErrors";
  ContextTransactionState[ContextTransactionState["AllSuccessful"] = 2] = "AllSuccessful";
})(ContextTransactionState || (exports.ContextTransactionState = ContextTransactionState = {}));

class EchoContext extends _Whenable.Whenable {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "_transactions", []);
    (0, _defineProperty2.default)(this, "_state", ContextTransactionState.NotStarted);
    (0, _defineProperty2.default)(this, "checkTransactions", () => {
      let status = ContextTransactionState.AllSuccessful;

      for (const txn of this.transactions) {
        if (txn.status === _EchoTransaction.TransactionStatus.Error || txn.didPreviouslyFail) {
          status = ContextTransactionState.PendingErrors;
          break;
        } else if (txn.status === _EchoTransaction.TransactionStatus.Pending) {
          status = ContextTransactionState.NotStarted; // no break as we might hit something which broke
        }
      }

      this._state = status;
      this.notifyCondition(status);
    });
  }

  get transactions() {
    return (0, _arrays.arrayFastClone)(this._transactions);
  }

  get state() {
    return this._state;
  }

  get firstFailedTime() {
    const failedTxn = this.transactions.find(t => t.didPreviouslyFail || t.status === _EchoTransaction.TransactionStatus.Error);
    if (failedTxn) return failedTxn.startTime;
    return null;
  }

  disownTransaction(txn) {
    const idx = this._transactions.indexOf(txn);

    if (idx >= 0) this._transactions.splice(idx, 1);
    txn.destroy();
    this.checkTransactions();
  }

  beginTransaction(auditName, runFn) {
    const txn = new _EchoTransaction.EchoTransaction(auditName, runFn);

    this._transactions.push(txn);

    txn.whenAnything(this.checkTransactions); // We have no intent to call the transaction again if it succeeds (in fact, it'll
    // be really angry at us if we do), so call that the end of the road for the events.

    txn.when(_EchoTransaction.TransactionStatus.Success, () => txn.destroy());
    return txn;
  }

  destroy() {
    for (const txn of this.transactions) {
      txn.destroy();
    }

    this._transactions = [];
    super.destroy();
  }

}

exports.EchoContext = EchoContext;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zdG9yZXMvbG9jYWwtZWNoby9FY2hvQ29udGV4dC50cyJdLCJuYW1lcyI6WyJDb250ZXh0VHJhbnNhY3Rpb25TdGF0ZSIsIkVjaG9Db250ZXh0IiwiV2hlbmFibGUiLCJOb3RTdGFydGVkIiwic3RhdHVzIiwiQWxsU3VjY2Vzc2Z1bCIsInR4biIsInRyYW5zYWN0aW9ucyIsIlRyYW5zYWN0aW9uU3RhdHVzIiwiRXJyb3IiLCJkaWRQcmV2aW91c2x5RmFpbCIsIlBlbmRpbmdFcnJvcnMiLCJQZW5kaW5nIiwiX3N0YXRlIiwibm90aWZ5Q29uZGl0aW9uIiwiX3RyYW5zYWN0aW9ucyIsInN0YXRlIiwiZmlyc3RGYWlsZWRUaW1lIiwiZmFpbGVkVHhuIiwiZmluZCIsInQiLCJzdGFydFRpbWUiLCJkaXNvd25UcmFuc2FjdGlvbiIsImlkeCIsImluZGV4T2YiLCJzcGxpY2UiLCJkZXN0cm95IiwiY2hlY2tUcmFuc2FjdGlvbnMiLCJiZWdpblRyYW5zYWN0aW9uIiwiYXVkaXROYW1lIiwicnVuRm4iLCJFY2hvVHJhbnNhY3Rpb24iLCJwdXNoIiwid2hlbkFueXRoaW5nIiwid2hlbiIsIlN1Y2Nlc3MiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBZ0JBOztBQUNBOztBQUVBOztBQW5CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7SUFPWUEsdUI7OztXQUFBQSx1QjtBQUFBQSxFQUFBQSx1QixDQUFBQSx1QjtBQUFBQSxFQUFBQSx1QixDQUFBQSx1QjtBQUFBQSxFQUFBQSx1QixDQUFBQSx1QjtHQUFBQSx1Qix1Q0FBQUEsdUI7O0FBTUwsTUFBZUMsV0FBZixTQUFtQ0Msa0JBQW5DLENBQTZGO0FBQUE7QUFBQTtBQUFBLHlEQUNyRCxFQURxRDtBQUFBLGtEQUUvRUYsdUJBQXVCLENBQUNHLFVBRnVEO0FBQUEsNkRBcUNwRSxNQUFNO0FBQzlCLFVBQUlDLE1BQU0sR0FBR0osdUJBQXVCLENBQUNLLGFBQXJDOztBQUNBLFdBQUssTUFBTUMsR0FBWCxJQUFrQixLQUFLQyxZQUF2QixFQUFxQztBQUNqQyxZQUFJRCxHQUFHLENBQUNGLE1BQUosS0FBZUksbUNBQWtCQyxLQUFqQyxJQUEwQ0gsR0FBRyxDQUFDSSxpQkFBbEQsRUFBcUU7QUFDakVOLFVBQUFBLE1BQU0sR0FBR0osdUJBQXVCLENBQUNXLGFBQWpDO0FBQ0E7QUFDSCxTQUhELE1BR08sSUFBSUwsR0FBRyxDQUFDRixNQUFKLEtBQWVJLG1DQUFrQkksT0FBckMsRUFBOEM7QUFDakRSLFVBQUFBLE1BQU0sR0FBR0osdUJBQXVCLENBQUNHLFVBQWpDLENBRGlELENBRWpEO0FBQ0g7QUFDSjs7QUFDRCxXQUFLVSxNQUFMLEdBQWNULE1BQWQ7QUFDQSxXQUFLVSxlQUFMLENBQXFCVixNQUFyQjtBQUNILEtBbEQrRjtBQUFBOztBQUl6RSxNQUFaRyxZQUFZLEdBQXNCO0FBQ3pDLFdBQU8sNEJBQWUsS0FBS1EsYUFBcEIsQ0FBUDtBQUNIOztBQUVlLE1BQUxDLEtBQUssR0FBNEI7QUFDeEMsV0FBTyxLQUFLSCxNQUFaO0FBQ0g7O0FBRXlCLE1BQWZJLGVBQWUsR0FBUztBQUMvQixVQUFNQyxTQUFTLEdBQUcsS0FBS1gsWUFBTCxDQUFrQlksSUFBbEIsQ0FBdUJDLENBQUMsSUFBSUEsQ0FBQyxDQUFDVixpQkFBRixJQUF1QlUsQ0FBQyxDQUFDaEIsTUFBRixLQUFhSSxtQ0FBa0JDLEtBQWxGLENBQWxCO0FBQ0EsUUFBSVMsU0FBSixFQUFlLE9BQU9BLFNBQVMsQ0FBQ0csU0FBakI7QUFDZixXQUFPLElBQVA7QUFDSDs7QUFFTUMsRUFBQUEsaUJBQWlCLENBQUNoQixHQUFELEVBQXVCO0FBQzNDLFVBQU1pQixHQUFHLEdBQUcsS0FBS1IsYUFBTCxDQUFtQlMsT0FBbkIsQ0FBMkJsQixHQUEzQixDQUFaOztBQUNBLFFBQUlpQixHQUFHLElBQUksQ0FBWCxFQUFjLEtBQUtSLGFBQUwsQ0FBbUJVLE1BQW5CLENBQTBCRixHQUExQixFQUErQixDQUEvQjtBQUNkakIsSUFBQUEsR0FBRyxDQUFDb0IsT0FBSjtBQUNBLFNBQUtDLGlCQUFMO0FBQ0g7O0FBRU1DLEVBQUFBLGdCQUFnQixDQUFDQyxTQUFELEVBQW9CQyxLQUFwQixFQUFtRDtBQUN0RSxVQUFNeEIsR0FBRyxHQUFHLElBQUl5QixnQ0FBSixDQUFvQkYsU0FBcEIsRUFBK0JDLEtBQS9CLENBQVo7O0FBQ0EsU0FBS2YsYUFBTCxDQUFtQmlCLElBQW5CLENBQXdCMUIsR0FBeEI7O0FBQ0FBLElBQUFBLEdBQUcsQ0FBQzJCLFlBQUosQ0FBaUIsS0FBS04saUJBQXRCLEVBSHNFLENBS3RFO0FBQ0E7O0FBQ0FyQixJQUFBQSxHQUFHLENBQUM0QixJQUFKLENBQVMxQixtQ0FBa0IyQixPQUEzQixFQUFvQyxNQUFNN0IsR0FBRyxDQUFDb0IsT0FBSixFQUExQztBQUVBLFdBQU9wQixHQUFQO0FBQ0g7O0FBaUJNb0IsRUFBQUEsT0FBTyxHQUFHO0FBQ2IsU0FBSyxNQUFNcEIsR0FBWCxJQUFrQixLQUFLQyxZQUF2QixFQUFxQztBQUNqQ0QsTUFBQUEsR0FBRyxDQUFDb0IsT0FBSjtBQUNIOztBQUNELFNBQUtYLGFBQUwsR0FBcUIsRUFBckI7QUFDQSxVQUFNVyxPQUFOO0FBQ0g7O0FBMUQrRiIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5Db3B5cmlnaHQgMjAyMCBUaGUgTWF0cml4Lm9yZyBGb3VuZGF0aW9uIEMuSS5DLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbmh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuaW1wb3J0IHsgRWNob1RyYW5zYWN0aW9uLCBSdW5GbiwgVHJhbnNhY3Rpb25TdGF0dXMgfSBmcm9tIFwiLi9FY2hvVHJhbnNhY3Rpb25cIjtcbmltcG9ydCB7IGFycmF5RmFzdENsb25lIH0gZnJvbSBcIi4uLy4uL3V0aWxzL2FycmF5c1wiO1xuaW1wb3J0IHsgSURlc3Ryb3lhYmxlIH0gZnJvbSBcIi4uLy4uL3V0aWxzL0lEZXN0cm95YWJsZVwiO1xuaW1wb3J0IHsgV2hlbmFibGUgfSBmcm9tIFwiLi4vLi4vdXRpbHMvV2hlbmFibGVcIjtcblxuZXhwb3J0IGVudW0gQ29udGV4dFRyYW5zYWN0aW9uU3RhdGUge1xuICAgIE5vdFN0YXJ0ZWQsXG4gICAgUGVuZGluZ0Vycm9ycyxcbiAgICBBbGxTdWNjZXNzZnVsXG59XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBFY2hvQ29udGV4dCBleHRlbmRzIFdoZW5hYmxlPENvbnRleHRUcmFuc2FjdGlvblN0YXRlPiBpbXBsZW1lbnRzIElEZXN0cm95YWJsZSB7XG4gICAgcHJpdmF0ZSBfdHJhbnNhY3Rpb25zOiBFY2hvVHJhbnNhY3Rpb25bXSA9IFtdO1xuICAgIHByaXZhdGUgX3N0YXRlID0gQ29udGV4dFRyYW5zYWN0aW9uU3RhdGUuTm90U3RhcnRlZDtcblxuICAgIHB1YmxpYyBnZXQgdHJhbnNhY3Rpb25zKCk6IEVjaG9UcmFuc2FjdGlvbltdIHtcbiAgICAgICAgcmV0dXJuIGFycmF5RmFzdENsb25lKHRoaXMuX3RyYW5zYWN0aW9ucyk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBzdGF0ZSgpOiBDb250ZXh0VHJhbnNhY3Rpb25TdGF0ZSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zdGF0ZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGZpcnN0RmFpbGVkVGltZSgpOiBEYXRlIHtcbiAgICAgICAgY29uc3QgZmFpbGVkVHhuID0gdGhpcy50cmFuc2FjdGlvbnMuZmluZCh0ID0+IHQuZGlkUHJldmlvdXNseUZhaWwgfHwgdC5zdGF0dXMgPT09IFRyYW5zYWN0aW9uU3RhdHVzLkVycm9yKTtcbiAgICAgICAgaWYgKGZhaWxlZFR4bikgcmV0dXJuIGZhaWxlZFR4bi5zdGFydFRpbWU7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHB1YmxpYyBkaXNvd25UcmFuc2FjdGlvbih0eG46IEVjaG9UcmFuc2FjdGlvbikge1xuICAgICAgICBjb25zdCBpZHggPSB0aGlzLl90cmFuc2FjdGlvbnMuaW5kZXhPZih0eG4pO1xuICAgICAgICBpZiAoaWR4ID49IDApIHRoaXMuX3RyYW5zYWN0aW9ucy5zcGxpY2UoaWR4LCAxKTtcbiAgICAgICAgdHhuLmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy5jaGVja1RyYW5zYWN0aW9ucygpO1xuICAgIH1cblxuICAgIHB1YmxpYyBiZWdpblRyYW5zYWN0aW9uKGF1ZGl0TmFtZTogc3RyaW5nLCBydW5GbjogUnVuRm4pOiBFY2hvVHJhbnNhY3Rpb24ge1xuICAgICAgICBjb25zdCB0eG4gPSBuZXcgRWNob1RyYW5zYWN0aW9uKGF1ZGl0TmFtZSwgcnVuRm4pO1xuICAgICAgICB0aGlzLl90cmFuc2FjdGlvbnMucHVzaCh0eG4pO1xuICAgICAgICB0eG4ud2hlbkFueXRoaW5nKHRoaXMuY2hlY2tUcmFuc2FjdGlvbnMpO1xuXG4gICAgICAgIC8vIFdlIGhhdmUgbm8gaW50ZW50IHRvIGNhbGwgdGhlIHRyYW5zYWN0aW9uIGFnYWluIGlmIGl0IHN1Y2NlZWRzIChpbiBmYWN0LCBpdCdsbFxuICAgICAgICAvLyBiZSByZWFsbHkgYW5ncnkgYXQgdXMgaWYgd2UgZG8pLCBzbyBjYWxsIHRoYXQgdGhlIGVuZCBvZiB0aGUgcm9hZCBmb3IgdGhlIGV2ZW50cy5cbiAgICAgICAgdHhuLndoZW4oVHJhbnNhY3Rpb25TdGF0dXMuU3VjY2VzcywgKCkgPT4gdHhuLmRlc3Ryb3koKSk7XG5cbiAgICAgICAgcmV0dXJuIHR4bjtcbiAgICB9XG5cbiAgICBwcml2YXRlIGNoZWNrVHJhbnNhY3Rpb25zID0gKCkgPT4ge1xuICAgICAgICBsZXQgc3RhdHVzID0gQ29udGV4dFRyYW5zYWN0aW9uU3RhdGUuQWxsU3VjY2Vzc2Z1bDtcbiAgICAgICAgZm9yIChjb25zdCB0eG4gb2YgdGhpcy50cmFuc2FjdGlvbnMpIHtcbiAgICAgICAgICAgIGlmICh0eG4uc3RhdHVzID09PSBUcmFuc2FjdGlvblN0YXR1cy5FcnJvciB8fCB0eG4uZGlkUHJldmlvdXNseUZhaWwpIHtcbiAgICAgICAgICAgICAgICBzdGF0dXMgPSBDb250ZXh0VHJhbnNhY3Rpb25TdGF0ZS5QZW5kaW5nRXJyb3JzO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0eG4uc3RhdHVzID09PSBUcmFuc2FjdGlvblN0YXR1cy5QZW5kaW5nKSB7XG4gICAgICAgICAgICAgICAgc3RhdHVzID0gQ29udGV4dFRyYW5zYWN0aW9uU3RhdGUuTm90U3RhcnRlZDtcbiAgICAgICAgICAgICAgICAvLyBubyBicmVhayBhcyB3ZSBtaWdodCBoaXQgc29tZXRoaW5nIHdoaWNoIGJyb2tlXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fc3RhdGUgPSBzdGF0dXM7XG4gICAgICAgIHRoaXMubm90aWZ5Q29uZGl0aW9uKHN0YXR1cyk7XG4gICAgfTtcblxuICAgIHB1YmxpYyBkZXN0cm95KCkge1xuICAgICAgICBmb3IgKGNvbnN0IHR4biBvZiB0aGlzLnRyYW5zYWN0aW9ucykge1xuICAgICAgICAgICAgdHhuLmRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl90cmFuc2FjdGlvbnMgPSBbXTtcbiAgICAgICAgc3VwZXIuZGVzdHJveSgpO1xuICAgIH1cbn1cbiJdfQ==