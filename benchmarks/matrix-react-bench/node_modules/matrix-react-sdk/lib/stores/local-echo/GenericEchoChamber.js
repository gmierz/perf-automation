"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PROPERTY_UPDATED = exports.GenericEchoChamber = void 0;
exports.implicitlyReverted = implicitlyReverted;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _EchoTransaction = require("./EchoTransaction");

var _events = require("events");

/*
Copyright 2020 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
async function implicitlyReverted() {// do nothing :D
}

const PROPERTY_UPDATED = "property_updated";
exports.PROPERTY_UPDATED = PROPERTY_UPDATED;

class GenericEchoChamber extends _events.EventEmitter {
  constructor(context, lookupFn) {
    super();
    this.context = context;
    this.lookupFn = lookupFn;
    (0, _defineProperty2.default)(this, "cache", new Map());
    (0, _defineProperty2.default)(this, "matrixClient", void 0);
  }

  setClient(client) {
    const oldClient = this.matrixClient;
    this.matrixClient = client;
    this.onClientChanged(oldClient, client);
  }

  /**
   * Gets a value. If the key is in flight, the cached value will be returned. If
   * the key is not in flight then the lookupFn provided to this class will be
   * called instead.
   * @param key The key to look up.
   * @returns The value for the key.
   */
  getValue(key) {
    return this.cache.has(key) ? this.cache.get(key).val : this.lookupFn(key);
  }

  cacheVal(key, val, txn) {
    this.cache.set(key, {
      txn,
      val
    });
    this.emit(PROPERTY_UPDATED, key);
  }

  decacheKey(key) {
    if (this.cache.has(key)) {
      this.context.disownTransaction(this.cache.get(key).txn);
      this.cache.delete(key);
      this.emit(PROPERTY_UPDATED, key);
    }
  }

  markEchoReceived(key) {
    if (this.cache.has(key)) {
      const txn = this.cache.get(key).txn;
      this.context.disownTransaction(txn);
      txn.cancel();
    }

    this.decacheKey(key);
  }

  setValue(auditName, key, targetVal, runFn, revertFn) {
    // Cancel any pending transactions for the same key
    if (this.cache.has(key)) {
      this.cache.get(key).txn.cancel();
    }

    const ctxn = this.context.beginTransaction(auditName, runFn);
    this.cacheVal(key, targetVal, ctxn); // set the cache now as it won't be updated by the .when() ladder below.

    ctxn.when(_EchoTransaction.TransactionStatus.Pending, () => this.cacheVal(key, targetVal, ctxn)).when(_EchoTransaction.TransactionStatus.Error, () => revertFn());
    ctxn.run();
  }

}

exports.GenericEchoChamber = GenericEchoChamber;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zdG9yZXMvbG9jYWwtZWNoby9HZW5lcmljRWNob0NoYW1iZXIudHMiXSwibmFtZXMiOlsiaW1wbGljaXRseVJldmVydGVkIiwiUFJPUEVSVFlfVVBEQVRFRCIsIkdlbmVyaWNFY2hvQ2hhbWJlciIsIkV2ZW50RW1pdHRlciIsImNvbnN0cnVjdG9yIiwiY29udGV4dCIsImxvb2t1cEZuIiwiTWFwIiwic2V0Q2xpZW50IiwiY2xpZW50Iiwib2xkQ2xpZW50IiwibWF0cml4Q2xpZW50Iiwib25DbGllbnRDaGFuZ2VkIiwiZ2V0VmFsdWUiLCJrZXkiLCJjYWNoZSIsImhhcyIsImdldCIsInZhbCIsImNhY2hlVmFsIiwidHhuIiwic2V0IiwiZW1pdCIsImRlY2FjaGVLZXkiLCJkaXNvd25UcmFuc2FjdGlvbiIsImRlbGV0ZSIsIm1hcmtFY2hvUmVjZWl2ZWQiLCJjYW5jZWwiLCJzZXRWYWx1ZSIsImF1ZGl0TmFtZSIsInRhcmdldFZhbCIsInJ1bkZuIiwicmV2ZXJ0Rm4iLCJjdHhuIiwiYmVnaW5UcmFuc2FjdGlvbiIsIndoZW4iLCJUcmFuc2FjdGlvblN0YXR1cyIsIlBlbmRpbmciLCJFcnJvciIsInJ1biJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBaUJBOztBQUVBOztBQW5CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFPTyxlQUFlQSxrQkFBZixHQUFvQyxDQUN2QztBQUNIOztBQUVNLE1BQU1DLGdCQUFnQixHQUFHLGtCQUF6Qjs7O0FBRUEsTUFBZUMsa0JBQWYsU0FBdUVDLG9CQUF2RSxDQUFvRjtBQUk3RUMsRUFBQUEsV0FBVyxDQUFpQkMsT0FBakIsRUFBcUNDLFFBQXJDLEVBQThEO0FBQy9FO0FBRCtFLFNBQTdDRCxPQUE2QyxHQUE3Q0EsT0FBNkM7QUFBQSxTQUF6QkMsUUFBeUIsR0FBekJBLFFBQXlCO0FBQUEsaURBSG5FLElBQUlDLEdBQUosRUFHbUU7QUFBQTtBQUVsRjs7QUFFTUMsRUFBQUEsU0FBUyxDQUFDQyxNQUFELEVBQXVCO0FBQ25DLFVBQU1DLFNBQVMsR0FBRyxLQUFLQyxZQUF2QjtBQUNBLFNBQUtBLFlBQUwsR0FBb0JGLE1BQXBCO0FBQ0EsU0FBS0csZUFBTCxDQUFxQkYsU0FBckIsRUFBZ0NELE1BQWhDO0FBQ0g7O0FBSUQ7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDV0ksRUFBQUEsUUFBUSxDQUFDQyxHQUFELEVBQVk7QUFDdkIsV0FBTyxLQUFLQyxLQUFMLENBQVdDLEdBQVgsQ0FBZUYsR0FBZixJQUFzQixLQUFLQyxLQUFMLENBQVdFLEdBQVgsQ0FBZUgsR0FBZixFQUFvQkksR0FBMUMsR0FBZ0QsS0FBS1osUUFBTCxDQUFjUSxHQUFkLENBQXZEO0FBQ0g7O0FBRU9LLEVBQUFBLFFBQVEsQ0FBQ0wsR0FBRCxFQUFTSSxHQUFULEVBQWlCRSxHQUFqQixFQUF1QztBQUNuRCxTQUFLTCxLQUFMLENBQVdNLEdBQVgsQ0FBZVAsR0FBZixFQUFvQjtBQUFFTSxNQUFBQSxHQUFGO0FBQU9GLE1BQUFBO0FBQVAsS0FBcEI7QUFDQSxTQUFLSSxJQUFMLENBQVVyQixnQkFBVixFQUE0QmEsR0FBNUI7QUFDSDs7QUFFT1MsRUFBQUEsVUFBVSxDQUFDVCxHQUFELEVBQVM7QUFDdkIsUUFBSSxLQUFLQyxLQUFMLENBQVdDLEdBQVgsQ0FBZUYsR0FBZixDQUFKLEVBQXlCO0FBQ3JCLFdBQUtULE9BQUwsQ0FBYW1CLGlCQUFiLENBQStCLEtBQUtULEtBQUwsQ0FBV0UsR0FBWCxDQUFlSCxHQUFmLEVBQW9CTSxHQUFuRDtBQUNBLFdBQUtMLEtBQUwsQ0FBV1UsTUFBWCxDQUFrQlgsR0FBbEI7QUFDQSxXQUFLUSxJQUFMLENBQVVyQixnQkFBVixFQUE0QmEsR0FBNUI7QUFDSDtBQUNKOztBQUVTWSxFQUFBQSxnQkFBZ0IsQ0FBQ1osR0FBRCxFQUFTO0FBQy9CLFFBQUksS0FBS0MsS0FBTCxDQUFXQyxHQUFYLENBQWVGLEdBQWYsQ0FBSixFQUF5QjtBQUNyQixZQUFNTSxHQUFHLEdBQUcsS0FBS0wsS0FBTCxDQUFXRSxHQUFYLENBQWVILEdBQWYsRUFBb0JNLEdBQWhDO0FBQ0EsV0FBS2YsT0FBTCxDQUFhbUIsaUJBQWIsQ0FBK0JKLEdBQS9CO0FBQ0FBLE1BQUFBLEdBQUcsQ0FBQ08sTUFBSjtBQUNIOztBQUNELFNBQUtKLFVBQUwsQ0FBZ0JULEdBQWhCO0FBQ0g7O0FBRU1jLEVBQUFBLFFBQVEsQ0FBQ0MsU0FBRCxFQUFvQmYsR0FBcEIsRUFBNEJnQixTQUE1QixFQUEwQ0MsS0FBMUMsRUFBd0RDLFFBQXhELEVBQXlFO0FBQ3BGO0FBQ0EsUUFBSSxLQUFLakIsS0FBTCxDQUFXQyxHQUFYLENBQWVGLEdBQWYsQ0FBSixFQUF5QjtBQUNyQixXQUFLQyxLQUFMLENBQVdFLEdBQVgsQ0FBZUgsR0FBZixFQUFvQk0sR0FBcEIsQ0FBd0JPLE1BQXhCO0FBQ0g7O0FBRUQsVUFBTU0sSUFBSSxHQUFHLEtBQUs1QixPQUFMLENBQWE2QixnQkFBYixDQUE4QkwsU0FBOUIsRUFBeUNFLEtBQXpDLENBQWI7QUFDQSxTQUFLWixRQUFMLENBQWNMLEdBQWQsRUFBbUJnQixTQUFuQixFQUE4QkcsSUFBOUIsRUFQb0YsQ0FPL0M7O0FBRXJDQSxJQUFBQSxJQUFJLENBQUNFLElBQUwsQ0FBVUMsbUNBQWtCQyxPQUE1QixFQUFxQyxNQUFNLEtBQUtsQixRQUFMLENBQWNMLEdBQWQsRUFBbUJnQixTQUFuQixFQUE4QkcsSUFBOUIsQ0FBM0MsRUFDS0UsSUFETCxDQUNVQyxtQ0FBa0JFLEtBRDVCLEVBQ21DLE1BQU1OLFFBQVEsRUFEakQ7QUFHQUMsSUFBQUEsSUFBSSxDQUFDTSxHQUFMO0FBQ0g7O0FBOURzRiIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5Db3B5cmlnaHQgMjAyMCBUaGUgTWF0cml4Lm9yZyBGb3VuZGF0aW9uIEMuSS5DLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbmh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuaW1wb3J0IHsgRWNob0NvbnRleHQgfSBmcm9tIFwiLi9FY2hvQ29udGV4dFwiO1xuaW1wb3J0IHsgRWNob1RyYW5zYWN0aW9uLCBSdW5GbiwgVHJhbnNhY3Rpb25TdGF0dXMgfSBmcm9tIFwiLi9FY2hvVHJhbnNhY3Rpb25cIjtcbmltcG9ydCB7IE1hdHJpeENsaWVudCB9IGZyb20gXCJtYXRyaXgtanMtc2RrL3NyYy9jbGllbnRcIjtcbmltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gXCJldmVudHNcIjtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGltcGxpY2l0bHlSZXZlcnRlZCgpIHtcbiAgICAvLyBkbyBub3RoaW5nIDpEXG59XG5cbmV4cG9ydCBjb25zdCBQUk9QRVJUWV9VUERBVEVEID0gXCJwcm9wZXJ0eV91cGRhdGVkXCI7XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBHZW5lcmljRWNob0NoYW1iZXI8QyBleHRlbmRzIEVjaG9Db250ZXh0LCBLLCBWPiBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG4gICAgcHJpdmF0ZSBjYWNoZSA9IG5ldyBNYXA8Sywge3R4bjogRWNob1RyYW5zYWN0aW9uLCB2YWw6IFZ9PigpO1xuICAgIHByb3RlY3RlZCBtYXRyaXhDbGllbnQ6IE1hdHJpeENsaWVudDtcblxuICAgIHByb3RlY3RlZCBjb25zdHJ1Y3RvcihwdWJsaWMgcmVhZG9ubHkgY29udGV4dDogQywgcHJpdmF0ZSBsb29rdXBGbjogKGtleTogSykgPT4gVikge1xuICAgICAgICBzdXBlcigpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXRDbGllbnQoY2xpZW50OiBNYXRyaXhDbGllbnQpIHtcbiAgICAgICAgY29uc3Qgb2xkQ2xpZW50ID0gdGhpcy5tYXRyaXhDbGllbnQ7XG4gICAgICAgIHRoaXMubWF0cml4Q2xpZW50ID0gY2xpZW50O1xuICAgICAgICB0aGlzLm9uQ2xpZW50Q2hhbmdlZChvbGRDbGllbnQsIGNsaWVudCk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGFic3RyYWN0IG9uQ2xpZW50Q2hhbmdlZChvbGRDbGllbnQ6IE1hdHJpeENsaWVudCwgbmV3Q2xpZW50OiBNYXRyaXhDbGllbnQpO1xuXG4gICAgLyoqXG4gICAgICogR2V0cyBhIHZhbHVlLiBJZiB0aGUga2V5IGlzIGluIGZsaWdodCwgdGhlIGNhY2hlZCB2YWx1ZSB3aWxsIGJlIHJldHVybmVkLiBJZlxuICAgICAqIHRoZSBrZXkgaXMgbm90IGluIGZsaWdodCB0aGVuIHRoZSBsb29rdXBGbiBwcm92aWRlZCB0byB0aGlzIGNsYXNzIHdpbGwgYmVcbiAgICAgKiBjYWxsZWQgaW5zdGVhZC5cbiAgICAgKiBAcGFyYW0ga2V5IFRoZSBrZXkgdG8gbG9vayB1cC5cbiAgICAgKiBAcmV0dXJucyBUaGUgdmFsdWUgZm9yIHRoZSBrZXkuXG4gICAgICovXG4gICAgcHVibGljIGdldFZhbHVlKGtleTogSyk6IFYge1xuICAgICAgICByZXR1cm4gdGhpcy5jYWNoZS5oYXMoa2V5KSA/IHRoaXMuY2FjaGUuZ2V0KGtleSkudmFsIDogdGhpcy5sb29rdXBGbihrZXkpO1xuICAgIH1cblxuICAgIHByaXZhdGUgY2FjaGVWYWwoa2V5OiBLLCB2YWw6IFYsIHR4bjogRWNob1RyYW5zYWN0aW9uKSB7XG4gICAgICAgIHRoaXMuY2FjaGUuc2V0KGtleSwgeyB0eG4sIHZhbCB9KTtcbiAgICAgICAgdGhpcy5lbWl0KFBST1BFUlRZX1VQREFURUQsIGtleSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBkZWNhY2hlS2V5KGtleTogSykge1xuICAgICAgICBpZiAodGhpcy5jYWNoZS5oYXMoa2V5KSkge1xuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRpc293blRyYW5zYWN0aW9uKHRoaXMuY2FjaGUuZ2V0KGtleSkudHhuKTtcbiAgICAgICAgICAgIHRoaXMuY2FjaGUuZGVsZXRlKGtleSk7XG4gICAgICAgICAgICB0aGlzLmVtaXQoUFJPUEVSVFlfVVBEQVRFRCwga2V5KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByb3RlY3RlZCBtYXJrRWNob1JlY2VpdmVkKGtleTogSykge1xuICAgICAgICBpZiAodGhpcy5jYWNoZS5oYXMoa2V5KSkge1xuICAgICAgICAgICAgY29uc3QgdHhuID0gdGhpcy5jYWNoZS5nZXQoa2V5KS50eG47XG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZGlzb3duVHJhbnNhY3Rpb24odHhuKTtcbiAgICAgICAgICAgIHR4bi5jYW5jZWwoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRlY2FjaGVLZXkoa2V5KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0VmFsdWUoYXVkaXROYW1lOiBzdHJpbmcsIGtleTogSywgdGFyZ2V0VmFsOiBWLCBydW5GbjogUnVuRm4sIHJldmVydEZuOiBSdW5Gbikge1xuICAgICAgICAvLyBDYW5jZWwgYW55IHBlbmRpbmcgdHJhbnNhY3Rpb25zIGZvciB0aGUgc2FtZSBrZXlcbiAgICAgICAgaWYgKHRoaXMuY2FjaGUuaGFzKGtleSkpIHtcbiAgICAgICAgICAgIHRoaXMuY2FjaGUuZ2V0KGtleSkudHhuLmNhbmNlbCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgY3R4biA9IHRoaXMuY29udGV4dC5iZWdpblRyYW5zYWN0aW9uKGF1ZGl0TmFtZSwgcnVuRm4pO1xuICAgICAgICB0aGlzLmNhY2hlVmFsKGtleSwgdGFyZ2V0VmFsLCBjdHhuKTsgLy8gc2V0IHRoZSBjYWNoZSBub3cgYXMgaXQgd29uJ3QgYmUgdXBkYXRlZCBieSB0aGUgLndoZW4oKSBsYWRkZXIgYmVsb3cuXG5cbiAgICAgICAgY3R4bi53aGVuKFRyYW5zYWN0aW9uU3RhdHVzLlBlbmRpbmcsICgpID0+IHRoaXMuY2FjaGVWYWwoa2V5LCB0YXJnZXRWYWwsIGN0eG4pKVxuICAgICAgICAgICAgLndoZW4oVHJhbnNhY3Rpb25TdGF0dXMuRXJyb3IsICgpID0+IHJldmVydEZuKCkpO1xuXG4gICAgICAgIGN0eG4ucnVuKCk7XG4gICAgfVxufVxuIl19