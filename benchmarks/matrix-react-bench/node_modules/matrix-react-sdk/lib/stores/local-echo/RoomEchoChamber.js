"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RoomEchoChamber = exports.CachedRoomKey = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _GenericEchoChamber = require("./GenericEchoChamber");

var _RoomNotifs = require("../../RoomNotifs");

var _languageHandler = require("../../languageHandler");

var _event = require("matrix-js-sdk/src/@types/event");

/*
Copyright 2020 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
let CachedRoomKey;
exports.CachedRoomKey = CachedRoomKey;

(function (CachedRoomKey) {
  CachedRoomKey[CachedRoomKey["NotificationVolume"] = 0] = "NotificationVolume";
})(CachedRoomKey || (exports.CachedRoomKey = CachedRoomKey = {}));

class RoomEchoChamber extends _GenericEchoChamber.GenericEchoChamber {
  constructor(context) {
    super(context, k => this.properties.get(k));
    (0, _defineProperty2.default)(this, "properties", new Map());
    (0, _defineProperty2.default)(this, "onAccountData", event => {
      if (event.getType() === _event.EventType.PushRules) {
        const currentVolume = this.properties.get(CachedRoomKey.NotificationVolume);
        const newVolume = (0, _RoomNotifs.getRoomNotifsState)(this.context.room.roomId);

        if (currentVolume !== newVolume) {
          this.updateNotificationVolume();
        }
      }
    });
  }

  onClientChanged(oldClient, newClient) {
    this.properties.clear();

    if (oldClient) {
      oldClient.removeListener("accountData", this.onAccountData);
    }

    if (newClient) {
      // Register the listeners first
      newClient.on("accountData", this.onAccountData); // Then populate the properties map

      this.updateNotificationVolume();
    }
  }

  updateNotificationVolume() {
    this.properties.set(CachedRoomKey.NotificationVolume, (0, _RoomNotifs.getRoomNotifsState)(this.context.room.roomId));
    this.markEchoReceived(CachedRoomKey.NotificationVolume);
    this.emit(_GenericEchoChamber.PROPERTY_UPDATED, CachedRoomKey.NotificationVolume);
  } // ---- helpers below here ----


  get notificationVolume() {
    return this.getValue(CachedRoomKey.NotificationVolume);
  }

  set notificationVolume(v) {
    this.setValue((0, _languageHandler._t)("Change notification settings"), CachedRoomKey.NotificationVolume, v, async () => {
      return (0, _RoomNotifs.setRoomNotifsState)(this.context.room.roomId, v);
    }, _GenericEchoChamber.implicitlyReverted);
  }

}

exports.RoomEchoChamber = RoomEchoChamber;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zdG9yZXMvbG9jYWwtZWNoby9Sb29tRWNob0NoYW1iZXIudHMiXSwibmFtZXMiOlsiQ2FjaGVkUm9vbUtleSIsIlJvb21FY2hvQ2hhbWJlciIsIkdlbmVyaWNFY2hvQ2hhbWJlciIsImNvbnN0cnVjdG9yIiwiY29udGV4dCIsImsiLCJwcm9wZXJ0aWVzIiwiZ2V0IiwiTWFwIiwiZXZlbnQiLCJnZXRUeXBlIiwiRXZlbnRUeXBlIiwiUHVzaFJ1bGVzIiwiY3VycmVudFZvbHVtZSIsIk5vdGlmaWNhdGlvblZvbHVtZSIsIm5ld1ZvbHVtZSIsInJvb20iLCJyb29tSWQiLCJ1cGRhdGVOb3RpZmljYXRpb25Wb2x1bWUiLCJvbkNsaWVudENoYW5nZWQiLCJvbGRDbGllbnQiLCJuZXdDbGllbnQiLCJjbGVhciIsInJlbW92ZUxpc3RlbmVyIiwib25BY2NvdW50RGF0YSIsIm9uIiwic2V0IiwibWFya0VjaG9SZWNlaXZlZCIsImVtaXQiLCJQUk9QRVJUWV9VUERBVEVEIiwibm90aWZpY2F0aW9uVm9sdW1lIiwiZ2V0VmFsdWUiLCJ2Iiwic2V0VmFsdWUiLCJpbXBsaWNpdGx5UmV2ZXJ0ZWQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBZ0JBOztBQUNBOztBQUVBOztBQUVBOztBQXJCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7SUFTWUEsYTs7O1dBQUFBLGE7QUFBQUEsRUFBQUEsYSxDQUFBQSxhO0dBQUFBLGEsNkJBQUFBLGE7O0FBSUwsTUFBTUMsZUFBTixTQUE4QkMsc0NBQTlCLENBQWlHO0FBRzdGQyxFQUFBQSxXQUFXLENBQUNDLE9BQUQsRUFBMkI7QUFDekMsVUFBTUEsT0FBTixFQUFnQkMsQ0FBRCxJQUFPLEtBQUtDLFVBQUwsQ0FBZ0JDLEdBQWhCLENBQW9CRixDQUFwQixDQUF0QjtBQUR5QyxzREFGeEIsSUFBSUcsR0FBSixFQUV3QjtBQUFBLHlEQWtCcEJDLEtBQUQsSUFBd0I7QUFDNUMsVUFBSUEsS0FBSyxDQUFDQyxPQUFOLE9BQW9CQyxpQkFBVUMsU0FBbEMsRUFBNkM7QUFDekMsY0FBTUMsYUFBYSxHQUFHLEtBQUtQLFVBQUwsQ0FBZ0JDLEdBQWhCLENBQW9CUCxhQUFhLENBQUNjLGtCQUFsQyxDQUF0QjtBQUNBLGNBQU1DLFNBQVMsR0FBRyxvQ0FBbUIsS0FBS1gsT0FBTCxDQUFhWSxJQUFiLENBQWtCQyxNQUFyQyxDQUFsQjs7QUFDQSxZQUFJSixhQUFhLEtBQUtFLFNBQXRCLEVBQWlDO0FBQzdCLGVBQUtHLHdCQUFMO0FBQ0g7QUFDSjtBQUNKLEtBMUI0QztBQUU1Qzs7QUFFU0MsRUFBQUEsZUFBZSxDQUFDQyxTQUFELEVBQVlDLFNBQVosRUFBdUI7QUFDNUMsU0FBS2YsVUFBTCxDQUFnQmdCLEtBQWhCOztBQUNBLFFBQUlGLFNBQUosRUFBZTtBQUNYQSxNQUFBQSxTQUFTLENBQUNHLGNBQVYsQ0FBeUIsYUFBekIsRUFBd0MsS0FBS0MsYUFBN0M7QUFDSDs7QUFDRCxRQUFJSCxTQUFKLEVBQWU7QUFDWDtBQUNBQSxNQUFBQSxTQUFTLENBQUNJLEVBQVYsQ0FBYSxhQUFiLEVBQTRCLEtBQUtELGFBQWpDLEVBRlcsQ0FJWDs7QUFDQSxXQUFLTix3QkFBTDtBQUNIO0FBQ0o7O0FBWU9BLEVBQUFBLHdCQUF3QixHQUFHO0FBQy9CLFNBQUtaLFVBQUwsQ0FBZ0JvQixHQUFoQixDQUFvQjFCLGFBQWEsQ0FBQ2Msa0JBQWxDLEVBQXNELG9DQUFtQixLQUFLVixPQUFMLENBQWFZLElBQWIsQ0FBa0JDLE1BQXJDLENBQXREO0FBQ0EsU0FBS1UsZ0JBQUwsQ0FBc0IzQixhQUFhLENBQUNjLGtCQUFwQztBQUNBLFNBQUtjLElBQUwsQ0FBVUMsb0NBQVYsRUFBNEI3QixhQUFhLENBQUNjLGtCQUExQztBQUNILEdBbkNtRyxDQXFDcEc7OztBQUU2QixNQUFsQmdCLGtCQUFrQixHQUFtQjtBQUM1QyxXQUFPLEtBQUtDLFFBQUwsQ0FBYy9CLGFBQWEsQ0FBQ2Msa0JBQTVCLENBQVA7QUFDSDs7QUFFNEIsTUFBbEJnQixrQkFBa0IsQ0FBQ0UsQ0FBRCxFQUFvQjtBQUM3QyxTQUFLQyxRQUFMLENBQWMseUJBQUcsOEJBQUgsQ0FBZCxFQUFrRGpDLGFBQWEsQ0FBQ2Msa0JBQWhFLEVBQW9Ga0IsQ0FBcEYsRUFBdUYsWUFBWTtBQUMvRixhQUFPLG9DQUFtQixLQUFLNUIsT0FBTCxDQUFhWSxJQUFiLENBQWtCQyxNQUFyQyxFQUE2Q2UsQ0FBN0MsQ0FBUDtBQUNILEtBRkQsRUFFR0Usc0NBRkg7QUFHSDs7QUEvQ21HIiwic291cmNlc0NvbnRlbnQiOlsiLypcbkNvcHlyaWdodCAyMDIwIFRoZSBNYXRyaXgub3JnIEZvdW5kYXRpb24gQy5JLkMuXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG5pbXBvcnQgeyBHZW5lcmljRWNob0NoYW1iZXIsIGltcGxpY2l0bHlSZXZlcnRlZCwgUFJPUEVSVFlfVVBEQVRFRCB9IGZyb20gXCIuL0dlbmVyaWNFY2hvQ2hhbWJlclwiO1xuaW1wb3J0IHsgZ2V0Um9vbU5vdGlmc1N0YXRlLCBSb29tTm90aWZTdGF0ZSwgc2V0Um9vbU5vdGlmc1N0YXRlIH0gZnJvbSBcIi4uLy4uL1Jvb21Ob3RpZnNcIjtcbmltcG9ydCB7IFJvb21FY2hvQ29udGV4dCB9IGZyb20gXCIuL1Jvb21FY2hvQ29udGV4dFwiO1xuaW1wb3J0IHsgX3QgfSBmcm9tIFwiLi4vLi4vbGFuZ3VhZ2VIYW5kbGVyXCI7XG5pbXBvcnQgeyBNYXRyaXhFdmVudCB9IGZyb20gXCJtYXRyaXgtanMtc2RrL3NyYy9tb2RlbHMvZXZlbnRcIjtcbmltcG9ydCB7IEV2ZW50VHlwZSB9IGZyb20gXCJtYXRyaXgtanMtc2RrL3NyYy9AdHlwZXMvZXZlbnRcIjtcblxuZXhwb3J0IGVudW0gQ2FjaGVkUm9vbUtleSB7XG4gICAgTm90aWZpY2F0aW9uVm9sdW1lLFxufVxuXG5leHBvcnQgY2xhc3MgUm9vbUVjaG9DaGFtYmVyIGV4dGVuZHMgR2VuZXJpY0VjaG9DaGFtYmVyPFJvb21FY2hvQ29udGV4dCwgQ2FjaGVkUm9vbUtleSwgUm9vbU5vdGlmU3RhdGU+IHtcbiAgICBwcml2YXRlIHByb3BlcnRpZXMgPSBuZXcgTWFwPENhY2hlZFJvb21LZXksIFJvb21Ob3RpZlN0YXRlPigpO1xuXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKGNvbnRleHQ6IFJvb21FY2hvQ29udGV4dCkge1xuICAgICAgICBzdXBlcihjb250ZXh0LCAoaykgPT4gdGhpcy5wcm9wZXJ0aWVzLmdldChrKSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIG9uQ2xpZW50Q2hhbmdlZChvbGRDbGllbnQsIG5ld0NsaWVudCkge1xuICAgICAgICB0aGlzLnByb3BlcnRpZXMuY2xlYXIoKTtcbiAgICAgICAgaWYgKG9sZENsaWVudCkge1xuICAgICAgICAgICAgb2xkQ2xpZW50LnJlbW92ZUxpc3RlbmVyKFwiYWNjb3VudERhdGFcIiwgdGhpcy5vbkFjY291bnREYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobmV3Q2xpZW50KSB7XG4gICAgICAgICAgICAvLyBSZWdpc3RlciB0aGUgbGlzdGVuZXJzIGZpcnN0XG4gICAgICAgICAgICBuZXdDbGllbnQub24oXCJhY2NvdW50RGF0YVwiLCB0aGlzLm9uQWNjb3VudERhdGEpO1xuXG4gICAgICAgICAgICAvLyBUaGVuIHBvcHVsYXRlIHRoZSBwcm9wZXJ0aWVzIG1hcFxuICAgICAgICAgICAgdGhpcy51cGRhdGVOb3RpZmljYXRpb25Wb2x1bWUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgb25BY2NvdW50RGF0YSA9IChldmVudDogTWF0cml4RXZlbnQpID0+IHtcbiAgICAgICAgaWYgKGV2ZW50LmdldFR5cGUoKSA9PT0gRXZlbnRUeXBlLlB1c2hSdWxlcykge1xuICAgICAgICAgICAgY29uc3QgY3VycmVudFZvbHVtZSA9IHRoaXMucHJvcGVydGllcy5nZXQoQ2FjaGVkUm9vbUtleS5Ob3RpZmljYXRpb25Wb2x1bWUpIGFzIFJvb21Ob3RpZlN0YXRlO1xuICAgICAgICAgICAgY29uc3QgbmV3Vm9sdW1lID0gZ2V0Um9vbU5vdGlmc1N0YXRlKHRoaXMuY29udGV4dC5yb29tLnJvb21JZCkgYXMgUm9vbU5vdGlmU3RhdGU7XG4gICAgICAgICAgICBpZiAoY3VycmVudFZvbHVtZSAhPT0gbmV3Vm9sdW1lKSB7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVOb3RpZmljYXRpb25Wb2x1bWUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBwcml2YXRlIHVwZGF0ZU5vdGlmaWNhdGlvblZvbHVtZSgpIHtcbiAgICAgICAgdGhpcy5wcm9wZXJ0aWVzLnNldChDYWNoZWRSb29tS2V5Lk5vdGlmaWNhdGlvblZvbHVtZSwgZ2V0Um9vbU5vdGlmc1N0YXRlKHRoaXMuY29udGV4dC5yb29tLnJvb21JZCkpO1xuICAgICAgICB0aGlzLm1hcmtFY2hvUmVjZWl2ZWQoQ2FjaGVkUm9vbUtleS5Ob3RpZmljYXRpb25Wb2x1bWUpO1xuICAgICAgICB0aGlzLmVtaXQoUFJPUEVSVFlfVVBEQVRFRCwgQ2FjaGVkUm9vbUtleS5Ob3RpZmljYXRpb25Wb2x1bWUpO1xuICAgIH1cblxuICAgIC8vIC0tLS0gaGVscGVycyBiZWxvdyBoZXJlIC0tLS1cblxuICAgIHB1YmxpYyBnZXQgbm90aWZpY2F0aW9uVm9sdW1lKCk6IFJvb21Ob3RpZlN0YXRlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VmFsdWUoQ2FjaGVkUm9vbUtleS5Ob3RpZmljYXRpb25Wb2x1bWUpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXQgbm90aWZpY2F0aW9uVm9sdW1lKHY6IFJvb21Ob3RpZlN0YXRlKSB7XG4gICAgICAgIHRoaXMuc2V0VmFsdWUoX3QoXCJDaGFuZ2Ugbm90aWZpY2F0aW9uIHNldHRpbmdzXCIpLCBDYWNoZWRSb29tS2V5Lk5vdGlmaWNhdGlvblZvbHVtZSwgdiwgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHNldFJvb21Ob3RpZnNTdGF0ZSh0aGlzLmNvbnRleHQucm9vbS5yb29tSWQsIHYpO1xuICAgICAgICB9LCBpbXBsaWNpdGx5UmV2ZXJ0ZWQpO1xuICAgIH1cbn1cbiJdfQ==