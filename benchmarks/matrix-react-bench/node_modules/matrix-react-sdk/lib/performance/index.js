"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "PerformanceEntryNames", {
  enumerable: true,
  get: function () {
    return _entryNames.PerformanceEntryNames;
  }
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _entryNames = require("./entry-names");

var _logger = require("matrix-js-sdk/src/logger");

/*
Copyright 2021 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
class PerformanceMonitor {
  constructor() {
    (0, _defineProperty2.default)(this, "START_PREFIX", "start:");
    (0, _defineProperty2.default)(this, "STOP_PREFIX", "stop:");
    (0, _defineProperty2.default)(this, "listeners", []);
    (0, _defineProperty2.default)(this, "entries", []);
  }

  static get instance() {
    if (!PerformanceMonitor._instance) {
      PerformanceMonitor._instance = new PerformanceMonitor();
    }

    return PerformanceMonitor._instance;
  }
  /**
   * Starts a performance recording
   * @param name Name of the recording
   * @param id Specify an identifier appended to the measurement name
   * @returns {void}
   */


  start(name, id) {
    if (!this.supportsPerformanceApi()) {
      return;
    }

    const key = this.buildKey(name, id);

    if (performance.getEntriesByName(this.START_PREFIX + key).length > 0) {
      _logger.logger.warn(`Recording already started for: ${name}`);

      return;
    }

    performance.mark(this.START_PREFIX + key);
  }
  /**
   * Stops a performance recording and stores delta duration
   * with the start marker
   * @param name Name of the recording
   * @param id Specify an identifier appended to the measurement name
   * @returns {void}
   */


  stop(name, id) {
    if (!this.supportsPerformanceApi()) {
      return;
    }

    const key = this.buildKey(name, id);

    if (performance.getEntriesByName(this.START_PREFIX + key).length === 0) {
      _logger.logger.warn(`No recording started for: ${name}`);

      return;
    }

    performance.mark(this.STOP_PREFIX + key);
    performance.measure(key, this.START_PREFIX + key, this.STOP_PREFIX + key);
    this.clear(name, id);
    const measurement = performance.getEntriesByName(key).pop(); // Keeping a reference to all PerformanceEntry created
    // by this abstraction for historical events collection
    // when adding a data callback

    this.entries.push(measurement);
    this.listeners.forEach(listener => {
      if (this.shouldEmit(listener, measurement)) {
        listener.callback([measurement]);
      }
    });
    return measurement;
  }

  clear(name, id) {
    if (!this.supportsPerformanceApi()) {
      return;
    }

    const key = this.buildKey(name, id);
    performance.clearMarks(this.START_PREFIX + key);
    performance.clearMarks(this.STOP_PREFIX + key);
  }

  getEntries({
    name,
    type
  } = {}) {
    return this.entries.filter(entry => {
      const satisfiesName = !name || entry.name === name;
      const satisfiedType = !type || entry.entryType === type;
      return satisfiesName && satisfiedType;
    });
  }

  addPerformanceDataCallback(listener, buffer = false) {
    this.listeners.push(listener);

    if (buffer) {
      const toEmit = this.entries.filter(entry => this.shouldEmit(listener, entry));

      if (toEmit.length > 0) {
        listener.callback(toEmit);
      }
    }
  }

  removePerformanceDataCallback(callback) {
    if (!callback) {
      this.listeners = [];
    } else {
      this.listeners.splice(this.listeners.findIndex(listener => listener.callback === callback), 1);
    }
  }
  /**
   * Tor browser does not support the Performance API
   * @returns {boolean} true if the Performance API is supported
   */


  supportsPerformanceApi() {
    return performance !== undefined && performance.mark !== undefined;
  }

  shouldEmit(listener, entry) {
    return !listener.entryNames || listener.entryNames.includes(entry.name);
  }
  /**
   * Internal utility to ensure consistent name for the recording
   * @param name Name of the recording
   * @param id Specify an identifier appended to the measurement name
   * @returns {string} a compound of the name and identifier if present
   */


  buildKey(name, id) {
    return `${name}${id ? `:${id}` : ''}`;
  }

} // Convenience exports


exports.default = PerformanceMonitor;
(0, _defineProperty2.default)(PerformanceMonitor, "_instance", void 0);
// Exposing those to the window object to bridge them from tests
window.mxPerformanceMonitor = PerformanceMonitor.instance;
window.mxPerformanceEntryNames = _entryNames.PerformanceEntryNames;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wZXJmb3JtYW5jZS9pbmRleC50cyJdLCJuYW1lcyI6WyJQZXJmb3JtYW5jZU1vbml0b3IiLCJpbnN0YW5jZSIsIl9pbnN0YW5jZSIsInN0YXJ0IiwibmFtZSIsImlkIiwic3VwcG9ydHNQZXJmb3JtYW5jZUFwaSIsImtleSIsImJ1aWxkS2V5IiwicGVyZm9ybWFuY2UiLCJnZXRFbnRyaWVzQnlOYW1lIiwiU1RBUlRfUFJFRklYIiwibGVuZ3RoIiwibG9nZ2VyIiwid2FybiIsIm1hcmsiLCJzdG9wIiwiU1RPUF9QUkVGSVgiLCJtZWFzdXJlIiwiY2xlYXIiLCJtZWFzdXJlbWVudCIsInBvcCIsImVudHJpZXMiLCJwdXNoIiwibGlzdGVuZXJzIiwiZm9yRWFjaCIsImxpc3RlbmVyIiwic2hvdWxkRW1pdCIsImNhbGxiYWNrIiwiY2xlYXJNYXJrcyIsImdldEVudHJpZXMiLCJ0eXBlIiwiZmlsdGVyIiwiZW50cnkiLCJzYXRpc2ZpZXNOYW1lIiwic2F0aXNmaWVkVHlwZSIsImVudHJ5VHlwZSIsImFkZFBlcmZvcm1hbmNlRGF0YUNhbGxiYWNrIiwiYnVmZmVyIiwidG9FbWl0IiwicmVtb3ZlUGVyZm9ybWFuY2VEYXRhQ2FsbGJhY2siLCJzcGxpY2UiLCJmaW5kSW5kZXgiLCJ1bmRlZmluZWQiLCJlbnRyeU5hbWVzIiwiaW5jbHVkZXMiLCJ3aW5kb3ciLCJteFBlcmZvcm1hbmNlTW9uaXRvciIsIm14UGVyZm9ybWFuY2VFbnRyeU5hbWVzIiwiUGVyZm9ybWFuY2VFbnRyeU5hbWVzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQWdCQTs7QUFFQTs7QUFsQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBa0JlLE1BQU1BLGtCQUFOLENBQXlCO0FBQUE7QUFBQSx3REFHYixRQUhhO0FBQUEsdURBSWQsT0FKYztBQUFBLHFEQU1XLEVBTlg7QUFBQSxt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SUFBWixLQUFxQjRCLFNBQXpEO0FBQ0g7O0FBRU9oQixFQUFBQSxVQUFVLENBQUNELFFBQUQsRUFBb0NPLEtBQXBDLEVBQXNFO0FBQ3BGLFdBQU8sQ0FBQ1AsUUFBUSxDQUFDa0IsVUFBVixJQUF3QmxCLFFBQVEsQ0FBQ2tCLFVBQVQsQ0FBb0JDLFFBQXBCLENBQTZCWixLQUFLLENBQUM3QixJQUFuQyxDQUEvQjtBQUNIO0FBRUQ7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDWUksRUFBQUEsUUFBUSxDQUFDSixJQUFELEVBQWVDLEVBQWYsRUFBb0M7QUFDaEQsV0FBUSxHQUFFRCxJQUFLLEdBQUVDLEVBQUUsR0FBSSxJQUFHQSxFQUFHLEVBQVYsR0FBYyxFQUFHLEVBQXBDO0FBQ0g7O0FBeEltQyxDLENBMkl4Qzs7Ozs4QkEzSXFCTCxrQjtBQWdKckI7QUFDQThDLE1BQU0sQ0FBQ0Msb0JBQVAsR0FBOEIvQyxrQkFBa0IsQ0FBQ0MsUUFBakQ7QUFDQTZDLE1BQU0sQ0FBQ0UsdUJBQVAsR0FBaUNDLGlDQUFqQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5Db3B5cmlnaHQgMjAyMSBUaGUgTWF0cml4Lm9yZyBGb3VuZGF0aW9uIEMuSS5DLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbmltcG9ydCB7IFBlcmZvcm1hbmNlRW50cnlOYW1lcyB9IGZyb20gXCIuL2VudHJ5LW5hbWVzXCI7XG5cbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gXCJtYXRyaXgtanMtc2RrL3NyYy9sb2dnZXJcIjtcblxuaW50ZXJmYWNlIEdldEVudHJpZXNPcHRpb25zIHtcbiAgICBuYW1lPzogc3RyaW5nO1xuICAgIHR5cGU/OiBzdHJpbmc7XG59XG5cbnR5cGUgUGVyZm9ybWFuY2VDYWxsYmFja0Z1bmN0aW9uID0gKGVudHJ5OiBQZXJmb3JtYW5jZUVudHJ5W10pID0+IHZvaWQ7XG5cbmludGVyZmFjZSBQZXJmb3JtYW5jZURhdGFMaXN0ZW5lciB7XG4gICAgZW50cnlOYW1lcz86IHN0cmluZ1tdO1xuICAgIGNhbGxiYWNrOiBQZXJmb3JtYW5jZUNhbGxiYWNrRnVuY3Rpb247XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBlcmZvcm1hbmNlTW9uaXRvciB7XG4gICAgc3RhdGljIF9pbnN0YW5jZTogUGVyZm9ybWFuY2VNb25pdG9yO1xuXG4gICAgcHJpdmF0ZSBTVEFSVF9QUkVGSVggPSBcInN0YXJ0OlwiO1xuICAgIHByaXZhdGUgU1RPUF9QUkVGSVggPSBcInN0b3A6XCI7XG5cbiAgICBwcml2YXRlIGxpc3RlbmVyczogUGVyZm9ybWFuY2VEYXRhTGlzdGVuZXJbXSA9IFtdO1xuICAgIHByaXZhdGUgZW50cmllczogUGVyZm9ybWFuY2VFbnRyeVtdID0gW107XG5cbiAgICBwdWJsaWMgc3RhdGljIGdldCBpbnN0YW5jZSgpOiBQZXJmb3JtYW5jZU1vbml0b3Ige1xuICAgICAgICBpZiAoIVBlcmZvcm1hbmNlTW9uaXRvci5faW5zdGFuY2UpIHtcbiAgICAgICAgICAgIFBlcmZvcm1hbmNlTW9uaXRvci5faW5zdGFuY2UgPSBuZXcgUGVyZm9ybWFuY2VNb25pdG9yKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFBlcmZvcm1hbmNlTW9uaXRvci5faW5zdGFuY2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU3RhcnRzIGEgcGVyZm9ybWFuY2UgcmVjb3JkaW5nXG4gICAgICogQHBhcmFtIG5hbWUgTmFtZSBvZiB0aGUgcmVjb3JkaW5nXG4gICAgICogQHBhcmFtIGlkIFNwZWNpZnkgYW4gaWRlbnRpZmllciBhcHBlbmRlZCB0byB0aGUgbWVhc3VyZW1lbnQgbmFtZVxuICAgICAqIEByZXR1cm5zIHt2b2lkfVxuICAgICAqL1xuICAgIHN0YXJ0KG5hbWU6IHN0cmluZywgaWQ/OiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgaWYgKCF0aGlzLnN1cHBvcnRzUGVyZm9ybWFuY2VBcGkoKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGtleSA9IHRoaXMuYnVpbGRLZXkobmFtZSwgaWQpO1xuXG4gICAgICAgIGlmIChwZXJmb3JtYW5jZS5nZXRFbnRyaWVzQnlOYW1lKHRoaXMuU1RBUlRfUFJFRklYICsga2V5KS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBsb2dnZXIud2FybihgUmVjb3JkaW5nIGFscmVhZHkgc3RhcnRlZCBmb3I6ICR7bmFtZX1gKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHBlcmZvcm1hbmNlLm1hcmsodGhpcy5TVEFSVF9QUkVGSVggKyBrZXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFN0b3BzIGEgcGVyZm9ybWFuY2UgcmVjb3JkaW5nIGFuZCBzdG9yZXMgZGVsdGEgZHVyYXRpb25cbiAgICAgKiB3aXRoIHRoZSBzdGFydCBtYXJrZXJcbiAgICAgKiBAcGFyYW0gbmFtZSBOYW1lIG9mIHRoZSByZWNvcmRpbmdcbiAgICAgKiBAcGFyYW0gaWQgU3BlY2lmeSBhbiBpZGVudGlmaWVyIGFwcGVuZGVkIHRvIHRoZSBtZWFzdXJlbWVudCBuYW1lXG4gICAgICogQHJldHVybnMge3ZvaWR9XG4gICAgICovXG4gICAgc3RvcChuYW1lOiBzdHJpbmcsIGlkPzogc3RyaW5nKTogUGVyZm9ybWFuY2VFbnRyeSB7XG4gICAgICAgIGlmICghdGhpcy5zdXBwb3J0c1BlcmZvcm1hbmNlQXBpKCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBrZXkgPSB0aGlzLmJ1aWxkS2V5KG5hbWUsIGlkKTtcbiAgICAgICAgaWYgKHBlcmZvcm1hbmNlLmdldEVudHJpZXNCeU5hbWUodGhpcy5TVEFSVF9QUkVGSVggKyBrZXkpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgbG9nZ2VyLndhcm4oYE5vIHJlY29yZGluZyBzdGFydGVkIGZvcjogJHtuYW1lfWApO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgcGVyZm9ybWFuY2UubWFyayh0aGlzLlNUT1BfUFJFRklYICsga2V5KTtcbiAgICAgICAgcGVyZm9ybWFuY2UubWVhc3VyZShcbiAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgIHRoaXMuU1RBUlRfUFJFRklYICsga2V5LFxuICAgICAgICAgICAgdGhpcy5TVE9QX1BSRUZJWCArIGtleSxcbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLmNsZWFyKG5hbWUsIGlkKTtcblxuICAgICAgICBjb25zdCBtZWFzdXJlbWVudCA9IHBlcmZvcm1hbmNlLmdldEVudHJpZXNCeU5hbWUoa2V5KS5wb3AoKTtcblxuICAgICAgICAvLyBLZWVwaW5nIGEgcmVmZXJlbmNlIHRvIGFsbCBQZXJmb3JtYW5jZUVudHJ5IGNyZWF0ZWRcbiAgICAgICAgLy8gYnkgdGhpcyBhYnN0cmFjdGlvbiBmb3IgaGlzdG9yaWNhbCBldmVudHMgY29sbGVjdGlvblxuICAgICAgICAvLyB3aGVuIGFkZGluZyBhIGRhdGEgY2FsbGJhY2tcbiAgICAgICAgdGhpcy5lbnRyaWVzLnB1c2gobWVhc3VyZW1lbnQpO1xuXG4gICAgICAgIHRoaXMubGlzdGVuZXJzLmZvckVhY2gobGlzdGVuZXIgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuc2hvdWxkRW1pdChsaXN0ZW5lciwgbWVhc3VyZW1lbnQpKSB7XG4gICAgICAgICAgICAgICAgbGlzdGVuZXIuY2FsbGJhY2soW21lYXN1cmVtZW50XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBtZWFzdXJlbWVudDtcbiAgICB9XG5cbiAgICBjbGVhcihuYW1lOiBzdHJpbmcsIGlkPzogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIGlmICghdGhpcy5zdXBwb3J0c1BlcmZvcm1hbmNlQXBpKCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBrZXkgPSB0aGlzLmJ1aWxkS2V5KG5hbWUsIGlkKTtcbiAgICAgICAgcGVyZm9ybWFuY2UuY2xlYXJNYXJrcyh0aGlzLlNUQVJUX1BSRUZJWCArIGtleSk7XG4gICAgICAgIHBlcmZvcm1hbmNlLmNsZWFyTWFya3ModGhpcy5TVE9QX1BSRUZJWCArIGtleSk7XG4gICAgfVxuXG4gICAgZ2V0RW50cmllcyh7IG5hbWUsIHR5cGUgfTogR2V0RW50cmllc09wdGlvbnMgPSB7fSk6IFBlcmZvcm1hbmNlRW50cnlbXSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVudHJpZXMuZmlsdGVyKGVudHJ5ID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHNhdGlzZmllc05hbWUgPSAhbmFtZSB8fCBlbnRyeS5uYW1lID09PSBuYW1lO1xuICAgICAgICAgICAgY29uc3Qgc2F0aXNmaWVkVHlwZSA9ICF0eXBlIHx8IGVudHJ5LmVudHJ5VHlwZSA9PT0gdHlwZTtcbiAgICAgICAgICAgIHJldHVybiBzYXRpc2ZpZXNOYW1lICYmIHNhdGlzZmllZFR5cGU7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGFkZFBlcmZvcm1hbmNlRGF0YUNhbGxiYWNrKGxpc3RlbmVyOiBQZXJmb3JtYW5jZURhdGFMaXN0ZW5lciwgYnVmZmVyID0gZmFsc2UpIHtcbiAgICAgICAgdGhpcy5saXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgICAgIGlmIChidWZmZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IHRvRW1pdCA9IHRoaXMuZW50cmllcy5maWx0ZXIoZW50cnkgPT4gdGhpcy5zaG91bGRFbWl0KGxpc3RlbmVyLCBlbnRyeSkpO1xuICAgICAgICAgICAgaWYgKHRvRW1pdC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgbGlzdGVuZXIuY2FsbGJhY2sodG9FbWl0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlbW92ZVBlcmZvcm1hbmNlRGF0YUNhbGxiYWNrKGNhbGxiYWNrPzogUGVyZm9ybWFuY2VDYWxsYmFja0Z1bmN0aW9uKSB7XG4gICAgICAgIGlmICghY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHRoaXMubGlzdGVuZXJzID0gW107XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmxpc3RlbmVycy5zcGxpY2UoXG4gICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5lcnMuZmluZEluZGV4KGxpc3RlbmVyID0+IGxpc3RlbmVyLmNhbGxiYWNrID09PSBjYWxsYmFjayksXG4gICAgICAgICAgICAgICAgMSxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUb3IgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IHRoZSBQZXJmb3JtYW5jZSBBUElcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpZiB0aGUgUGVyZm9ybWFuY2UgQVBJIGlzIHN1cHBvcnRlZFxuICAgICAqL1xuICAgIHByaXZhdGUgc3VwcG9ydHNQZXJmb3JtYW5jZUFwaSgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHBlcmZvcm1hbmNlICE9PSB1bmRlZmluZWQgJiYgcGVyZm9ybWFuY2UubWFyayAhPT0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHByaXZhdGUgc2hvdWxkRW1pdChsaXN0ZW5lcjogUGVyZm9ybWFuY2VEYXRhTGlzdGVuZXIsIGVudHJ5OiBQZXJmb3JtYW5jZUVudHJ5KTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiAhbGlzdGVuZXIuZW50cnlOYW1lcyB8fCBsaXN0ZW5lci5lbnRyeU5hbWVzLmluY2x1ZGVzKGVudHJ5Lm5hbWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEludGVybmFsIHV0aWxpdHkgdG8gZW5zdXJlIGNvbnNpc3RlbnQgbmFtZSBmb3IgdGhlIHJlY29yZGluZ1xuICAgICAqIEBwYXJhbSBuYW1lIE5hbWUgb2YgdGhlIHJlY29yZGluZ1xuICAgICAqIEBwYXJhbSBpZCBTcGVjaWZ5IGFuIGlkZW50aWZpZXIgYXBwZW5kZWQgdG8gdGhlIG1lYXN1cmVtZW50IG5hbWVcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBhIGNvbXBvdW5kIG9mIHRoZSBuYW1lIGFuZCBpZGVudGlmaWVyIGlmIHByZXNlbnRcbiAgICAgKi9cbiAgICBwcml2YXRlIGJ1aWxkS2V5KG5hbWU6IHN0cmluZywgaWQ/OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gYCR7bmFtZX0ke2lkID8gYDoke2lkfWAgOiAnJ31gO1xuICAgIH1cbn1cblxuLy8gQ29udmVuaWVuY2UgZXhwb3J0c1xuZXhwb3J0IHtcbiAgICBQZXJmb3JtYW5jZUVudHJ5TmFtZXMsXG59O1xuXG4vLyBFeHBvc2luZyB0aG9zZSB0byB0aGUgd2luZG93IG9iamVjdCB0byBicmlkZ2UgdGhlbSBmcm9tIHRlc3RzXG53aW5kb3cubXhQZXJmb3JtYW5jZU1vbml0b3IgPSBQZXJmb3JtYW5jZU1vbml0b3IuaW5zdGFuY2U7XG53aW5kb3cubXhQZXJmb3JtYW5jZUVudHJ5TmFtZXMgPSBQZXJmb3JtYW5jZUVudHJ5TmFtZXM7XG4iXX0=