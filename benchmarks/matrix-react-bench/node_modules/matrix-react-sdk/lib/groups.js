"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GroupRoomType = exports.GroupMemberType = void 0;
exports.groupMemberFromApiObject = groupMemberFromApiObject;
exports.groupRoomFromApiObject = groupRoomFromApiObject;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _languageHandler = require("./languageHandler");

/*
Copyright 2017 New Vector Ltd

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const GroupMemberType = _propTypes.default.shape({
  userId: _propTypes.default.string.isRequired,
  displayname: _propTypes.default.string,
  avatarUrl: _propTypes.default.string
});

exports.GroupMemberType = GroupMemberType;

const GroupRoomType = _propTypes.default.shape({
  displayname: _propTypes.default.string,
  name: _propTypes.default.string,
  roomId: _propTypes.default.string.isRequired,
  canonicalAlias: _propTypes.default.string,
  avatarUrl: _propTypes.default.string
});

exports.GroupRoomType = GroupRoomType;

function groupMemberFromApiObject(apiObject) {
  return {
    userId: apiObject.user_id,
    displayname: apiObject.displayname,
    avatarUrl: apiObject.avatar_url,
    isPrivileged: apiObject.is_privileged
  };
}

function groupRoomFromApiObject(apiObject) {
  return {
    displayname: apiObject.name || apiObject.canonical_alias || (0, _languageHandler._t)("Unnamed Room"),
    name: apiObject.name,
    roomId: apiObject.room_id,
    canonicalAlias: apiObject.canonical_alias,
    avatarUrl: apiObject.avatar_url,
    topic: apiObject.topic,
    numJoinedMembers: apiObject.num_joined_members,
    worldReadable: apiObject.world_readable,
    guestCanJoin: apiObject.guest_can_join,
    isPublic: apiObject.is_public !== false
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm91cHMuanMiXSwibmFtZXMiOlsiR3JvdXBNZW1iZXJUeXBlIiwiUHJvcFR5cGVzIiwic2hhcGUiLCJ1c2VySWQiLCJzdHJpbmciLCJpc1JlcXVpcmVkIiwiZGlzcGxheW5hbWUiLCJhdmF0YXJVcmwiLCJHcm91cFJvb21UeXBlIiwibmFtZSIsInJvb21JZCIsImNhbm9uaWNhbEFsaWFzIiwiZ3JvdXBNZW1iZXJGcm9tQXBpT2JqZWN0IiwiYXBpT2JqZWN0IiwidXNlcl9pZCIsImF2YXRhcl91cmwiLCJpc1ByaXZpbGVnZWQiLCJpc19wcml2aWxlZ2VkIiwiZ3JvdXBSb29tRnJvbUFwaU9iamVjdCIsImNhbm9uaWNhbF9hbGlhcyIsInJvb21faWQiLCJ0b3BpYyIsIm51bUpvaW5lZE1lbWJlcnMiLCJudW1fam9pbmVkX21lbWJlcnMiLCJ3b3JsZFJlYWRhYmxlIiwid29ybGRfcmVhZGFibGUiLCJndWVzdENhbkpvaW4iLCJndWVzdF9jYW5fam9pbiIsImlzUHVibGljIiwiaXNfcHVibGljIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQWdCQTs7QUFFQTs7QUFsQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTU8sTUFBTUEsZUFBZSxHQUFHQyxtQkFBVUMsS0FBVixDQUFnQjtBQUMzQ0MsRUFBQUEsTUFBTSxFQUFFRixtQkFBVUcsTUFBVixDQUFpQkMsVUFEa0I7QUFFM0NDLEVBQUFBLFdBQVcsRUFBRUwsbUJBQVVHLE1BRm9CO0FBRzNDRyxFQUFBQSxTQUFTLEVBQUVOLG1CQUFVRztBQUhzQixDQUFoQixDQUF4Qjs7OztBQU1BLE1BQU1JLGFBQWEsR0FBR1AsbUJBQVVDLEtBQVYsQ0FBZ0I7QUFDekNJLEVBQUFBLFdBQVcsRUFBRUwsbUJBQVVHLE1BRGtCO0FBRXpDSyxFQUFBQSxJQUFJLEVBQUVSLG1CQUFVRyxNQUZ5QjtBQUd6Q00sRUFBQUEsTUFBTSxFQUFFVCxtQkFBVUcsTUFBVixDQUFpQkMsVUFIZ0I7QUFJekNNLEVBQUFBLGNBQWMsRUFBRVYsbUJBQVVHLE1BSmU7QUFLekNHLEVBQUFBLFNBQVMsRUFBRU4sbUJBQVVHO0FBTG9CLENBQWhCLENBQXRCOzs7O0FBUUEsU0FBU1Esd0JBQVQsQ0FBa0NDLFNBQWxDLEVBQTZDO0FBQ2hELFNBQU87QUFDSFYsSUFBQUEsTUFBTSxFQUFFVSxTQUFTLENBQUNDLE9BRGY7QUFFSFIsSUFBQUEsV0FBVyxFQUFFTyxTQUFTLENBQUNQLFdBRnBCO0FBR0hDLElBQUFBLFNBQVMsRUFBRU0sU0FBUyxDQUFDRSxVQUhsQjtBQUlIQyxJQUFBQSxZQUFZLEVBQUVILFNBQVMsQ0FBQ0k7QUFKckIsR0FBUDtBQU1IOztBQUVNLFNBQVNDLHNCQUFULENBQWdDTCxTQUFoQyxFQUEyQztBQUM5QyxTQUFPO0FBQ0hQLElBQUFBLFdBQVcsRUFBRU8sU0FBUyxDQUFDSixJQUFWLElBQWtCSSxTQUFTLENBQUNNLGVBQTVCLElBQStDLHlCQUFHLGNBQUgsQ0FEekQ7QUFFSFYsSUFBQUEsSUFBSSxFQUFFSSxTQUFTLENBQUNKLElBRmI7QUFHSEMsSUFBQUEsTUFBTSxFQUFFRyxTQUFTLENBQUNPLE9BSGY7QUFJSFQsSUFBQUEsY0FBYyxFQUFFRSxTQUFTLENBQUNNLGVBSnZCO0FBS0haLElBQUFBLFNBQVMsRUFBRU0sU0FBUyxDQUFDRSxVQUxsQjtBQU1ITSxJQUFBQSxLQUFLLEVBQUVSLFNBQVMsQ0FBQ1EsS0FOZDtBQU9IQyxJQUFBQSxnQkFBZ0IsRUFBRVQsU0FBUyxDQUFDVSxrQkFQekI7QUFRSEMsSUFBQUEsYUFBYSxFQUFFWCxTQUFTLENBQUNZLGNBUnRCO0FBU0hDLElBQUFBLFlBQVksRUFBRWIsU0FBUyxDQUFDYyxjQVRyQjtBQVVIQyxJQUFBQSxRQUFRLEVBQUVmLFNBQVMsQ0FBQ2dCLFNBQVYsS0FBd0I7QUFWL0IsR0FBUDtBQVlIIiwic291cmNlc0NvbnRlbnQiOlsiLypcbkNvcHlyaWdodCAyMDE3IE5ldyBWZWN0b3IgTHRkXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxuaW1wb3J0IHsgX3QgfSBmcm9tICcuL2xhbmd1YWdlSGFuZGxlcic7XG5cbmV4cG9ydCBjb25zdCBHcm91cE1lbWJlclR5cGUgPSBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIHVzZXJJZDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgIGRpc3BsYXluYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGF2YXRhclVybDogUHJvcFR5cGVzLnN0cmluZyxcbn0pO1xuXG5leHBvcnQgY29uc3QgR3JvdXBSb29tVHlwZSA9IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgZGlzcGxheW5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICByb29tSWQ6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICBjYW5vbmljYWxBbGlhczogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBhdmF0YXJVcmw6IFByb3BUeXBlcy5zdHJpbmcsXG59KTtcblxuZXhwb3J0IGZ1bmN0aW9uIGdyb3VwTWVtYmVyRnJvbUFwaU9iamVjdChhcGlPYmplY3QpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB1c2VySWQ6IGFwaU9iamVjdC51c2VyX2lkLFxuICAgICAgICBkaXNwbGF5bmFtZTogYXBpT2JqZWN0LmRpc3BsYXluYW1lLFxuICAgICAgICBhdmF0YXJVcmw6IGFwaU9iamVjdC5hdmF0YXJfdXJsLFxuICAgICAgICBpc1ByaXZpbGVnZWQ6IGFwaU9iamVjdC5pc19wcml2aWxlZ2VkLFxuICAgIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBncm91cFJvb21Gcm9tQXBpT2JqZWN0KGFwaU9iamVjdCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGRpc3BsYXluYW1lOiBhcGlPYmplY3QubmFtZSB8fCBhcGlPYmplY3QuY2Fub25pY2FsX2FsaWFzIHx8IF90KFwiVW5uYW1lZCBSb29tXCIpLFxuICAgICAgICBuYW1lOiBhcGlPYmplY3QubmFtZSxcbiAgICAgICAgcm9vbUlkOiBhcGlPYmplY3Qucm9vbV9pZCxcbiAgICAgICAgY2Fub25pY2FsQWxpYXM6IGFwaU9iamVjdC5jYW5vbmljYWxfYWxpYXMsXG4gICAgICAgIGF2YXRhclVybDogYXBpT2JqZWN0LmF2YXRhcl91cmwsXG4gICAgICAgIHRvcGljOiBhcGlPYmplY3QudG9waWMsXG4gICAgICAgIG51bUpvaW5lZE1lbWJlcnM6IGFwaU9iamVjdC5udW1fam9pbmVkX21lbWJlcnMsXG4gICAgICAgIHdvcmxkUmVhZGFibGU6IGFwaU9iamVjdC53b3JsZF9yZWFkYWJsZSxcbiAgICAgICAgZ3Vlc3RDYW5Kb2luOiBhcGlPYmplY3QuZ3Vlc3RfY2FuX2pvaW4sXG4gICAgICAgIGlzUHVibGljOiBhcGlPYmplY3QuaXNfcHVibGljICE9PSBmYWxzZSxcbiAgICB9O1xufVxuIl19