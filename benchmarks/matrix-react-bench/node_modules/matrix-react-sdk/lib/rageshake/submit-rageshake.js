"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = sendBugReport;
exports.downloadBugReport = downloadBugReport;
exports.submitFeedback = submitFeedback;

var _pako = _interopRequireDefault(require("pako"));

var _MatrixClientPeg = require("../MatrixClientPeg");

var _PlatformPeg = _interopRequireDefault(require("../PlatformPeg"));

var _languageHandler = require("../languageHandler");

var _tarJs = _interopRequireDefault(require("tar-js"));

var rageshake = _interopRequireWildcard(require("./rageshake"));

var _SettingsStore = _interopRequireDefault(require("../settings/SettingsStore"));

var _SdkConfig = _interopRequireDefault(require("../SdkConfig"));

var _logger = require("matrix-js-sdk/src/logger");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
Copyright 2017 OpenMarket Ltd
Copyright 2018 New Vector Ltd
Copyright 2019 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
async function collectBugReport(opts = {}, gzipLogs = true) {
  const progressCallback = opts.progressCallback || (() => {});

  progressCallback((0, _languageHandler._t)("Collecting app version information"));
  let version = "UNKNOWN";

  try {
    version = await _PlatformPeg.default.get().getAppVersion();
  } catch (err) {} // PlatformPeg already logs this.


  let userAgent = "UNKNOWN";

  if (window.navigator && window.navigator.userAgent) {
    userAgent = window.navigator.userAgent;
  }

  let installedPWA = "UNKNOWN";

  try {
    // Known to work at least for desktop Chrome
    installedPWA = String(window.matchMedia('(display-mode: standalone)').matches);
  } catch (e) {}

  let touchInput = "UNKNOWN";

  try {
    // MDN claims broad support across browsers
    touchInput = String(window.matchMedia('(pointer: coarse)').matches);
  } catch (e) {}

  const client = _MatrixClientPeg.MatrixClientPeg.get();

  _logger.logger.log("Sending bug report.");

  const body = new FormData();
  body.append('text', opts.userText || "User did not supply any additional text.");
  body.append('app', 'element-web');
  body.append('version', version);
  body.append('user_agent', userAgent);
  body.append('installed_pwa', installedPWA);
  body.append('touch_input', touchInput);

  if (client) {
    body.append('user_id', client.credentials.userId);
    body.append('device_id', client.deviceId);

    if (client.isCryptoEnabled()) {
      const keys = [`ed25519:${client.getDeviceEd25519Key()}`];

      if (client.getDeviceCurve25519Key) {
        keys.push(`curve25519:${client.getDeviceCurve25519Key()}`);
      }

      body.append('device_keys', keys.join(', '));
      body.append('cross_signing_key', client.getCrossSigningId()); // add cross-signing status information

      const crossSigning = client.crypto.crossSigningInfo;
      const secretStorage = client.crypto.secretStorage;
      body.append("cross_signing_ready", String(await client.isCrossSigningReady()));
      body.append("cross_signing_supported_by_hs", String(await client.doesServerSupportUnstableFeature("org.matrix.e2e_cross_signing")));
      body.append("cross_signing_key", crossSigning.getId());
      body.append("cross_signing_privkey_in_secret_storage", String(!!(await crossSigning.isStoredInSecretStorage(secretStorage))));
      const pkCache = client.getCrossSigningCacheCallbacks();
      body.append("cross_signing_master_privkey_cached", String(!!(pkCache && (await pkCache.getCrossSigningKeyCache("master")))));
      body.append("cross_signing_self_signing_privkey_cached", String(!!(pkCache && (await pkCache.getCrossSigningKeyCache("self_signing")))));
      body.append("cross_signing_user_signing_privkey_cached", String(!!(pkCache && (await pkCache.getCrossSigningKeyCache("user_signing")))));
      body.append("secret_storage_ready", String(await client.isSecretStorageReady()));
      body.append("secret_storage_key_in_account", String(!!(await secretStorage.hasKey())));
      body.append("session_backup_key_in_secret_storage", String(!!(await client.isKeyBackupKeyStored())));
      const sessionBackupKeyFromCache = await client.crypto.getSessionBackupPrivateKey();
      body.append("session_backup_key_cached", String(!!sessionBackupKeyFromCache));
      body.append("session_backup_key_well_formed", String(sessionBackupKeyFromCache instanceof Uint8Array));
    }
  }

  if (opts.label) {
    body.append('label', opts.label);
  } // add labs options


  const enabledLabs = _SettingsStore.default.getFeatureSettingNames().filter(f => _SettingsStore.default.getValue(f));

  if (enabledLabs.length) {
    body.append('enabled_labs', enabledLabs.join(', '));
  } // if low bandwidth mode is enabled, say so over rageshake, it causes many issues


  if (_SettingsStore.default.getValue("lowBandwidth")) {
    body.append("lowBandwidth", "enabled");
  } // add storage persistence/quota information


  if (navigator.storage && navigator.storage.persisted) {
    try {
      body.append("storageManager_persisted", String(await navigator.storage.persisted()));
    } catch (e) {}
  } else if (document.hasStorageAccess) {
    // Safari
    try {
      body.append("storageManager_persisted", String(await document.hasStorageAccess()));
    } catch (e) {}
  }

  if (navigator.storage && navigator.storage.estimate) {
    try {
      const estimate = await navigator.storage.estimate();
      body.append("storageManager_quota", String(estimate.quota));
      body.append("storageManager_usage", String(estimate.usage));

      if (estimate.usageDetails) {
        Object.keys(estimate.usageDetails).forEach(k => {
          body.append(`storageManager_usage_${k}`, String(estimate.usageDetails[k]));
        });
      }
    } catch (e) {}
  }

  if (window.Modernizr) {
    const missingFeatures = Object.keys(window.Modernizr).filter(key => window.Modernizr[key] === false);

    if (missingFeatures.length > 0) {
      body.append("modernizr_missing_features", missingFeatures.join(", "));
    }
  }

  body.append("mx_local_settings", localStorage.getItem('mx_local_settings'));

  if (opts.sendLogs) {
    progressCallback((0, _languageHandler._t)("Collecting logs"));
    const logs = await rageshake.getLogsForReport();

    for (const entry of logs) {
      // encode as UTF-8
      let buf = new TextEncoder().encode(entry.lines); // compress

      if (gzipLogs) {
        buf = _pako.default.gzip(buf);
      }

      body.append('compressed-log', new Blob([buf]), entry.id);
    }
  }

  return body;
}
/**
 * Send a bug report.
 *
 * @param {string} bugReportEndpoint HTTP url to send the report to
 *
 * @param {object} opts optional dictionary of options
 *
 * @param {string} opts.userText Any additional user input.
 *
 * @param {boolean} opts.sendLogs True to send logs
 *
 * @param {function(string)} opts.progressCallback Callback to call with progress updates
 *
 * @return {Promise} Resolved when the bug report is sent.
 */


async function sendBugReport(bugReportEndpoint, opts = {}) {
  if (!bugReportEndpoint) {
    throw new Error("No bug report endpoint has been set.");
  }

  const progressCallback = opts.progressCallback || (() => {});

  const body = await collectBugReport(opts);
  progressCallback((0, _languageHandler._t)("Uploading logs"));
  await submitReport(bugReportEndpoint, body, progressCallback);
}
/**
 * Downloads the files from a bug report. This is the same as sendBugReport,
 * but instead causes the browser to download the files locally.
 *
 * @param {object} opts optional dictionary of options
 *
 * @param {string} opts.userText Any additional user input.
 *
 * @param {boolean} opts.sendLogs True to send logs
 *
 * @param {function(string)} opts.progressCallback Callback to call with progress updates
 *
 * @return {Promise} Resolved when the bug report is downloaded (or started).
 */


async function downloadBugReport(opts = {}) {
  const progressCallback = opts.progressCallback || (() => {});

  const body = await collectBugReport(opts, false);
  progressCallback((0, _languageHandler._t)("Downloading logs"));
  let metadata = "";
  const tape = new _tarJs.default();
  let i = 0;

  for (const [key, value] of body.entries()) {
    if (key === 'compressed-log') {
      await new Promise(resolve => {
        const reader = new FileReader();
        reader.addEventListener('loadend', ev => {
          tape.append(`log-${i++}.log`, new TextDecoder().decode(ev.target.result));
          resolve();
        });
        reader.readAsArrayBuffer(value);
      });
    } else {
      metadata += `${key} = ${value}\n`;
    }
  }

  tape.append('issue.txt', metadata); // We have to create a new anchor to download if we want a filename. Otherwise we could
  // just use window.open.

  const dl = document.createElement('a');
  dl.href = `data:application/octet-stream;base64,${btoa(uint8ToString(tape.out))}`;
  dl.download = 'rageshake.tar';
  document.body.appendChild(dl);
  dl.click();
  document.body.removeChild(dl);
} // Source: https://github.com/beatgammit/tar-js/blob/master/examples/main.js


function uint8ToString(buf) {
  let out = '';

  for (let i = 0; i < buf.length; i += 1) {
    out += String.fromCharCode(buf[i]);
  }

  return out;
}

async function submitFeedback(endpoint, label, comment, canContact = false, extraData = {}) {
  var _MatrixClientPeg$get;

  let version = "UNKNOWN";

  try {
    version = await _PlatformPeg.default.get().getAppVersion();
  } catch (err) {} // PlatformPeg already logs this.


  const body = new FormData();
  body.append("label", label);
  body.append("text", comment);
  body.append("can_contact", canContact ? "yes" : "no");
  body.append("app", "element-web");
  body.append("version", version);
  body.append("platform", _PlatformPeg.default.get().getHumanReadableName());
  body.append("user_id", (_MatrixClientPeg$get = _MatrixClientPeg.MatrixClientPeg.get()) === null || _MatrixClientPeg$get === void 0 ? void 0 : _MatrixClientPeg$get.getUserId());

  for (const k in extraData) {
    body.append(k, extraData[k]);
  }

  await submitReport(_SdkConfig.default.get().bug_report_endpoint_url, body, () => {});
}

function submitReport(endpoint, body, progressCallback) {
  return new Promise((resolve, reject) => {
    const req = new XMLHttpRequest();
    req.open("POST", endpoint);
    req.timeout = 5 * 60 * 1000;

    req.onreadystatechange = function () {
      if (req.readyState === XMLHttpRequest.LOADING) {
        progressCallback((0, _languageHandler._t)("Waiting for response from server"));
      } else if (req.readyState === XMLHttpRequest.DONE) {
        // on done
        if (req.status < 200 || req.status >= 400) {
          reject(new Error(`HTTP ${req.status}`));
          return;
        }

        resolve();
      }
    };

    req.send(body);
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yYWdlc2hha2Uvc3VibWl0LXJhZ2VzaGFrZS50cyJdLCJuYW1lcyI6WyJjb2xsZWN0QnVnUmVwb3J0Iiwib3B0cyIsImd6aXBMb2dzIiwicHJvZ3Jlc3NDYWxsYmFjayIsInZlcnNpb24iLCJQbGF0Zm9ybVBlZyIsImdldCIsImdldEFwcFZlcnNpb24iLCJlcnIiLCJ1c2VyQWdlbnQiLCJ3aW5kb3ciLCJuYXZpZ2F0b3IiLCJpbnN0YWxsZWRQV0EiLCJTdHJpbmciLCJtYXRjaE1lZGlhIiwibWF0Y2hlcyIsImUiLCJ0b3VjaElucHV0IiwiY2xpZW50IiwiTWF0cml4Q2xpZW50UGVnIiwibG9nZ2VyIiwibG9nIiwiYm9keSIsIkZvcm1EYXRhIiwiYXBwZW5kIiwidXNlclRleHQiLCJjcmVkZW50aWFscyIsInVzZXJJZCIsImRldmljZUlkIiwiaXNDcnlwdG9FbmFibGVkIiwia2V5cyIsImdldERldmljZUVkMjU1MTlLZXkiLCJnZXREZXZpY2VDdXJ2ZTI1NTE5S2V5IiwicHVzaCIsImpvaW4iLCJnZXRDcm9zc1NpZ25pbmdJZCIsImNyb3NzU2lnbmluZyIsImNyeXB0byIsImNyb3NzU2lnbmluZ0luZm8iLCJzZWNyZXRTdG9yYWdlIiwiaXNDcm9zc1NpZ25pbmdSZWFkeSIsImRvZXNTZXJ2ZXJTdXBwb3J0VW5zdGFibGVGZWF0dXJlIiwiZ2V0SWQiLCJpc1N0b3JlZEluU2VjcmV0U3RvcmFnZSIsInBrQ2FjaGUiLCJnZXRDcm9zc1NpZ25pbmdDYWNoZUNhbGxiYWNrcyIsImdldENyb3NzU2lnbmluZ0tleUNhY2hlIiwiaXNTZWNyZXRTdG9yYWdlUmVhZHkiLCJoYXNLZXkiLCJpc0tleUJhY2t1cEtleVN0b3JlZCIsInNlc3Npb25CYWNrdXBLZXlGcm9tQ2FjaGUiLCJnZXRTZXNzaW9uQmFja3VwUHJpdmF0ZUtleSIsIlVpbnQ4QXJyYXkiLCJsYWJlbCIsImVuYWJsZWRMYWJzIiwiU2V0dGluZ3NTdG9yZSIsImdldEZlYXR1cmVTZXR0aW5nTmFtZXMiLCJmaWx0ZXIiLCJmIiwiZ2V0VmFsdWUiLCJsZW5ndGgiLCJzdG9yYWdlIiwicGVyc2lzdGVkIiwiZG9jdW1lbnQiLCJoYXNTdG9yYWdlQWNjZXNzIiwiZXN0aW1hdGUiLCJxdW90YSIsInVzYWdlIiwidXNhZ2VEZXRhaWxzIiwiT2JqZWN0IiwiZm9yRWFjaCIsImsiLCJNb2Rlcm5penIiLCJtaXNzaW5nRmVhdHVyZXMiLCJrZXkiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwic2VuZExvZ3MiLCJsb2dzIiwicmFnZXNoYWtlIiwiZ2V0TG9nc0ZvclJlcG9ydCIsImVudHJ5IiwiYnVmIiwiVGV4dEVuY29kZXIiLCJlbmNvZGUiLCJsaW5lcyIsInBha28iLCJnemlwIiwiQmxvYiIsImlkIiwic2VuZEJ1Z1JlcG9ydCIsImJ1Z1JlcG9ydEVuZHBvaW50IiwiRXJyb3IiLCJzdWJtaXRSZXBvcnQiLCJkb3dubG9hZEJ1Z1JlcG9ydCIsIm1ldGFkYXRhIiwidGFwZSIsIlRhciIsImkiLCJ2YWx1ZSIsImVudHJpZXMiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlYWRlciIsIkZpbGVSZWFkZXIiLCJhZGRFdmVudExpc3RlbmVyIiwiZXYiLCJUZXh0RGVjb2RlciIsImRlY29kZSIsInRhcmdldCIsInJlc3VsdCIsInJlYWRBc0FycmF5QnVmZmVyIiwiZGwiLCJjcmVhdGVFbGVtZW50IiwiaHJlZiIsImJ0b2EiLCJ1aW50OFRvU3RyaW5nIiwib3V0IiwiZG93bmxvYWQiLCJhcHBlbmRDaGlsZCIsImNsaWNrIiwicmVtb3ZlQ2hpbGQiLCJmcm9tQ2hhckNvZGUiLCJzdWJtaXRGZWVkYmFjayIsImVuZHBvaW50IiwiY29tbWVudCIsImNhbkNvbnRhY3QiLCJleHRyYURhdGEiLCJnZXRIdW1hblJlYWRhYmxlTmFtZSIsImdldFVzZXJJZCIsIlNka0NvbmZpZyIsImJ1Z19yZXBvcnRfZW5kcG9pbnRfdXJsIiwicmVqZWN0IiwicmVxIiwiWE1MSHR0cFJlcXVlc3QiLCJvcGVuIiwidGltZW91dCIsIm9ucmVh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QkFBeEQsRUFBaUc7QUFDN0YsU0FBTyxJQUFJa0csT0FBSixDQUFrQixDQUFDQyxPQUFELEVBQVU4QixNQUFWLEtBQXFCO0FBQzFDLFVBQU1DLEdBQUcsR0FBRyxJQUFJQyxjQUFKLEVBQVo7QUFDQUQsSUFBQUEsR0FBRyxDQUFDRSxJQUFKLENBQVMsTUFBVCxFQUFpQlgsUUFBakI7QUFDQVMsSUFBQUEsR0FBRyxDQUFDRyxPQUFKLEdBQWMsSUFBSSxFQUFKLEdBQVMsSUFBdkI7O0FBQ0FILElBQUFBLEdBQUcsQ0FBQ0ksa0JBQUosR0FBeUIsWUFBVztBQUNoQyxVQUFJSixHQUFHLENBQUNLLFVBQUosS0FBbUJKLGNBQWMsQ0FBQ0ssT0FBdEMsRUFBK0M7QUFDM0N4SSxRQUFBQSxnQkFBZ0IsQ0FBQyx5QkFBRyxrQ0FBSCxDQUFELENBQWhCO0FBQ0gsT0FGRCxNQUVPLElBQUlrSSxHQUFHLENBQUNLLFVBQUosS0FBbUJKLGNBQWMsQ0FBQ00sSUFBdEMsRUFBNEM7QUFDL0M7QUFDQSxZQUFJUCxHQUFHLENBQUNRLE1BQUosR0FBYSxHQUFiLElBQW9CUixHQUFHLENBQUNRLE1BQUosSUFBYyxHQUF0QyxFQUEyQztBQUN2Q1QsVUFBQUEsTUFBTSxDQUFDLElBQUl4QyxLQUFKLENBQVcsUUFBT3lDLEdBQUcsQ0FBQ1EsTUFBTyxFQUE3QixDQUFELENBQU47QUFDQTtBQUNIOztBQUNEdkMsUUFBQUEsT0FBTztBQUNWO0FBQ0osS0FYRDs7QUFZQStCLElBQUFBLEdBQUcsQ0FBQ1MsSUFBSixDQUFTeEgsSUFBVDtBQUNILEdBakJNLENBQVA7QUFrQkgiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuQ29weXJpZ2h0IDIwMTcgT3Blbk1hcmtldCBMdGRcbkNvcHlyaWdodCAyMDE4IE5ldyBWZWN0b3IgTHRkXG5Db3B5cmlnaHQgMjAxOSBUaGUgTWF0cml4Lm9yZyBGb3VuZGF0aW9uIEMuSS5DLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbmltcG9ydCBwYWtvIGZyb20gJ3Bha28nO1xuXG5pbXBvcnQgeyBNYXRyaXhDbGllbnRQZWcgfSBmcm9tICcuLi9NYXRyaXhDbGllbnRQZWcnO1xuaW1wb3J0IFBsYXRmb3JtUGVnIGZyb20gJy4uL1BsYXRmb3JtUGVnJztcbmltcG9ydCB7IF90IH0gZnJvbSAnLi4vbGFuZ3VhZ2VIYW5kbGVyJztcbmltcG9ydCBUYXIgZnJvbSBcInRhci1qc1wiO1xuXG5pbXBvcnQgKiBhcyByYWdlc2hha2UgZnJvbSAnLi9yYWdlc2hha2UnO1xuXG5pbXBvcnQgU2V0dGluZ3NTdG9yZSBmcm9tIFwiLi4vc2V0dGluZ3MvU2V0dGluZ3NTdG9yZVwiO1xuaW1wb3J0IFNka0NvbmZpZyBmcm9tIFwiLi4vU2RrQ29uZmlnXCI7XG5cbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gXCJtYXRyaXgtanMtc2RrL3NyYy9sb2dnZXJcIjtcblxuaW50ZXJmYWNlIElPcHRzIHtcbiAgICBsYWJlbD86IHN0cmluZztcbiAgICB1c2VyVGV4dD86IHN0cmluZztcbiAgICBzZW5kTG9ncz86IGJvb2xlYW47XG4gICAgcHJvZ3Jlc3NDYWxsYmFjaz86IChzdHJpbmcpID0+IHZvaWQ7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGNvbGxlY3RCdWdSZXBvcnQob3B0czogSU9wdHMgPSB7fSwgZ3ppcExvZ3MgPSB0cnVlKSB7XG4gICAgY29uc3QgcHJvZ3Jlc3NDYWxsYmFjayA9IG9wdHMucHJvZ3Jlc3NDYWxsYmFjayB8fCAoKCkgPT4ge30pO1xuXG4gICAgcHJvZ3Jlc3NDYWxsYmFjayhfdChcIkNvbGxlY3RpbmcgYXBwIHZlcnNpb24gaW5mb3JtYXRpb25cIikpO1xuICAgIGxldCB2ZXJzaW9uID0gXCJVTktOT1dOXCI7XG4gICAgdHJ5IHtcbiAgICAgICAgdmVyc2lvbiA9IGF3YWl0IFBsYXRmb3JtUGVnLmdldCgpLmdldEFwcFZlcnNpb24oKTtcbiAgICB9IGNhdGNoIChlcnIpIHt9IC8vIFBsYXRmb3JtUGVnIGFscmVhZHkgbG9ncyB0aGlzLlxuXG4gICAgbGV0IHVzZXJBZ2VudCA9IFwiVU5LTk9XTlwiO1xuICAgIGlmICh3aW5kb3cubmF2aWdhdG9yICYmIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50KSB7XG4gICAgICAgIHVzZXJBZ2VudCA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50O1xuICAgIH1cblxuICAgIGxldCBpbnN0YWxsZWRQV0EgPSBcIlVOS05PV05cIjtcbiAgICB0cnkge1xuICAgICAgICAvLyBLbm93biB0byB3b3JrIGF0IGxlYXN0IGZvciBkZXNrdG9wIENocm9tZVxuICAgICAgICBpbnN0YWxsZWRQV0EgPSBTdHJpbmcod2luZG93Lm1hdGNoTWVkaWEoJyhkaXNwbGF5LW1vZGU6IHN0YW5kYWxvbmUpJykubWF0Y2hlcyk7XG4gICAgfSBjYXRjaCAoZSkge31cblxuICAgIGxldCB0b3VjaElucHV0ID0gXCJVTktOT1dOXCI7XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gTUROIGNsYWltcyBicm9hZCBzdXBwb3J0IGFjcm9zcyBicm93c2Vyc1xuICAgICAgICB0b3VjaElucHV0ID0gU3RyaW5nKHdpbmRvdy5tYXRjaE1lZGlhKCcocG9pbnRlcjogY29hcnNlKScpLm1hdGNoZXMpO1xuICAgIH0gY2F0Y2ggKGUpIHsgfVxuXG4gICAgY29uc3QgY2xpZW50ID0gTWF0cml4Q2xpZW50UGVnLmdldCgpO1xuXG4gICAgbG9nZ2VyLmxvZyhcIlNlbmRpbmcgYnVnIHJlcG9ydC5cIik7XG5cbiAgICBjb25zdCBib2R5ID0gbmV3IEZvcm1EYXRhKCk7XG4gICAgYm9keS5hcHBlbmQoJ3RleHQnLCBvcHRzLnVzZXJUZXh0IHx8IFwiVXNlciBkaWQgbm90IHN1cHBseSBhbnkgYWRkaXRpb25hbCB0ZXh0LlwiKTtcbiAgICBib2R5LmFwcGVuZCgnYXBwJywgJ2VsZW1lbnQtd2ViJyk7XG4gICAgYm9keS5hcHBlbmQoJ3ZlcnNpb24nLCB2ZXJzaW9uKTtcbiAgICBib2R5LmFwcGVuZCgndXNlcl9hZ2VudCcsIHVzZXJBZ2VudCk7XG4gICAgYm9keS5hcHBlbmQoJ2luc3RhbGxlZF9wd2EnLCBpbnN0YWxsZWRQV0EpO1xuICAgIGJvZHkuYXBwZW5kKCd0b3VjaF9pbnB1dCcsIHRvdWNoSW5wdXQpO1xuXG4gICAgaWYgKGNsaWVudCkge1xuICAgICAgICBib2R5LmFwcGVuZCgndXNlcl9pZCcsIGNsaWVudC5jcmVkZW50aWFscy51c2VySWQpO1xuICAgICAgICBib2R5LmFwcGVuZCgnZGV2aWNlX2lkJywgY2xpZW50LmRldmljZUlkKTtcblxuICAgICAgICBpZiAoY2xpZW50LmlzQ3J5cHRvRW5hYmxlZCgpKSB7XG4gICAgICAgICAgICBjb25zdCBrZXlzID0gW2BlZDI1NTE5OiR7Y2xpZW50LmdldERldmljZUVkMjU1MTlLZXkoKX1gXTtcbiAgICAgICAgICAgIGlmIChjbGllbnQuZ2V0RGV2aWNlQ3VydmUyNTUxOUtleSkge1xuICAgICAgICAgICAgICAgIGtleXMucHVzaChgY3VydmUyNTUxOToke2NsaWVudC5nZXREZXZpY2VDdXJ2ZTI1NTE5S2V5KCl9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBib2R5LmFwcGVuZCgnZGV2aWNlX2tleXMnLCBrZXlzLmpvaW4oJywgJykpO1xuICAgICAgICAgICAgYm9keS5hcHBlbmQoJ2Nyb3NzX3NpZ25pbmdfa2V5JywgY2xpZW50LmdldENyb3NzU2lnbmluZ0lkKCkpO1xuXG4gICAgICAgICAgICAvLyBhZGQgY3Jvc3Mtc2lnbmluZyBzdGF0dXMgaW5mb3JtYXRpb25cbiAgICAgICAgICAgIGNvbnN0IGNyb3NzU2lnbmluZyA9IGNsaWVudC5jcnlwdG8uY3Jvc3NTaWduaW5nSW5mbztcbiAgICAgICAgICAgIGNvbnN0IHNlY3JldFN0b3JhZ2UgPSBjbGllbnQuY3J5cHRvLnNlY3JldFN0b3JhZ2U7XG5cbiAgICAgICAgICAgIGJvZHkuYXBwZW5kKFwiY3Jvc3Nfc2lnbmluZ19yZWFkeVwiLCBTdHJpbmcoYXdhaXQgY2xpZW50LmlzQ3Jvc3NTaWduaW5nUmVhZHkoKSkpO1xuICAgICAgICAgICAgYm9keS5hcHBlbmQoXCJjcm9zc19zaWduaW5nX3N1cHBvcnRlZF9ieV9oc1wiLFxuICAgICAgICAgICAgICAgIFN0cmluZyhhd2FpdCBjbGllbnQuZG9lc1NlcnZlclN1cHBvcnRVbnN0YWJsZUZlYXR1cmUoXCJvcmcubWF0cml4LmUyZV9jcm9zc19zaWduaW5nXCIpKSk7XG4gICAgICAgICAgICBib2R5LmFwcGVuZChcImNyb3NzX3NpZ25pbmdfa2V5XCIsIGNyb3NzU2lnbmluZy5nZXRJZCgpKTtcbiAgICAgICAgICAgIGJvZHkuYXBwZW5kKFwiY3Jvc3Nfc2lnbmluZ19wcml2a2V5X2luX3NlY3JldF9zdG9yYWdlXCIsXG4gICAgICAgICAgICAgICAgU3RyaW5nKCEhKGF3YWl0IGNyb3NzU2lnbmluZy5pc1N0b3JlZEluU2VjcmV0U3RvcmFnZShzZWNyZXRTdG9yYWdlKSkpKTtcblxuICAgICAgICAgICAgY29uc3QgcGtDYWNoZSA9IGNsaWVudC5nZXRDcm9zc1NpZ25pbmdDYWNoZUNhbGxiYWNrcygpO1xuICAgICAgICAgICAgYm9keS5hcHBlbmQoXCJjcm9zc19zaWduaW5nX21hc3Rlcl9wcml2a2V5X2NhY2hlZFwiLFxuICAgICAgICAgICAgICAgIFN0cmluZyghIShwa0NhY2hlICYmIChhd2FpdCBwa0NhY2hlLmdldENyb3NzU2lnbmluZ0tleUNhY2hlKFwibWFzdGVyXCIpKSkpKTtcbiAgICAgICAgICAgIGJvZHkuYXBwZW5kKFwiY3Jvc3Nfc2lnbmluZ19zZWxmX3NpZ25pbmdfcHJpdmtleV9jYWNoZWRcIixcbiAgICAgICAgICAgICAgICBTdHJpbmcoISEocGtDYWNoZSAmJiAoYXdhaXQgcGtDYWNoZS5nZXRDcm9zc1NpZ25pbmdLZXlDYWNoZShcInNlbGZfc2lnbmluZ1wiKSkpKSk7XG4gICAgICAgICAgICBib2R5LmFwcGVuZChcImNyb3NzX3NpZ25pbmdfdXNlcl9zaWduaW5nX3ByaXZrZXlfY2FjaGVkXCIsXG4gICAgICAgICAgICAgICAgU3RyaW5nKCEhKHBrQ2FjaGUgJiYgKGF3YWl0IHBrQ2FjaGUuZ2V0Q3Jvc3NTaWduaW5nS2V5Q2FjaGUoXCJ1c2VyX3NpZ25pbmdcIikpKSkpO1xuXG4gICAgICAgICAgICBib2R5LmFwcGVuZChcInNlY3JldF9zdG9yYWdlX3JlYWR5XCIsIFN0cmluZyhhd2FpdCBjbGllbnQuaXNTZWNyZXRTdG9yYWdlUmVhZHkoKSkpO1xuICAgICAgICAgICAgYm9keS5hcHBlbmQoXCJzZWNyZXRfc3RvcmFnZV9rZXlfaW5fYWNjb3VudFwiLCBTdHJpbmcoISEoYXdhaXQgc2VjcmV0U3RvcmFnZS5oYXNLZXkoKSkpKTtcblxuICAgICAgICAgICAgYm9keS5hcHBlbmQoXCJzZXNzaW9uX2JhY2t1cF9rZXlfaW5fc2VjcmV0X3N0b3JhZ2VcIiwgU3RyaW5nKCEhKGF3YWl0IGNsaWVudC5pc0tleUJhY2t1cEtleVN0b3JlZCgpKSkpO1xuICAgICAgICAgICAgY29uc3Qgc2Vzc2lvbkJhY2t1cEtleUZyb21DYWNoZSA9IGF3YWl0IGNsaWVudC5jcnlwdG8uZ2V0U2Vzc2lvbkJhY2t1cFByaXZhdGVLZXkoKTtcbiAgICAgICAgICAgIGJvZHkuYXBwZW5kKFwic2Vzc2lvbl9iYWNrdXBfa2V5X2NhY2hlZFwiLCBTdHJpbmcoISFzZXNzaW9uQmFja3VwS2V5RnJvbUNhY2hlKSk7XG4gICAgICAgICAgICBib2R5LmFwcGVuZChcInNlc3Npb25fYmFja3VwX2tleV93ZWxsX2Zvcm1lZFwiLCBTdHJpbmcoc2Vzc2lvbkJhY2t1cEtleUZyb21DYWNoZSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmIChvcHRzLmxhYmVsKSB7XG4gICAgICAgIGJvZHkuYXBwZW5kKCdsYWJlbCcsIG9wdHMubGFiZWwpO1xuICAgIH1cblxuICAgIC8vIGFkZCBsYWJzIG9wdGlvbnNcbiAgICBjb25zdCBlbmFibGVkTGFicyA9IFNldHRpbmdzU3RvcmUuZ2V0RmVhdHVyZVNldHRpbmdOYW1lcygpLmZpbHRlcihmID0+IFNldHRpbmdzU3RvcmUuZ2V0VmFsdWUoZikpO1xuICAgIGlmIChlbmFibGVkTGFicy5sZW5ndGgpIHtcbiAgICAgICAgYm9keS5hcHBlbmQoJ2VuYWJsZWRfbGFicycsIGVuYWJsZWRMYWJzLmpvaW4oJywgJykpO1xuICAgIH1cbiAgICAvLyBpZiBsb3cgYmFuZHdpZHRoIG1vZGUgaXMgZW5hYmxlZCwgc2F5IHNvIG92ZXIgcmFnZXNoYWtlLCBpdCBjYXVzZXMgbWFueSBpc3N1ZXNcbiAgICBpZiAoU2V0dGluZ3NTdG9yZS5nZXRWYWx1ZShcImxvd0JhbmR3aWR0aFwiKSkge1xuICAgICAgICBib2R5LmFwcGVuZChcImxvd0JhbmR3aWR0aFwiLCBcImVuYWJsZWRcIik7XG4gICAgfVxuXG4gICAgLy8gYWRkIHN0b3JhZ2UgcGVyc2lzdGVuY2UvcXVvdGEgaW5mb3JtYXRpb25cbiAgICBpZiAobmF2aWdhdG9yLnN0b3JhZ2UgJiYgbmF2aWdhdG9yLnN0b3JhZ2UucGVyc2lzdGVkKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBib2R5LmFwcGVuZChcInN0b3JhZ2VNYW5hZ2VyX3BlcnNpc3RlZFwiLCBTdHJpbmcoYXdhaXQgbmF2aWdhdG9yLnN0b3JhZ2UucGVyc2lzdGVkKCkpKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICB9IGVsc2UgaWYgKGRvY3VtZW50Lmhhc1N0b3JhZ2VBY2Nlc3MpIHsgLy8gU2FmYXJpXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBib2R5LmFwcGVuZChcInN0b3JhZ2VNYW5hZ2VyX3BlcnNpc3RlZFwiLCBTdHJpbmcoYXdhaXQgZG9jdW1lbnQuaGFzU3RvcmFnZUFjY2VzcygpKSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgfVxuICAgIGlmIChuYXZpZ2F0b3Iuc3RvcmFnZSAmJiBuYXZpZ2F0b3Iuc3RvcmFnZS5lc3RpbWF0ZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgZXN0aW1hdGUgPSBhd2FpdCBuYXZpZ2F0b3Iuc3RvcmFnZS5lc3RpbWF0ZSgpO1xuICAgICAgICAgICAgYm9keS5hcHBlbmQoXCJzdG9yYWdlTWFuYWdlcl9xdW90YVwiLCBTdHJpbmcoZXN0aW1hdGUucXVvdGEpKTtcbiAgICAgICAgICAgIGJvZHkuYXBwZW5kKFwic3RvcmFnZU1hbmFnZXJfdXNhZ2VcIiwgU3RyaW5nKGVzdGltYXRlLnVzYWdlKSk7XG4gICAgICAgICAgICBpZiAoZXN0aW1hdGUudXNhZ2VEZXRhaWxzKSB7XG4gICAgICAgICAgICAgICAgT2JqZWN0LmtleXMoZXN0aW1hdGUudXNhZ2VEZXRhaWxzKS5mb3JFYWNoKGsgPT4ge1xuICAgICAgICAgICAgICAgICAgICBib2R5LmFwcGVuZChgc3RvcmFnZU1hbmFnZXJfdXNhZ2VfJHtrfWAsIFN0cmluZyhlc3RpbWF0ZS51c2FnZURldGFpbHNba10pKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICB9XG5cbiAgICBpZiAod2luZG93Lk1vZGVybml6cikge1xuICAgICAgICBjb25zdCBtaXNzaW5nRmVhdHVyZXMgPSBPYmplY3Qua2V5cyh3aW5kb3cuTW9kZXJuaXpyKS5maWx0ZXIoa2V5ID0+IHdpbmRvdy5Nb2Rlcm5penJba2V5XSA9PT0gZmFsc2UpO1xuICAgICAgICBpZiAobWlzc2luZ0ZlYXR1cmVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGJvZHkuYXBwZW5kKFwibW9kZXJuaXpyX21pc3NpbmdfZmVhdHVyZXNcIiwgbWlzc2luZ0ZlYXR1cmVzLmpvaW4oXCIsIFwiKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBib2R5LmFwcGVuZChcIm14X2xvY2FsX3NldHRpbmdzXCIsIGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdteF9sb2NhbF9zZXR0aW5ncycpKTtcblxuICAgIGlmIChvcHRzLnNlbmRMb2dzKSB7XG4gICAgICAgIHByb2dyZXNzQ2FsbGJhY2soX3QoXCJDb2xsZWN0aW5nIGxvZ3NcIikpO1xuICAgICAgICBjb25zdCBsb2dzID0gYXdhaXQgcmFnZXNoYWtlLmdldExvZ3NGb3JSZXBvcnQoKTtcbiAgICAgICAgZm9yIChjb25zdCBlbnRyeSBvZiBsb2dzKSB7XG4gICAgICAgICAgICAvLyBlbmNvZGUgYXMgVVRGLThcbiAgICAgICAgICAgIGxldCBidWYgPSBuZXcgVGV4dEVuY29kZXIoKS5lbmNvZGUoZW50cnkubGluZXMpO1xuXG4gICAgICAgICAgICAvLyBjb21wcmVzc1xuICAgICAgICAgICAgaWYgKGd6aXBMb2dzKSB7XG4gICAgICAgICAgICAgICAgYnVmID0gcGFrby5nemlwKGJ1Zik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGJvZHkuYXBwZW5kKCdjb21wcmVzc2VkLWxvZycsIG5ldyBCbG9iKFtidWZdKSwgZW50cnkuaWQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGJvZHk7XG59XG5cbi8qKlxuICogU2VuZCBhIGJ1ZyByZXBvcnQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJ1Z1JlcG9ydEVuZHBvaW50IEhUVFAgdXJsIHRvIHNlbmQgdGhlIHJlcG9ydCB0b1xuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRzIG9wdGlvbmFsIGRpY3Rpb25hcnkgb2Ygb3B0aW9uc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLnVzZXJUZXh0IEFueSBhZGRpdGlvbmFsIHVzZXIgaW5wdXQuXG4gKlxuICogQHBhcmFtIHtib29sZWFufSBvcHRzLnNlbmRMb2dzIFRydWUgdG8gc2VuZCBsb2dzXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbihzdHJpbmcpfSBvcHRzLnByb2dyZXNzQ2FsbGJhY2sgQ2FsbGJhY2sgdG8gY2FsbCB3aXRoIHByb2dyZXNzIHVwZGF0ZXNcbiAqXG4gKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlZCB3aGVuIHRoZSBidWcgcmVwb3J0IGlzIHNlbnQuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIHNlbmRCdWdSZXBvcnQoYnVnUmVwb3J0RW5kcG9pbnQ6IHN0cmluZywgb3B0czogSU9wdHMgPSB7fSkge1xuICAgIGlmICghYnVnUmVwb3J0RW5kcG9pbnQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gYnVnIHJlcG9ydCBlbmRwb2ludCBoYXMgYmVlbiBzZXQuXCIpO1xuICAgIH1cblxuICAgIGNvbnN0IHByb2dyZXNzQ2FsbGJhY2sgPSBvcHRzLnByb2dyZXNzQ2FsbGJhY2sgfHwgKCgpID0+IHt9KTtcbiAgICBjb25zdCBib2R5ID0gYXdhaXQgY29sbGVjdEJ1Z1JlcG9ydChvcHRzKTtcblxuICAgIHByb2dyZXNzQ2FsbGJhY2soX3QoXCJVcGxvYWRpbmcgbG9nc1wiKSk7XG4gICAgYXdhaXQgc3VibWl0UmVwb3J0KGJ1Z1JlcG9ydEVuZHBvaW50LCBib2R5LCBwcm9ncmVzc0NhbGxiYWNrKTtcbn1cblxuLyoqXG4gKiBEb3dubG9hZHMgdGhlIGZpbGVzIGZyb20gYSBidWcgcmVwb3J0LiBUaGlzIGlzIHRoZSBzYW1lIGFzIHNlbmRCdWdSZXBvcnQsXG4gKiBidXQgaW5zdGVhZCBjYXVzZXMgdGhlIGJyb3dzZXIgdG8gZG93bmxvYWQgdGhlIGZpbGVzIGxvY2FsbHkuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IG9wdHMgb3B0aW9uYWwgZGljdGlvbmFyeSBvZiBvcHRpb25zXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG9wdHMudXNlclRleHQgQW55IGFkZGl0aW9uYWwgdXNlciBpbnB1dC5cbiAqXG4gKiBAcGFyYW0ge2Jvb2xlYW59IG9wdHMuc2VuZExvZ3MgVHJ1ZSB0byBzZW5kIGxvZ3NcbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKHN0cmluZyl9IG9wdHMucHJvZ3Jlc3NDYWxsYmFjayBDYWxsYmFjayB0byBjYWxsIHdpdGggcHJvZ3Jlc3MgdXBkYXRlc1xuICpcbiAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVkIHdoZW4gdGhlIGJ1ZyByZXBvcnQgaXMgZG93bmxvYWRlZCAob3Igc3RhcnRlZCkuXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBkb3dubG9hZEJ1Z1JlcG9ydChvcHRzOiBJT3B0cyA9IHt9KSB7XG4gICAgY29uc3QgcHJvZ3Jlc3NDYWxsYmFjayA9IG9wdHMucHJvZ3Jlc3NDYWxsYmFjayB8fCAoKCkgPT4ge30pO1xuICAgIGNvbnN0IGJvZHkgPSBhd2FpdCBjb2xsZWN0QnVnUmVwb3J0KG9wdHMsIGZhbHNlKTtcblxuICAgIHByb2dyZXNzQ2FsbGJhY2soX3QoXCJEb3dubG9hZGluZyBsb2dzXCIpKTtcbiAgICBsZXQgbWV0YWRhdGEgPSBcIlwiO1xuICAgIGNvbnN0IHRhcGUgPSBuZXcgVGFyKCk7XG4gICAgbGV0IGkgPSAwO1xuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIGJvZHkuZW50cmllcygpKSB7XG4gICAgICAgIGlmIChrZXkgPT09ICdjb21wcmVzc2VkLWxvZycpIHtcbiAgICAgICAgICAgIGF3YWl0IG5ldyBQcm9taXNlPHZvaWQ+KChyZXNvbHZlID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICAgICAgICAgICAgICAgIHJlYWRlci5hZGRFdmVudExpc3RlbmVyKCdsb2FkZW5kJywgZXYgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0YXBlLmFwcGVuZChgbG9nLSR7aSsrfS5sb2dgLCBuZXcgVGV4dERlY29kZXIoKS5kZWNvZGUoZXYudGFyZ2V0LnJlc3VsdCBhcyBBcnJheUJ1ZmZlcikpO1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKHZhbHVlIGFzIEJsb2IpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbWV0YWRhdGEgKz0gYCR7a2V5fSA9ICR7dmFsdWV9XFxuYDtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0YXBlLmFwcGVuZCgnaXNzdWUudHh0JywgbWV0YWRhdGEpO1xuXG4gICAgLy8gV2UgaGF2ZSB0byBjcmVhdGUgYSBuZXcgYW5jaG9yIHRvIGRvd25sb2FkIGlmIHdlIHdhbnQgYSBmaWxlbmFtZS4gT3RoZXJ3aXNlIHdlIGNvdWxkXG4gICAgLy8ganVzdCB1c2Ugd2luZG93Lm9wZW4uXG4gICAgY29uc3QgZGwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgZGwuaHJlZiA9IGBkYXRhOmFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbTtiYXNlNjQsJHtidG9hKHVpbnQ4VG9TdHJpbmcodGFwZS5vdXQpKX1gO1xuICAgIGRsLmRvd25sb2FkID0gJ3JhZ2VzaGFrZS50YXInO1xuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZGwpO1xuICAgIGRsLmNsaWNrKCk7XG4gICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChkbCk7XG59XG5cbi8vIFNvdXJjZTogaHR0cHM6Ly9naXRodWIuY29tL2JlYXRnYW1taXQvdGFyLWpzL2Jsb2IvbWFzdGVyL2V4YW1wbGVzL21haW4uanNcbmZ1bmN0aW9uIHVpbnQ4VG9TdHJpbmcoYnVmOiBCdWZmZXIpIHtcbiAgICBsZXQgb3V0ID0gJyc7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBidWYubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgb3V0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIG91dDtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHN1Ym1pdEZlZWRiYWNrKFxuICAgIGVuZHBvaW50OiBzdHJpbmcsXG4gICAgbGFiZWw6IHN0cmluZyxcbiAgICBjb21tZW50OiBzdHJpbmcsXG4gICAgY2FuQ29udGFjdCA9IGZhbHNlLFxuICAgIGV4dHJhRGF0YTogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHt9LFxuKSB7XG4gICAgbGV0IHZlcnNpb24gPSBcIlVOS05PV05cIjtcbiAgICB0cnkge1xuICAgICAgICB2ZXJzaW9uID0gYXdhaXQgUGxhdGZvcm1QZWcuZ2V0KCkuZ2V0QXBwVmVyc2lvbigpO1xuICAgIH0gY2F0Y2ggKGVycikge30gLy8gUGxhdGZvcm1QZWcgYWxyZWFkeSBsb2dzIHRoaXMuXG5cbiAgICBjb25zdCBib2R5ID0gbmV3IEZvcm1EYXRhKCk7XG4gICAgYm9keS5hcHBlbmQoXCJsYWJlbFwiLCBsYWJlbCk7XG4gICAgYm9keS5hcHBlbmQoXCJ0ZXh0XCIsIGNvbW1lbnQpO1xuICAgIGJvZHkuYXBwZW5kKFwiY2FuX2NvbnRhY3RcIiwgY2FuQ29udGFjdCA/IFwieWVzXCIgOiBcIm5vXCIpO1xuXG4gICAgYm9keS5hcHBlbmQoXCJhcHBcIiwgXCJlbGVtZW50LXdlYlwiKTtcbiAgICBib2R5LmFwcGVuZChcInZlcnNpb25cIiwgdmVyc2lvbik7XG4gICAgYm9keS5hcHBlbmQoXCJwbGF0Zm9ybVwiLCBQbGF0Zm9ybVBlZy5nZXQoKS5nZXRIdW1hblJlYWRhYmxlTmFtZSgpKTtcbiAgICBib2R5LmFwcGVuZChcInVzZXJfaWRcIiwgTWF0cml4Q2xpZW50UGVnLmdldCgpPy5nZXRVc2VySWQoKSk7XG5cbiAgICBmb3IgKGNvbnN0IGsgaW4gZXh0cmFEYXRhKSB7XG4gICAgICAgIGJvZHkuYXBwZW5kKGssIGV4dHJhRGF0YVtrXSk7XG4gICAgfVxuXG4gICAgYXdhaXQgc3VibWl0UmVwb3J0KFNka0NvbmZpZy5nZXQoKS5idWdfcmVwb3J0X2VuZHBvaW50X3VybCwgYm9keSwgKCkgPT4ge30pO1xufVxuXG5mdW5jdGlvbiBzdWJtaXRSZXBvcnQoZW5kcG9pbnQ6IHN0cmluZywgYm9keTogRm9ybURhdGEsIHByb2dyZXNzQ2FsbGJhY2s6IChzdHI6IHN0cmluZykgPT4gdm9pZCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZTx2b2lkPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGNvbnN0IHJlcSA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgICByZXEub3BlbihcIlBPU1RcIiwgZW5kcG9pbnQpO1xuICAgICAgICByZXEudGltZW91dCA9IDUgKiA2MCAqIDEwMDA7XG4gICAgICAgIHJlcS5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmIChyZXEucmVhZHlTdGF0ZSA9PT0gWE1MSHR0cFJlcXVlc3QuTE9BRElORykge1xuICAgICAgICAgICAgICAgIHByb2dyZXNzQ2FsbGJhY2soX3QoXCJXYWl0aW5nIGZvciByZXNwb25zZSBmcm9tIHNlcnZlclwiKSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHJlcS5yZWFkeVN0YXRlID09PSBYTUxIdHRwUmVxdWVzdC5ET05FKSB7XG4gICAgICAgICAgICAgICAgLy8gb24gZG9uZVxuICAgICAgICAgICAgICAgIGlmIChyZXEuc3RhdHVzIDwgMjAwIHx8IHJlcS5zdGF0dXMgPj0gNDAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoYEhUVFAgJHtyZXEuc3RhdHVzfWApKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHJlcS5zZW5kKGJvZHkpO1xuICAgIH0pO1xufVxuIl19