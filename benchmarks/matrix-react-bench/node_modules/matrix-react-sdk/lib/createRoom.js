"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.canEncryptToAllUsers = canEncryptToAllUsers;
exports.default = createRoom;
exports.ensureDMExists = ensureDMExists;
exports.ensureVirtualRoomExists = ensureVirtualRoomExists;
exports.findDMForUser = findDMForUser;
exports.privateShouldBeEncrypted = privateShouldBeEncrypted;
exports.waitForMember = waitForMember;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _event = require("matrix-js-sdk/src/@types/event");

var _partials = require("matrix-js-sdk/src/@types/partials");

var _MatrixClientPeg = require("./MatrixClientPeg");

var _Modal = _interopRequireDefault(require("./Modal"));

var _languageHandler = require("./languageHandler");

var _dispatcher = _interopRequireDefault(require("./dispatcher/dispatcher"));

var Rooms = _interopRequireWildcard(require("./Rooms"));

var _DMRoomMap = _interopRequireDefault(require("./utils/DMRoomMap"));

var _UserAddress = require("./UserAddress");

var _WellKnownUtils = require("./utils/WellKnownUtils");

var _GroupStore = _interopRequireDefault(require("./stores/GroupStore"));

var _CountlyAnalytics = _interopRequireDefault(require("./CountlyAnalytics"));

var _membership = require("./utils/membership");

var _CallHandler = require("./CallHandler");

var _SpaceStore = _interopRequireDefault(require("./stores/spaces/SpaceStore"));

var _space = require("./utils/space");

var _actions = require("./dispatcher/actions");

var _ErrorDialog = _interopRequireDefault(require("./components/views/dialogs/ErrorDialog"));

var _Spinner = _interopRequireDefault(require("./components/views/elements/Spinner"));

var _logger = require("matrix-js-sdk/src/logger");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * Create a new room, and switch to it.
 *
 * @param {object=} opts parameters for creating the room
 * @param {string=} opts.dmUserId If specified, make this a DM room for this user and invite them
 * @param {object=} opts.createOpts set of options to pass to createRoom call.
 * @param {bool=} opts.spinner True to show a modal spinner while the room is created.
 *     Default: True
 * @param {bool=} opts.guestAccess Whether to enable guest access.
 *     Default: True
 * @param {bool=} opts.encryption Whether to enable encryption.
 *     Default: False
 * @param {bool=} opts.inlineErrors True to raise errors off the promise instead of resolving to null.
 *     Default: False
 * @param {bool=} opts.andView True to dispatch an action to view the room once it has been created.
 *
 * @returns {Promise} which resolves to the room id, or null if the
 * action was aborted or failed.
 */
async function createRoom(opts) {
  opts = opts || {};
  if (opts.spinner === undefined) opts.spinner = true;
  if (opts.guestAccess === undefined) opts.guestAccess = true;
  if (opts.encryption === undefined) opts.encryption = false;

  const startTime = _CountlyAnalytics.default.getTimestamp();

  const client = _MatrixClientPeg.MatrixClientPeg.get();

  if (client.isGuest()) {
    _dispatcher.default.dispatch({
      action: 'require_registration'
    });

    return null;
  }

  const defaultPreset = opts.dmUserId ? _partials.Preset.TrustedPrivateChat : _partials.Preset.PrivateChat; // set some defaults for the creation

  const createOpts = opts.createOpts || {};
  createOpts.preset = createOpts.preset || defaultPreset;
  createOpts.visibility = createOpts.visibility || _partials.Visibility.Private;

  if (opts.dmUserId && createOpts.invite === undefined) {
    switch ((0, _UserAddress.getAddressType)(opts.dmUserId)) {
      case 'mx-user-id':
        createOpts.invite = [opts.dmUserId];
        break;

      case 'email':
        createOpts.invite_3pid = [{
          id_server: _MatrixClientPeg.MatrixClientPeg.get().getIdentityServerUrl(true),
          medium: 'email',
          address: opts.dmUserId
        }];
    }
  }

  if (opts.dmUserId && createOpts.is_direct === undefined) {
    createOpts.is_direct = true;
  }

  if (opts.roomType) {
    createOpts.creation_content = _objectSpread(_objectSpread({}, createOpts.creation_content), {}, {
      [_event.RoomCreateTypeField]: opts.roomType
    });
  } // By default, view the room after creating it


  if (opts.andView === undefined) {
    opts.andView = true;
  }

  createOpts.initial_state = createOpts.initial_state || []; // Allow guests by default since the room is private and they'd
  // need an invite. This means clicking on a 3pid invite email can
  // actually drop you right in to a chat.

  if (opts.guestAccess) {
    createOpts.initial_state.push({
      type: 'm.room.guest_access',
      state_key: '',
      content: {
        guest_access: 'can_join'
      }
    });
  }

  if (opts.encryption) {
    createOpts.initial_state.push({
      type: 'm.room.encryption',
      state_key: '',
      content: {
        algorithm: 'm.megolm.v1.aes-sha2'
      }
    });
  }

  if (opts.parentSpace) {
    createOpts.initial_state.push((0, _space.makeSpaceParentEvent)(opts.parentSpace, true));

    if (!opts.historyVisibility) {
      opts.historyVisibility = createOpts.preset === _partials.Preset.PublicChat ? _partials.HistoryVisibility.WorldReadable : _partials.HistoryVisibility.Invited;
    }

    if (opts.joinRule === _partials.JoinRule.Restricted) {
      var _SpaceStore$instance$;

      if ((_SpaceStore$instance$ = _SpaceStore.default.instance.restrictedJoinRuleSupport) !== null && _SpaceStore$instance$ !== void 0 && _SpaceStore$instance$.preferred) {
        createOpts.room_version = _SpaceStore.default.instance.restrictedJoinRuleSupport.preferred;
        createOpts.initial_state.push({
          type: _event.EventType.RoomJoinRules,
          content: {
            "join_rule": _partials.JoinRule.Restricted,
            "allow": [{
              "type": _partials.RestrictedAllowType.RoomMembership,
              "room_id": opts.parentSpace.roomId
            }]
          }
        });
      }
    }
  } // we handle the restricted join rule in the parentSpace handling block above


  if (opts.joinRule && opts.joinRule !== _partials.JoinRule.Restricted) {
    createOpts.initial_state.push({
      type: _event.EventType.RoomJoinRules,
      content: {
        join_rule: opts.joinRule
      }
    });
  }

  if (opts.avatar) {
    let url = opts.avatar;

    if (opts.avatar instanceof File) {
      url = await client.uploadContent(opts.avatar);
    }

    createOpts.initial_state.push({
      type: _event.EventType.RoomAvatar,
      content: {
        url
      }
    });
  }

  if (opts.historyVisibility) {
    createOpts.initial_state.push({
      type: _event.EventType.RoomHistoryVisibility,
      content: {
        "history_visibility": opts.historyVisibility
      }
    });
  }

  let modal;
  if (opts.spinner) modal = _Modal.default.createDialog(_Spinner.default, null, 'mx_Dialog_spinner');
  let roomId;
  return client.createRoom(createOpts).catch(function (err) {
    // NB This checks for the Synapse-specific error condition of a room creation
    // having been denied because the requesting user wanted to publish the room,
    // but the server denies them that permission (via room_list_publication_rules).
    // The check below responds by retrying without publishing the room.
    if (err.httpStatus === 403 && err.errcode === "M_UNKNOWN" && err.data.error === "Not allowed to publish room") {
      _logger.logger.warn("Failed to publish room, try again without publishing it");

      createOpts.visibility = _partials.Visibility.Private;
      return client.createRoom(createOpts);
    } else {
      return Promise.reject(err);
    }
  }).finally(function () {
    if (modal) modal.close();
  }).then(function (res) {
    roomId = res.room_id;

    if (opts.dmUserId) {
      return Rooms.setDMRoom(roomId, opts.dmUserId);
    } else {
      return Promise.resolve();
    }
  }).then(() => {
    if (opts.parentSpace) {
      return _SpaceStore.default.instance.addRoomToSpace(opts.parentSpace, roomId, [client.getDomain()], opts.suggested);
    }

    if (opts.associatedWithCommunity) {
      return _GroupStore.default.addRoomToGroup(opts.associatedWithCommunity, roomId, false);
    }
  }).then(function () {
    // NB createRoom doesn't block on the client seeing the echo that the
    // room has been created, so we race here with the client knowing that
    // the room exists, causing things like
    // https://github.com/vector-im/vector-web/issues/1813
    // Even if we were to block on the echo, servers tend to split the room
    // state over multiple syncs so we can't atomically know when we have the
    // entire thing.
    if (opts.andView) {
      _dispatcher.default.dispatch({
        action: _actions.Action.ViewRoom,
        room_id: roomId,
        should_peek: false,
        // Creating a room will have joined us to the room,
        // so we are expecting the room to come down the sync
        // stream, if it hasn't already.
        joining: true,
        justCreatedOpts: opts
      });
    }

    _CountlyAnalytics.default.instance.trackRoomCreate(startTime, roomId);

    return roomId;
  }, function (err) {
    // Raise the error if the caller requested that we do so.
    if (opts.inlineErrors) throw err; // We also failed to join the room (this sets joining to false in RoomViewStore)

    _dispatcher.default.dispatch({
      action: _actions.Action.JoinRoomError,
      roomId
    });

    _logger.logger.error("Failed to create room " + roomId + " " + err);

    let description = (0, _languageHandler._t)("Server may be unavailable, overloaded, or you hit a bug.");

    if (err.errcode === "M_UNSUPPORTED_ROOM_VERSION") {
      // Technically not possible with the UI as of April 2019 because there's no
      // options for the user to change this. However, it's not a bad thing to report
      // the error to the user for if/when the UI is available.
      description = (0, _languageHandler._t)("The server does not support the room version specified.");
    }

    _Modal.default.createTrackedDialog('Failure to create room', '', _ErrorDialog.default, {
      title: (0, _languageHandler._t)("Failure to create room"),
      description
    });

    return null;
  });
}

function findDMForUser(client, userId) {
  const roomIds = _DMRoomMap.default.shared().getDMRoomsForUserId(userId);

  const rooms = roomIds.map(id => client.getRoom(id));
  const suitableDMRooms = rooms.filter(r => {
    // Validate that we are joined and the other person is also joined. We'll also make sure
    // that the room also looks like a DM (until we have canonical DMs to tell us). For now,
    // a DM is a room of two people that contains those two people exactly. This does mean
    // that bots, assistants, etc will ruin a room's DM-ness, though this is a problem for
    // canonical DMs to solve.
    if (r && r.getMyMembership() === "join") {
      const members = r.currentState.getMembers();
      const joinedMembers = members.filter(m => (0, _membership.isJoinedOrNearlyJoined)(m.membership));
      const otherMember = joinedMembers.find(m => m.userId === userId);
      return otherMember && joinedMembers.length === 2;
    }

    return false;
  }).sort((r1, r2) => {
    return r2.getLastActiveTimestamp() - r1.getLastActiveTimestamp();
  });

  if (suitableDMRooms.length) {
    return suitableDMRooms[0];
  }
}
/*
 * Try to ensure the user is already in the megolm session before continuing
 * NOTE: this assumes you've just created the room and there's not been an opportunity
 * for other code to run, so we shouldn't miss RoomState.newMember when it comes by.
 */


async function waitForMember(client, roomId, userId, opts = {
  timeout: 1500
}) {
  const {
    timeout
  } = opts;
  let handler;
  return new Promise(resolve => {
    handler = function (_, __, member) {
      // eslint-disable-line @typescript-eslint/naming-convention
      if (member.userId !== userId) return;
      if (member.roomId !== roomId) return;
      resolve(true);
    };

    client.on("RoomState.newMember", handler);
    /* We don't want to hang if this goes wrong, so we proceed and hope the other
       user is already in the megolm session */

    setTimeout(resolve, timeout, false);
  }).finally(() => {
    client.removeListener("RoomState.newMember", handler);
  });
}
/*
 * Ensure that for every user in a room, there is at least one device that we
 * can encrypt to.
 */


async function canEncryptToAllUsers(client, userIds) {
  try {
    const usersDeviceMap = await client.downloadKeys(userIds); // { "@user:host": { "DEVICE": {...}, ... }, ... }

    return Object.values(usersDeviceMap).every(userDevices => // { "DEVICE": {...}, ... }
    Object.keys(userDevices).length > 0);
  } catch (e) {
    _logger.logger.error("Error determining if it's possible to encrypt to all users: ", e);

    return false; // assume not
  }
} // Similar to ensureDMExists but also adds creation content
// without polluting ensureDMExists with unrelated stuff (also
// they're never encrypted).


async function ensureVirtualRoomExists(client, userId, nativeRoomId) {
  const existingDMRoom = findDMForUser(client, userId);
  let roomId;

  if (existingDMRoom) {
    roomId = existingDMRoom.roomId;
  } else {
    roomId = await createRoom({
      dmUserId: userId,
      spinner: false,
      andView: false,
      createOpts: {
        creation_content: {
          // This allows us to recognise that the room is a virtual room
          // when it comes down our sync stream (we also put the ID of the
          // respective native room in there because why not?)
          [_CallHandler.VIRTUAL_ROOM_EVENT_TYPE]: nativeRoomId
        }
      }
    });
  }

  return roomId;
}

async function ensureDMExists(client, userId) {
  const existingDMRoom = findDMForUser(client, userId);
  let roomId;

  if (existingDMRoom) {
    roomId = existingDMRoom.roomId;
  } else {
    let encryption = undefined;

    if (privateShouldBeEncrypted()) {
      encryption = await canEncryptToAllUsers(client, [userId]);
    }

    roomId = await createRoom({
      encryption,
      dmUserId: userId,
      spinner: false,
      andView: false
    });
    await waitForMember(client, roomId, userId);
  }

  return roomId;
}

function privateShouldBeEncrypted() {
  const e2eeWellKnown = (0, _WellKnownUtils.getE2EEWellKnown)();

  if (e2eeWellKnown) {
    const defaultDisabled = e2eeWellKnown["default"] === false;
    return !defaultDisabled;
  }

  return true;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,