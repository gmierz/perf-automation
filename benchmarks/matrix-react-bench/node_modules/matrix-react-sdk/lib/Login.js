"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.IdentityProviderBrand = void 0;
exports.sendLoginRequest = sendLoginRequest;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _matrix = require("matrix-js-sdk/src/matrix");

var _Security = _interopRequireDefault(require("./customisations/Security"));

var _logger = require("matrix-js-sdk/src/logger");

/*
Copyright 2015-2021 The Matrix.org Foundation C.I.C.
Copyright 2019 Michael Telatynski <7t3chguy@gmail.com>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// @ts-ignore - XXX: tsc doesn't like this: our js-sdk imports are complex so this isn't surprising
let IdentityProviderBrand;
exports.IdentityProviderBrand = IdentityProviderBrand;

(function (IdentityProviderBrand) {
  IdentityProviderBrand["Gitlab"] = "gitlab";
  IdentityProviderBrand["Github"] = "github";
  IdentityProviderBrand["Apple"] = "apple";
  IdentityProviderBrand["Google"] = "google";
  IdentityProviderBrand["Facebook"] = "facebook";
  IdentityProviderBrand["Twitter"] = "twitter";
})(IdentityProviderBrand || (exports.IdentityProviderBrand = IdentityProviderBrand = {}));

/* eslint-enable camelcase */
class Login {
  // TODO: Flows need a type in JS SDK
  constructor(hsUrl, isUrl, fallbackHsUrl, opts) {
    (0, _defineProperty2.default)(this, "hsUrl", void 0);
    (0, _defineProperty2.default)(this, "isUrl", void 0);
    (0, _defineProperty2.default)(this, "fallbackHsUrl", void 0);
    (0, _defineProperty2.default)(this, "flows", void 0);
    (0, _defineProperty2.default)(this, "defaultDeviceDisplayName", void 0);
    (0, _defineProperty2.default)(this, "tempClient", void 0);
    this.hsUrl = hsUrl;
    this.isUrl = isUrl;
    this.fallbackHsUrl = fallbackHsUrl;
    this.flows = [];
    this.defaultDeviceDisplayName = opts.defaultDeviceDisplayName;
    this.tempClient = null; // memoize
  }

  getHomeserverUrl() {
    return this.hsUrl;
  }

  getIdentityServerUrl() {
    return this.isUrl;
  }

  setHomeserverUrl(hsUrl) {
    this.tempClient = null; // clear memoization

    this.hsUrl = hsUrl;
  }

  setIdentityServerUrl(isUrl) {
    this.tempClient = null; // clear memoization

    this.isUrl = isUrl;
  }
  /**
   * Get a temporary MatrixClient, which can be used for login or register
   * requests.
   * @returns {MatrixClient}
   */


  createTemporaryClient() {
    if (this.tempClient) return this.tempClient; // use memoization

    return this.tempClient = (0, _matrix.createClient)({
      baseUrl: this.hsUrl,
      idBaseUrl: this.isUrl
    });
  }

  async getFlows() {
    const client = this.createTemporaryClient();
    const {
      flows
    } = await client.loginFlows();
    this.flows = flows;
    return this.flows;
  }

  loginViaPassword(username, phoneCountry, phoneNumber, password) {
    const isEmail = username.indexOf("@") > 0;
    let identifier;

    if (phoneCountry && phoneNumber) {
      identifier = {
        type: 'm.id.phone',
        country: phoneCountry,
        phone: phoneNumber,
        // XXX: Synapse historically wanted `number` and not `phone`
        number: phoneNumber
      };
    } else if (isEmail) {
      identifier = {
        type: 'm.id.thirdparty',
        medium: 'email',
        address: username
      };
    } else {
      identifier = {
        type: 'm.id.user',
        user: username
      };
    }

    const loginParams = {
      password,
      identifier,
      initial_device_display_name: this.defaultDeviceDisplayName
    };

    const tryFallbackHs = originalError => {
      return sendLoginRequest(this.fallbackHsUrl, this.isUrl, 'm.login.password', loginParams).catch(fallbackError => {
        _logger.logger.log("fallback HS login failed", fallbackError); // throw the original error


        throw originalError;
      });
    };

    let originalLoginError = null;
    return sendLoginRequest(this.hsUrl, this.isUrl, 'm.login.password', loginParams).catch(error => {
      originalLoginError = error;

      if (error.httpStatus === 403) {
        if (this.fallbackHsUrl) {
          return tryFallbackHs(originalLoginError);
        }
      }

      throw originalLoginError;
    }).catch(error => {
      _logger.logger.log("Login failed", error);

      throw error;
    });
  }

}
/**
 * Send a login request to the given server, and format the response
 * as a MatrixClientCreds
 *
 * @param {string} hsUrl   the base url of the Homeserver used to log in.
 * @param {string} isUrl   the base url of the default identity server
 * @param {string} loginType the type of login to do
 * @param {ILoginParams} loginParams the parameters for the login
 *
 * @returns {MatrixClientCreds}
 */


exports.default = Login;

async function sendLoginRequest(hsUrl, isUrl, loginType, loginParams) {
  var _SecurityCustomisatio;

  const client = (0, _matrix.createClient)({
    baseUrl: hsUrl,
    idBaseUrl: isUrl
  });
  const data = await client.login(loginType, loginParams);
  const wellknown = data.well_known;

  if (wellknown) {
    if (wellknown["m.homeserver"] && wellknown["m.homeserver"]["base_url"]) {
      hsUrl = wellknown["m.homeserver"]["base_url"];

      _logger.logger.log(`Overrode homeserver setting with ${hsUrl} from login response`);
    }

    if (wellknown["m.identity_server"] && wellknown["m.identity_server"]["base_url"]) {
      // TODO: should we prompt here?
      isUrl = wellknown["m.identity_server"]["base_url"];

      _logger.logger.log(`Overrode IS setting with ${isUrl} from login response`);
    }
  }

  const creds = {
    homeserverUrl: hsUrl,
    identityServerUrl: isUrl,
    userId: data.user_id,
    deviceId: data.device_id,
    accessToken: data.access_token
  };
  (_SecurityCustomisatio = _Security.default.examineLoginResponse) === null || _SecurityCustomisatio === void 0 ? void 0 : _SecurityCustomisatio.call(_Security.default, data, creds);
  return creds;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,