"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CHAT_EFFECTS = void 0;

var _languageHandler = require("../languageHandler");

/*
 Copyright 2020 Nurjin Jafar
 Copyright 2020 Nordeck IT + Consulting GmbH.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

/**
 * This configuration defines room effects that can be triggered by custom message types and emojis
 */
const CHAT_EFFECTS = [{
  emojis: ['🎊', '🎉'],
  msgType: 'nic.custom.confetti',
  command: 'confetti',
  description: () => (0, _languageHandler._td)("Sends the given message with confetti"),
  fallbackMessage: () => (0, _languageHandler._t)("sends confetti") + " 🎉",
  options: {
    maxCount: 150,
    speed: 3,
    frameInterval: 15,
    alpha: 1.0,
    gradient: false
  }
}, {
  emojis: ['🎆'],
  msgType: 'nic.custom.fireworks',
  command: 'fireworks',
  description: () => (0, _languageHandler._td)("Sends the given message with fireworks"),
  fallbackMessage: () => (0, _languageHandler._t)("sends fireworks") + " 🎆",
  options: {
    maxCount: 500,
    gravity: 0.05
  }
}, {
  emojis: ['🌧️', '⛈️', '🌦️'],
  msgType: 'io.element.effect.rainfall',
  command: 'rainfall',
  description: () => (0, _languageHandler._td)("Sends the given message with rainfall"),
  fallbackMessage: () => (0, _languageHandler._t)("sends rainfall") + " 🌧️",
  options: {
    maxCount: 600,
    speed: 10
  }
}, {
  emojis: ['❄', '🌨'],
  msgType: 'io.element.effect.snowfall',
  command: 'snowfall',
  description: () => (0, _languageHandler._td)("Sends the given message with snowfall"),
  fallbackMessage: () => (0, _languageHandler._t)("sends snowfall") + " ❄",
  options: {
    maxCount: 200,
    gravity: 0.05,
    maxDrift: 5
  }
}, {
  emojis: ["👾", "🌌"],
  msgType: "io.element.effects.space_invaders",
  command: "spaceinvaders",
  description: () => (0, _languageHandler._td)("Sends the given message with a space themed effect"),
  fallbackMessage: () => (0, _languageHandler._t)("sends space invaders") + " 👾",
  options: {
    maxCount: 50,
    gravity: 0.01
  }
}];
exports.CHAT_EFFECTS = CHAT_EFFECTS;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lZmZlY3RzL2luZGV4LnRzIl0sIm5hbWVzIjpbIkNIQVRfRUZGRUNUUyIsImVtb2ppcyIsIm1zZ1R5cGUiLCJjb21tYW5kIiwiZGVzY3JpcHRpb24iLCJmYWxsYmFja01lc3NhZ2UiLCJvcHRpb25zIiwibWF4Q291bnQiLCJzcGVlZCIsImZyYW1lSW50ZXJ2YWwiLCJhbHBoYSIsImdyYWRpZW50IiwiZ3Jhdml0eSIsIm1heERyaWZ0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBZ0JBOztBQWhCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFTQTtBQUNBO0FBQ0E7QUFDTyxNQUFNQSxZQUFtRCxHQUFHLENBQy9EO0FBQ0lDLEVBQUFBLE1BQU0sRUFBRSxDQUFDLElBQUQsRUFBTyxJQUFQLENBRFo7QUFFSUMsRUFBQUEsT0FBTyxFQUFFLHFCQUZiO0FBR0lDLEVBQUFBLE9BQU8sRUFBRSxVQUhiO0FBSUlDLEVBQUFBLFdBQVcsRUFBRSxNQUFNLDBCQUFJLHVDQUFKLENBSnZCO0FBS0lDLEVBQUFBLGVBQWUsRUFBRSxNQUFNLHlCQUFHLGdCQUFILElBQXVCLEtBTGxEO0FBTUlDLEVBQUFBLE9BQU8sRUFBRTtBQUNMQyxJQUFBQSxRQUFRLEVBQUUsR0FETDtBQUVMQyxJQUFBQSxLQUFLLEVBQUUsQ0FGRjtBQUdMQyxJQUFBQSxhQUFhLEVBQUUsRUFIVjtBQUlMQyxJQUFBQSxLQUFLLEVBQUUsR0FKRjtBQUtMQyxJQUFBQSxRQUFRLEVBQUU7QUFMTDtBQU5iLENBRCtELEVBZS9EO0FBQ0lWLEVBQUFBLE1BQU0sRUFBRSxDQUFDLElBQUQsQ0FEWjtBQUVJQyxFQUFBQSxPQUFPLEVBQUUsc0JBRmI7QUFHSUMsRUFBQUEsT0FBTyxFQUFFLFdBSGI7QUFJSUMsRUFBQUEsV0FBVyxFQUFFLE1BQU0sMEJBQUksd0NBQUosQ0FKdkI7QUFLSUMsRUFBQUEsZUFBZSxFQUFFLE1BQU0seUJBQUcsaUJBQUgsSUFBd0IsS0FMbkQ7QUFNSUMsRUFBQUEsT0FBTyxFQUFFO0FBQ0xDLElBQUFBLFFBQVEsRUFBRSxHQURMO0FBRUxLLElBQUFBLE9BQU8sRUFBRTtBQUZKO0FBTmIsQ0FmK0QsRUEwQi9EO0FBQ0lYLEVBQUFBLE1BQU0sRUFBRSxDQUFDLEtBQUQsRUFBUSxJQUFSLEVBQWMsS0FBZCxDQURaO0FBRUlDLEVBQUFBLE9BQU8sRUFBRSw0QkFGYjtBQUdJQyxFQUFBQSxPQUFPLEVBQUUsVUFIYjtBQUlJQyxFQUFBQSxXQUFXLEVBQUUsTUFBTSwwQkFBSSx1Q0FBSixDQUp2QjtBQUtJQyxFQUFBQSxlQUFlLEVBQUUsTUFBTSx5QkFBRyxnQkFBSCxJQUF1QixNQUxsRDtBQU1JQyxFQUFBQSxPQUFPLEVBQUU7QUFDTEMsSUFBQUEsUUFBUSxFQUFFLEdBREw7QUFFTEMsSUFBQUEsS0FBSyxFQUFFO0FBRkY7QUFOYixDQTFCK0QsRUFxQy9EO0FBQ0lQLEVBQUFBLE1BQU0sRUFBRSxDQUFDLEdBQUQsRUFBTSxJQUFOLENBRFo7QUFFSUMsRUFBQUEsT0FBTyxFQUFFLDRCQUZiO0FBR0lDLEVBQUFBLE9BQU8sRUFBRSxVQUhiO0FBSUlDLEVBQUFBLFdBQVcsRUFBRSxNQUFNLDBCQUFJLHVDQUFKLENBSnZCO0FBS0lDLEVBQUFBLGVBQWUsRUFBRSxNQUFNLHlCQUFHLGdCQUFILElBQXVCLElBTGxEO0FBTUlDLEVBQUFBLE9BQU8sRUFBRTtBQUNMQyxJQUFBQSxRQUFRLEVBQUUsR0FETDtBQUVMSyxJQUFBQSxPQUFPLEVBQUUsSUFGSjtBQUdMQyxJQUFBQSxRQUFRLEVBQUU7QUFITDtBQU5iLENBckMrRCxFQWlEL0Q7QUFDSVosRUFBQUEsTUFBTSxFQUFFLENBQUMsSUFBRCxFQUFPLElBQVAsQ0FEWjtBQUVJQyxFQUFBQSxPQUFPLEVBQUUsbUNBRmI7QUFHSUMsRUFBQUEsT0FBTyxFQUFFLGVBSGI7QUFJSUMsRUFBQUEsV0FBVyxFQUFFLE1BQU0sMEJBQUksb0RBQUosQ0FKdkI7QUFLSUMsRUFBQUEsZUFBZSxFQUFFLE1BQU0seUJBQUcsc0JBQUgsSUFBNkIsS0FMeEQ7QUFNSUMsRUFBQUEsT0FBTyxFQUFFO0FBQ0xDLElBQUFBLFFBQVEsRUFBRSxFQURMO0FBRUxLLElBQUFBLE9BQU8sRUFBRTtBQUZKO0FBTmIsQ0FqRCtELENBQTVEIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiBDb3B5cmlnaHQgMjAyMCBOdXJqaW4gSmFmYXJcbiBDb3B5cmlnaHQgMjAyMCBOb3JkZWNrIElUICsgQ29uc3VsdGluZyBHbWJILlxuXG4gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgeyBfdCwgX3RkIH0gZnJvbSBcIi4uL2xhbmd1YWdlSGFuZGxlclwiO1xuaW1wb3J0IHsgQ29uZmV0dGlPcHRpb25zIH0gZnJvbSBcIi4vY29uZmV0dGlcIjtcbmltcG9ydCB7IEVmZmVjdCB9IGZyb20gXCIuL2VmZmVjdFwiO1xuaW1wb3J0IHsgRmlyZXdvcmtzT3B0aW9ucyB9IGZyb20gXCIuL2ZpcmV3b3Jrc1wiO1xuaW1wb3J0IHsgUmFpbmZhbGxPcHRpb25zIH0gZnJvbSBcIi4vcmFpbmZhbGxcIjtcbmltcG9ydCB7IFNub3dmYWxsT3B0aW9ucyB9IGZyb20gXCIuL3Nub3dmYWxsXCI7XG5pbXBvcnQgeyBTcGFjZUludmFkZXJzT3B0aW9ucyB9IGZyb20gXCIuL3NwYWNlaW52YWRlcnNcIjtcblxuLyoqXG4gKiBUaGlzIGNvbmZpZ3VyYXRpb24gZGVmaW5lcyByb29tIGVmZmVjdHMgdGhhdCBjYW4gYmUgdHJpZ2dlcmVkIGJ5IGN1c3RvbSBtZXNzYWdlIHR5cGVzIGFuZCBlbW9qaXNcbiAqL1xuZXhwb3J0IGNvbnN0IENIQVRfRUZGRUNUUzogQXJyYXk8RWZmZWN0PHsgW2tleTogc3RyaW5nXTogYW55IH0+PiA9IFtcbiAgICB7XG4gICAgICAgIGVtb2ppczogWyfwn46KJywgJ/CfjoknXSxcbiAgICAgICAgbXNnVHlwZTogJ25pYy5jdXN0b20uY29uZmV0dGknLFxuICAgICAgICBjb21tYW5kOiAnY29uZmV0dGknLFxuICAgICAgICBkZXNjcmlwdGlvbjogKCkgPT4gX3RkKFwiU2VuZHMgdGhlIGdpdmVuIG1lc3NhZ2Ugd2l0aCBjb25mZXR0aVwiKSxcbiAgICAgICAgZmFsbGJhY2tNZXNzYWdlOiAoKSA9PiBfdChcInNlbmRzIGNvbmZldHRpXCIpICsgXCIg8J+OiVwiLFxuICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICBtYXhDb3VudDogMTUwLFxuICAgICAgICAgICAgc3BlZWQ6IDMsXG4gICAgICAgICAgICBmcmFtZUludGVydmFsOiAxNSxcbiAgICAgICAgICAgIGFscGhhOiAxLjAsXG4gICAgICAgICAgICBncmFkaWVudDogZmFsc2UsXG4gICAgICAgIH0sXG4gICAgfSBhcyBFZmZlY3Q8Q29uZmV0dGlPcHRpb25zPixcbiAgICB7XG4gICAgICAgIGVtb2ppczogWyfwn46GJ10sXG4gICAgICAgIG1zZ1R5cGU6ICduaWMuY3VzdG9tLmZpcmV3b3JrcycsXG4gICAgICAgIGNvbW1hbmQ6ICdmaXJld29ya3MnLFxuICAgICAgICBkZXNjcmlwdGlvbjogKCkgPT4gX3RkKFwiU2VuZHMgdGhlIGdpdmVuIG1lc3NhZ2Ugd2l0aCBmaXJld29ya3NcIiksXG4gICAgICAgIGZhbGxiYWNrTWVzc2FnZTogKCkgPT4gX3QoXCJzZW5kcyBmaXJld29ya3NcIikgKyBcIiDwn46GXCIsXG4gICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgIG1heENvdW50OiA1MDAsXG4gICAgICAgICAgICBncmF2aXR5OiAwLjA1LFxuICAgICAgICB9LFxuICAgIH0gYXMgRWZmZWN0PEZpcmV3b3Jrc09wdGlvbnM+LFxuICAgIHtcbiAgICAgICAgZW1vamlzOiBbJ/CfjKfvuI8nLCAn4puI77iPJywgJ/CfjKbvuI8nXSxcbiAgICAgICAgbXNnVHlwZTogJ2lvLmVsZW1lbnQuZWZmZWN0LnJhaW5mYWxsJyxcbiAgICAgICAgY29tbWFuZDogJ3JhaW5mYWxsJyxcbiAgICAgICAgZGVzY3JpcHRpb246ICgpID0+IF90ZChcIlNlbmRzIHRoZSBnaXZlbiBtZXNzYWdlIHdpdGggcmFpbmZhbGxcIiksXG4gICAgICAgIGZhbGxiYWNrTWVzc2FnZTogKCkgPT4gX3QoXCJzZW5kcyByYWluZmFsbFwiKSArIFwiIPCfjKfvuI9cIixcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgbWF4Q291bnQ6IDYwMCxcbiAgICAgICAgICAgIHNwZWVkOiAxMCxcbiAgICAgICAgfSxcbiAgICB9IGFzIEVmZmVjdDxSYWluZmFsbE9wdGlvbnM+LFxuICAgIHtcbiAgICAgICAgZW1vamlzOiBbJ+KdhCcsICfwn4yoJ10sXG4gICAgICAgIG1zZ1R5cGU6ICdpby5lbGVtZW50LmVmZmVjdC5zbm93ZmFsbCcsXG4gICAgICAgIGNvbW1hbmQ6ICdzbm93ZmFsbCcsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAoKSA9PiBfdGQoXCJTZW5kcyB0aGUgZ2l2ZW4gbWVzc2FnZSB3aXRoIHNub3dmYWxsXCIpLFxuICAgICAgICBmYWxsYmFja01lc3NhZ2U6ICgpID0+IF90KFwic2VuZHMgc25vd2ZhbGxcIikgKyBcIiDinYRcIixcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgbWF4Q291bnQ6IDIwMCxcbiAgICAgICAgICAgIGdyYXZpdHk6IDAuMDUsXG4gICAgICAgICAgICBtYXhEcmlmdDogNSxcbiAgICAgICAgfSxcbiAgICB9IGFzIEVmZmVjdDxTbm93ZmFsbE9wdGlvbnM+LFxuICAgIHtcbiAgICAgICAgZW1vamlzOiBbXCLwn5G+XCIsIFwi8J+MjFwiXSxcbiAgICAgICAgbXNnVHlwZTogXCJpby5lbGVtZW50LmVmZmVjdHMuc3BhY2VfaW52YWRlcnNcIixcbiAgICAgICAgY29tbWFuZDogXCJzcGFjZWludmFkZXJzXCIsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAoKSA9PiBfdGQoXCJTZW5kcyB0aGUgZ2l2ZW4gbWVzc2FnZSB3aXRoIGEgc3BhY2UgdGhlbWVkIGVmZmVjdFwiKSxcbiAgICAgICAgZmFsbGJhY2tNZXNzYWdlOiAoKSA9PiBfdChcInNlbmRzIHNwYWNlIGludmFkZXJzXCIpICsgXCIg8J+RvlwiLFxuICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICBtYXhDb3VudDogNTAsXG4gICAgICAgICAgICBncmF2aXR5OiAwLjAxLFxuICAgICAgICB9LFxuICAgIH0gYXMgRWZmZWN0PFNwYWNlSW52YWRlcnNPcHRpb25zPixcbl07XG5cbiJdfQ==