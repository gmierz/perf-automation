"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.DefaultOptions = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _arrays = require("../../utils/arrays");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const DefaultOptions = {
  maxCount: 200,
  gravity: 0.05,
  maxDrift: 5
};
exports.DefaultOptions = DefaultOptions;
const KEY_FRAME_INTERVAL = 15; // 15ms, roughly

class Snowfall {
  constructor(options) {
    (0, _defineProperty2.default)(this, "options", void 0);
    (0, _defineProperty2.default)(this, "context", null);
    (0, _defineProperty2.default)(this, "particles", []);
    (0, _defineProperty2.default)(this, "lastAnimationTime", void 0);
    (0, _defineProperty2.default)(this, "isRunning", void 0);
    (0, _defineProperty2.default)(this, "start", async (canvas, timeout = 3000) => {
      if (!canvas) {
        return;
      }

      this.context = canvas.getContext('2d');
      this.particles = [];
      const count = this.options.maxCount;

      while (this.particles.length < count) {
        this.particles.push(this.resetParticle({}, canvas.width, canvas.height));
      }

      this.isRunning = true;
      requestAnimationFrame(this.renderLoop);

      if (timeout) {
        window.setTimeout(this.stop, timeout);
      }
    });
    (0, _defineProperty2.default)(this, "stop", async () => {
      this.isRunning = false;
    });
    (0, _defineProperty2.default)(this, "resetParticle", (particle, width, height) => {
      particle.x = Math.random() * width;
      particle.y = Math.random() * -height;
      particle.xCol = particle.x;
      particle.diameter = Math.random() * 7 + 4;
      particle.maximumDrift = Math.random() * this.options.maxDrift + 3.5;
      particle.gravity = this.options.gravity + Math.random() * 6 + 4;
      return particle;
    });
    (0, _defineProperty2.default)(this, "renderLoop", () => {
      if (!this.context || !this.context.canvas) {
        return;
      }

      if (this.particles.length === 0) {
        this.context.clearRect(0, 0, this.context.canvas.width, this.context.canvas.height);
      } else {
        const timeDelta = Date.now() - this.lastAnimationTime;

        if (timeDelta >= KEY_FRAME_INTERVAL || !this.lastAnimationTime) {
          // Clear the screen first
          this.context.clearRect(0, 0, this.context.canvas.width, this.context.canvas.height);
          this.lastAnimationTime = Date.now();
          this.animateAndRenderSnowflakes();
        }

        requestAnimationFrame(this.renderLoop);
      }
    });
    this.options = _objectSpread(_objectSpread({}, DefaultOptions), options);
  }

  animateAndRenderSnowflakes() {
    if (!this.context || !this.context.canvas) {
      return;
    }

    const height = this.context.canvas.height;

    for (const particle of (0, _arrays.arrayFastClone)(this.particles)) {
      particle.y += particle.gravity; // We treat the drift as a sine function to have a more fluid-like movement instead
      // of a pong-like movement off walls of the X column. This means that for
      // $x=A\sin(\frac{2\pi}{P}y)$ we use the `maximumDrift` as the amplitude (A) and a
      // large multiplier to create a very long waveform through P.

      const peakDistance = 75 * particle.maximumDrift;
      const PI2 = Math.PI * 2;
      particle.x = particle.maximumDrift * Math.sin(PI2 / peakDistance * particle.y);
      particle.x += particle.xCol; // bring the particle to the right place

      const radius = particle.diameter / 2;
      this.context.save();
      this.context.beginPath();
      this.context.ellipse(particle.x, particle.y, radius, radius, 0, 0, 360);
      this.context.fillStyle = '#eaeaea'; // grey so it shows up on the light theme

      this.context.fill();
      this.context.closePath();
      this.context.restore(); // Remove any dead snowflakes

      const maxBounds = radius * 4; // make sure it's *really* off screen

      if (particle.y > height + maxBounds) {
        const idx = this.particles.indexOf(particle);
        this.particles.splice(idx, 1);
      }
    }
  }

}

exports.default = Snowfall;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9lZmZlY3RzL3Nub3dmYWxsL2luZGV4LnRzIl0sIm5hbWVzIjpbIkRlZmF1bHRPcHRpb25zIiwibWF4Q291bnQiLCJncmF2aXR5IiwibWF4RHJpZnQiLCJLRVlfRlJBTUVfSU5URVJWQUwiLCJTbm93ZmFsbCIsImNvbnN0cnVjdG9yIiwib3B0aW9ucyIsImNhbnZhcyIsInRpbWVvdXQiLCJjb250ZXh0IiwiZ2V0Q29udGV4dCIsInBhcnRpY2xlcyIsImNvdW50IiwibGVuZ3RoIiwicHVzaCIsInJlc2V0UGFydGljbGUiLCJ3aWR0aCIsImhlaWdodCIsImlzUnVubmluZyIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInJlbmRlckxvb3AiLCJ3aW5kb3ciLCJzZXRUaW1lb3V0Iiwic3RvcCIsInBhcnRpY2xlIiwieCIsIk1hdGgiLCJyYW5kb20iLCJ5IiwieENvbCIsImRpYW1ldGVyIiwibWF4aW11bURyaWZ0IiwiY2xlYXJSZWN0IiwidGltZURlbHRhIiwiRGF0ZSIsIm5vdyIsImxhc3RBbmltYXRpb25UaW1lIiwiYW5pbWF0ZUFuZFJlbmRlclNub3dmbGFrZXMiLCJwZWFrRGlzdGFuY2UiLCJQSTIiLCJQSSIsInNpbiIsInJhZGl1cyIsInNhdmUiLCJiZWdpblBhdGgiLCJlbGxpcHNlIiwiZmlsbFN0eWxlIiwiZmlsbCIsImNsb3NlUGF0aCIsInJlc3RvcmUiLCJtYXhCb3VuZHMiLCJpZHgiLCJpbmRleE9mIiwic3BsaWNlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQWdCQTs7Ozs7O0FBMEJPLE1BQU1BLGNBQStCLEdBQUc7QUFDM0NDLEVBQUFBLFFBQVEsRUFBRSxHQURpQztBQUUzQ0MsRUFBQUEsT0FBTyxFQUFFLElBRmtDO0FBRzNDQyxFQUFBQSxRQUFRLEVBQUU7QUFIaUMsQ0FBeEM7O0FBTVAsTUFBTUMsa0JBQWtCLEdBQUcsRUFBM0IsQyxDQUErQjs7QUFFaEIsTUFBTUMsUUFBTixDQUF3QztBQUduREMsRUFBQUEsV0FB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Q0FBOUIsRUFBaUNELFFBQVEsQ0FBQ0ksQ0FBMUMsRUFBNkNjLE1BQTdDLEVBQXFEQSxNQUFyRCxFQUE2RCxDQUE3RCxFQUFnRSxDQUFoRSxFQUFtRSxHQUFuRTtBQUNBLFdBQUtqQyxPQUFMLENBQWFxQyxTQUFiLEdBQXlCLFNBQXpCLENBaEJtRCxDQWdCZjs7QUFDcEMsV0FBS3JDLE9BQUwsQ0FBYXNDLElBQWI7QUFDQSxXQUFLdEMsT0FBTCxDQUFhdUMsU0FBYjtBQUNBLFdBQUt2QyxPQUFMLENBQWF3QyxPQUFiLEdBbkJtRCxDQXFCbkQ7O0FBQ0EsWUFBTUMsU0FBUyxHQUFHUixNQUFNLEdBQUcsQ0FBM0IsQ0F0Qm1ELENBc0JyQjs7QUFDOUIsVUFBSWxCLFFBQVEsQ0FBQ0ksQ0FBVCxHQUFjWCxNQUFNLEdBQUdpQyxTQUEzQixFQUF1QztBQUNuQyxjQUFNQyxHQUFHLEdBQUcsS0FBS3hDLFNBQUwsQ0FBZXlDLE9BQWYsQ0FBdUI1QixRQUF2QixDQUFaO0FBQ0EsYUFBS2IsU0FBTCxDQUFlMEMsTUFBZixDQUFzQkYsR0FBdEIsRUFBMkIsQ0FBM0I7QUFDSDtBQUNKO0FBQ0o7O0FBaEdrRCIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gQ29weXJpZ2h0IDIwMjAgVGhlIE1hdHJpeC5vcmcgRm91bmRhdGlvbiBDLkkuQy5cblxuIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cbiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IElDYW52YXNFZmZlY3QgZnJvbSAnLi4vSUNhbnZhc0VmZmVjdCc7XG5pbXBvcnQgeyBhcnJheUZhc3RDbG9uZSB9IGZyb20gXCIuLi8uLi91dGlscy9hcnJheXNcIjtcblxuZXhwb3J0IHR5cGUgU25vd2ZhbGxPcHRpb25zID0ge1xuICAgIC8qKlxuICAgICAqIFRoZSBtYXhpbXVtIG51bWJlciBvZiBzbm93Zmxha2VzIHRvIHJlbmRlciBhdCBhIGdpdmVuIHRpbWVcbiAgICAgKi9cbiAgICBtYXhDb3VudDogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFRoZSBhbW91bnQgb2YgZ3Jhdml0eSB0byBhcHBseSB0byB0aGUgc25vd2ZsYWtlc1xuICAgICAqL1xuICAgIGdyYXZpdHk6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBUaGUgYW1vdW50IG9mIGRyaWZ0IChob3Jpem9udGFsIHN3YXkpIHRvIGFwcGx5IHRvIHRoZSBzbm93Zmxha2VzLiBFYWNoIHNub3dmbGFrZSB2YXJpZXMuXG4gICAgICovXG4gICAgbWF4RHJpZnQ6IG51bWJlcjtcbn07XG5cbnR5cGUgU25vd2ZsYWtlID0ge1xuICAgIHg6IG51bWJlcjtcbiAgICB5OiBudW1iZXI7XG4gICAgeENvbDogbnVtYmVyO1xuICAgIGRpYW1ldGVyOiBudW1iZXI7XG4gICAgbWF4aW11bURyaWZ0OiBudW1iZXI7XG4gICAgZ3Jhdml0eTogbnVtYmVyO1xufTtcblxuZXhwb3J0IGNvbnN0IERlZmF1bHRPcHRpb25zOiBTbm93ZmFsbE9wdGlvbnMgPSB7XG4gICAgbWF4Q291bnQ6IDIwMCxcbiAgICBncmF2aXR5OiAwLjA1LFxuICAgIG1heERyaWZ0OiA1LFxufTtcblxuY29uc3QgS0VZX0ZSQU1FX0lOVEVSVkFMID0gMTU7IC8vIDE1bXMsIHJvdWdobHlcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU25vd2ZhbGwgaW1wbGVtZW50cyBJQ2FudmFzRWZmZWN0IHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IG9wdGlvbnM6IFNub3dmYWxsT3B0aW9ucztcblxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnM6IHsgW2tleTogc3RyaW5nXTogYW55IH0pIHtcbiAgICAgICAgdGhpcy5vcHRpb25zID0geyAuLi5EZWZhdWx0T3B0aW9ucywgLi4ub3B0aW9ucyB9O1xuICAgIH1cblxuICAgIHByaXZhdGUgY29udGV4dDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEIHwgbnVsbCA9IG51bGw7XG4gICAgcHJpdmF0ZSBwYXJ0aWNsZXM6IEFycmF5PFNub3dmbGFrZT4gPSBbXTtcbiAgICBwcml2YXRlIGxhc3RBbmltYXRpb25UaW1lOiBudW1iZXI7XG5cbiAgICBwdWJsaWMgaXNSdW5uaW5nOiBib29sZWFuO1xuXG4gICAgcHVibGljIHN0YXJ0ID0gYXN5bmMgKGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQsIHRpbWVvdXQgPSAzMDAwKSA9PiB7XG4gICAgICAgIGlmICghY2FudmFzKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgICAgIHRoaXMucGFydGljbGVzID0gW107XG4gICAgICAgIGNvbnN0IGNvdW50ID0gdGhpcy5vcHRpb25zLm1heENvdW50O1xuICAgICAgICB3aGlsZSAodGhpcy5wYXJ0aWNsZXMubGVuZ3RoIDwgY291bnQpIHtcbiAgICAgICAgICAgIHRoaXMucGFydGljbGVzLnB1c2godGhpcy5yZXNldFBhcnRpY2xlKHt9IGFzIFNub3dmbGFrZSwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pc1J1bm5pbmcgPSB0cnVlO1xuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy5yZW5kZXJMb29wKTtcbiAgICAgICAgaWYgKHRpbWVvdXQpIHtcbiAgICAgICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KHRoaXMuc3RvcCwgdGltZW91dCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcHVibGljIHN0b3AgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgIHRoaXMuaXNSdW5uaW5nID0gZmFsc2U7XG4gICAgfTtcblxuICAgIHByaXZhdGUgcmVzZXRQYXJ0aWNsZSA9IChwYXJ0aWNsZTogU25vd2ZsYWtlLCB3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcik6IFNub3dmbGFrZSA9PiB7XG4gICAgICAgIHBhcnRpY2xlLnggPSBNYXRoLnJhbmRvbSgpICogd2lkdGg7XG4gICAgICAgIHBhcnRpY2xlLnkgPSBNYXRoLnJhbmRvbSgpICogLWhlaWdodDtcbiAgICAgICAgcGFydGljbGUueENvbCA9IHBhcnRpY2xlLng7XG4gICAgICAgIHBhcnRpY2xlLmRpYW1ldGVyID0gKE1hdGgucmFuZG9tKCkgKiA3KSArIDQ7XG4gICAgICAgIHBhcnRpY2xlLm1heGltdW1EcmlmdCA9IChNYXRoLnJhbmRvbSgpICogdGhpcy5vcHRpb25zLm1heERyaWZ0KSArIDMuNTtcbiAgICAgICAgcGFydGljbGUuZ3Jhdml0eSA9IHRoaXMub3B0aW9ucy5ncmF2aXR5ICsgKE1hdGgucmFuZG9tKCkgKiA2KSArIDQ7XG4gICAgICAgIHJldHVybiBwYXJ0aWNsZTtcbiAgICB9O1xuXG4gICAgcHJpdmF0ZSByZW5kZXJMb29wID0gKCk6IHZvaWQgPT4ge1xuICAgICAgICBpZiAoIXRoaXMuY29udGV4dCB8fCAhdGhpcy5jb250ZXh0LmNhbnZhcykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnBhcnRpY2xlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5jbGVhclJlY3QoMCwgMCwgdGhpcy5jb250ZXh0LmNhbnZhcy53aWR0aCwgdGhpcy5jb250ZXh0LmNhbnZhcy5oZWlnaHQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgdGltZURlbHRhID0gRGF0ZS5ub3coKSAtIHRoaXMubGFzdEFuaW1hdGlvblRpbWU7XG4gICAgICAgICAgICBpZiAodGltZURlbHRhID49IEtFWV9GUkFNRV9JTlRFUlZBTCB8fCAhdGhpcy5sYXN0QW5pbWF0aW9uVGltZSkge1xuICAgICAgICAgICAgICAgIC8vIENsZWFyIHRoZSBzY3JlZW4gZmlyc3RcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuY2xlYXJSZWN0KDAsIDAsIHRoaXMuY29udGV4dC5jYW52YXMud2lkdGgsIHRoaXMuY29udGV4dC5jYW52YXMuaGVpZ2h0KTtcblxuICAgICAgICAgICAgICAgIHRoaXMubGFzdEFuaW1hdGlvblRpbWUgPSBEYXRlLm5vdygpO1xuICAgICAgICAgICAgICAgIHRoaXMuYW5pbWF0ZUFuZFJlbmRlclNub3dmbGFrZXMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLnJlbmRlckxvb3ApO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHByaXZhdGUgYW5pbWF0ZUFuZFJlbmRlclNub3dmbGFrZXMoKSB7XG4gICAgICAgIGlmICghdGhpcy5jb250ZXh0IHx8ICF0aGlzLmNvbnRleHQuY2FudmFzKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaGVpZ2h0ID0gdGhpcy5jb250ZXh0LmNhbnZhcy5oZWlnaHQ7XG4gICAgICAgIGZvciAoY29uc3QgcGFydGljbGUgb2YgYXJyYXlGYXN0Q2xvbmUodGhpcy5wYXJ0aWNsZXMpKSB7XG4gICAgICAgICAgICBwYXJ0aWNsZS55ICs9IHBhcnRpY2xlLmdyYXZpdHk7XG5cbiAgICAgICAgICAgIC8vIFdlIHRyZWF0IHRoZSBkcmlmdCBhcyBhIHNpbmUgZnVuY3Rpb24gdG8gaGF2ZSBhIG1vcmUgZmx1aWQtbGlrZSBtb3ZlbWVudCBpbnN0ZWFkXG4gICAgICAgICAgICAvLyBvZiBhIHBvbmctbGlrZSBtb3ZlbWVudCBvZmYgd2FsbHMgb2YgdGhlIFggY29sdW1uLiBUaGlzIG1lYW5zIHRoYXQgZm9yXG4gICAgICAgICAgICAvLyAkeD1BXFxzaW4oXFxmcmFjezJcXHBpfXtQfXkpJCB3ZSB1c2UgdGhlIGBtYXhpbXVtRHJpZnRgIGFzIHRoZSBhbXBsaXR1ZGUgKEEpIGFuZCBhXG4gICAgICAgICAgICAvLyBsYXJnZSBtdWx0aXBsaWVyIHRvIGNyZWF0ZSBhIHZlcnkgbG9uZyB3YXZlZm9ybSB0aHJvdWdoIFAuXG4gICAgICAgICAgICBjb25zdCBwZWFrRGlzdGFuY2UgPSA3NSAqIHBhcnRpY2xlLm1heGltdW1EcmlmdDtcbiAgICAgICAgICAgIGNvbnN0IFBJMiA9IE1hdGguUEkgKiAyO1xuICAgICAgICAgICAgcGFydGljbGUueCA9IHBhcnRpY2xlLm1heGltdW1EcmlmdCAqIE1hdGguc2luKChQSTIgLyBwZWFrRGlzdGFuY2UpICogcGFydGljbGUueSk7XG4gICAgICAgICAgICBwYXJ0aWNsZS54ICs9IHBhcnRpY2xlLnhDb2w7IC8vIGJyaW5nIHRoZSBwYXJ0aWNsZSB0byB0aGUgcmlnaHQgcGxhY2VcblxuICAgICAgICAgICAgY29uc3QgcmFkaXVzID0gcGFydGljbGUuZGlhbWV0ZXIgLyAyO1xuICAgICAgICAgICAgdGhpcy5jb250ZXh0LnNhdmUoKTtcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5lbGxpcHNlKHBhcnRpY2xlLngsIHBhcnRpY2xlLnksIHJhZGl1cywgcmFkaXVzLCAwLCAwLCAzNjApO1xuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmZpbGxTdHlsZSA9ICcjZWFlYWVhJzsgLy8gZ3JleSBzbyBpdCBzaG93cyB1cCBvbiB0aGUgbGlnaHQgdGhlbWVcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5maWxsKCk7XG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICAgICAgICB0aGlzLmNvbnRleHQucmVzdG9yZSgpO1xuXG4gICAgICAgICAgICAvLyBSZW1vdmUgYW55IGRlYWQgc25vd2ZsYWtlc1xuICAgICAgICAgICAgY29uc3QgbWF4Qm91bmRzID0gcmFkaXVzICogNDsgLy8gbWFrZSBzdXJlIGl0J3MgKnJlYWxseSogb2ZmIHNjcmVlblxuICAgICAgICAgICAgaWYgKHBhcnRpY2xlLnkgPiAoaGVpZ2h0ICsgbWF4Qm91bmRzKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGlkeCA9IHRoaXMucGFydGljbGVzLmluZGV4T2YocGFydGljbGUpO1xuICAgICAgICAgICAgICAgIHRoaXMucGFydGljbGVzLnNwbGljZShpZHgsIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuIl19