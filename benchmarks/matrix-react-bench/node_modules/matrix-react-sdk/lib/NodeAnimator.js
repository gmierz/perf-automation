"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

/**
 * The NodeAnimator contains components and animates transitions.
 * It will only pick up direct changes to properties ('left', currently), and so
 * will not work for animating positional changes where the position is implicit
 * from DOM order. This makes it a lot simpler and lighter: if you need fully
 * automatic positional animation, look at react-shuffle or similar libraries.
 */
class NodeAnimator extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "nodes", {});
    (0, _defineProperty2.default)(this, "children", void 0);
    this.updateChildren(this.props.children);
  }

  componentDidUpdate() {
    this.updateChildren(this.props.children);
  }
  /**
   *
   * @param {HTMLElement} node element to apply styles to
   * @param {React.CSSProperties} styles a key/value pair of CSS properties
   * @returns {void}
   */


  applyStyles(node, styles) {
    Object.entries(styles).forEach(([property, value]) => {
      node.style[property] = value;
    });
  }

  updateChildren(newChildren) {
    const oldChildren = this.children || {};
    this.children = {};

    _react.default.Children.toArray(newChildren).forEach(c => {
      if (oldChildren[c.key]) {
        const old = oldChildren[c.key];

        const oldNode = _reactDom.default.findDOMNode(this.nodes[old.key]);

        if (oldNode && oldNode.style.left !== c.props.style.left) {
          this.applyStyles(oldNode, {
            left: c.props.style.left
          }); // console.log("translation: "+oldNode.style.left+" -> "+c.props.style.left);
        } // clone the old element with the props (and children) of the new element
        // so prop updates are still received by the children.


        this.children[c.key] = /*#__PURE__*/_react.default.cloneElement(old, c.props, c.props.children);
      } else {
        // new element. If we have a startStyle, use that as the style and go through
        // the enter animations
        const newProps = {};
        const restingStyle = c.props.style;
        const startStyles = this.props.startStyles;

        if (startStyles.length > 0) {
          const startStyle = startStyles[0];
          newProps.style = startStyle; // console.log("mounted@startstyle0: "+JSON.stringify(startStyle));
        }

        newProps.ref = n => this.collectNode(c.key, n, restingStyle);

        this.children[c.key] = /*#__PURE__*/_react.default.cloneElement(c, newProps);
      }
    });
  }

  collectNode(k, node, restingStyle) {
    if (node && this.nodes[k] === undefined && this.props.startStyles.length > 0) {
      const startStyles = this.props.startStyles;

      const domNode = _reactDom.default.findDOMNode(node); // start from startStyle 1: 0 is the one we gave it
      // to start with, so now we animate 1 etc.


      for (let i = 1; i < startStyles.length; ++i) {
        this.applyStyles(domNode, startStyles[i]); // console.log("start:"
        //             JSON.stringify(startStyles[i]),
        //             );
      } // and then we animate to the resting state


      setTimeout(() => {
        this.applyStyles(domNode, restingStyle);
      }, 0); // console.log("enter:",
      //             JSON.stringify(restingStyle));
    }

    this.nodes[k] = node;
  }

  render() {
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, Object.values(this.children));
  }

}

exports.default = NodeAnimator;
(0, _defineProperty2.default)(NodeAnimator, "defaultProps", {
  startStyles: []
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,