import { MatrixEvent } from "matrix-js-sdk/src/models/event";
import { Room } from "matrix-js-sdk/src/models/room";
export declare const Notifier: {
    notifsByRoom: {};
    pendingEncryptedEventIds: any[];
    notificationMessageForEvent: (ev: MatrixEvent) => string;
    _displayPopupNotification: (ev: MatrixEvent, room: Room) => void;
    getSoundForRoom: (roomId: string) => {
        url: string;
        name: any;
        type: any;
        size: any;
    };
    _playAudioNotification: (ev: MatrixEvent, room: Room) => Promise<void>;
    start: () => void;
    stop: () => void;
    supportsDesktopNotifications: () => boolean;
    setEnabled: (enable: boolean, callback?: () => void) => void;
    isEnabled: () => any;
    isPossible: () => boolean;
    isBodyEnabled: () => any;
    isAudioEnabled: () => any;
    setPromptHidden: (hidden: boolean, persistent?: boolean) => void;
    shouldShowPrompt: () => boolean;
    _isPromptHidden: () => any;
    onSyncStateChange: (state: string) => void;
    onEvent: (ev: MatrixEvent) => void;
    onEventDecrypted: (ev: MatrixEvent) => void;
    onRoomReceipt: (ev: MatrixEvent, room: Room) => void;
    _evaluateEvent: (ev: any) => void;
};
declare const _default: {
    notifsByRoom: {};
    pendingEncryptedEventIds: any[];
    notificationMessageForEvent: (ev: MatrixEvent) => string;
    _displayPopupNotification: (ev: MatrixEvent, room: Room) => void;
    getSoundForRoom: (roomId: string) => {
        url: string;
        name: any;
        type: any;
        size: any;
    };
    _playAudioNotification: (ev: MatrixEvent, room: Room) => Promise<void>;
    start: () => void;
    stop: () => void;
    supportsDesktopNotifications: () => boolean;
    setEnabled: (enable: boolean, callback?: () => void) => void;
    isEnabled: () => any;
    isPossible: () => boolean;
    isBodyEnabled: () => any;
    isAudioEnabled: () => any;
    setPromptHidden: (hidden: boolean, persistent?: boolean) => void;
    shouldShowPrompt: () => boolean;
    _isPromptHidden: () => any;
    onSyncStateChange: (state: string) => void;
    onEvent: (ev: MatrixEvent) => void;
    onEventDecrypted: (ev: MatrixEvent) => void;
    onRoomReceipt: (ev: MatrixEvent, room: Room) => void;
    _evaluateEvent: (ev: any) => void;
};
export default _default;
