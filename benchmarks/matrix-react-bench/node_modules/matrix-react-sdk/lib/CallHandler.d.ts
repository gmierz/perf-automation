/// <reference types="node" />
import { MatrixCall } from "matrix-js-sdk/src/webrtc/call";
import EventEmitter from 'events';
export declare const PROTOCOL_PSTN = "m.protocol.pstn";
export declare const PROTOCOL_PSTN_PREFIXED = "im.vector.protocol.pstn";
export declare const PROTOCOL_SIP_NATIVE = "im.vector.protocol.sip_native";
export declare const PROTOCOL_SIP_VIRTUAL = "im.vector.protocol.sip_virtual";
export declare const VIRTUAL_ROOM_EVENT_TYPE = "im.vector.is_virtual_room";
declare enum AudioID {
    Ring = "ringAudio",
    Ringback = "ringbackAudio",
    CallEnd = "callendAudio",
    Busy = "busyAudio"
}
interface ThirdpartyLookupResponseFields {
    virtual_mxid?: string;
    is_virtual?: boolean;
    native_mxid?: string;
    is_native?: boolean;
    lookup_success?: boolean;
}
interface ThirdpartyLookupResponse {
    userid: string;
    protocol: string;
    fields: ThirdpartyLookupResponseFields;
}
export declare enum PlaceCallType {
    Voice = "voice",
    Video = "video"
}
export declare enum CallHandlerEvent {
    CallsChanged = "calls_changed",
    CallChangeRoom = "call_change_room",
    SilencedCallsChanged = "silenced_calls_changed"
}
export default class CallHandler extends EventEmitter {
    private calls;
    private transferees;
    private audioPromises;
    private dispatcherRef;
    private supportsPstnProtocol;
    private pstnSupportPrefixed;
    private supportsSipNativeVirtual;
    private pstnSupportCheckTimer;
    private invitedRoomsAreVirtual;
    private invitedRoomCheckInProgress;
    private assertedIdentityNativeUsers;
    private silencedCalls;
    static sharedInstance(): CallHandler;
    roomIdForCall(call: MatrixCall): string;
    start(): void;
    stop(): void;
    silenceCall(callId: string): void;
    unSilenceCall(callId: string): void;
    isCallSilenced(callId: string): boolean;
    /**
     * Returns true if there is at least one unsilenced call
     * @returns {boolean}
     */
    private areAnyCallsUnsilenced;
    private checkProtocols;
    getSupportsPstnProtocol(): any;
    getSupportsVirtualRooms(): any;
    pstnLookup(phoneNumber: string): Promise<ThirdpartyLookupResponse[]>;
    sipVirtualLookup(nativeMxid: string): Promise<ThirdpartyLookupResponse[]>;
    sipNativeLookup(virtualMxid: string): Promise<ThirdpartyLookupResponse[]>;
    private onCallIncoming;
    getCallById(callId: string): MatrixCall;
    getCallForRoom(roomId: string): MatrixCall;
    getAnyActiveCall(): MatrixCall;
    getAllActiveCalls(): any[];
    getAllActiveCallsNotInRoom(notInThisRoomId: any): any[];
    getAllActiveCallsForPip(roomId: string): any[];
    getTransfereeForCallId(callId: string): MatrixCall;
    play(audioId: AudioID): void;
    pause(audioId: AudioID): void;
    private matchesCallForThisRoom;
    private setCallListeners;
    private onCallStateChanged;
    private logCallStats;
    private setCallState;
    private removeCallForRoom;
    private showICEFallbackPrompt;
    private showMediaCaptureError;
    private placeCall;
    private onAction;
    private stopRingingIfPossible;
    private dialNumber;
    private startTransferToPhoneNumber;
    private startTransferToMatrixID;
    setActiveCallRoomId(activeCallRoomId: string): void;
    /**
     * @returns true if we are currently in any call where we haven't put the remote party on hold
     */
    hasAnyUnheldCall(): boolean;
    private startCallApp;
    private terminateCallApp;
    private hangupCallApp;
    private addCallForRoom;
}
export {};
