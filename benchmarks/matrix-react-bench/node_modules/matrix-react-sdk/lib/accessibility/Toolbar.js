"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireDefault(require("react"));

var _RovingTabIndex = require("./RovingTabIndex");

var _Keyboard = require("../Keyboard");

const _excluded = ["children"];

// This component implements the Toolbar design pattern from the WAI-ARIA Authoring Practices guidelines.
// https://www.w3.org/TR/wai-aria-practices-1.1/#toolbar
// All buttons passed in children must use RovingTabIndex to set `onFocus`, `isActive`, `ref`
const Toolbar = _ref => {
  let {
    children
  } = _ref,
      props = (0, _objectWithoutProperties2.default)(_ref, _excluded);

  const onKeyDown = ev => {
    const target = ev.target; // Don't interfere with input default keydown behaviour

    if (target.tagName === "INPUT") return;
    let handled = true; // HOME and END are handled by RovingTabIndexProvider

    switch (ev.key) {
      case _Keyboard.Key.ARROW_UP:
      case _Keyboard.Key.ARROW_DOWN:
        if (target.hasAttribute('aria-haspopup')) {
          target.click();
        }

        break;

      default:
        handled = false;
    }

    if (handled) {
      ev.preventDefault();
      ev.stopPropagation();
    }
  };

  return /*#__PURE__*/_react.default.createElement(_RovingTabIndex.RovingTabIndexProvider, {
    handleHomeEnd: true,
    onKeyDown: onKeyDown
  }, ({
    onKeyDownHandler
  }) => /*#__PURE__*/_react.default.createElement("div", (0, _extends2.default)({}, props, {
    onKeyDown: onKeyDownHandler,
    role: "toolbar"
  }), children));
};

var _default = Toolbar;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hY2Nlc3NpYmlsaXR5L1Rvb2xiYXIudHN4Il0sIm5hbWVzIjpbIlRvb2xiYXIiLCJjaGlsZHJlbiIsInByb3BzIiwib25LZXlEb3duIiwiZXYiLCJ0YXJnZXQiLCJ0YWdOYW1lIiwiaGFuZGxlZCIsImtleSIsIktleSIsIkFSUk9XX1VQIiwiQVJST1dfRE9XTiIsImhhc0F0dHJpYnV0ZSIsImNsaWNrIiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJvbktleURvd25IYW5kbGVyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBZ0JBOztBQUVBOztBQUNBOzs7O0FBS0E7QUFDQTtBQUNBO0FBQ0EsTUFBTUEsT0FBeUIsR0FBRyxRQUE0QjtBQUFBLE1BQTNCO0FBQUVDLElBQUFBO0FBQUYsR0FBMkI7QUFBQSxNQUFaQyxLQUFZOztBQUMxRCxRQUFNQyxTQUFTLEdBQUlDLEVBQUQsSUFBNkI7QUFDM0MsVUFBTUMsTUFBTSxHQUFHRCxFQUFFLENBQUNDLE1BQWxCLENBRDJDLENBRTNDOztBQUNBLFFBQUlBLE1BQU0sQ0FBQ0MsT0FBUCxLQUFtQixPQUF2QixFQUFnQztBQUVoQyxRQUFJQyxPQUFPLEdBQUcsSUFBZCxDQUwyQyxDQU8zQzs7QUFDQSxZQUFRSCxFQUFFLENBQUNJLEdBQVg7QUFDSSxXQUFLQyxjQUFJQyxRQUFUO0FBQ0EsV0FBS0QsY0FBSUUsVUFBVDtBQUNJLFlBQUlOLE1BQU0sQ0FBQ08sWUFBUCxDQUFvQixlQUFwQixDQUFKLEVBQTBDO0FBQ3RDUCxVQUFBQSxNQUFNLENBQUNRLEtBQVA7QUFDSDs7QUFDRDs7QUFFSjtBQUNJTixRQUFBQSxPQUFPLEdBQUcsS0FBVjtBQVRSOztBQVlBLFFBQUlBLE9BQUosRUFBYTtBQUNUSCxNQUFBQSxFQUFFLENBQUNVLGNBQUg7QUFDQVYsTUFBQUEsRUFBRSxDQUFDVyxlQUFIO0FBQ0g7QUFDSixHQXhCRDs7QUEwQkEsc0JBQU8sNkJBQUMsc0NBQUQ7QUFBd0IsSUFBQSxhQUFhLEVBQUUsSUFBdkM7QUFBNkMsSUFBQSxTQUFTLEVBQUVaO0FBQXhELEtBQ0QsQ0FBQztBQUFFYSxJQUFBQTtBQUFGLEdBQUQsa0JBQTBCLCtEQUFTZCxLQUFUO0FBQWdCLElBQUEsU0FBUyxFQUFFYyxnQkFBM0I7QUFBNkMsSUFBQSxJQUFJLEVBQUM7QUFBbEQsTUFDdEJmLFFBRHNCLENBRHpCLENBQVA7QUFLSCxDQWhDRDs7ZUFrQ2VELE8iLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuQ29weXJpZ2h0IDIwMjAgVGhlIE1hdHJpeC5vcmcgRm91bmRhdGlvbiBDLkkuQy5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5cbmltcG9ydCB7IFJvdmluZ1RhYkluZGV4UHJvdmlkZXIgfSBmcm9tIFwiLi9Sb3ZpbmdUYWJJbmRleFwiO1xuaW1wb3J0IHsgS2V5IH0gZnJvbSBcIi4uL0tleWJvYXJkXCI7XG5cbmludGVyZmFjZSBJUHJvcHMgZXh0ZW5kcyBPbWl0PFJlYWN0LkhUTUxQcm9wczxIVE1MRGl2RWxlbWVudD4sIFwib25LZXlEb3duXCI+IHtcbn1cblxuLy8gVGhpcyBjb21wb25lbnQgaW1wbGVtZW50cyB0aGUgVG9vbGJhciBkZXNpZ24gcGF0dGVybiBmcm9tIHRoZSBXQUktQVJJQSBBdXRob3JpbmcgUHJhY3RpY2VzIGd1aWRlbGluZXMuXG4vLyBodHRwczovL3d3dy53My5vcmcvVFIvd2FpLWFyaWEtcHJhY3RpY2VzLTEuMS8jdG9vbGJhclxuLy8gQWxsIGJ1dHRvbnMgcGFzc2VkIGluIGNoaWxkcmVuIG11c3QgdXNlIFJvdmluZ1RhYkluZGV4IHRvIHNldCBgb25Gb2N1c2AsIGBpc0FjdGl2ZWAsIGByZWZgXG5jb25zdCBUb29sYmFyOiBSZWFjdC5GQzxJUHJvcHM+ID0gKHsgY2hpbGRyZW4sIC4uLnByb3BzIH0pID0+IHtcbiAgICBjb25zdCBvbktleURvd24gPSAoZXY6IFJlYWN0LktleWJvYXJkRXZlbnQpID0+IHtcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gZXYudGFyZ2V0IGFzIEhUTUxFbGVtZW50O1xuICAgICAgICAvLyBEb24ndCBpbnRlcmZlcmUgd2l0aCBpbnB1dCBkZWZhdWx0IGtleWRvd24gYmVoYXZpb3VyXG4gICAgICAgIGlmICh0YXJnZXQudGFnTmFtZSA9PT0gXCJJTlBVVFwiKSByZXR1cm47XG5cbiAgICAgICAgbGV0IGhhbmRsZWQgPSB0cnVlO1xuXG4gICAgICAgIC8vIEhPTUUgYW5kIEVORCBhcmUgaGFuZGxlZCBieSBSb3ZpbmdUYWJJbmRleFByb3ZpZGVyXG4gICAgICAgIHN3aXRjaCAoZXYua2V5KSB7XG4gICAgICAgICAgICBjYXNlIEtleS5BUlJPV19VUDpcbiAgICAgICAgICAgIGNhc2UgS2V5LkFSUk9XX0RPV046XG4gICAgICAgICAgICAgICAgaWYgKHRhcmdldC5oYXNBdHRyaWJ1dGUoJ2FyaWEtaGFzcG9wdXAnKSkge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXQuY2xpY2soKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgaGFuZGxlZCA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGhhbmRsZWQpIHtcbiAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gPFJvdmluZ1RhYkluZGV4UHJvdmlkZXIgaGFuZGxlSG9tZUVuZD17dHJ1ZX0gb25LZXlEb3duPXtvbktleURvd259PlxuICAgICAgICB7ICh7IG9uS2V5RG93bkhhbmRsZXIgfSkgPT4gPGRpdiB7Li4ucHJvcHN9IG9uS2V5RG93bj17b25LZXlEb3duSGFuZGxlcn0gcm9sZT1cInRvb2xiYXJcIj5cbiAgICAgICAgICAgIHsgY2hpbGRyZW4gfVxuICAgICAgICA8L2Rpdj4gfVxuICAgIDwvUm92aW5nVGFiSW5kZXhQcm92aWRlcj47XG59O1xuXG5leHBvcnQgZGVmYXVsdCBUb29sYmFyO1xuIl19