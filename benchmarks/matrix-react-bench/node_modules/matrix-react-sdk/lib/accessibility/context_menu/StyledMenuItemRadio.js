"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StyledMenuItemRadio = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireDefault(require("react"));

var _Keyboard = require("../../Keyboard");

var _StyledRadioButton = _interopRequireDefault(require("../../components/views/elements/StyledRadioButton"));

const _excluded = ["children", "label", "onChange", "onClose"];

// Semantic component for representing a styled role=menuitemradio
const StyledMenuItemRadio = _ref => {
  let {
    children,
    label,
    onChange,
    onClose
  } = _ref,
      props = (0, _objectWithoutProperties2.default)(_ref, _excluded);

  const onKeyDown = e => {
    if (e.key === _Keyboard.Key.ENTER || e.key === _Keyboard.Key.SPACE) {
      e.stopPropagation();
      e.preventDefault();
      onChange(); // Implements https://www.w3.org/TR/wai-aria-practices/#keyboard-interaction-12

      if (e.key === _Keyboard.Key.ENTER) {
        onClose();
      }
    }
  };

  const onKeyUp = e => {
    // prevent the input default handler as we handle it on keydown to match
    // https://www.w3.org/TR/wai-aria-practices/examples/menubar/menubar-2/menubar-2.html
    if (e.key === _Keyboard.Key.SPACE || e.key === _Keyboard.Key.ENTER) {
      e.stopPropagation();
      e.preventDefault();
    }
  };

  return /*#__PURE__*/_react.default.createElement(_StyledRadioButton.default, (0, _extends2.default)({}, props, {
    role: "menuitemradio",
    tabIndex: -1,
    "aria-label": label,
    onChange: onChange,
    onKeyDown: onKeyDown,
    onKeyUp: onKeyUp
  }), children);
};

exports.StyledMenuItemRadio = StyledMenuItemRadio;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hY2Nlc3NpYmlsaXR5L2NvbnRleHRfbWVudS9TdHlsZWRNZW51SXRlbVJhZGlvLnRzeCJdLCJuYW1lcyI6WyJTdHlsZWRNZW51SXRlbVJhZGlvIiwiY2hpbGRyZW4iLCJsYWJlbCIsIm9uQ2hhbmdlIiwib25DbG9zZSIsInByb3BzIiwib25LZXlEb3duIiwiZSIsImtleSIsIktleSIsIkVOVEVSIiwiU1BBQ0UiLCJzdG9wUHJvcGFnYXRpb24iLCJwcmV2ZW50RGVmYXVsdCIsIm9uS2V5VXAiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFrQkE7O0FBRUE7O0FBQ0E7Ozs7QUFRQTtBQUNPLE1BQU1BLG1CQUFxQyxHQUFHLFFBQXNEO0FBQUEsTUFBckQ7QUFBRUMsSUFBQUEsUUFBRjtBQUFZQyxJQUFBQSxLQUFaO0FBQW1CQyxJQUFBQSxRQUFuQjtBQUE2QkMsSUFBQUE7QUFBN0IsR0FBcUQ7QUFBQSxNQUFaQyxLQUFZOztBQUN2RyxRQUFNQyxTQUFTLEdBQUlDLENBQUQsSUFBNEI7QUFDMUMsUUFBSUEsQ0FBQyxDQUFDQyxHQUFGLEtBQVVDLGNBQUlDLEtBQWQsSUFBdUJILENBQUMsQ0FBQ0MsR0FBRixLQUFVQyxjQUFJRSxLQUF6QyxFQUFnRDtBQUM1Q0osTUFBQUEsQ0FBQyxDQUFDSyxlQUFGO0FBQ0FMLE1BQUFBLENBQUMsQ0FBQ00sY0FBRjtBQUNBVixNQUFBQSxRQUFRLEdBSG9DLENBSTVDOztBQUNBLFVBQUlJLENBQUMsQ0FBQ0MsR0FBRixLQUFVQyxjQUFJQyxLQUFsQixFQUF5QjtBQUNyQk4sUUFBQUEsT0FBTztBQUNWO0FBQ0o7QUFDSixHQVZEOztBQVdBLFFBQU1VLE9BQU8sR0FBSVAsQ0FBRCxJQUE0QjtBQUN4QztBQUNBO0FBQ0EsUUFBSUEsQ0FBQyxDQUFDQyxHQUFGLEtBQVVDLGNBQUlFLEtBQWQsSUFBdUJKLENBQUMsQ0FBQ0MsR0FBRixLQUFVQyxjQUFJQyxLQUF6QyxFQUFnRDtBQUM1Q0gsTUFBQUEsQ0FBQyxDQUFDSyxlQUFGO0FBQ0FMLE1BQUFBLENBQUMsQ0FBQ00sY0FBRjtBQUNIO0FBQ0osR0FQRDs7QUFRQSxzQkFDSSw2QkFBQywwQkFBRCw2QkFDUVIsS0FEUjtBQUVJLElBQUEsSUFBSSxFQUFDLGVBRlQ7QUFHSSxJQUFBLFFBQVEsRUFBRSxDQUFDLENBSGY7QUFJSSxrQkFBWUgsS0FKaEI7QUFLSSxJQUFBLFFBQVEsRUFBRUMsUUFMZDtBQU1JLElBQUEsU0FBUyxFQUFFRyxTQU5mO0FBT0ksSUFBQSxPQUFPLEVBQUVRO0FBUGIsTUFTTWIsUUFUTixDQURKO0FBYUgsQ0FqQ00iLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuQ29weXJpZ2h0IDIwMTUsIDIwMTYgT3Blbk1hcmtldCBMdGRcbkNvcHlyaWdodCAyMDE4IE5ldyBWZWN0b3IgTHRkXG5Db3B5cmlnaHQgMjAxOSBUaGUgTWF0cml4Lm9yZyBGb3VuZGF0aW9uIEMuSS5DLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxuaW1wb3J0IHsgS2V5IH0gZnJvbSBcIi4uLy4uL0tleWJvYXJkXCI7XG5pbXBvcnQgU3R5bGVkUmFkaW9CdXR0b24gZnJvbSBcIi4uLy4uL2NvbXBvbmVudHMvdmlld3MvZWxlbWVudHMvU3R5bGVkUmFkaW9CdXR0b25cIjtcblxuaW50ZXJmYWNlIElQcm9wcyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudFByb3BzPHR5cGVvZiBTdHlsZWRSYWRpb0J1dHRvbj4ge1xuICAgIGxhYmVsPzogc3RyaW5nO1xuICAgIG9uQ2hhbmdlKCk7IC8vIHdlIGhhbmRsZSBrZXl1cC9kb3duIG91cnNlbHZlcyBzbyBsb3NlIHRoZSBDaGFuZ2VFdmVudFxuICAgIG9uQ2xvc2UoKTogdm9pZDsgLy8gZ2V0cyBjYWxsZWQgYWZ0ZXIgb25DaGFuZ2Ugb24gS2V5LkVOVEVSXG59XG5cbi8vIFNlbWFudGljIGNvbXBvbmVudCBmb3IgcmVwcmVzZW50aW5nIGEgc3R5bGVkIHJvbGU9bWVudWl0ZW1yYWRpb1xuZXhwb3J0IGNvbnN0IFN0eWxlZE1lbnVJdGVtUmFkaW86IFJlYWN0LkZDPElQcm9wcz4gPSAoeyBjaGlsZHJlbiwgbGFiZWwsIG9uQ2hhbmdlLCBvbkNsb3NlLCAuLi5wcm9wcyB9KSA9PiB7XG4gICAgY29uc3Qgb25LZXlEb3duID0gKGU6IFJlYWN0LktleWJvYXJkRXZlbnQpID0+IHtcbiAgICAgICAgaWYgKGUua2V5ID09PSBLZXkuRU5URVIgfHwgZS5rZXkgPT09IEtleS5TUEFDRSkge1xuICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIG9uQ2hhbmdlKCk7XG4gICAgICAgICAgICAvLyBJbXBsZW1lbnRzIGh0dHBzOi8vd3d3LnczLm9yZy9UUi93YWktYXJpYS1wcmFjdGljZXMvI2tleWJvYXJkLWludGVyYWN0aW9uLTEyXG4gICAgICAgICAgICBpZiAoZS5rZXkgPT09IEtleS5FTlRFUikge1xuICAgICAgICAgICAgICAgIG9uQ2xvc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3Qgb25LZXlVcCA9IChlOiBSZWFjdC5LZXlib2FyZEV2ZW50KSA9PiB7XG4gICAgICAgIC8vIHByZXZlbnQgdGhlIGlucHV0IGRlZmF1bHQgaGFuZGxlciBhcyB3ZSBoYW5kbGUgaXQgb24ga2V5ZG93biB0byBtYXRjaFxuICAgICAgICAvLyBodHRwczovL3d3dy53My5vcmcvVFIvd2FpLWFyaWEtcHJhY3RpY2VzL2V4YW1wbGVzL21lbnViYXIvbWVudWJhci0yL21lbnViYXItMi5odG1sXG4gICAgICAgIGlmIChlLmtleSA9PT0gS2V5LlNQQUNFIHx8IGUua2V5ID09PSBLZXkuRU5URVIpIHtcbiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiAoXG4gICAgICAgIDxTdHlsZWRSYWRpb0J1dHRvblxuICAgICAgICAgICAgey4uLnByb3BzfVxuICAgICAgICAgICAgcm9sZT1cIm1lbnVpdGVtcmFkaW9cIlxuICAgICAgICAgICAgdGFiSW5kZXg9ey0xfVxuICAgICAgICAgICAgYXJpYS1sYWJlbD17bGFiZWx9XG4gICAgICAgICAgICBvbkNoYW5nZT17b25DaGFuZ2V9XG4gICAgICAgICAgICBvbktleURvd249e29uS2V5RG93bn1cbiAgICAgICAgICAgIG9uS2V5VXA9e29uS2V5VXB9XG4gICAgICAgID5cbiAgICAgICAgICAgIHsgY2hpbGRyZW4gfVxuICAgICAgICA8L1N0eWxlZFJhZGlvQnV0dG9uPlxuICAgICk7XG59O1xuIl19