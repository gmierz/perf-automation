"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StyledMenuItemCheckbox = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireDefault(require("react"));

var _Keyboard = require("../../Keyboard");

var _StyledCheckbox = _interopRequireDefault(require("../../components/views/elements/StyledCheckbox"));

const _excluded = ["children", "label", "onChange", "onClose"];

// Semantic component for representing a styled role=menuitemcheckbox
const StyledMenuItemCheckbox = _ref => {
  let {
    children,
    label,
    onChange,
    onClose
  } = _ref,
      props = (0, _objectWithoutProperties2.default)(_ref, _excluded);

  const onKeyDown = e => {
    if (e.key === _Keyboard.Key.ENTER || e.key === _Keyboard.Key.SPACE) {
      e.stopPropagation();
      e.preventDefault();
      onChange(); // Implements https://www.w3.org/TR/wai-aria-practices/#keyboard-interaction-12

      if (e.key === _Keyboard.Key.ENTER) {
        onClose();
      }
    }
  };

  const onKeyUp = e => {
    // prevent the input default handler as we handle it on keydown to match
    // https://www.w3.org/TR/wai-aria-practices/examples/menubar/menubar-2/menubar-2.html
    if (e.key === _Keyboard.Key.SPACE || e.key === _Keyboard.Key.ENTER) {
      e.stopPropagation();
      e.preventDefault();
    }
  };

  return /*#__PURE__*/_react.default.createElement(_StyledCheckbox.default, (0, _extends2.default)({}, props, {
    role: "menuitemcheckbox",
    tabIndex: -1,
    "aria-label": label,
    onChange: onChange,
    onKeyDown: onKeyDown,
    onKeyUp: onKeyUp
  }), children);
};

exports.StyledMenuItemCheckbox = StyledMenuItemCheckbox;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hY2Nlc3NpYmlsaXR5L2NvbnRleHRfbWVudS9TdHlsZWRNZW51SXRlbUNoZWNrYm94LnRzeCJdLCJuYW1lcyI6WyJTdHlsZWRNZW51SXRlbUNoZWNrYm94IiwiY2hpbGRyZW4iLCJsYWJlbCIsIm9uQ2hhbmdlIiwib25DbG9zZSIsInByb3BzIiwib25LZXlEb3duIiwiZSIsImtleSIsIktleSIsIkVOVEVSIiwiU1BBQ0UiLCJzdG9wUHJvcGFnYXRpb24iLCJwcmV2ZW50RGVmYXVsdCIsIm9uS2V5VXAiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFrQkE7O0FBRUE7O0FBQ0E7Ozs7QUFRQTtBQUNPLE1BQU1BLHNCQUF3QyxHQUFHLFFBQXNEO0FBQUEsTUFBckQ7QUFBRUMsSUFBQUEsUUFBRjtBQUFZQyxJQUFBQSxLQUFaO0FBQW1CQyxJQUFBQSxRQUFuQjtBQUE2QkMsSUFBQUE7QUFBN0IsR0FBcUQ7QUFBQSxNQUFaQyxLQUFZOztBQUMxRyxRQUFNQyxTQUFTLEdBQUlDLENBQUQsSUFBNEI7QUFDMUMsUUFBSUEsQ0FBQyxDQUFDQyxHQUFGLEtBQVVDLGNBQUlDLEtBQWQsSUFBdUJILENBQUMsQ0FBQ0MsR0FBRixLQUFVQyxjQUFJRSxLQUF6QyxFQUFnRDtBQUM1Q0osTUFBQUEsQ0FBQyxDQUFDSyxlQUFGO0FBQ0FMLE1BQUFBLENBQUMsQ0FBQ00sY0FBRjtBQUNBVixNQUFBQSxRQUFRLEdBSG9DLENBSTVDOztBQUNBLFVBQUlJLENBQUMsQ0FBQ0MsR0FBRixLQUFVQyxjQUFJQyxLQUFsQixFQUF5QjtBQUNyQk4sUUFBQUEsT0FBTztBQUNWO0FBQ0o7QUFDSixHQVZEOztBQVdBLFFBQU1VLE9BQU8sR0FBSVAsQ0FBRCxJQUE0QjtBQUN4QztBQUNBO0FBQ0EsUUFBSUEsQ0FBQyxDQUFDQyxHQUFGLEtBQVVDLGNBQUlFLEtBQWQsSUFBdUJKLENBQUMsQ0FBQ0MsR0FBRixLQUFVQyxjQUFJQyxLQUF6QyxFQUFnRDtBQUM1Q0gsTUFBQUEsQ0FBQyxDQUFDSyxlQUFGO0FBQ0FMLE1BQUFBLENBQUMsQ0FBQ00sY0FBRjtBQUNIO0FBQ0osR0FQRDs7QUFRQSxzQkFDSSw2QkFBQyx1QkFBRCw2QkFDUVIsS0FEUjtBQUVJLElBQUEsSUFBSSxFQUFDLGtCQUZUO0FBR0ksSUFBQSxRQUFRLEVBQUUsQ0FBQyxDQUhmO0FBSUksa0JBQVlILEtBSmhCO0FBS0ksSUFBQSxRQUFRLEVBQUVDLFFBTGQ7QUFNSSxJQUFBLFNBQVMsRUFBRUcsU0FOZjtBQU9JLElBQUEsT0FBTyxFQUFFUTtBQVBiLE1BU01iLFFBVE4sQ0FESjtBQWFILENBakNNIiwic291cmNlc0NvbnRlbnQiOlsiLypcbkNvcHlyaWdodCAyMDE1LCAyMDE2IE9wZW5NYXJrZXQgTHRkXG5Db3B5cmlnaHQgMjAxOCBOZXcgVmVjdG9yIEx0ZFxuQ29weXJpZ2h0IDIwMTkgVGhlIE1hdHJpeC5vcmcgRm91bmRhdGlvbiBDLkkuQy5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5cbmltcG9ydCB7IEtleSB9IGZyb20gXCIuLi8uLi9LZXlib2FyZFwiO1xuaW1wb3J0IFN0eWxlZENoZWNrYm94IGZyb20gXCIuLi8uLi9jb21wb25lbnRzL3ZpZXdzL2VsZW1lbnRzL1N0eWxlZENoZWNrYm94XCI7XG5cbmludGVyZmFjZSBJUHJvcHMgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnRQcm9wczx0eXBlb2YgU3R5bGVkQ2hlY2tib3g+IHtcbiAgICBsYWJlbD86IHN0cmluZztcbiAgICBvbkNoYW5nZSgpOyAvLyB3ZSBoYW5kbGUga2V5dXAvZG93biBvdXJzZWx2ZXMgc28gbG9zZSB0aGUgQ2hhbmdlRXZlbnRcbiAgICBvbkNsb3NlKCk6IHZvaWQ7IC8vIGdldHMgY2FsbGVkIGFmdGVyIG9uQ2hhbmdlIG9uIEtleS5FTlRFUlxufVxuXG4vLyBTZW1hbnRpYyBjb21wb25lbnQgZm9yIHJlcHJlc2VudGluZyBhIHN0eWxlZCByb2xlPW1lbnVpdGVtY2hlY2tib3hcbmV4cG9ydCBjb25zdCBTdHlsZWRNZW51SXRlbUNoZWNrYm94OiBSZWFjdC5GQzxJUHJvcHM+ID0gKHsgY2hpbGRyZW4sIGxhYmVsLCBvbkNoYW5nZSwgb25DbG9zZSwgLi4ucHJvcHMgfSkgPT4ge1xuICAgIGNvbnN0IG9uS2V5RG93biA9IChlOiBSZWFjdC5LZXlib2FyZEV2ZW50KSA9PiB7XG4gICAgICAgIGlmIChlLmtleSA9PT0gS2V5LkVOVEVSIHx8IGUua2V5ID09PSBLZXkuU1BBQ0UpIHtcbiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBvbkNoYW5nZSgpO1xuICAgICAgICAgICAgLy8gSW1wbGVtZW50cyBodHRwczovL3d3dy53My5vcmcvVFIvd2FpLWFyaWEtcHJhY3RpY2VzLyNrZXlib2FyZC1pbnRlcmFjdGlvbi0xMlxuICAgICAgICAgICAgaWYgKGUua2V5ID09PSBLZXkuRU5URVIpIHtcbiAgICAgICAgICAgICAgICBvbkNsb3NlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IG9uS2V5VXAgPSAoZTogUmVhY3QuS2V5Ym9hcmRFdmVudCkgPT4ge1xuICAgICAgICAvLyBwcmV2ZW50IHRoZSBpbnB1dCBkZWZhdWx0IGhhbmRsZXIgYXMgd2UgaGFuZGxlIGl0IG9uIGtleWRvd24gdG8gbWF0Y2hcbiAgICAgICAgLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSL3dhaS1hcmlhLXByYWN0aWNlcy9leGFtcGxlcy9tZW51YmFyL21lbnViYXItMi9tZW51YmFyLTIuaHRtbFxuICAgICAgICBpZiAoZS5rZXkgPT09IEtleS5TUEFDRSB8fCBlLmtleSA9PT0gS2V5LkVOVEVSKSB7XG4gICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gKFxuICAgICAgICA8U3R5bGVkQ2hlY2tib3hcbiAgICAgICAgICAgIHsuLi5wcm9wc31cbiAgICAgICAgICAgIHJvbGU9XCJtZW51aXRlbWNoZWNrYm94XCJcbiAgICAgICAgICAgIHRhYkluZGV4PXstMX1cbiAgICAgICAgICAgIGFyaWEtbGFiZWw9e2xhYmVsfVxuICAgICAgICAgICAgb25DaGFuZ2U9e29uQ2hhbmdlfVxuICAgICAgICAgICAgb25LZXlEb3duPXtvbktleURvd259XG4gICAgICAgICAgICBvbktleVVwPXtvbktleVVwfVxuICAgICAgICA+XG4gICAgICAgICAgICB7IGNoaWxkcmVuIH1cbiAgICAgICAgPC9TdHlsZWRDaGVja2JveD5cbiAgICApO1xufTtcbiJdfQ==