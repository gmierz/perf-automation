"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "RovingAccessibleButton", {
  enumerable: true,
  get: function () {
    return _RovingAccessibleButton.RovingAccessibleButton;
  }
});
Object.defineProperty(exports, "RovingAccessibleTooltipButton", {
  enumerable: true,
  get: function () {
    return _RovingAccessibleTooltipButton.RovingAccessibleTooltipButton;
  }
});
exports.RovingTabIndexProvider = void 0;
Object.defineProperty(exports, "RovingTabIndexWrapper", {
  enumerable: true,
  get: function () {
    return _RovingTabIndexWrapper.RovingTabIndexWrapper;
  }
});
exports.useRovingTabIndex = exports.reducer = exports.findSiblingElement = exports.Type = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _Keyboard = require("../Keyboard");

var _RovingTabIndexWrapper = require("./roving/RovingTabIndexWrapper");

var _RovingAccessibleButton = require("./roving/RovingAccessibleButton");

var _RovingAccessibleTooltipButton = require("./roving/RovingAccessibleTooltipButton");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * Module to simplify implementing the Roving TabIndex accessibility technique
 *
 * Wrap the Widget in an RovingTabIndexContextProvider
 * and then for all buttons make use of useRovingTabIndex or RovingTabIndexWrapper.
 * The code will keep track of which tabIndex was most recently focused and expose that information as `isActive` which
 * can then be used to only set the tabIndex to 0 as expected by the roving tabindex technique.
 * When the active button gets unmounted the closest button will be chosen as expected.
 * Initially the first button to mount will be given active state.
 *
 * https://developer.mozilla.org/en-US/docs/Web/Accessibility/Keyboard-navigable_JavaScript_widgets#Technique_1_Roving_tabindex
 */
const DOCUMENT_POSITION_PRECEDING = 2;
const RovingTabIndexContext = /*#__PURE__*/(0, _react.createContext)({
  state: {
    activeRef: null,
    refs: [] // list of refs in DOM order

  },
  dispatch: () => {}
});
RovingTabIndexContext.displayName = "RovingTabIndexContext";
let Type;
exports.Type = Type;

(function (Type) {
  Type["Register"] = "REGISTER";
  Type["Unregister"] = "UNREGISTER";
  Type["SetFocus"] = "SET_FOCUS";
})(Type || (exports.Type = Type = {}));

const reducer = (state, action) => {
  switch (action.type) {
    case Type.Register:
      {
        let left = 0;
        let right = state.refs.length - 1;
        let index = state.refs.length; // by default append to the end
        // do a binary search to find the right slot

        while (left <= right) {
          index = Math.floor((left + right) / 2);
          const ref = state.refs[index];

          if (ref === action.payload.ref) {
            return state; // already in refs, this should not happen
          }

          if (action.payload.ref.current.compareDocumentPosition(ref.current) & DOCUMENT_POSITION_PRECEDING) {
            left = ++index;
          } else {
            right = index - 1;
          }
        }

        if (!state.activeRef) {
          // Our list of refs was empty, set activeRef to this first item
          state.activeRef = action.payload.ref;
        } // update the refs list


        if (index < state.refs.length) {
          state.refs.splice(index, 0, action.payload.ref);
        } else {
          state.refs.push(action.payload.ref);
        }

        return _objectSpread({}, state);
      }

    case Type.Unregister:
      {
        const oldIndex = state.refs.findIndex(r => r === action.payload.ref);

        if (oldIndex === -1) {
          return state; // already removed, this should not happen
        }

        if (state.refs.splice(oldIndex, 1)[0] === state.activeRef) {
          var _state$activeRef, _state$activeRef$curr;

          // we just removed the active ref, need to replace it
          // pick the ref closest to the index the old ref was in
          if (oldIndex >= state.refs.length) {
            state.activeRef = findSiblingElement(state.refs, state.refs.length - 1, true);
          } else {
            state.activeRef = findSiblingElement(state.refs, oldIndex) || findSiblingElement(state.refs, oldIndex, true);
          }

          (_state$activeRef = state.activeRef) === null || _state$activeRef === void 0 ? void 0 : (_state$activeRef$curr = _state$activeRef.current) === null || _state$activeRef$curr === void 0 ? void 0 : _state$activeRef$curr.focus();
        } // update the refs list


        return _objectSpread({}, state);
      }

    case Type.SetFocus:
      {
        // update active ref
        state.activeRef = action.payload.ref;
        return _objectSpread({}, state);
      }

    default:
      return state;
  }
};

exports.reducer = reducer;

const findSiblingElement = (refs, startIndex, backwards = false) => {
  if (backwards) {
    for (let i = startIndex; i < refs.length && i >= 0; i--) {
      var _refs$i$current;

      if (((_refs$i$current = refs[i].current) === null || _refs$i$current === void 0 ? void 0 : _refs$i$current.offsetParent) !== null) {
        return refs[i];
      }
    }
  } else {
    for (let i = startIndex; i < refs.length && i >= 0; i++) {
      var _refs$i$current2;

      if (((_refs$i$current2 = refs[i].current) === null || _refs$i$current2 === void 0 ? void 0 : _refs$i$current2.offsetParent) !== null) {
        return refs[i];
      }
    }
  }
};

exports.findSiblingElement = findSiblingElement;

const RovingTabIndexProvider = ({
  children,
  handleHomeEnd,
  handleUpDown,
  handleLeftRight,
  onKeyDown
}) => {
  const [state, dispatch] = (0, _react.useReducer)(reducer, {
    activeRef: null,
    refs: []
  });
  const context = (0, _react.useMemo)(() => ({
    state,
    dispatch
  }), [state]);
  const onKeyDownHandler = (0, _react.useCallback)(ev => {
    if (onKeyDown) {
      onKeyDown(ev, context.state);

      if (ev.defaultPrevented) {
        return;
      }
    }

    let handled = false; // Don't interfere with input default keydown behaviour

    if (ev.target.tagName !== "INPUT" && ev.target.tagName !== "TEXTAREA") {
      // check if we actually have any items
      switch (ev.key) {
        case _Keyboard.Key.HOME:
          if (handleHomeEnd) {
            var _findSiblingElement, _findSiblingElement$c;

            handled = true; // move focus to first (visible) item

            (_findSiblingElement = findSiblingElement(context.state.refs, 0)) === null || _findSiblingElement === void 0 ? void 0 : (_findSiblingElement$c = _findSiblingElement.current) === null || _findSiblingElement$c === void 0 ? void 0 : _findSiblingElement$c.focus();
          }

          break;

        case _Keyboard.Key.END:
          if (handleHomeEnd) {
            var _findSiblingElement2, _findSiblingElement2$;

            handled = true; // move focus to last (visible) item

            (_findSiblingElement2 = findSiblingElement(context.state.refs, context.state.refs.length - 1, true)) === null || _findSiblingElement2 === void 0 ? void 0 : (_findSiblingElement2$ = _findSiblingElement2.current) === null || _findSiblingElement2$ === void 0 ? void 0 : _findSiblingElement2$.focus();
          }

          break;

        case _Keyboard.Key.ARROW_UP:
        case _Keyboard.Key.ARROW_RIGHT:
          if (ev.key === _Keyboard.Key.ARROW_UP && handleUpDown || ev.key === _Keyboard.Key.ARROW_RIGHT && handleLeftRight) {
            handled = true;

            if (context.state.refs.length > 0) {
              var _findSiblingElement3, _findSiblingElement3$;

              const idx = context.state.refs.indexOf(context.state.activeRef);
              (_findSiblingElement3 = findSiblingElement(context.state.refs, idx - 1)) === null || _findSiblingElement3 === void 0 ? void 0 : (_findSiblingElement3$ = _findSiblingElement3.current) === null || _findSiblingElement3$ === void 0 ? void 0 : _findSiblingElement3$.focus();
            }
          }

          break;

        case _Keyboard.Key.ARROW_DOWN:
        case _Keyboard.Key.ARROW_LEFT:
          if (ev.key === _Keyboard.Key.ARROW_DOWN && handleUpDown || ev.key === _Keyboard.Key.ARROW_LEFT && handleLeftRight) {
            handled = true;

            if (context.state.refs.length > 0) {
              var _findSiblingElement4, _findSiblingElement4$;

              const idx = context.state.refs.indexOf(context.state.activeRef);
              (_findSiblingElement4 = findSiblingElement(context.state.refs, idx + 1, true)) === null || _findSiblingElement4 === void 0 ? void 0 : (_findSiblingElement4$ = _findSiblingElement4.current) === null || _findSiblingElement4$ === void 0 ? void 0 : _findSiblingElement4$.focus();
            }
          }

          break;
      }
    }

    if (handled) {
      ev.preventDefault();
      ev.stopPropagation();
    }
  }, [context.state, onKeyDown, handleHomeEnd, handleUpDown, handleLeftRight]);
  return /*#__PURE__*/_react.default.createElement(RovingTabIndexContext.Provider, {
    value: context
  }, children({
    onKeyDownHandler
  }));
}; // Hook to register a roving tab index
// inputRef parameter specifies the ref to use
// onFocus should be called when the index gained focus in any manner
// isActive should be used to set tabIndex in a manner such as `tabIndex={isActive ? 0 : -1}`
// ref should be passed to a DOM node which will be used for DOM compareDocumentPosition


exports.RovingTabIndexProvider = RovingTabIndexProvider;

const useRovingTabIndex = inputRef => {
  const context = (0, _react.useContext)(RovingTabIndexContext);
  let ref = (0, _react.useRef)(null);

  if (inputRef) {
    // if we are given a ref, use it instead of ours
    ref = inputRef;
  } // setup (after refs)


  (0, _react.useLayoutEffect)(() => {
    context.dispatch({
      type: Type.Register,
      payload: {
        ref
      }
    }); // teardown

    return () => {
      context.dispatch({
        type: Type.Unregister,
        payload: {
          ref
        }
      });
    };
  }, []); // eslint-disable-line react-hooks/exhaustive-deps

  const onFocus = (0, _react.useCallback)(() => {
    context.dispatch({
      type: Type.SetFocus,
      payload: {
        ref
      }
    });
  }, [ref, context]);
  const isActive = context.state.activeRef === ref;
  return [onFocus, isActive, ref];
}; // re-export the semantic helper components for simplicity


exports.useRovingTabIndex = useRovingTabIndex;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,