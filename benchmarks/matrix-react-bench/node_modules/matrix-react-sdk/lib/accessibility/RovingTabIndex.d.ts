import React, { RefObject } from "react";
import { FocusHandler, Ref } from "./roving/types";
export interface IState {
    activeRef: Ref;
    refs: Ref[];
}
export declare enum Type {
    Register = "REGISTER",
    Unregister = "UNREGISTER",
    SetFocus = "SET_FOCUS"
}
interface IAction {
    type: Type;
    payload: {
        ref: Ref;
    };
}
export declare const reducer: (state: IState, action: IAction) => IState;
interface IProps {
    handleHomeEnd?: boolean;
    handleUpDown?: boolean;
    handleLeftRight?: boolean;
    children(renderProps: {
        onKeyDownHandler(ev: React.KeyboardEvent): any;
    }): any;
    onKeyDown?(ev: React.KeyboardEvent, state: IState): any;
}
export declare const findSiblingElement: (refs: RefObject<HTMLElement>[], startIndex: number, backwards?: boolean) => RefObject<HTMLElement>;
export declare const RovingTabIndexProvider: React.FC<IProps>;
export declare const useRovingTabIndex: (inputRef?: Ref) => [FocusHandler, boolean, Ref];
export { RovingTabIndexWrapper } from "./roving/RovingTabIndexWrapper";
export { RovingAccessibleButton } from "./roving/RovingAccessibleButton";
export { RovingAccessibleTooltipButton } from "./roving/RovingAccessibleTooltipButton";
