"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toggleDialog = exports.registerShortcut = exports.Modifiers = exports.DIGITS = exports.Categories = exports.CMD_OR_CTRL = void 0;

var React = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _Modal = _interopRequireDefault(require("../Modal"));

var _languageHandler = require("../languageHandler");

var _Keyboard = require("../Keyboard");

var _InfoDialog = _interopRequireDefault(require("../components/views/dialogs/InfoDialog"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
Copyright 2020 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// TS: once languageHandler is TS we can probably inline this into the enum
(0, _languageHandler._td)("Navigation");
(0, _languageHandler._td)("Calls");
(0, _languageHandler._td)("Composer");
(0, _languageHandler._td)("Room List");
(0, _languageHandler._td)("Autocomplete");
let Categories; // TS: once languageHandler is TS we can probably inline this into the enum

exports.Categories = Categories;

(function (Categories) {
  Categories["NAVIGATION"] = "Navigation";
  Categories["CALLS"] = "Calls";
  Categories["COMPOSER"] = "Composer";
  Categories["ROOM_LIST"] = "Room List";
  Categories["ROOM"] = "Room";
  Categories["AUTOCOMPLETE"] = "Autocomplete";
})(Categories || (exports.Categories = Categories = {}));

(0, _languageHandler._td)("Alt");
(0, _languageHandler._td)("Alt Gr");
(0, _languageHandler._td)("Shift");
(0, _languageHandler._td)("Super");
(0, _languageHandler._td)("Ctrl");
let Modifiers; // Meta-modifier: isMac ? CMD : CONTROL

exports.Modifiers = Modifiers;

(function (Modifiers) {
  Modifiers["ALT"] = "Alt";
  Modifiers["ALT_GR"] = "Alt Gr";
  Modifiers["SHIFT"] = "Shift";
  Modifiers["SUPER"] = "Super";
  Modifiers["COMMAND"] = "Command";
  Modifiers["CONTROL"] = "Ctrl";
})(Modifiers || (exports.Modifiers = Modifiers = {}));

const CMD_OR_CTRL = _Keyboard.isMac ? Modifiers.COMMAND : Modifiers.CONTROL; // Meta-key representing the digits [0-9] often found at the top of standard keyboard layouts

exports.CMD_OR_CTRL = CMD_OR_CTRL;
const DIGITS = "digits";
exports.DIGITS = DIGITS;
const shortcuts = {
  [Categories.COMPOSER]: [{
    keybinds: [{
      modifiers: [CMD_OR_CTRL],
      key: _Keyboard.Key.B
    }],
    description: (0, _languageHandler._td)("Toggle Bold")
  }, {
    keybinds: [{
      modifiers: [CMD_OR_CTRL],
      key: _Keyboard.Key.I
    }],
    description: (0, _languageHandler._td)("Toggle Italics")
  }, {
    keybinds: [{
      modifiers: [CMD_OR_CTRL],
      key: _Keyboard.Key.GREATER_THAN
    }],
    description: (0, _languageHandler._td)("Toggle Quote")
  }, {
    keybinds: [{
      modifiers: [Modifiers.SHIFT],
      key: _Keyboard.Key.ENTER
    }],
    description: (0, _languageHandler._td)("New line")
  }, {
    keybinds: [{
      key: _Keyboard.Key.ARROW_UP
    }, {
      key: _Keyboard.Key.ARROW_DOWN
    }],
    description: (0, _languageHandler._td)("Navigate recent messages to edit")
  }, {
    keybinds: [{
      modifiers: [CMD_OR_CTRL],
      key: _Keyboard.Key.HOME
    }, {
      modifiers: [CMD_OR_CTRL],
      key: _Keyboard.Key.END
    }],
    description: (0, _languageHandler._td)("Jump to start/end of the composer")
  }, {
    keybinds: [{
      modifiers: [Modifiers.CONTROL, Modifiers.ALT],
      key: _Keyboard.Key.ARROW_UP
    }, {
      modifiers: [Modifiers.CONTROL, Modifiers.ALT],
      key: _Keyboard.Key.ARROW_DOWN
    }],
    description: (0, _languageHandler._td)("Navigate composer history")
  }, {
    keybinds: [{
      key: _Keyboard.Key.ESCAPE
    }],
    description: (0, _languageHandler._td)("Cancel replying to a message")
  }],
  [Categories.CALLS]: [{
    keybinds: [{
      modifiers: [CMD_OR_CTRL],
      key: _Keyboard.Key.D
    }],
    description: (0, _languageHandler._td)("Toggle microphone mute")
  }, {
    keybinds: [{
      modifiers: [CMD_OR_CTRL],
      key: _Keyboard.Key.E
    }],
    description: (0, _languageHandler._td)("Toggle video on/off")
  }],
  [Categories.ROOM]: [{
    keybinds: [{
      key: _Keyboard.Key.PAGE_UP
    }, {
      key: _Keyboard.Key.PAGE_DOWN
    }],
    description: (0, _languageHandler._td)("Scroll up/down in the timeline")
  }, {
    keybinds: [{
      key: _Keyboard.Key.ESCAPE
    }],
    description: (0, _languageHandler._td)("Dismiss read marker and jump to bottom")
  }, {
    keybinds: [{
      modifiers: [Modifiers.SHIFT],
      key: _Keyboard.Key.PAGE_UP
    }],
    description: (0, _languageHandler._td)("Jump to oldest unread message")
  }, {
    keybinds: [{
      modifiers: [CMD_OR_CTRL, Modifiers.SHIFT],
      key: _Keyboard.Key.U
    }],
    description: (0, _languageHandler._td)("Upload a file")
  }, {
    keybinds: [{
      modifiers: [CMD_OR_CTRL],
      key: _Keyboard.Key.F
    }],
    description: (0, _languageHandler._td)("Search (must be enabled)")
  }],
  [Categories.ROOM_LIST]: [{
    keybinds: [{
      modifiers: [CMD_OR_CTRL],
      key: _Keyboard.Key.K
    }],
    description: (0, _languageHandler._td)("Jump to room search")
  }, {
    keybinds: [{
      key: _Keyboard.Key.ARROW_UP
    }, {
      key: _Keyboard.Key.ARROW_DOWN
    }],
    description: (0, _languageHandler._td)("Navigate up/down in the room list")
  }, {
    keybinds: [{
      key: _Keyboard.Key.ENTER
    }],
    description: (0, _languageHandler._td)("Select room from the room list")
  }, {
    keybinds: [{
      key: _Keyboard.Key.ARROW_LEFT
    }],
    description: (0, _languageHandler._td)("Collapse room list section")
  }, {
    keybinds: [{
      key: _Keyboard.Key.ARROW_RIGHT
    }],
    description: (0, _languageHandler._td)("Expand room list section")
  }, {
    keybinds: [{
      key: _Keyboard.Key.ESCAPE
    }],
    description: (0, _languageHandler._td)("Clear room list filter field")
  }],
  [Categories.NAVIGATION]: [{
    keybinds: [{
      modifiers: [Modifiers.ALT, Modifiers.SHIFT],
      key: _Keyboard.Key.ARROW_UP
    }, {
      modifiers: [Modifiers.ALT, Modifiers.SHIFT],
      key: _Keyboard.Key.ARROW_DOWN
    }],
    description: (0, _languageHandler._td)("Previous/next unread room or DM")
  }, {
    keybinds: [{
      modifiers: [Modifiers.ALT],
      key: _Keyboard.Key.ARROW_UP
    }, {
      modifiers: [Modifiers.ALT],
      key: _Keyboard.Key.ARROW_DOWN
    }],
    description: (0, _languageHandler._td)("Previous/next room or DM")
  }, {
    keybinds: [{
      modifiers: [CMD_OR_CTRL],
      key: _Keyboard.Key.BACKTICK
    }],
    description: (0, _languageHandler._td)("Toggle the top left menu")
  }, {
    keybinds: [{
      key: _Keyboard.Key.ESCAPE
    }],
    description: (0, _languageHandler._td)("Close dialog or context menu")
  }, {
    keybinds: [{
      key: _Keyboard.Key.ENTER
    }, {
      key: _Keyboard.Key.SPACE
    }],
    description: (0, _languageHandler._td)("Activate selected button")
  }, {
    keybinds: [{
      modifiers: [CMD_OR_CTRL],
      key: _Keyboard.Key.PERIOD
    }],
    description: (0, _languageHandler._td)("Toggle right panel")
  }, {
    keybinds: [{
      modifiers: [CMD_OR_CTRL],
      key: _Keyboard.Key.SLASH
    }],
    description: (0, _languageHandler._td)("Toggle this dialog")
  }, {
    keybinds: [{
      modifiers: [Modifiers.CONTROL, _Keyboard.isMac ? Modifiers.SHIFT : Modifiers.ALT],
      key: _Keyboard.Key.H
    }],
    description: (0, _languageHandler._td)("Go to Home View")
  }],
  [Categories.AUTOCOMPLETE]: [{
    keybinds: [{
      key: _Keyboard.Key.ARROW_UP
    }, {
      key: _Keyboard.Key.ARROW_DOWN
    }],
    description: (0, _languageHandler._td)("Move autocomplete selection up/down")
  }, {
    keybinds: [{
      key: _Keyboard.Key.ESCAPE
    }],
    description: (0, _languageHandler._td)("Cancel autocomplete")
  }]
};
const categoryOrder = [Categories.COMPOSER, Categories.AUTOCOMPLETE, Categories.ROOM, Categories.ROOM_LIST, Categories.NAVIGATION, Categories.CALLS];
const modifierIcon = {
  [Modifiers.COMMAND]: "⌘"
};

if (_Keyboard.isMac) {
  modifierIcon[Modifiers.ALT] = "⌥";
}

const alternateKeyName = {
  [_Keyboard.Key.PAGE_UP]: (0, _languageHandler._td)("Page Up"),
  [_Keyboard.Key.PAGE_DOWN]: (0, _languageHandler._td)("Page Down"),
  [_Keyboard.Key.ESCAPE]: (0, _languageHandler._td)("Esc"),
  [_Keyboard.Key.ENTER]: (0, _languageHandler._td)("Enter"),
  [_Keyboard.Key.SPACE]: (0, _languageHandler._td)("Space"),
  [_Keyboard.Key.HOME]: (0, _languageHandler._td)("Home"),
  [_Keyboard.Key.END]: (0, _languageHandler._td)("End"),
  [DIGITS]: (0, _languageHandler._td)("[number]")
};
const keyIcon = {
  [_Keyboard.Key.ARROW_UP]: "↑",
  [_Keyboard.Key.ARROW_DOWN]: "↓",
  [_Keyboard.Key.ARROW_LEFT]: "←",
  [_Keyboard.Key.ARROW_RIGHT]: "→"
};

const Shortcut = ({
  shortcut
}) => {
  const classes = (0, _classnames.default)({
    "mx_KeyboardShortcutsDialog_inline": shortcut.keybinds.every(k => !k.modifiers || k.modifiers.length === 0)
  });
  return /*#__PURE__*/React.createElement("div", {
    className: classes
  }, /*#__PURE__*/React.createElement("h5", null, (0, _languageHandler._t)(shortcut.description)), shortcut.keybinds.map(s => {
    let text = s.key;

    if (alternateKeyName[s.key]) {
      text = (0, _languageHandler._t)(alternateKeyName[s.key]);
    } else if (keyIcon[s.key]) {
      text = keyIcon[s.key];
    }

    return /*#__PURE__*/React.createElement("div", {
      key: s.key
    }, s.modifiers && s.modifiers.map(m => {
      return /*#__PURE__*/React.createElement(React.Fragment, {
        key: m
      }, /*#__PURE__*/React.createElement("kbd", null, modifierIcon[m] || (0, _languageHandler._t)(m)), "+");
    }), /*#__PURE__*/React.createElement("kbd", null, text));
  }));
};

let activeModal = null;

const toggleDialog = () => {
  if (activeModal) {
    activeModal.close();
    activeModal = null;
    return;
  }

  const sections = categoryOrder.map(category => {
    const list = shortcuts[category];
    return /*#__PURE__*/React.createElement("div", {
      className: "mx_KeyboardShortcutsDialog_category",
      key: category
    }, /*#__PURE__*/React.createElement("h3", null, (0, _languageHandler._t)(category)), /*#__PURE__*/React.createElement("div", null, list.map(shortcut => /*#__PURE__*/React.createElement(Shortcut, {
      key: shortcut.description,
      shortcut: shortcut
    }))));
  });
  activeModal = _Modal.default.createTrackedDialog("Keyboard Shortcuts", "", _InfoDialog.default, {
    className: "mx_KeyboardShortcutsDialog",
    title: (0, _languageHandler._t)("Keyboard Shortcuts"),
    description: sections,
    hasCloseButton: true,
    onKeyDown: ev => {
      if (ev.ctrlKey && !ev.shiftKey && !ev.altKey && !ev.metaKey && ev.key === _Keyboard.Key.SLASH) {
        // Ctrl + /
        ev.stopPropagation();
        activeModal.close();
      }
    },
    onFinished: () => {
      activeModal = null;
    }
  });
};

exports.toggleDialog = toggleDialog;

const registerShortcut = (category, defn) => {
  shortcuts[category].push(defn);
};

exports.registerShortcut = registerShortcut;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,